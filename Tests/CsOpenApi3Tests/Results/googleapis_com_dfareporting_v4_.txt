//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Contains properties of a Campaign Manager account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Account
	{
		
		/// <summary>
		/// Account permissions assigned to this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountPermissionIds")]
		public string[] AccountPermissionIds { get; set; }
		
		/// <summary>
		/// Profile for this account. This is a read-only field that can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountProfile")]
		public System.Nullable<AccountAccountProfile> AccountProfile { get; set; }
		
		/// <summary>
		/// Whether this account is active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Maximum number of active ads allowed for this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeAdsLimitTier")]
		public System.Nullable<AccountActiveAdsLimitTier> ActiveAdsLimitTier { get; set; }
		
		/// <summary>
		/// Whether to serve creatives with Active View tags. If disabled, viewability data will not be available for any impressions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeViewOptOut")]
		public System.Nullable<System.Boolean> ActiveViewOptOut { get; set; }
		
		/// <summary>
		/// User role permissions available to the user roles of this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availablePermissionIds")]
		public string[] AvailablePermissionIds { get; set; }
		
		/// <summary>
		/// ID of the country associated with this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryId")]
		public string CountryId { get; set; }
		
		/// <summary>
		/// ID of currency associated with this account. This is a required field. Acceptable values are: - "1" for USD - "2" for GBP - "3" for ESP - "4" for SEK - "5" for CAD - "6" for JPY - "7" for DEM - "8" for AUD - "9" for FRF - "10" for ITL - "11" for DKK - "12" for NOK - "13" for FIM - "14" for ZAR - "15" for IEP - "16" for NLG - "17" for EUR - "18" for KRW - "19" for TWD - "20" for SGD - "21" for CNY - "22" for HKD - "23" for NZD - "24" for MYR - "25" for BRL - "26" for PTE - "28" for CLP - "29" for TRY - "30" for ARS - "31" for PEN - "32" for ILS - "33" for CHF - "34" for VEF - "35" for COP - "36" for GTQ - "37" for PLN - "39" for INR - "40" for THB - "41" for IDR - "42" for CZK - "43" for RON - "44" for HUF - "45" for RUB - "46" for AED - "47" for BGN - "48" for HRK - "49" for MXN - "50" for NGN - "51" for EGP 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyId")]
		public string CurrencyId { get; set; }
		
		/// <summary>
		/// Default placement dimensions for this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultCreativeSizeId")]
		public string DefaultCreativeSizeId { get; set; }
		
		/// <summary>
		/// Description of this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// ID of this account. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#account".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Locale of this account. Acceptable values are: - "cs" (Czech) - "de" (German) - "en" (English) - "en-GB" (English United Kingdom) - "es" (Spanish) - "fr" (French) - "it" (Italian) - "ja" (Japanese) - "ko" (Korean) - "pl" (Polish) - "pt-BR" (Portuguese Brazil) - "ru" (Russian) - "sv" (Swedish) - "tr" (Turkish) - "zh-CN" (Chinese Simplified) - "zh-TW" (Chinese Traditional) 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		/// <summary>
		/// Maximum image size allowed for this account, in kilobytes. Value must be greater than or equal to 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumImageSize")]
		public string MaximumImageSize { get; set; }
		
		/// <summary>
		/// Name of this account. This is a required field, and must be less than 128 characters long and be globally unique.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Whether campaigns created in this account will be enabled for Nielsen OCR reach ratings by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nielsenOcrEnabled")]
		public System.Nullable<System.Boolean> NielsenOcrEnabled { get; set; }
		
		/// <summary>
		/// Reporting Configuration
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportsConfiguration")]
		public ReportsConfiguration ReportsConfiguration { get; set; }
		
		/// <summary>
		/// Share Path to Conversion reports with Twitter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shareReportsWithTwitter")]
		public System.Nullable<System.Boolean> ShareReportsWithTwitter { get; set; }
		
		/// <summary>
		/// File size limit in kilobytes of Rich Media teaser creatives. Acceptable values are 1 to 10240, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teaserSizeLimit")]
		public string TeaserSizeLimit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountAccountProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_PROFILE_BASIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_PROFILE_STANDARD = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountActiveAdsLimitTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE_ADS_TIER_40K = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE_ADS_TIER_75K = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE_ADS_TIER_100K = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE_ADS_TIER_200K = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE_ADS_TIER_300K = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE_ADS_TIER_500K = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE_ADS_TIER_750K = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE_ADS_TIER_1M = 7,
	}
	
	/// <summary>
	/// Reporting Configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportsConfiguration
	{
		
		/// <summary>
		/// Whether the exposure to conversion report is enabled. This report shows detailed pathway information on up to 10 of the most recent ad exposures seen by a user before converting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exposureToConversionEnabled")]
		public System.Nullable<System.Boolean> ExposureToConversionEnabled { get; set; }
		
		/// <summary>
		/// Lookback configuration settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lookbackConfiguration")]
		public LookbackConfiguration LookbackConfiguration { get; set; }
		
		/// <summary>
		/// Report generation time zone ID of this account. This is a required field that cannot be changed on update. Acceptable values are: - "1" for "America/New_York" - "2" for "Europe/London" - "3" for "Europe/Paris" - "4" for "Africa/Johannesburg" - "5" for "Asia/Jerusalem" - "6" for "Asia/Shanghai" - "7" for "Asia/Hong_Kong" - "8" for "Asia/Tokyo" - "9" for "Australia/Sydney" - "10" for "Asia/Dubai" - "11" for "America/Los_Angeles" - "12" for "Pacific/Auckland" - "13" for "America/Sao_Paulo" - "16" for "America/Asuncion" - "17" for "America/Chicago" - "18" for "America/Denver" - "19" for "America/St_Johns" - "20" for "Asia/Dhaka" - "21" for "Asia/Jakarta" - "22" for "Asia/Kabul" - "23" for "Asia/Karachi" - "24" for "Asia/Calcutta" - "25" for "Asia/Pyongyang" - "26" for "Asia/Rangoon" - "27" for "Atlantic/Cape_Verde" - "28" for "Atlantic/South_Georgia" - "29" for "Australia/Adelaide" - "30" for "Australia/Lord_Howe" - "31" for "Europe/Moscow" - "32" for "Pacific/Kiritimati" - "35" for "Pacific/Norfolk" - "36" for "Pacific/Tongatapu" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportGenerationTimeZoneId")]
		public string ReportGenerationTimeZoneId { get; set; }
	}
	
	/// <summary>
	/// Lookback configuration settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LookbackConfiguration
	{
		
		/// <summary>
		/// Lookback window, in days, from the last time a given user clicked on one of your ads. If you enter 0, clicks will not be considered as triggering events for floodlight tracking. If you leave this field blank, the default value for your account will be used. Acceptable values are 0 to 90, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickDuration")]
		public System.Nullable<System.Int32> ClickDuration { get; set; }
		
		/// <summary>
		/// Lookback window, in days, from the last time a given user viewed one of your ads. If you enter 0, impressions will not be considered as triggering events for floodlight tracking. If you leave this field blank, the default value for your account will be used. Acceptable values are 0 to 90, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postImpressionActivitiesDuration")]
		public System.Nullable<System.Int32> PostImpressionActivitiesDuration { get; set; }
	}
	
	/// <summary>
	/// Gets a summary of active ads in an account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountActiveAdSummary
	{
		
		/// <summary>
		/// ID of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Ads that have been activated for the account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeAds")]
		public string ActiveAds { get; set; }
		
		/// <summary>
		/// Maximum number of active ads allowed for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeAdsLimitTier")]
		public AccountActiveAdsLimitTier ActiveAdsLimitTier { get; set; }
		
		/// <summary>
		/// Ads that can be activated for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableAds")]
		public string AvailableAds { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#accountActiveAdSummary".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// AccountPermissions contains information about a particular account permission. Some features of Campaign Manager require an account permission to be present in the account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountPermission
	{
		
		/// <summary>
		/// Account profiles associated with this account permission. Possible values are: - "ACCOUNT_PROFILE_BASIC" - "ACCOUNT_PROFILE_STANDARD" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountProfiles")]
		public AccountAccountProfile[] AccountProfiles { get; set; }
		
		/// <summary>
		/// ID of this account permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#accountPermission".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Administrative level required to enable this account permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="level")]
		public System.Nullable<AccountPermissionLevel> Level { get; set; }
		
		/// <summary>
		/// Name of this account permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Permission group of this account permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissionGroupId")]
		public string PermissionGroupId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountPermissionLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMINISTRATOR = 1,
	}
	
	/// <summary>
	/// AccountPermissionGroups contains a mapping of permission group IDs to names. A permission group is a grouping of account permissions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountPermissionGroup
	{
		
		/// <summary>
		/// ID of this account permission group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#accountPermissionGroup".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Name of this account permission group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Account Permission Group List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountPermissionGroupsListResponse
	{
		
		/// <summary>
		/// Account permission group collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountPermissionGroups")]
		public AccountPermissionGroup[] AccountPermissionGroups { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#accountPermissionGroupGroupsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// Account Permission List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountPermissionsListResponse
	{
		
		/// <summary>
		/// Account permission collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountPermissions")]
		public AccountPermission[] AccountPermissions { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#accountPermissionsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// AccountUserProfiles contains properties of a Campaign Manager user profile. This resource is specifically for managing user profiles, whereas UserProfiles is for accessing the API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountUserProfile
	{
		
		/// <summary>
		/// Account ID of the user profile. This is a read-only field that can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Whether this user profile is active. This defaults to false, and must be set true on insert for the user profile to be usable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Object Filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserFilter")]
		public ObjectFilter AdvertiserFilter { get; set; }
		
		/// <summary>
		/// Object Filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaignFilter")]
		public ObjectFilter CampaignFilter { get; set; }
		
		/// <summary>
		/// Comments for this user profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public string Comments { get; set; }
		
		/// <summary>
		/// Email of the user profile. The email addresss must be linked to a Google Account. This field is required on insertion and is read-only after insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// ID of the user profile. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#accountUserProfile".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Locale of the user profile. This is a required field. Acceptable values are: - "cs" (Czech) - "de" (German) - "en" (English) - "en-GB" (English United Kingdom) - "es" (Spanish) - "fr" (French) - "it" (Italian) - "ja" (Japanese) - "ko" (Korean) - "pl" (Polish) - "pt-BR" (Portuguese Brazil) - "ru" (Russian) - "sv" (Swedish) - "tr" (Turkish) - "zh-CN" (Chinese Simplified) - "zh-TW" (Chinese Traditional) 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		/// <summary>
		/// Name of the user profile. This is a required field. Must be less than 64 characters long, must be globally unique, and cannot contain whitespace or any of the following characters: "&;<>"#%,".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Object Filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="siteFilter")]
		public ObjectFilter SiteFilter { get; set; }
		
		/// <summary>
		/// Subaccount ID of the user profile. This is a read-only field that can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subaccountId")]
		public string SubaccountId { get; set; }
		
		/// <summary>
		/// Trafficker type of this user profile. This is a read-only field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="traffickerType")]
		public System.Nullable<AccountUserProfileTraffickerType> TraffickerType { get; set; }
		
		/// <summary>
		/// User type of the user profile. This is a read-only field that can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAccessType")]
		public System.Nullable<AccountUserProfileUserAccessType> UserAccessType { get; set; }
		
		/// <summary>
		/// Object Filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userRoleFilter")]
		public ObjectFilter UserRoleFilter { get; set; }
		
		/// <summary>
		/// User role ID of the user profile. This is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userRoleId")]
		public string UserRoleId { get; set; }
	}
	
	/// <summary>
	/// Object Filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ObjectFilter
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#objectFilter".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Applicable when status is ASSIGNED. The user has access to objects with these object IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectIds")]
		public string[] ObjectIds { get; set; }
		
		/// <summary>
		/// Status of the filter. NONE means the user has access to none of the objects. ALL means the user has access to all objects. ASSIGNED means the user has access to the objects with IDs in the objectIds list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<ObjectFilterStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ObjectFilterStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSIGNED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountUserProfileTraffickerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_NON_TRAFFICKER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_TRAFFICKER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTERNAL_TRAFFICKER = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountUserProfileUserAccessType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NORMAL_USER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUPER_USER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_ADMINISTRATOR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READ_ONLY_SUPER_USER = 3,
	}
	
	/// <summary>
	/// Account User Profile List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountUserProfilesListResponse
	{
		
		/// <summary>
		/// Account user profile collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountUserProfiles")]
		public AccountUserProfile[] AccountUserProfiles { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#accountUserProfilesListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to be used for the next list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Account List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountsListResponse
	{
		
		/// <summary>
		/// Account collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accounts")]
		public Account[] Accounts { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#accountsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to be used for the next list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Represents an activity group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Activities
	{
		
		/// <summary>
		/// List of activity filters. The dimension values need to be all either of type "dfa:activity" or "dfa:activityGroup".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public DimensionValue[] Filters { get; set; }
		
		/// <summary>
		/// The kind of resource this is, in this case dfareporting#activities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// List of names of floodlight activity metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricNames")]
		public string[] MetricNames { get; set; }
	}
	
	/// <summary>
	/// Represents a DimensionValue resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DimensionValue
	{
		
		/// <summary>
		/// The name of the dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionName")]
		public string DimensionName { get; set; }
		
		/// <summary>
		/// The eTag of this response for caching purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ID associated with the value if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The kind of resource this is, in this case dfareporting#dimensionValue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Determines how the 'value' field is matched when filtering. If not specified, defaults to EXACT. If set to WILDCARD_EXPRESSION, '*' is allowed as a placeholder for variable length character sequences, and it can be escaped with a backslash. Note, only paid search dimensions ('dfa:paidSearch*') allow a matchType other than EXACT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchType")]
		public System.Nullable<DimensionValueMatchType> MatchType { get; set; }
		
		/// <summary>
		/// The value of the dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DimensionValueMatchType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXACT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BEGINS_WITH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTAINS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WILDCARD_EXPRESSION = 3,
	}
	
	/// <summary>
	/// Contains properties of a Campaign Manager ad.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Ad
	{
		
		/// <summary>
		/// Account ID of this ad. This is a read-only field that can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Whether this ad is active. When true, archived must be false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Advertiser ID of this ad. This is a required field on insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserIdDimensionValue")]
		public DimensionValue AdvertiserIdDimensionValue { get; set; }
		
		/// <summary>
		/// Whether this ad is archived. When true, active must be false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="archived")]
		public System.Nullable<System.Boolean> Archived { get; set; }
		
		/// <summary>
		/// Audience segment ID that is being targeted for this ad. Applicable when type is AD_SERVING_STANDARD_AD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audienceSegmentId")]
		public string AudienceSegmentId { get; set; }
		
		/// <summary>
		/// Campaign ID of this ad. This is a required field on insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaignId")]
		public string CampaignId { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaignIdDimensionValue")]
		public DimensionValue CampaignIdDimensionValue { get; set; }
		
		/// <summary>
		/// Click-through URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickThroughUrl")]
		public ClickThroughUrl ClickThroughUrl { get; set; }
		
		/// <summary>
		/// Click Through URL Suffix settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickThroughUrlSuffixProperties")]
		public ClickThroughUrlSuffixProperties ClickThroughUrlSuffixProperties { get; set; }
		
		/// <summary>
		/// Comments for this ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public string Comments { get; set; }
		
		/// <summary>
		/// Compatibility of this ad. Applicable when type is AD_SERVING_DEFAULT_AD. DISPLAY and DISPLAY_INTERSTITIAL refer to either rendering on desktop or on mobile devices or in mobile apps for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are only used for existing default ads. New mobile placements must be assigned DISPLAY or DISPLAY_INTERSTITIAL and default ads created for those placements will be limited to those compatibility types. IN_STREAM_VIDEO refers to rendering in-stream video ads developed with the VAST standard.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compatibility")]
		public System.Nullable<AdCompatibility> Compatibility { get; set; }
		
		/// <summary>
		/// Modification timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createInfo")]
		public LastModifiedInfo CreateInfo { get; set; }
		
		/// <summary>
		/// Creative group assignments for this ad. Applicable when type is AD_SERVING_CLICK_TRACKER. Only one assignment per creative group number is allowed for a maximum of two assignments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeGroupAssignments")]
		public CreativeGroupAssignment[] CreativeGroupAssignments { get; set; }
		
		/// <summary>
		/// Creative Rotation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeRotation")]
		public CreativeRotation CreativeRotation { get; set; }
		
		/// <summary>
		/// Day Part Targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dayPartTargeting")]
		public DayPartTargeting DayPartTargeting { get; set; }
		
		/// <summary>
		/// Properties of inheriting and overriding the default click-through event tag. A campaign may override the event tag defined at the advertiser level, and an ad may also override the campaign's setting further.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultClickThroughEventTagProperties")]
		public DefaultClickThroughEventTagProperties DefaultClickThroughEventTagProperties { get; set; }
		
		/// <summary>
		/// Delivery Schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliverySchedule")]
		public DeliverySchedule DeliverySchedule { get; set; }
		
		/// <summary>
		/// Whether this ad is a dynamic click tracker. Applicable when type is AD_SERVING_CLICK_TRACKER. This is a required field on insert, and is read-only after insert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dynamicClickTracker")]
		public System.Nullable<System.Boolean> DynamicClickTracker { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Event tag overrides for this ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventTagOverrides")]
		public EventTagOverride[] EventTagOverrides { get; set; }
		
		/// <summary>
		/// Geographical Targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoTargeting")]
		public GeoTargeting GeoTargeting { get; set; }
		
		/// <summary>
		/// ID of this ad. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idDimensionValue")]
		public DimensionValue IdDimensionValue { get; set; }
		
		/// <summary>
		/// Key Value Targeting Expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyValueTargetingExpression")]
		public KeyValueTargetingExpression KeyValueTargetingExpression { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#ad".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Language Targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageTargeting")]
		public LanguageTargeting LanguageTargeting { get; set; }
		
		/// <summary>
		/// Modification timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedInfo")]
		public LastModifiedInfo LastModifiedInfo { get; set; }
		
		/// <summary>
		/// Name of this ad. This is a required field and must be less than 256 characters long.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Placement assignments for this ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placementAssignments")]
		public PlacementAssignment[] PlacementAssignments { get; set; }
		
		/// <summary>
		/// Remarketing List Targeting Expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remarketingListExpression")]
		public ListTargetingExpression RemarketingListExpression { get; set; }
		
		/// <summary>
		/// Represents the dimensions of ads, placements, creatives, or creative assets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public Size Size { get; set; }
		
		/// <summary>
		/// Whether this ad is ssl compliant. This is a read-only field that is auto-generated when the ad is inserted or updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslCompliant")]
		public System.Nullable<System.Boolean> SslCompliant { get; set; }
		
		/// <summary>
		/// Whether this ad requires ssl. This is a read-only field that is auto-generated when the ad is inserted or updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslRequired")]
		public System.Nullable<System.Boolean> SslRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// Subaccount ID of this ad. This is a read-only field that can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subaccountId")]
		public string SubaccountId { get; set; }
		
		/// <summary>
		/// Targeting template ID, used to apply preconfigured targeting information to this ad. This cannot be set while any of dayPartTargeting, geoTargeting, keyValueTargetingExpression, languageTargeting, remarketingListExpression, or technologyTargeting are set. Applicable when type is AD_SERVING_STANDARD_AD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingTemplateId")]
		public string TargetingTemplateId { get; set; }
		
		/// <summary>
		/// Technology Targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="technologyTargeting")]
		public TechnologyTargeting TechnologyTargeting { get; set; }
		
		/// <summary>
		/// Type of ad. This is a required field on insertion. Note that default ads ( AD_SERVING_DEFAULT_AD) cannot be created directly (see Creative resource).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<AdType> Type { get; set; }
	}
	
	/// <summary>
	/// Click-through URL
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClickThroughUrl
	{
		
		/// <summary>
		/// Read-only convenience field representing the actual URL that will be used for this click-through. The URL is computed as follows: - If defaultLandingPage is enabled then the campaign's default landing page URL is assigned to this field. - If defaultLandingPage is not enabled and a landingPageId is specified then that landing page's URL is assigned to this field. - If neither of the above cases apply, then the customClickThroughUrl is assigned to this field. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computedClickThroughUrl")]
		public string ComputedClickThroughUrl { get; set; }
		
		/// <summary>
		/// Custom click-through URL. Applicable if the defaultLandingPage field is set to false and the landingPageId field is left unset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customClickThroughUrl")]
		public string CustomClickThroughUrl { get; set; }
		
		/// <summary>
		/// Whether the campaign default landing page is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultLandingPage")]
		public System.Nullable<System.Boolean> DefaultLandingPage { get; set; }
		
		/// <summary>
		/// ID of the landing page for the click-through URL. Applicable if the defaultLandingPage field is set to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="landingPageId")]
		public string LandingPageId { get; set; }
	}
	
	/// <summary>
	/// Click Through URL Suffix settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClickThroughUrlSuffixProperties
	{
		
		/// <summary>
		/// Click-through URL suffix to apply to all ads in this entity's scope. Must be less than 128 characters long.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickThroughUrlSuffix")]
		public string ClickThroughUrlSuffix { get; set; }
		
		/// <summary>
		/// Whether this entity should override the inherited click-through URL suffix with its own defined value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overrideInheritedSuffix")]
		public System.Nullable<System.Boolean> OverrideInheritedSuffix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AdCompatibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISPLAY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISPLAY_INTERSTITIAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_INTERSTITIAL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_STREAM_VIDEO = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_STREAM_AUDIO = 5,
	}
	
	/// <summary>
	/// Modification timestamp.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LastModifiedInfo
	{
		
		/// <summary>
		/// Timestamp of the last change in milliseconds since epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
	}
	
	/// <summary>
	/// Creative Group Assignment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreativeGroupAssignment
	{
		
		/// <summary>
		/// ID of the creative group to be assigned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeGroupId")]
		public string CreativeGroupId { get; set; }
		
		/// <summary>
		/// Creative group number of the creative group assignment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeGroupNumber")]
		public System.Nullable<CreativeGroupAssignmentCreativeGroupNumber> CreativeGroupNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeGroupAssignmentCreativeGroupNumber
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_GROUP_ONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_GROUP_TWO = 1,
	}
	
	/// <summary>
	/// Creative Rotation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreativeRotation
	{
		
		/// <summary>
		/// Creative assignments in this creative rotation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeAssignments")]
		public CreativeAssignment[] CreativeAssignments { get; set; }
		
		/// <summary>
		/// Creative optimization configuration that is used by this ad. It should refer to one of the existing optimization configurations in the ad's campaign. If it is unset or set to 0, then the campaign's default optimization configuration will be used for this ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeOptimizationConfigurationId")]
		public string CreativeOptimizationConfigurationId { get; set; }
		
		/// <summary>
		/// Type of creative rotation. Can be used to specify whether to use sequential or random rotation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CreativeRotationType> Type { get; set; }
		
		/// <summary>
		/// Strategy for calculating weights. Used with CREATIVE_ROTATION_TYPE_RANDOM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weightCalculationStrategy")]
		public System.Nullable<CreativeRotationWeightCalculationStrategy> WeightCalculationStrategy { get; set; }
	}
	
	/// <summary>
	/// Creative Assignment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreativeAssignment
	{
		
		/// <summary>
		/// Whether this creative assignment is active. When true, the creative will be included in the ad's rotation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Whether applicable event tags should fire when this creative assignment is rendered. If this value is unset when the ad is inserted or updated, it will default to true for all creative types EXCEPT for INTERNAL_REDIRECT, INTERSTITIAL_INTERNAL_REDIRECT, and INSTREAM_VIDEO.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applyEventTags")]
		public System.Nullable<System.Boolean> ApplyEventTags { get; set; }
		
		/// <summary>
		/// Click-through URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickThroughUrl")]
		public ClickThroughUrl ClickThroughUrl { get; set; }
		
		/// <summary>
		/// Companion creative overrides for this creative assignment. Applicable to video ads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="companionCreativeOverrides")]
		public CompanionClickThroughOverride[] CompanionCreativeOverrides { get; set; }
		
		/// <summary>
		/// Creative group assignments for this creative assignment. Only one assignment per creative group number is allowed for a maximum of two assignments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeGroupAssignments")]
		public CreativeGroupAssignment[] CreativeGroupAssignments { get; set; }
		
		/// <summary>
		/// ID of the creative to be assigned. This is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeId")]
		public string CreativeId { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeIdDimensionValue")]
		public DimensionValue CreativeIdDimensionValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Rich media exit overrides for this creative assignment. Applicable when the creative type is any of the following: - DISPLAY - RICH_MEDIA_INPAGE - RICH_MEDIA_INPAGE_FLOATING - RICH_MEDIA_IM_EXPAND - RICH_MEDIA_EXPANDING - RICH_MEDIA_INTERSTITIAL_FLOAT - RICH_MEDIA_MOBILE_IN_APP - RICH_MEDIA_MULTI_FLOATING - RICH_MEDIA_PEEL_DOWN - VPAID_LINEAR - VPAID_NON_LINEAR 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="richMediaExitOverrides")]
		public RichMediaExitOverride[] RichMediaExitOverrides { get; set; }
		
		/// <summary>
		/// Sequence number of the creative assignment, applicable when the rotation type is CREATIVE_ROTATION_TYPE_SEQUENTIAL. Acceptable values are 1 to 65535, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sequence")]
		public System.Nullable<System.Int32> Sequence { get; set; }
		
		/// <summary>
		/// Whether the creative to be assigned is SSL-compliant. This is a read-only field that is auto-generated when the ad is inserted or updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslCompliant")]
		public System.Nullable<System.Boolean> SslCompliant { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// Weight of the creative assignment, applicable when the rotation type is CREATIVE_ROTATION_TYPE_RANDOM. Value must be greater than or equal to 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Int32> Weight { get; set; }
	}
	
	/// <summary>
	/// Companion Click-through override.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompanionClickThroughOverride
	{
		
		/// <summary>
		/// Click-through URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickThroughUrl")]
		public ClickThroughUrl ClickThroughUrl { get; set; }
		
		/// <summary>
		/// ID of the creative for this companion click-through override.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeId")]
		public string CreativeId { get; set; }
	}
	
	/// <summary>
	/// Rich Media Exit Override.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RichMediaExitOverride
	{
		
		/// <summary>
		/// Click-through URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickThroughUrl")]
		public ClickThroughUrl ClickThroughUrl { get; set; }
		
		/// <summary>
		/// Whether to use the clickThroughUrl. If false, the creative-level exit will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// ID for the override to refer to a specific exit in the creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exitId")]
		public string ExitId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeRotationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_ROTATION_TYPE_SEQUENTIAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_ROTATION_TYPE_RANDOM = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeRotationWeightCalculationStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEIGHT_STRATEGY_EQUAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEIGHT_STRATEGY_CUSTOM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEIGHT_STRATEGY_HIGHEST_CTR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEIGHT_STRATEGY_OPTIMIZED = 3,
	}
	
	/// <summary>
	/// Day Part Targeting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DayPartTargeting
	{
		
		/// <summary>
		/// Days of the week when the ad will serve. Acceptable values are: - "SUNDAY" - "MONDAY" - "TUESDAY" - "WEDNESDAY" - "THURSDAY" - "FRIDAY" - "SATURDAY" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="daysOfWeek")]
		public string[] DaysOfWeek { get; set; }
		
		/// <summary>
		/// Hours of the day when the ad will serve, where 0 is midnight to 1 AM and 23 is 11 PM to midnight. Can be specified with days of week, in which case the ad would serve during these hours on the specified days. For example if Monday, Wednesday, Friday are the days of week specified and 9-10am, 3-5pm (hours 9, 15, and 16) is specified, the ad would serve Monday, Wednesdays, and Fridays at 9-10am and 3-5pm. Acceptable values are 0 to 23, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hoursOfDay")]
		public int[] HoursOfDay { get; set; }
		
		/// <summary>
		/// Whether or not to use the user's local time. If false, the America/New York time zone applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userLocalTime")]
		public System.Nullable<System.Boolean> UserLocalTime { get; set; }
	}
	
	/// <summary>
	/// Properties of inheriting and overriding the default click-through event tag. A campaign may override the event tag defined at the advertiser level, and an ad may also override the campaign's setting further.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DefaultClickThroughEventTagProperties
	{
		
		/// <summary>
		/// ID of the click-through event tag to apply to all ads in this entity's scope.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultClickThroughEventTagId")]
		public string DefaultClickThroughEventTagId { get; set; }
		
		/// <summary>
		/// Whether this entity should override the inherited default click-through event tag with its own defined value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overrideInheritedEventTag")]
		public System.Nullable<System.Boolean> OverrideInheritedEventTag { get; set; }
	}
	
	/// <summary>
	/// Delivery Schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeliverySchedule
	{
		
		/// <summary>
		/// Frequency Cap.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frequencyCap")]
		public FrequencyCap FrequencyCap { get; set; }
		
		/// <summary>
		/// Whether or not hard cutoff is enabled. If true, the ad will not serve after the end date and time. Otherwise the ad will continue to be served until it has reached its delivery goals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hardCutoff")]
		public System.Nullable<System.Boolean> HardCutoff { get; set; }
		
		/// <summary>
		/// Impression ratio for this ad. This ratio determines how often each ad is served relative to the others. For example, if ad A has an impression ratio of 1 and ad B has an impression ratio of 3, then Campaign Manager will serve ad B three times as often as ad A. Acceptable values are 1 to 10, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impressionRatio")]
		public string ImpressionRatio { get; set; }
		
		/// <summary>
		/// Serving priority of an ad, with respect to other ads. The lower the priority number, the greater the priority with which it is served.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<DeliverySchedulePriority> Priority { get; set; }
	}
	
	/// <summary>
	/// Frequency Cap.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FrequencyCap
	{
		
		/// <summary>
		/// Duration of time, in seconds, for this frequency cap. The maximum duration is 90 days. Acceptable values are 1 to 7776000, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public string Duration { get; set; }
		
		/// <summary>
		/// Number of times an individual user can be served the ad within the specified duration. Acceptable values are 1 to 15, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impressions")]
		public string Impressions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeliverySchedulePriority
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_PRIORITY_01 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_PRIORITY_02 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_PRIORITY_03 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_PRIORITY_04 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_PRIORITY_05 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_PRIORITY_06 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_PRIORITY_07 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_PRIORITY_08 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_PRIORITY_09 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_PRIORITY_10 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_PRIORITY_11 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_PRIORITY_12 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_PRIORITY_13 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_PRIORITY_14 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_PRIORITY_15 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_PRIORITY_16 = 15,
	}
	
	/// <summary>
	/// Event tag override information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EventTagOverride
	{
		
		/// <summary>
		/// Whether this override is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// ID of this event tag override. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Geographical Targeting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GeoTargeting
	{
		
		/// <summary>
		/// Cities to be targeted. For each city only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a city, do not target or exclude the country of the city, and do not target the metro or region of the city.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cities")]
		public City[] Cities { get; set; }
		
		/// <summary>
		/// Countries to be targeted or excluded from targeting, depending on the setting of the excludeCountries field. For each country only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting or excluding a country, do not target regions, cities, metros, or postal codes in the same country.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countries")]
		public Country[] Countries { get; set; }
		
		/// <summary>
		/// Whether or not to exclude the countries in the countries field from targeting. If false, the countries field refers to countries which will be targeted by the ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludeCountries")]
		public System.Nullable<System.Boolean> ExcludeCountries { get; set; }
		
		/// <summary>
		/// Metros to be targeted. For each metro only dmaId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a metro, do not target or exclude the country of the metro.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metros")]
		public Metro[] Metros { get; set; }
		
		/// <summary>
		/// Postal codes to be targeted. For each postal code only id is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a postal code, do not target or exclude the country of the postal code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCodes")]
		public PostalCode[] PostalCodes { get; set; }
		
		/// <summary>
		/// Regions to be targeted. For each region only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a region, do not target or exclude the country of the region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regions")]
		public Region[] Regions { get; set; }
	}
	
	/// <summary>
	/// Contains information about a city that can be targeted by ads.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class City
	{
		
		/// <summary>
		/// Country code of the country to which this city belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// DART ID of the country to which this city belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryDartId")]
		public string CountryDartId { get; set; }
		
		/// <summary>
		/// DART ID of this city. This is the ID used for targeting and generating reports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dartId")]
		public string DartId { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#city".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Metro region code of the metro region (DMA) to which this city belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metroCode")]
		public string MetroCode { get; set; }
		
		/// <summary>
		/// ID of the metro region (DMA) to which this city belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metroDmaId")]
		public string MetroDmaId { get; set; }
		
		/// <summary>
		/// Name of this city.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Region code of the region to which this city belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionCode")]
		public string RegionCode { get; set; }
		
		/// <summary>
		/// DART ID of the region to which this city belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionDartId")]
		public string RegionDartId { get; set; }
	}
	
	/// <summary>
	/// Contains information about a country that can be targeted by ads.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Country
	{
		
		/// <summary>
		/// Country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// DART ID of this country. This is the ID used for targeting and generating reports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dartId")]
		public string DartId { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#country".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Name of this country.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Whether ad serving supports secure servers in this country.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslEnabled")]
		public System.Nullable<System.Boolean> SslEnabled { get; set; }
	}
	
	/// <summary>
	/// Contains information about a metro region that can be targeted by ads.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Metro
	{
		
		/// <summary>
		/// Country code of the country to which this metro region belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// DART ID of the country to which this metro region belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryDartId")]
		public string CountryDartId { get; set; }
		
		/// <summary>
		/// DART ID of this metro region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dartId")]
		public string DartId { get; set; }
		
		/// <summary>
		/// DMA ID of this metro region. This is the ID used for targeting and generating reports, and is equivalent to metro_code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dmaId")]
		public string DmaId { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#metro".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Metro code of this metro region. This is equivalent to dma_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metroCode")]
		public string MetroCode { get; set; }
		
		/// <summary>
		/// Name of this metro region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Contains information about a postal code that can be targeted by ads.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PostalCode
	{
		
		/// <summary>
		/// Postal code. This is equivalent to the id field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Country code of the country to which this postal code belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// DART ID of the country to which this postal code belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryDartId")]
		public string CountryDartId { get; set; }
		
		/// <summary>
		/// ID of this postal code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#postalCode".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// Contains information about a region that can be targeted by ads.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Region
	{
		
		/// <summary>
		/// Country code of the country to which this region belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// DART ID of the country to which this region belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryDartId")]
		public string CountryDartId { get; set; }
		
		/// <summary>
		/// DART ID of this region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dartId")]
		public string DartId { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#region".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Name of this region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Region code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionCode")]
		public string RegionCode { get; set; }
	}
	
	/// <summary>
	/// Key Value Targeting Expression.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KeyValueTargetingExpression
	{
		
		/// <summary>
		/// Keyword expression being targeted by the ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
	}
	
	/// <summary>
	/// Language Targeting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LanguageTargeting
	{
		
		/// <summary>
		/// Languages that this ad targets. For each language only languageId is required. The other fields are populated automatically when the ad is inserted or updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public Language[] Languages { get; set; }
	}
	
	/// <summary>
	/// Contains information about a language that can be targeted by ads.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Language
	{
		
		/// <summary>
		/// Language ID of this language. This is the ID used for targeting and generating reports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#language".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Format of language code is an ISO 639 two-letter language code optionally followed by an underscore followed by an ISO 3166 code. Examples are "en" for English or "zh_CN" for Simplified Chinese.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Name of this language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Placement Assignment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlacementAssignment
	{
		
		/// <summary>
		/// Whether this placement assignment is active. When true, the placement will be included in the ad's rotation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// ID of the placement to be assigned. This is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placementId")]
		public string PlacementId { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placementIdDimensionValue")]
		public DimensionValue PlacementIdDimensionValue { get; set; }
		
		/// <summary>
		/// Whether the placement to be assigned requires SSL. This is a read-only field that is auto-generated when the ad is inserted or updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslRequired")]
		public System.Nullable<System.Boolean> SslRequired { get; set; }
	}
	
	/// <summary>
	/// Remarketing List Targeting Expression.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTargetingExpression
	{
		
		/// <summary>
		/// Expression describing which lists are being targeted by the ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
	}
	
	/// <summary>
	/// Represents the dimensions of ads, placements, creatives, or creative assets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Size
	{
		
		/// <summary>
		/// Height of this size. Acceptable values are 0 to 32767, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// IAB standard size. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iab")]
		public System.Nullable<System.Boolean> Iab { get; set; }
		
		/// <summary>
		/// ID of this size. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#size".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Width of this size. Acceptable values are 0 to 32767, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	/// <summary>
	/// Technology Targeting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TechnologyTargeting
	{
		
		/// <summary>
		/// Browsers that this ad targets. For each browser either set browserVersionId or dartId along with the version numbers. If both are specified, only browserVersionId will be used. The other fields are populated automatically when the ad is inserted or updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="browsers")]
		public Browser[] Browsers { get; set; }
		
		/// <summary>
		/// Connection types that this ad targets. For each connection type only id is required. The other fields are populated automatically when the ad is inserted or updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionTypes")]
		public ConnectionType[] ConnectionTypes { get; set; }
		
		/// <summary>
		/// Mobile carriers that this ad targets. For each mobile carrier only id is required, and the other fields are populated automatically when the ad is inserted or updated. If targeting a mobile carrier, do not set targeting for any zip codes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileCarriers")]
		public MobileCarrier[] MobileCarriers { get; set; }
		
		/// <summary>
		/// Operating system versions that this ad targets. To target all versions, use operatingSystems. For each operating system version, only id is required. The other fields are populated automatically when the ad is inserted or updated. If targeting an operating system version, do not set targeting for the corresponding operating system in operatingSystems.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatingSystemVersions")]
		public OperatingSystemVersion[] OperatingSystemVersions { get; set; }
		
		/// <summary>
		/// Operating systems that this ad targets. To target specific versions, use operatingSystemVersions. For each operating system only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting an operating system, do not set targeting for operating system versions for the same operating system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatingSystems")]
		public OperatingSystem[] OperatingSystems { get; set; }
		
		/// <summary>
		/// Platform types that this ad targets. For example, desktop, mobile, or tablet. For each platform type, only id is required, and the other fields are populated automatically when the ad is inserted or updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platformTypes")]
		public PlatformType[] PlatformTypes { get; set; }
	}
	
	/// <summary>
	/// Contains information about a browser that can be targeted by ads.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Browser
	{
		
		/// <summary>
		/// ID referring to this grouping of browser and version numbers. This is the ID used for targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="browserVersionId")]
		public string BrowserVersionId { get; set; }
		
		/// <summary>
		/// DART ID of this browser. This is the ID used when generating reports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dartId")]
		public string DartId { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#browser".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Major version number (leftmost number) of this browser. For example, for Chrome 5.0.376.86 beta, this field should be set to 5. An asterisk (*) may be used to target any version number, and a question mark (?) may be used to target cases where the version number cannot be identified. For example, Chrome *.* targets any version of Chrome: 1.2, 2.5, 3.5, and so on. Chrome 3.* targets Chrome 3.1, 3.5, but not 4.0. Firefox ?.? targets cases where the ad server knows the browser is Firefox but can't tell which version it is.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="majorVersion")]
		public string MajorVersion { get; set; }
		
		/// <summary>
		/// Minor version number (number after first dot on left) of this browser. For example, for Chrome 5.0.375.86 beta, this field should be set to 0. An asterisk (*) may be used to target any version number, and a question mark (?) may be used to target cases where the version number cannot be identified. For example, Chrome *.* targets any version of Chrome: 1.2, 2.5, 3.5, and so on. Chrome 3.* targets Chrome 3.1, 3.5, but not 4.0. Firefox ?.? targets cases where the ad server knows the browser is Firefox but can't tell which version it is.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minorVersion")]
		public string MinorVersion { get; set; }
		
		/// <summary>
		/// Name of this browser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Contains information about an internet connection type that can be targeted by ads. Clients can use the connection type to target mobile vs. broadband users.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConnectionType
	{
		
		/// <summary>
		/// ID of this connection type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#connectionType".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Name of this connection type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Contains information about a mobile carrier that can be targeted by ads.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MobileCarrier
	{
		
		/// <summary>
		/// Country code of the country to which this mobile carrier belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// DART ID of the country to which this mobile carrier belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryDartId")]
		public string CountryDartId { get; set; }
		
		/// <summary>
		/// ID of this mobile carrier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#mobileCarrier".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Name of this mobile carrier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Contains information about a particular version of an operating system that can be targeted by ads.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OperatingSystemVersion
	{
		
		/// <summary>
		/// ID of this operating system version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#operatingSystemVersion".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Major version (leftmost number) of this operating system version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="majorVersion")]
		public string MajorVersion { get; set; }
		
		/// <summary>
		/// Minor version (number after the first dot) of this operating system version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minorVersion")]
		public string MinorVersion { get; set; }
		
		/// <summary>
		/// Name of this operating system version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Contains information about an operating system that can be targeted by ads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatingSystem")]
		public OperatingSystem OperatingSystem { get; set; }
	}
	
	/// <summary>
	/// Contains information about an operating system that can be targeted by ads.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OperatingSystem
	{
		
		/// <summary>
		/// DART ID of this operating system. This is the ID used for targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dartId")]
		public string DartId { get; set; }
		
		/// <summary>
		/// Whether this operating system is for desktop.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desktop")]
		public System.Nullable<System.Boolean> Desktop { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#operatingSystem".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Whether this operating system is for mobile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobile")]
		public System.Nullable<System.Boolean> Mobile { get; set; }
		
		/// <summary>
		/// Name of this operating system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Contains information about a platform type that can be targeted by ads.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlatformType
	{
		
		/// <summary>
		/// ID of this platform type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#platformType".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Name of this platform type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AdType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_SERVING_STANDARD_AD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_SERVING_DEFAULT_AD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_SERVING_CLICK_TRACKER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_SERVING_TRACKING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_SERVING_BRAND_SAFE_AD = 4,
	}
	
	/// <summary>
	/// Campaign ad blocking settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdBlockingConfiguration
	{
		
		/// <summary>
		/// Whether this campaign has enabled ad blocking. When true, ad blocking is enabled for placements in the campaign, but this may be overridden by site and placement settings. When false, ad blocking is disabled for all placements under the campaign, regardless of site and placement settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Ad Slot
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdSlot
	{
		
		/// <summary>
		/// Comment for this ad slot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		/// <summary>
		/// Ad slot compatibility. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop, mobile devices or in mobile apps for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compatibility")]
		public AdCompatibility Compatibility { get; set; }
		
		/// <summary>
		/// Height of this ad slot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public string Height { get; set; }
		
		/// <summary>
		/// ID of the placement from an external platform that is linked to this ad slot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkedPlacementId")]
		public string LinkedPlacementId { get; set; }
		
		/// <summary>
		/// Name of this ad slot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Payment source type of this ad slot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentSourceType")]
		public System.Nullable<AdSlotPaymentSourceType> PaymentSourceType { get; set; }
		
		/// <summary>
		/// Primary ad slot of a roadblock inventory item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primary")]
		public System.Nullable<System.Boolean> Primary { get; set; }
		
		/// <summary>
		/// Width of this ad slot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public string Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AdSlotPaymentSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLANNING_PAYMENT_SOURCE_TYPE_AGENCY_PAID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLANNING_PAYMENT_SOURCE_TYPE_PUBLISHER_PAID = 1,
	}
	
	/// <summary>
	/// Ad List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdsListResponse
	{
		
		/// <summary>
		/// Ad collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ads")]
		public Ad[] Ads { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#adsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to be used for the next list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Contains properties of a Campaign Manager advertiser.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Advertiser
	{
		
		/// <summary>
		/// Account ID of this advertiser.This is a read-only field that can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// ID of the advertiser group this advertiser belongs to. You can group advertisers for reporting purposes, allowing you to see aggregated information for all advertisers in each group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserGroupId")]
		public string AdvertiserGroupId { get; set; }
		
		/// <summary>
		/// Suffix added to click-through URL of ad creative associations under this advertiser. Must be less than 129 characters long.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickThroughUrlSuffix")]
		public string ClickThroughUrlSuffix { get; set; }
		
		/// <summary>
		/// ID of the click-through event tag to apply by default to the landing pages of this advertiser's campaigns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultClickThroughEventTagId")]
		public string DefaultClickThroughEventTagId { get; set; }
		
		/// <summary>
		/// Default email address used in sender field for tag emails.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultEmail")]
		public string DefaultEmail { get; set; }
		
		/// <summary>
		/// Floodlight configuration ID of this advertiser. The floodlight configuration ID will be created automatically, so on insert this field should be left blank. This field can be set to another advertiser's floodlight configuration ID in order to share that advertiser's floodlight configuration with this advertiser, so long as: - This advertiser's original floodlight configuration is not already associated with floodlight activities or floodlight activity groups. - This advertiser's original floodlight configuration is not already shared with another advertiser. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floodlightConfigurationId")]
		public string FloodlightConfigurationId { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floodlightConfigurationIdDimensionValue")]
		public DimensionValue FloodlightConfigurationIdDimensionValue { get; set; }
		
		/// <summary>
		/// ID of this advertiser. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idDimensionValue")]
		public DimensionValue IdDimensionValue { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#advertiser".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="measurementPartnerLink")]
		public MeasurementPartnerAdvertiserLink MeasurementPartnerLink { get; set; }
		
		/// <summary>
		/// Name of this advertiser. This is a required field and must be less than 256 characters long and unique among advertisers of the same account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Original floodlight configuration before any sharing occurred. Set the floodlightConfigurationId of this advertiser to originalFloodlightConfigurationId to unshare the advertiser's current floodlight configuration. You cannot unshare an advertiser's floodlight configuration if the shared configuration has activities associated with any campaign or placement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalFloodlightConfigurationId")]
		public string OriginalFloodlightConfigurationId { get; set; }
		
		/// <summary>
		/// Status of this advertiser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<AdvertiserStatus> Status { get; set; }
		
		/// <summary>
		/// Subaccount ID of this advertiser.This is a read-only field that can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subaccountId")]
		public string SubaccountId { get; set; }
		
		/// <summary>
		/// Suspension status of this advertiser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suspended")]
		public System.Nullable<System.Boolean> Suspended { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MeasurementPartnerAdvertiserLink
	{
		
		/// <summary>
		/// Status of the partner link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkStatus")]
		public System.Nullable<MeasurementPartnerAdvertiserLinkLinkStatus> LinkStatus { get; set; }
		
		/// <summary>
		/// Measurement partner used for tag wrapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="measurementPartner")]
		public System.Nullable<MeasurementPartnerAdvertiserLinkMeasurementPartner> MeasurementPartner { get; set; }
		
		/// <summary>
		/// partner Advertiser Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerAdvertiserId")]
		public string PartnerAdvertiserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MeasurementPartnerAdvertiserLinkLinkStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEASUREMENT_PARTNER_UNLINKED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEASUREMENT_PARTNER_LINKED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEASUREMENT_PARTNER_LINK_PENDING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEASUREMENT_PARTNER_LINK_FAILURE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEASUREMENT_PARTNER_LINK_OPT_OUT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEASUREMENT_PARTNER_LINK_OPT_OUT_PENDING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEASUREMENT_PARTNER_LINK_WRAPPING_PENDING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEASUREMENT_PARTNER_MODE_CHANGE_PENDING = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MeasurementPartnerAdvertiserLinkMeasurementPartner
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEGRAL_AD_SCIENCE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOUBLE_VERIFY = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AdvertiserStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_HOLD = 1,
	}
	
	/// <summary>
	/// Groups advertisers together so that reports can be generated for the entire group at once.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdvertiserGroup
	{
		
		/// <summary>
		/// Account ID of this advertiser group. This is a read-only field that can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// ID of this advertiser group. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#advertiserGroup".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Name of this advertiser group. This is a required field and must be less than 256 characters long and unique among advertiser groups of the same account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Advertiser Group List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdvertiserGroupsListResponse
	{
		
		/// <summary>
		/// Advertiser group collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserGroups")]
		public AdvertiserGroup[] AdvertiserGroups { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#advertiserGroupsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to be used for the next list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Invoice List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdvertiserInvoicesListResponse
	{
		
		/// <summary>
		/// Invoice collection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoices")]
		public Invoice[] Invoices { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#advertiserInvoicesListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to be used for the next list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Contains information about a single invoice
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Invoice
	{
		
		/// <summary>
		/// The list of summarized campaign information associated with this invoice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaign_summaries")]
		public CampaignSummary[] Campaign_summaries { get; set; }
		
		/// <summary>
		/// The originally issued invoice that is being adjusted by this invoice, if applicable. May appear on invoice PDF as *Reference invoice number*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correctedInvoiceId")]
		public string CorrectedInvoiceId { get; set; }
		
		/// <summary>
		/// Invoice currency code in ISO 4217 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// The invoice due date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dueDate")]
		public string DueDate { get; set; }
		
		/// <summary>
		/// ID of this invoice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The type of invoice document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceType")]
		public System.Nullable<InvoiceInvoiceType> InvoiceType { get; set; }
		
		/// <summary>
		/// The date when the invoice was issued.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issueDate")]
		public string IssueDate { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#invoice".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The ID of the payments account the invoice belongs to. Appears on the invoice PDF as *Billing Account Number*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentsAccountId")]
		public string PaymentsAccountId { get; set; }
		
		/// <summary>
		/// The ID of the payments profile the invoice belongs to. Appears on the invoice PDF as *Billing ID*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentsProfileId")]
		public string PaymentsProfileId { get; set; }
		
		/// <summary>
		/// The URL to download a PDF copy of the invoice. Note that this URL is user specific and requires a valid OAuth 2.0 access token to access. The access token must be provided in an *Authorization: Bearer* HTTP header. The URL will only be usable for 7 days from when the api is called.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pdfUrl")]
		public string PdfUrl { get; set; }
		
		/// <summary>
		/// Purchase order number associated with the invoice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchaseOrderNumber")]
		public string PurchaseOrderNumber { get; set; }
		
		/// <summary>
		/// The originally issued invoice(s) that is being cancelled by this invoice, if applicable. May appear on invoice PDF as *Replaced invoice numbers*. Note: There may be multiple replaced invoices due to consolidation of multiple invoices into a single invoice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replacedInvoiceIds")]
		public string[] ReplacedInvoiceIds { get; set; }
		
		/// <summary>
		/// The invoice service end date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceEndDate")]
		public string ServiceEndDate { get; set; }
		
		/// <summary>
		/// The invoice service start date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceStartDate")]
		public string ServiceStartDate { get; set; }
		
		/// <summary>
		/// The pre-tax subtotal amount, in micros of the invoice's currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subtotalAmountMicros")]
		public string SubtotalAmountMicros { get; set; }
		
		/// <summary>
		/// The invoice total amount, in micros of the invoice's currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalAmountMicros")]
		public string TotalAmountMicros { get; set; }
		
		/// <summary>
		/// The sum of all taxes in invoice, in micros of the invoice's currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalTaxAmountMicros")]
		public string TotalTaxAmountMicros { get; set; }
	}
	
	/// <summary>
	/// Represents a summarized campaign information associated with this invoice.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CampaignSummary
	{
		
		/// <summary>
		/// Campaign billing invoice code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingInvoiceCode")]
		public string BillingInvoiceCode { get; set; }
		
		/// <summary>
		/// Campaign ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaignId")]
		public string CampaignId { get; set; }
		
		/// <summary>
		/// The pre-tax amount for this campaign, in micros of the invoice's currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preTaxAmountMicros")]
		public string PreTaxAmountMicros { get; set; }
		
		/// <summary>
		/// The tax amount for this campaign, in micros of the invoice's currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxAmountMicros")]
		public string TaxAmountMicros { get; set; }
		
		/// <summary>
		/// The total amount of charges for this campaign, in micros of the invoice's currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalAmountMicros")]
		public string TotalAmountMicros { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InvoiceInvoiceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVOICE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVOICE_TYPE_CREDIT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVOICE_TYPE_INVOICE = 2,
	}
	
	/// <summary>
	/// Landing Page List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdvertiserLandingPagesListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#advertiserLandingPagesListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Landing page collection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="landingPages")]
		public LandingPage[] LandingPages { get; set; }
		
		/// <summary>
		/// Pagination token to be used for the next list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Contains information about where a user's browser is taken after the user clicks an ad.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LandingPage
	{
		
		/// <summary>
		/// Advertiser ID of this landing page. This is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// Whether this landing page has been archived.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="archived")]
		public System.Nullable<System.Boolean> Archived { get; set; }
		
		/// <summary>
		/// Links that will direct the user to a mobile app, if installed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deepLinks")]
		public DeepLink[] DeepLinks { get; set; }
		
		/// <summary>
		/// ID of this landing page. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#landingPage".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Name of this landing page. This is a required field. It must be less than 256 characters long.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// URL of this landing page. This is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Contains information about a landing page deep link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeepLink
	{
		
		/// <summary>
		/// The URL of the mobile app being linked to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appUrl")]
		public string AppUrl { get; set; }
		
		/// <summary>
		/// The fallback URL. This URL will be served to users who do not have the mobile app installed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fallbackUrl")]
		public string FallbackUrl { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#deepLink".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Contains information about a mobile app. Used as a landing page deep link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileApp")]
		public MobileApp MobileApp { get; set; }
		
		/// <summary>
		/// Ads served to users on these remarketing lists will use this deep link. Applicable when mobileApp.directory is APPLE_APP_STORE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remarketingListIds")]
		public string[] RemarketingListIds { get; set; }
	}
	
	/// <summary>
	/// Contains information about a mobile app. Used as a landing page deep link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MobileApp
	{
		
		/// <summary>
		/// Mobile app directory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directory")]
		public System.Nullable<MobileAppDirectory> Directory { get; set; }
		
		/// <summary>
		/// ID of this mobile app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#mobileApp".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Publisher name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherName")]
		public string PublisherName { get; set; }
		
		/// <summary>
		/// Title of this mobile app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MobileAppDirectory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPLE_APP_STORE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOOGLE_PLAY_STORE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROKU_APP_STORE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_FIRETV_APP_STORE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLAYSTATION_APP_STORE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPLE_TV_APP_STORE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XBOX_APP_STORE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAMSUNG_TV_APP_STORE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANDROID_TV_APP_STORE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERIC_CTV_APP_STORE = 10,
	}
	
	/// <summary>
	/// Advertiser List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdvertisersListResponse
	{
		
		/// <summary>
		/// Advertiser collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertisers")]
		public Advertiser[] Advertisers { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#advertisersListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to be used for the next list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Audience Segment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudienceSegment
	{
		
		/// <summary>
		/// Weight allocated to this segment. The weight assigned will be understood in proportion to the weights assigned to other segments in the same segment group. Acceptable values are 1 to 1000, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allocation")]
		public System.Nullable<System.Int32> Allocation { get; set; }
		
		/// <summary>
		/// ID of this audience segment. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of this audience segment. This is a required field and must be less than 65 characters long.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Audience Segment Group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudienceSegmentGroup
	{
		
		/// <summary>
		/// Audience segments assigned to this group. The number of segments must be between 2 and 100.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audienceSegments")]
		public AudienceSegment[] AudienceSegments { get; set; }
		
		/// <summary>
		/// ID of this audience segment group. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of this audience segment group. This is a required field and must be less than 65 characters long.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// List account, subaccount, advertiser, and campaign associated with a given Billing Profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BillingAssignment
	{
		
		/// <summary>
		/// ID of the account associated with the billing assignment.This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// ID of the advertiser associated with the billing assignment.Wildcard (*) means this assignment is not limited to a single advertiser
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// ID of the campaign associated with the billing assignment. Wildcard (*) means this assignment is not limited to a single campaign
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaignId")]
		public string CampaignId { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#billingAssignment".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// ID of the subaccount associated with the billing assignment.Wildcard (*) means this assignment is not limited to a single subaccountThis is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subaccountId")]
		public string SubaccountId { get; set; }
	}
	
	/// <summary>
	/// Billing assignment List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BillingAssignmentsListResponse
	{
		
		/// <summary>
		/// Billing assignments collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingAssignments")]
		public BillingAssignment[] BillingAssignments { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#billingAssignmentsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// Contains properties of a Campaign Manager Billing Profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BillingProfile
	{
		
		/// <summary>
		/// Consolidated invoice option for this billing profile. Used to get a single, consolidated invoice across the chosen invoice level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consolidatedInvoice")]
		public System.Nullable<System.Boolean> ConsolidatedInvoice { get; set; }
		
		/// <summary>
		/// Country code of this billing profile.This is a read-only field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// Billing currency code in ISO 4217 format.This is a read-only field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// ID of this billing profile. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Invoice level for this billing profile. Used to group fees into separate invoices by account, advertiser, or campaign.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceLevel")]
		public System.Nullable<BillingProfileInvoiceLevel> InvoiceLevel { get; set; }
		
		/// <summary>
		/// True if the billing profile is the account default profile. This is a read-only field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#billingProfile".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Name of this billing profile. This is a required field and must be less than 256 characters long and must be unique among billing profile in the same account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The ID of the payment account the billing profile belongs to. This is a read-only field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentsAccountId")]
		public string PaymentsAccountId { get; set; }
		
		/// <summary>
		/// The ID of the payment customer the billing profile belongs to. This is a read-only field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentsCustomerId")]
		public string PaymentsCustomerId { get; set; }
		
		/// <summary>
		/// Purchase order (PO) for this billing profile. This PO number is used in the invoices for all of the advertisers in this billing profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchaseOrder")]
		public string PurchaseOrder { get; set; }
		
		/// <summary>
		/// The ID of the secondary payment customer the billing profile belongs to. This is a read-only field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryPaymentsCustomerId")]
		public string SecondaryPaymentsCustomerId { get; set; }
		
		/// <summary>
		/// Status of this billing profile.This is a read-only field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<BillingProfileStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BillingProfileInvoiceLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_LEVEL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADVERTISER_LEVEL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAMPAIGN_LEVEL = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BillingProfileStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNDER_REVIEW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVED = 2,
	}
	
	/// <summary>
	/// Billing profile List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BillingProfilesListResponse
	{
		
		/// <summary>
		/// Billing profiles collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingProfiles")]
		public BillingProfile[] BillingProfiles { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#billingProfilesListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to be used for the next list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BillingRate
	{
		
		/// <summary>
		/// Billing currency code in ISO 4217 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// End date of this billing rate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public string EndDate { get; set; }
		
		/// <summary>
		/// ID of this billing rate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of this billing rate. This must be less than 256 characters long.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Flat rate in micros of this billing rate. This cannot co-exist with tiered rate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rateInMicros")]
		public string RateInMicros { get; set; }
		
		/// <summary>
		/// Start date of this billing rate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public string StartDate { get; set; }
		
		/// <summary>
		/// Tiered rate of this billing rate. This cannot co-exist with flat rate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tieredRates")]
		public BillingRateTieredRate[] TieredRates { get; set; }
		
		/// <summary>
		/// Type of this billing rate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<BillingRateType> Type { get; set; }
		
		/// <summary>
		/// Unit of measure for this billing rate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitOfMeasure")]
		public System.Nullable<BillingRateUnitOfMeasure> UnitOfMeasure { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BillingRateTieredRate
	{
		
		/// <summary>
		/// The maximum for this tier range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="highValue")]
		public string HighValue { get; set; }
		
		/// <summary>
		/// The minimum for this tier range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lowValue")]
		public string LowValue { get; set; }
		
		/// <summary>
		/// Rate in micros for this tier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rateInMicros")]
		public string RateInMicros { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BillingRateType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_SERVING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLICKS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MINIMUM_SERVICE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PATH_TO_CONVERSION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RICH_MEDIA_INPAGE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RICH_MEDIA_EXPANDING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RICH_MEDIA_FLOATING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RICH_MEDIA_VIDEO = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RICH_MEDIA_TEASER = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RICH_MEDIA_VPAID = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTREAM_VIDEO = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PIXEL = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRACKING = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRAFFICKING_FEATURE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_REPORTS = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPOSURE_TO_CONVERSION = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_TRANSFER = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_TRANSFER_SETUP = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTUP = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATEMENT_OF_WORK = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVIDED_LIST = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVIDED_LIST_SETUP = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENHANCED_FORMATS = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRACKING_AD_IMPRESSIONS = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRACKING_AD_CLICKS = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NIELSEN_DIGITAL_AD_RATINGS_FEE = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTREAM_VIDEO_REDIRECT = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTREAM_VIDEO_VPAID = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISPLAY_AD_SERVING = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_AD_SERVING = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUDIO_AD_SERVING = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADVANCED_DISPLAY_AD_SERVING = 31,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BillingRateUnitOfMeasure
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CPM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CPC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		P2C = 3,
	}
	
	/// <summary>
	/// Billing Rate List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BillingRatesListResponse
	{
		
		/// <summary>
		/// Billing rates collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingRates")]
		public BillingRate[] BillingRates { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#billingRatesListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to be used for the next list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Browser List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BrowsersListResponse
	{
		
		/// <summary>
		/// Browser collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="browsers")]
		public Browser[] Browsers { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#browsersListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// Contains properties of a Campaign Manager campaign.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Campaign
	{
		
		/// <summary>
		/// Account ID of this campaign. This is a read-only field that can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Campaign ad blocking settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adBlockingConfiguration")]
		public AdBlockingConfiguration AdBlockingConfiguration { get; set; }
		
		/// <summary>
		/// Additional creative optimization configurations for the campaign.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalCreativeOptimizationConfigurations")]
		public CreativeOptimizationConfiguration[] AdditionalCreativeOptimizationConfigurations { get; set; }
		
		/// <summary>
		/// Advertiser group ID of the associated advertiser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserGroupId")]
		public string AdvertiserGroupId { get; set; }
		
		/// <summary>
		/// Advertiser ID of this campaign. This is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserIdDimensionValue")]
		public DimensionValue AdvertiserIdDimensionValue { get; set; }
		
		/// <summary>
		/// Whether this campaign has been archived.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="archived")]
		public System.Nullable<System.Boolean> Archived { get; set; }
		
		/// <summary>
		/// Audience segment groups assigned to this campaign. Cannot have more than 300 segment groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audienceSegmentGroups")]
		public AudienceSegmentGroup[] AudienceSegmentGroups { get; set; }
		
		/// <summary>
		/// Billing invoice code included in the Campaign Manager client billing invoices associated with the campaign.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingInvoiceCode")]
		public string BillingInvoiceCode { get; set; }
		
		/// <summary>
		/// Click Through URL Suffix settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickThroughUrlSuffixProperties")]
		public ClickThroughUrlSuffixProperties ClickThroughUrlSuffixProperties { get; set; }
		
		/// <summary>
		/// Arbitrary comments about this campaign. Must be less than 256 characters long.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		/// <summary>
		/// Modification timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createInfo")]
		public LastModifiedInfo CreateInfo { get; set; }
		
		/// <summary>
		/// List of creative group IDs that are assigned to the campaign.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeGroupIds")]
		public string[] CreativeGroupIds { get; set; }
		
		/// <summary>
		/// Creative optimization settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeOptimizationConfiguration")]
		public CreativeOptimizationConfiguration CreativeOptimizationConfiguration { get; set; }
		
		/// <summary>
		/// Properties of inheriting and overriding the default click-through event tag. A campaign may override the event tag defined at the advertiser level, and an ad may also override the campaign's setting further.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultClickThroughEventTagProperties")]
		public DefaultClickThroughEventTagProperties DefaultClickThroughEventTagProperties { get; set; }
		
		/// <summary>
		/// The default landing page ID for this campaign.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultLandingPageId")]
		public string DefaultLandingPageId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		/// <summary>
		/// Overrides that can be used to activate or deactivate advertiser event tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventTagOverrides")]
		public EventTagOverride[] EventTagOverrides { get; set; }
		
		/// <summary>
		/// External ID for this campaign.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalId")]
		public string ExternalId { get; set; }
		
		/// <summary>
		/// ID of this campaign. This is a read-only auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idDimensionValue")]
		public DimensionValue IdDimensionValue { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#campaign".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Modification timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedInfo")]
		public LastModifiedInfo LastModifiedInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="measurementPartnerLink")]
		public MeasurementPartnerCampaignLink MeasurementPartnerLink { get; set; }
		
		/// <summary>
		/// Name of this campaign. This is a required field and must be less than 512 characters long and unique among campaigns of the same advertiser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
		
		/// <summary>
		/// Subaccount ID of this campaign. This is a read-only field that can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subaccountId")]
		public string SubaccountId { get; set; }
	}
	
	/// <summary>
	/// Creative optimization settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreativeOptimizationConfiguration
	{
		
		/// <summary>
		/// ID of this creative optimization config. This field is auto-generated when the campaign is inserted or updated. It can be null for existing campaigns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of this creative optimization config. This is a required field and must be less than 129 characters long.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// List of optimization activities associated with this configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optimizationActivitys")]
		public OptimizationActivity[] OptimizationActivitys { get; set; }
		
		/// <summary>
		/// Optimization model for this configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optimizationModel")]
		public System.Nullable<CreativeOptimizationConfigurationOptimizationModel> OptimizationModel { get; set; }
	}
	
	/// <summary>
	/// Creative optimization activity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OptimizationActivity
	{
		
		/// <summary>
		/// Floodlight activity ID of this optimization activity. This is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floodlightActivityId")]
		public string FloodlightActivityId { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floodlightActivityIdDimensionValue")]
		public DimensionValue FloodlightActivityIdDimensionValue { get; set; }
		
		/// <summary>
		/// Weight associated with this optimization. The weight assigned will be understood in proportion to the weights assigned to the other optimization activities. Value must be greater than or equal to 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Int32> Weight { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeOptimizationConfigurationOptimizationModel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLICK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POST_CLICK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POST_IMPRESSION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POST_CLICK_AND_IMPRESSION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_COMPLETION = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MeasurementPartnerCampaignLink
	{
		
		/// <summary>
		/// .
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkStatus")]
		public MeasurementPartnerAdvertiserLinkLinkStatus LinkStatus { get; set; }
		
		/// <summary>
		/// Measurement partner used for tag wrapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="measurementPartner")]
		public MeasurementPartnerAdvertiserLinkMeasurementPartner MeasurementPartner { get; set; }
		
		/// <summary>
		/// Partner campaign ID needed for establishing linking with Measurement partner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerCampaignId")]
		public string PartnerCampaignId { get; set; }
	}
	
	/// <summary>
	/// Identifies a creative which has been associated with a given campaign.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CampaignCreativeAssociation
	{
		
		/// <summary>
		/// ID of the creative associated with the campaign. This is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeId")]
		public string CreativeId { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#campaignCreativeAssociation".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// Campaign Creative Association List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CampaignCreativeAssociationsListResponse
	{
		
		/// <summary>
		/// Campaign creative association collection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaignCreativeAssociations")]
		public CampaignCreativeAssociation[] CampaignCreativeAssociations { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#campaignCreativeAssociationsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to be used for the next list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Campaign List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CampaignsListResponse
	{
		
		/// <summary>
		/// Campaign collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaigns")]
		public Campaign[] Campaigns { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#campaignsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to be used for the next list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Describes a change that a user has made to a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChangeLog
	{
		
		/// <summary>
		/// Account ID of the modified object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Action which caused the change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changeTime")]
		public System.Nullable<System.DateTimeOffset> ChangeTime { get; set; }
		
		/// <summary>
		/// Field name of the object which changed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldName")]
		public string FieldName { get; set; }
		
		/// <summary>
		/// ID of this change log.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#changeLog".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// New value of the object field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newValue")]
		public string NewValue { get; set; }
		
		/// <summary>
		/// ID of the object of this change log. The object could be a campaign, placement, ad, or other type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// Object type of the change log.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectType")]
		public string ObjectType { get; set; }
		
		/// <summary>
		/// Old value of the object field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oldValue")]
		public string OldValue { get; set; }
		
		/// <summary>
		/// Subaccount ID of the modified object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subaccountId")]
		public string SubaccountId { get; set; }
		
		/// <summary>
		/// Transaction ID of this change log. When a single API call results in many changes, each change will have a separate ID in the change log but will share the same transactionId.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
		
		/// <summary>
		/// ID of the user who modified the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userProfileId")]
		public string UserProfileId { get; set; }
		
		/// <summary>
		/// User profile name of the user who modified the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userProfileName")]
		public string UserProfileName { get; set; }
	}
	
	/// <summary>
	/// Change Log List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChangeLogsListResponse
	{
		
		/// <summary>
		/// Change log collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeLogs")]
		public ChangeLog[] ChangeLogs { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#changeLogsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to be used for the next list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Represents a DfaReporting channel grouping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChannelGrouping
	{
		
		/// <summary>
		/// ChannelGrouping fallback name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fallbackName")]
		public string FallbackName { get; set; }
		
		/// <summary>
		/// The kind of resource this is, in this case dfareporting#channelGrouping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// ChannelGrouping name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The rules contained within this channel grouping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public ChannelGroupingRule[] Rules { get; set; }
	}
	
	/// <summary>
	/// Represents a DfaReporting channel grouping rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChannelGroupingRule
	{
		
		/// <summary>
		/// The disjunctive match statements contained within this rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disjunctiveMatchStatements")]
		public DisjunctiveMatchStatement[] DisjunctiveMatchStatements { get; set; }
		
		/// <summary>
		/// The kind of resource this is, in this case dfareporting#channelGroupingRule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Rule name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Represents a Disjunctive Match Statement resource, which is a conjunction (and) of disjunctive (or) boolean statements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisjunctiveMatchStatement
	{
		
		/// <summary>
		/// The event filters contained within this disjunctive match statement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventFilters")]
		public EventFilter[] EventFilters { get; set; }
		
		/// <summary>
		/// The kind of resource this is, in this case dfareporting#disjunctiveMatchStatement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// Represents a DfaReporting event filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EventFilter
	{
		
		/// <summary>
		/// Represents a PathReportDimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionFilter")]
		public PathReportDimensionValue DimensionFilter { get; set; }
		
		/// <summary>
		/// The kind of resource this is, in this case dfareporting#eventFilter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Defines the filtering on a single uvar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uvarFilter")]
		public UvarFilter UvarFilter { get; set; }
	}
	
	/// <summary>
	/// Represents a PathReportDimensionValue resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PathReportDimensionValue
	{
		
		/// <summary>
		/// The name of the dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionName")]
		public string DimensionName { get; set; }
		
		/// <summary>
		/// The possible ID's associated with the value if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public string[] Ids { get; set; }
		
		/// <summary>
		/// The kind of resource this is, in this case dfareporting#pathReportDimensionValue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Determines how the 'value' field is matched when filtering. If not specified, defaults to EXACT. If set to WILDCARD_EXPRESSION, '*' is allowed as a placeholder for variable length character sequences, and it can be escaped with a backslash. Note, only paid search dimensions ('dfa:paidSearch*') allow a matchType other than EXACT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchType")]
		public DimensionValueMatchType MatchType { get; set; }
		
		/// <summary>
		/// The possible values of the dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// Defines the filtering on a single uvar.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UvarFilter
	{
		
		/// <summary>
		/// Return rows which don't match this filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public System.Nullable<System.Boolean> Complement { get; set; }
		
		/// <summary>
		/// Custom variable index the filter is applied to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public string Index { get; set; }
		
		/// <summary>
		/// The kind of resource this is, in this case dfareporting#uvarFilter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Indicates how the filter should be matched to the values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="match")]
		public System.Nullable<UvarFilterMatch> Match { get; set; }
		
		/// <summary>
		/// Values to filter on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UvarFilterMatch
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXACT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTAINS = 2,
	}
	
	/// <summary>
	/// City List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CitiesListResponse
	{
		
		/// <summary>
		/// City collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cities")]
		public City[] Cities { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#citiesListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// Creative Click Tag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClickTag
	{
		
		/// <summary>
		/// Click-through URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickThroughUrl")]
		public CreativeClickThroughUrl ClickThroughUrl { get; set; }
		
		/// <summary>
		/// Advertiser event name associated with the click tag. This field is used by DISPLAY_IMAGE_GALLERY and HTML5_BANNER creatives. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventName")]
		public string EventName { get; set; }
		
		/// <summary>
		/// Parameter name for the specified click tag. For DISPLAY_IMAGE_GALLERY creative assets, this field must match the value of the creative asset's creativeAssetId.name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Click-through URL
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreativeClickThroughUrl
	{
		
		/// <summary>
		/// Read-only convenience field representing the actual URL that will be used for this click-through. The URL is computed as follows: - If landingPageId is specified then that landing page's URL is assigned to this field. - Otherwise, the customClickThroughUrl is assigned to this field. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computedClickThroughUrl")]
		public string ComputedClickThroughUrl { get; set; }
		
		/// <summary>
		/// Custom click-through URL. Applicable if the landingPageId field is left unset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customClickThroughUrl")]
		public string CustomClickThroughUrl { get; set; }
		
		/// <summary>
		/// ID of the landing page for the click-through URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="landingPageId")]
		public string LandingPageId { get; set; }
	}
	
	/// <summary>
	/// Companion Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompanionSetting
	{
		
		/// <summary>
		/// Whether companions are disabled for this placement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="companionsDisabled")]
		public System.Nullable<System.Boolean> CompanionsDisabled { get; set; }
		
		/// <summary>
		/// Allowlist of companion sizes to be served to this placement. Set this list to null or empty to serve all companion sizes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabledSizes")]
		public Size[] EnabledSizes { get; set; }
		
		/// <summary>
		/// Whether to serve only static images as companions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageOnly")]
		public System.Nullable<System.Boolean> ImageOnly { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#companionSetting".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// Represents a response to the queryCompatibleFields method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompatibleFields
	{
		
		/// <summary>
		/// Represents fields that are compatible to be selected for a report of type "CROSS_DIMENSION_REACH".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crossDimensionReachReportCompatibleFields")]
		public CrossDimensionReachReportCompatibleFields CrossDimensionReachReportCompatibleFields { get; set; }
		
		/// <summary>
		/// Represents fields that are compatible to be selected for a report of type "FlOODLIGHT".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floodlightReportCompatibleFields")]
		public FloodlightReportCompatibleFields FloodlightReportCompatibleFields { get; set; }
		
		/// <summary>
		/// The kind of resource this is, in this case dfareporting#compatibleFields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Represents fields that are compatible to be selected for a report of type "PATH".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pathAttributionReportCompatibleFields")]
		public PathReportCompatibleFields PathAttributionReportCompatibleFields { get; set; }
		
		/// <summary>
		/// Represents fields that are compatible to be selected for a report of type "PATH".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pathReportCompatibleFields")]
		public PathReportCompatibleFields PathReportCompatibleFields { get; set; }
		
		/// <summary>
		/// Represents fields that are compatible to be selected for a report of type "PATH_TO_CONVERSION".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pathToConversionReportCompatibleFields")]
		public PathToConversionReportCompatibleFields PathToConversionReportCompatibleFields { get; set; }
		
		/// <summary>
		/// Represents fields that are compatible to be selected for a report of type "REACH".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reachReportCompatibleFields")]
		public ReachReportCompatibleFields ReachReportCompatibleFields { get; set; }
		
		/// <summary>
		/// Represents fields that are compatible to be selected for a report of type "STANDARD".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportCompatibleFields")]
		public ReportCompatibleFields ReportCompatibleFields { get; set; }
	}
	
	/// <summary>
	/// Represents fields that are compatible to be selected for a report of type "CROSS_DIMENSION_REACH".
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CrossDimensionReachReportCompatibleFields
	{
		
		/// <summary>
		/// Dimensions which are compatible to be selected in the "breakdown" section of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="breakdown")]
		public Dimension[] Breakdown { get; set; }
		
		/// <summary>
		/// Dimensions which are compatible to be selected in the "dimensionFilters" section of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionFilters")]
		public Dimension[] DimensionFilters { get; set; }
		
		/// <summary>
		/// The kind of resource this is, in this case dfareporting#crossDimensionReachReportCompatibleFields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Metrics which are compatible to be selected in the "metricNames" section of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public Metric[] Metrics { get; set; }
		
		/// <summary>
		/// Metrics which are compatible to be selected in the "overlapMetricNames" section of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overlapMetrics")]
		public Metric[] OverlapMetrics { get; set; }
	}
	
	/// <summary>
	/// Represents a dimension.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Dimension
	{
		
		/// <summary>
		/// The kind of resource this is, in this case dfareporting#dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The dimension name, e.g. advertiser
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Represents a metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Metric
	{
		
		/// <summary>
		/// The kind of resource this is, in this case dfareporting#metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The metric name, e.g. impressions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Represents fields that are compatible to be selected for a report of type "FlOODLIGHT".
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FloodlightReportCompatibleFields
	{
		
		/// <summary>
		/// Dimensions which are compatible to be selected in the "dimensionFilters" section of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionFilters")]
		public Dimension[] DimensionFilters { get; set; }
		
		/// <summary>
		/// Dimensions which are compatible to be selected in the "dimensions" section of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public Dimension[] Dimensions { get; set; }
		
		/// <summary>
		/// The kind of resource this is, in this case dfareporting#floodlightReportCompatibleFields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Metrics which are compatible to be selected in the "metricNames" section of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public Metric[] Metrics { get; set; }
	}
	
	/// <summary>
	/// Represents fields that are compatible to be selected for a report of type "PATH".
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PathReportCompatibleFields
	{
		
		/// <summary>
		/// Dimensions which are compatible to be selected in the "channelGroupings" section of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelGroupings")]
		public Dimension[] ChannelGroupings { get; set; }
		
		/// <summary>
		/// Dimensions which are compatible to be selected in the "dimensions" section of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public Dimension[] Dimensions { get; set; }
		
		/// <summary>
		/// The kind of resource this is, in this case dfareporting#pathReportCompatibleFields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Metrics which are compatible to be selected in the "metricNames" section of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public Metric[] Metrics { get; set; }
		
		/// <summary>
		/// Dimensions which are compatible to be selected in the "pathFilters" section of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pathFilters")]
		public Dimension[] PathFilters { get; set; }
	}
	
	/// <summary>
	/// Represents fields that are compatible to be selected for a report of type "PATH_TO_CONVERSION".
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PathToConversionReportCompatibleFields
	{
		
		/// <summary>
		/// Conversion dimensions which are compatible to be selected in the "conversionDimensions" section of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conversionDimensions")]
		public Dimension[] ConversionDimensions { get; set; }
		
		/// <summary>
		/// Custom floodlight variables which are compatible to be selected in the "customFloodlightVariables" section of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customFloodlightVariables")]
		public Dimension[] CustomFloodlightVariables { get; set; }
		
		/// <summary>
		/// The kind of resource this is, in this case dfareporting#pathToConversionReportCompatibleFields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Metrics which are compatible to be selected in the "metricNames" section of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public Metric[] Metrics { get; set; }
		
		/// <summary>
		/// Per-interaction dimensions which are compatible to be selected in the "perInteractionDimensions" section of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perInteractionDimensions")]
		public Dimension[] PerInteractionDimensions { get; set; }
	}
	
	/// <summary>
	/// Represents fields that are compatible to be selected for a report of type "REACH".
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReachReportCompatibleFields
	{
		
		/// <summary>
		/// Dimensions which are compatible to be selected in the "dimensionFilters" section of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionFilters")]
		public Dimension[] DimensionFilters { get; set; }
		
		/// <summary>
		/// Dimensions which are compatible to be selected in the "dimensions" section of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public Dimension[] Dimensions { get; set; }
		
		/// <summary>
		/// The kind of resource this is, in this case dfareporting#reachReportCompatibleFields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Metrics which are compatible to be selected in the "metricNames" section of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public Metric[] Metrics { get; set; }
		
		/// <summary>
		/// Metrics which are compatible to be selected as activity metrics to pivot on in the "activities" section of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pivotedActivityMetrics")]
		public Metric[] PivotedActivityMetrics { get; set; }
		
		/// <summary>
		/// Metrics which are compatible to be selected in the "reachByFrequencyMetricNames" section of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reachByFrequencyMetrics")]
		public Metric[] ReachByFrequencyMetrics { get; set; }
	}
	
	/// <summary>
	/// Represents fields that are compatible to be selected for a report of type "STANDARD".
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportCompatibleFields
	{
		
		/// <summary>
		/// Dimensions which are compatible to be selected in the "dimensionFilters" section of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionFilters")]
		public Dimension[] DimensionFilters { get; set; }
		
		/// <summary>
		/// Dimensions which are compatible to be selected in the "dimensions" section of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public Dimension[] Dimensions { get; set; }
		
		/// <summary>
		/// The kind of resource this is, in this case dfareporting#reportCompatibleFields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Metrics which are compatible to be selected in the "metricNames" section of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public Metric[] Metrics { get; set; }
		
		/// <summary>
		/// Metrics which are compatible to be selected as activity metrics to pivot on in the "activities" section of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pivotedActivityMetrics")]
		public Metric[] PivotedActivityMetrics { get; set; }
	}
	
	/// <summary>
	/// Connection Type List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConnectionTypesListResponse
	{
		
		/// <summary>
		/// Collection of connection types such as broadband and mobile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionTypes")]
		public ConnectionType[] ConnectionTypes { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#connectionTypesListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// Content Category List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContentCategoriesListResponse
	{
		
		/// <summary>
		/// Content category collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCategories")]
		public ContentCategory[] ContentCategories { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#contentCategoriesListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to be used for the next list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContentCategory
	{
		
		/// <summary>
		/// Account ID of this content category. This is a read-only field that can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// ID of this content category. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#contentCategory".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Name of this content category. This is a required field and must be less than 256 characters long and unique among content categories of the same account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A Conversion represents when a user successfully performs a desired action after seeing an ad.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Conversion
	{
		
		/// <summary>
		/// Whether this particular request may come from a user under the age of 13, under COPPA compliance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="childDirectedTreatment")]
		public System.Nullable<System.Boolean> ChildDirectedTreatment { get; set; }
		
		/// <summary>
		/// Custom floodlight variables. This field may only be used when calling batchinsert; it is not supported by batchupdate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customVariables")]
		public CustomFloodlightVariable[] CustomVariables { get; set; }
		
		/// <summary>
		/// The display click ID. This field is mutually exclusive with encryptedUserId, encryptedUserIdCandidates[], matchId, mobileDeviceId, gclid, and impressionId. This or encryptedUserId or encryptedUserIdCandidates[] or matchId or mobileDeviceId or gclid or impressionId is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dclid")]
		public string Dclid { get; set; }
		
		/// <summary>
		/// The alphanumeric encrypted user ID. When set, encryptionInfo should also be specified. This field is mutually exclusive with encryptedUserIdCandidates[], matchId, mobileDeviceId, gclid, dclid, and impressionId. This or encryptedUserIdCandidates[] or matchId or mobileDeviceId or gclid or dclid or impressionId is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptedUserId")]
		public string EncryptedUserId { get; set; }
		
		/// <summary>
		/// A list of the alphanumeric encrypted user IDs. Any user ID with exposure prior to the conversion timestamp will be used in the inserted conversion. If no such user ID is found then the conversion will be rejected with INVALID_ARGUMENT error. When set, encryptionInfo should also be specified. This field may only be used when calling batchinsert; it is not supported by batchupdate. This field is mutually exclusive with encryptedUserId, matchId, mobileDeviceId, gclid dclid, and impressionId. This or encryptedUserId or matchId or mobileDeviceId or gclid or dclid or impressionId is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptedUserIdCandidates")]
		public string[] EncryptedUserIdCandidates { get; set; }
		
		/// <summary>
		/// Floodlight Activity ID of this conversion. This is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floodlightActivityId")]
		public string FloodlightActivityId { get; set; }
		
		/// <summary>
		/// Floodlight Configuration ID of this conversion. This is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floodlightConfigurationId")]
		public string FloodlightConfigurationId { get; set; }
		
		/// <summary>
		/// The Google click ID. This field is mutually exclusive with encryptedUserId, encryptedUserIdCandidates[], matchId, mobileDeviceId, dclid, and impressionId. This or encryptedUserId or encryptedUserIdCandidates[] or matchId or mobileDeviceId or dclid or impressionId is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gclid")]
		public string Gclid { get; set; }
		
		/// <summary>
		/// The impression ID. This field is mutually exclusive with encryptedUserId, encryptedUserIdCandidates[], matchId, mobileDeviceId, and gclid. One of these identifiers must be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impressionId")]
		public string ImpressionId { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#conversion".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Whether Limit Ad Tracking is enabled. When set to true, the conversion will be used for reporting but not targeting. This will prevent remarketing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limitAdTracking")]
		public System.Nullable<System.Boolean> LimitAdTracking { get; set; }
		
		/// <summary>
		/// The match ID field. A match ID is your own first-party identifier that has been synced with Google using the match ID feature in Floodlight. This field is mutually exclusive with encryptedUserId, encryptedUserIdCandidates[],mobileDeviceId, gclid, dclid, and impressionId. This or encryptedUserId orencryptedUserIdCandidates[] or mobileDeviceId or gclid or dclid or impressionIdis a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchId")]
		public string MatchId { get; set; }
		
		/// <summary>
		/// The mobile device ID. This field is mutually exclusive with encryptedUserId, encryptedUserIdCandidates[], matchId, gclid, dclid, and impressionId. This or encryptedUserId or encryptedUserIdCandidates[] or matchId or gclid or dclid or impressionId is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileDeviceId")]
		public string MobileDeviceId { get; set; }
		
		/// <summary>
		/// Whether the conversion was for a non personalized ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonPersonalizedAd")]
		public System.Nullable<System.Boolean> NonPersonalizedAd { get; set; }
		
		/// <summary>
		/// The ordinal of the conversion. Use this field to control how conversions of the same user and day are de-duplicated. This is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ordinal")]
		public string Ordinal { get; set; }
		
		/// <summary>
		/// The quantity of the conversion. This is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public string Quantity { get; set; }
		
		/// <summary>
		/// The timestamp of conversion, in Unix epoch micros. This is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestampMicros")]
		public string TimestampMicros { get; set; }
		
		/// <summary>
		/// Whether this particular request may come from a user under the age of 16 (may differ by country), under compliance with the European Union's General Data Protection Regulation (GDPR).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treatmentForUnderage")]
		public System.Nullable<System.Boolean> TreatmentForUnderage { get; set; }
		
		/// <summary>
		/// The user identifiers to enhance the conversion. The maximum number of user identifiers for each conversion is 5.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userIdentifiers")]
		public UserIdentifier[] UserIdentifiers { get; set; }
		
		/// <summary>
		/// The value of the conversion. This is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	/// <summary>
	/// A custom floodlight variable. This field may only be used when calling batchinsert; it is not supported by batchupdate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomFloodlightVariable
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#customFloodlightVariable".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The type of custom floodlight variable to supply a value for. These map to the "u[1-20]=" in the tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CustomFloodlightVariableType> Type { get; set; }
		
		/// <summary>
		/// The value of the custom floodlight variable. The length of string must not exceed 100 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CustomFloodlightVariableType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U5 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U6 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U7 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U8 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U9 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U10 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U11 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U12 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U13 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U14 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U15 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U16 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U17 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U18 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U19 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U20 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U21 = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U22 = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U23 = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U24 = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U25 = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U26 = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U27 = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U28 = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U29 = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U30 = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U31 = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U32 = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U33 = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U34 = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U35 = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U36 = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U37 = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U38 = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U39 = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U40 = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U41 = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U42 = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U43 = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U44 = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U45 = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U46 = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U47 = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U48 = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U49 = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U50 = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U51 = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U52 = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U53 = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U54 = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U55 = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U56 = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U57 = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U58 = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U59 = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U60 = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U61 = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U62 = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U63 = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U64 = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U65 = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U66 = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U67 = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U68 = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U69 = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U70 = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U71 = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U72 = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U73 = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U74 = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U75 = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U76 = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U77 = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U78 = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U79 = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U80 = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U81 = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U82 = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U83 = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U84 = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U85 = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U86 = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U87 = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U88 = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U89 = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U90 = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U91 = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U92 = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U93 = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U94 = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U95 = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U96 = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U97 = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U98 = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U99 = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U100 = 99,
	}
	
	/// <summary>
	/// User identifying information. Exactly one type of identifier must be specified.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserIdentifier
	{
		
		/// <summary>
		/// Identify a user by name and address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressInfo")]
		public OfflineUserAddressInfo AddressInfo { get; set; }
		
		/// <summary>
		/// Hashed email address using SHA-256 hash function after normalization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hashedEmail")]
		public string HashedEmail { get; set; }
		
		/// <summary>
		/// Hashed phone number using SHA-256 hash function after normalization (E164 standard).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hashedPhoneNumber")]
		public string HashedPhoneNumber { get; set; }
	}
	
	/// <summary>
	/// Identify a user by name and address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OfflineUserAddressInfo
	{
		
		/// <summary>
		/// City of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// 2-letter country code in ISO-3166-1 alpha-2 of the user's address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// First name of the user, which is hashed as SHA-256 after normalized (Lowercase all characters; Remove any extra spaces before, after, and in between).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hashedFirstName")]
		public string HashedFirstName { get; set; }
		
		/// <summary>
		/// Last name of the user, which is hashed as SHA-256 after normalized (lower case only and no punctuation).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hashedLastName")]
		public string HashedLastName { get; set; }
		
		/// <summary>
		/// The street address of the user hashed using SHA-256 hash function after normalization (lower case only).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hashedStreetAddress")]
		public string HashedStreetAddress { get; set; }
		
		/// <summary>
		/// Postal code of the user's address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// State code of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	/// <summary>
	/// The error code and description for a conversion that failed to insert or update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConversionError
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<ConversionErrorCode> Code { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#conversionError".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// A description of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConversionErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_ARGUMENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERMISSION_DENIED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_FOUND = 3,
	}
	
	/// <summary>
	/// The original conversion that was inserted or updated and whether there were any errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConversionStatus
	{
		
		/// <summary>
		/// A Conversion represents when a user successfully performs a desired action after seeing an ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conversion")]
		public Conversion Conversion { get; set; }
		
		/// <summary>
		/// A list of errors related to this conversion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public ConversionError[] Errors { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#conversionStatus".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// Insert Conversions Request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConversionsBatchInsertRequest
	{
		
		/// <summary>
		/// The set of conversions to insert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conversions")]
		public Conversion[] Conversions { get; set; }
		
		/// <summary>
		/// A description of how user IDs are encrypted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionInfo")]
		public EncryptionInfo EncryptionInfo { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#conversionsBatchInsertRequest".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// A description of how user IDs are encrypted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EncryptionInfo
	{
		
		/// <summary>
		/// The encryption entity ID. This should match the encryption configuration for ad serving or Data Transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionEntityId")]
		public string EncryptionEntityId { get; set; }
		
		/// <summary>
		/// The encryption entity type. This should match the encryption configuration for ad serving or Data Transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionEntityType")]
		public System.Nullable<EncryptionInfoEncryptionEntityType> EncryptionEntityType { get; set; }
		
		/// <summary>
		/// Describes whether the encrypted cookie was received from ad serving (the %m macro) or from Data Transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionSource")]
		public System.Nullable<EncryptionInfoEncryptionSource> EncryptionSource { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#encryptionInfo".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EncryptionInfoEncryptionEntityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENCRYPTION_ENTITY_TYPE_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DCM_ACCOUNT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DCM_ADVERTISER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DBM_PARTNER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DBM_ADVERTISER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADWORDS_CUSTOMER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DFP_NETWORK_CODE = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EncryptionInfoEncryptionSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENCRYPTION_SCOPE_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_SERVING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_TRANSFER = 2,
	}
	
	/// <summary>
	/// Insert Conversions Response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConversionsBatchInsertResponse
	{
		
		/// <summary>
		/// Indicates that some or all conversions failed to insert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasFailures")]
		public System.Nullable<System.Boolean> HasFailures { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#conversionsBatchInsertResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The insert status of each conversion. Statuses are returned in the same order that conversions are inserted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ConversionStatus[] Status { get; set; }
	}
	
	/// <summary>
	/// Update Conversions Request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConversionsBatchUpdateRequest
	{
		
		/// <summary>
		/// The set of conversions to update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conversions")]
		public Conversion[] Conversions { get; set; }
		
		/// <summary>
		/// A description of how user IDs are encrypted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionInfo")]
		public EncryptionInfo EncryptionInfo { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#conversionsBatchUpdateRequest".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// Update Conversions Response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConversionsBatchUpdateResponse
	{
		
		/// <summary>
		/// Indicates that some or all conversions failed to update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasFailures")]
		public System.Nullable<System.Boolean> HasFailures { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#conversionsBatchUpdateResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The update status of each conversion. Statuses are returned in the same order that conversions are updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ConversionStatus[] Status { get; set; }
	}
	
	/// <summary>
	/// Country List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CountriesListResponse
	{
		
		/// <summary>
		/// Country collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countries")]
		public Country[] Countries { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#countriesListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// Contains properties of a Creative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Creative
	{
		
		/// <summary>
		/// Account ID of this creative. This field, if left unset, will be auto-generated for both insert and update operations. Applicable to all creative types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Whether the creative is active. Applicable to all creative types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Ad parameters user for VPAID creative. This is a read-only field. Applicable to the following creative types: all VPAID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adParameters")]
		public string AdParameters { get; set; }
		
		/// <summary>
		/// Keywords for a Rich Media creative. Keywords let you customize the creative settings of a Rich Media ad running on your site without having to contact the advertiser. You can use keywords to dynamically change the look or functionality of a creative. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adTagKeys")]
		public string[] AdTagKeys { get; set; }
		
		/// <summary>
		/// Additional sizes associated with a responsive creative. When inserting or updating a creative either the size ID field or size width and height fields can be used. Applicable to DISPLAY creatives when the primary asset type is HTML_IMAGE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalSizes")]
		public Size[] AdditionalSizes { get; set; }
		
		/// <summary>
		/// Required. Advertiser ID of this creative. This is a required field. Applicable to all creative types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// Whether script access is allowed for this creative. This is a read-only and deprecated field which will automatically be set to true on update. Applicable to the following creative types: FLASH_INPAGE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowScriptAccess")]
		public System.Nullable<System.Boolean> AllowScriptAccess { get; set; }
		
		/// <summary>
		/// Whether the creative is archived. Applicable to all creative types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="archived")]
		public System.Nullable<System.Boolean> Archived { get; set; }
		
		/// <summary>
		/// Type of artwork used for the creative. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artworkType")]
		public System.Nullable<CreativeArtworkType> ArtworkType { get; set; }
		
		/// <summary>
		/// Source application where creative was authored. Presently, only DBM authored creatives will have this field set. Applicable to all creative types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authoringSource")]
		public System.Nullable<CreativeAuthoringSource> AuthoringSource { get; set; }
		
		/// <summary>
		/// Authoring tool for HTML5 banner creatives. This is a read-only field. Applicable to the following creative types: HTML5_BANNER.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authoringTool")]
		public System.Nullable<CreativeAuthoringTool> AuthoringTool { get; set; }
		
		/// <summary>
		/// Whether images are automatically advanced for image gallery creatives. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoAdvanceImages")]
		public System.Nullable<System.Boolean> AutoAdvanceImages { get; set; }
		
		/// <summary>
		/// The 6-character HTML color code, beginning with #, for the background of the window area where the Flash file is displayed. Default is white. Applicable to the following creative types: FLASH_INPAGE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundColor")]
		public string BackgroundColor { get; set; }
		
		/// <summary>
		/// Click-through URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupImageClickThroughUrl")]
		public CreativeClickThroughUrl BackupImageClickThroughUrl { get; set; }
		
		/// <summary>
		/// List of feature dependencies that will cause a backup image to be served if the browser that serves the ad does not support them. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative asset correctly. This field is initially auto-generated to contain all features detected by Campaign Manager for all the assets of this creative and can then be modified by the client. To reset this field, copy over all the creativeAssets' detected features. Applicable to the following creative types: HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupImageFeatures")]
		public string[] BackupImageFeatures { get; set; }
		
		/// <summary>
		/// Reporting label used for HTML5 banner backup image. Applicable to the following creative types: DISPLAY when the primary asset type is not HTML_IMAGE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupImageReportingLabel")]
		public string BackupImageReportingLabel { get; set; }
		
		/// <summary>
		/// Target Window.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupImageTargetWindow")]
		public TargetWindow BackupImageTargetWindow { get; set; }
		
		/// <summary>
		/// Click tags of the creative. For DISPLAY, FLASH_INPAGE, and HTML5_BANNER creatives, this is a subset of detected click tags for the assets associated with this creative. After creating a flash asset, detected click tags will be returned in the creativeAssetMetadata. When inserting the creative, populate the creative clickTags field using the creativeAssetMetadata.clickTags field. For DISPLAY_IMAGE_GALLERY creatives, there should be exactly one entry in this list for each image creative asset. A click tag is matched with a corresponding creative asset by matching the clickTag.name field with the creativeAsset.assetIdentifier.name field. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, FLASH_INPAGE, HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickTags")]
		public ClickTag[] ClickTags { get; set; }
		
		/// <summary>
		/// Industry standard ID assigned to creative for reach and frequency. Applicable to INSTREAM_VIDEO_REDIRECT creatives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commercialId")]
		public string CommercialId { get; set; }
		
		/// <summary>
		/// List of companion creatives assigned to an in-Stream video creative. Acceptable values include IDs of existing flash and image creatives. Applicable to the following creative types: all VPAID, all INSTREAM_AUDIO and all INSTREAM_VIDEO with dynamicAssetSelection set to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="companionCreatives")]
		public string[] CompanionCreatives { get; set; }
		
		/// <summary>
		/// Compatibilities associated with this creative. This is a read-only field. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices or in mobile apps for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. Only pre-existing creatives may have these compatibilities since new creatives will either be assigned DISPLAY or DISPLAY_INTERSTITIAL instead. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard. IN_STREAM_AUDIO refers to rendering in in-stream audio ads developed with the VAST standard. Applicable to all creative types. Acceptable values are: - "APP" - "APP_INTERSTITIAL" - "IN_STREAM_VIDEO" - "IN_STREAM_AUDIO" - "DISPLAY" - "DISPLAY_INTERSTITIAL" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compatibility")]
		public AdCompatibility[] Compatibility { get; set; }
		
		/// <summary>
		/// Whether Flash assets associated with the creative need to be automatically converted to HTML5. This flag is enabled by default and users can choose to disable it if they don't want the system to generate and use HTML5 asset for this creative. Applicable to the following creative type: FLASH_INPAGE. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="convertFlashToHtml5")]
		public System.Nullable<System.Boolean> ConvertFlashToHtml5 { get; set; }
		
		/// <summary>
		/// List of counter events configured for the creative. For DISPLAY_IMAGE_GALLERY creatives, these are read-only and auto-generated from clickTags. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, all RICH_MEDIA, and all VPAID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="counterCustomEvents")]
		public CreativeCustomEvent[] CounterCustomEvents { get; set; }
		
		/// <summary>
		/// Encapsulates the list of rules for asset selection and a default asset in case none of the rules match. Applicable to INSTREAM_VIDEO creatives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeAssetSelection")]
		public CreativeAssetSelection CreativeAssetSelection { get; set; }
		
		/// <summary>
		/// Assets associated with a creative. Applicable to all but the following creative types: INTERNAL_REDIRECT, INTERSTITIAL_INTERNAL_REDIRECT, and REDIRECT
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeAssets")]
		public CreativeAsset[] CreativeAssets { get; set; }
		
		/// <summary>
		/// Creative field assignments for this creative. Applicable to all creative types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeFieldAssignments")]
		public CreativeFieldAssignment[] CreativeFieldAssignments { get; set; }
		
		/// <summary>
		/// Custom key-values for a Rich Media creative. Key-values let you customize the creative settings of a Rich Media ad running on your site without having to contact the advertiser. You can use key-values to dynamically change the look or functionality of a creative. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customKeyValues")]
		public string[] CustomKeyValues { get; set; }
		
		/// <summary>
		/// Set this to true to enable the use of rules to target individual assets in this creative. When set to true creativeAssetSelection must be set. This also controls asset-level companions. When this is true, companion creatives should be assigned to creative assets. Learn more. Applicable to INSTREAM_VIDEO creatives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dynamicAssetSelection")]
		public System.Nullable<System.Boolean> DynamicAssetSelection { get; set; }
		
		/// <summary>
		/// List of exit events configured for the creative. For DISPLAY and DISPLAY_IMAGE_GALLERY creatives, these are read-only and auto-generated from clickTags, For DISPLAY, an event is also created from the backupImageReportingLabel. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exitCustomEvents")]
		public CreativeCustomEvent[] ExitCustomEvents { get; set; }
		
		/// <summary>
		/// FsCommand.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fsCommand")]
		public FsCommand FsCommand { get; set; }
		
		/// <summary>
		/// HTML code for the creative. This is a required field when applicable. This field is ignored if htmlCodeLocked is true. Applicable to the following creative types: all CUSTOM, FLASH_INPAGE, and HTML5_BANNER, and all RICH_MEDIA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="htmlCode")]
		public string HtmlCode { get; set; }
		
		/// <summary>
		/// Whether HTML code is generated by Campaign Manager or manually entered. Set to true to ignore changes to htmlCode. Applicable to the following creative types: FLASH_INPAGE and HTML5_BANNER.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="htmlCodeLocked")]
		public System.Nullable<System.Boolean> HtmlCodeLocked { get; set; }
		
		/// <summary>
		/// ID of this creative. This is a read-only, auto-generated field. Applicable to all creative types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idDimensionValue")]
		public DimensionValue IdDimensionValue { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#creative".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Modification timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedInfo")]
		public LastModifiedInfo LastModifiedInfo { get; set; }
		
		/// <summary>
		/// Latest Studio trafficked creative ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latestTraffickedCreativeId")]
		public string LatestTraffickedCreativeId { get; set; }
		
		/// <summary>
		/// Description of the audio or video ad. Applicable to the following creative types: all INSTREAM_VIDEO, INSTREAM_AUDIO, and all VPAID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaDescription")]
		public string MediaDescription { get; set; }
		
		/// <summary>
		/// Creative audio or video duration in seconds. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO, INSTREAM_AUDIO, all RICH_MEDIA, and all VPAID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaDuration")]
		public System.Nullable<System.Single> MediaDuration { get; set; }
		
		/// <summary>
		/// Required. Name of the creative. This must be less than 256 characters long. Applicable to all creative types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Online Behavioral Advertiser icon.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="obaIcon")]
		public ObaIcon ObaIcon { get; set; }
		
		/// <summary>
		/// Override CSS value for rich media creatives. Applicable to the following creative types: all RICH_MEDIA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overrideCss")]
		public string OverrideCss { get; set; }
		
		/// <summary>
		/// Video Offset
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressOffset")]
		public VideoOffset ProgressOffset { get; set; }
		
		/// <summary>
		/// URL of hosted image or hosted video or another ad tag. For INSTREAM_VIDEO_REDIRECT creatives this is the in-stream video redirect URL. The standard for a VAST (Video Ad Serving Template) ad response allows for a redirect link to another VAST 2.0 or 3.0 call. This is a required field when applicable. Applicable to the following creative types: DISPLAY_REDIRECT, INTERNAL_REDIRECT, INTERSTITIAL_INTERNAL_REDIRECT, and INSTREAM_VIDEO_REDIRECT
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirectUrl")]
		public string RedirectUrl { get; set; }
		
		/// <summary>
		/// ID of current rendering version. This is a read-only field. Applicable to all creative types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="renderingId")]
		public string RenderingId { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="renderingIdDimensionValue")]
		public DimensionValue RenderingIdDimensionValue { get; set; }
		
		/// <summary>
		/// The minimum required Flash plugin version for this creative. For example, 11.2.202.235. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredFlashPluginVersion")]
		public string RequiredFlashPluginVersion { get; set; }
		
		/// <summary>
		/// The internal Flash version for this creative as calculated by Studio. This is a read-only field. Applicable to the following creative types: FLASH_INPAGE all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredFlashVersion")]
		public System.Nullable<System.Int32> RequiredFlashVersion { get; set; }
		
		/// <summary>
		/// Represents the dimensions of ads, placements, creatives, or creative assets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public Size Size { get; set; }
		
		/// <summary>
		/// Video Offset
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipOffset")]
		public VideoOffset SkipOffset { get; set; }
		
		/// <summary>
		/// Whether the user can choose to skip the creative. Applicable to the following creative types: all INSTREAM_VIDEO and all VPAID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skippable")]
		public System.Nullable<System.Boolean> Skippable { get; set; }
		
		/// <summary>
		/// Whether the creative is SSL-compliant. This is a read-only field. Applicable to all creative types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslCompliant")]
		public System.Nullable<System.Boolean> SslCompliant { get; set; }
		
		/// <summary>
		/// Whether creative should be treated as SSL compliant even if the system scan shows it's not. Applicable to all creative types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslOverride")]
		public System.Nullable<System.Boolean> SslOverride { get; set; }
		
		/// <summary>
		/// Studio advertiser ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="studioAdvertiserId")]
		public string StudioAdvertiserId { get; set; }
		
		/// <summary>
		/// Studio creative ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="studioCreativeId")]
		public string StudioCreativeId { get; set; }
		
		/// <summary>
		/// Studio trafficked creative ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="studioTraffickedCreativeId")]
		public string StudioTraffickedCreativeId { get; set; }
		
		/// <summary>
		/// Subaccount ID of this creative. This field, if left unset, will be auto-generated for both insert and update operations. Applicable to all creative types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subaccountId")]
		public string SubaccountId { get; set; }
		
		/// <summary>
		/// Third-party URL used to record backup image impressions. Applicable to the following creative types: all RICH_MEDIA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thirdPartyBackupImageImpressionsUrl")]
		public string ThirdPartyBackupImageImpressionsUrl { get; set; }
		
		/// <summary>
		/// Third-party URL used to record rich media impressions. Applicable to the following creative types: all RICH_MEDIA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thirdPartyRichMediaImpressionsUrl")]
		public string ThirdPartyRichMediaImpressionsUrl { get; set; }
		
		/// <summary>
		/// Third-party URLs for tracking in-stream creative events. Applicable to the following creative types: all INSTREAM_VIDEO, all INSTREAM_AUDIO, and all VPAID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thirdPartyUrls")]
		public ThirdPartyTrackingUrl[] ThirdPartyUrls { get; set; }
		
		/// <summary>
		/// List of timer events configured for the creative. For DISPLAY_IMAGE_GALLERY creatives, these are read-only and auto-generated from clickTags. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset is not HTML_IMAGE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timerCustomEvents")]
		public CreativeCustomEvent[] TimerCustomEvents { get; set; }
		
		/// <summary>
		/// Combined size of all creative assets. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalFileSize")]
		public string TotalFileSize { get; set; }
		
		/// <summary>
		/// Required. Type of this creative. Applicable to all creative types. *Note:* FLASH_INPAGE, HTML5_BANNER, and IMAGE are only used for existing creatives. New creatives should use DISPLAY as a replacement for these types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CreativeType> Type { get; set; }
		
		/// <summary>
		/// A Universal Ad ID as per the VAST 4.0 spec. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and VPAID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="universalAdId")]
		public UniversalAdId UniversalAdId { get; set; }
		
		/// <summary>
		/// The version number helps you keep track of multiple versions of your creative in your reports. The version number will always be auto-generated during insert operations to start at 1. For tracking creatives the version cannot be incremented and will always remain at 1. For all other creative types the version can be incremented only by 1 during update operations. In addition, the version will be automatically incremented by 1 when undergoing Rich Media creative merging. Applicable to all creative types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeArtworkType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARTWORK_TYPE_FLASH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARTWORK_TYPE_HTML5 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARTWORK_TYPE_MIXED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARTWORK_TYPE_IMAGE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeAuthoringSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_AUTHORING_SOURCE_DCM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_AUTHORING_SOURCE_DBM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_AUTHORING_SOURCE_STUDIO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_AUTHORING_SOURCE_GWD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_AUTHORING_SOURCE_ACS = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeAuthoringTool
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NINJA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SWIFFY = 1,
	}
	
	/// <summary>
	/// Target Window.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TargetWindow
	{
		
		/// <summary>
		/// User-entered value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customHtml")]
		public string CustomHtml { get; set; }
		
		/// <summary>
		/// Type of browser window for which the backup image of the flash creative can be displayed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetWindowOption")]
		public System.Nullable<TargetWindowTargetWindowOption> TargetWindowOption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TargetWindowTargetWindowOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW_WINDOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURRENT_WINDOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 2,
	}
	
	/// <summary>
	/// Creative Custom Event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreativeCustomEvent
	{
		
		/// <summary>
		/// Unique ID of this event used by Reporting and Data Transfer. This is a read-only field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserCustomEventId")]
		public string AdvertiserCustomEventId { get; set; }
		
		/// <summary>
		/// User-entered name for the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserCustomEventName")]
		public string AdvertiserCustomEventName { get; set; }
		
		/// <summary>
		/// Type of the event. This is a read-only field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserCustomEventType")]
		public System.Nullable<CreativeCustomEventAdvertiserCustomEventType> AdvertiserCustomEventType { get; set; }
		
		/// <summary>
		/// Artwork label column, used to link events in Campaign Manager back to events in Studio. This is a required field and should not be modified after insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artworkLabel")]
		public string ArtworkLabel { get; set; }
		
		/// <summary>
		/// Artwork type used by the creative.This is a read-only field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artworkType")]
		public CreativeArtworkType ArtworkType { get; set; }
		
		/// <summary>
		/// Click-through URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exitClickThroughUrl")]
		public CreativeClickThroughUrl ExitClickThroughUrl { get; set; }
		
		/// <summary>
		/// ID of this event. This is a required field and should not be modified after insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Popup Window Properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="popupWindowProperties")]
		public PopupWindowProperties PopupWindowProperties { get; set; }
		
		/// <summary>
		/// Target type used by the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetType")]
		public System.Nullable<CreativeCustomEventTargetType> TargetType { get; set; }
		
		/// <summary>
		/// Video reporting ID, used to differentiate multiple videos in a single creative. This is a read-only field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoReportingId")]
		public string VideoReportingId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeCustomEventAdvertiserCustomEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADVERTISER_EVENT_TIMER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADVERTISER_EVENT_EXIT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADVERTISER_EVENT_COUNTER = 2,
	}
	
	/// <summary>
	/// Popup Window Properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PopupWindowProperties
	{
		
		/// <summary>
		/// Represents the dimensions of ads, placements, creatives, or creative assets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimension")]
		public Size Dimension { get; set; }
		
		/// <summary>
		/// Offset Position.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public OffsetPosition Offset { get; set; }
		
		/// <summary>
		/// Popup window position either centered or at specific coordinate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="positionType")]
		public System.Nullable<PopupWindowPropertiesPositionType> PositionType { get; set; }
		
		/// <summary>
		/// Whether to display the browser address bar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showAddressBar")]
		public System.Nullable<System.Boolean> ShowAddressBar { get; set; }
		
		/// <summary>
		/// Whether to display the browser menu bar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showMenuBar")]
		public System.Nullable<System.Boolean> ShowMenuBar { get; set; }
		
		/// <summary>
		/// Whether to display the browser scroll bar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showScrollBar")]
		public System.Nullable<System.Boolean> ShowScrollBar { get; set; }
		
		/// <summary>
		/// Whether to display the browser status bar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showStatusBar")]
		public System.Nullable<System.Boolean> ShowStatusBar { get; set; }
		
		/// <summary>
		/// Whether to display the browser tool bar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showToolBar")]
		public System.Nullable<System.Boolean> ShowToolBar { get; set; }
		
		/// <summary>
		/// Title of popup window.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Offset Position.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OffsetPosition
	{
		
		/// <summary>
		/// Offset distance from left side of an asset or a window.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="left")]
		public System.Nullable<System.Int32> Left { get; set; }
		
		/// <summary>
		/// Offset distance from top side of an asset or a window.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="top")]
		public System.Nullable<System.Int32> Top { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PopupWindowPropertiesPositionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COORDINATES = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeCustomEventTargetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGET_BLANK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGET_TOP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGET_SELF = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGET_PARENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGET_POPUP = 4,
	}
	
	/// <summary>
	/// Encapsulates the list of rules for asset selection and a default asset in case none of the rules match. Applicable to INSTREAM_VIDEO creatives.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreativeAssetSelection
	{
		
		/// <summary>
		/// A creativeAssets[].id. This should refer to one of the parent assets in this creative, and will be served if none of the rules match. This is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultAssetId")]
		public string DefaultAssetId { get; set; }
		
		/// <summary>
		/// Rules determine which asset will be served to a viewer. Rules will be evaluated in the order in which they are stored in this list. This list must contain at least one rule. Applicable to INSTREAM_VIDEO creatives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public Rule[] Rules { get; set; }
	}
	
	/// <summary>
	/// A rule associates an asset with a targeting template for asset-level targeting. Applicable to INSTREAM_VIDEO creatives.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Rule
	{
		
		/// <summary>
		/// A creativeAssets[].id. This should refer to one of the parent assets in this creative. This is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assetId")]
		public string AssetId { get; set; }
		
		/// <summary>
		/// A user-friendly name for this rule. This is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A targeting template ID. The targeting from the targeting template will be used to determine whether this asset should be served. This is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingTemplateId")]
		public string TargetingTemplateId { get; set; }
	}
	
	/// <summary>
	/// Creative Asset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreativeAsset
	{
		
		/// <summary>
		/// Whether ActionScript3 is enabled for the flash asset. This is a read-only field. Applicable to the following creative type: FLASH_INPAGE. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionScript3")]
		public System.Nullable<System.Boolean> ActionScript3 { get; set; }
		
		/// <summary>
		/// Whether the video or audio asset is active. This is a read-only field for VPAID_NON_LINEAR_VIDEO assets. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Additional sizes associated with this creative asset. HTML5 asset generated by compatible software such as GWD will be able to support more sizes this creative asset can render.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalSizes")]
		public Size[] AdditionalSizes { get; set; }
		
		/// <summary>
		/// Possible alignments for an asset. This is a read-only field. Applicable to the following creative types: RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL .
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alignment")]
		public System.Nullable<CreativeAssetAlignment> Alignment { get; set; }
		
		/// <summary>
		/// Artwork type of rich media creative. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artworkType")]
		public CreativeArtworkType ArtworkType { get; set; }
		
		/// <summary>
		/// Creative Asset ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assetIdentifier")]
		public CreativeAssetId AssetIdentifier { get; set; }
		
		/// <summary>
		/// Audio stream bit rate in kbps. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audioBitRate")]
		public System.Nullable<System.Int32> AudioBitRate { get; set; }
		
		/// <summary>
		/// Audio sample bit rate in hertz. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audioSampleRate")]
		public System.Nullable<System.Int32> AudioSampleRate { get; set; }
		
		/// <summary>
		/// Creative Custom Event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupImageExit")]
		public CreativeCustomEvent BackupImageExit { get; set; }
		
		/// <summary>
		/// Detected bit-rate for audio or video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bitRate")]
		public System.Nullable<System.Int32> BitRate { get; set; }
		
		/// <summary>
		/// Rich media child asset type. This is a read-only field. Applicable to the following creative types: all VPAID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="childAssetType")]
		public System.Nullable<CreativeAssetChildAssetType> ChildAssetType { get; set; }
		
		/// <summary>
		/// Represents the dimensions of ads, placements, creatives, or creative assets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collapsedSize")]
		public Size CollapsedSize { get; set; }
		
		/// <summary>
		/// List of companion creatives assigned to an in-stream video creative asset. Acceptable values include IDs of existing flash and image creatives. Applicable to INSTREAM_VIDEO creative type with dynamicAssetSelection set to true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="companionCreativeIds")]
		public string[] CompanionCreativeIds { get; set; }
		
		/// <summary>
		/// Custom start time in seconds for making the asset visible. Applicable to the following creative types: all RICH_MEDIA. Value must be greater than or equal to 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customStartTimeValue")]
		public System.Nullable<System.Int32> CustomStartTimeValue { get; set; }
		
		/// <summary>
		/// List of feature dependencies for the creative asset that are detected by Campaign Manager. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative correctly. This is a read-only, auto-generated field. Applicable to the following creative types: HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectedFeatures")]
		public string[] DetectedFeatures { get; set; }
		
		/// <summary>
		/// Type of rich media asset. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayType")]
		public System.Nullable<CreativeAssetDisplayType> DisplayType { get; set; }
		
		/// <summary>
		/// Duration in seconds for which an asset will be displayed. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and VPAID_LINEAR_VIDEO. Value must be greater than or equal to 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		/// <summary>
		/// Duration type for which an asset will be displayed. Applicable to the following creative types: all RICH_MEDIA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="durationType")]
		public System.Nullable<CreativeAssetDurationType> DurationType { get; set; }
		
		/// <summary>
		/// Represents the dimensions of ads, placements, creatives, or creative assets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expandedDimension")]
		public Size ExpandedDimension { get; set; }
		
		/// <summary>
		/// File size associated with this creative asset. This is a read-only field. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileSize")]
		public string FileSize { get; set; }
		
		/// <summary>
		/// Flash version of the asset. This is a read-only field. Applicable to the following creative types: FLASH_INPAGE, all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flashVersion")]
		public System.Nullable<System.Int32> FlashVersion { get; set; }
		
		/// <summary>
		/// Video frame rate for video asset in frames per second. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frameRate")]
		public System.Nullable<System.Single> FrameRate { get; set; }
		
		/// <summary>
		/// Whether to hide Flash objects flag for an asset. Applicable to the following creative types: all RICH_MEDIA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hideFlashObjects")]
		public System.Nullable<System.Boolean> HideFlashObjects { get; set; }
		
		/// <summary>
		/// Whether to hide selection boxes flag for an asset. Applicable to the following creative types: all RICH_MEDIA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hideSelectionBoxes")]
		public System.Nullable<System.Boolean> HideSelectionBoxes { get; set; }
		
		/// <summary>
		/// Whether the asset is horizontally locked. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="horizontallyLocked")]
		public System.Nullable<System.Boolean> HorizontallyLocked { get; set; }
		
		/// <summary>
		/// Numeric ID of this creative asset. This is a required field and should not be modified. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idDimensionValue")]
		public DimensionValue IdDimensionValue { get; set; }
		
		/// <summary>
		/// Detected duration for audio or video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaDuration")]
		public System.Nullable<System.Single> MediaDuration { get; set; }
		
		/// <summary>
		/// Detected MIME type for audio or video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
		
		/// <summary>
		/// Offset Position.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public OffsetPosition Offset { get; set; }
		
		/// <summary>
		/// Orientation of video asset. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orientation")]
		public System.Nullable<CreativeAssetOrientation> Orientation { get; set; }
		
		/// <summary>
		/// Whether the backup asset is original or changed by the user in Campaign Manager. Applicable to the following creative types: all RICH_MEDIA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalBackup")]
		public System.Nullable<System.Boolean> OriginalBackup { get; set; }
		
		/// <summary>
		/// Whether this asset is used as a polite load asset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="politeLoad")]
		public System.Nullable<System.Boolean> PoliteLoad { get; set; }
		
		/// <summary>
		/// Offset Position.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public OffsetPosition Position { get; set; }
		
		/// <summary>
		/// Offset left unit for an asset. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="positionLeftUnit")]
		public System.Nullable<CreativeAssetPositionLeftUnit> PositionLeftUnit { get; set; }
		
		/// <summary>
		/// Offset top unit for an asset. This is a read-only field if the asset displayType is ASSET_DISPLAY_TYPE_OVERLAY. Applicable to the following creative types: all RICH_MEDIA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="positionTopUnit")]
		public CreativeAssetPositionLeftUnit PositionTopUnit { get; set; }
		
		/// <summary>
		/// Progressive URL for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressiveServingUrl")]
		public string ProgressiveServingUrl { get; set; }
		
		/// <summary>
		/// Whether the asset pushes down other content. Applicable to the following creative types: all RICH_MEDIA. Additionally, only applicable when the asset offsets are 0, the collapsedSize.width matches size.width, and the collapsedSize.height is less than size.height.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pushdown")]
		public System.Nullable<System.Boolean> Pushdown { get; set; }
		
		/// <summary>
		/// Pushdown duration in seconds for an asset. Applicable to the following creative types: all RICH_MEDIA.Additionally, only applicable when the asset pushdown field is true, the offsets are 0, the collapsedSize.width matches size.width, and the collapsedSize.height is less than size.height. Acceptable values are 0 to 9.99, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pushdownDuration")]
		public System.Nullable<System.Single> PushdownDuration { get; set; }
		
		/// <summary>
		/// Role of the asset in relation to creative. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT. This is a required field. PRIMARY applies to DISPLAY, FLASH_INPAGE, HTML5_BANNER, IMAGE, DISPLAY_IMAGE_GALLERY, all RICH_MEDIA (which may contain multiple primary assets), and all VPAID creatives. BACKUP_IMAGE applies to FLASH_INPAGE, HTML5_BANNER, all RICH_MEDIA, and all VPAID creatives. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE. ADDITIONAL_IMAGE and ADDITIONAL_FLASH apply to FLASH_INPAGE creatives. OTHER refers to assets from sources other than Campaign Manager, such as Studio uploaded assets, applicable to all RICH_MEDIA and all VPAID creatives. PARENT_VIDEO refers to videos uploaded by the user in Campaign Manager and is applicable to INSTREAM_VIDEO and VPAID_LINEAR_VIDEO creatives. TRANSCODED_VIDEO refers to videos transcoded by Campaign Manager from PARENT_VIDEO assets and is applicable to INSTREAM_VIDEO and VPAID_LINEAR_VIDEO creatives. ALTERNATE_VIDEO refers to the Campaign Manager representation of child asset videos from Studio, and is applicable to VPAID_LINEAR_VIDEO creatives. These cannot be added or removed within Campaign Manager. For VPAID_LINEAR_VIDEO creatives, PARENT_VIDEO, TRANSCODED_VIDEO and ALTERNATE_VIDEO assets that are marked active serve as backup in case the VPAID creative cannot be served. Only PARENT_VIDEO assets can be added or removed for an INSTREAM_VIDEO or VPAID_LINEAR_VIDEO creative. PARENT_AUDIO refers to audios uploaded by the user in Campaign Manager and is applicable to INSTREAM_AUDIO creatives. TRANSCODED_AUDIO refers to audios transcoded by Campaign Manager from PARENT_AUDIO assets and is applicable to INSTREAM_AUDIO creatives. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public System.Nullable<CreativeAssetRole> Role { get; set; }
		
		/// <summary>
		/// Represents the dimensions of ads, placements, creatives, or creative assets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public Size Size { get; set; }
		
		/// <summary>
		/// Whether the asset is SSL-compliant. This is a read-only field. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslCompliant")]
		public System.Nullable<System.Boolean> SslCompliant { get; set; }
		
		/// <summary>
		/// Initial wait time type before making the asset visible. Applicable to the following creative types: all RICH_MEDIA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTimeType")]
		public System.Nullable<CreativeAssetStartTimeType> StartTimeType { get; set; }
		
		/// <summary>
		/// Streaming URL for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamingServingUrl")]
		public string StreamingServingUrl { get; set; }
		
		/// <summary>
		/// Whether the asset is transparent. Applicable to the following creative types: all RICH_MEDIA. Additionally, only applicable to HTML5 assets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transparency")]
		public System.Nullable<System.Boolean> Transparency { get; set; }
		
		/// <summary>
		/// Whether the asset is vertically locked. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verticallyLocked")]
		public System.Nullable<System.Boolean> VerticallyLocked { get; set; }
		
		/// <summary>
		/// Window mode options for flash assets. Applicable to the following creative types: FLASH_INPAGE, RICH_MEDIA_DISPLAY_EXPANDING, RICH_MEDIA_IM_EXPAND, RICH_MEDIA_DISPLAY_BANNER, and RICH_MEDIA_INPAGE_FLOATING.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="windowMode")]
		public System.Nullable<CreativeAssetWindowMode> WindowMode { get; set; }
		
		/// <summary>
		/// zIndex value of an asset. Applicable to the following creative types: all RICH_MEDIA.Additionally, only applicable to assets whose displayType is NOT one of the following types: ASSET_DISPLAY_TYPE_INPAGE or ASSET_DISPLAY_TYPE_OVERLAY. Acceptable values are -999999999 to 999999999, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zIndex")]
		public System.Nullable<System.Int32> ZIndex { get; set; }
		
		/// <summary>
		/// File name of zip file. This is a read-only field. Applicable to the following creative types: HTML5_BANNER.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zipFilename")]
		public string ZipFilename { get; set; }
		
		/// <summary>
		/// Size of zip file. This is a read-only field. Applicable to the following creative types: HTML5_BANNER.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zipFilesize")]
		public string ZipFilesize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeAssetAlignment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALIGNMENT_TOP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALIGNMENT_RIGHT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALIGNMENT_BOTTOM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALIGNMENT_LEFT = 3,
	}
	
	/// <summary>
	/// Creative Asset ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreativeAssetId
	{
		
		/// <summary>
		/// Name of the creative asset. This is a required field while inserting an asset. After insertion, this assetIdentifier is used to identify the uploaded asset. Characters in the name must be alphanumeric or one of the following: ".-_ ". Spaces are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Type of asset to upload. This is a required field. FLASH and IMAGE are no longer supported for new uploads. All image assets should use HTML_IMAGE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CreativeAssetIdType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeAssetIdType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMAGE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLASH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTML = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTML_IMAGE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUDIO = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeAssetChildAssetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHILD_ASSET_TYPE_FLASH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHILD_ASSET_TYPE_VIDEO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHILD_ASSET_TYPE_IMAGE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHILD_ASSET_TYPE_DATA = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeAssetDisplayType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_DISPLAY_TYPE_INPAGE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_DISPLAY_TYPE_FLOATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_DISPLAY_TYPE_OVERLAY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_DISPLAY_TYPE_EXPANDING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_DISPLAY_TYPE_FLASH_IN_FLASH = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_DISPLAY_TYPE_FLASH_IN_FLASH_EXPANDING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_DISPLAY_TYPE_PEEL_DOWN = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_DISPLAY_TYPE_VPAID_LINEAR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_DISPLAY_TYPE_VPAID_NON_LINEAR = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_DISPLAY_TYPE_BACKDROP = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeAssetDurationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_DURATION_TYPE_AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_DURATION_TYPE_NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_DURATION_TYPE_CUSTOM = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeAssetOrientation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LANDSCAPE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PORTRAIT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQUARE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeAssetPositionLeftUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFFSET_UNIT_PIXEL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFFSET_UNIT_PERCENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFFSET_UNIT_PIXEL_FROM_CENTER = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeAssetRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIMARY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BACKUP_IMAGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADDITIONAL_IMAGE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADDITIONAL_FLASH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARENT_VIDEO = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSCODED_VIDEO = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALTERNATE_VIDEO = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARENT_AUDIO = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSCODED_AUDIO = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeAssetStartTimeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_START_TIME_TYPE_NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_START_TIME_TYPE_CUSTOM = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeAssetWindowMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPAQUE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WINDOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSPARENT = 2,
	}
	
	/// <summary>
	/// Creative Field Assignment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreativeFieldAssignment
	{
		
		/// <summary>
		/// ID of the creative field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeFieldId")]
		public string CreativeFieldId { get; set; }
		
		/// <summary>
		/// ID of the creative field value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeFieldValueId")]
		public string CreativeFieldValueId { get; set; }
	}
	
	/// <summary>
	/// FsCommand.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FsCommand
	{
		
		/// <summary>
		/// Distance from the left of the browser.Applicable when positionOption is DISTANCE_FROM_TOP_LEFT_CORNER.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="left")]
		public System.Nullable<System.Int32> Left { get; set; }
		
		/// <summary>
		/// Position in the browser where the window will open.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="positionOption")]
		public System.Nullable<FsCommandPositionOption> PositionOption { get; set; }
		
		/// <summary>
		/// Distance from the top of the browser. Applicable when positionOption is DISTANCE_FROM_TOP_LEFT_CORNER.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="top")]
		public System.Nullable<System.Int32> Top { get; set; }
		
		/// <summary>
		/// Height of the window.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="windowHeight")]
		public System.Nullable<System.Int32> WindowHeight { get; set; }
		
		/// <summary>
		/// Width of the window.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="windowWidth")]
		public System.Nullable<System.Int32> WindowWidth { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FsCommandPositionOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISTANCE_FROM_TOP_LEFT_CORNER = 1,
	}
	
	/// <summary>
	/// Online Behavioral Advertiser icon.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ObaIcon
	{
		
		/// <summary>
		/// URL to redirect to when an OBA icon is clicked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconClickThroughUrl")]
		public string IconClickThroughUrl { get; set; }
		
		/// <summary>
		/// URL to track click when an OBA icon is clicked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconClickTrackingUrl")]
		public string IconClickTrackingUrl { get; set; }
		
		/// <summary>
		/// URL to track view when an OBA icon is clicked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconViewTrackingUrl")]
		public string IconViewTrackingUrl { get; set; }
		
		/// <summary>
		/// Identifies the industry initiative that the icon supports. For example, AdChoices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="program")]
		public string Program { get; set; }
		
		/// <summary>
		/// OBA icon resource URL. Campaign Manager only supports image and JavaScript icons. Learn more
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceUrl")]
		public string ResourceUrl { get; set; }
		
		/// <summary>
		/// Represents the dimensions of ads, placements, creatives, or creative assets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public Size Size { get; set; }
		
		/// <summary>
		/// OBA icon x coordinate position. Accepted values are left or right.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="xPosition")]
		public string XPosition { get; set; }
		
		/// <summary>
		/// OBA icon y coordinate position. Accepted values are top or bottom.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="yPosition")]
		public string YPosition { get; set; }
	}
	
	/// <summary>
	/// Video Offset
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VideoOffset
	{
		
		/// <summary>
		/// Duration, as a percentage of video duration. Do not set when offsetSeconds is set. Acceptable values are 0 to 100, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offsetPercentage")]
		public System.Nullable<System.Int32> OffsetPercentage { get; set; }
		
		/// <summary>
		/// Duration, in seconds. Do not set when offsetPercentage is set. Acceptable values are 0 to 86399, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offsetSeconds")]
		public System.Nullable<System.Int32> OffsetSeconds { get; set; }
	}
	
	/// <summary>
	/// Third-party Tracking URL.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThirdPartyTrackingUrl
	{
		
		/// <summary>
		/// Third-party URL type for in-stream video and in-stream audio creatives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thirdPartyUrlType")]
		public System.Nullable<ThirdPartyTrackingUrlThirdPartyUrlType> ThirdPartyUrlType { get; set; }
		
		/// <summary>
		/// URL for the specified third-party URL type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ThirdPartyTrackingUrlThirdPartyUrlType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPRESSION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLICK_TRACKING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_START = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_FIRST_QUARTILE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_MIDPOINT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_THIRD_QUARTILE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_COMPLETE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_MUTE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_PAUSE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_REWIND = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_FULLSCREEN = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_STOP = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_CUSTOM = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SURVEY = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RICH_MEDIA_IMPRESSION = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RICH_MEDIA_RM_IMPRESSION = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RICH_MEDIA_BACKUP_IMPRESSION = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_SKIP = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_PROGRESS = 18,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMAGE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISPLAY_REDIRECT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_DISPLAY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_REDIRECT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_DISPLAY_INTERSTITIAL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERSTITIAL_INTERNAL_REDIRECT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRACKING_TEXT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RICH_MEDIA_DISPLAY_BANNER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RICH_MEDIA_INPAGE_FLOATING = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RICH_MEDIA_IM_EXPAND = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RICH_MEDIA_DISPLAY_EXPANDING = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RICH_MEDIA_DISPLAY_INTERSTITIAL = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RICH_MEDIA_MOBILE_IN_APP = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLASH_INPAGE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTREAM_VIDEO = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VPAID_LINEAR_VIDEO = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VPAID_NON_LINEAR_VIDEO = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTREAM_VIDEO_REDIRECT = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RICH_MEDIA_PEEL_DOWN = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTML5_BANNER = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISPLAY = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISPLAY_IMAGE_GALLERY = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRAND_SAFE_DEFAULT_INSTREAM_VIDEO = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTREAM_AUDIO = 24,
	}
	
	/// <summary>
	/// A Universal Ad ID as per the VAST 4.0 spec. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and VPAID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UniversalAdId
	{
		
		/// <summary>
		/// Registry used for the Ad ID value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="registry")]
		public System.Nullable<UniversalAdIdRegistry> Registry { get; set; }
		
		/// <summary>
		/// ID value for this creative. Only alphanumeric characters and the following symbols are valid: "_/\-". Maximum length is 64 characters. Read only when registry is DCM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UniversalAdIdRegistry
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_ID_OFFICIAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLEARCAST = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DCM = 3,
	}
	
	/// <summary>
	/// CreativeAssets contains properties of a creative asset file which will be uploaded or has already been uploaded. Refer to the creative sample code for how to upload assets and insert a creative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreativeAssetMetadata
	{
		
		/// <summary>
		/// Creative Asset ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assetIdentifier")]
		public CreativeAssetId AssetIdentifier { get; set; }
		
		/// <summary>
		/// List of detected click tags for assets. This is a read-only, auto-generated field. This field is empty for a rich media asset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickTags")]
		public ClickTag[] ClickTags { get; set; }
		
		/// <summary>
		/// List of counter events configured for the asset. This is a read-only, auto-generated field and only applicable to a rich media asset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="counterCustomEvents")]
		public CreativeCustomEvent[] CounterCustomEvents { get; set; }
		
		/// <summary>
		/// List of feature dependencies for the creative asset that are detected by Campaign Manager. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative correctly. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectedFeatures")]
		public string[] DetectedFeatures { get; set; }
		
		/// <summary>
		/// List of exit events configured for the asset. This is a read-only, auto-generated field and only applicable to a rich media asset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exitCustomEvents")]
		public CreativeCustomEvent[] ExitCustomEvents { get; set; }
		
		/// <summary>
		/// Numeric ID of the asset. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idDimensionValue")]
		public DimensionValue IdDimensionValue { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#creativeAssetMetadata".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// True if the uploaded asset is a rich media asset. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="richMedia")]
		public System.Nullable<System.Boolean> RichMedia { get; set; }
		
		/// <summary>
		/// List of timer events configured for the asset. This is a read-only, auto-generated field and only applicable to a rich media asset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timerCustomEvents")]
		public CreativeCustomEvent[] TimerCustomEvents { get; set; }
		
		/// <summary>
		/// Rules validated during code generation that generated a warning. This is a read-only, auto-generated field. Possible values are: - "ADMOB_REFERENCED" - "ASSET_FORMAT_UNSUPPORTED_DCM" - "ASSET_INVALID" - "CLICK_TAG_HARD_CODED" - "CLICK_TAG_INVALID" - "CLICK_TAG_IN_GWD" - "CLICK_TAG_MISSING" - "CLICK_TAG_MORE_THAN_ONE" - "CLICK_TAG_NON_TOP_LEVEL" - "COMPONENT_UNSUPPORTED_DCM" - "ENABLER_UNSUPPORTED_METHOD_DCM" - "EXTERNAL_FILE_REFERENCED" - "FILE_DETAIL_EMPTY" - "FILE_TYPE_INVALID" - "GWD_PROPERTIES_INVALID" - "HTML5_FEATURE_UNSUPPORTED" - "LINKED_FILE_NOT_FOUND" - "MAX_FLASH_VERSION_11" - "MRAID_REFERENCED" - "NOT_SSL_COMPLIANT" - "ORPHANED_ASSET" - "PRIMARY_HTML_MISSING" - "SVG_INVALID" - "ZIP_INVALID" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warnedValidationRules")]
		public string[] WarnedValidationRules { get; set; }
	}
	
	/// <summary>
	/// Contains properties of a creative field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreativeField
	{
		
		/// <summary>
		/// Account ID of this creative field. This is a read-only field that can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Advertiser ID of this creative field. This is a required field on insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserIdDimensionValue")]
		public DimensionValue AdvertiserIdDimensionValue { get; set; }
		
		/// <summary>
		/// ID of this creative field. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#creativeField".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Name of this creative field. This is a required field and must be less than 256 characters long and unique among creative fields of the same advertiser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Subaccount ID of this creative field. This is a read-only field that can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subaccountId")]
		public string SubaccountId { get; set; }
	}
	
	/// <summary>
	/// Contains properties of a creative field value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreativeFieldValue
	{
		
		/// <summary>
		/// ID of this creative field value. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#creativeFieldValue".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Value of this creative field value. It needs to be less than 256 characters in length and unique per creative field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Creative Field Value List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreativeFieldValuesListResponse
	{
		
		/// <summary>
		/// Creative field value collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeFieldValues")]
		public CreativeFieldValue[] CreativeFieldValues { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#creativeFieldValuesListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to be used for the next list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Creative Field List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreativeFieldsListResponse
	{
		
		/// <summary>
		/// Creative field collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeFields")]
		public CreativeField[] CreativeFields { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#creativeFieldsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to be used for the next list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Contains properties of a creative group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreativeGroup
	{
		
		/// <summary>
		/// Account ID of this creative group. This is a read-only field that can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Advertiser ID of this creative group. This is a required field on insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserIdDimensionValue")]
		public DimensionValue AdvertiserIdDimensionValue { get; set; }
		
		/// <summary>
		/// Subgroup of the creative group. Assign your creative groups to a subgroup in order to filter or manage them more easily. This field is required on insertion and is read-only after insertion. Acceptable values are 1 to 2, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupNumber")]
		public System.Nullable<System.Int32> GroupNumber { get; set; }
		
		/// <summary>
		/// ID of this creative group. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#creativeGroup".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Name of this creative group. This is a required field and must be less than 256 characters long and unique among creative groups of the same advertiser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Subaccount ID of this creative group. This is a read-only field that can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subaccountId")]
		public string SubaccountId { get; set; }
	}
	
	/// <summary>
	/// Creative Group List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreativeGroupsListResponse
	{
		
		/// <summary>
		/// Creative group collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeGroups")]
		public CreativeGroup[] CreativeGroups { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#creativeGroupsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to be used for the next list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Creative List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreativesListResponse
	{
		
		/// <summary>
		/// Creative collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creatives")]
		public Creative[] Creatives { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#creativesListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to be used for the next list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Represents a Custom Rich Media Events group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomRichMediaEvents
	{
		
		/// <summary>
		/// List of custom rich media event IDs. Dimension values must be all of type dfa:richMediaEventTypeIdAndName.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filteredEventIds")]
		public DimensionValue[] FilteredEventIds { get; set; }
		
		/// <summary>
		/// The kind of resource this is, in this case dfareporting#customRichMediaEvents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// Custom Viewability Metric
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomViewabilityMetric
	{
		
		/// <summary>
		/// The attributes, like playtime and percent onscreen, that define the Custom Viewability Metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public CustomViewabilityMetricConfiguration Configuration { get; set; }
		
		/// <summary>
		/// ID of the custom viewability metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the custom viewability metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The attributes, like playtime and percent onscreen, that define the Custom Viewability Metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomViewabilityMetricConfiguration
	{
		
		/// <summary>
		/// Whether the video must be audible to count an impression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audible")]
		public System.Nullable<System.Boolean> Audible { get; set; }
		
		/// <summary>
		/// The time in milliseconds the video must play for the Custom Viewability Metric to count an impression. If both this and timePercent are specified, the earlier of the two will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeMillis")]
		public System.Nullable<System.Int32> TimeMillis { get; set; }
		
		/// <summary>
		/// The percentage of video that must play for the Custom Viewability Metric to count an impression. If both this and timeMillis are specified, the earlier of the two will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timePercent")]
		public System.Nullable<System.Int32> TimePercent { get; set; }
		
		/// <summary>
		/// The percentage of video that must be on screen for the Custom Viewability Metric to count an impression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewabilityPercent")]
		public System.Nullable<System.Int32> ViewabilityPercent { get; set; }
	}
	
	/// <summary>
	/// Represents a date range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DateRange
	{
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		/// <summary>
		/// The kind of resource this is, in this case dfareporting#dateRange.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The date range relative to the date of when the report is run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relativeDateRange")]
		public System.Nullable<DateRangeRelativeDateRange> RelativeDateRange { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DateRangeRelativeDateRange
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TODAY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YESTERDAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEK_TO_DATE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTH_TO_DATE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUARTER_TO_DATE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YEAR_TO_DATE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREVIOUS_WEEK = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREVIOUS_MONTH = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREVIOUS_QUARTER = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREVIOUS_YEAR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_7_DAYS = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_30_DAYS = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_90_DAYS = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_365_DAYS = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_24_MONTHS = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_14_DAYS = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_60_DAYS = 16,
	}
	
	/// <summary>
	/// Google Ad Manager Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DfpSettings
	{
		
		/// <summary>
		/// Ad Manager network code for this directory site.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dfpNetworkCode")]
		public string DfpNetworkCode { get; set; }
		
		/// <summary>
		/// Ad Manager network name for this directory site.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dfpNetworkName")]
		public string DfpNetworkName { get; set; }
		
		/// <summary>
		/// Whether this directory site accepts programmatic placements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="programmaticPlacementAccepted")]
		public System.Nullable<System.Boolean> ProgrammaticPlacementAccepted { get; set; }
		
		/// <summary>
		/// Whether this directory site accepts publisher-paid tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pubPaidPlacementAccepted")]
		public System.Nullable<System.Boolean> PubPaidPlacementAccepted { get; set; }
		
		/// <summary>
		/// Whether this directory site is available only via Publisher Portal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherPortalOnly")]
		public System.Nullable<System.Boolean> PublisherPortalOnly { get; set; }
	}
	
	/// <summary>
	/// Represents a dimension filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DimensionFilter
	{
		
		/// <summary>
		/// The name of the dimension to filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionName")]
		public string DimensionName { get; set; }
		
		/// <summary>
		/// The kind of resource this is, in this case dfareporting#dimensionFilter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The value of the dimension to filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Represents the list of DimensionValue resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DimensionValueList
	{
		
		/// <summary>
		/// The eTag of this response for caching purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The dimension values returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public DimensionValue[] Items { get; set; }
		
		/// <summary>
		/// The kind of list this is, in this case dfareporting#dimensionValueList.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Continuation token used to page through dimension values. To retrieve the next page of results, set the next request's "pageToken" to the value of this field. The page token is only valid for a limited amount of time and should not be persisted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Represents a DimensionValuesRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DimensionValueRequest
	{
		
		/// <summary>
		/// The name of the dimension for which values should be requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionName")]
		public string DimensionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		/// <summary>
		/// The list of filters by which to filter values. The filters are ANDed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public DimensionFilter[] Filters { get; set; }
		
		/// <summary>
		/// The kind of request this is, in this case dfareporting#dimensionValueRequest .
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
	}
	
	/// <summary>
	/// DirectorySites contains properties of a website from the Site Directory. Sites need to be added to an account via the Sites resource before they can be assigned to a placement.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DirectorySite
	{
		
		/// <summary>
		/// ID of this directory site. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idDimensionValue")]
		public DimensionValue IdDimensionValue { get; set; }
		
		/// <summary>
		/// Tag types for regular placements. Acceptable values are: - "STANDARD" - "IFRAME_JAVASCRIPT_INPAGE" - "INTERNAL_REDIRECT_INPAGE" - "JAVASCRIPT_INPAGE" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inpageTagFormats")]
		public string[] InpageTagFormats { get; set; }
		
		/// <summary>
		/// Tag types for interstitial placements. Acceptable values are: - "IFRAME_JAVASCRIPT_INTERSTITIAL" - "INTERNAL_REDIRECT_INTERSTITIAL" - "JAVASCRIPT_INTERSTITIAL" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interstitialTagFormats")]
		public string[] InterstitialTagFormats { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#directorySite".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Name of this directory site.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Directory Site Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public DirectorySiteSettings Settings { get; set; }
		
		/// <summary>
		/// URL of this directory site.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Directory Site Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DirectorySiteSettings
	{
		
		/// <summary>
		/// Whether this directory site has disabled active view creatives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeViewOptOut")]
		public System.Nullable<System.Boolean> ActiveViewOptOut { get; set; }
		
		/// <summary>
		/// Google Ad Manager Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dfpSettings")]
		public DfpSettings DfpSettings { get; set; }
		
		/// <summary>
		/// Whether this site accepts in-stream video ads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instreamVideoPlacementAccepted")]
		public System.Nullable<System.Boolean> InstreamVideoPlacementAccepted { get; set; }
		
		/// <summary>
		/// Whether this site accepts interstitial ads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interstitialPlacementAccepted")]
		public System.Nullable<System.Boolean> InterstitialPlacementAccepted { get; set; }
	}
	
	/// <summary>
	/// Directory Site List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DirectorySitesListResponse
	{
		
		/// <summary>
		/// Directory site collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directorySites")]
		public DirectorySite[] DirectorySites { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#directorySitesListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to be used for the next list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Contains properties of a dynamic targeting key. Dynamic targeting keys are unique, user-friendly labels, created at the advertiser level in DCM, that can be assigned to ads, creatives, and placements and used for targeting with Studio dynamic creatives. Use these labels instead of numeric Campaign Manager IDs (such as placement IDs) to save time and avoid errors in your dynamic feeds.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DynamicTargetingKey
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#dynamicTargetingKey".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Name of this dynamic targeting key. This is a required field. Must be less than 256 characters long and cannot contain commas. All characters are converted to lowercase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// ID of the object of this dynamic targeting key. This is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// Type of the object of this dynamic targeting key. This is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectType")]
		public System.Nullable<DynamicTargetingKeyObjectType> ObjectType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DynamicTargetingKeyObjectType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_ADVERTISER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_AD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_CREATIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_PLACEMENT = 3,
	}
	
	/// <summary>
	/// Dynamic Targeting Key List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DynamicTargetingKeysListResponse
	{
		
		/// <summary>
		/// Dynamic targeting key collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dynamicTargetingKeys")]
		public DynamicTargetingKey[] DynamicTargetingKeys { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#dynamicTargetingKeysListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// Contains properties of an event tag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EventTag
	{
		
		/// <summary>
		/// Account ID of this event tag. This is a read-only field that can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Advertiser ID of this event tag. This field or the campaignId field is required on insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserIdDimensionValue")]
		public DimensionValue AdvertiserIdDimensionValue { get; set; }
		
		/// <summary>
		/// Campaign ID of this event tag. This field or the advertiserId field is required on insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaignId")]
		public string CampaignId { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaignIdDimensionValue")]
		public DimensionValue CampaignIdDimensionValue { get; set; }
		
		/// <summary>
		/// Whether this event tag should be automatically enabled for all of the advertiser's campaigns and ads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabledByDefault")]
		public System.Nullable<System.Boolean> EnabledByDefault { get; set; }
		
		/// <summary>
		/// Whether to remove this event tag from ads that are trafficked through Display & Video 360 to Ad Exchange. This may be useful if the event tag uses a pixel that is unapproved for Ad Exchange bids on one or more networks, such as the Google Display Network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludeFromAdxRequests")]
		public System.Nullable<System.Boolean> ExcludeFromAdxRequests { get; set; }
		
		/// <summary>
		/// ID of this event tag. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#eventTag".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Name of this event tag. This is a required field and must be less than 256 characters long.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Site filter type for this event tag. If no type is specified then the event tag will be applied to all sites.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="siteFilterType")]
		public System.Nullable<EventTagSiteFilterType> SiteFilterType { get; set; }
		
		/// <summary>
		/// Filter list of site IDs associated with this event tag. The siteFilterType determines whether this is a allowlist or blocklist filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="siteIds")]
		public string[] SiteIds { get; set; }
		
		/// <summary>
		/// Whether this tag is SSL-compliant or not. This is a read-only field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslCompliant")]
		public System.Nullable<System.Boolean> SslCompliant { get; set; }
		
		/// <summary>
		/// Status of this event tag. Must be ENABLED for this event tag to fire. This is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<EventTagStatus> Status { get; set; }
		
		/// <summary>
		/// Subaccount ID of this event tag. This is a read-only field that can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subaccountId")]
		public string SubaccountId { get; set; }
		
		/// <summary>
		/// Event tag type. Can be used to specify whether to use a third-party pixel, a third-party JavaScript URL, or a third-party click-through URL for either impression or click tracking. This is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<EventTagType> Type { get; set; }
		
		/// <summary>
		/// Payload URL for this event tag. The URL on a click-through event tag should have a landing page URL appended to the end of it. This field is required on insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Number of times the landing page URL should be URL-escaped before being appended to the click-through event tag URL. Only applies to click-through event tags as specified by the event tag type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlEscapeLevels")]
		public System.Nullable<System.Int32> UrlEscapeLevels { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EventTagSiteFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOWLIST = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLOCKLIST = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EventTagStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EventTagType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPRESSION_IMAGE_EVENT_TAG = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPRESSION_JAVASCRIPT_EVENT_TAG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLICK_THROUGH_EVENT_TAG = 2,
	}
	
	/// <summary>
	/// Event Tag List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EventTagsListResponse
	{
		
		/// <summary>
		/// Event tag collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventTags")]
		public EventTag[] EventTags { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#eventTagsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// Represents a File resource. A file contains the metadata for a report run. It shows the status of the run and holds the URLs to the generated report data if the run is finished and the status is "REPORT_AVAILABLE".
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class File
	{
		
		/// <summary>
		/// Represents a date range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateRange")]
		public DateRange DateRange { get; set; }
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The filename of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileName")]
		public string FileName { get; set; }
		
		/// <summary>
		/// The output format of the report. Only available once the file is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public System.Nullable<FileFormat> Format { get; set; }
		
		/// <summary>
		/// The unique ID of this report file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#file".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The timestamp in milliseconds since epoch when this file was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public string LastModifiedTime { get; set; }
		
		/// <summary>
		/// The ID of the report this file was generated from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportId")]
		public string ReportId { get; set; }
		
		/// <summary>
		/// The status of the report file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<FileStatus> Status { get; set; }
		
		/// <summary>
		/// The URLs where the completed report file can be downloaded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urls")]
		public FileUrls Urls { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FileFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CSV = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCEL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FileStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCESSING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPORT_AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 4,
	}
	
	public class FileUrls
	{
		
		/// <summary>
		/// The URL for downloading the report data through the API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiUrl")]
		public string ApiUrl { get; set; }
		
		/// <summary>
		/// The URL for downloading the report data through a browser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="browserUrl")]
		public string BrowserUrl { get; set; }
	}
	
	/// <summary>
	/// List of files for a report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FileList
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The files returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public File[] Items { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#fileList".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Continuation token used to page through files. To retrieve the next page of results, set the next request's "pageToken" to the value of this field. The page token is only valid for a limited amount of time and should not be persisted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Flight
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Flight
	{
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		/// <summary>
		/// Rate or cost of this flight.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rateOrCost")]
		public string RateOrCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
		
		/// <summary>
		/// Units of this flight.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
	}
	
	/// <summary>
	/// Floodlight Activity GenerateTag Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FloodlightActivitiesGenerateTagResponse
	{
		
		/// <summary>
		/// Generated tag for this Floodlight activity. For global site tags, this is the event snippet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floodlightActivityTag")]
		public string FloodlightActivityTag { get; set; }
		
		/// <summary>
		/// The global snippet section of a global site tag. The global site tag sets new cookies on your domain, which will store a unique identifier for a user or the ad click that brought the user to your site. Learn more.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="globalSiteTagGlobalSnippet")]
		public string GlobalSiteTagGlobalSnippet { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#floodlightActivitiesGenerateTagResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// Floodlight Activity List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FloodlightActivitiesListResponse
	{
		
		/// <summary>
		/// Floodlight activity collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floodlightActivities")]
		public FloodlightActivity[] FloodlightActivities { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#floodlightActivitiesListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to be used for the next list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Contains properties of a Floodlight activity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FloodlightActivity
	{
		
		/// <summary>
		/// Account ID of this floodlight activity. This is a read-only field that can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Advertiser ID of this floodlight activity. If this field is left blank, the value will be copied over either from the activity group's advertiser or the existing activity's advertiser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserIdDimensionValue")]
		public DimensionValue AdvertiserIdDimensionValue { get; set; }
		
		/// <summary>
		/// Whether the activity is enabled for attribution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributionEnabled")]
		public System.Nullable<System.Boolean> AttributionEnabled { get; set; }
		
		/// <summary>
		/// Code type used for cache busting in the generated tag. Applicable only when floodlightActivityGroupType is COUNTER and countingMethod is STANDARD_COUNTING or UNIQUE_COUNTING.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cacheBustingType")]
		public System.Nullable<FloodlightActivityCacheBustingType> CacheBustingType { get; set; }
		
		/// <summary>
		/// Counting method for conversions for this floodlight activity. This is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countingMethod")]
		public System.Nullable<FloodlightActivityCountingMethod> CountingMethod { get; set; }
		
		/// <summary>
		/// Dynamic floodlight tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultTags")]
		public FloodlightActivityDynamicTag[] DefaultTags { get; set; }
		
		/// <summary>
		/// URL where this tag will be deployed. If specified, must be less than 256 characters long.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectedUrl")]
		public string ExpectedUrl { get; set; }
		
		/// <summary>
		/// Floodlight activity group ID of this floodlight activity. This is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floodlightActivityGroupId")]
		public string FloodlightActivityGroupId { get; set; }
		
		/// <summary>
		/// Name of the associated floodlight activity group. This is a read-only field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floodlightActivityGroupName")]
		public string FloodlightActivityGroupName { get; set; }
		
		/// <summary>
		/// Tag string of the associated floodlight activity group. This is a read-only field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floodlightActivityGroupTagString")]
		public string FloodlightActivityGroupTagString { get; set; }
		
		/// <summary>
		/// Type of the associated floodlight activity group. This is a read-only field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floodlightActivityGroupType")]
		public System.Nullable<FloodlightActivityFloodlightActivityGroupType> FloodlightActivityGroupType { get; set; }
		
		/// <summary>
		/// Floodlight configuration ID of this floodlight activity. If this field is left blank, the value will be copied over either from the activity group's floodlight configuration or from the existing activity's floodlight configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floodlightConfigurationId")]
		public string FloodlightConfigurationId { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floodlightConfigurationIdDimensionValue")]
		public DimensionValue FloodlightConfigurationIdDimensionValue { get; set; }
		
		/// <summary>
		/// The type of Floodlight tag this activity will generate. This is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floodlightTagType")]
		public System.Nullable<FloodlightActivityFloodlightTagType> FloodlightTagType { get; set; }
		
		/// <summary>
		/// ID of this floodlight activity. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idDimensionValue")]
		public DimensionValue IdDimensionValue { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#floodlightActivity".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Name of this floodlight activity. This is a required field. Must be less than 129 characters long and cannot contain quotes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// General notes or implementation instructions for the tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// Publisher dynamic floodlight tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherTags")]
		public FloodlightActivityPublisherDynamicTag[] PublisherTags { get; set; }
		
		/// <summary>
		/// Whether this tag should use SSL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secure")]
		public System.Nullable<System.Boolean> Secure { get; set; }
		
		/// <summary>
		/// Whether the floodlight activity is SSL-compliant. This is a read-only field, its value detected by the system from the floodlight tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslCompliant")]
		public System.Nullable<System.Boolean> SslCompliant { get; set; }
		
		/// <summary>
		/// Whether this floodlight activity must be SSL-compliant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslRequired")]
		public System.Nullable<System.Boolean> SslRequired { get; set; }
		
		/// <summary>
		/// The status of the activity. This can only be set to ACTIVE or ARCHIVED_AND_DISABLED. The ARCHIVED status is no longer supported and cannot be set for Floodlight activities. The DISABLED_POLICY status indicates that a Floodlight activity is violating Google policy. Contact your account manager for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<FloodlightActivityStatus> Status { get; set; }
		
		/// <summary>
		/// Subaccount ID of this floodlight activity. This is a read-only field that can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subaccountId")]
		public string SubaccountId { get; set; }
		
		/// <summary>
		/// Tag format type for the floodlight activity. If left blank, the tag format will default to HTML.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagFormat")]
		public System.Nullable<FloodlightActivityTagFormat> TagFormat { get; set; }
		
		/// <summary>
		/// Value of the cat= parameter in the floodlight tag, which the ad servers use to identify the activity. This is optional: if empty, a new tag string will be generated for you. This string must be 1 to 8 characters long, with valid characters being a-z0-9[ _ ]. This tag string must also be unique among activities of the same activity group. This field is read-only after insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagString")]
		public string TagString { get; set; }
		
		/// <summary>
		/// List of the user-defined variables used by this conversion tag. These map to the "u[1-100]=" in the tags. Each of these can have a user defined type. Acceptable values are U1 to U100, inclusive. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userDefinedVariableTypes")]
		public CustomFloodlightVariableType[] UserDefinedVariableTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FloodlightActivityCacheBustingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JAVASCRIPT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE_SERVER_PAGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHP = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLD_FUSION = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FloodlightActivityCountingMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD_COUNTING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNIQUE_COUNTING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SESSION_COUNTING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSACTIONS_COUNTING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITEMS_SOLD_COUNTING = 4,
	}
	
	/// <summary>
	/// Dynamic Tag
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FloodlightActivityDynamicTag
	{
		
		/// <summary>
		/// ID of this dynamic tag. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of this tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Tag code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FloodlightActivityFloodlightActivityGroupType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COUNTER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SALE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FloodlightActivityFloodlightTagType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IFRAME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMAGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLOBAL_SITE_TAG = 2,
	}
	
	/// <summary>
	/// Publisher Dynamic Tag
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FloodlightActivityPublisherDynamicTag
	{
		
		/// <summary>
		/// Whether this tag is applicable only for click-throughs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickThrough")]
		public System.Nullable<System.Boolean> ClickThrough { get; set; }
		
		/// <summary>
		/// Directory site ID of this dynamic tag. This is a write-only field that can be used as an alternative to the siteId field. When this resource is retrieved, only the siteId field will be populated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directorySiteId")]
		public string DirectorySiteId { get; set; }
		
		/// <summary>
		/// Dynamic Tag
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dynamicTag")]
		public FloodlightActivityDynamicTag DynamicTag { get; set; }
		
		/// <summary>
		/// Site ID of this dynamic tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="siteId")]
		public string SiteId { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="siteIdDimensionValue")]
		public DimensionValue SiteIdDimensionValue { get; set; }
		
		/// <summary>
		/// Whether this tag is applicable only for view-throughs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewThrough")]
		public System.Nullable<System.Boolean> ViewThrough { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FloodlightActivityStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVED_AND_DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED_POLICY = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FloodlightActivityTagFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTML = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XHTML = 1,
	}
	
	/// <summary>
	/// Contains properties of a Floodlight activity group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FloodlightActivityGroup
	{
		
		/// <summary>
		/// Account ID of this floodlight activity group. This is a read-only field that can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Advertiser ID of this floodlight activity group. If this field is left blank, the value will be copied over either from the floodlight configuration's advertiser or from the existing activity group's advertiser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserIdDimensionValue")]
		public DimensionValue AdvertiserIdDimensionValue { get; set; }
		
		/// <summary>
		/// Floodlight configuration ID of this floodlight activity group. This is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floodlightConfigurationId")]
		public string FloodlightConfigurationId { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floodlightConfigurationIdDimensionValue")]
		public DimensionValue FloodlightConfigurationIdDimensionValue { get; set; }
		
		/// <summary>
		/// ID of this floodlight activity group. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idDimensionValue")]
		public DimensionValue IdDimensionValue { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#floodlightActivityGroup".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Name of this floodlight activity group. This is a required field. Must be less than 65 characters long and cannot contain quotes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Subaccount ID of this floodlight activity group. This is a read-only field that can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subaccountId")]
		public string SubaccountId { get; set; }
		
		/// <summary>
		/// Value of the type= parameter in the floodlight tag, which the ad servers use to identify the activity group that the activity belongs to. This is optional: if empty, a new tag string will be generated for you. This string must be 1 to 8 characters long, with valid characters being a-z0-9[ _ ]. This tag string must also be unique among activity groups of the same floodlight configuration. This field is read-only after insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagString")]
		public string TagString { get; set; }
		
		/// <summary>
		/// Type of the floodlight activity group. This is a required field that is read-only after insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public FloodlightActivityFloodlightActivityGroupType Type { get; set; }
	}
	
	/// <summary>
	/// Floodlight Activity Group List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FloodlightActivityGroupsListResponse
	{
		
		/// <summary>
		/// Floodlight activity group collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floodlightActivityGroups")]
		public FloodlightActivityGroup[] FloodlightActivityGroups { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#floodlightActivityGroupsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to be used for the next list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Contains properties of a Floodlight configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FloodlightConfiguration
	{
		
		/// <summary>
		/// Account ID of this floodlight configuration. This is a read-only field that can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Advertiser ID of the parent advertiser of this floodlight configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserIdDimensionValue")]
		public DimensionValue AdvertiserIdDimensionValue { get; set; }
		
		/// <summary>
		/// Whether advertiser data is shared with Google Analytics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="analyticsDataSharingEnabled")]
		public System.Nullable<System.Boolean> AnalyticsDataSharingEnabled { get; set; }
		
		/// <summary>
		/// Custom Viewability Metric
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customViewabilityMetric")]
		public CustomViewabilityMetric CustomViewabilityMetric { get; set; }
		
		/// <summary>
		/// Whether the exposure-to-conversion report is enabled. This report shows detailed pathway information on up to 10 of the most recent ad exposures seen by a user before converting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exposureToConversionEnabled")]
		public System.Nullable<System.Boolean> ExposureToConversionEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstDayOfWeek")]
		public System.Nullable<FloodlightConfigurationFirstDayOfWeek> FirstDayOfWeek { get; set; }
		
		/// <summary>
		/// ID of this floodlight configuration. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idDimensionValue")]
		public DimensionValue IdDimensionValue { get; set; }
		
		/// <summary>
		/// Whether in-app attribution tracking is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inAppAttributionTrackingEnabled")]
		public System.Nullable<System.Boolean> InAppAttributionTrackingEnabled { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#floodlightConfiguration".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Lookback configuration settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lookbackConfiguration")]
		public LookbackConfiguration LookbackConfiguration { get; set; }
		
		/// <summary>
		/// Types of attribution options for natural search conversions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="naturalSearchConversionAttributionOption")]
		public System.Nullable<FloodlightConfigurationNaturalSearchConversionAttributionOption> NaturalSearchConversionAttributionOption { get; set; }
		
		/// <summary>
		/// Omniture Integration Settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="omnitureSettings")]
		public OmnitureSettings OmnitureSettings { get; set; }
		
		/// <summary>
		/// Subaccount ID of this floodlight configuration. This is a read-only field that can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subaccountId")]
		public string SubaccountId { get; set; }
		
		/// <summary>
		/// Dynamic and Image Tag Settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagSettings")]
		public TagSettings TagSettings { get; set; }
		
		/// <summary>
		/// List of third-party authentication tokens enabled for this configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thirdPartyAuthenticationTokens")]
		public ThirdPartyAuthenticationToken[] ThirdPartyAuthenticationTokens { get; set; }
		
		/// <summary>
		/// List of user defined variables enabled for this configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userDefinedVariableConfigurations")]
		public UserDefinedVariableConfiguration[] UserDefinedVariableConfigurations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FloodlightConfigurationFirstDayOfWeek
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUNDAY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONDAY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FloodlightConfigurationNaturalSearchConversionAttributionOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUDE_NATURAL_SEARCH_CONVERSION_ATTRIBUTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE_NATURAL_SEARCH_CONVERSION_ATTRIBUTION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE_NATURAL_SEARCH_TIERED_CONVERSION_ATTRIBUTION = 2,
	}
	
	/// <summary>
	/// Omniture Integration Settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OmnitureSettings
	{
		
		/// <summary>
		/// Whether placement cost data will be sent to Omniture. This property can be enabled only if omnitureIntegrationEnabled is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="omnitureCostDataEnabled")]
		public System.Nullable<System.Boolean> OmnitureCostDataEnabled { get; set; }
		
		/// <summary>
		/// Whether Omniture integration is enabled. This property can be enabled only when the "Advanced Ad Serving" account setting is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="omnitureIntegrationEnabled")]
		public System.Nullable<System.Boolean> OmnitureIntegrationEnabled { get; set; }
	}
	
	/// <summary>
	/// Dynamic and Image Tag Settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagSettings
	{
		
		/// <summary>
		/// Whether dynamic floodlight tags are enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dynamicTagEnabled")]
		public System.Nullable<System.Boolean> DynamicTagEnabled { get; set; }
		
		/// <summary>
		/// Whether image tags are enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageTagEnabled")]
		public System.Nullable<System.Boolean> ImageTagEnabled { get; set; }
	}
	
	/// <summary>
	/// Third Party Authentication Token
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThirdPartyAuthenticationToken
	{
		
		/// <summary>
		/// Name of the third-party authentication token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Value of the third-party authentication token. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// User Defined Variable configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserDefinedVariableConfiguration
	{
		
		/// <summary>
		/// Data type for the variable. This is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public System.Nullable<UserDefinedVariableConfigurationDataType> DataType { get; set; }
		
		/// <summary>
		/// User-friendly name for the variable which will appear in reports. This is a required field, must be less than 64 characters long, and cannot contain the following characters: ""<>".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportName")]
		public string ReportName { get; set; }
		
		/// <summary>
		/// Variable name in the tag. This is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variableType")]
		public CustomFloodlightVariableType VariableType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UserDefinedVariableConfigurationDataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBER = 1,
	}
	
	/// <summary>
	/// Floodlight Configuration List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FloodlightConfigurationsListResponse
	{
		
		/// <summary>
		/// Floodlight configuration collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floodlightConfigurations")]
		public FloodlightConfiguration[] FloodlightConfigurations { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#floodlightConfigurationsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// Represents a buy from the Planning inventory store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InventoryItem
	{
		
		/// <summary>
		/// Account ID of this inventory item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Ad slots of this inventory item. If this inventory item represents a standalone placement, there will be exactly one ad slot. If this inventory item represents a placement group, there will be more than one ad slot, each representing one child placement in that placement group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adSlots")]
		public AdSlot[] AdSlots { get; set; }
		
		/// <summary>
		/// Advertiser ID of this inventory item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// Content category ID of this inventory item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCategoryId")]
		public string ContentCategoryId { get; set; }
		
		/// <summary>
		/// Estimated click-through rate of this inventory item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimatedClickThroughRate")]
		public string EstimatedClickThroughRate { get; set; }
		
		/// <summary>
		/// Estimated conversion rate of this inventory item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimatedConversionRate")]
		public string EstimatedConversionRate { get; set; }
		
		/// <summary>
		/// ID of this inventory item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Whether this inventory item is in plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inPlan")]
		public System.Nullable<System.Boolean> InPlan { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#inventoryItem".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Modification timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedInfo")]
		public LastModifiedInfo LastModifiedInfo { get; set; }
		
		/// <summary>
		/// Name of this inventory item. For standalone inventory items, this is the same name as that of its only ad slot. For group inventory items, this can differ from the name of any of its ad slots.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Negotiation channel ID of this inventory item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negotiationChannelId")]
		public string NegotiationChannelId { get; set; }
		
		/// <summary>
		/// Order ID of this inventory item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderId")]
		public string OrderId { get; set; }
		
		/// <summary>
		/// Placement strategy ID of this inventory item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placementStrategyId")]
		public string PlacementStrategyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pricing")]
		public Pricing Pricing { get; set; }
		
		/// <summary>
		/// Project ID of this inventory item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// RFP ID of this inventory item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rfpId")]
		public string RfpId { get; set; }
		
		/// <summary>
		/// ID of the site this inventory item is associated with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="siteId")]
		public string SiteId { get; set; }
		
		/// <summary>
		/// Subaccount ID of this inventory item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subaccountId")]
		public string SubaccountId { get; set; }
		
		/// <summary>
		/// Type of inventory item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<InventoryItemType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Pricing
	{
		
		/// <summary>
		/// Cap cost type of this inventory item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capCostType")]
		public System.Nullable<PricingCapCostType> CapCostType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		/// <summary>
		/// Flights of this inventory item. A flight (a.k.a. pricing period) represents the inventory item pricing information for a specific period of time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flights")]
		public Flight[] Flights { get; set; }
		
		/// <summary>
		/// Group type of this inventory item if it represents a placement group. Is null otherwise. There are two type of placement groups: PLANNING_PLACEMENT_GROUP_TYPE_PACKAGE is a simple group of inventory items that acts as a single pricing point for a group of tags. PLANNING_PLACEMENT_GROUP_TYPE_ROADBLOCK is a group of inventory items that not only acts as a single pricing point, but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned inventory items to be marked as primary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupType")]
		public System.Nullable<PricingGroupType> GroupType { get; set; }
		
		/// <summary>
		/// Pricing type of this inventory item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pricingType")]
		public System.Nullable<PricingPricingType> PricingType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PricingCapCostType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLANNING_PLACEMENT_CAP_COST_TYPE_NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLANNING_PLACEMENT_CAP_COST_TYPE_MONTHLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLANNING_PLACEMENT_CAP_COST_TYPE_CUMULATIVE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PricingGroupType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLANNING_PLACEMENT_GROUP_TYPE_PACKAGE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLANNING_PLACEMENT_GROUP_TYPE_ROADBLOCK = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PricingPricingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLANNING_PLACEMENT_PRICING_TYPE_IMPRESSIONS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLANNING_PLACEMENT_PRICING_TYPE_CPM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLANNING_PLACEMENT_PRICING_TYPE_CLICKS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLANNING_PLACEMENT_PRICING_TYPE_CPC = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLANNING_PLACEMENT_PRICING_TYPE_CPA = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLANNING_PLACEMENT_PRICING_TYPE_FLAT_RATE_IMPRESSIONS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLANNING_PLACEMENT_PRICING_TYPE_FLAT_RATE_CLICKS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLANNING_PLACEMENT_PRICING_TYPE_CPM_ACTIVEVIEW = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InventoryItemType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLANNING_PLACEMENT_TYPE_REGULAR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLANNING_PLACEMENT_TYPE_CREDIT = 1,
	}
	
	/// <summary>
	/// Inventory item List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InventoryItemsListResponse
	{
		
		/// <summary>
		/// Inventory item collection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventoryItems")]
		public InventoryItem[] InventoryItems { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#inventoryItemsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to be used for the next list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Language List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LanguagesListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#languagesListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Language collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public Language[] Languages { get; set; }
	}
	
	/// <summary>
	/// A group clause made up of list population terms representing constraints joined by ORs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPopulationClause
	{
		
		/// <summary>
		/// Terms of this list population clause. Each clause is made up of list population terms representing constraints and are joined by ORs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="terms")]
		public ListPopulationTerm[] Terms { get; set; }
	}
	
	/// <summary>
	/// Remarketing List Population Rule Term.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPopulationTerm
	{
		
		/// <summary>
		/// Will be true if the term should check if the user is in the list and false if the term should check if the user is not in the list. This field is only relevant when type is set to LIST_MEMBERSHIP_TERM. False by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contains")]
		public System.Nullable<System.Boolean> Contains { get; set; }
		
		/// <summary>
		/// Whether to negate the comparison result of this term during rule evaluation. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negation")]
		public System.Nullable<System.Boolean> Negation { get; set; }
		
		/// <summary>
		/// Comparison operator of this term. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public System.Nullable<ListPopulationTermOperator> Operator { get; set; }
		
		/// <summary>
		/// ID of the list in question. This field is only relevant when type is set to LIST_MEMBERSHIP_TERM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remarketingListId")]
		public string RemarketingListId { get; set; }
		
		/// <summary>
		/// List population term type determines the applicable fields in this object. If left unset or set to CUSTOM_VARIABLE_TERM, then variableName, variableFriendlyName, operator, value, and negation are applicable. If set to LIST_MEMBERSHIP_TERM then remarketingListId and contains are applicable. If set to REFERRER_TERM then operator, value, and negation are applicable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ListPopulationTermType> Type { get; set; }
		
		/// <summary>
		/// Literal to compare the variable to. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
		
		/// <summary>
		/// Friendly name of this term's variable. This is a read-only, auto-generated field. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variableFriendlyName")]
		public string VariableFriendlyName { get; set; }
		
		/// <summary>
		/// Name of the variable (U1, U2, etc.) being compared in this term. This field is only relevant when type is set to null, CUSTOM_VARIABLE_TERM or REFERRER_TERM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variableName")]
		public string VariableName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ListPopulationTermOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUM_EQUALS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUM_LESS_THAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUM_LESS_THAN_EQUAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUM_GREATER_THAN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUM_GREATER_THAN_EQUAL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING_EQUALS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING_CONTAINS = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ListPopulationTermType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_VARIABLE_TERM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIST_MEMBERSHIP_TERM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REFERRER_TERM = 2,
	}
	
	/// <summary>
	/// Remarketing List Population Rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPopulationRule
	{
		
		/// <summary>
		/// Floodlight activity ID associated with this rule. This field can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floodlightActivityId")]
		public string FloodlightActivityId { get; set; }
		
		/// <summary>
		/// Name of floodlight activity associated with this rule. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floodlightActivityName")]
		public string FloodlightActivityName { get; set; }
		
		/// <summary>
		/// Clauses that make up this list population rule. Clauses are joined by ANDs, and the clauses themselves are made up of list population terms which are joined by ORs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listPopulationClauses")]
		public ListPopulationClause[] ListPopulationClauses { get; set; }
	}
	
	/// <summary>
	/// Placement tag wrapping
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MeasurementPartnerWrappingData
	{
		
		/// <summary>
		/// Placement wrapping status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkStatus")]
		public MeasurementPartnerAdvertiserLinkLinkStatus LinkStatus { get; set; }
		
		/// <summary>
		/// Measurement partner used for wrapping the placement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="measurementPartner")]
		public MeasurementPartnerAdvertiserLinkMeasurementPartner MeasurementPartner { get; set; }
		
		/// <summary>
		/// Measurement mode for the wrapped placement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagWrappingMode")]
		public System.Nullable<MeasurementPartnerWrappingDataTagWrappingMode> TagWrappingMode { get; set; }
		
		/// <summary>
		/// Tag provided by the measurement partner during wrapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wrappedTag")]
		public string WrappedTag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MeasurementPartnerWrappingDataTagWrappingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLOCKING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONITORING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONITORING_READ_ONLY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_PIXEL_MONITORING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRACKING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VPAID_MONITORING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VPAID_BLOCKING = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_VPAID_MONITORING = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VPAID_ONLY_MONITORING = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VPAID_ONLY_BLOCKING = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VPAID_ONLY_FILTERING = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VPAID_FILTERING = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_VPAID_FILTERING = 13,
	}
	
	/// <summary>
	/// Metro List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MetrosListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#metrosListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Metro collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metros")]
		public Metro[] Metros { get; set; }
	}
	
	/// <summary>
	/// Mobile app List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MobileAppsListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#mobileAppsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Mobile apps collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileApps")]
		public MobileApp[] MobileApps { get; set; }
		
		/// <summary>
		/// Pagination token to be used for the next list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Mobile Carrier List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MobileCarriersListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#mobileCarriersListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Mobile carrier collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileCarriers")]
		public MobileCarrier[] MobileCarriers { get; set; }
	}
	
	/// <summary>
	/// Operating System Version List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OperatingSystemVersionsListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#operatingSystemVersionsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Operating system version collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatingSystemVersions")]
		public OperatingSystemVersion[] OperatingSystemVersions { get; set; }
	}
	
	/// <summary>
	/// Operating System List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OperatingSystemsListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#operatingSystemsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Operating system collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatingSystems")]
		public OperatingSystem[] OperatingSystems { get; set; }
	}
	
	/// <summary>
	/// Describes properties of a Planning order.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Order
	{
		
		/// <summary>
		/// Account ID of this order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Advertiser ID of this order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// IDs for users that have to approve documents created for this order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approverUserProfileIds")]
		public string[] ApproverUserProfileIds { get; set; }
		
		/// <summary>
		/// Buyer invoice ID associated with this order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyerInvoiceId")]
		public string BuyerInvoiceId { get; set; }
		
		/// <summary>
		/// Name of the buyer organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyerOrganizationName")]
		public string BuyerOrganizationName { get; set; }
		
		/// <summary>
		/// Comments in this order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public string Comments { get; set; }
		
		/// <summary>
		/// Contacts for this order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contacts")]
		public OrderContact[] Contacts { get; set; }
		
		/// <summary>
		/// ID of this order. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#order".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Modification timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedInfo")]
		public LastModifiedInfo LastModifiedInfo { get; set; }
		
		/// <summary>
		/// Name of this order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Notes of this order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// ID of the terms and conditions template used in this order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="planningTermId")]
		public string PlanningTermId { get; set; }
		
		/// <summary>
		/// Project ID of this order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Seller order ID associated with this order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellerOrderId")]
		public string SellerOrderId { get; set; }
		
		/// <summary>
		/// Name of the seller organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellerOrganizationName")]
		public string SellerOrganizationName { get; set; }
		
		/// <summary>
		/// Site IDs this order is associated with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="siteId")]
		public string[] SiteId { get; set; }
		
		/// <summary>
		/// Free-form site names this order is associated with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="siteNames")]
		public string[] SiteNames { get; set; }
		
		/// <summary>
		/// Subaccount ID of this order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subaccountId")]
		public string SubaccountId { get; set; }
		
		/// <summary>
		/// Terms and conditions of this order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="termsAndConditions")]
		public string TermsAndConditions { get; set; }
	}
	
	/// <summary>
	/// Contact of an order.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderContact
	{
		
		/// <summary>
		/// Free-form information about this contact. It could be any information related to this contact in addition to type, title, name, and signature user profile ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactInfo")]
		public string ContactInfo { get; set; }
		
		/// <summary>
		/// Name of this contact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactName")]
		public string ContactName { get; set; }
		
		/// <summary>
		/// Title of this contact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactTitle")]
		public string ContactTitle { get; set; }
		
		/// <summary>
		/// Type of this contact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactType")]
		public System.Nullable<OrderContactContactType> ContactType { get; set; }
		
		/// <summary>
		/// ID of the user profile containing the signature that will be embedded into order documents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signatureUserProfileId")]
		public string SignatureUserProfileId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OrderContactContactType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLANNING_ORDER_CONTACT_BUYER_CONTACT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLANNING_ORDER_CONTACT_BUYER_BILLING_CONTACT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLANNING_ORDER_CONTACT_SELLER_CONTACT = 2,
	}
	
	/// <summary>
	/// Order List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#ordersListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to be used for the next list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Order collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orders")]
		public Order[] Orders { get; set; }
	}
	
	/// <summary>
	/// Represents a DfaReporting path filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PathFilter
	{
		
		/// <summary>
		/// Event filters in path report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventFilters")]
		public EventFilter[] EventFilters { get; set; }
		
		/// <summary>
		/// The kind of resource this is, in this case dfareporting#pathFilter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Determines how the 'value' field is matched when filtering. If not specified, defaults to EXACT. If set to WILDCARD_EXPRESSION, '*' is allowed as a placeholder for variable length character sequences, and it can be escaped with a backslash. Note, only paid search dimensions ('dfa:paidSearch*') allow a matchType other than EXACT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pathMatchPosition")]
		public System.Nullable<PathFilterPathMatchPosition> PathMatchPosition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PathFilterPathMatchPosition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PATH_MATCH_POSITION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIRST = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST = 3,
	}
	
	/// <summary>
	/// Contains properties of a placement.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Placement
	{
		
		/// <summary>
		/// Account ID of this placement. This field can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Whether this placement is active, inactive, archived or permanently archived.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeStatus")]
		public System.Nullable<PlacementActiveStatus> ActiveStatus { get; set; }
		
		/// <summary>
		/// Whether this placement opts out of ad blocking. When true, ad blocking is disabled for this placement. When false, the campaign and site settings take effect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adBlockingOptOut")]
		public System.Nullable<System.Boolean> AdBlockingOptOut { get; set; }
		
		/// <summary>
		/// Additional sizes associated with this placement. When inserting or updating a placement, only the size ID field is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalSizes")]
		public Size[] AdditionalSizes { get; set; }
		
		/// <summary>
		/// Advertiser ID of this placement. This field can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserIdDimensionValue")]
		public DimensionValue AdvertiserIdDimensionValue { get; set; }
		
		/// <summary>
		/// Campaign ID of this placement. This field is a required field on insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaignId")]
		public string CampaignId { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaignIdDimensionValue")]
		public DimensionValue CampaignIdDimensionValue { get; set; }
		
		/// <summary>
		/// Comments for this placement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		/// <summary>
		/// Placement compatibility. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering on desktop, on mobile devices or in mobile apps for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are no longer allowed for new placement insertions. Instead, use DISPLAY or DISPLAY_INTERSTITIAL. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard. This field is required on insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compatibility")]
		public AdCompatibility Compatibility { get; set; }
		
		/// <summary>
		/// ID of the content category assigned to this placement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCategoryId")]
		public string ContentCategoryId { get; set; }
		
		/// <summary>
		/// Modification timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createInfo")]
		public LastModifiedInfo CreateInfo { get; set; }
		
		/// <summary>
		/// Directory site ID of this placement. On insert, you must set either this field or the siteId field to specify the site associated with this placement. This is a required field that is read-only after insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directorySiteId")]
		public string DirectorySiteId { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directorySiteIdDimensionValue")]
		public DimensionValue DirectorySiteIdDimensionValue { get; set; }
		
		/// <summary>
		/// External ID for this placement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalId")]
		public string ExternalId { get; set; }
		
		/// <summary>
		/// ID of this placement. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idDimensionValue")]
		public DimensionValue IdDimensionValue { get; set; }
		
		/// <summary>
		/// Key name of this placement. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyName")]
		public string KeyName { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#placement".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Modification timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedInfo")]
		public LastModifiedInfo LastModifiedInfo { get; set; }
		
		/// <summary>
		/// Lookback configuration settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lookbackConfiguration")]
		public LookbackConfiguration LookbackConfiguration { get; set; }
		
		/// <summary>
		/// Name of this placement.This is a required field and must be less than or equal to 512 characters long.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Placement tag wrapping
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerWrappingData")]
		public MeasurementPartnerWrappingData PartnerWrappingData { get; set; }
		
		/// <summary>
		/// Whether payment was approved for this placement. This is a read-only field relevant only to publisher-paid placements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentApproved")]
		public System.Nullable<System.Boolean> PaymentApproved { get; set; }
		
		/// <summary>
		/// Payment source for this placement. This is a required field that is read-only after insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentSource")]
		public System.Nullable<PlacementPaymentSource> PaymentSource { get; set; }
		
		/// <summary>
		/// ID of this placement's group, if applicable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placementGroupId")]
		public string PlacementGroupId { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placementGroupIdDimensionValue")]
		public DimensionValue PlacementGroupIdDimensionValue { get; set; }
		
		/// <summary>
		/// ID of the placement strategy assigned to this placement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placementStrategyId")]
		public string PlacementStrategyId { get; set; }
		
		/// <summary>
		/// Pricing Schedule
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pricingSchedule")]
		public PricingSchedule PricingSchedule { get; set; }
		
		/// <summary>
		/// Whether this placement is the primary placement of a roadblock (placement group). You cannot change this field from true to false. Setting this field to true will automatically set the primary field on the original primary placement of the roadblock to false, and it will automatically set the roadblock's primaryPlacementId field to the ID of this placement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primary")]
		public System.Nullable<System.Boolean> Primary { get; set; }
		
		/// <summary>
		/// Modification timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherUpdateInfo")]
		public LastModifiedInfo PublisherUpdateInfo { get; set; }
		
		/// <summary>
		/// Site ID associated with this placement. On insert, you must set either this field or the directorySiteId field to specify the site associated with this placement. This is a required field that is read-only after insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="siteId")]
		public string SiteId { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="siteIdDimensionValue")]
		public DimensionValue SiteIdDimensionValue { get; set; }
		
		/// <summary>
		/// Represents the dimensions of ads, placements, creatives, or creative assets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public Size Size { get; set; }
		
		/// <summary>
		/// Whether creatives assigned to this placement must be SSL-compliant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslRequired")]
		public System.Nullable<System.Boolean> SslRequired { get; set; }
		
		/// <summary>
		/// Third-party placement status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<PlacementStatus> Status { get; set; }
		
		/// <summary>
		/// Subaccount ID of this placement. This field can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subaccountId")]
		public string SubaccountId { get; set; }
		
		/// <summary>
		/// Tag formats to generate for this placement. This field is required on insertion. Acceptable values are: - "PLACEMENT_TAG_STANDARD" - "PLACEMENT_TAG_IFRAME_JAVASCRIPT" - "PLACEMENT_TAG_IFRAME_ILAYER" - "PLACEMENT_TAG_INTERNAL_REDIRECT" - "PLACEMENT_TAG_JAVASCRIPT" - "PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT" - "PLACEMENT_TAG_INTERSTITIAL_INTERNAL_REDIRECT" - "PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT" - "PLACEMENT_TAG_CLICK_COMMANDS" - "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH" - "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_3" - "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_4" - "PLACEMENT_TAG_TRACKING" - "PLACEMENT_TAG_TRACKING_IFRAME" - "PLACEMENT_TAG_TRACKING_JAVASCRIPT" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagFormats")]
		public string[] TagFormats { get; set; }
		
		/// <summary>
		/// Tag Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagSetting")]
		public TagSetting TagSetting { get; set; }
		
		/// <summary>
		/// Whether Verification and ActiveView are disabled for in-stream video creatives for this placement. The same setting videoActiveViewOptOut exists on the site level -- the opt out occurs if either of these settings are true. These settings are distinct from DirectorySites.settings.activeViewOptOut or Sites.siteSettings.activeViewOptOut which only apply to display ads. However, Accounts.activeViewOptOut opts out both video traffic, as well as display ads, from Verification and ActiveView.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoActiveViewOptOut")]
		public System.Nullable<System.Boolean> VideoActiveViewOptOut { get; set; }
		
		/// <summary>
		/// Video Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoSettings")]
		public VideoSettings VideoSettings { get; set; }
		
		/// <summary>
		/// VPAID adapter setting for this placement. Controls which VPAID format the measurement adapter will use for in-stream video creatives assigned to this placement. *Note:* Flash is no longer supported. This field now defaults to HTML5 when the following values are provided: FLASH, BOTH.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vpaidAdapterChoice")]
		public System.Nullable<PlacementVpaidAdapterChoice> VpaidAdapterChoice { get; set; }
		
		/// <summary>
		/// Whether this placement opts out of tag wrapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wrappingOptOut")]
		public System.Nullable<System.Boolean> WrappingOptOut { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PlacementActiveStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLACEMENT_STATUS_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLACEMENT_STATUS_ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLACEMENT_STATUS_INACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLACEMENT_STATUS_ARCHIVED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLACEMENT_STATUS_PERMANENTLY_ARCHIVED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PlacementPaymentSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLACEMENT_AGENCY_PAID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLACEMENT_PUBLISHER_PAID = 1,
	}
	
	/// <summary>
	/// Pricing Schedule
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PricingSchedule
	{
		
		/// <summary>
		/// Placement cap cost option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capCostOption")]
		public System.Nullable<PricingScheduleCapCostOption> CapCostOption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		/// <summary>
		/// Whether this placement is flighted. If true, pricing periods will be computed automatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flighted")]
		public System.Nullable<System.Boolean> Flighted { get; set; }
		
		/// <summary>
		/// Floodlight activity ID associated with this placement. This field should be set when placement pricing type is set to PRICING_TYPE_CPA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floodlightActivityId")]
		public string FloodlightActivityId { get; set; }
		
		/// <summary>
		/// Pricing periods for this placement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pricingPeriods")]
		public PricingSchedulePricingPeriod[] PricingPeriods { get; set; }
		
		/// <summary>
		/// Placement pricing type. This field is required on insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pricingType")]
		public System.Nullable<PricingSchedulePricingType> PricingType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testingStartDate")]
		public System.Nullable<System.DateOnly> TestingStartDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PricingScheduleCapCostOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAP_COST_NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAP_COST_MONTHLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAP_COST_CUMULATIVE = 2,
	}
	
	/// <summary>
	/// Pricing Period
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PricingSchedulePricingPeriod
	{
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		/// <summary>
		/// Comments for this pricing period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pricingComment")]
		public string PricingComment { get; set; }
		
		/// <summary>
		/// Rate or cost of this pricing period in nanos (i.e., multiplied by 1000000000). Acceptable values are 0 to 1000000000000000000, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rateOrCostNanos")]
		public string RateOrCostNanos { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
		
		/// <summary>
		/// Units of this pricing period. Acceptable values are 0 to 10000000000, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PricingSchedulePricingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRICING_TYPE_CPM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRICING_TYPE_CPC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRICING_TYPE_CPA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRICING_TYPE_FLAT_RATE_IMPRESSIONS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRICING_TYPE_FLAT_RATE_CLICKS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRICING_TYPE_CPM_ACTIVEVIEW = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PlacementStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_REVIEW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYMENT_ACCEPTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYMENT_REJECTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACKNOWLEDGE_REJECTION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACKNOWLEDGE_ACCEPTANCE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 5,
	}
	
	/// <summary>
	/// Tag Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagSetting
	{
		
		/// <summary>
		/// Additional key-values to be included in tags. Each key-value pair must be of the form key=value, and pairs must be separated by a semicolon (;). Keys and values must not contain commas. For example, id=2;color=red is a valid value for this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalKeyValues")]
		public string AdditionalKeyValues { get; set; }
		
		/// <summary>
		/// Whether static landing page URLs should be included in the tags. This setting applies only to placements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeClickThroughUrls")]
		public System.Nullable<System.Boolean> IncludeClickThroughUrls { get; set; }
		
		/// <summary>
		/// Whether click-tracking string should be included in the tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeClickTracking")]
		public System.Nullable<System.Boolean> IncludeClickTracking { get; set; }
		
		/// <summary>
		/// Option specifying how keywords are embedded in ad tags. This setting can be used to specify whether keyword placeholders are inserted in placement tags for this site. Publishers can then add keywords to those placeholders.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keywordOption")]
		public System.Nullable<TagSettingKeywordOption> KeywordOption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TagSettingKeywordOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLACEHOLDER_WITH_LIST_OF_KEYWORDS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IGNORE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERATE_SEPARATE_TAG_FOR_EACH_KEYWORD = 2,
	}
	
	/// <summary>
	/// Video Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VideoSettings
	{
		
		/// <summary>
		/// Companion Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="companionSettings")]
		public CompanionSetting CompanionSettings { get; set; }
		
		/// <summary>
		/// Duration of a video placement in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="durationSeconds")]
		public System.Nullable<System.Int32> DurationSeconds { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#videoSettings".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Whether OBA icons are enabled for this placement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="obaEnabled")]
		public System.Nullable<System.Boolean> ObaEnabled { get; set; }
		
		/// <summary>
		/// Online Behavioral Advertiser icon.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="obaSettings")]
		public ObaIcon ObaSettings { get; set; }
		
		/// <summary>
		/// Orientation of a video placement. If this value is set, placement will return assets matching the specified orientation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orientation")]
		public System.Nullable<VideoSettingsOrientation> Orientation { get; set; }
		
		/// <summary>
		/// Publisher specification ID of a video placement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherSpecificationId")]
		public string PublisherSpecificationId { get; set; }
		
		/// <summary>
		/// Skippable Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skippableSettings")]
		public SkippableSetting SkippableSettings { get; set; }
		
		/// <summary>
		/// Transcode Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transcodeSettings")]
		public TranscodeSetting TranscodeSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VideoSettingsOrientation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LANDSCAPE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PORTRAIT = 2,
	}
	
	/// <summary>
	/// Skippable Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SkippableSetting
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#skippableSetting".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Video Offset
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressOffset")]
		public VideoOffset ProgressOffset { get; set; }
		
		/// <summary>
		/// Video Offset
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipOffset")]
		public VideoOffset SkipOffset { get; set; }
		
		/// <summary>
		/// Whether the user can skip creatives served to this placement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skippable")]
		public System.Nullable<System.Boolean> Skippable { get; set; }
	}
	
	/// <summary>
	/// Transcode Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TranscodeSetting
	{
		
		/// <summary>
		/// Allowlist of video formats to be served to this placement. Set this list to null or empty to serve all video formats.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabledVideoFormats")]
		public int[] EnabledVideoFormats { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#transcodeSetting".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PlacementVpaidAdapterChoice
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLASH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTML5 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTH = 3,
	}
	
	/// <summary>
	/// Contains properties of a package or roadblock.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlacementGroup
	{
		
		/// <summary>
		/// Account ID of this placement group. This is a read-only field that can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Whether this placement group is active, inactive, archived or permanently archived.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeStatus")]
		public PlacementActiveStatus ActiveStatus { get; set; }
		
		/// <summary>
		/// Advertiser ID of this placement group. This is a required field on insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserIdDimensionValue")]
		public DimensionValue AdvertiserIdDimensionValue { get; set; }
		
		/// <summary>
		/// Campaign ID of this placement group. This field is required on insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaignId")]
		public string CampaignId { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaignIdDimensionValue")]
		public DimensionValue CampaignIdDimensionValue { get; set; }
		
		/// <summary>
		/// IDs of placements which are assigned to this placement group. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="childPlacementIds")]
		public string[] ChildPlacementIds { get; set; }
		
		/// <summary>
		/// Comments for this placement group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		/// <summary>
		/// ID of the content category assigned to this placement group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCategoryId")]
		public string ContentCategoryId { get; set; }
		
		/// <summary>
		/// Modification timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createInfo")]
		public LastModifiedInfo CreateInfo { get; set; }
		
		/// <summary>
		/// Directory site ID associated with this placement group. On insert, you must set either this field or the site_id field to specify the site associated with this placement group. This is a required field that is read-only after insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directorySiteId")]
		public string DirectorySiteId { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directorySiteIdDimensionValue")]
		public DimensionValue DirectorySiteIdDimensionValue { get; set; }
		
		/// <summary>
		/// External ID for this placement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalId")]
		public string ExternalId { get; set; }
		
		/// <summary>
		/// ID of this placement group. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idDimensionValue")]
		public DimensionValue IdDimensionValue { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#placementGroup".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Modification timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedInfo")]
		public LastModifiedInfo LastModifiedInfo { get; set; }
		
		/// <summary>
		/// Name of this placement group. This is a required field and must be less than 256 characters long.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Type of this placement group. A package is a simple group of placements that acts as a single pricing point for a group of tags. A roadblock is a group of placements that not only acts as a single pricing point, but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned placements to be marked as primary for reporting. This field is required on insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placementGroupType")]
		public System.Nullable<PlacementGroupPlacementGroupType> PlacementGroupType { get; set; }
		
		/// <summary>
		/// ID of the placement strategy assigned to this placement group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placementStrategyId")]
		public string PlacementStrategyId { get; set; }
		
		/// <summary>
		/// Pricing Schedule
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pricingSchedule")]
		public PricingSchedule PricingSchedule { get; set; }
		
		/// <summary>
		/// ID of the primary placement, used to calculate the media cost of a roadblock (placement group). Modifying this field will automatically modify the primary field on all affected roadblock child placements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryPlacementId")]
		public string PrimaryPlacementId { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryPlacementIdDimensionValue")]
		public DimensionValue PrimaryPlacementIdDimensionValue { get; set; }
		
		/// <summary>
		/// Site ID associated with this placement group. On insert, you must set either this field or the directorySiteId field to specify the site associated with this placement group. This is a required field that is read-only after insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="siteId")]
		public string SiteId { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="siteIdDimensionValue")]
		public DimensionValue SiteIdDimensionValue { get; set; }
		
		/// <summary>
		/// Subaccount ID of this placement group. This is a read-only field that can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subaccountId")]
		public string SubaccountId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PlacementGroupPlacementGroupType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLACEMENT_PACKAGE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLACEMENT_ROADBLOCK = 1,
	}
	
	/// <summary>
	/// Placement Group List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlacementGroupsListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#placementGroupsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to be used for the next list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Placement group collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placementGroups")]
		public PlacementGroup[] PlacementGroups { get; set; }
	}
	
	/// <summary>
	/// Placement Strategy List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlacementStrategiesListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#placementStrategiesListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to be used for the next list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Placement strategy collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placementStrategies")]
		public PlacementStrategy[] PlacementStrategies { get; set; }
	}
	
	/// <summary>
	/// Contains properties of a placement strategy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlacementStrategy
	{
		
		/// <summary>
		/// Account ID of this placement strategy.This is a read-only field that can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// ID of this placement strategy. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#placementStrategy".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Name of this placement strategy. This is a required field. It must be less than 256 characters long and unique among placement strategies of the same account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Placement Tag
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlacementTag
	{
		
		/// <summary>
		/// Placement ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placementId")]
		public string PlacementId { get; set; }
		
		/// <summary>
		/// Tags generated for this placement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagDatas")]
		public TagData[] TagDatas { get; set; }
	}
	
	/// <summary>
	/// Placement Tag Data
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagData
	{
		
		/// <summary>
		/// Ad associated with this placement tag. Applicable only when format is PLACEMENT_TAG_TRACKING.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adId")]
		public string AdId { get; set; }
		
		/// <summary>
		/// Tag string to record a click.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickTag")]
		public string ClickTag { get; set; }
		
		/// <summary>
		/// Creative associated with this placement tag. Applicable only when format is PLACEMENT_TAG_TRACKING.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeId")]
		public string CreativeId { get; set; }
		
		/// <summary>
		/// TagData tag format of this tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public System.Nullable<TagDataFormat> Format { get; set; }
		
		/// <summary>
		/// Tag string for serving an ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impressionTag")]
		public string ImpressionTag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TagDataFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLACEMENT_TAG_STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLACEMENT_TAG_IFRAME_JAVASCRIPT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLACEMENT_TAG_IFRAME_ILAYER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLACEMENT_TAG_INTERNAL_REDIRECT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLACEMENT_TAG_JAVASCRIPT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLACEMENT_TAG_INTERSTITIAL_INTERNAL_REDIRECT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLACEMENT_TAG_CLICK_COMMANDS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLACEMENT_TAG_TRACKING = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLACEMENT_TAG_TRACKING_IFRAME = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLACEMENT_TAG_TRACKING_JAVASCRIPT = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_3 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLACEMENT_TAG_IFRAME_JAVASCRIPT_LEGACY = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLACEMENT_TAG_JAVASCRIPT_LEGACY = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT_LEGACY = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT_LEGACY = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_4 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLACEMENT_TAG_TRACKING_THIRD_PARTY_MEASUREMENT = 19,
	}
	
	/// <summary>
	/// Placement GenerateTags Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlacementsGenerateTagsResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#placementsGenerateTagsResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Set of generated tags for the specified placements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placementTags")]
		public PlacementTag[] PlacementTags { get; set; }
	}
	
	/// <summary>
	/// Placement List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlacementsListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#placementsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to be used for the next list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Placement collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placements")]
		public Placement[] Placements { get; set; }
	}
	
	/// <summary>
	/// Platform Type List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlatformTypesListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#platformTypesListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Platform type collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platformTypes")]
		public PlatformType[] PlatformTypes { get; set; }
	}
	
	/// <summary>
	/// Postal Code List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PostalCodesListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#postalCodesListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Postal code collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCodes")]
		public PostalCode[] PostalCodes { get; set; }
	}
	
	/// <summary>
	/// Contains properties of a Planning project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Project
	{
		
		/// <summary>
		/// Account ID of this project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Advertiser ID of this project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// Audience age group of this project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audienceAgeGroup")]
		public System.Nullable<ProjectAudienceAgeGroup> AudienceAgeGroup { get; set; }
		
		/// <summary>
		/// Audience gender of this project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audienceGender")]
		public System.Nullable<ProjectAudienceGender> AudienceGender { get; set; }
		
		/// <summary>
		/// Budget of this project in the currency specified by the current account. The value stored in this field represents only the non-fractional amount. For example, for USD, the smallest value that can be represented by this field is 1 US dollar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="budget")]
		public string Budget { get; set; }
		
		/// <summary>
		/// Client billing code of this project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientBillingCode")]
		public string ClientBillingCode { get; set; }
		
		/// <summary>
		/// Name of the project client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientName")]
		public string ClientName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		/// <summary>
		/// ID of this project. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#project".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Modification timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedInfo")]
		public LastModifiedInfo LastModifiedInfo { get; set; }
		
		/// <summary>
		/// Name of this project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Overview of this project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overview")]
		public string Overview { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
		
		/// <summary>
		/// Subaccount ID of this project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subaccountId")]
		public string SubaccountId { get; set; }
		
		/// <summary>
		/// Number of clicks that the advertiser is targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetClicks")]
		public string TargetClicks { get; set; }
		
		/// <summary>
		/// Number of conversions that the advertiser is targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetConversions")]
		public string TargetConversions { get; set; }
		
		/// <summary>
		/// CPA that the advertiser is targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetCpaNanos")]
		public string TargetCpaNanos { get; set; }
		
		/// <summary>
		/// CPC that the advertiser is targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetCpcNanos")]
		public string TargetCpcNanos { get; set; }
		
		/// <summary>
		/// vCPM from Active View that the advertiser is targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetCpmActiveViewNanos")]
		public string TargetCpmActiveViewNanos { get; set; }
		
		/// <summary>
		/// CPM that the advertiser is targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetCpmNanos")]
		public string TargetCpmNanos { get; set; }
		
		/// <summary>
		/// Number of impressions that the advertiser is targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetImpressions")]
		public string TargetImpressions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProjectAudienceAgeGroup
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLANNING_AUDIENCE_AGE_18_24 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLANNING_AUDIENCE_AGE_25_34 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLANNING_AUDIENCE_AGE_35_44 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLANNING_AUDIENCE_AGE_45_54 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLANNING_AUDIENCE_AGE_55_64 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLANNING_AUDIENCE_AGE_65_OR_MORE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLANNING_AUDIENCE_AGE_UNKNOWN = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProjectAudienceGender
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLANNING_AUDIENCE_GENDER_MALE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLANNING_AUDIENCE_GENDER_FEMALE = 1,
	}
	
	/// <summary>
	/// Project List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProjectsListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#projectsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to be used for the next list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Project collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public Project[] Projects { get; set; }
	}
	
	/// <summary>
	/// Represents a recipient.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Recipient
	{
		
		/// <summary>
		/// The delivery type for the recipient.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryType")]
		public System.Nullable<RecipientDeliveryType> DeliveryType { get; set; }
		
		/// <summary>
		/// The email address of the recipient.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The kind of resource this is, in this case dfareporting#recipient.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RecipientDeliveryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACHMENT = 1,
	}
	
	/// <summary>
	/// Region List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegionsListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#regionsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Region collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regions")]
		public Region[] Regions { get; set; }
	}
	
	/// <summary>
	/// Contains properties of a remarketing list. Remarketing enables you to create lists of users who have performed specific actions on a site, then target ads to members of those lists. This resource can be used to manage remarketing lists that are owned by your advertisers. To see all remarketing lists that are visible to your advertisers, including those that are shared to your advertiser or account, use the TargetableRemarketingLists resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RemarketingList
	{
		
		/// <summary>
		/// Account ID of this remarketing list. This is a read-only, auto-generated field that is only returned in GET requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Whether this remarketing list is active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Dimension value for the advertiser ID that owns this remarketing list. This is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserIdDimensionValue")]
		public DimensionValue AdvertiserIdDimensionValue { get; set; }
		
		/// <summary>
		/// Remarketing list description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Remarketing list ID. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#remarketingList".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Number of days that a user should remain in the remarketing list without an impression. Acceptable values are 1 to 540, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lifeSpan")]
		public string LifeSpan { get; set; }
		
		/// <summary>
		/// Remarketing List Population Rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listPopulationRule")]
		public ListPopulationRule ListPopulationRule { get; set; }
		
		/// <summary>
		/// Number of users currently in the list. This is a read-only field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listSize")]
		public string ListSize { get; set; }
		
		/// <summary>
		/// Product from which this remarketing list was originated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listSource")]
		public System.Nullable<RemarketingListListSource> ListSource { get; set; }
		
		/// <summary>
		/// Name of the remarketing list. This is a required field. Must be no greater than 128 characters long.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Subaccount ID of this remarketing list. This is a read-only, auto-generated field that is only returned in GET requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subaccountId")]
		public string SubaccountId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RemarketingListListSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMARKETING_LIST_SOURCE_OTHER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMARKETING_LIST_SOURCE_ADX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMARKETING_LIST_SOURCE_DFP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMARKETING_LIST_SOURCE_XFP = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMARKETING_LIST_SOURCE_DFA = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMARKETING_LIST_SOURCE_GA = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMARKETING_LIST_SOURCE_YOUTUBE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMARKETING_LIST_SOURCE_DBM = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMARKETING_LIST_SOURCE_GPLUS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMARKETING_LIST_SOURCE_DMP = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMARKETING_LIST_SOURCE_PLAY_STORE = 10,
	}
	
	/// <summary>
	/// Contains properties of a remarketing list's sharing information. Sharing allows other accounts or advertisers to target to your remarketing lists. This resource can be used to manage remarketing list sharing to other accounts and advertisers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RemarketingListShare
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#remarketingListShare".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Remarketing list ID. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remarketingListId")]
		public string RemarketingListId { get; set; }
		
		/// <summary>
		/// Accounts that the remarketing list is shared with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharedAccountIds")]
		public string[] SharedAccountIds { get; set; }
		
		/// <summary>
		/// Advertisers that the remarketing list is shared with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharedAdvertiserIds")]
		public string[] SharedAdvertiserIds { get; set; }
	}
	
	/// <summary>
	/// Remarketing list response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RemarketingListsListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#remarketingListsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to be used for the next list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Remarketing list collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remarketingLists")]
		public RemarketingList[] RemarketingLists { get; set; }
	}
	
	/// <summary>
	/// Represents a Report resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Report
	{
		
		/// <summary>
		/// The account ID to which this report belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// The report criteria for a report of type "STANDARD".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="criteria")]
		public ReportCriteria Criteria { get; set; }
		
		/// <summary>
		/// The report criteria for a report of type "CROSS_DIMENSION_REACH".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crossDimensionReachCriteria")]
		public ReportCrossDimensionReachCriteria CrossDimensionReachCriteria { get; set; }
		
		/// <summary>
		/// The report's email delivery settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delivery")]
		public ReportDelivery Delivery { get; set; }
		
		/// <summary>
		/// The eTag of this response for caching purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The filename used when generating report files for this report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileName")]
		public string FileName { get; set; }
		
		/// <summary>
		/// The report criteria for a report of type "FLOODLIGHT".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floodlightCriteria")]
		public ReportFloodlightCriteria FloodlightCriteria { get; set; }
		
		/// <summary>
		/// The output format of the report. If not specified, default format is "CSV". Note that the actual format in the completed report file might differ if for instance the report's size exceeds the format's capabilities. "CSV" will then be the fallback format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public FileFormat Format { get; set; }
		
		/// <summary>
		/// The unique ID identifying this report resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The kind of resource this is, in this case dfareporting#report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The timestamp (in milliseconds since epoch) of when this report was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public string LastModifiedTime { get; set; }
		
		/// <summary>
		/// The name of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The user profile id of the owner of this report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerProfileId")]
		public string OwnerProfileId { get; set; }
		
		/// <summary>
		/// The report criteria for a report of type "PATH_ATTRIBUTION".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pathAttributionCriteria")]
		public ReportPathAttributionCriteria PathAttributionCriteria { get; set; }
		
		/// <summary>
		/// The report criteria for a report of type "PATH".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pathCriteria")]
		public ReportPathCriteria PathCriteria { get; set; }
		
		/// <summary>
		/// The report criteria for a report of type "PATH_TO_CONVERSION".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pathToConversionCriteria")]
		public ReportPathToConversionCriteria PathToConversionCriteria { get; set; }
		
		/// <summary>
		/// The report criteria for a report of type "REACH".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reachCriteria")]
		public ReportReachCriteria ReachCriteria { get; set; }
		
		/// <summary>
		/// The report's schedule. Can only be set if the report's 'dateRange' is a relative date range and the relative date range is not "TODAY".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public ReportSchedule Schedule { get; set; }
		
		/// <summary>
		/// The subaccount ID to which this report belongs if applicable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subAccountId")]
		public string SubAccountId { get; set; }
		
		/// <summary>
		/// The type of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ReportType> Type { get; set; }
	}
	
	public class ReportCriteria
	{
		
		/// <summary>
		/// Represents an activity group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activities")]
		public Activities Activities { get; set; }
		
		/// <summary>
		/// Represents a Custom Rich Media Events group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customRichMediaEvents")]
		public CustomRichMediaEvents CustomRichMediaEvents { get; set; }
		
		/// <summary>
		/// Represents a date range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateRange")]
		public DateRange DateRange { get; set; }
		
		/// <summary>
		/// The list of filters on which dimensions are filtered. Filters for different dimensions are ANDed, filters for the same dimension are grouped together and ORed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionFilters")]
		public DimensionValue[] DimensionFilters { get; set; }
		
		/// <summary>
		/// The list of standard dimensions the report should include.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public SortedDimension[] Dimensions { get; set; }
		
		/// <summary>
		/// The list of names of metrics the report should include.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricNames")]
		public string[] MetricNames { get; set; }
	}
	
	/// <summary>
	/// Represents a sorted dimension.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SortedDimension
	{
		
		/// <summary>
		/// The kind of resource this is, in this case dfareporting#sortedDimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The name of the dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// An optional sort order for the dimension column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<SortedDimensionSortOrder> SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SortedDimensionSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASCENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCENDING = 1,
	}
	
	public class ReportCrossDimensionReachCriteria
	{
		
		/// <summary>
		/// The list of dimensions the report should include.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="breakdown")]
		public SortedDimension[] Breakdown { get; set; }
		
		/// <summary>
		/// Represents a date range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateRange")]
		public DateRange DateRange { get; set; }
		
		/// <summary>
		/// The dimension option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimension")]
		public System.Nullable<ReportCrossDimensionReachCriteriaDimension> Dimension { get; set; }
		
		/// <summary>
		/// The list of filters on which dimensions are filtered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionFilters")]
		public DimensionValue[] DimensionFilters { get; set; }
		
		/// <summary>
		/// The list of names of metrics the report should include.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricNames")]
		public string[] MetricNames { get; set; }
		
		/// <summary>
		/// The list of names of overlap metrics the report should include.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overlapMetricNames")]
		public string[] OverlapMetricNames { get; set; }
		
		/// <summary>
		/// Whether the report is pivoted or not. Defaults to true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pivoted")]
		public System.Nullable<System.Boolean> Pivoted { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReportCrossDimensionReachCriteriaDimension
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADVERTISER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAMPAIGN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SITE_BY_ADVERTISER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SITE_BY_CAMPAIGN = 3,
	}
	
	public class ReportDelivery
	{
		
		/// <summary>
		/// Whether the report should be emailed to the report owner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailOwner")]
		public System.Nullable<System.Boolean> EmailOwner { get; set; }
		
		/// <summary>
		/// The type of delivery for the owner to receive, if enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailOwnerDeliveryType")]
		public RecipientDeliveryType EmailOwnerDeliveryType { get; set; }
		
		/// <summary>
		/// The message to be sent with each email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The list of recipients to which to email the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipients")]
		public Recipient[] Recipients { get; set; }
	}
	
	public class ReportFloodlightCriteria
	{
		
		/// <summary>
		/// The list of custom rich media events to include.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customRichMediaEvents")]
		public DimensionValue[] CustomRichMediaEvents { get; set; }
		
		/// <summary>
		/// Represents a date range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateRange")]
		public DateRange DateRange { get; set; }
		
		/// <summary>
		/// The list of filters on which dimensions are filtered. Filters for different dimensions are ANDed, filters for the same dimension are grouped together and ORed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionFilters")]
		public DimensionValue[] DimensionFilters { get; set; }
		
		/// <summary>
		/// The list of dimensions the report should include.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public SortedDimension[] Dimensions { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floodlightConfigId")]
		public DimensionValue FloodlightConfigId { get; set; }
		
		/// <summary>
		/// The list of names of metrics the report should include.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricNames")]
		public string[] MetricNames { get; set; }
		
		/// <summary>
		/// The properties of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportProperties")]
		public ReportFloodlightCriteriaReportProperties ReportProperties { get; set; }
	}
	
	public class ReportFloodlightCriteriaReportProperties
	{
		
		/// <summary>
		/// Include conversions that have no cookie, but do have an exposure path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeAttributedIPConversions")]
		public System.Nullable<System.Boolean> IncludeAttributedIPConversions { get; set; }
		
		/// <summary>
		/// Include conversions of users with a DoubleClick cookie but without an exposure. That means the user did not click or see an ad from the advertiser within the Floodlight group, or that the interaction happened outside the lookback window.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeUnattributedCookieConversions")]
		public System.Nullable<System.Boolean> IncludeUnattributedCookieConversions { get; set; }
		
		/// <summary>
		/// Include conversions that have no associated cookies and no exposures. It’s therefore impossible to know how the user was exposed to your ads during the lookback window prior to a conversion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeUnattributedIPConversions")]
		public System.Nullable<System.Boolean> IncludeUnattributedIPConversions { get; set; }
	}
	
	public class ReportPathAttributionCriteria
	{
		
		/// <summary>
		/// The list of 'dfa:activity' values to filter on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityFilters")]
		public DimensionValue[] ActivityFilters { get; set; }
		
		/// <summary>
		/// Represents a DfaReporting channel grouping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customChannelGrouping")]
		public ChannelGrouping CustomChannelGrouping { get; set; }
		
		/// <summary>
		/// Represents a date range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateRange")]
		public DateRange DateRange { get; set; }
		
		/// <summary>
		/// The list of dimensions the report should include.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public SortedDimension[] Dimensions { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floodlightConfigId")]
		public DimensionValue FloodlightConfigId { get; set; }
		
		/// <summary>
		/// The list of names of metrics the report should include.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricNames")]
		public string[] MetricNames { get; set; }
		
		/// <summary>
		/// Path Filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pathFilters")]
		public PathFilter[] PathFilters { get; set; }
	}
	
	public class ReportPathCriteria
	{
		
		/// <summary>
		/// The list of 'dfa:activity' values to filter on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityFilters")]
		public DimensionValue[] ActivityFilters { get; set; }
		
		/// <summary>
		/// Represents a DfaReporting channel grouping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customChannelGrouping")]
		public ChannelGrouping CustomChannelGrouping { get; set; }
		
		/// <summary>
		/// Represents a date range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateRange")]
		public DateRange DateRange { get; set; }
		
		/// <summary>
		/// The list of dimensions the report should include.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public SortedDimension[] Dimensions { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floodlightConfigId")]
		public DimensionValue FloodlightConfigId { get; set; }
		
		/// <summary>
		/// The list of names of metrics the report should include.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricNames")]
		public string[] MetricNames { get; set; }
		
		/// <summary>
		/// Path Filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pathFilters")]
		public PathFilter[] PathFilters { get; set; }
	}
	
	public class ReportPathToConversionCriteria
	{
		
		/// <summary>
		/// The list of 'dfa:activity' values to filter on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityFilters")]
		public DimensionValue[] ActivityFilters { get; set; }
		
		/// <summary>
		/// The list of conversion dimensions the report should include.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conversionDimensions")]
		public SortedDimension[] ConversionDimensions { get; set; }
		
		/// <summary>
		/// The list of custom floodlight variables the report should include.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customFloodlightVariables")]
		public SortedDimension[] CustomFloodlightVariables { get; set; }
		
		/// <summary>
		/// The list of custom rich media events to include.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customRichMediaEvents")]
		public DimensionValue[] CustomRichMediaEvents { get; set; }
		
		/// <summary>
		/// Represents a date range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateRange")]
		public DateRange DateRange { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floodlightConfigId")]
		public DimensionValue FloodlightConfigId { get; set; }
		
		/// <summary>
		/// The list of names of metrics the report should include.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricNames")]
		public string[] MetricNames { get; set; }
		
		/// <summary>
		/// The list of per interaction dimensions the report should include.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perInteractionDimensions")]
		public SortedDimension[] PerInteractionDimensions { get; set; }
		
		/// <summary>
		/// The properties of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportProperties")]
		public ReportPathToConversionCriteriaReportProperties ReportProperties { get; set; }
	}
	
	public class ReportPathToConversionCriteriaReportProperties
	{
		
		/// <summary>
		/// CM360 checks to see if a click interaction occurred within the specified period of time before a conversion. By default the value is pulled from Floodlight or you can manually enter a custom value. Valid values: 1-90.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clicksLookbackWindow")]
		public System.Nullable<System.Int32> ClicksLookbackWindow { get; set; }
		
		/// <summary>
		/// CM360 checks to see if an impression interaction occurred within the specified period of time before a conversion. By default the value is pulled from Floodlight or you can manually enter a custom value. Valid values: 1-90.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impressionsLookbackWindow")]
		public System.Nullable<System.Int32> ImpressionsLookbackWindow { get; set; }
		
		/// <summary>
		/// Deprecated: has no effect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeAttributedIPConversions")]
		public System.Nullable<System.Boolean> IncludeAttributedIPConversions { get; set; }
		
		/// <summary>
		/// Include conversions of users with a DoubleClick cookie but without an exposure. That means the user did not click or see an ad from the advertiser within the Floodlight group, or that the interaction happened outside the lookback window.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeUnattributedCookieConversions")]
		public System.Nullable<System.Boolean> IncludeUnattributedCookieConversions { get; set; }
		
		/// <summary>
		/// Include conversions that have no associated cookies and no exposures. It’s therefore impossible to know how the user was exposed to your ads during the lookback window prior to a conversion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeUnattributedIPConversions")]
		public System.Nullable<System.Boolean> IncludeUnattributedIPConversions { get; set; }
		
		/// <summary>
		/// The maximum number of click interactions to include in the report. Advertisers currently paying for E2C reports get up to 200 (100 clicks, 100 impressions). If another advertiser in your network is paying for E2C, you can have up to 5 total exposures per report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumClickInteractions")]
		public System.Nullable<System.Int32> MaximumClickInteractions { get; set; }
		
		/// <summary>
		/// The maximum number of click interactions to include in the report. Advertisers currently paying for E2C reports get up to 200 (100 clicks, 100 impressions). If another advertiser in your network is paying for E2C, you can have up to 5 total exposures per report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumImpressionInteractions")]
		public System.Nullable<System.Int32> MaximumImpressionInteractions { get; set; }
		
		/// <summary>
		/// The maximum amount of time that can take place between interactions (clicks or impressions) by the same user. Valid values: 1-90.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumInteractionGap")]
		public System.Nullable<System.Int32> MaximumInteractionGap { get; set; }
		
		/// <summary>
		/// Enable pivoting on interaction path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pivotOnInteractionPath")]
		public System.Nullable<System.Boolean> PivotOnInteractionPath { get; set; }
	}
	
	public class ReportReachCriteria
	{
		
		/// <summary>
		/// Represents an activity group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activities")]
		public Activities Activities { get; set; }
		
		/// <summary>
		/// Represents a Custom Rich Media Events group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customRichMediaEvents")]
		public CustomRichMediaEvents CustomRichMediaEvents { get; set; }
		
		/// <summary>
		/// Represents a date range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateRange")]
		public DateRange DateRange { get; set; }
		
		/// <summary>
		/// The list of filters on which dimensions are filtered. Filters for different dimensions are ANDed, filters for the same dimension are grouped together and ORed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionFilters")]
		public DimensionValue[] DimensionFilters { get; set; }
		
		/// <summary>
		/// The list of dimensions the report should include.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public SortedDimension[] Dimensions { get; set; }
		
		/// <summary>
		/// Whether to enable all reach dimension combinations in the report. Defaults to false. If enabled, the date range of the report should be within the last 42 days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableAllDimensionCombinations")]
		public System.Nullable<System.Boolean> EnableAllDimensionCombinations { get; set; }
		
		/// <summary>
		/// The list of names of metrics the report should include.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricNames")]
		public string[] MetricNames { get; set; }
		
		/// <summary>
		/// The list of names of Reach By Frequency metrics the report should include.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reachByFrequencyMetricNames")]
		public string[] ReachByFrequencyMetricNames { get; set; }
	}
	
	public class ReportSchedule
	{
		
		/// <summary>
		/// Whether the schedule is active or not. Must be set to either true or false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Defines every how many days, weeks or months the report should be run. Needs to be set when "repeats" is either "DAILY", "WEEKLY" or "MONTHLY".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="every")]
		public System.Nullable<System.Int32> Every { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expirationDate")]
		public System.Nullable<System.DateOnly> ExpirationDate { get; set; }
		
		/// <summary>
		/// The interval for which the report is repeated. Note: - "DAILY" also requires field "every" to be set. - "WEEKLY" also requires fields "every" and "repeatsOnWeekDays" to be set. - "MONTHLY" also requires fields "every" and "runsOnDayOfMonth" to be set. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repeats")]
		public string Repeats { get; set; }
		
		/// <summary>
		/// List of week days "WEEKLY" on which scheduled reports should run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repeatsOnWeekDays")]
		public string[] RepeatsOnWeekDays { get; set; }
		
		/// <summary>
		/// Enum to define for "MONTHLY" scheduled reports whether reports should be repeated on the same day of the month as "startDate" or the same day of the week of the month. Example: If 'startDate' is Monday, April 2nd 2012 (2012-04-02), "DAY_OF_MONTH" would run subsequent reports on the 2nd of every Month, and "WEEK_OF_MONTH" would run subsequent reports on the first Monday of the month.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runsOnDayOfMonth")]
		public System.Nullable<ReportScheduleRunsOnDayOfMonth> RunsOnDayOfMonth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
		
		/// <summary>
		/// The timezone when the report will run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReportScheduleRunsOnDayOfMonth
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAY_OF_MONTH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEK_OF_MONTH = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReportType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REACH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PATH_TO_CONVERSION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CROSS_DIMENSION_REACH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOODLIGHT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PATH = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PATH_ATTRIBUTION = 6,
	}
	
	/// <summary>
	/// Represents the list of reports.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportList
	{
		
		/// <summary>
		/// The eTag of this response for caching purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The reports returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Report[] Items { get; set; }
		
		/// <summary>
		/// The kind of list this is, in this case dfareporting#reportList.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Continuation token used to page through reports. To retrieve the next page of results, set the next request's "pageToken" to the value of this field. The page token is only valid for a limited amount of time and should not be persisted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Contains properties of a site.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Site
	{
		
		/// <summary>
		/// Account ID of this site. This is a read-only field that can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Whether this site is approved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approved")]
		public System.Nullable<System.Boolean> Approved { get; set; }
		
		/// <summary>
		/// Directory site associated with this site. This is a required field that is read-only after insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directorySiteId")]
		public string DirectorySiteId { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directorySiteIdDimensionValue")]
		public DimensionValue DirectorySiteIdDimensionValue { get; set; }
		
		/// <summary>
		/// ID of this site. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idDimensionValue")]
		public DimensionValue IdDimensionValue { get; set; }
		
		/// <summary>
		/// Key name of this site. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyName")]
		public string KeyName { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#site".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Name of this site.This is a required field. Must be less than 128 characters long. If this site is under a subaccount, the name must be unique among sites of the same subaccount. Otherwise, this site is a top-level site, and the name must be unique among top-level sites of the same account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Site contacts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="siteContacts")]
		public SiteContact[] SiteContacts { get; set; }
		
		/// <summary>
		/// Site Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="siteSettings")]
		public SiteSettings SiteSettings { get; set; }
		
		/// <summary>
		/// Subaccount ID of this site. This is a read-only field that can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subaccountId")]
		public string SubaccountId { get; set; }
		
		/// <summary>
		/// Video Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoSettings")]
		public SiteVideoSettings VideoSettings { get; set; }
	}
	
	/// <summary>
	/// Site Contact
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SiteContact
	{
		
		/// <summary>
		/// Address of this site contact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Site contact type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactType")]
		public System.Nullable<SiteContactContactType> ContactType { get; set; }
		
		/// <summary>
		/// Email address of this site contact. This is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// First name of this site contact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// ID of this site contact. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Last name of this site contact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// Primary phone number of this site contact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// Title or designation of this site contact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SiteContactContactType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SALES_PERSON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRAFFICKER = 1,
	}
	
	/// <summary>
	/// Site Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SiteSettings
	{
		
		/// <summary>
		/// Whether active view creatives are disabled for this site.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeViewOptOut")]
		public System.Nullable<System.Boolean> ActiveViewOptOut { get; set; }
		
		/// <summary>
		/// Whether this site opts out of ad blocking. When true, ad blocking is disabled for all placements under the site, regardless of the individual placement settings. When false, the campaign and placement settings take effect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adBlockingOptOut")]
		public System.Nullable<System.Boolean> AdBlockingOptOut { get; set; }
		
		/// <summary>
		/// Whether new cookies are disabled for this site.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableNewCookie")]
		public System.Nullable<System.Boolean> DisableNewCookie { get; set; }
		
		/// <summary>
		/// Tag Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagSetting")]
		public TagSetting TagSetting { get; set; }
		
		/// <summary>
		/// Whether Verification and ActiveView for in-stream video creatives are disabled by default for new placements created under this site. This value will be used to populate the placement.videoActiveViewOptOut field, when no value is specified for the new placement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoActiveViewOptOutTemplate")]
		public System.Nullable<System.Boolean> VideoActiveViewOptOutTemplate { get; set; }
		
		/// <summary>
		/// Default VPAID adapter setting for new placements created under this site. This value will be used to populate the placements.vpaidAdapterChoice field, when no value is specified for the new placement. Controls which VPAID format the measurement adapter will use for in-stream video creatives assigned to the placement. The publisher's specifications will typically determine this setting. For VPAID creatives, the adapter format will match the VPAID format (HTML5 VPAID creatives use the HTML5 adapter). *Note:* Flash is no longer supported. This field now defaults to HTML5 when the following values are provided: FLASH, BOTH.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vpaidAdapterChoiceTemplate")]
		public PlacementVpaidAdapterChoice VpaidAdapterChoiceTemplate { get; set; }
	}
	
	/// <summary>
	/// Video Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SiteVideoSettings
	{
		
		/// <summary>
		/// Companion Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="companionSettings")]
		public SiteCompanionSetting CompanionSettings { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#siteVideoSettings".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Whether OBA icons are enabled for this placement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="obaEnabled")]
		public System.Nullable<System.Boolean> ObaEnabled { get; set; }
		
		/// <summary>
		/// Online Behavioral Advertiser icon.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="obaSettings")]
		public ObaIcon ObaSettings { get; set; }
		
		/// <summary>
		/// Orientation of a site template used for video. This will act as default for new placements created under this site.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orientation")]
		public VideoSettingsOrientation Orientation { get; set; }
		
		/// <summary>
		/// Publisher specification ID used to identify site-associated publisher requirements and automatically populate transcode settings. If publisher specification ID is specified, it will take precedence over transcode settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherSpecificationId")]
		public string PublisherSpecificationId { get; set; }
		
		/// <summary>
		/// Skippable Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skippableSettings")]
		public SiteSkippableSetting SkippableSettings { get; set; }
		
		/// <summary>
		/// Transcode Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transcodeSettings")]
		public SiteTranscodeSetting TranscodeSettings { get; set; }
	}
	
	/// <summary>
	/// Companion Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SiteCompanionSetting
	{
		
		/// <summary>
		/// Whether companions are disabled for this site template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="companionsDisabled")]
		public System.Nullable<System.Boolean> CompanionsDisabled { get; set; }
		
		/// <summary>
		/// Allowlist of companion sizes to be served via this site template. Set this list to null or empty to serve all companion sizes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabledSizes")]
		public Size[] EnabledSizes { get; set; }
		
		/// <summary>
		/// Whether to serve only static images as companions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageOnly")]
		public System.Nullable<System.Boolean> ImageOnly { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#siteCompanionSetting".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// Skippable Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SiteSkippableSetting
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#siteSkippableSetting".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Video Offset
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressOffset")]
		public VideoOffset ProgressOffset { get; set; }
		
		/// <summary>
		/// Video Offset
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipOffset")]
		public VideoOffset SkipOffset { get; set; }
		
		/// <summary>
		/// Whether the user can skip creatives served to this site. This will act as default for new placements created under this site.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skippable")]
		public System.Nullable<System.Boolean> Skippable { get; set; }
	}
	
	/// <summary>
	/// Transcode Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SiteTranscodeSetting
	{
		
		/// <summary>
		/// Allowlist of video formats to be served to this site template. Set this list to null or empty to serve all video formats.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabledVideoFormats")]
		public int[] EnabledVideoFormats { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#siteTranscodeSetting".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// Site List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SitesListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#sitesListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to be used for the next list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Site collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sites")]
		public Site[] Sites { get; set; }
	}
	
	/// <summary>
	/// Size List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SizesListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#sizesListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Size collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizes")]
		public Size[] Sizes { get; set; }
	}
	
	/// <summary>
	/// Contains properties of a Campaign Manager subaccount.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Subaccount
	{
		
		/// <summary>
		/// ID of the account that contains this subaccount. This is a read-only field that can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// IDs of the available user role permissions for this subaccount.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availablePermissionIds")]
		public string[] AvailablePermissionIds { get; set; }
		
		/// <summary>
		/// ID of this subaccount. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#subaccount".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Name of this subaccount. This is a required field. Must be less than 128 characters long and be unique among subaccounts of the same account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Subaccount List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubaccountsListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#subaccountsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to be used for the next list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Subaccount collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subaccounts")]
		public Subaccount[] Subaccounts { get; set; }
	}
	
	/// <summary>
	/// Contains properties of a targetable remarketing list. Remarketing enables you to create lists of users who have performed specific actions on a site, then target ads to members of those lists. This resource is a read-only view of a remarketing list to be used to facilitate targeting ads to specific lists. Remarketing lists that are owned by your advertisers and those that are shared to your advertisers or account are accessible via this resource. To manage remarketing lists that are owned by your advertisers, use the RemarketingLists resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TargetableRemarketingList
	{
		
		/// <summary>
		/// Account ID of this remarketing list. This is a read-only, auto-generated field that is only returned in GET requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Whether this targetable remarketing list is active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Dimension value for the advertiser ID that owns this targetable remarketing list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserIdDimensionValue")]
		public DimensionValue AdvertiserIdDimensionValue { get; set; }
		
		/// <summary>
		/// Targetable remarketing list description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Targetable remarketing list ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#targetableRemarketingList".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Number of days that a user should remain in the targetable remarketing list without an impression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lifeSpan")]
		public string LifeSpan { get; set; }
		
		/// <summary>
		/// Number of users currently in the list. This is a read-only field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listSize")]
		public string ListSize { get; set; }
		
		/// <summary>
		/// Product from which this targetable remarketing list was originated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listSource")]
		public RemarketingListListSource ListSource { get; set; }
		
		/// <summary>
		/// Name of the targetable remarketing list. Is no greater than 128 characters long.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Subaccount ID of this remarketing list. This is a read-only, auto-generated field that is only returned in GET requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subaccountId")]
		public string SubaccountId { get; set; }
	}
	
	/// <summary>
	/// Targetable remarketing list response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TargetableRemarketingListsListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#targetableRemarketingListsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to be used for the next list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Targetable remarketing list collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetableRemarketingLists")]
		public TargetableRemarketingList[] TargetableRemarketingLists { get; set; }
	}
	
	/// <summary>
	/// Contains properties of a targeting template. A targeting template encapsulates targeting information which can be reused across multiple ads.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TargetingTemplate
	{
		
		/// <summary>
		/// Account ID of this targeting template. This field, if left unset, will be auto-generated on insert and is read-only after insert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Advertiser ID of this targeting template. This is a required field on insert and is read-only after insert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserIdDimensionValue")]
		public DimensionValue AdvertiserIdDimensionValue { get; set; }
		
		/// <summary>
		/// Day Part Targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dayPartTargeting")]
		public DayPartTargeting DayPartTargeting { get; set; }
		
		/// <summary>
		/// Geographical Targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoTargeting")]
		public GeoTargeting GeoTargeting { get; set; }
		
		/// <summary>
		/// ID of this targeting template. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Key Value Targeting Expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyValueTargetingExpression")]
		public KeyValueTargetingExpression KeyValueTargetingExpression { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#targetingTemplate".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Language Targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageTargeting")]
		public LanguageTargeting LanguageTargeting { get; set; }
		
		/// <summary>
		/// Remarketing List Targeting Expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listTargetingExpression")]
		public ListTargetingExpression ListTargetingExpression { get; set; }
		
		/// <summary>
		/// Name of this targeting template. This field is required. It must be less than 256 characters long and unique within an advertiser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Subaccount ID of this targeting template. This field, if left unset, will be auto-generated on insert and is read-only after insert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subaccountId")]
		public string SubaccountId { get; set; }
		
		/// <summary>
		/// Technology Targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="technologyTargeting")]
		public TechnologyTargeting TechnologyTargeting { get; set; }
	}
	
	/// <summary>
	/// Targeting Template List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TargetingTemplatesListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#targetingTemplatesListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to be used for the next list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Targeting template collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingTemplates")]
		public TargetingTemplate[] TargetingTemplates { get; set; }
	}
	
	/// <summary>
	/// A UserProfile resource lets you list all DFA user profiles that are associated with a Google user account. The profile_id needs to be specified in other API requests. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserProfile
	{
		
		/// <summary>
		/// The account ID to which this profile belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// The account name this profile belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#userProfile".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The unique ID of the user profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileId")]
		public string ProfileId { get; set; }
		
		/// <summary>
		/// The sub account ID this profile belongs to if applicable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subAccountId")]
		public string SubAccountId { get; set; }
		
		/// <summary>
		/// The sub account name this profile belongs to if applicable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subAccountName")]
		public string SubAccountName { get; set; }
		
		/// <summary>
		/// The user name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	/// <summary>
	/// Represents the list of user profiles.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserProfileList
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The user profiles returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public UserProfile[] Items { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#userProfileList".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// Contains properties of auser role, which is used to manage user access.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserRole
	{
		
		/// <summary>
		/// Account ID of this user role. This is a read-only field that can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Whether this is a default user role. Default user roles are created by the system for the account/subaccount and cannot be modified or deleted. Each default user role comes with a basic set of preassigned permissions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultUserRole")]
		public System.Nullable<System.Boolean> DefaultUserRole { get; set; }
		
		/// <summary>
		/// ID of this user role. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#userRole".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Name of this user role. This is a required field. Must be less than 256 characters long. If this user role is under a subaccount, the name must be unique among sites of the same subaccount. Otherwise, this user role is a top-level user role, and the name must be unique among top-level user roles of the same account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// ID of the user role that this user role is based on or copied from. This is a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentUserRoleId")]
		public string ParentUserRoleId { get; set; }
		
		/// <summary>
		/// List of permissions associated with this user role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public UserRolePermission[] Permissions { get; set; }
		
		/// <summary>
		/// Subaccount ID of this user role. This is a read-only field that can be left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subaccountId")]
		public string SubaccountId { get; set; }
	}
	
	/// <summary>
	/// Contains properties of a user role permission.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserRolePermission
	{
		
		/// <summary>
		/// Levels of availability for a user role permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public System.Nullable<UserRolePermissionAvailability> Availability { get; set; }
		
		/// <summary>
		/// ID of this user role permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#userRolePermission".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Name of this user role permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// ID of the permission group that this user role permission belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissionGroupId")]
		public string PermissionGroupId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UserRolePermissionAvailability
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_AVAILABLE_BY_DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_BY_DEFAULT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBACCOUNT_AND_ACCOUNT_BY_DEFAULT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_ALWAYS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBACCOUNT_AND_ACCOUNT_ALWAYS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_PROFILE_ONLY = 5,
	}
	
	/// <summary>
	/// Represents a grouping of related user role permissions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserRolePermissionGroup
	{
		
		/// <summary>
		/// ID of this user role permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#userRolePermissionGroup".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Name of this user role permission group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// User Role Permission Group List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserRolePermissionGroupsListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#userRolePermissionGroupsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// User role permission group collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userRolePermissionGroups")]
		public UserRolePermissionGroup[] UserRolePermissionGroups { get; set; }
	}
	
	/// <summary>
	/// User Role Permission List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserRolePermissionsListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#userRolePermissionsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// User role permission collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userRolePermissions")]
		public UserRolePermission[] UserRolePermissions { get; set; }
	}
	
	/// <summary>
	/// User Role List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserRolesListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#userRolesListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to be used for the next list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// User role collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userRoles")]
		public UserRole[] UserRoles { get; set; }
	}
	
	/// <summary>
	/// Contains information about supported video formats.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VideoFormat
	{
		
		/// <summary>
		/// File type of the video format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileType")]
		public System.Nullable<VideoFormatFileType> FileType { get; set; }
		
		/// <summary>
		/// ID of the video format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#videoFormat".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Represents the dimensions of ads, placements, creatives, or creative assets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolution")]
		public Size Resolution { get; set; }
		
		/// <summary>
		/// The target bit rate of this video format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetBitRate")]
		public System.Nullable<System.Int32> TargetBitRate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VideoFormatFileType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLV = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THREEGPP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MP4 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEBM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		M3U8 = 4,
	}
	
	/// <summary>
	/// Video Format List Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VideoFormatsListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#videoFormatsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Video format collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoFormats")]
		public VideoFormat[] VideoFormats { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieves a report file by its report ID and file ID. This method supports media download.
		/// Dfareporting_files_get reports/{reportId}/files/{fileId}
		/// </summary>
		/// <param name="reportId">The ID of the report.</param>
		/// <param name="fileId">The ID of the report file.</param>
		/// <returns>Successful response</returns>
		public async Task<File> Dfareporting_files_getAsync(string reportId, string fileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/"+ (reportId==null? "" : System.Uri.EscapeDataString(reportId))+"/files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<File>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves list of user profiles for a user.
		/// Dfareporting_userProfiles_list userprofiles
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<UserProfileList> Dfareporting_userProfiles_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserProfileList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one user profile by ID.
		/// Dfareporting_userProfiles_get userprofiles/{profileId}
		/// </summary>
		/// <param name="profileId">The user profile ID.</param>
		/// <returns>Successful response</returns>
		public async Task<UserProfile> Dfareporting_userProfiles_getAsync(string profileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserProfile>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the account's active ad summary by account ID.
		/// Dfareporting_accountActiveAdSummaries_get userprofiles/{profileId}/accountActiveAdSummaries/{summaryAccountId}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="summaryAccountId">Account ID.</param>
		/// <returns>Successful response</returns>
		public async Task<AccountActiveAdSummary> Dfareporting_accountActiveAdSummaries_getAsync(string profileId, string summaryAccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/accountActiveAdSummaries/"+ (summaryAccountId==null? "" : System.Uri.EscapeDataString(summaryAccountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccountActiveAdSummary>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the list of account permission groups.
		/// Dfareporting_accountPermissionGroups_list userprofiles/{profileId}/accountPermissionGroups
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<AccountPermissionGroupsListResponse> Dfareporting_accountPermissionGroups_listAsync(string profileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/accountPermissionGroups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccountPermissionGroupsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one account permission group by ID.
		/// Dfareporting_accountPermissionGroups_get userprofiles/{profileId}/accountPermissionGroups/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Account permission group ID.</param>
		/// <returns>Successful response</returns>
		public async Task<AccountPermissionGroup> Dfareporting_accountPermissionGroups_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/accountPermissionGroups/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccountPermissionGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the list of account permissions.
		/// Dfareporting_accountPermissions_list userprofiles/{profileId}/accountPermissions
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<AccountPermissionsListResponse> Dfareporting_accountPermissions_listAsync(string profileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/accountPermissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccountPermissionsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one account permission by ID.
		/// Dfareporting_accountPermissions_get userprofiles/{profileId}/accountPermissions/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Account permission ID.</param>
		/// <returns>Successful response</returns>
		public async Task<AccountPermission> Dfareporting_accountPermissions_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/accountPermissions/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccountPermission>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of account user profiles, possibly filtered. This method supports paging.
		/// Dfareporting_accountUserProfiles_list userprofiles/{profileId}/accountUserProfiles
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="active">Select only active user profiles.</param>
		/// <param name="ids">Select only user profiles with these IDs.</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="pageToken">Value of the nextPageToken from the previous result page.</param>
		/// <param name="searchString">Allows searching for objects by name, ID or email. Wildcards (*) are allowed. For example, "user profile*2015" will return objects with names like "user profile June 2015", "user profile April 2015", or simply "user profile 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "user profile" will match objects with name "my user profile", "user profile 2015", or simply "user profile".</param>
		/// <param name="sortField">Field by which to sort the list.</param>
		/// <param name="sortOrder">Order of sorted results.</param>
		/// <param name="subaccountId">Select only user profiles with the specified subaccount ID.</param>
		/// <param name="userRoleId">Select only user profiles with the specified user role ID.</param>
		/// <returns>Successful response</returns>
		public async Task<AccountUserProfilesListResponse> Dfareporting_accountUserProfiles_listAsync(string profileId, bool active, string[] ids, int maxResults, string pageToken, string searchString, Dfareporting_accountUserProfiles_listSortField sortField, SortedDimensionSortOrder sortOrder, string subaccountId, string userRoleId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/accountUserProfiles&active="+active+"&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&searchString=" + (searchString==null? "" : System.Uri.EscapeDataString(searchString))+"&sortField=" + sortField+"&sortOrder=" + sortOrder+"&subaccountId=" + (subaccountId==null? "" : System.Uri.EscapeDataString(subaccountId))+"&userRoleId=" + (userRoleId==null? "" : System.Uri.EscapeDataString(userRoleId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccountUserProfilesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing user role. This method supports patch semantics.
		/// Dfareporting_accountUserProfiles_patch userprofiles/{profileId}/accountUserProfiles
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Required. AccountUserProfile ID.</param>
		/// <returns>Successful response</returns>
		public async Task<AccountUserProfile> Dfareporting_accountUserProfiles_patchAsync(string profileId, string id, AccountUserProfile requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/accountUserProfiles&id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccountUserProfile>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new account user profile.
		/// Dfareporting_accountUserProfiles_insert userprofiles/{profileId}/accountUserProfiles
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<AccountUserProfile> Dfareporting_accountUserProfiles_insertAsync(string profileId, AccountUserProfile requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/accountUserProfiles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccountUserProfile>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing account user profile.
		/// Dfareporting_accountUserProfiles_update userprofiles/{profileId}/accountUserProfiles
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<AccountUserProfile> Dfareporting_accountUserProfiles_updateAsync(string profileId, AccountUserProfile requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/accountUserProfiles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccountUserProfile>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one account user profile by ID.
		/// Dfareporting_accountUserProfiles_get userprofiles/{profileId}/accountUserProfiles/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">User profile ID.</param>
		/// <returns>Successful response</returns>
		public async Task<AccountUserProfile> Dfareporting_accountUserProfiles_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/accountUserProfiles/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccountUserProfile>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the list of accounts, possibly filtered. This method supports paging.
		/// Dfareporting_accounts_list userprofiles/{profileId}/accounts
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="active">Select only active accounts. Don't set this field to select both active and non-active accounts.</param>
		/// <param name="ids">Select only accounts with these IDs.</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="pageToken">Value of the nextPageToken from the previous result page.</param>
		/// <param name="searchString">Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "account*2015" will return objects with names like "account June 2015", "account April 2015", or simply "account 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "account" will match objects with name "my account", "account 2015", or simply "account".</param>
		/// <param name="sortField">Field by which to sort the list.</param>
		/// <param name="sortOrder">Order of sorted results.</param>
		/// <returns>Successful response</returns>
		public async Task<AccountsListResponse> Dfareporting_accounts_listAsync(string profileId, bool active, string[] ids, int maxResults, string pageToken, string searchString, Dfareporting_accountUserProfiles_listSortField sortField, SortedDimensionSortOrder sortOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/accounts&active="+active+"&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&searchString=" + (searchString==null? "" : System.Uri.EscapeDataString(searchString))+"&sortField=" + sortField+"&sortOrder=" + sortOrder;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccountsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing account. This method supports patch semantics.
		/// Dfareporting_accounts_patch userprofiles/{profileId}/accounts
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Required. Account ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Account> Dfareporting_accounts_patchAsync(string profileId, string id, Account requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/accounts&id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Account>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing account.
		/// Dfareporting_accounts_update userprofiles/{profileId}/accounts
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Account> Dfareporting_accounts_updateAsync(string profileId, Account requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/accounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Account>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one account by ID.
		/// Dfareporting_accounts_get userprofiles/{profileId}/accounts/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Account ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Account> Dfareporting_accounts_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/accounts/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Account>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of ads, possibly filtered. This method supports paging.
		/// Dfareporting_ads_list userprofiles/{profileId}/ads
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="active">Select only active ads.</param>
		/// <param name="advertiserId">Select only ads with this advertiser ID.</param>
		/// <param name="archived">Select only archived ads.</param>
		/// <param name="audienceSegmentIds">Select only ads with these audience segment IDs.</param>
		/// <param name="campaignIds">Select only ads with these campaign IDs.</param>
		/// <param name="compatibility">Select default ads with the specified compatibility. Applicable when type is AD_SERVING_DEFAULT_AD. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering an in-stream video ads developed with the VAST standard.</param>
		/// <param name="creativeIds">Select only ads with these creative IDs assigned.</param>
		/// <param name="creativeOptimizationConfigurationIds">Select only ads with these creative optimization configuration IDs.</param>
		/// <param name="dynamicClickTracker">Select only dynamic click trackers. Applicable when type is AD_SERVING_CLICK_TRACKER. If true, select dynamic click trackers. If false, select static click trackers. Leave unset to select both.</param>
		/// <param name="ids">Select only ads with these IDs.</param>
		/// <param name="landingPageIds">Select only ads with these landing page IDs.</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="overriddenEventTagId">Select only ads with this event tag override ID.</param>
		/// <param name="pageToken">Value of the nextPageToken from the previous result page.</param>
		/// <param name="placementIds">Select only ads with these placement IDs assigned.</param>
		/// <param name="remarketingListIds">Select only ads whose list targeting expression use these remarketing list IDs.</param>
		/// <param name="searchString">Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "ad*2015" will return objects with names like "ad June 2015", "ad April 2015", or simply "ad 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "ad" will match objects with name "my ad", "ad 2015", or simply "ad".</param>
		/// <param name="sizeIds">Select only ads with these size IDs.</param>
		/// <param name="sortField">Field by which to sort the list.</param>
		/// <param name="sortOrder">Order of sorted results.</param>
		/// <param name="sslCompliant">Select only ads that are SSL-compliant.</param>
		/// <param name="sslRequired">Select only ads that require SSL.</param>
		/// <param name="type">Select only ads with these types.</param>
		/// <returns>Successful response</returns>
		public async Task<AdsListResponse> Dfareporting_ads_listAsync(
					string profileId, 
					bool active, 
					string advertiserId, 
					bool archived, 
					string[] audienceSegmentIds, 
					string[] campaignIds, 
					AdCompatibility compatibility, 
					string[] creativeIds, 
					string[] creativeOptimizationConfigurationIds, 
					bool dynamicClickTracker, 
					string[] ids, 
					string[] landingPageIds, 
					int maxResults, 
					string overriddenEventTagId, 
					string pageToken, 
					string[] placementIds, 
					string[] remarketingListIds, 
					string searchString, 
					string[] sizeIds, 
					Dfareporting_accountUserProfiles_listSortField sortField, 
					SortedDimensionSortOrder sortOrder, 
					bool sslCompliant, 
					bool sslRequired, 
					AdType[] type, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/ads&active="+active+"&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&archived="+archived+"&"+string.Join("&", audienceSegmentIds.Select(z => $"audienceSegmentIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", campaignIds.Select(z => $"campaignIds={System.Uri.EscapeDataString(z.ToString())}"))+"&compatibility=" + compatibility+"&"+string.Join("&", creativeIds.Select(z => $"creativeIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", creativeOptimizationConfigurationIds.Select(z => $"creativeOptimizationConfigurationIds={System.Uri.EscapeDataString(z.ToString())}"))+"&dynamicClickTracker="+dynamicClickTracker+"&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", landingPageIds.Select(z => $"landingPageIds={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&overriddenEventTagId=" + (overriddenEventTagId==null? "" : System.Uri.EscapeDataString(overriddenEventTagId))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&"+string.Join("&", placementIds.Select(z => $"placementIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", remarketingListIds.Select(z => $"remarketingListIds={System.Uri.EscapeDataString(z.ToString())}"))+"&searchString=" + (searchString==null? "" : System.Uri.EscapeDataString(searchString))+"&"+string.Join("&", sizeIds.Select(z => $"sizeIds={System.Uri.EscapeDataString(z.ToString())}"))+"&sortField=" + sortField+"&sortOrder=" + sortOrder+"&sslCompliant="+sslCompliant+"&sslRequired="+sslRequired+"&"+string.Join("&", type.Select(z => $"type={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing event tag. This method supports patch semantics.
		/// Dfareporting_ads_patch userprofiles/{profileId}/ads
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Required. RemarketingList ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Ad> Dfareporting_ads_patchAsync(string profileId, string id, Ad requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/ads&id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Ad>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new ad.
		/// Dfareporting_ads_insert userprofiles/{profileId}/ads
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Ad> Dfareporting_ads_insertAsync(string profileId, Ad requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/ads";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Ad>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing ad.
		/// Dfareporting_ads_update userprofiles/{profileId}/ads
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Ad> Dfareporting_ads_updateAsync(string profileId, Ad requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/ads";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Ad>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one ad by ID.
		/// Dfareporting_ads_get userprofiles/{profileId}/ads/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Ad ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Ad> Dfareporting_ads_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/ads/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Ad>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of advertiser groups, possibly filtered. This method supports paging.
		/// Dfareporting_advertiserGroups_list userprofiles/{profileId}/advertiserGroups
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="ids">Select only advertiser groups with these IDs.</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="pageToken">Value of the nextPageToken from the previous result page.</param>
		/// <param name="searchString">Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "advertiser*2015" will return objects with names like "advertiser group June 2015", "advertiser group April 2015", or simply "advertiser group 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "advertisergroup" will match objects with name "my advertisergroup", "advertisergroup 2015", or simply "advertisergroup".</param>
		/// <param name="sortField">Field by which to sort the list.</param>
		/// <param name="sortOrder">Order of sorted results.</param>
		/// <returns>Successful response</returns>
		public async Task<AdvertiserGroupsListResponse> Dfareporting_advertiserGroups_listAsync(string profileId, string[] ids, int maxResults, string pageToken, string searchString, Dfareporting_accountUserProfiles_listSortField sortField, SortedDimensionSortOrder sortOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/advertiserGroups&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&searchString=" + (searchString==null? "" : System.Uri.EscapeDataString(searchString))+"&sortField=" + sortField+"&sortOrder=" + sortOrder;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdvertiserGroupsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing advertiser group. This method supports patch semantics.
		/// Dfareporting_advertiserGroups_patch userprofiles/{profileId}/advertiserGroups
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Required. Advertiser Group ID.</param>
		/// <returns>Successful response</returns>
		public async Task<AdvertiserGroup> Dfareporting_advertiserGroups_patchAsync(string profileId, string id, AdvertiserGroup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/advertiserGroups&id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdvertiserGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new advertiser group.
		/// Dfareporting_advertiserGroups_insert userprofiles/{profileId}/advertiserGroups
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<AdvertiserGroup> Dfareporting_advertiserGroups_insertAsync(string profileId, AdvertiserGroup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/advertiserGroups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdvertiserGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing advertiser group.
		/// Dfareporting_advertiserGroups_update userprofiles/{profileId}/advertiserGroups
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<AdvertiserGroup> Dfareporting_advertiserGroups_updateAsync(string profileId, AdvertiserGroup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/advertiserGroups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdvertiserGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing advertiser group.
		/// Dfareporting_advertiserGroups_delete userprofiles/{profileId}/advertiserGroups/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Advertiser group ID.</param>
		/// <returns>Successful response</returns>
		public async Task Dfareporting_advertiserGroups_deleteAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/advertiserGroups/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one advertiser group by ID.
		/// Dfareporting_advertiserGroups_get userprofiles/{profileId}/advertiserGroups/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Advertiser group ID.</param>
		/// <returns>Successful response</returns>
		public async Task<AdvertiserGroup> Dfareporting_advertiserGroups_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/advertiserGroups/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdvertiserGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of landing pages.
		/// Dfareporting_advertiserLandingPages_list userprofiles/{profileId}/advertiserLandingPages
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="advertiserIds">Select only landing pages that belong to these advertisers.</param>
		/// <param name="archived">Select only archived landing pages. Don't set this field to select both archived and non-archived landing pages.</param>
		/// <param name="campaignIds">Select only landing pages that are associated with these campaigns.</param>
		/// <param name="ids">Select only landing pages with these IDs.</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="pageToken">Value of the nextPageToken from the previous result page.</param>
		/// <param name="searchString">Allows searching for landing pages by name or ID. Wildcards (*) are allowed. For example, "landingpage*2017" will return landing pages with names like "landingpage July 2017", "landingpage March 2017", or simply "landingpage 2017". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "landingpage" will match campaigns with name "my landingpage", "landingpage 2015", or simply "landingpage".</param>
		/// <param name="sortField">Field by which to sort the list.</param>
		/// <param name="sortOrder">Order of sorted results.</param>
		/// <param name="subaccountId">Select only landing pages that belong to this subaccount.</param>
		/// <returns>Successful response</returns>
		public async Task<AdvertiserLandingPagesListResponse> Dfareporting_advertiserLandingPages_listAsync(string profileId, string[] advertiserIds, bool archived, string[] campaignIds, string[] ids, int maxResults, string pageToken, string searchString, Dfareporting_accountUserProfiles_listSortField sortField, SortedDimensionSortOrder sortOrder, string subaccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/advertiserLandingPages&"+string.Join("&", advertiserIds.Select(z => $"advertiserIds={System.Uri.EscapeDataString(z.ToString())}"))+"&archived="+archived+"&"+string.Join("&", campaignIds.Select(z => $"campaignIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&searchString=" + (searchString==null? "" : System.Uri.EscapeDataString(searchString))+"&sortField=" + sortField+"&sortOrder=" + sortOrder+"&subaccountId=" + (subaccountId==null? "" : System.Uri.EscapeDataString(subaccountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdvertiserLandingPagesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing advertiser. This method supports patch semantics.
		/// Dfareporting_advertiserLandingPages_patch userprofiles/{profileId}/advertiserLandingPages
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Required. Landing Page ID.</param>
		/// <returns>Successful response</returns>
		public async Task<LandingPage> Dfareporting_advertiserLandingPages_patchAsync(string profileId, string id, LandingPage requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/advertiserLandingPages&id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LandingPage>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new landing page.
		/// Dfareporting_advertiserLandingPages_insert userprofiles/{profileId}/advertiserLandingPages
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<LandingPage> Dfareporting_advertiserLandingPages_insertAsync(string profileId, LandingPage requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/advertiserLandingPages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LandingPage>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing landing page.
		/// Dfareporting_advertiserLandingPages_update userprofiles/{profileId}/advertiserLandingPages
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<LandingPage> Dfareporting_advertiserLandingPages_updateAsync(string profileId, LandingPage requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/advertiserLandingPages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LandingPage>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one landing page by ID.
		/// Dfareporting_advertiserLandingPages_get userprofiles/{profileId}/advertiserLandingPages/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Landing page ID.</param>
		/// <returns>Successful response</returns>
		public async Task<LandingPage> Dfareporting_advertiserLandingPages_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/advertiserLandingPages/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LandingPage>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of advertisers, possibly filtered. This method supports paging.
		/// Dfareporting_advertisers_list userprofiles/{profileId}/advertisers
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="advertiserGroupIds">Select only advertisers with these advertiser group IDs.</param>
		/// <param name="floodlightConfigurationIds">Select only advertisers with these floodlight configuration IDs.</param>
		/// <param name="ids">Select only advertisers with these IDs.</param>
		/// <param name="includeAdvertisersWithoutGroupsOnly">Select only advertisers which do not belong to any advertiser group.</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="onlyParent">Select only advertisers which use another advertiser's floodlight configuration.</param>
		/// <param name="pageToken">Value of the nextPageToken from the previous result page.</param>
		/// <param name="searchString">Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "advertiser*2015" will return objects with names like "advertiser June 2015", "advertiser April 2015", or simply "advertiser 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "advertiser" will match objects with name "my advertiser", "advertiser 2015", or simply "advertiser" .</param>
		/// <param name="sortField">Field by which to sort the list.</param>
		/// <param name="sortOrder">Order of sorted results.</param>
		/// <param name="status">Select only advertisers with the specified status.</param>
		/// <param name="subaccountId">Select only advertisers with these subaccount IDs.</param>
		/// <returns>Successful response</returns>
		public async Task<AdvertisersListResponse> Dfareporting_advertisers_listAsync(string profileId, string[] advertiserGroupIds, string[] floodlightConfigurationIds, string[] ids, bool includeAdvertisersWithoutGroupsOnly, int maxResults, bool onlyParent, string pageToken, string searchString, Dfareporting_accountUserProfiles_listSortField sortField, SortedDimensionSortOrder sortOrder, AdvertiserStatus status, string subaccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/advertisers&"+string.Join("&", advertiserGroupIds.Select(z => $"advertiserGroupIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", floodlightConfigurationIds.Select(z => $"floodlightConfigurationIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&includeAdvertisersWithoutGroupsOnly="+includeAdvertisersWithoutGroupsOnly+"&maxResults="+maxResults+"&onlyParent="+onlyParent+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&searchString=" + (searchString==null? "" : System.Uri.EscapeDataString(searchString))+"&sortField=" + sortField+"&sortOrder=" + sortOrder+"&status=" + status+"&subaccountId=" + (subaccountId==null? "" : System.Uri.EscapeDataString(subaccountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdvertisersListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing advertiser. This method supports patch semantics.
		/// Dfareporting_advertisers_patch userprofiles/{profileId}/advertisers
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Required. Advertiser ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Advertiser> Dfareporting_advertisers_patchAsync(string profileId, string id, Advertiser requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/advertisers&id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Advertiser>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new advertiser.
		/// Dfareporting_advertisers_insert userprofiles/{profileId}/advertisers
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Advertiser> Dfareporting_advertisers_insertAsync(string profileId, Advertiser requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/advertisers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Advertiser>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing advertiser.
		/// Dfareporting_advertisers_update userprofiles/{profileId}/advertisers
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Advertiser> Dfareporting_advertisers_updateAsync(string profileId, Advertiser requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/advertisers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Advertiser>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of invoices for a particular issue month. The api only works if the billing profile invoice level is set to either advertiser or campaign non-consolidated invoice level.
		/// Dfareporting_advertiserInvoices_list userprofiles/{profileId}/advertisers/{advertiserId}/invoices
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="advertiserId">Advertiser ID of this invoice.</param>
		/// <param name="issueMonth">Month for which invoices are needed in the format YYYYMM. Required field</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="pageToken">Value of the nextPageToken from the previous result page.</param>
		/// <returns>Successful response</returns>
		public async Task<AdvertiserInvoicesListResponse> Dfareporting_advertiserInvoices_listAsync(string profileId, string advertiserId, string issueMonth, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/invoices&issueMonth=" + (issueMonth==null? "" : System.Uri.EscapeDataString(issueMonth))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdvertiserInvoicesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one advertiser by ID.
		/// Dfareporting_advertisers_get userprofiles/{profileId}/advertisers/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Advertiser ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Advertiser> Dfareporting_advertisers_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/advertisers/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Advertiser>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of billing profiles, possibly filtered. This method supports paging.
		/// Dfareporting_billingProfiles_list userprofiles/{profileId}/billingProfiles
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="currency_code">Select only billing profile with currency.</param>
		/// <param name="ids">Select only billing profile with these IDs.</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="name">Allows searching for billing profiles by name. Wildcards (*) are allowed. For example, "profile*2020" will return objects with names like "profile June 2020", "profile April 2020", or simply "profile 2020". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "profile" will match objects with name "my profile", "profile 2021", or simply "profile".</param>
		/// <param name="onlySuggestion">Select only billing profile which is suggested for the currency_code & subaccount_id using the Billing Suggestion API.</param>
		/// <param name="pageToken">Value of the nextPageToken from the previous result page.</param>
		/// <param name="sortField">Field by which to sort the list.</param>
		/// <param name="sortOrder">Order of sorted results.</param>
		/// <param name="status">Select only billing profile with the specified status.</param>
		/// <param name="subaccountIds">Select only billing profile with the specified subaccount.When only_suggestion is true, only a single subaccount_id is supported.</param>
		/// <returns>Successful response</returns>
		public async Task<BillingProfilesListResponse> Dfareporting_billingProfiles_listAsync(string profileId, string currency_code, string[] ids, int maxResults, string name, bool onlySuggestion, string pageToken, Dfareporting_accountUserProfiles_listSortField sortField, SortedDimensionSortOrder sortOrder, BillingProfileStatus[] status, string[] subaccountIds, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/billingProfiles&currency_code=" + (currency_code==null? "" : System.Uri.EscapeDataString(currency_code))+"&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&onlySuggestion="+onlySuggestion+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&sortField=" + sortField+"&sortOrder=" + sortOrder+"&"+string.Join("&", status.Select(z => $"status={z}"))+"&"+string.Join("&", subaccountIds.Select(z => $"subaccountIds={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BillingProfilesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing billing profile.
		/// Dfareporting_billingProfiles_update userprofiles/{profileId}/billingProfiles
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<BillingProfile> Dfareporting_billingProfiles_updateAsync(string profileId, BillingProfile requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/billingProfiles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BillingProfile>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of billing assignments.
		/// Dfareporting_billingAssignments_list userprofiles/{profileId}/billingProfiles/{billingProfileId}/billingAssignments
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="billingProfileId">Billing profile ID of this billing assignment.</param>
		/// <returns>Successful response</returns>
		public async Task<BillingAssignmentsListResponse> Dfareporting_billingAssignments_listAsync(string profileId, string billingProfileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/billingProfiles/"+ (billingProfileId==null? "" : System.Uri.EscapeDataString(billingProfileId))+"/billingAssignments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BillingAssignmentsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new billing assignment and returns the new assignment. Only one of advertiser_id or campaign_id is support per request. If the new assignment has no effect (assigning a campaign to the parent advertiser billing profile or assigning an advertiser to the account billing profile), no assignment will be returned.
		/// Dfareporting_billingAssignments_insert userprofiles/{profileId}/billingProfiles/{billingProfileId}/billingAssignments
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="billingProfileId">Billing profile ID of this billing assignment.</param>
		/// <returns>Successful response</returns>
		public async Task<BillingAssignment> Dfareporting_billingAssignments_insertAsync(string profileId, string billingProfileId, BillingAssignment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/billingProfiles/"+ (billingProfileId==null? "" : System.Uri.EscapeDataString(billingProfileId))+"/billingAssignments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BillingAssignment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of billing rates. This method supports paging.
		/// Dfareporting_billingRates_list userprofiles/{profileId}/billingProfiles/{billingProfileId}/billingRates
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="billingProfileId">Billing profile ID of this billing rate.</param>
		/// <returns>Successful response</returns>
		public async Task<BillingRatesListResponse> Dfareporting_billingRates_listAsync(string profileId, string billingProfileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/billingProfiles/"+ (billingProfileId==null? "" : System.Uri.EscapeDataString(billingProfileId))+"/billingRates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BillingRatesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one billing profile by ID.
		/// Dfareporting_billingProfiles_get userprofiles/{profileId}/billingProfiles/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Billing Profile ID.</param>
		/// <returns>Successful response</returns>
		public async Task<BillingProfile> Dfareporting_billingProfiles_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/billingProfiles/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BillingProfile>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of browsers.
		/// Dfareporting_browsers_list userprofiles/{profileId}/browsers
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<BrowsersListResponse> Dfareporting_browsers_listAsync(string profileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/browsers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BrowsersListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of campaigns, possibly filtered. This method supports paging.
		/// Dfareporting_campaigns_list userprofiles/{profileId}/campaigns
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="advertiserGroupIds">Select only campaigns whose advertisers belong to these advertiser groups.</param>
		/// <param name="advertiserIds">Select only campaigns that belong to these advertisers.</param>
		/// <param name="archived">Select only archived campaigns. Don't set this field to select both archived and non-archived campaigns.</param>
		/// <param name="atLeastOneOptimizationActivity">Select only campaigns that have at least one optimization activity.</param>
		/// <param name="excludedIds">Exclude campaigns with these IDs.</param>
		/// <param name="ids">Select only campaigns with these IDs.</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="overriddenEventTagId">Select only campaigns that have overridden this event tag ID.</param>
		/// <param name="pageToken">Value of the nextPageToken from the previous result page.</param>
		/// <param name="searchString">Allows searching for campaigns by name or ID. Wildcards (*) are allowed. For example, "campaign*2015" will return campaigns with names like "campaign June 2015", "campaign April 2015", or simply "campaign 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "campaign" will match campaigns with name "my campaign", "campaign 2015", or simply "campaign".</param>
		/// <param name="sortField">Field by which to sort the list.</param>
		/// <param name="sortOrder">Order of sorted results.</param>
		/// <param name="subaccountId">Select only campaigns that belong to this subaccount.</param>
		/// <returns>Successful response</returns>
		public async Task<CampaignsListResponse> Dfareporting_campaigns_listAsync(string profileId, string[] advertiserGroupIds, string[] advertiserIds, bool archived, bool atLeastOneOptimizationActivity, string[] excludedIds, string[] ids, int maxResults, string overriddenEventTagId, string pageToken, string searchString, Dfareporting_accountUserProfiles_listSortField sortField, SortedDimensionSortOrder sortOrder, string subaccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/campaigns&"+string.Join("&", advertiserGroupIds.Select(z => $"advertiserGroupIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", advertiserIds.Select(z => $"advertiserIds={System.Uri.EscapeDataString(z.ToString())}"))+"&archived="+archived+"&atLeastOneOptimizationActivity="+atLeastOneOptimizationActivity+"&"+string.Join("&", excludedIds.Select(z => $"excludedIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&overriddenEventTagId=" + (overriddenEventTagId==null? "" : System.Uri.EscapeDataString(overriddenEventTagId))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&searchString=" + (searchString==null? "" : System.Uri.EscapeDataString(searchString))+"&sortField=" + sortField+"&sortOrder=" + sortOrder+"&subaccountId=" + (subaccountId==null? "" : System.Uri.EscapeDataString(subaccountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CampaignsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing creative. This method supports patch semantics.
		/// Dfareporting_campaigns_patch userprofiles/{profileId}/campaigns
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Required. Campaign ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Campaign> Dfareporting_campaigns_patchAsync(string profileId, string id, Campaign requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/campaigns&id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Campaign>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new campaign.
		/// Dfareporting_campaigns_insert userprofiles/{profileId}/campaigns
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Campaign> Dfareporting_campaigns_insertAsync(string profileId, Campaign requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/campaigns";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Campaign>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing campaign.
		/// Dfareporting_campaigns_update userprofiles/{profileId}/campaigns
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Campaign> Dfareporting_campaigns_updateAsync(string profileId, Campaign requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/campaigns";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Campaign>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the list of creative IDs associated with the specified campaign. This method supports paging.
		/// Dfareporting_campaignCreativeAssociations_list userprofiles/{profileId}/campaigns/{campaignId}/campaignCreativeAssociations
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="campaignId">Campaign ID in this association.</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="pageToken">Value of the nextPageToken from the previous result page.</param>
		/// <param name="sortOrder">Order of sorted results.</param>
		/// <returns>Successful response</returns>
		public async Task<CampaignCreativeAssociationsListResponse> Dfareporting_campaignCreativeAssociations_listAsync(string profileId, string campaignId, int maxResults, string pageToken, SortedDimensionSortOrder sortOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/campaigns/"+ (campaignId==null? "" : System.Uri.EscapeDataString(campaignId))+"/campaignCreativeAssociations&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&sortOrder=" + sortOrder;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CampaignCreativeAssociationsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associates a creative with the specified campaign. This method creates a default ad with dimensions matching the creative in the campaign if such a default ad does not exist already.
		/// Dfareporting_campaignCreativeAssociations_insert userprofiles/{profileId}/campaigns/{campaignId}/campaignCreativeAssociations
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="campaignId">Campaign ID in this association.</param>
		/// <returns>Successful response</returns>
		public async Task<CampaignCreativeAssociation> Dfareporting_campaignCreativeAssociations_insertAsync(string profileId, string campaignId, CampaignCreativeAssociation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/campaigns/"+ (campaignId==null? "" : System.Uri.EscapeDataString(campaignId))+"/campaignCreativeAssociations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CampaignCreativeAssociation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one campaign by ID.
		/// Dfareporting_campaigns_get userprofiles/{profileId}/campaigns/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Campaign ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Campaign> Dfareporting_campaigns_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/campaigns/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Campaign>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of change logs. This method supports paging.
		/// Dfareporting_changeLogs_list userprofiles/{profileId}/changeLogs
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="action">Select only change logs with the specified action.</param>
		/// <param name="ids">Select only change logs with these IDs.</param>
		/// <param name="maxChangeTime">Select only change logs whose change time is before the specified maxChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is "2015-07-18T22:54:00-04:00". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset.</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="minChangeTime">Select only change logs whose change time is after the specified minChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is "2015-07-18T22:54:00-04:00". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset.</param>
		/// <param name="objectIds">Select only change logs with these object IDs.</param>
		/// <param name="objectType">Select only change logs with the specified object type.</param>
		/// <param name="pageToken">Value of the nextPageToken from the previous result page.</param>
		/// <param name="searchString">Select only change logs whose object ID, user name, old or new values match the search string.</param>
		/// <param name="userProfileIds">Select only change logs with these user profile IDs.</param>
		/// <returns>Successful response</returns>
		public async Task<ChangeLogsListResponse> Dfareporting_changeLogs_listAsync(string profileId, Dfareporting_changeLogs_listAction action, string[] ids, string maxChangeTime, int maxResults, string minChangeTime, string[] objectIds, Dfareporting_changeLogs_listObjectType objectType, string pageToken, string searchString, string[] userProfileIds, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/changeLogs&action=" + action+"&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&maxChangeTime=" + (maxChangeTime==null? "" : System.Uri.EscapeDataString(maxChangeTime))+"&maxResults="+maxResults+"&minChangeTime=" + (minChangeTime==null? "" : System.Uri.EscapeDataString(minChangeTime))+"&"+string.Join("&", objectIds.Select(z => $"objectIds={System.Uri.EscapeDataString(z.ToString())}"))+"&objectType=" + objectType+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&searchString=" + (searchString==null? "" : System.Uri.EscapeDataString(searchString))+"&"+string.Join("&", userProfileIds.Select(z => $"userProfileIds={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChangeLogsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one change log by ID.
		/// Dfareporting_changeLogs_get userprofiles/{profileId}/changeLogs/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Change log ID.</param>
		/// <returns>Successful response</returns>
		public async Task<ChangeLog> Dfareporting_changeLogs_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/changeLogs/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChangeLog>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of cities, possibly filtered.
		/// Dfareporting_cities_list userprofiles/{profileId}/cities
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="countryDartIds">Select only cities from these countries.</param>
		/// <param name="dartIds">Select only cities with these DART IDs.</param>
		/// <param name="namePrefix">Select only cities with names starting with this prefix.</param>
		/// <param name="regionDartIds">Select only cities from these regions.</param>
		/// <returns>Successful response</returns>
		public async Task<CitiesListResponse> Dfareporting_cities_listAsync(string profileId, string[] countryDartIds, string[] dartIds, string namePrefix, string[] regionDartIds, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/cities&"+string.Join("&", countryDartIds.Select(z => $"countryDartIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", dartIds.Select(z => $"dartIds={System.Uri.EscapeDataString(z.ToString())}"))+"&namePrefix=" + (namePrefix==null? "" : System.Uri.EscapeDataString(namePrefix))+"&"+string.Join("&", regionDartIds.Select(z => $"regionDartIds={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CitiesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of connection types.
		/// Dfareporting_connectionTypes_list userprofiles/{profileId}/connectionTypes
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<ConnectionTypesListResponse> Dfareporting_connectionTypes_listAsync(string profileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/connectionTypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ConnectionTypesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one connection type by ID.
		/// Dfareporting_connectionTypes_get userprofiles/{profileId}/connectionTypes/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Connection type ID.</param>
		/// <returns>Successful response</returns>
		public async Task<ConnectionType> Dfareporting_connectionTypes_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/connectionTypes/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ConnectionType>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of content categories, possibly filtered. This method supports paging.
		/// Dfareporting_contentCategories_list userprofiles/{profileId}/contentCategories
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="ids">Select only content categories with these IDs.</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="pageToken">Value of the nextPageToken from the previous result page.</param>
		/// <param name="searchString">Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "contentcategory*2015" will return objects with names like "contentcategory June 2015", "contentcategory April 2015", or simply "contentcategory 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "contentcategory" will match objects with name "my contentcategory", "contentcategory 2015", or simply "contentcategory".</param>
		/// <param name="sortField">Field by which to sort the list.</param>
		/// <param name="sortOrder">Order of sorted results.</param>
		/// <returns>Successful response</returns>
		public async Task<ContentCategoriesListResponse> Dfareporting_contentCategories_listAsync(string profileId, string[] ids, int maxResults, string pageToken, string searchString, Dfareporting_accountUserProfiles_listSortField sortField, SortedDimensionSortOrder sortOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/contentCategories&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&searchString=" + (searchString==null? "" : System.Uri.EscapeDataString(searchString))+"&sortField=" + sortField+"&sortOrder=" + sortOrder;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ContentCategoriesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing content category. This method supports patch semantics.
		/// Dfareporting_contentCategories_patch userprofiles/{profileId}/contentCategories
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Required. ContentCategory ID.</param>
		/// <returns>Successful response</returns>
		public async Task<ContentCategory> Dfareporting_contentCategories_patchAsync(string profileId, string id, ContentCategory requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/contentCategories&id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ContentCategory>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new content category.
		/// Dfareporting_contentCategories_insert userprofiles/{profileId}/contentCategories
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<ContentCategory> Dfareporting_contentCategories_insertAsync(string profileId, ContentCategory requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/contentCategories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ContentCategory>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing content category.
		/// Dfareporting_contentCategories_update userprofiles/{profileId}/contentCategories
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<ContentCategory> Dfareporting_contentCategories_updateAsync(string profileId, ContentCategory requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/contentCategories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ContentCategory>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing content category.
		/// Dfareporting_contentCategories_delete userprofiles/{profileId}/contentCategories/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Content category ID.</param>
		/// <returns>Successful response</returns>
		public async Task Dfareporting_contentCategories_deleteAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/contentCategories/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one content category by ID.
		/// Dfareporting_contentCategories_get userprofiles/{profileId}/contentCategories/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Content category ID.</param>
		/// <returns>Successful response</returns>
		public async Task<ContentCategory> Dfareporting_contentCategories_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/contentCategories/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ContentCategory>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts conversions.
		/// Dfareporting_conversions_batchinsert userprofiles/{profileId}/conversions/batchinsert
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<ConversionsBatchInsertResponse> Dfareporting_conversions_batchinsertAsync(string profileId, ConversionsBatchInsertRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/conversions/batchinsert";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ConversionsBatchInsertResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates existing conversions.
		/// Dfareporting_conversions_batchupdate userprofiles/{profileId}/conversions/batchupdate
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<ConversionsBatchUpdateResponse> Dfareporting_conversions_batchupdateAsync(string profileId, ConversionsBatchUpdateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/conversions/batchupdate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ConversionsBatchUpdateResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of countries.
		/// Dfareporting_countries_list userprofiles/{profileId}/countries
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<CountriesListResponse> Dfareporting_countries_listAsync(string profileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/countries";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CountriesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one country by ID.
		/// Dfareporting_countries_get userprofiles/{profileId}/countries/{dartId}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="dartId">Country DART ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Country> Dfareporting_countries_getAsync(string profileId, string dartId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/countries/"+ (dartId==null? "" : System.Uri.EscapeDataString(dartId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Country>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of creative fields, possibly filtered. This method supports paging.
		/// Dfareporting_creativeFields_list userprofiles/{profileId}/creativeFields
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="advertiserIds">Select only creative fields that belong to these advertisers.</param>
		/// <param name="ids">Select only creative fields with these IDs.</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="pageToken">Value of the nextPageToken from the previous result page.</param>
		/// <param name="searchString">Allows searching for creative fields by name or ID. Wildcards (*) are allowed. For example, "creativefield*2015" will return creative fields with names like "creativefield June 2015", "creativefield April 2015", or simply "creativefield 2015". Most of the searches also add wild-cards implicitly at the start and the end of the search string. For example, a search string of "creativefield" will match creative fields with the name "my creativefield", "creativefield 2015", or simply "creativefield".</param>
		/// <param name="sortField">Field by which to sort the list.</param>
		/// <param name="sortOrder">Order of sorted results.</param>
		/// <returns>Successful response</returns>
		public async Task<CreativeFieldsListResponse> Dfareporting_creativeFields_listAsync(string profileId, string[] advertiserIds, string[] ids, int maxResults, string pageToken, string searchString, Dfareporting_accountUserProfiles_listSortField sortField, SortedDimensionSortOrder sortOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/creativeFields&"+string.Join("&", advertiserIds.Select(z => $"advertiserIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&searchString=" + (searchString==null? "" : System.Uri.EscapeDataString(searchString))+"&sortField=" + sortField+"&sortOrder=" + sortOrder;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreativeFieldsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing creative field. This method supports patch semantics.
		/// Dfareporting_creativeFields_patch userprofiles/{profileId}/creativeFields
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">CreativeField ID.</param>
		/// <returns>Successful response</returns>
		public async Task<CreativeField> Dfareporting_creativeFields_patchAsync(string profileId, string id, CreativeField requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/creativeFields&id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreativeField>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new creative field.
		/// Dfareporting_creativeFields_insert userprofiles/{profileId}/creativeFields
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<CreativeField> Dfareporting_creativeFields_insertAsync(string profileId, CreativeField requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/creativeFields";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreativeField>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing creative field.
		/// Dfareporting_creativeFields_update userprofiles/{profileId}/creativeFields
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<CreativeField> Dfareporting_creativeFields_updateAsync(string profileId, CreativeField requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/creativeFields";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreativeField>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of creative field values, possibly filtered. This method supports paging.
		/// Dfareporting_creativeFieldValues_list userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="creativeFieldId">Creative field ID for this creative field value.</param>
		/// <param name="ids">Select only creative field values with these IDs.</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="pageToken">Value of the nextPageToken from the previous result page.</param>
		/// <param name="searchString">Allows searching for creative field values by their values. Wildcards (e.g. *) are not allowed.</param>
		/// <param name="sortField">Field by which to sort the list.</param>
		/// <param name="sortOrder">Order of sorted results.</param>
		/// <returns>Successful response</returns>
		public async Task<CreativeFieldValuesListResponse> Dfareporting_creativeFieldValues_listAsync(string profileId, string creativeFieldId, string[] ids, int maxResults, string pageToken, string searchString, Dfareporting_creativeFieldValues_listSortField sortField, SortedDimensionSortOrder sortOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/creativeFields/"+ (creativeFieldId==null? "" : System.Uri.EscapeDataString(creativeFieldId))+"/creativeFieldValues&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&searchString=" + (searchString==null? "" : System.Uri.EscapeDataString(searchString))+"&sortField=" + sortField+"&sortOrder=" + sortOrder;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreativeFieldValuesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing creative field value. This method supports patch semantics.
		/// Dfareporting_creativeFieldValues_patch userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="creativeFieldId">CreativeField ID.</param>
		/// <param name="id">CreativeFieldValue ID.</param>
		/// <returns>Successful response</returns>
		public async Task<CreativeFieldValue> Dfareporting_creativeFieldValues_patchAsync(string profileId, string creativeFieldId, string id, CreativeFieldValue requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/creativeFields/"+ (creativeFieldId==null? "" : System.Uri.EscapeDataString(creativeFieldId))+"/creativeFieldValues&id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreativeFieldValue>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new creative field value.
		/// Dfareporting_creativeFieldValues_insert userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="creativeFieldId">Creative field ID for this creative field value.</param>
		/// <returns>Successful response</returns>
		public async Task<CreativeFieldValue> Dfareporting_creativeFieldValues_insertAsync(string profileId, string creativeFieldId, CreativeFieldValue requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/creativeFields/"+ (creativeFieldId==null? "" : System.Uri.EscapeDataString(creativeFieldId))+"/creativeFieldValues";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreativeFieldValue>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing creative field value.
		/// Dfareporting_creativeFieldValues_update userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="creativeFieldId">Creative field ID for this creative field value.</param>
		/// <returns>Successful response</returns>
		public async Task<CreativeFieldValue> Dfareporting_creativeFieldValues_updateAsync(string profileId, string creativeFieldId, CreativeFieldValue requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/creativeFields/"+ (creativeFieldId==null? "" : System.Uri.EscapeDataString(creativeFieldId))+"/creativeFieldValues";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreativeFieldValue>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing creative field value.
		/// Dfareporting_creativeFieldValues_delete userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="creativeFieldId">Creative field ID for this creative field value.</param>
		/// <param name="id">Creative Field Value ID</param>
		/// <returns>Successful response</returns>
		public async Task Dfareporting_creativeFieldValues_deleteAsync(string profileId, string creativeFieldId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/creativeFields/"+ (creativeFieldId==null? "" : System.Uri.EscapeDataString(creativeFieldId))+"/creativeFieldValues/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one creative field value by ID.
		/// Dfareporting_creativeFieldValues_get userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="creativeFieldId">Creative field ID for this creative field value.</param>
		/// <param name="id">Creative Field Value ID</param>
		/// <returns>Successful response</returns>
		public async Task<CreativeFieldValue> Dfareporting_creativeFieldValues_getAsync(string profileId, string creativeFieldId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/creativeFields/"+ (creativeFieldId==null? "" : System.Uri.EscapeDataString(creativeFieldId))+"/creativeFieldValues/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreativeFieldValue>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing creative field.
		/// Dfareporting_creativeFields_delete userprofiles/{profileId}/creativeFields/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Creative Field ID</param>
		/// <returns>Successful response</returns>
		public async Task Dfareporting_creativeFields_deleteAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/creativeFields/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one creative field by ID.
		/// Dfareporting_creativeFields_get userprofiles/{profileId}/creativeFields/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Creative Field ID</param>
		/// <returns>Successful response</returns>
		public async Task<CreativeField> Dfareporting_creativeFields_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/creativeFields/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreativeField>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of creative groups, possibly filtered. This method supports paging.
		/// Dfareporting_creativeGroups_list userprofiles/{profileId}/creativeGroups
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="advertiserIds">Select only creative groups that belong to these advertisers.</param>
		/// <param name="groupNumber">Select only creative groups that belong to this subgroup.</param>
		/// <param name="ids">Select only creative groups with these IDs.</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="pageToken">Value of the nextPageToken from the previous result page.</param>
		/// <param name="searchString">Allows searching for creative groups by name or ID. Wildcards (*) are allowed. For example, "creativegroup*2015" will return creative groups with names like "creativegroup June 2015", "creativegroup April 2015", or simply "creativegroup 2015". Most of the searches also add wild-cards implicitly at the start and the end of the search string. For example, a search string of "creativegroup" will match creative groups with the name "my creativegroup", "creativegroup 2015", or simply "creativegroup".</param>
		/// <param name="sortField">Field by which to sort the list.</param>
		/// <param name="sortOrder">Order of sorted results.</param>
		/// <returns>Successful response</returns>
		public async Task<CreativeGroupsListResponse> Dfareporting_creativeGroups_listAsync(string profileId, string[] advertiserIds, int groupNumber, string[] ids, int maxResults, string pageToken, string searchString, Dfareporting_accountUserProfiles_listSortField sortField, SortedDimensionSortOrder sortOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/creativeGroups&"+string.Join("&", advertiserIds.Select(z => $"advertiserIds={System.Uri.EscapeDataString(z.ToString())}"))+"&groupNumber="+groupNumber+"&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&searchString=" + (searchString==null? "" : System.Uri.EscapeDataString(searchString))+"&sortField=" + sortField+"&sortOrder=" + sortOrder;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreativeGroupsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing creative group. This method supports patch semantics.
		/// Dfareporting_creativeGroups_patch userprofiles/{profileId}/creativeGroups
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Required. Creative Group ID.</param>
		/// <returns>Successful response</returns>
		public async Task<CreativeGroup> Dfareporting_creativeGroups_patchAsync(string profileId, string id, CreativeGroup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/creativeGroups&id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreativeGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new creative group.
		/// Dfareporting_creativeGroups_insert userprofiles/{profileId}/creativeGroups
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<CreativeGroup> Dfareporting_creativeGroups_insertAsync(string profileId, CreativeGroup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/creativeGroups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreativeGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing creative group.
		/// Dfareporting_creativeGroups_update userprofiles/{profileId}/creativeGroups
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<CreativeGroup> Dfareporting_creativeGroups_updateAsync(string profileId, CreativeGroup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/creativeGroups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreativeGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one creative group by ID.
		/// Dfareporting_creativeGroups_get userprofiles/{profileId}/creativeGroups/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Creative group ID.</param>
		/// <returns>Successful response</returns>
		public async Task<CreativeGroup> Dfareporting_creativeGroups_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/creativeGroups/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreativeGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of creatives, possibly filtered. This method supports paging.
		/// Dfareporting_creatives_list userprofiles/{profileId}/creatives
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="active">Select only active creatives. Leave blank to select active and inactive creatives.</param>
		/// <param name="advertiserId">Select only creatives with this advertiser ID.</param>
		/// <param name="archived">Select only archived creatives. Leave blank to select archived and unarchived creatives.</param>
		/// <param name="campaignId">Select only creatives with this campaign ID.</param>
		/// <param name="companionCreativeIds">Select only in-stream video creatives with these companion IDs.</param>
		/// <param name="creativeFieldIds">Select only creatives with these creative field IDs.</param>
		/// <param name="ids">Select only creatives with these IDs.</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="pageToken">Value of the nextPageToken from the previous result page.</param>
		/// <param name="renderingIds">Select only creatives with these rendering IDs.</param>
		/// <param name="searchString">Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "creative*2015" will return objects with names like "creative June 2015", "creative April 2015", or simply "creative 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "creative" will match objects with name "my creative", "creative 2015", or simply "creative".</param>
		/// <param name="sizeIds">Select only creatives with these size IDs.</param>
		/// <param name="sortField">Field by which to sort the list.</param>
		/// <param name="sortOrder">Order of sorted results.</param>
		/// <param name="studioCreativeId">Select only creatives corresponding to this Studio creative ID.</param>
		/// <param name="types">Select only creatives with these creative types.</param>
		/// <returns>Successful response</returns>
		public async Task<CreativesListResponse> Dfareporting_creatives_listAsync(
					string profileId, 
					bool active, 
					string advertiserId, 
					bool archived, 
					string campaignId, 
					string[] companionCreativeIds, 
					string[] creativeFieldIds, 
					string[] ids, 
					int maxResults, 
					string pageToken, 
					string[] renderingIds, 
					string searchString, 
					string[] sizeIds, 
					Dfareporting_accountUserProfiles_listSortField sortField, 
					SortedDimensionSortOrder sortOrder, 
					string studioCreativeId, 
					CreativeType[] types, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/creatives&active="+active+"&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&archived="+archived+"&campaignId=" + (campaignId==null? "" : System.Uri.EscapeDataString(campaignId))+"&"+string.Join("&", companionCreativeIds.Select(z => $"companionCreativeIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", creativeFieldIds.Select(z => $"creativeFieldIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&"+string.Join("&", renderingIds.Select(z => $"renderingIds={System.Uri.EscapeDataString(z.ToString())}"))+"&searchString=" + (searchString==null? "" : System.Uri.EscapeDataString(searchString))+"&"+string.Join("&", sizeIds.Select(z => $"sizeIds={System.Uri.EscapeDataString(z.ToString())}"))+"&sortField=" + sortField+"&sortOrder=" + sortOrder+"&studioCreativeId=" + (studioCreativeId==null? "" : System.Uri.EscapeDataString(studioCreativeId))+"&"+string.Join("&", types.Select(z => $"types={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreativesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing creative. This method supports patch semantics.
		/// Dfareporting_creatives_patch userprofiles/{profileId}/creatives
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Required. Creative ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Creative> Dfareporting_creatives_patchAsync(string profileId, string id, Creative requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/creatives&id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Creative>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new creative.
		/// Dfareporting_creatives_insert userprofiles/{profileId}/creatives
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Creative> Dfareporting_creatives_insertAsync(string profileId, Creative requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/creatives";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Creative>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing creative.
		/// Dfareporting_creatives_update userprofiles/{profileId}/creatives
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Creative> Dfareporting_creatives_updateAsync(string profileId, Creative requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/creatives";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Creative>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one creative by ID.
		/// Dfareporting_creatives_get userprofiles/{profileId}/creatives/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Creative ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Creative> Dfareporting_creatives_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/creatives/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Creative>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves list of report dimension values for a list of filters.
		/// Dfareporting_dimensionValues_query userprofiles/{profileId}/dimensionvalues/query
		/// </summary>
		/// <param name="profileId">The Campaign Manager 360 user profile ID.</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="pageToken">The value of the nextToken from the previous result page.</param>
		/// <returns>Successful response</returns>
		public async Task<DimensionValueList> Dfareporting_dimensionValues_queryAsync(string profileId, int maxResults, string pageToken, DimensionValueRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/dimensionvalues/query&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DimensionValueList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of directory sites, possibly filtered. This method supports paging.
		/// Dfareporting_directorySites_list userprofiles/{profileId}/directorySites
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="acceptsInStreamVideoPlacements">This search filter is no longer supported and will have no effect on the results returned.</param>
		/// <param name="acceptsInterstitialPlacements">This search filter is no longer supported and will have no effect on the results returned.</param>
		/// <param name="acceptsPublisherPaidPlacements">Select only directory sites that accept publisher paid placements. This field can be left blank.</param>
		/// <param name="active">Select only active directory sites. Leave blank to retrieve both active and inactive directory sites.</param>
		/// <param name="dfpNetworkCode">Select only directory sites with this Ad Manager network code.</param>
		/// <param name="ids">Select only directory sites with these IDs.</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="pageToken">Value of the nextPageToken from the previous result page.</param>
		/// <param name="searchString">Allows searching for objects by name, ID or URL. Wildcards (*) are allowed. For example, "directory site*2015" will return objects with names like "directory site June 2015", "directory site April 2015", or simply "directory site 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "directory site" will match objects with name "my directory site", "directory site 2015" or simply, "directory site".</param>
		/// <param name="sortField">Field by which to sort the list.</param>
		/// <param name="sortOrder">Order of sorted results.</param>
		/// <returns>Successful response</returns>
		public async Task<DirectorySitesListResponse> Dfareporting_directorySites_listAsync(string profileId, bool acceptsInStreamVideoPlacements, bool acceptsInterstitialPlacements, bool acceptsPublisherPaidPlacements, bool active, string dfpNetworkCode, string[] ids, int maxResults, string pageToken, string searchString, Dfareporting_accountUserProfiles_listSortField sortField, SortedDimensionSortOrder sortOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/directorySites&acceptsInStreamVideoPlacements="+acceptsInStreamVideoPlacements+"&acceptsInterstitialPlacements="+acceptsInterstitialPlacements+"&acceptsPublisherPaidPlacements="+acceptsPublisherPaidPlacements+"&active="+active+"&dfpNetworkCode=" + (dfpNetworkCode==null? "" : System.Uri.EscapeDataString(dfpNetworkCode))+"&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&searchString=" + (searchString==null? "" : System.Uri.EscapeDataString(searchString))+"&sortField=" + sortField+"&sortOrder=" + sortOrder;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DirectorySitesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new directory site.
		/// Dfareporting_directorySites_insert userprofiles/{profileId}/directorySites
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<DirectorySite> Dfareporting_directorySites_insertAsync(string profileId, DirectorySite requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/directorySites";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DirectorySite>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one directory site by ID.
		/// Dfareporting_directorySites_get userprofiles/{profileId}/directorySites/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Directory site ID.</param>
		/// <returns>Successful response</returns>
		public async Task<DirectorySite> Dfareporting_directorySites_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/directorySites/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DirectorySite>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of dynamic targeting keys.
		/// Dfareporting_dynamicTargetingKeys_list userprofiles/{profileId}/dynamicTargetingKeys
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="advertiserId">Select only dynamic targeting keys whose object has this advertiser ID.</param>
		/// <param name="names">Select only dynamic targeting keys exactly matching these names.</param>
		/// <param name="objectId">Select only dynamic targeting keys with this object ID.</param>
		/// <param name="objectType">Select only dynamic targeting keys with this object type.</param>
		/// <returns>Successful response</returns>
		public async Task<DynamicTargetingKeysListResponse> Dfareporting_dynamicTargetingKeys_listAsync(string profileId, string advertiserId, string[] names, string objectId, DynamicTargetingKeyObjectType objectType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/dynamicTargetingKeys&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&"+string.Join("&", names.Select(z => $"names={System.Uri.EscapeDataString(z.ToString())}"))+"&objectId=" + (objectId==null? "" : System.Uri.EscapeDataString(objectId))+"&objectType=" + objectType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DynamicTargetingKeysListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new dynamic targeting key. Keys must be created at the advertiser level before being assigned to the advertiser's ads, creatives, or placements. There is a maximum of 1000 keys per advertiser, out of which a maximum of 20 keys can be assigned per ad, creative, or placement.
		/// Dfareporting_dynamicTargetingKeys_insert userprofiles/{profileId}/dynamicTargetingKeys
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<DynamicTargetingKey> Dfareporting_dynamicTargetingKeys_insertAsync(string profileId, DynamicTargetingKey requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/dynamicTargetingKeys";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DynamicTargetingKey>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing dynamic targeting key.
		/// Dfareporting_dynamicTargetingKeys_delete userprofiles/{profileId}/dynamicTargetingKeys/{objectId}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="objectId">ID of the object of this dynamic targeting key. This is a required field.</param>
		/// <param name="name">Required. Name of this dynamic targeting key. This is a required field. Must be less than 256 characters long and cannot contain commas. All characters are converted to lowercase.</param>
		/// <param name="objectType">Required. Type of the object of this dynamic targeting key. This is a required field.</param>
		/// <returns>Successful response</returns>
		public async Task Dfareporting_dynamicTargetingKeys_deleteAsync(string profileId, string objectId, string name, DynamicTargetingKeyObjectType objectType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/dynamicTargetingKeys/"+ (objectId==null? "" : System.Uri.EscapeDataString(objectId))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&objectType=" + objectType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of event tags, possibly filtered.
		/// Dfareporting_eventTags_list userprofiles/{profileId}/eventTags
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="adId">Select only event tags that belong to this ad.</param>
		/// <param name="advertiserId">Select only event tags that belong to this advertiser.</param>
		/// <param name="campaignId">Select only event tags that belong to this campaign.</param>
		/// <param name="definitionsOnly">Examine only the specified campaign or advertiser's event tags for matching selector criteria. When set to false, the parent advertiser and parent campaign of the specified ad or campaign is examined as well. In addition, when set to false, the status field is examined as well, along with the enabledByDefault field. This parameter can not be set to true when adId is specified as ads do not define their own even tags.</param>
		/// <param name="enabled">Select only enabled event tags. What is considered enabled or disabled depends on the definitionsOnly parameter. When definitionsOnly is set to true, only the specified advertiser or campaign's event tags' enabledByDefault field is examined. When definitionsOnly is set to false, the specified ad or specified campaign's parent advertiser's or parent campaign's event tags' enabledByDefault and status fields are examined as well.</param>
		/// <param name="eventTagTypes">Select only event tags with the specified event tag types. Event tag types can be used to specify whether to use a third-party pixel, a third-party JavaScript URL, or a third-party click-through URL for either impression or click tracking.</param>
		/// <param name="ids">Select only event tags with these IDs.</param>
		/// <param name="searchString">Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "eventtag*2015" will return objects with names like "eventtag June 2015", "eventtag April 2015", or simply "eventtag 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "eventtag" will match objects with name "my eventtag", "eventtag 2015", or simply "eventtag".</param>
		/// <param name="sortField">Field by which to sort the list.</param>
		/// <param name="sortOrder">Order of sorted results.</param>
		/// <returns>Successful response</returns>
		public async Task<EventTagsListResponse> Dfareporting_eventTags_listAsync(string profileId, string adId, string advertiserId, string campaignId, bool definitionsOnly, bool enabled, EventTagType[] eventTagTypes, string[] ids, string searchString, Dfareporting_accountUserProfiles_listSortField sortField, SortedDimensionSortOrder sortOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/eventTags&adId=" + (adId==null? "" : System.Uri.EscapeDataString(adId))+"&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&campaignId=" + (campaignId==null? "" : System.Uri.EscapeDataString(campaignId))+"&definitionsOnly="+definitionsOnly+"&enabled="+enabled+"&"+string.Join("&", eventTagTypes.Select(z => $"eventTagTypes={z}"))+"&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&searchString=" + (searchString==null? "" : System.Uri.EscapeDataString(searchString))+"&sortField=" + sortField+"&sortOrder=" + sortOrder;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EventTagsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing event tag. This method supports patch semantics.
		/// Dfareporting_eventTags_patch userprofiles/{profileId}/eventTags
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Required. EventTag ID.</param>
		/// <returns>Successful response</returns>
		public async Task<EventTag> Dfareporting_eventTags_patchAsync(string profileId, string id, EventTag requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/eventTags&id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EventTag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new event tag.
		/// Dfareporting_eventTags_insert userprofiles/{profileId}/eventTags
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<EventTag> Dfareporting_eventTags_insertAsync(string profileId, EventTag requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/eventTags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EventTag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing event tag.
		/// Dfareporting_eventTags_update userprofiles/{profileId}/eventTags
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<EventTag> Dfareporting_eventTags_updateAsync(string profileId, EventTag requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/eventTags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EventTag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing event tag.
		/// Dfareporting_eventTags_delete userprofiles/{profileId}/eventTags/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Event tag ID.</param>
		/// <returns>Successful response</returns>
		public async Task Dfareporting_eventTags_deleteAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/eventTags/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one event tag by ID.
		/// Dfareporting_eventTags_get userprofiles/{profileId}/eventTags/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Event tag ID.</param>
		/// <returns>Successful response</returns>
		public async Task<EventTag> Dfareporting_eventTags_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/eventTags/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EventTag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists files for a user profile.
		/// Dfareporting_files_list userprofiles/{profileId}/files
		/// </summary>
		/// <param name="profileId">The Campaign Manager 360 user profile ID.</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="pageToken">The value of the nextToken from the previous result page.</param>
		/// <param name="scope">The scope that defines which results are returned.</param>
		/// <param name="sortField">The field by which to sort the list.</param>
		/// <param name="sortOrder">Order of sorted results.</param>
		/// <returns>Successful response</returns>
		public async Task<FileList> Dfareporting_files_listAsync(string profileId, int maxResults, string pageToken, Dfareporting_files_listScope scope, Dfareporting_files_listSortField sortField, SortedDimensionSortOrder sortOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/files&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&scope=" + scope+"&sortField=" + sortField+"&sortOrder=" + sortOrder;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FileList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of floodlight activities, possibly filtered. This method supports paging.
		/// Dfareporting_floodlightActivities_list userprofiles/{profileId}/floodlightActivities
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="advertiserId">Select only floodlight activities for the specified advertiser ID. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.</param>
		/// <param name="floodlightActivityGroupIds">Select only floodlight activities with the specified floodlight activity group IDs.</param>
		/// <param name="floodlightActivityGroupName">Select only floodlight activities with the specified floodlight activity group name.</param>
		/// <param name="floodlightActivityGroupTagString">Select only floodlight activities with the specified floodlight activity group tag string.</param>
		/// <param name="floodlightActivityGroupType">Select only floodlight activities with the specified floodlight activity group type.</param>
		/// <param name="floodlightConfigurationId">Select only floodlight activities for the specified floodlight configuration ID. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.</param>
		/// <param name="ids">Select only floodlight activities with the specified IDs. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="pageToken">Value of the nextPageToken from the previous result page.</param>
		/// <param name="searchString">Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "floodlightactivity*2015" will return objects with names like "floodlightactivity June 2015", "floodlightactivity April 2015", or simply "floodlightactivity 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "floodlightactivity" will match objects with name "my floodlightactivity activity", "floodlightactivity 2015", or simply "floodlightactivity".</param>
		/// <param name="sortField">Field by which to sort the list.</param>
		/// <param name="sortOrder">Order of sorted results.</param>
		/// <param name="tagString">Select only floodlight activities with the specified tag string.</param>
		/// <returns>Successful response</returns>
		public async Task<FloodlightActivitiesListResponse> Dfareporting_floodlightActivities_listAsync(string profileId, string advertiserId, string[] floodlightActivityGroupIds, string floodlightActivityGroupName, string floodlightActivityGroupTagString, FloodlightActivityFloodlightActivityGroupType floodlightActivityGroupType, string floodlightConfigurationId, string[] ids, int maxResults, string pageToken, string searchString, Dfareporting_accountUserProfiles_listSortField sortField, SortedDimensionSortOrder sortOrder, string tagString, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/floodlightActivities&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&"+string.Join("&", floodlightActivityGroupIds.Select(z => $"floodlightActivityGroupIds={System.Uri.EscapeDataString(z.ToString())}"))+"&floodlightActivityGroupName=" + (floodlightActivityGroupName==null? "" : System.Uri.EscapeDataString(floodlightActivityGroupName))+"&floodlightActivityGroupTagString=" + (floodlightActivityGroupTagString==null? "" : System.Uri.EscapeDataString(floodlightActivityGroupTagString))+"&floodlightActivityGroupType=" + floodlightActivityGroupType+"&floodlightConfigurationId=" + (floodlightConfigurationId==null? "" : System.Uri.EscapeDataString(floodlightConfigurationId))+"&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&searchString=" + (searchString==null? "" : System.Uri.EscapeDataString(searchString))+"&sortField=" + sortField+"&sortOrder=" + sortOrder+"&tagString=" + (tagString==null? "" : System.Uri.EscapeDataString(tagString));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FloodlightActivitiesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing event tag. This method supports patch semantics.
		/// Dfareporting_floodlightActivities_patch userprofiles/{profileId}/floodlightActivities
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Required. EventTag ID.</param>
		/// <returns>Successful response</returns>
		public async Task<FloodlightActivity> Dfareporting_floodlightActivities_patchAsync(string profileId, string id, FloodlightActivity requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/floodlightActivities&id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FloodlightActivity>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new floodlight activity.
		/// Dfareporting_floodlightActivities_insert userprofiles/{profileId}/floodlightActivities
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<FloodlightActivity> Dfareporting_floodlightActivities_insertAsync(string profileId, FloodlightActivity requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/floodlightActivities";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FloodlightActivity>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing floodlight activity.
		/// Dfareporting_floodlightActivities_update userprofiles/{profileId}/floodlightActivities
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<FloodlightActivity> Dfareporting_floodlightActivities_updateAsync(string profileId, FloodlightActivity requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/floodlightActivities";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FloodlightActivity>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generates a tag for a floodlight activity.
		/// Dfareporting_floodlightActivities_generatetag userprofiles/{profileId}/floodlightActivities/generatetag
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="floodlightActivityId">Floodlight activity ID for which we want to generate a tag.</param>
		/// <returns>Successful response</returns>
		public async Task<FloodlightActivitiesGenerateTagResponse> Dfareporting_floodlightActivities_generatetagAsync(string profileId, string floodlightActivityId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/floodlightActivities/generatetag&floodlightActivityId=" + (floodlightActivityId==null? "" : System.Uri.EscapeDataString(floodlightActivityId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FloodlightActivitiesGenerateTagResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing floodlight activity.
		/// Dfareporting_floodlightActivities_delete userprofiles/{profileId}/floodlightActivities/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Floodlight activity ID.</param>
		/// <returns>Successful response</returns>
		public async Task Dfareporting_floodlightActivities_deleteAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/floodlightActivities/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one floodlight activity by ID.
		/// Dfareporting_floodlightActivities_get userprofiles/{profileId}/floodlightActivities/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Floodlight activity ID.</param>
		/// <returns>Successful response</returns>
		public async Task<FloodlightActivity> Dfareporting_floodlightActivities_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/floodlightActivities/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FloodlightActivity>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of floodlight activity groups, possibly filtered. This method supports paging.
		/// Dfareporting_floodlightActivityGroups_list userprofiles/{profileId}/floodlightActivityGroups
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="advertiserId">Select only floodlight activity groups with the specified advertiser ID. Must specify either advertiserId or floodlightConfigurationId for a non-empty result.</param>
		/// <param name="floodlightConfigurationId">Select only floodlight activity groups with the specified floodlight configuration ID. Must specify either advertiserId, or floodlightConfigurationId for a non-empty result.</param>
		/// <param name="ids">Select only floodlight activity groups with the specified IDs. Must specify either advertiserId or floodlightConfigurationId for a non-empty result.</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="pageToken">Value of the nextPageToken from the previous result page.</param>
		/// <param name="searchString">Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "floodlightactivitygroup*2015" will return objects with names like "floodlightactivitygroup June 2015", "floodlightactivitygroup April 2015", or simply "floodlightactivitygroup 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "floodlightactivitygroup" will match objects with name "my floodlightactivitygroup activity", "floodlightactivitygroup 2015", or simply "floodlightactivitygroup".</param>
		/// <param name="sortField">Field by which to sort the list.</param>
		/// <param name="sortOrder">Order of sorted results.</param>
		/// <param name="type">Select only floodlight activity groups with the specified floodlight activity group type.</param>
		/// <returns>Successful response</returns>
		public async Task<FloodlightActivityGroupsListResponse> Dfareporting_floodlightActivityGroups_listAsync(string profileId, string advertiserId, string floodlightConfigurationId, string[] ids, int maxResults, string pageToken, string searchString, Dfareporting_accountUserProfiles_listSortField sortField, SortedDimensionSortOrder sortOrder, FloodlightActivityFloodlightActivityGroupType type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/floodlightActivityGroups&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&floodlightConfigurationId=" + (floodlightConfigurationId==null? "" : System.Uri.EscapeDataString(floodlightConfigurationId))+"&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&searchString=" + (searchString==null? "" : System.Uri.EscapeDataString(searchString))+"&sortField=" + sortField+"&sortOrder=" + sortOrder+"&type=" + type;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FloodlightActivityGroupsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing event tag. This method supports patch semantics.
		/// Dfareporting_floodlightActivityGroups_patch userprofiles/{profileId}/floodlightActivityGroups
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Required. EventTag ID.</param>
		/// <returns>Successful response</returns>
		public async Task<FloodlightActivityGroup> Dfareporting_floodlightActivityGroups_patchAsync(string profileId, string id, FloodlightActivityGroup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/floodlightActivityGroups&id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FloodlightActivityGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new floodlight activity group.
		/// Dfareporting_floodlightActivityGroups_insert userprofiles/{profileId}/floodlightActivityGroups
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<FloodlightActivityGroup> Dfareporting_floodlightActivityGroups_insertAsync(string profileId, FloodlightActivityGroup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/floodlightActivityGroups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FloodlightActivityGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing floodlight activity group.
		/// Dfareporting_floodlightActivityGroups_update userprofiles/{profileId}/floodlightActivityGroups
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<FloodlightActivityGroup> Dfareporting_floodlightActivityGroups_updateAsync(string profileId, FloodlightActivityGroup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/floodlightActivityGroups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FloodlightActivityGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one floodlight activity group by ID.
		/// Dfareporting_floodlightActivityGroups_get userprofiles/{profileId}/floodlightActivityGroups/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Floodlight activity Group ID.</param>
		/// <returns>Successful response</returns>
		public async Task<FloodlightActivityGroup> Dfareporting_floodlightActivityGroups_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/floodlightActivityGroups/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FloodlightActivityGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of floodlight configurations, possibly filtered.
		/// Dfareporting_floodlightConfigurations_list userprofiles/{profileId}/floodlightConfigurations
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="ids">Set of IDs of floodlight configurations to retrieve. Required field; otherwise an empty list will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<FloodlightConfigurationsListResponse> Dfareporting_floodlightConfigurations_listAsync(string profileId, string[] ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/floodlightConfigurations&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FloodlightConfigurationsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing event tag. This method supports patch semantics.
		/// Dfareporting_floodlightConfigurations_patch userprofiles/{profileId}/floodlightConfigurations
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Required. EventTag ID.</param>
		/// <returns>Successful response</returns>
		public async Task<FloodlightConfiguration> Dfareporting_floodlightConfigurations_patchAsync(string profileId, string id, FloodlightConfiguration requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/floodlightConfigurations&id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FloodlightConfiguration>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing floodlight configuration.
		/// Dfareporting_floodlightConfigurations_update userprofiles/{profileId}/floodlightConfigurations
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<FloodlightConfiguration> Dfareporting_floodlightConfigurations_updateAsync(string profileId, FloodlightConfiguration requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/floodlightConfigurations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FloodlightConfiguration>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one floodlight configuration by ID.
		/// Dfareporting_floodlightConfigurations_get userprofiles/{profileId}/floodlightConfigurations/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Floodlight configuration ID.</param>
		/// <returns>Successful response</returns>
		public async Task<FloodlightConfiguration> Dfareporting_floodlightConfigurations_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/floodlightConfigurations/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FloodlightConfiguration>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of languages.
		/// Dfareporting_languages_list userprofiles/{profileId}/languages
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<LanguagesListResponse> Dfareporting_languages_listAsync(string profileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/languages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LanguagesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of metros.
		/// Dfareporting_metros_list userprofiles/{profileId}/metros
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<MetrosListResponse> Dfareporting_metros_listAsync(string profileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/metros";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MetrosListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves list of available mobile apps.
		/// Dfareporting_mobileApps_list userprofiles/{profileId}/mobileApps
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="directories">Select only apps from these directories.</param>
		/// <param name="ids">Select only apps with these IDs.</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="pageToken">Value of the nextPageToken from the previous result page.</param>
		/// <param name="searchString">Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "app*2015" will return objects with names like "app Jan 2018", "app Jan 2018", or simply "app 2018". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "app" will match objects with name "my app", "app 2018", or simply "app".</param>
		/// <returns>Successful response</returns>
		public async Task<MobileAppsListResponse> Dfareporting_mobileApps_listAsync(string profileId, MobileAppDirectory[] directories, string[] ids, int maxResults, string pageToken, string searchString, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/mobileApps&"+string.Join("&", directories.Select(z => $"directories={z}"))+"&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&searchString=" + (searchString==null? "" : System.Uri.EscapeDataString(searchString));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MobileAppsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one mobile app by ID.
		/// Dfareporting_mobileApps_get userprofiles/{profileId}/mobileApps/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Mobile app ID.</param>
		/// <returns>Successful response</returns>
		public async Task<MobileApp> Dfareporting_mobileApps_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/mobileApps/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MobileApp>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of mobile carriers.
		/// Dfareporting_mobileCarriers_list userprofiles/{profileId}/mobileCarriers
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<MobileCarriersListResponse> Dfareporting_mobileCarriers_listAsync(string profileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/mobileCarriers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MobileCarriersListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one mobile carrier by ID.
		/// Dfareporting_mobileCarriers_get userprofiles/{profileId}/mobileCarriers/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Mobile carrier ID.</param>
		/// <returns>Successful response</returns>
		public async Task<MobileCarrier> Dfareporting_mobileCarriers_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/mobileCarriers/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MobileCarrier>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of operating system versions.
		/// Dfareporting_operatingSystemVersions_list userprofiles/{profileId}/operatingSystemVersions
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<OperatingSystemVersionsListResponse> Dfareporting_operatingSystemVersions_listAsync(string profileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/operatingSystemVersions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OperatingSystemVersionsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one operating system version by ID.
		/// Dfareporting_operatingSystemVersions_get userprofiles/{profileId}/operatingSystemVersions/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Operating system version ID.</param>
		/// <returns>Successful response</returns>
		public async Task<OperatingSystemVersion> Dfareporting_operatingSystemVersions_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/operatingSystemVersions/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OperatingSystemVersion>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of operating systems.
		/// Dfareporting_operatingSystems_list userprofiles/{profileId}/operatingSystems
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<OperatingSystemsListResponse> Dfareporting_operatingSystems_listAsync(string profileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/operatingSystems";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OperatingSystemsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one operating system by DART ID.
		/// Dfareporting_operatingSystems_get userprofiles/{profileId}/operatingSystems/{dartId}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="dartId">Operating system DART ID.</param>
		/// <returns>Successful response</returns>
		public async Task<OperatingSystem> Dfareporting_operatingSystems_getAsync(string profileId, string dartId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/operatingSystems/"+ (dartId==null? "" : System.Uri.EscapeDataString(dartId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OperatingSystem>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of placement groups, possibly filtered. This method supports paging.
		/// Dfareporting_placementGroups_list userprofiles/{profileId}/placementGroups
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="activeStatus">Select only placements with these active statuses.</param>
		/// <param name="advertiserIds">Select only placement groups that belong to these advertisers.</param>
		/// <param name="campaignIds">Select only placement groups that belong to these campaigns.</param>
		/// <param name="contentCategoryIds">Select only placement groups that are associated with these content categories.</param>
		/// <param name="directorySiteIds">Select only placement groups that are associated with these directory sites.</param>
		/// <param name="ids">Select only placement groups with these IDs.</param>
		/// <param name="maxEndDate">Select only placements or placement groups whose end date is on or before the specified maxEndDate. The date should be formatted as "yyyy-MM-dd".</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="maxStartDate">Select only placements or placement groups whose start date is on or before the specified maxStartDate. The date should be formatted as "yyyy-MM-dd".</param>
		/// <param name="minEndDate">Select only placements or placement groups whose end date is on or after the specified minEndDate. The date should be formatted as "yyyy-MM-dd".</param>
		/// <param name="minStartDate">Select only placements or placement groups whose start date is on or after the specified minStartDate. The date should be formatted as "yyyy-MM-dd".</param>
		/// <param name="pageToken">Value of the nextPageToken from the previous result page.</param>
		/// <param name="placementGroupType">Select only placement groups belonging with this group type. A package is a simple group of placements that acts as a single pricing point for a group of tags. A roadblock is a group of placements that not only acts as a single pricing point but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned placements to be marked as primary for reporting.</param>
		/// <param name="placementStrategyIds">Select only placement groups that are associated with these placement strategies.</param>
		/// <param name="pricingTypes">Select only placement groups with these pricing types.</param>
		/// <param name="searchString">Allows searching for placement groups by name or ID. Wildcards (*) are allowed. For example, "placement*2015" will return placement groups with names like "placement group June 2015", "placement group May 2015", or simply "placements 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placementgroup" will match placement groups with name "my placementgroup", "placementgroup 2015", or simply "placementgroup".</param>
		/// <param name="siteIds">Select only placement groups that are associated with these sites.</param>
		/// <param name="sortField">Field by which to sort the list.</param>
		/// <param name="sortOrder">Order of sorted results.</param>
		/// <returns>Successful response</returns>
		public async Task<PlacementGroupsListResponse> Dfareporting_placementGroups_listAsync(
					string profileId, 
					PlacementActiveStatus[] activeStatus, 
					string[] advertiserIds, 
					string[] campaignIds, 
					string[] contentCategoryIds, 
					string[] directorySiteIds, 
					string[] ids, 
					string maxEndDate, 
					int maxResults, 
					string maxStartDate, 
					string minEndDate, 
					string minStartDate, 
					string pageToken, 
					PlacementGroupPlacementGroupType placementGroupType, 
					string[] placementStrategyIds, 
					PricingSchedulePricingType[] pricingTypes, 
					string searchString, 
					string[] siteIds, 
					Dfareporting_accountUserProfiles_listSortField sortField, 
					SortedDimensionSortOrder sortOrder, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/placementGroups&"+string.Join("&", activeStatus.Select(z => $"activeStatus={z}"))+"&"+string.Join("&", advertiserIds.Select(z => $"advertiserIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", campaignIds.Select(z => $"campaignIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", contentCategoryIds.Select(z => $"contentCategoryIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", directorySiteIds.Select(z => $"directorySiteIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&maxEndDate=" + (maxEndDate==null? "" : System.Uri.EscapeDataString(maxEndDate))+"&maxResults="+maxResults+"&maxStartDate=" + (maxStartDate==null? "" : System.Uri.EscapeDataString(maxStartDate))+"&minEndDate=" + (minEndDate==null? "" : System.Uri.EscapeDataString(minEndDate))+"&minStartDate=" + (minStartDate==null? "" : System.Uri.EscapeDataString(minStartDate))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&placementGroupType=" + placementGroupType+"&"+string.Join("&", placementStrategyIds.Select(z => $"placementStrategyIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", pricingTypes.Select(z => $"pricingTypes={z}"))+"&searchString=" + (searchString==null? "" : System.Uri.EscapeDataString(searchString))+"&"+string.Join("&", siteIds.Select(z => $"siteIds={System.Uri.EscapeDataString(z.ToString())}"))+"&sortField=" + sortField+"&sortOrder=" + sortOrder;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PlacementGroupsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing placement group. This method supports patch semantics.
		/// Dfareporting_placementGroups_patch userprofiles/{profileId}/placementGroups
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Required. Placement ID.</param>
		/// <returns>Successful response</returns>
		public async Task<PlacementGroup> Dfareporting_placementGroups_patchAsync(string profileId, string id, PlacementGroup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/placementGroups&id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PlacementGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new placement group.
		/// Dfareporting_placementGroups_insert userprofiles/{profileId}/placementGroups
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<PlacementGroup> Dfareporting_placementGroups_insertAsync(string profileId, PlacementGroup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/placementGroups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PlacementGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing placement group.
		/// Dfareporting_placementGroups_update userprofiles/{profileId}/placementGroups
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<PlacementGroup> Dfareporting_placementGroups_updateAsync(string profileId, PlacementGroup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/placementGroups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PlacementGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one placement group by ID.
		/// Dfareporting_placementGroups_get userprofiles/{profileId}/placementGroups/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Placement group ID.</param>
		/// <returns>Successful response</returns>
		public async Task<PlacementGroup> Dfareporting_placementGroups_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/placementGroups/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PlacementGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of placement strategies, possibly filtered. This method supports paging.
		/// Dfareporting_placementStrategies_list userprofiles/{profileId}/placementStrategies
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="ids">Select only placement strategies with these IDs.</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="pageToken">Value of the nextPageToken from the previous result page.</param>
		/// <param name="searchString">Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "placementstrategy*2015" will return objects with names like "placementstrategy June 2015", "placementstrategy April 2015", or simply "placementstrategy 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placementstrategy" will match objects with name "my placementstrategy", "placementstrategy 2015", or simply "placementstrategy".</param>
		/// <param name="sortField">Field by which to sort the list.</param>
		/// <param name="sortOrder">Order of sorted results.</param>
		/// <returns>Successful response</returns>
		public async Task<PlacementStrategiesListResponse> Dfareporting_placementStrategies_listAsync(string profileId, string[] ids, int maxResults, string pageToken, string searchString, Dfareporting_accountUserProfiles_listSortField sortField, SortedDimensionSortOrder sortOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/placementStrategies&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&searchString=" + (searchString==null? "" : System.Uri.EscapeDataString(searchString))+"&sortField=" + sortField+"&sortOrder=" + sortOrder;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PlacementStrategiesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing placement strategy. This method supports patch semantics.
		/// Dfareporting_placementStrategies_patch userprofiles/{profileId}/placementStrategies
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Required. PlacementStrategy ID.</param>
		/// <returns>Successful response</returns>
		public async Task<PlacementStrategy> Dfareporting_placementStrategies_patchAsync(string profileId, string id, PlacementStrategy requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/placementStrategies&id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PlacementStrategy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new placement strategy.
		/// Dfareporting_placementStrategies_insert userprofiles/{profileId}/placementStrategies
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<PlacementStrategy> Dfareporting_placementStrategies_insertAsync(string profileId, PlacementStrategy requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/placementStrategies";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PlacementStrategy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing placement strategy.
		/// Dfareporting_placementStrategies_update userprofiles/{profileId}/placementStrategies
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<PlacementStrategy> Dfareporting_placementStrategies_updateAsync(string profileId, PlacementStrategy requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/placementStrategies";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PlacementStrategy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing placement strategy.
		/// Dfareporting_placementStrategies_delete userprofiles/{profileId}/placementStrategies/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Placement strategy ID.</param>
		/// <returns>Successful response</returns>
		public async Task Dfareporting_placementStrategies_deleteAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/placementStrategies/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one placement strategy by ID.
		/// Dfareporting_placementStrategies_get userprofiles/{profileId}/placementStrategies/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Placement strategy ID.</param>
		/// <returns>Successful response</returns>
		public async Task<PlacementStrategy> Dfareporting_placementStrategies_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/placementStrategies/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PlacementStrategy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of placements, possibly filtered. This method supports paging.
		/// Dfareporting_placements_list userprofiles/{profileId}/placements
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="activeStatus">Select only placements with these active statuses.</param>
		/// <param name="advertiserIds">Select only placements that belong to these advertisers.</param>
		/// <param name="campaignIds">Select only placements that belong to these campaigns.</param>
		/// <param name="compatibilities">Select only placements that are associated with these compatibilities. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard.</param>
		/// <param name="contentCategoryIds">Select only placements that are associated with these content categories.</param>
		/// <param name="directorySiteIds">Select only placements that are associated with these directory sites.</param>
		/// <param name="groupIds">Select only placements that belong to these placement groups.</param>
		/// <param name="ids">Select only placements with these IDs.</param>
		/// <param name="maxEndDate">Select only placements or placement groups whose end date is on or before the specified maxEndDate. The date should be formatted as "yyyy-MM-dd".</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="maxStartDate">Select only placements or placement groups whose start date is on or before the specified maxStartDate. The date should be formatted as "yyyy-MM-dd".</param>
		/// <param name="minEndDate">Select only placements or placement groups whose end date is on or after the specified minEndDate. The date should be formatted as "yyyy-MM-dd".</param>
		/// <param name="minStartDate">Select only placements or placement groups whose start date is on or after the specified minStartDate. The date should be formatted as "yyyy-MM-dd".</param>
		/// <param name="pageToken">Value of the nextPageToken from the previous result page.</param>
		/// <param name="paymentSource">Select only placements with this payment source.</param>
		/// <param name="placementStrategyIds">Select only placements that are associated with these placement strategies.</param>
		/// <param name="pricingTypes">Select only placements with these pricing types.</param>
		/// <param name="searchString">Allows searching for placements by name or ID. Wildcards (*) are allowed. For example, "placement*2015" will return placements with names like "placement June 2015", "placement May 2015", or simply "placements 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placement" will match placements with name "my placement", "placement 2015", or simply "placement" .</param>
		/// <param name="siteIds">Select only placements that are associated with these sites.</param>
		/// <param name="sizeIds">Select only placements that are associated with these sizes.</param>
		/// <param name="sortField">Field by which to sort the list.</param>
		/// <param name="sortOrder">Order of sorted results.</param>
		/// <returns>Successful response</returns>
		public async Task<PlacementsListResponse> Dfareporting_placements_listAsync(
					string profileId, 
					PlacementActiveStatus[] activeStatus, 
					string[] advertiserIds, 
					string[] campaignIds, 
					AdCompatibility[] compatibilities, 
					string[] contentCategoryIds, 
					string[] directorySiteIds, 
					string[] groupIds, 
					string[] ids, 
					string maxEndDate, 
					int maxResults, 
					string maxStartDate, 
					string minEndDate, 
					string minStartDate, 
					string pageToken, 
					PlacementPaymentSource paymentSource, 
					string[] placementStrategyIds, 
					PricingSchedulePricingType[] pricingTypes, 
					string searchString, 
					string[] siteIds, 
					string[] sizeIds, 
					Dfareporting_accountUserProfiles_listSortField sortField, 
					SortedDimensionSortOrder sortOrder, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/placements&"+string.Join("&", activeStatus.Select(z => $"activeStatus={z}"))+"&"+string.Join("&", advertiserIds.Select(z => $"advertiserIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", campaignIds.Select(z => $"campaignIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", compatibilities.Select(z => $"compatibilities={z}"))+"&"+string.Join("&", contentCategoryIds.Select(z => $"contentCategoryIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", directorySiteIds.Select(z => $"directorySiteIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", groupIds.Select(z => $"groupIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&maxEndDate=" + (maxEndDate==null? "" : System.Uri.EscapeDataString(maxEndDate))+"&maxResults="+maxResults+"&maxStartDate=" + (maxStartDate==null? "" : System.Uri.EscapeDataString(maxStartDate))+"&minEndDate=" + (minEndDate==null? "" : System.Uri.EscapeDataString(minEndDate))+"&minStartDate=" + (minStartDate==null? "" : System.Uri.EscapeDataString(minStartDate))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&paymentSource=" + paymentSource+"&"+string.Join("&", placementStrategyIds.Select(z => $"placementStrategyIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", pricingTypes.Select(z => $"pricingTypes={z}"))+"&searchString=" + (searchString==null? "" : System.Uri.EscapeDataString(searchString))+"&"+string.Join("&", siteIds.Select(z => $"siteIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", sizeIds.Select(z => $"sizeIds={System.Uri.EscapeDataString(z.ToString())}"))+"&sortField=" + sortField+"&sortOrder=" + sortOrder;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PlacementsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing placement. This method supports patch semantics.
		/// Dfareporting_placements_patch userprofiles/{profileId}/placements
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Required. Placement ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Placement> Dfareporting_placements_patchAsync(string profileId, string id, Placement requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/placements&id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Placement>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new placement.
		/// Dfareporting_placements_insert userprofiles/{profileId}/placements
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Placement> Dfareporting_placements_insertAsync(string profileId, Placement requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/placements";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Placement>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing placement.
		/// Dfareporting_placements_update userprofiles/{profileId}/placements
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Placement> Dfareporting_placements_updateAsync(string profileId, Placement requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/placements";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Placement>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generates tags for a placement.
		/// Dfareporting_placements_generatetags userprofiles/{profileId}/placements/generatetags
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="campaignId">Generate placements belonging to this campaign. This is a required field.</param>
		/// <param name="placementIds">Generate tags for these placements.</param>
		/// <param name="tagFormats">Tag formats to generate for these placements. *Note:* PLACEMENT_TAG_STANDARD can only be generated for 1x1 placements.</param>
		/// <returns>Successful response</returns>
		public async Task<PlacementsGenerateTagsResponse> Dfareporting_placements_generatetagsAsync(string profileId, string campaignId, string[] placementIds, TagDataFormat[] tagFormats, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/placements/generatetags&campaignId=" + (campaignId==null? "" : System.Uri.EscapeDataString(campaignId))+"&"+string.Join("&", placementIds.Select(z => $"placementIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", tagFormats.Select(z => $"tagFormats={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PlacementsGenerateTagsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one placement by ID.
		/// Dfareporting_placements_get userprofiles/{profileId}/placements/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Placement ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Placement> Dfareporting_placements_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/placements/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Placement>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of platform types.
		/// Dfareporting_platformTypes_list userprofiles/{profileId}/platformTypes
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<PlatformTypesListResponse> Dfareporting_platformTypes_listAsync(string profileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/platformTypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PlatformTypesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one platform type by ID.
		/// Dfareporting_platformTypes_get userprofiles/{profileId}/platformTypes/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Platform type ID.</param>
		/// <returns>Successful response</returns>
		public async Task<PlatformType> Dfareporting_platformTypes_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/platformTypes/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PlatformType>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of postal codes.
		/// Dfareporting_postalCodes_list userprofiles/{profileId}/postalCodes
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<PostalCodesListResponse> Dfareporting_postalCodes_listAsync(string profileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/postalCodes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PostalCodesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one postal code by ID.
		/// Dfareporting_postalCodes_get userprofiles/{profileId}/postalCodes/{code}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="code">Postal code ID.</param>
		/// <returns>Successful response</returns>
		public async Task<PostalCode> Dfareporting_postalCodes_getAsync(string profileId, string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/postalCodes/"+ (code==null? "" : System.Uri.EscapeDataString(code));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PostalCode>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of projects, possibly filtered. This method supports paging .
		/// Dfareporting_projects_list userprofiles/{profileId}/projects
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="advertiserIds">Select only projects with these advertiser IDs.</param>
		/// <param name="ids">Select only projects with these IDs.</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="pageToken">Value of the nextPageToken from the previous result page.</param>
		/// <param name="searchString">Allows searching for projects by name or ID. Wildcards (*) are allowed. For example, "project*2015" will return projects with names like "project June 2015", "project April 2015", or simply "project 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "project" will match projects with name "my project", "project 2015", or simply "project".</param>
		/// <param name="sortField">Field by which to sort the list.</param>
		/// <param name="sortOrder">Order of sorted results.</param>
		/// <returns>Successful response</returns>
		public async Task<ProjectsListResponse> Dfareporting_projects_listAsync(string profileId, string[] advertiserIds, string[] ids, int maxResults, string pageToken, string searchString, Dfareporting_accountUserProfiles_listSortField sortField, SortedDimensionSortOrder sortOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/projects&"+string.Join("&", advertiserIds.Select(z => $"advertiserIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&searchString=" + (searchString==null? "" : System.Uri.EscapeDataString(searchString))+"&sortField=" + sortField+"&sortOrder=" + sortOrder;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProjectsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one project by ID.
		/// Dfareporting_projects_get userprofiles/{profileId}/projects/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Project ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Project> Dfareporting_projects_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/projects/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Project>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of inventory items, possibly filtered. This method supports paging.
		/// Dfareporting_inventoryItems_list userprofiles/{profileId}/projects/{projectId}/inventoryItems
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="projectId">Project ID for order documents.</param>
		/// <param name="ids">Select only inventory items with these IDs.</param>
		/// <param name="inPlan">Select only inventory items that are in plan.</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="orderId">Select only inventory items that belong to specified orders.</param>
		/// <param name="pageToken">Value of the nextPageToken from the previous result page.</param>
		/// <param name="siteId">Select only inventory items that are associated with these sites.</param>
		/// <param name="sortField">Field by which to sort the list.</param>
		/// <param name="sortOrder">Order of sorted results.</param>
		/// <param name="type">Select only inventory items with this type.</param>
		/// <returns>Successful response</returns>
		public async Task<InventoryItemsListResponse> Dfareporting_inventoryItems_listAsync(string profileId, string projectId, string[] ids, bool inPlan, int maxResults, string[] orderId, string pageToken, string[] siteId, Dfareporting_accountUserProfiles_listSortField sortField, SortedDimensionSortOrder sortOrder, InventoryItemType type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/inventoryItems&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&inPlan="+inPlan+"&maxResults="+maxResults+"&"+string.Join("&", orderId.Select(z => $"orderId={System.Uri.EscapeDataString(z.ToString())}"))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&"+string.Join("&", siteId.Select(z => $"siteId={System.Uri.EscapeDataString(z.ToString())}"))+"&sortField=" + sortField+"&sortOrder=" + sortOrder+"&type=" + type;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InventoryItemsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one inventory item by ID.
		/// Dfareporting_inventoryItems_get userprofiles/{profileId}/projects/{projectId}/inventoryItems/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="projectId">Project ID for order documents.</param>
		/// <param name="id">Inventory item ID.</param>
		/// <returns>Successful response</returns>
		public async Task<InventoryItem> Dfareporting_inventoryItems_getAsync(string profileId, string projectId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/inventoryItems/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InventoryItem>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of orders, possibly filtered. This method supports paging.
		/// Dfareporting_orders_list userprofiles/{profileId}/projects/{projectId}/orders
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="projectId">Project ID for orders.</param>
		/// <param name="ids">Select only orders with these IDs.</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="pageToken">Value of the nextPageToken from the previous result page.</param>
		/// <param name="searchString">Allows searching for orders by name or ID. Wildcards (*) are allowed. For example, "order*2015" will return orders with names like "order June 2015", "order April 2015", or simply "order 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "order" will match orders with name "my order", "order 2015", or simply "order".</param>
		/// <param name="siteId">Select only orders that are associated with these site IDs.</param>
		/// <param name="sortField">Field by which to sort the list.</param>
		/// <param name="sortOrder">Order of sorted results.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersListResponse> Dfareporting_orders_listAsync(string profileId, string projectId, string[] ids, int maxResults, string pageToken, string searchString, string[] siteId, Dfareporting_accountUserProfiles_listSortField sortField, SortedDimensionSortOrder sortOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/orders&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&searchString=" + (searchString==null? "" : System.Uri.EscapeDataString(searchString))+"&"+string.Join("&", siteId.Select(z => $"siteId={System.Uri.EscapeDataString(z.ToString())}"))+"&sortField=" + sortField+"&sortOrder=" + sortOrder;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OrdersListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one order by ID.
		/// Dfareporting_orders_get userprofiles/{profileId}/projects/{projectId}/orders/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="projectId">Project ID for orders.</param>
		/// <param name="id">Order ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Order> Dfareporting_orders_getAsync(string profileId, string projectId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/orders/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Order>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of regions.
		/// Dfareporting_regions_list userprofiles/{profileId}/regions
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<RegionsListResponse> Dfareporting_regions_listAsync(string profileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/regions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RegionsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing RemarketingListShare. This method supports patch semantics.
		/// Dfareporting_remarketingListShares_patch userprofiles/{profileId}/remarketingListShares
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Required. RemarketingList ID.</param>
		/// <returns>Successful response</returns>
		public async Task<RemarketingListShare> Dfareporting_remarketingListShares_patchAsync(string profileId, string id, RemarketingListShare requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/remarketingListShares&id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RemarketingListShare>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing remarketing list share.
		/// Dfareporting_remarketingListShares_update userprofiles/{profileId}/remarketingListShares
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<RemarketingListShare> Dfareporting_remarketingListShares_updateAsync(string profileId, RemarketingListShare requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/remarketingListShares";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RemarketingListShare>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one remarketing list share by remarketing list ID.
		/// Dfareporting_remarketingListShares_get userprofiles/{profileId}/remarketingListShares/{remarketingListId}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="remarketingListId">Remarketing list ID.</param>
		/// <returns>Successful response</returns>
		public async Task<RemarketingListShare> Dfareporting_remarketingListShares_getAsync(string profileId, string remarketingListId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/remarketingListShares/"+ (remarketingListId==null? "" : System.Uri.EscapeDataString(remarketingListId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RemarketingListShare>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of remarketing lists, possibly filtered. This method supports paging.
		/// Dfareporting_remarketingLists_list userprofiles/{profileId}/remarketingLists
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="advertiserId">Required. Select only remarketing lists owned by this advertiser.</param>
		/// <param name="active">Select only active or only inactive remarketing lists.</param>
		/// <param name="floodlightActivityId">Select only remarketing lists that have this floodlight activity ID.</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="name">Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "remarketing list*2015" will return objects with names like "remarketing list June 2015", "remarketing list April 2015", or simply "remarketing list 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "remarketing list" will match objects with name "my remarketing list", "remarketing list 2015", or simply "remarketing list".</param>
		/// <param name="pageToken">Value of the nextPageToken from the previous result page.</param>
		/// <param name="sortField">Field by which to sort the list.</param>
		/// <param name="sortOrder">Order of sorted results.</param>
		/// <returns>Successful response</returns>
		public async Task<RemarketingListsListResponse> Dfareporting_remarketingLists_listAsync(string profileId, string advertiserId, bool active, string floodlightActivityId, int maxResults, string name, string pageToken, Dfareporting_accountUserProfiles_listSortField sortField, SortedDimensionSortOrder sortOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/remarketingLists&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&active="+active+"&floodlightActivityId=" + (floodlightActivityId==null? "" : System.Uri.EscapeDataString(floodlightActivityId))+"&maxResults="+maxResults+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&sortField=" + sortField+"&sortOrder=" + sortOrder;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RemarketingListsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing RemarketingList. This method supports patch semantics.
		/// Dfareporting_remarketingLists_patch userprofiles/{profileId}/remarketingLists
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Required. RemarketingList ID.</param>
		/// <returns>Successful response</returns>
		public async Task<RemarketingList> Dfareporting_remarketingLists_patchAsync(string profileId, string id, RemarketingList requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/remarketingLists&id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RemarketingList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new remarketing list.
		/// Dfareporting_remarketingLists_insert userprofiles/{profileId}/remarketingLists
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<RemarketingList> Dfareporting_remarketingLists_insertAsync(string profileId, RemarketingList requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/remarketingLists";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RemarketingList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing remarketing list.
		/// Dfareporting_remarketingLists_update userprofiles/{profileId}/remarketingLists
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<RemarketingList> Dfareporting_remarketingLists_updateAsync(string profileId, RemarketingList requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/remarketingLists";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RemarketingList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one remarketing list by ID.
		/// Dfareporting_remarketingLists_get userprofiles/{profileId}/remarketingLists/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Remarketing list ID.</param>
		/// <returns>Successful response</returns>
		public async Task<RemarketingList> Dfareporting_remarketingLists_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/remarketingLists/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RemarketingList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves list of reports.
		/// Dfareporting_reports_list userprofiles/{profileId}/reports
		/// </summary>
		/// <param name="profileId">The Campaign Manager 360 user profile ID.</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="pageToken">The value of the nextToken from the previous result page.</param>
		/// <param name="scope">The scope that defines which results are returned.</param>
		/// <param name="sortField">The field by which to sort the list.</param>
		/// <param name="sortOrder">Order of sorted results.</param>
		/// <returns>Successful response</returns>
		public async Task<ReportList> Dfareporting_reports_listAsync(string profileId, int maxResults, string pageToken, Dfareporting_reports_listScope scope, Dfareporting_reports_listSortField sortField, SortedDimensionSortOrder sortOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/reports&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&scope=" + scope+"&sortField=" + sortField+"&sortOrder=" + sortOrder;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ReportList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a report.
		/// Dfareporting_reports_insert userprofiles/{profileId}/reports
		/// </summary>
		/// <param name="profileId">The Campaign Manager 360 user profile ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Report> Dfareporting_reports_insertAsync(string profileId, Report requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/reports";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Report>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the fields that are compatible to be selected in the respective sections of a report criteria, given the fields already selected in the input report and user permissions.
		/// Dfareporting_reports_compatibleFields_query userprofiles/{profileId}/reports/compatiblefields/query
		/// </summary>
		/// <param name="profileId">The Campaign Manager 360 user profile ID.</param>
		/// <returns>Successful response</returns>
		public async Task<CompatibleFields> Dfareporting_reports_compatibleFields_queryAsync(string profileId, Report requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/reports/compatiblefields/query";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CompatibleFields>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a report by its ID.
		/// Dfareporting_reports_delete userprofiles/{profileId}/reports/{reportId}
		/// </summary>
		/// <param name="profileId">The Campaign Manager 360 user profile ID.</param>
		/// <param name="reportId">The ID of the report.</param>
		/// <returns>Successful response</returns>
		public async Task Dfareporting_reports_deleteAsync(string profileId, string reportId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/reports/"+ (reportId==null? "" : System.Uri.EscapeDataString(reportId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a report by its ID.
		/// Dfareporting_reports_get userprofiles/{profileId}/reports/{reportId}
		/// </summary>
		/// <param name="profileId">The Campaign Manager 360 user profile ID.</param>
		/// <param name="reportId">The ID of the report.</param>
		/// <returns>Successful response</returns>
		public async Task<Report> Dfareporting_reports_getAsync(string profileId, string reportId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/reports/"+ (reportId==null? "" : System.Uri.EscapeDataString(reportId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Report>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing report. This method supports patch semantics.
		/// Dfareporting_reports_patch userprofiles/{profileId}/reports/{reportId}
		/// </summary>
		/// <param name="profileId">The Campaign Manager 360 user profile ID.</param>
		/// <param name="reportId">The ID of the report.</param>
		/// <returns>Successful response</returns>
		public async Task<Report> Dfareporting_reports_patchAsync(string profileId, string reportId, Report requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/reports/"+ (reportId==null? "" : System.Uri.EscapeDataString(reportId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Report>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a report.
		/// Dfareporting_reports_update userprofiles/{profileId}/reports/{reportId}
		/// </summary>
		/// <param name="profileId">The Campaign Manager 360 user profile ID.</param>
		/// <param name="reportId">The ID of the report.</param>
		/// <returns>Successful response</returns>
		public async Task<Report> Dfareporting_reports_updateAsync(string profileId, string reportId, Report requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/reports/"+ (reportId==null? "" : System.Uri.EscapeDataString(reportId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Report>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists files for a report.
		/// Dfareporting_reports_files_list userprofiles/{profileId}/reports/{reportId}/files
		/// </summary>
		/// <param name="profileId">The Campaign Manager 360 user profile ID.</param>
		/// <param name="reportId">The ID of the parent report.</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="pageToken">The value of the nextToken from the previous result page.</param>
		/// <param name="sortField">The field by which to sort the list.</param>
		/// <param name="sortOrder">Order of sorted results.</param>
		/// <returns>Successful response</returns>
		public async Task<FileList> Dfareporting_reports_files_listAsync(string profileId, string reportId, int maxResults, string pageToken, Dfareporting_files_listSortField sortField, SortedDimensionSortOrder sortOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/reports/"+ (reportId==null? "" : System.Uri.EscapeDataString(reportId))+"/files&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&sortField=" + sortField+"&sortOrder=" + sortOrder;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FileList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a report file by its report ID and file ID. This method supports media download.
		/// Dfareporting_reports_files_get userprofiles/{profileId}/reports/{reportId}/files/{fileId}
		/// </summary>
		/// <param name="profileId">The Campaign Manager 360 user profile ID.</param>
		/// <param name="reportId">The ID of the report.</param>
		/// <param name="fileId">The ID of the report file.</param>
		/// <returns>Successful response</returns>
		public async Task<File> Dfareporting_reports_files_getAsync(string profileId, string reportId, string fileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/reports/"+ (reportId==null? "" : System.Uri.EscapeDataString(reportId))+"/files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<File>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Runs a report.
		/// Dfareporting_reports_run userprofiles/{profileId}/reports/{reportId}/run
		/// </summary>
		/// <param name="profileId">The Campaign Manager 360 user profile ID.</param>
		/// <param name="reportId">The ID of the report.</param>
		/// <param name="synchronous">If set and true, tries to run the report synchronously.</param>
		/// <returns>Successful response</returns>
		public async Task<File> Dfareporting_reports_runAsync(string profileId, string reportId, bool synchronous, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/reports/"+ (reportId==null? "" : System.Uri.EscapeDataString(reportId))+"/run&synchronous="+synchronous;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<File>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of sites, possibly filtered. This method supports paging.
		/// Dfareporting_sites_list userprofiles/{profileId}/sites
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="acceptsInStreamVideoPlacements">This search filter is no longer supported and will have no effect on the results returned.</param>
		/// <param name="acceptsInterstitialPlacements">This search filter is no longer supported and will have no effect on the results returned.</param>
		/// <param name="acceptsPublisherPaidPlacements">Select only sites that accept publisher paid placements.</param>
		/// <param name="adWordsSite">Select only AdWords sites.</param>
		/// <param name="approved">Select only approved sites.</param>
		/// <param name="campaignIds">Select only sites with these campaign IDs.</param>
		/// <param name="directorySiteIds">Select only sites with these directory site IDs.</param>
		/// <param name="ids">Select only sites with these IDs.</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="pageToken">Value of the nextPageToken from the previous result page.</param>
		/// <param name="searchString">Allows searching for objects by name, ID or keyName. Wildcards (*) are allowed. For example, "site*2015" will return objects with names like "site June 2015", "site April 2015", or simply "site 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "site" will match objects with name "my site", "site 2015", or simply "site".</param>
		/// <param name="sortField">Field by which to sort the list.</param>
		/// <param name="sortOrder">Order of sorted results.</param>
		/// <param name="subaccountId">Select only sites with this subaccount ID.</param>
		/// <param name="unmappedSite">Select only sites that have not been mapped to a directory site.</param>
		/// <returns>Successful response</returns>
		public async Task<SitesListResponse> Dfareporting_sites_listAsync(
					string profileId, 
					bool acceptsInStreamVideoPlacements, 
					bool acceptsInterstitialPlacements, 
					bool acceptsPublisherPaidPlacements, 
					bool adWordsSite, 
					bool approved, 
					string[] campaignIds, 
					string[] directorySiteIds, 
					string[] ids, 
					int maxResults, 
					string pageToken, 
					string searchString, 
					Dfareporting_accountUserProfiles_listSortField sortField, 
					SortedDimensionSortOrder sortOrder, 
					string subaccountId, 
					bool unmappedSite, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/sites&acceptsInStreamVideoPlacements="+acceptsInStreamVideoPlacements+"&acceptsInterstitialPlacements="+acceptsInterstitialPlacements+"&acceptsPublisherPaidPlacements="+acceptsPublisherPaidPlacements+"&adWordsSite="+adWordsSite+"&approved="+approved+"&"+string.Join("&", campaignIds.Select(z => $"campaignIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", directorySiteIds.Select(z => $"directorySiteIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&searchString=" + (searchString==null? "" : System.Uri.EscapeDataString(searchString))+"&sortField=" + sortField+"&sortOrder=" + sortOrder+"&subaccountId=" + (subaccountId==null? "" : System.Uri.EscapeDataString(subaccountId))+"&unmappedSite="+unmappedSite;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SitesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing site. This method supports patch semantics.
		/// Dfareporting_sites_patch userprofiles/{profileId}/sites
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Required. Site ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Site> Dfareporting_sites_patchAsync(string profileId, string id, Site requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/sites&id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Site>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new site.
		/// Dfareporting_sites_insert userprofiles/{profileId}/sites
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Site> Dfareporting_sites_insertAsync(string profileId, Site requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/sites";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Site>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing site.
		/// Dfareporting_sites_update userprofiles/{profileId}/sites
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Site> Dfareporting_sites_updateAsync(string profileId, Site requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/sites";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Site>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one site by ID.
		/// Dfareporting_sites_get userprofiles/{profileId}/sites/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Site ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Site> Dfareporting_sites_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/sites/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Site>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of sizes, possibly filtered. Retrieved sizes are globally unique and may include values not currently in use by your account. Due to this, the list of sizes returned by this method may differ from the list seen in the Trafficking UI.
		/// Dfareporting_sizes_list userprofiles/{profileId}/sizes
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="height">Select only sizes with this height.</param>
		/// <param name="iabStandard">Select only IAB standard sizes.</param>
		/// <param name="ids">Select only sizes with these IDs.</param>
		/// <param name="width">Select only sizes with this width.</param>
		/// <returns>Successful response</returns>
		public async Task<SizesListResponse> Dfareporting_sizes_listAsync(string profileId, int height, bool iabStandard, string[] ids, int width, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/sizes&height="+height+"&iabStandard="+iabStandard+"&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&width="+width;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SizesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new size.
		/// Dfareporting_sizes_insert userprofiles/{profileId}/sizes
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Size> Dfareporting_sizes_insertAsync(string profileId, Size requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/sizes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Size>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one size by ID.
		/// Dfareporting_sizes_get userprofiles/{profileId}/sizes/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Size ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Size> Dfareporting_sizes_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/sizes/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Size>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of subaccounts, possibly filtered. This method supports paging.
		/// Dfareporting_subaccounts_list userprofiles/{profileId}/subaccounts
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="ids">Select only subaccounts with these IDs.</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="pageToken">Value of the nextPageToken from the previous result page.</param>
		/// <param name="searchString">Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "subaccount*2015" will return objects with names like "subaccount June 2015", "subaccount April 2015", or simply "subaccount 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "subaccount" will match objects with name "my subaccount", "subaccount 2015", or simply "subaccount" .</param>
		/// <param name="sortField">Field by which to sort the list.</param>
		/// <param name="sortOrder">Order of sorted results.</param>
		/// <returns>Successful response</returns>
		public async Task<SubaccountsListResponse> Dfareporting_subaccounts_listAsync(string profileId, string[] ids, int maxResults, string pageToken, string searchString, Dfareporting_accountUserProfiles_listSortField sortField, SortedDimensionSortOrder sortOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/subaccounts&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&searchString=" + (searchString==null? "" : System.Uri.EscapeDataString(searchString))+"&sortField=" + sortField+"&sortOrder=" + sortOrder;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SubaccountsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing subaccount. This method supports patch semantics.
		/// Dfareporting_subaccounts_patch userprofiles/{profileId}/subaccounts
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Required. Subaccount ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Subaccount> Dfareporting_subaccounts_patchAsync(string profileId, string id, Subaccount requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/subaccounts&id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Subaccount>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new subaccount.
		/// Dfareporting_subaccounts_insert userprofiles/{profileId}/subaccounts
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Subaccount> Dfareporting_subaccounts_insertAsync(string profileId, Subaccount requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/subaccounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Subaccount>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing subaccount.
		/// Dfareporting_subaccounts_update userprofiles/{profileId}/subaccounts
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Subaccount> Dfareporting_subaccounts_updateAsync(string profileId, Subaccount requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/subaccounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Subaccount>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one subaccount by ID.
		/// Dfareporting_subaccounts_get userprofiles/{profileId}/subaccounts/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Subaccount ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Subaccount> Dfareporting_subaccounts_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/subaccounts/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Subaccount>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of targetable remarketing lists, possibly filtered. This method supports paging.
		/// Dfareporting_targetableRemarketingLists_list userprofiles/{profileId}/targetableRemarketingLists
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="advertiserId">Required. Select only targetable remarketing lists targetable by these advertisers.</param>
		/// <param name="active">Select only active or only inactive targetable remarketing lists.</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="name">Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "remarketing list*2015" will return objects with names like "remarketing list June 2015", "remarketing list April 2015", or simply "remarketing list 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "remarketing list" will match objects with name "my remarketing list", "remarketing list 2015", or simply "remarketing list".</param>
		/// <param name="pageToken">Value of the nextPageToken from the previous result page.</param>
		/// <param name="sortField">Field by which to sort the list.</param>
		/// <param name="sortOrder">Order of sorted results.</param>
		/// <returns>Successful response</returns>
		public async Task<TargetableRemarketingListsListResponse> Dfareporting_targetableRemarketingLists_listAsync(string profileId, string advertiserId, bool active, int maxResults, string name, string pageToken, Dfareporting_accountUserProfiles_listSortField sortField, SortedDimensionSortOrder sortOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/targetableRemarketingLists&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&active="+active+"&maxResults="+maxResults+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&sortField=" + sortField+"&sortOrder=" + sortOrder;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TargetableRemarketingListsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one remarketing list by ID.
		/// Dfareporting_targetableRemarketingLists_get userprofiles/{profileId}/targetableRemarketingLists/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Remarketing list ID.</param>
		/// <returns>Successful response</returns>
		public async Task<TargetableRemarketingList> Dfareporting_targetableRemarketingLists_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/targetableRemarketingLists/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TargetableRemarketingList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of targeting templates, optionally filtered. This method supports paging.
		/// Dfareporting_targetingTemplates_list userprofiles/{profileId}/targetingTemplates
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="advertiserId">Select only targeting templates with this advertiser ID.</param>
		/// <param name="ids">Select only targeting templates with these IDs.</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="pageToken">Value of the nextPageToken from the previous result page.</param>
		/// <param name="searchString">Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "template*2015" will return objects with names like "template June 2015", "template April 2015", or simply "template 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "template" will match objects with name "my template", "template 2015", or simply "template".</param>
		/// <param name="sortField">Field by which to sort the list.</param>
		/// <param name="sortOrder">Order of sorted results.</param>
		/// <returns>Successful response</returns>
		public async Task<TargetingTemplatesListResponse> Dfareporting_targetingTemplates_listAsync(string profileId, string advertiserId, string[] ids, int maxResults, string pageToken, string searchString, Dfareporting_accountUserProfiles_listSortField sortField, SortedDimensionSortOrder sortOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/targetingTemplates&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&searchString=" + (searchString==null? "" : System.Uri.EscapeDataString(searchString))+"&sortField=" + sortField+"&sortOrder=" + sortOrder;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TargetingTemplatesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing targeting template. This method supports patch semantics.
		/// Dfareporting_targetingTemplates_patch userprofiles/{profileId}/targetingTemplates
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Required. RemarketingList ID.</param>
		/// <returns>Successful response</returns>
		public async Task<TargetingTemplate> Dfareporting_targetingTemplates_patchAsync(string profileId, string id, TargetingTemplate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/targetingTemplates&id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TargetingTemplate>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new targeting template.
		/// Dfareporting_targetingTemplates_insert userprofiles/{profileId}/targetingTemplates
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<TargetingTemplate> Dfareporting_targetingTemplates_insertAsync(string profileId, TargetingTemplate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/targetingTemplates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TargetingTemplate>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing targeting template.
		/// Dfareporting_targetingTemplates_update userprofiles/{profileId}/targetingTemplates
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<TargetingTemplate> Dfareporting_targetingTemplates_updateAsync(string profileId, TargetingTemplate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/targetingTemplates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TargetingTemplate>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one targeting template by ID.
		/// Dfareporting_targetingTemplates_get userprofiles/{profileId}/targetingTemplates/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Targeting template ID.</param>
		/// <returns>Successful response</returns>
		public async Task<TargetingTemplate> Dfareporting_targetingTemplates_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/targetingTemplates/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TargetingTemplate>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of all supported user role permission groups.
		/// Dfareporting_userRolePermissionGroups_list userprofiles/{profileId}/userRolePermissionGroups
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<UserRolePermissionGroupsListResponse> Dfareporting_userRolePermissionGroups_listAsync(string profileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/userRolePermissionGroups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserRolePermissionGroupsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one user role permission group by ID.
		/// Dfareporting_userRolePermissionGroups_get userprofiles/{profileId}/userRolePermissionGroups/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">User role permission group ID.</param>
		/// <returns>Successful response</returns>
		public async Task<UserRolePermissionGroup> Dfareporting_userRolePermissionGroups_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/userRolePermissionGroups/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserRolePermissionGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of user role permissions, possibly filtered.
		/// Dfareporting_userRolePermissions_list userprofiles/{profileId}/userRolePermissions
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="ids">Select only user role permissions with these IDs.</param>
		/// <returns>Successful response</returns>
		public async Task<UserRolePermissionsListResponse> Dfareporting_userRolePermissions_listAsync(string profileId, string[] ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/userRolePermissions&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserRolePermissionsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one user role permission by ID.
		/// Dfareporting_userRolePermissions_get userprofiles/{profileId}/userRolePermissions/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">User role permission ID.</param>
		/// <returns>Successful response</returns>
		public async Task<UserRolePermission> Dfareporting_userRolePermissions_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/userRolePermissions/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserRolePermission>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of user roles, possibly filtered. This method supports paging.
		/// Dfareporting_userRoles_list userprofiles/{profileId}/userRoles
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="accountUserRoleOnly">Select only account level user roles not associated with any specific subaccount.</param>
		/// <param name="ids">Select only user roles with the specified IDs.</param>
		/// <param name="maxResults">Maximum number of results to return.</param>
		/// <param name="pageToken">Value of the nextPageToken from the previous result page.</param>
		/// <param name="searchString">Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "userrole*2015" will return objects with names like "userrole June 2015", "userrole April 2015", or simply "userrole 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "userrole" will match objects with name "my userrole", "userrole 2015", or simply "userrole".</param>
		/// <param name="sortField">Field by which to sort the list.</param>
		/// <param name="sortOrder">Order of sorted results.</param>
		/// <param name="subaccountId">Select only user roles that belong to this subaccount.</param>
		/// <returns>Successful response</returns>
		public async Task<UserRolesListResponse> Dfareporting_userRoles_listAsync(string profileId, bool accountUserRoleOnly, string[] ids, int maxResults, string pageToken, string searchString, Dfareporting_accountUserProfiles_listSortField sortField, SortedDimensionSortOrder sortOrder, string subaccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/userRoles&accountUserRoleOnly="+accountUserRoleOnly+"&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&searchString=" + (searchString==null? "" : System.Uri.EscapeDataString(searchString))+"&sortField=" + sortField+"&sortOrder=" + sortOrder+"&subaccountId=" + (subaccountId==null? "" : System.Uri.EscapeDataString(subaccountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserRolesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing user role. This method supports patch semantics.
		/// Dfareporting_userRoles_patch userprofiles/{profileId}/userRoles
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Required. UserRole ID.</param>
		/// <returns>Successful response</returns>
		public async Task<UserRole> Dfareporting_userRoles_patchAsync(string profileId, string id, UserRole requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/userRoles&id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserRole>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new user role.
		/// Dfareporting_userRoles_insert userprofiles/{profileId}/userRoles
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<UserRole> Dfareporting_userRoles_insertAsync(string profileId, UserRole requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/userRoles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserRole>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing user role.
		/// Dfareporting_userRoles_update userprofiles/{profileId}/userRoles
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<UserRole> Dfareporting_userRoles_updateAsync(string profileId, UserRole requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/userRoles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserRole>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing user role.
		/// Dfareporting_userRoles_delete userprofiles/{profileId}/userRoles/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">User role ID.</param>
		/// <returns>Successful response</returns>
		public async Task Dfareporting_userRoles_deleteAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/userRoles/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one user role by ID.
		/// Dfareporting_userRoles_get userprofiles/{profileId}/userRoles/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">User role ID.</param>
		/// <returns>Successful response</returns>
		public async Task<UserRole> Dfareporting_userRoles_getAsync(string profileId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/userRoles/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserRole>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists available video formats.
		/// Dfareporting_videoFormats_list userprofiles/{profileId}/videoFormats
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <returns>Successful response</returns>
		public async Task<VideoFormatsListResponse> Dfareporting_videoFormats_listAsync(string profileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/videoFormats";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<VideoFormatsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one video format by ID.
		/// Dfareporting_videoFormats_get userprofiles/{profileId}/videoFormats/{id}
		/// </summary>
		/// <param name="profileId">User profile ID associated with this request.</param>
		/// <param name="id">Video format ID.</param>
		/// <returns>Successful response</returns>
		public async Task<VideoFormat> Dfareporting_videoFormats_getAsync(string profileId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userprofiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/videoFormats/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<VideoFormat>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Dfareporting_accountUserProfiles_listSortField
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAME = 1,
	}
	
	public enum Dfareporting_changeLogs_listAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTION_CREATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTION_UPDATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTION_DELETE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTION_ENABLE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTION_DISABLE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTION_ADD = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTION_REMOVE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTION_MARK_AS_DEFAULT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTION_ASSOCIATE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTION_ASSIGN = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTION_UNASSIGN = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTION_SEND = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTION_LINK = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTION_UNLINK = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTION_PUSH = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTION_EMAIL_TAGS = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTION_SHARE = 16,
	}
	
	public enum Dfareporting_changeLogs_listObjectType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_ADVERTISER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_FLOODLIGHT_CONFIGURATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_AD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_FLOODLIGHT_ACTVITY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_CAMPAIGN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_FLOODLIGHT_ACTIVITY_GROUP = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_CREATIVE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_PLACEMENT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_DFA_SITE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_USER_ROLE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_USER_PROFILE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_ADVERTISER_GROUP = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_ACCOUNT = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_SUBACCOUNT = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_RICHMEDIA_CREATIVE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_INSTREAM_CREATIVE = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_MEDIA_ORDER = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_CONTENT_CATEGORY = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_PLACEMENT_STRATEGY = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_SD_SITE = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_SIZE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_CREATIVE_GROUP = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_CREATIVE_ASSET = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_USER_PROFILE_FILTER = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_LANDING_PAGE = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_CREATIVE_FIELD = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_REMARKETING_LIST = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_PROVIDED_LIST_CLIENT = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_EVENT_TAG = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_CREATIVE_BUNDLE = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_BILLING_ACCOUNT_GROUP = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_BILLING_FEATURE = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_RATE_CARD = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_ACCOUNT_BILLING_FEATURE = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_BILLING_MINIMUM_FEE = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_BILLING_PROFILE = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_PLAYSTORE_LINK = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_TARGETING_TEMPLATE = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_SEARCH_LIFT_STUDY = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_FLOODLIGHT_DV360_LINK = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_ADVERTISER_CUSTOMER_LINK = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_CONVERSION_DOMAIN = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_ACCOUNT_CONVERSION_DOMAIN = 42,
	}
	
	public enum Dfareporting_creativeFieldValues_listSortField
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALUE = 1,
	}
	
	public enum Dfareporting_files_listScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MINE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHARED_WITH_ME = 2,
	}
	
	public enum Dfareporting_files_listSortField
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_MODIFIED_TIME = 1,
	}
	
	public enum Dfareporting_reports_listScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MINE = 1,
	}
	
	public enum Dfareporting_reports_listSortField
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_MODIFIED_TIME = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAME = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
