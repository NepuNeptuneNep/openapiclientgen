//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Acl
	{
		
		/// <summary>
		/// Description of the access granted, suitable for display.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The list of access entries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public PlusAclentryResource[] Items { get; set; }
		
		/// <summary>
		/// Identifies this resource as a collection of access controls. Value: "plus#acl".
		/// </summary>
		[System.ComponentModel.DefaultValue("plus#acl")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "plus#acl";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlusAclentryResource
	{
		
		/// <summary>
		/// A descriptive name for this entry. Suitable for display.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The ID of the entry. For entries of type "person" or "circle", this is the ID of the resource. For other types, this property is not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The type of entry describing to whom access is granted. Possible values are:  
		///- "person" - Access to an individual. 
		///- "circle" - Access to members of a circle. 
		///- "myCircles" - Access to members of all the person's circles. 
		///- "extendedCircles" - Access to members of all the person's circles, plus all of the people in their circles. 
		///- "domain" - Access to members of the person's Google Apps domain. 
		///- "public" - Access to anyone on the web.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Activity
	{
		
		[System.Runtime.Serialization.DataMember(Name="access")]
		public Acl Access { get; set; }
		
		/// <summary>
		/// The person who performed this activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actor")]
		public ActivityActor Actor { get; set; }
		
		/// <summary>
		/// Street address where this activity occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Additional content added by the person who shared this activity, applicable only when resharing an activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotation")]
		public string Annotation { get; set; }
		
		/// <summary>
		/// If this activity is a crosspost from another system, this property specifies the ID of the original activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crosspostSource")]
		public string CrosspostSource { get; set; }
		
		/// <summary>
		/// ETag of this response for caching purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Latitude and longitude where this activity occurred. Format is latitude followed by longitude, space separated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geocode")]
		public string Geocode { get; set; }
		
		/// <summary>
		/// The ID of this activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies this resource as an activity. Value: "plus#activity".
		/// </summary>
		[System.ComponentModel.DefaultValue("plus#activity")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "plus#activity";
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Place Location { get; set; }
		
		/// <summary>
		/// The object of this activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="object")]
		public ActivityObject Object { get; set; }
		
		/// <summary>
		/// ID of the place where this activity occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placeId")]
		public string PlaceId { get; set; }
		
		/// <summary>
		/// Name of the place where this activity occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placeName")]
		public string PlaceName { get; set; }
		
		/// <summary>
		/// The service provider that initially published this activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public ActivityProvider Provider { get; set; }
		
		/// <summary>
		/// The time at which this activity was initially published. Formatted as an RFC 3339 timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="published")]
		public System.Nullable<System.DateTimeOffset> Published { get; set; }
		
		/// <summary>
		/// Radius, in meters, of the region where this activity occurred, centered at the latitude and longitude identified in geocode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="radius")]
		public string Radius { get; set; }
		
		/// <summary>
		/// Title of this activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The time at which this activity was last updated. Formatted as an RFC 3339 timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
		
		/// <summary>
		/// The link to this activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// This activity's verb, which indicates the action that was performed. Possible values include, but are not limited to, the following values:  
		///- "post" - Publish content to the stream. 
		///- "share" - Reshare an activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verb")]
		public string Verb { get; set; }
	}
	
	public class ActivityActor
	{
		
		/// <summary>
		/// Actor info specific to particular clients.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientSpecificActorInfo")]
		public ActivityActorClientSpecificActorInfo ClientSpecificActorInfo { get; set; }
		
		/// <summary>
		/// The name of the actor, suitable for display.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The ID of the actor's Person resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The image representation of the actor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public ActivityActorImage Image { get; set; }
		
		/// <summary>
		/// An object representation of the individual components of name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public ActivityActorName Name { get; set; }
		
		/// <summary>
		/// The link to the actor's Google profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Verification status of actor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verification")]
		public ActivityActorVerification Verification { get; set; }
	}
	
	public class ActivityActorClientSpecificActorInfo
	{
		
		/// <summary>
		/// Actor info specific to YouTube clients.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="youtubeActorInfo")]
		public ActivityActorClientSpecificActorInfoYoutubeActorInfo YoutubeActorInfo { get; set; }
	}
	
	public class ActivityActorClientSpecificActorInfoYoutubeActorInfo
	{
		
		/// <summary>
		/// ID of the YouTube channel owned by the Actor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
	}
	
	public class ActivityActorImage
	{
		
		/// <summary>
		/// The URL of the actor's profile photo. To resize the image and crop it to a square, append the query string ?sz=x, where x is the dimension in pixels of each side.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ActivityActorName
	{
		
		/// <summary>
		/// The family name ("last name") of the actor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="familyName")]
		public string FamilyName { get; set; }
		
		/// <summary>
		/// The given name ("first name") of the actor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="givenName")]
		public string GivenName { get; set; }
	}
	
	public class ActivityActorVerification
	{
		
		/// <summary>
		/// Verification for one-time or manual processes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adHocVerified")]
		public string AdHocVerified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Place
	{
		
		/// <summary>
		/// The physical address of the place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public PlaceAddress Address { get; set; }
		
		/// <summary>
		/// The display name of the place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The id of the place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies this resource as a place. Value: "plus#place".
		/// </summary>
		[System.ComponentModel.DefaultValue("plus#place")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "plus#place";
		
		/// <summary>
		/// The position of the place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public PlacePosition Position { get; set; }
	}
	
	public class PlaceAddress
	{
		
		/// <summary>
		/// The formatted address for display.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formatted")]
		public string Formatted { get; set; }
	}
	
	public class PlacePosition
	{
		
		/// <summary>
		/// The latitude of this position.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// The longitude of this position.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
	}
	
	public class ActivityObject
	{
		
		/// <summary>
		/// If this activity's object is itself another activity, such as when a person reshares an activity, this property specifies the original activity's actor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actor")]
		public ActivityObjectActor Actor { get; set; }
		
		/// <summary>
		/// The media objects attached to this activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public ActivityObjectAttachments[] ActivityObjectAttachments { get; set; }
		
		/// <summary>
		/// The HTML-formatted content, which is suitable for display.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// The ID of the object. When resharing an activity, this is the ID of the activity that is being reshared.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The type of the object. Possible values include, but are not limited to, the following values:  
		///- "note" - Textual content. 
		///- "activity" - A Google+ activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectType")]
		public string ObjectType { get; set; }
		
		/// <summary>
		/// The content (text) as provided by the author, which is stored without any HTML formatting. When creating or updating an activity, this value must be supplied as plain text in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalContent")]
		public string OriginalContent { get; set; }
		
		/// <summary>
		/// People who +1'd this activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plusoners")]
		public ActivityObjectPlusoners Plusoners { get; set; }
		
		/// <summary>
		/// Comments in reply to this activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replies")]
		public ActivityObjectReplies Replies { get; set; }
		
		/// <summary>
		/// People who reshared this activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resharers")]
		public ActivityObjectResharers Resharers { get; set; }
		
		/// <summary>
		/// The URL that points to the linked resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ActivityObjectActor
	{
		
		/// <summary>
		/// Actor info specific to particular clients.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientSpecificActorInfo")]
		public ActivityObjectActorClientSpecificActorInfo ClientSpecificActorInfo { get; set; }
		
		/// <summary>
		/// The original actor's name, which is suitable for display.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// ID of the original actor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The image representation of the original actor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public ActivityObjectActorImage Image { get; set; }
		
		/// <summary>
		/// A link to the original actor's Google profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Verification status of actor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verification")]
		public ActivityObjectActorVerification Verification { get; set; }
	}
	
	public class ActivityObjectActorClientSpecificActorInfo
	{
		
		/// <summary>
		/// Actor info specific to YouTube clients.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="youtubeActorInfo")]
		public ActivityObjectActorClientSpecificActorInfoYoutubeActorInfo YoutubeActorInfo { get; set; }
	}
	
	public class ActivityObjectActorClientSpecificActorInfoYoutubeActorInfo
	{
		
		/// <summary>
		/// ID of the YouTube channel owned by the Actor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
	}
	
	public class ActivityObjectActorImage
	{
		
		/// <summary>
		/// A URL that points to a thumbnail photo of the original actor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ActivityObjectActorVerification
	{
		
		/// <summary>
		/// Verification for one-time or manual processes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adHocVerified")]
		public string AdHocVerified { get; set; }
	}
	
	public class ActivityObjectAttachments
	{
		
		/// <summary>
		/// If the attachment is an article, this property contains a snippet of text from the article. It can also include descriptions for other types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// The title of the attachment, such as a photo caption or an article title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// If the attachment is a video, the embeddable link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="embed")]
		public ActivityObjectAttachmentsEmbed Embed { get; set; }
		
		/// <summary>
		/// The full image URL for photo attachments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullImage")]
		public ActivityObjectAttachmentsFullImage FullImage { get; set; }
		
		/// <summary>
		/// The ID of the attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The preview image for photos or videos.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public ActivityObjectAttachmentsImage Image { get; set; }
		
		/// <summary>
		/// The type of media object. Possible values include, but are not limited to, the following values:  
		///- "photo" - A photo. 
		///- "album" - A photo album. 
		///- "video" - A video. 
		///- "article" - An article, specified by a link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectType")]
		public string ObjectType { get; set; }
		
		/// <summary>
		/// If the attachment is an album, this property is a list of potential additional thumbnails from the album.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnails")]
		public ActivityObjectAttachmentsThumbnails[] ActivityObjectAttachmentsThumbnails { get; set; }
		
		/// <summary>
		/// The link to the attachment, which should be of type text/html.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ActivityObjectAttachmentsEmbed
	{
		
		/// <summary>
		/// Media type of the link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// URL of the link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ActivityObjectAttachmentsFullImage
	{
		
		/// <summary>
		/// The height, in pixels, of the linked resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.UInt32> Height { get; set; }
		
		/// <summary>
		/// Media type of the link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// URL of the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The width, in pixels, of the linked resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.UInt32> Width { get; set; }
	}
	
	public class ActivityObjectAttachmentsImage
	{
		
		/// <summary>
		/// The height, in pixels, of the linked resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.UInt32> Height { get; set; }
		
		/// <summary>
		/// Media type of the link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Image URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The width, in pixels, of the linked resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.UInt32> Width { get; set; }
	}
	
	public class ActivityObjectAttachmentsThumbnails
	{
		
		/// <summary>
		/// Potential name of the thumbnail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Image resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public ActivityObjectAttachmentsThumbnailsImage Image { get; set; }
		
		/// <summary>
		/// URL of the webpage containing the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ActivityObjectAttachmentsThumbnailsImage
	{
		
		/// <summary>
		/// The height, in pixels, of the linked resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.UInt32> Height { get; set; }
		
		/// <summary>
		/// Media type of the link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Image url.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The width, in pixels, of the linked resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.UInt32> Width { get; set; }
	}
	
	public class ActivityObjectPlusoners
	{
		
		/// <summary>
		/// The URL for the collection of people who +1'd this activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// Total number of people who +1'd this activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalItems")]
		public System.Nullable<System.UInt32> TotalItems { get; set; }
	}
	
	public class ActivityObjectReplies
	{
		
		/// <summary>
		/// The URL for the collection of comments in reply to this activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// Total number of comments on this activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalItems")]
		public System.Nullable<System.UInt32> TotalItems { get; set; }
	}
	
	public class ActivityObjectResharers
	{
		
		/// <summary>
		/// The URL for the collection of resharers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// Total number of people who reshared this activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalItems")]
		public System.Nullable<System.UInt32> TotalItems { get; set; }
	}
	
	public class ActivityProvider
	{
		
		/// <summary>
		/// Name of the service provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActivityFeed
	{
		
		/// <summary>
		/// ETag of this response for caching purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ID of this collection of activities. Deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The activities in this page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Activity[] Items { get; set; }
		
		/// <summary>
		/// Identifies this resource as a collection of activities. Value: "plus#activityFeed".
		/// </summary>
		[System.ComponentModel.DefaultValue("plus#activityFeed")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "plus#activityFeed";
		
		/// <summary>
		/// Link to the next page of activities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The continuation token, which is used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Link to this activity resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// The title of this collection of activities, which is a truncated portion of the content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The time at which this collection of activities was last updated. Formatted as an RFC 3339 timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Comment
	{
		
		/// <summary>
		/// The person who posted this comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actor")]
		public CommentActor Actor { get; set; }
		
		/// <summary>
		/// ETag of this response for caching purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ID of this comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The activity this comment replied to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inReplyTo")]
		public CommentInReplyTo[] CommentInReplyTo { get; set; }
		
		/// <summary>
		/// Identifies this resource as a comment. Value: "plus#comment".
		/// </summary>
		[System.ComponentModel.DefaultValue("plus#comment")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "plus#comment";
		
		/// <summary>
		/// The object of this comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="object")]
		public CommentObject Object { get; set; }
		
		/// <summary>
		/// People who +1'd this comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plusoners")]
		public CommentPlusoners Plusoners { get; set; }
		
		/// <summary>
		/// The time at which this comment was initially published. Formatted as an RFC 3339 timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="published")]
		public System.Nullable<System.DateTimeOffset> Published { get; set; }
		
		/// <summary>
		/// Link to this comment resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// The time at which this comment was last updated. Formatted as an RFC 3339 timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
		
		/// <summary>
		/// This comment's verb, indicating what action was performed. Possible values are:  
		///- "post" - Publish content to the stream.
		/// </summary>
		[System.ComponentModel.DefaultValue("post")]
		[System.Runtime.Serialization.DataMember(Name="verb")]
		public string Verb { get; set; } = "post";
	}
	
	public class CommentActor
	{
		
		/// <summary>
		/// Actor info specific to particular clients.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientSpecificActorInfo")]
		public CommentActorClientSpecificActorInfo ClientSpecificActorInfo { get; set; }
		
		/// <summary>
		/// The name of this actor, suitable for display.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The ID of the actor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The image representation of this actor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public CommentActorImage Image { get; set; }
		
		/// <summary>
		/// A link to the Person resource for this actor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Verification status of actor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verification")]
		public CommentActorVerification Verification { get; set; }
	}
	
	public class CommentActorClientSpecificActorInfo
	{
		
		/// <summary>
		/// Actor info specific to YouTube clients.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="youtubeActorInfo")]
		public CommentActorClientSpecificActorInfoYoutubeActorInfo YoutubeActorInfo { get; set; }
	}
	
	public class CommentActorClientSpecificActorInfoYoutubeActorInfo
	{
		
		/// <summary>
		/// ID of the YouTube channel owned by the Actor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
	}
	
	public class CommentActorImage
	{
		
		/// <summary>
		/// The URL of the actor's profile photo. To resize the image and crop it to a square, append the query string ?sz=x, where x is the dimension in pixels of each side.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class CommentActorVerification
	{
		
		/// <summary>
		/// Verification for one-time or manual processes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adHocVerified")]
		public string AdHocVerified { get; set; }
	}
	
	public class CommentInReplyTo
	{
		
		/// <summary>
		/// The ID of the activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The URL of the activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class CommentObject
	{
		
		/// <summary>
		/// The HTML-formatted content, suitable for display.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// The object type of this comment. Possible values are:  
		///- "comment" - A comment in reply to an activity.
		/// </summary>
		[System.ComponentModel.DefaultValue("comment")]
		[System.Runtime.Serialization.DataMember(Name="objectType")]
		public string ObjectType { get; set; } = "comment";
		
		/// <summary>
		/// The content (text) as provided by the author, stored without any HTML formatting. When creating or updating a comment, this value must be supplied as plain text in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalContent")]
		public string OriginalContent { get; set; }
	}
	
	public class CommentPlusoners
	{
		
		/// <summary>
		/// Total number of people who +1'd this comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalItems")]
		public System.Nullable<System.UInt32> TotalItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CommentFeed
	{
		
		/// <summary>
		/// ETag of this response for caching purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ID of this collection of comments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The comments in this page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Comment[] Items { get; set; }
		
		/// <summary>
		/// Identifies this resource as a collection of comments. Value: "plus#commentFeed".
		/// </summary>
		[System.ComponentModel.DefaultValue("plus#commentFeed")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "plus#commentFeed";
		
		/// <summary>
		/// Link to the next page of activities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The continuation token, which is used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The title of this collection of comments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The time at which this collection of comments was last updated. Formatted as an RFC 3339 timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PeopleFeed
	{
		
		/// <summary>
		/// ETag of this response for caching purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The people in this page of results. Each item includes the id, displayName, image, and url for the person. To retrieve additional profile data, see the people.get method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Person[] Items { get; set; }
		
		/// <summary>
		/// Identifies this resource as a collection of people. Value: "plus#peopleFeed".
		/// </summary>
		[System.ComponentModel.DefaultValue("plus#peopleFeed")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "plus#peopleFeed";
		
		/// <summary>
		/// The continuation token, which is used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Link to this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// The title of this collection of people.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The total number of people available in this list. The number of people in a response might be smaller due to paging. This might not be set for all collections.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalItems")]
		public System.Nullable<System.Int32> TotalItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Person
	{
		
		/// <summary>
		/// A short biography for this person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aboutMe")]
		public string AboutMe { get; set; }
		
		/// <summary>
		/// The age range of the person. Valid ranges are 17 or younger, 18 to 20, and 21 or older. Age is determined from the user's birthday using Western age reckoning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ageRange")]
		public PersonAgeRange AgeRange { get; set; }
		
		/// <summary>
		/// The person's date of birth, represented as YYYY-MM-DD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="birthday")]
		public string Birthday { get; set; }
		
		/// <summary>
		/// The "bragging rights" line of this person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="braggingRights")]
		public string BraggingRights { get; set; }
		
		/// <summary>
		/// For followers who are visible, the number of people who have added this person or page to a circle.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="circledByCount")]
		public System.Nullable<System.Int32> CircledByCount { get; set; }
		
		/// <summary>
		/// The cover photo content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cover")]
		public PersonCover Cover { get; set; }
		
		/// <summary>
		/// (this field is not currently used)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentLocation")]
		public string CurrentLocation { get; set; }
		
		/// <summary>
		/// The name of this person, which is suitable for display.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The hosted domain name for the user's Google Apps account. For instance, example.com. The plus.profile.emails.read or email scope is needed to get this domain name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// A list of email addresses that this person has, including their Google account email address, and the public verified email addresses on their Google+ profile. The plus.profile.emails.read scope is needed to retrieve these email addresses, or the email scope can be used to retrieve just the Google account email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emails")]
		public PersonEmails[] PersonEmails { get; set; }
		
		/// <summary>
		/// ETag of this response for caching purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The person's gender. Possible values include, but are not limited to, the following values:  
		///- "male" - Male gender. 
		///- "female" - Female gender. 
		///- "other" - Other.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; }
		
		/// <summary>
		/// The ID of this person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The representation of the person's profile photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public PersonImage Image { get; set; }
		
		/// <summary>
		/// Whether this user has signed up for Google+.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPlusUser")]
		public System.Nullable<System.Boolean> IsPlusUser { get; set; }
		
		/// <summary>
		/// Identifies this resource as a person. Value: "plus#person".
		/// </summary>
		[System.ComponentModel.DefaultValue("plus#person")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "plus#person";
		
		/// <summary>
		/// The user's preferred language for rendering.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// An object representation of the individual components of a person's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public PersonName Name { get; set; }
		
		/// <summary>
		/// The nickname of this person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nickname")]
		public string Nickname { get; set; }
		
		/// <summary>
		/// Type of person within Google+. Possible values include, but are not limited to, the following values:  
		///- "person" - represents an actual person. 
		///- "page" - represents a page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectType")]
		public string ObjectType { get; set; }
		
		/// <summary>
		/// The occupation of this person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="occupation")]
		public string Occupation { get; set; }
		
		/// <summary>
		/// A list of current or past organizations with which this person is associated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organizations")]
		public PersonOrganizations[] PersonOrganizations { get; set; }
		
		/// <summary>
		/// A list of places where this person has lived.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placesLived")]
		public PersonPlacesLived[] PersonPlacesLived { get; set; }
		
		/// <summary>
		/// If a Google+ Page, the number of people who have +1'd this page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plusOneCount")]
		public System.Nullable<System.Int32> PlusOneCount { get; set; }
		
		/// <summary>
		/// The person's relationship status. Possible values include, but are not limited to, the following values:  
		///- "single" - Person is single. 
		///- "in_a_relationship" - Person is in a relationship. 
		///- "engaged" - Person is engaged. 
		///- "married" - Person is married. 
		///- "its_complicated" - The relationship is complicated. 
		///- "open_relationship" - Person is in an open relationship. 
		///- "widowed" - Person is widowed. 
		///- "in_domestic_partnership" - Person is in a domestic partnership. 
		///- "in_civil_union" - Person is in a civil union.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relationshipStatus")]
		public string RelationshipStatus { get; set; }
		
		/// <summary>
		/// The person's skills.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skills")]
		public string Skills { get; set; }
		
		/// <summary>
		/// The brief description (tagline) of this person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagline")]
		public string Tagline { get; set; }
		
		/// <summary>
		/// The URL of this person's profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// A list of URLs for this person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urls")]
		public PersonUrls[] PersonUrls { get; set; }
		
		/// <summary>
		/// Whether the person or Google+ Page has been verified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verified")]
		public System.Nullable<System.Boolean> Verified { get; set; }
	}
	
	public class PersonAgeRange
	{
		
		/// <summary>
		/// The age range's upper bound, if any. Possible values include, but are not limited to, the following:  
		///- "17" - for age 17 
		///- "20" - for age 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max")]
		public System.Nullable<System.Int32> Max { get; set; }
		
		/// <summary>
		/// The age range's lower bound, if any. Possible values include, but are not limited to, the following:  
		///- "21" - for age 21 
		///- "18" - for age 18
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="min")]
		public System.Nullable<System.Int32> Min { get; set; }
	}
	
	public class PersonCover
	{
		
		/// <summary>
		/// Extra information about the cover photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverInfo")]
		public PersonCoverCoverInfo CoverInfo { get; set; }
		
		/// <summary>
		/// The person's primary cover image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverPhoto")]
		public PersonCoverCoverPhoto CoverPhoto { get; set; }
		
		/// <summary>
		/// The layout of the cover art. Possible values include, but are not limited to, the following values:  
		///- "banner" - One large image banner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="layout")]
		public string Layout { get; set; }
	}
	
	public class PersonCoverCoverInfo
	{
		
		/// <summary>
		/// The difference between the left position of the cover image and the actual displayed cover image. Only valid for banner layout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leftImageOffset")]
		public System.Nullable<System.Int32> LeftImageOffset { get; set; }
		
		/// <summary>
		/// The difference between the top position of the cover image and the actual displayed cover image. Only valid for banner layout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topImageOffset")]
		public System.Nullable<System.Int32> TopImageOffset { get; set; }
	}
	
	public class PersonCoverCoverPhoto
	{
		
		/// <summary>
		/// The height of the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// The URL of the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The width of the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	public class PersonEmails
	{
		
		/// <summary>
		/// The type of address. Possible values include, but are not limited to, the following values:  
		///- "account" - Google account email address. 
		///- "home" - Home email address. 
		///- "work" - Work email address. 
		///- "other" - Other.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class PersonImage
	{
		
		/// <summary>
		/// Whether the person's profile photo is the default one
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		/// <summary>
		/// The URL of the person's profile photo. To resize the image and crop it to a square, append the query string ?sz=x, where x is the dimension in pixels of each side.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class PersonName
	{
		
		/// <summary>
		/// The family name (last name) of this person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="familyName")]
		public string FamilyName { get; set; }
		
		/// <summary>
		/// The full name of this person, including middle names, suffixes, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formatted")]
		public string Formatted { get; set; }
		
		/// <summary>
		/// The given name (first name) of this person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="givenName")]
		public string GivenName { get; set; }
		
		/// <summary>
		/// The honorific prefixes (such as "Dr." or "Mrs.") for this person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="honorificPrefix")]
		public string HonorificPrefix { get; set; }
		
		/// <summary>
		/// The honorific suffixes (such as "Jr.") for this person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="honorificSuffix")]
		public string HonorificSuffix { get; set; }
		
		/// <summary>
		/// The middle name of this person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="middleName")]
		public string MiddleName { get; set; }
	}
	
	public class PersonOrganizations
	{
		
		/// <summary>
		/// The department within the organization. Deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="department")]
		public string Department { get; set; }
		
		/// <summary>
		/// A short description of the person's role in this organization. Deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The date that the person left this organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public string EndDate { get; set; }
		
		/// <summary>
		/// The location of this organization. Deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The name of the organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// If "true", indicates this organization is the person's primary one, which is typically interpreted as the current one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primary")]
		public System.Nullable<System.Boolean> Primary { get; set; }
		
		/// <summary>
		/// The date that the person joined this organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public string StartDate { get; set; }
		
		/// <summary>
		/// The person's job title or role within the organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The type of organization. Possible values include, but are not limited to, the following values:  
		///- "work" - Work. 
		///- "school" - School.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class PersonPlacesLived
	{
		
		/// <summary>
		/// If "true", this place of residence is this person's primary residence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primary")]
		public System.Nullable<System.Boolean> Primary { get; set; }
		
		/// <summary>
		/// A place where this person has lived. For example: "Seattle, WA", "Near Toronto".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class PersonUrls
	{
		
		/// <summary>
		/// The label of the URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// The type of URL. Possible values include, but are not limited to, the following values:  
		///- "otherProfile" - URL for another profile. 
		///- "contributor" - URL to a site for which this person is a contributor. 
		///- "website" - URL for this Google+ Page's primary website. 
		///- "other" - Other URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The URL value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Shut down. See https://developers.google.com/+/api-shutdown for more details.
		/// Plus_activities_search activities
		/// </summary>
		/// <param name="query">Full-text search query string.</param>
		/// <param name="language">Specify the preferred language to search with. See search language codes for available values.</param>
		/// <param name="maxResults">The maximum number of activities to include in the response, which is used for paging. For any response, the actual number returned might be less than the specified maxResults.
		/// Minimum: 1
		/// Maximum: 20
		// </param>
		/// <param name="orderBy">Specifies how to order search results.</param>
		/// <param name="pageToken">The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response. This token can be of any length.</param>
		/// <returns>Successful response</returns>
		public async Task<ActivityFeed> Plus_activities_searchAsync(string query, string language, int maxResults, Plus_activities_searchOrderBy orderBy, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "activities?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language))+"&maxResults="+maxResults+"&orderBy=" + orderBy+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ActivityFeed>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Shut down. See https://developers.google.com/+/api-shutdown for more details.
		/// Plus_activities_get activities/{activityId}
		/// </summary>
		/// <param name="activityId">The ID of the activity to get.</param>
		/// <returns>Successful response</returns>
		public async Task<Activity> Plus_activities_getAsync(string activityId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "activities/"+ (activityId==null? "" : System.Uri.EscapeDataString(activityId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Activity>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Shut down. See https://developers.google.com/+/api-shutdown for more details.
		/// Plus_comments_list activities/{activityId}/comments
		/// </summary>
		/// <param name="activityId">The ID of the activity to get comments for.</param>
		/// <param name="maxResults">The maximum number of comments to include in the response, which is used for paging. For any response, the actual number returned might be less than the specified maxResults.
		/// Minimum: 0
		/// Maximum: 500
		// </param>
		/// <param name="pageToken">The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response.</param>
		/// <param name="sortOrder">The order in which to sort the list of comments.</param>
		/// <returns>Successful response</returns>
		public async Task<CommentFeed> Plus_comments_listAsync(string activityId, int maxResults, string pageToken, Plus_comments_listSortOrder sortOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "activities/"+ (activityId==null? "" : System.Uri.EscapeDataString(activityId))+"/comments&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&sortOrder=" + sortOrder;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentFeed>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Shut down. See https://developers.google.com/+/api-shutdown for more details.
		/// Plus_people_listByActivity activities/{activityId}/people/{collection}
		/// </summary>
		/// <param name="activityId">The ID of the activity to get the list of people for.</param>
		/// <param name="collection">The collection of people to list.</param>
		/// <param name="maxResults">The maximum number of people to include in the response, which is used for paging. For any response, the actual number returned might be less than the specified maxResults.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="pageToken">The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<PeopleFeed> Plus_people_listByActivityAsync(string activityId, Plus_people_listByActivityCollection collection, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "activities/"+ (activityId==null? "" : System.Uri.EscapeDataString(activityId))+"/people/"+collection+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PeopleFeed>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Shut down. See https://developers.google.com/+/api-shutdown for more details.
		/// Plus_comments_get comments/{commentId}
		/// </summary>
		/// <param name="commentId">The ID of the comment to get.</param>
		/// <returns>Successful response</returns>
		public async Task<Comment> Plus_comments_getAsync(string commentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "comments/"+ (commentId==null? "" : System.Uri.EscapeDataString(commentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Comment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Shut down. See https://developers.google.com/+/api-shutdown for more details.
		/// Plus_people_search people
		/// </summary>
		/// <param name="query">Specify a query string for full text search of public text in all profiles.</param>
		/// <param name="language">Specify the preferred language to search with. See search language codes for available values.</param>
		/// <param name="maxResults">The maximum number of people to include in the response, which is used for paging. For any response, the actual number returned might be less than the specified maxResults.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="pageToken">The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response. This token can be of any length.</param>
		/// <returns>Successful response</returns>
		public async Task<PeopleFeed> Plus_people_searchAsync(string query, string language, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "people?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PeopleFeed>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a person's profile. If your app uses scope https://www.googleapis.com/auth/plus.login, this method is guaranteed to return ageRange and language.
		/// Plus_people_get people/{userId}
		/// </summary>
		/// <param name="userId">The ID of the person to get the profile for. The special value "me" can be used to indicate the authenticated user.</param>
		/// <returns>Successful response</returns>
		public async Task<Person> Plus_people_getAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "people/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Person>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Shut down. See https://developers.google.com/+/api-shutdown for more details.
		/// Plus_activities_list people/{userId}/activities/{collection}
		/// </summary>
		/// <param name="userId">The ID of the user to get activities for. The special value "me" can be used to indicate the authenticated user.</param>
		/// <param name="collection">The collection of activities to list.</param>
		/// <param name="maxResults">The maximum number of activities to include in the response, which is used for paging. For any response, the actual number returned might be less than the specified maxResults.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="pageToken">The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<ActivityFeed> Plus_activities_listAsync(string userId, Plus_activities_listCollection collection, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "people/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/activities/"+collection+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ActivityFeed>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all of the people in the specified collection.
		/// Plus_people_list people/{userId}/people/{collection}
		/// </summary>
		/// <param name="userId">Get the collection of people for the person identified. Use "me" to indicate the authenticated user.</param>
		/// <param name="collection">The collection of people to list.</param>
		/// <param name="maxResults">The maximum number of people to include in the response, which is used for paging. For any response, the actual number returned might be less than the specified maxResults.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="orderBy">The order to return people in.</param>
		/// <param name="pageToken">The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<PeopleFeed> Plus_people_listAsync(string userId, Plus_people_listCollection collection, int maxResults, Plus_people_listOrderBy orderBy, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "people/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/people/"+collection+"&maxResults="+maxResults+"&orderBy=" + orderBy+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PeopleFeed>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Plus_activities_searchOrderBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		best = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		recent = 1,
	}
	
	public enum Plus_comments_listSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ascending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		descending = 1,
	}
	
	public enum Plus_people_listByActivityCollection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		plusoners = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		resharers = 1,
	}
	
	public enum Plus_activities_listCollection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public")]
		_public = 0,
	}
	
	public enum Plus_people_listCollection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		connected = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		visible = 1,
	}
	
	public enum Plus_people_listOrderBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alphabetical = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		best = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
