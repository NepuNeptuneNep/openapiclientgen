//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="end")]
		public string End { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="info")]
		public string Info { get; set; }
		
		/// <summary>
		/// number of learners in the offering, excluding facilitators and coaches
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="learnersCount")]
		public string LearnersCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ActivationResponseMetadata Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public string Start { get; set; }
	}
	
	public class ActivationResponseMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="rootContentId")]
		public string RootContentId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivityAttemptOpenResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="activityId")]
		public string ActivityId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="activityType")]
		public string ActivityType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="feedback")]
		public ActivityAttemptOpenResponseFeedback Feedback { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="learnerEmail")]
		public string LearnerEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offeringId")]
		public string OfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responseText")]
		public string ResponseText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uploadedFiles")]
		public ActivityAttemptOpenResponseFiles UploadedFiles { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivityAttemptOpenResponseFeedback
	{
		
		[System.Runtime.Serialization.DataMember(Name="facilitatorEmail")]
		public string FacilitatorEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivityAttemptOpenResponseFiles
	{
		
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mimetype")]
		public string Mimetype { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Assessment
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dueDate")]
		public System.Nullable<System.DateTimeOffset> DueDate { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="markNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string MarkNumber { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="markType")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string MarkType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="openDate")]
		public System.Nullable<System.DateTimeOffset> OpenDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssessmentGroupRequired
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssessmentGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssessmentPendingSubmission
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="documents")]
		public Document[] Documents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dueDate")]
		public System.Nullable<System.DateTimeOffset> DueDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="durationMinutes")]
		public System.Nullable<System.Int32> DurationMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hidden")]
		public System.Nullable<System.Boolean> Hidden { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="markNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string MarkNumber { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="markType")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string MarkType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxAttempts")]
		public System.Nullable<System.Int32> MaxAttempts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offeringId")]
		public string OfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offeringName")]
		public string OfferingName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="openDate")]
		public System.Nullable<System.DateTimeOffset> OpenDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pid")]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="points")]
		public string Points { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="themes")]
		public ThemeResponse[] Themes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalQuestions")]
		public System.Nullable<System.Int32> TotalQuestions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalThemes")]
		public System.Nullable<System.Int32> TotalThemes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="users")]
		public User[] Users { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Document
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mimetype")]
		public string Mimetype { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int64> Size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThemeResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public string Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfQuestions")]
		public string NumberOfQuestions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class User
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Email { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public UserMetadata Metadata { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string PersonId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profile")]
		public UserProfileRequest Profile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sendInvite")]
		public System.Nullable<System.Boolean> SendInvite { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserProfileRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssessmentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="documents")]
		public Document[] Documents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dueDate")]
		public System.Nullable<System.DateTimeOffset> DueDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="durationMinutes")]
		public System.Nullable<System.Int32> DurationMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hidden")]
		public System.Nullable<System.Boolean> Hidden { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="markNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string MarkNumber { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="markType")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string MarkType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxAttempts")]
		public System.Nullable<System.Int32> MaxAttempts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="openDate")]
		public System.Nullable<System.DateTimeOffset> OpenDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pid")]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="points")]
		public string Points { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="themes")]
		public ThemeResponse[] Themes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalQuestions")]
		public System.Nullable<System.Int32> TotalQuestions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalThemes")]
		public System.Nullable<System.Int32> TotalThemes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssignmentMarkResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="assessmentId")]
		public string AssessmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assessmentItemDetails")]
		public string AssessmentItemDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assessmentItemName")]
		public string AssessmentItemName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="courseName")]
		public string CourseName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="learnerEmail")]
		public string LearnerEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="learnerFirstName")]
		public string LearnerFirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="learnerLastName")]
		public string LearnerLastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="learnerPersonId")]
		public string LearnerPersonId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mark")]
		public string Mark { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="markFeedback")]
		public string MarkFeedback { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="markedBy")]
		public string MarkedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="markedByEvaluator")]
		public System.Nullable<System.Boolean> MarkedByEvaluator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="markedByFacilitator")]
		public System.Nullable<System.Boolean> MarkedByFacilitator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="markedByMarker")]
		public System.Nullable<System.Boolean> MarkedByMarker { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="markedDateTime")]
		public System.Nullable<System.DateTimeOffset> MarkedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="submissionDateTime")]
		public System.Nullable<System.DateTimeOffset> SubmissionDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Assignments
	{
		
		[System.Runtime.Serialization.DataMember(Name="files")]
		public Document[] Files { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marks")]
		public Mark[] Marks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="submittedAt")]
		public System.Nullable<System.DateTimeOffset> SubmittedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Mark
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="feedback")]
		public string Feedback { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mark")]
		public string Mark1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="markFeedback")]
		public MarkFeedback[] MarkFeedback { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="markedBy")]
		public string MarkedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="markerId")]
		public string MarkerId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MarkFeedback
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="feedback")]
		public string Feedback { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="feedbackBy")]
		public string FeedbackBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mark")]
		public string Mark { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="markerId")]
		public string MarkerId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AwardedResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="awarded")]
		public System.Nullable<System.Boolean> Awarded { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="badgeId")]
		public string BadgeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="badgeUrl")]
		public string BadgeUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Badge
	{
		
		[System.Runtime.Serialization.DataMember(Name="badgeExpiry")]
		public BadgeExpiry BadgeExpiry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="badgeUrl")]
		public string BadgeUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="criterias")]
		public Criteria Criterias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="openBadge")]
		public OpenBadgeClass OpenBadge { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BadgeExpiry
	{
		
		[System.Runtime.Serialization.DataMember(Name="expirationDate")]
		public System.Nullable<System.DateTimeOffset> ExpirationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expires")]
		public System.Nullable<System.Boolean> Expires { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expiryType")]
		public System.Nullable<BadgeExpiryExpiryType> ExpiryType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeframeAmount")]
		public System.Nullable<System.Double> TimeframeAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeframeUnit")]
		public System.Nullable<BadgeExpiryTimeframeUnit> TimeframeUnit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BadgeExpiryExpiryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date")]
		date = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="timeframe")]
		timeframe = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BadgeExpiryTimeframeUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="days")]
		days = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="months")]
		months = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="years")]
		years = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Criteria
	{
		
		[System.Runtime.Serialization.DataMember(Name="hasCompletedCourse")]
		public System.Nullable<System.Boolean> HasCompletedCourse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasPassedMandatoryAssessedQuizzes")]
		public System.Nullable<System.Boolean> HasPassedMandatoryAssessedQuizzes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OpenBadgeClass
	{
		
		[System.Runtime.Serialization.DataMember(Name="criteria")]
		public OpenBadgeClassCriteria Criteria { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="issuer")]
		public string Issuer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class OpenBadgeClassCriteria
	{
		
		[System.Runtime.Serialization.DataMember(Name="narrative")]
		public string Narrative { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Channel
	{
		
		[System.Runtime.Serialization.DataMember(Name="group")]
		public ChannelGroup Group { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupDiscussion")]
		public System.Nullable<System.Boolean> GroupDiscussion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isBroadcastOnly")]
		public System.Nullable<System.Boolean> IsBroadcastOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privateSupport")]
		public System.Nullable<System.Boolean> PrivateSupport { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Title { get; set; }
	}
	
	public class ChannelGroup
	{
		
		[System.Runtime.Serialization.DataMember(Name="autoAssign")]
		public System.Nullable<System.Boolean> AutoAssign { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelRequired
	{
		
		[System.Runtime.Serialization.DataMember(Name="isBroadcastOnly")]
		public System.Nullable<System.Boolean> IsBroadcastOnly { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isBroadcastOnly")]
		public System.Nullable<System.Boolean> IsBroadcastOnly { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Comment
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isFacilitatorPost")]
		public System.Nullable<System.Boolean> IsFacilitatorPost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="moderation")]
		public Moderation Moderation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentCommentId")]
		public string ParentCommentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postId")]
		public string PostId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Moderation
	{
		
		[System.Runtime.Serialization.DataMember(Name="isMuted")]
		public System.Nullable<System.Boolean> IsMuted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="moderator")]
		public Moderator Moderator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Moderator
	{
		
		[System.Runtime.Serialization.DataMember(Name="avatarUrl")]
		public string AvatarUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CourseMetaResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="coverImageUrl")]
		public string CoverImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public object Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tasksEnabled")]
		public System.Nullable<System.Boolean> TasksEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CourseResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="coverImageUrl")]
		public string CoverImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public object Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DocumentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mimetype")]
		public string Mimetype { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int64> Size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Error
	{
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ErrorError1 Error1 { get; set; }
	}
	
	public class ErrorError1
	{
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Invite
	{
		
		/// <summary>
		/// if sendInvite in request is false
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LearnerOfferingDates
	{
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.DateTimeOffset> Start { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LearnerProgressResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="completion")]
		public string Completion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="courseId")]
		public string CourseId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastLoggedInAt")]
		public System.Nullable<System.DateTimeOffset> LastLoggedInAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="personId")]
		public string PersonId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LearnerResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offerings")]
		public OfferingProgressRow[] Offerings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="personId")]
		public string PersonId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OfferingProgressRow
	{
		
		[System.Runtime.Serialization.DataMember(Name="completion")]
		public string Completion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LearningOutcomes
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Offering
	{
		
		[System.Runtime.Serialization.DataMember(Name="badge")]
		public OfferingBadge Badge { get; set; }
		
		/// <summary>
		/// The identifier for a specific version of a course
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string ContentId { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="earlyCloseOffDate")]
		public System.Nullable<System.DateTimeOffset> EarlyCloseOffDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.Nullable<System.DateTimeOffset> End { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasEarlyCloseOff")]
		public System.Nullable<System.Boolean> HasEarlyCloseOff { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isReadonly")]
		public System.Nullable<System.Boolean> IsReadonly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public OfferingMetadata Metadata { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overview")]
		public string Overview { get; set; }
		
		/// <summary>
		/// Every time a course is republished it is assigned a new contentId. rootContentId is the first original contentId associated with a course.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rootContentId")]
		public string RootContentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.DateTimeOffset> Start { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trailerVideoUrl")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string TrailerVideoUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useRelativeDates")]
		public System.Nullable<System.Boolean> UseRelativeDates { get; set; }
	}
	
	public class OfferingBadge
	{
		
		[System.Runtime.Serialization.DataMember(Name="badgeExpiry")]
		public BadgeExpiry BadgeExpiry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requiresApproval")]
		public System.Nullable<System.Boolean> RequiresApproval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	public class OfferingMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="level")]
		public string Level { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topic")]
		public string Topic { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OfferingActivitiesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="activityId")]
		public string ActivityId { get; set; }
		
		/// <summary>
		/// expected minutes to complete
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.Double> Time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OfferingMetadataResponse
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string ContentId { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverImageUrl")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string CoverImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="earlyCloseOffDate")]
		public System.Nullable<System.DateTimeOffset> EarlyCloseOffDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.Nullable<System.DateTimeOffset> End { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enrollmentLimit")]
		public System.Nullable<System.Double> EnrollmentLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasEarlyCloseOff")]
		public System.Nullable<System.Boolean> HasEarlyCloseOff { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isReadonly")]
		public System.Nullable<System.Boolean> IsReadonly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public OfferingMetadata Metadata { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		/// <summary>
		/// content can contain html
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overview")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Overview { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Double> Price { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.DateTimeOffset> Start { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tasksEnabled")]
		public System.Nullable<System.Boolean> TasksEnabled { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trailerVideoUrl")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string TrailerVideoUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useRelativeDates")]
		public System.Nullable<System.Boolean> UseRelativeDates { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OfferingRequired
	{
		
		[System.Runtime.Serialization.DataMember(Name="badge")]
		public OfferingRequiredBadge Badge { get; set; }
		
		/// <summary>
		/// The identifier for a specific version of a course
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string ContentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createDefaultChannels")]
		public System.Nullable<System.Boolean> CreateDefaultChannels { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="earlyCloseOffDate")]
		public System.Nullable<System.DateTimeOffset> EarlyCloseOffDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.Nullable<System.DateTimeOffset> End { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasEarlyCloseOff")]
		public System.Nullable<System.Boolean> HasEarlyCloseOff { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isReadonly")]
		public System.Nullable<System.Boolean> IsReadonly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public OfferingRequiredMetadata Metadata { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Every time a course is republished it's assigned a new contentId. rootContentId is the first original contentId associated with a course.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rootContentId")]
		public string RootContentId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.DateTimeOffset Start { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trailerVideoUrl")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string TrailerVideoUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useRelativeDates")]
		public System.Nullable<System.Boolean> UseRelativeDates { get; set; }
	}
	
	public class OfferingRequiredBadge
	{
		
		[System.Runtime.Serialization.DataMember(Name="badgeExpiry")]
		public BadgeExpiry BadgeExpiry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requiresApproval")]
		public System.Nullable<System.Boolean> RequiresApproval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	public class OfferingRequiredMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="level")]
		public string Level { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topic")]
		public string Topic { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OfferingResponse
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string ContentId { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverImageUrl")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string CoverImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="earlyCloseOffDate")]
		public System.Nullable<System.DateTimeOffset> EarlyCloseOffDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.Nullable<System.DateTimeOffset> End { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enrollmentLimit")]
		public System.Nullable<System.Double> EnrollmentLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasEarlyCloseOff")]
		public System.Nullable<System.Boolean> HasEarlyCloseOff { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isReadonly")]
		public System.Nullable<System.Boolean> IsReadonly { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Double> Price { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.DateTimeOffset> Start { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tasksEnabled")]
		public System.Nullable<System.Boolean> TasksEnabled { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trailerVideoUrl")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string TrailerVideoUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OfferingUser
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Email { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isFacilitator")]
		public System.Nullable<System.Boolean> IsFacilitator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isMarker")]
		public System.Nullable<System.Boolean> IsMarker { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isReadonly")]
		public System.Nullable<System.Boolean> IsReadonly { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public UserMetadata Metadata { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string PersonId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profile")]
		public UserProfileRequest Profile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sendInvite")]
		public System.Nullable<System.Boolean> SendInvite { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sendNotificationEmail")]
		public System.Nullable<System.Boolean> SendNotificationEmail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OfferingUserAddResponse
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Email { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invite")]
		public Invite Invite { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isFacilitator")]
		public System.Nullable<System.Boolean> IsFacilitator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isMarker")]
		public System.Nullable<System.Boolean> IsMarker { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isReadonly")]
		public System.Nullable<System.Boolean> IsReadonly { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public UserMetadata Metadata { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string PersonId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profile")]
		public UserProfileRequest Profile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sendInvite")]
		public System.Nullable<System.Boolean> SendInvite { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sendNotificationEmail")]
		public System.Nullable<System.Boolean> SendNotificationEmail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OfferingUserResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="avatarUrl")]
		public string AvatarUrl { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evaluatedBy")]
		public string[] EvaluatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evaluates")]
		public string[] Evaluates { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isFacilitator")]
		public System.Nullable<System.Boolean> IsFacilitator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isMarker")]
		public System.Nullable<System.Boolean> IsMarker { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isReadonly")]
		public System.Nullable<System.Boolean> IsReadonly { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="markedBy")]
		public string[] MarkedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marks")]
		public string[] Marks { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string PersonId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profile")]
		public UserProfile Profile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserProfile
	{
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobile")]
		public string Mobile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrgRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrgResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PortfolioActivations
	{
		
		[System.Runtime.Serialization.DataMember(Name="contentId")]
		public string ContentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.Nullable<System.DateTimeOffset> End { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="info")]
		public string Info { get; set; }
		
		/// <summary>
		/// number of learners in the offering, excluding facilitators and coaches
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="learnersCount")]
		public System.Nullable<System.Double> LearnersCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public PortfolioActivationsMetadata Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.DateTimeOffset> Start { get; set; }
	}
	
	public class PortfolioActivationsMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="rootContentId")]
		public string RootContentId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PortfolioLicenseResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="licenses")]
		public string[] Licenses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PortfolioMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="level")]
		public string Level { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topic")]
		public string Topic { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PulseAnswer
	{
		
		[System.Runtime.Serialization.DataMember(Name="multiChoiceAnswer")]
		public PulseMCQOption[] MultiChoiceAnswer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spatialAnswer")]
		public PulseSpatialOption[] SpatialAnswer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="textAnswer")]
		public string TextAnswer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PulseMCQOption
	{
		
		[System.Runtime.Serialization.DataMember(Name="option")]
		public string Option { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Boolean> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PulseSpatialOption
	{
		
		[System.Runtime.Serialization.DataMember(Name="option")]
		public string Option { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Single> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PulseResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="learnerFirstName")]
		public string LearnerFirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="learnerId")]
		public string LearnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="learnerLastName")]
		public string LearnerLastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pulseBaseId")]
		public string PulseBaseId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pulseInstanceId")]
		public string PulseInstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pulseQuestion")]
		public string PulseQuestion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pulseRunDurationMinutes")]
		public System.Nullable<System.Int32> PulseRunDurationMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pulseRunStart")]
		public System.Nullable<System.DateTimeOffset> PulseRunStart { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pulseType")]
		public string PulseType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="response")]
		public PulseAnswer Response { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responseTime")]
		public System.Nullable<System.DateTimeOffset> ResponseTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QuizMarkResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="attempts")]
		public System.Nullable<System.Int32> Attempts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastAttemptAt")]
		public System.Nullable<System.DateTimeOffset> LastAttemptAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="learnerEmail")]
		public string LearnerEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="learnerFullname")]
		public string LearnerFullname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="learnerPersonId")]
		public string LearnerPersonId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mark")]
		public string Mark { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quizId")]
		public string QuizId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quizTitle")]
		public string QuizTitle { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RevokedResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="badgeId")]
		public string BadgeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="badgeUrl")]
		public string BadgeUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revocationReason")]
		public string RevocationReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revoked")]
		public System.Nullable<System.Boolean> Revoked { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SocialNotesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pageId")]
		public string PageId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="personId")]
		public string PersonId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="social-note-content")]
		public string Social_note_content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="social-note-paragraphId")]
		public string Social_note_paragraphId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubmissionMarkResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="assessmentId")]
		public string AssessmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assessmentItemDetails")]
		public string AssessmentItemDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assessmentItemName")]
		public string AssessmentItemName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="courseName")]
		public string CourseName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="files")]
		public Document[] Files { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="html")]
		public string Html { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="learnerEmail")]
		public string LearnerEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="learnerFirstName")]
		public string LearnerFirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="learnerLastName")]
		public string LearnerLastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="learnerPersonId")]
		public string LearnerPersonId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marks")]
		public Mark[] Marks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="submissionDateTime")]
		public System.Nullable<System.DateTimeOffset> SubmissionDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SuspendedRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="suspended")]
		public System.Nullable<System.Boolean> Suspended { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransferRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="fromOfferingId")]
		public string FromOfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sendInvite")]
		public System.Nullable<System.Boolean> SendInvite { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="toOfferingId")]
		public string ToOfferingId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnitReactionsAnalyticsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="feedback")]
		public UnitReactionsFeedback Feedback { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pageId")]
		public System.Nullable<System.Boolean> PageId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnitReactionsFeedback
	{
		
		[System.Runtime.Serialization.DataMember(Name="thumbs-down")]
		public System.Nullable<System.Double> Thumbs_down { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumbs-up")]
		public System.Nullable<System.Double> Thumbs_up { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserBadge
	{
		
		[System.Runtime.Serialization.DataMember(Name="awardedAt")]
		public System.Nullable<System.DateTimeOffset> AwardedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="badgeExpiry")]
		public UserBadgeBadgeExpiry BadgeExpiry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="badgeUrl")]
		public string BadgeUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="criterias")]
		public Criteria Criterias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offeringId")]
		public string OfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="openBadge")]
		public OpenBadgeClass OpenBadge { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	public class UserBadgeBadgeExpiry
	{
		
		[System.Runtime.Serialization.DataMember(Name="expirationDate")]
		public System.Nullable<System.DateTimeOffset> ExpirationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expires")]
		public System.Nullable<System.Boolean> Expires { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserPermission
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isBuilder")]
		public System.Nullable<System.Boolean> IsBuilder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isReviewer")]
		public System.Nullable<System.Boolean> IsReviewer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="avatarUrl")]
		public string AvatarUrl { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstAccessAt")]
		public System.Nullable<System.DateTimeOffset> FirstAccessAt { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invite")]
		public Invite Invite { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastAccessAt")]
		public System.Nullable<System.DateTimeOffset> LastAccessAt { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public UserMetadata Metadata { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string PersonId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profile")]
		public UserProfile Profile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HttpPost
	{
		
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public DocumentResponse[] Attachments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isFacilitatorPost")]
		public System.Nullable<System.Boolean> IsFacilitatorPost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="moderation")]
		public Moderation Moderation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List supported endpoints URLs
		/// Responds with all supported endpoints URLs for v2 version.
		/// Get 
		/// </summary>
		/// <returns>Supported endpoints</returns>
		public async Task<string> GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				return jsonReader.ReadAsString();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find course mappings
		/// Returns all course mappings for course offerings.
		/// Course_mappingsGet course-mappings
		/// </summary>
		/// <returns>Course Mappings</returns>
		public async Task<System.Collections.Generic.Dictionary<string, string>> Course_mappingsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "course-mappings";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, string>>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find course mappings by externalCourseId
		/// Responds with course mapping details by externalCourseId.
		/// Course_mappingsExternalcourse_externalCourseIdGet course-mappings/externalcourse/{externalCourseId}
		/// </summary>
		/// <param name="externalCourseId">external course's id</param>
		/// <returns>Course Mapping</returns>
		public async Task<string[]> Course_mappingsExternalcourse_externalCourseIdGetAsync(string externalCourseId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "course-mappings/externalcourse/"+ (externalCourseId==null? "" : System.Uri.EscapeDataString(externalCourseId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find course mappings by offeringId
		/// Responds with course mapping details by offeringId.
		/// Course_mappings_offeringIdGet course-mappings/{offeringId}
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <returns>Course Mapping</returns>
		public async Task<string[]> Course_mappings_offeringIdGetAsync(string offeringId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "course-mappings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Remove course mapping
		/// Removes the course mapping between the offering and the externalCourseId.
		/// Course_mappings_offeringId_externalCourseIdDelete course-mappings/{offeringId}/{externalCourseId}
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <param name="externalCourseId">external course's id</param>
		/// <returns>Course Mapping</returns>
		public async Task<string[]> Course_mappings_offeringId_externalCourseIdDeleteAsync(string offeringId, string externalCourseId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "course-mappings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/"+ (externalCourseId==null? "" : System.Uri.EscapeDataString(externalCourseId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add course mapping
		/// Creates a mapping between the offering and the externalCourseId.
		/// Course_mappings_offeringId_externalCourseIdPut course-mappings/{offeringId}/{externalCourseId}
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <param name="externalCourseId">external course's id</param>
		/// <returns>Course Mapping</returns>
		public async Task<string[]> Course_mappings_offeringId_externalCourseIdPutAsync(string offeringId, string externalCourseId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "course-mappings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/"+ (externalCourseId==null? "" : System.Uri.EscapeDataString(externalCourseId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find courses
		/// Responds with all courses (draft and published.)
		/// CoursesGet courses
		/// </summary>
		/// <returns>All courses (draft and published) in the organisation.</returns>
		public async Task<CourseResponse[]> CoursesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "courses";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CourseResponse[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find course by contentId
		/// Responds with a course matching the contentId.
		/// Courses_contentIdGet courses/{contentId}
		/// </summary>
		/// <param name="contentId">The content Id</param>
		/// <returns>Course detail</returns>
		public async Task<CourseMetaResponse> Courses_contentIdGetAsync(string contentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "courses/"+ (contentId==null? "" : System.Uri.EscapeDataString(contentId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CourseMetaResponse>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find activations for a contentId
		/// Responds with all activations for the contentId provided.
		/// Courses_contentIdActivationsGet courses/{contentId}/activations
		/// </summary>
		/// <param name="contentId">The content Id</param>
		/// <returns>Activation list.</returns>
		public async Task<ActivationResponse> Courses_contentIdActivationsGetAsync(string contentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "courses/"+ (contentId==null? "" : System.Uri.EscapeDataString(contentId))+"/activations";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ActivationResponse>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update course category
		/// Add or update course category in the metadata of a course.
		/// Courses_contentIdMetadataCategoryPut courses/{contentId}/metadata/category
		/// </summary>
		/// <param name="contentId">The content Id</param>
		/// <returns>Course detail</returns>
		public async Task<CourseMetaResponse> Courses_contentIdMetadataCategoryPutAsync(string contentId, Courses_contentIdMetadataCategoryPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "courses/"+ (contentId==null? "" : System.Uri.EscapeDataString(contentId))+"/metadata/category";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CourseMetaResponse>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update course level
		/// Add or update the course level in the metadata of a course.
		/// Courses_contentIdMetadataLevelPut courses/{contentId}/metadata/level
		/// </summary>
		/// <param name="contentId">The content Id</param>
		/// <returns>Course detail</returns>
		public async Task<CourseMetaResponse> Courses_contentIdMetadataLevelPutAsync(string contentId, Courses_contentIdMetadataLevelPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "courses/"+ (contentId==null? "" : System.Uri.EscapeDataString(contentId))+"/metadata/level";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CourseMetaResponse>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update course tags
		/// Add or update course tags in the metadata of a course.
		/// Courses_contentIdMetadataTagsPut courses/{contentId}/metadata/tags
		/// </summary>
		/// <param name="contentId">The content Id</param>
		/// <returns>Course detail</returns>
		public async Task<CourseMetaResponse> Courses_contentIdMetadataTagsPutAsync(string contentId, Courses_contentIdMetadataTagsPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "courses/"+ (contentId==null? "" : System.Uri.EscapeDataString(contentId))+"/metadata/tags";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CourseMetaResponse>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update course topic
		/// Add or update the course topic in the metadata of a course.
		/// Courses_contentIdMetadataTopicPut courses/{contentId}/metadata/topic
		/// </summary>
		/// <param name="contentId">The content Id</param>
		/// <returns>Course detail</returns>
		public async Task<CourseMetaResponse> Courses_contentIdMetadataTopicPutAsync(string contentId, Courses_contentIdMetadataTopicPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "courses/"+ (contentId==null? "" : System.Uri.EscapeDataString(contentId))+"/metadata/topic";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CourseMetaResponse>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find users who have access to the contentId provided
		/// Responds with users who have access to a specific course by contentId.
		/// Courses_contentIdPermissionsGet courses/{contentId}/permissions
		/// </summary>
		/// <param name="contentId">The content Id</param>
		/// <returns>List of users who have access to the content ID provided.</returns>
		public async Task<UserPermission> Courses_contentIdPermissionsGetAsync(string contentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "courses/"+ (contentId==null? "" : System.Uri.EscapeDataString(contentId))+"/permissions";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserPermission>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update course access
		/// Provide a user with access to a specific course by rootContentId.
		/// Courses_rootContentIdPermissions_userEmailPost courses/{rootContentId}/permissions/{userEmail}
		/// </summary>
		/// <param name="rootContentId">The content Id</param>
		/// <param name="userEmail">The user email</param>
		public async Task Courses_rootContentIdPermissions_userEmailPostAsync(string rootContentId, string userEmail, Courses_rootContentIdPermissions_userEmailPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "courses/"+ (rootContentId==null? "" : System.Uri.EscapeDataString(rootContentId))+"/permissions/"+ (userEmail==null? "" : System.Uri.EscapeDataString(userEmail));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find current, past and future offerings
		/// Responds with all offerings for your organisation.
		/// OfferingsGet offerings
		/// </summary>
		/// <returns>all offerings (current, past and future ones)</returns>
		public async Task<OfferingMetadataResponse[]> OfferingsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OfferingMetadataResponse[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create offering
		/// Creates a new offering.
		/// OfferingsPost offerings
		/// </summary>
		public async Task OfferingsPostAsync(OfferingRequired requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find active offerings
		/// Responds with active offerings for your organisation.
		/// OfferingsCurrentGet offerings/current
		/// </summary>
		/// <returns>current offerings</returns>
		public async Task<OfferingMetadataResponse[]> OfferingsCurrentGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/current";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OfferingMetadataResponse[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find scheduled offerings
		/// Responds with scheduled offerings for your organisation. Scheduled offerings have a start date after today's date (inclusive).
		/// OfferingsFutureGet offerings/future
		/// </summary>
		/// <returns>future offerings</returns>
		public async Task<OfferingMetadataResponse[]> OfferingsFutureGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/future";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OfferingMetadataResponse[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find offerings where info field matches the specified textPattern
		/// Find offerings where info field matches the specified text pattern.
		/// OfferingsInfo_textPatternGet offerings/info/{textPattern}
		/// </summary>
		/// <param name="textPattern">Text pattern to search for (minimum of 3 characters length).</param>
		/// <returns>Offerings</returns>
		public async Task<PortfolioActivations[]> OfferingsInfo_textPatternGetAsync(string textPattern, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/info/"+ (textPattern==null? "" : System.Uri.EscapeDataString(textPattern));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PortfolioActivations[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find past offerings
		/// Responds with past offerings for your organisation.
		/// OfferingsPastGet offerings/past
		/// </summary>
		/// <returns>past offerings</returns>
		public async Task<OfferingMetadataResponse[]> OfferingsPastGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/past";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OfferingMetadataResponse[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Offerings summary
		/// Responds with a summary of all offerings for your organisation.
		/// OfferingsSummaryGetByTopAndOrderbyAndFilter offerings/summary
		/// </summary>
		/// <param name="top">Returns only the first n results.</param>
		/// <param name="orderby">Sorts the results.</param>
		/// <param name="filter">Filters the results, based on a Boolean condition.</param>
		/// <returns>all offerings.</returns>
		public async Task<PortfolioActivations[]> OfferingsSummaryGetByTopAndOrderbyAndFilterAsync(string top, string orderby, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/summary?$top=" + (top==null? "" : System.Uri.EscapeDataString(top))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PortfolioActivations[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find offering by ID
		/// Responds with an offering matching the offeringId.
		/// Offerings_offeringIdGet offerings/{offeringId}
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <returns>offering</returns>
		public async Task<OfferingMetadataResponse> Offerings_offeringIdGetAsync(string offeringId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OfferingMetadataResponse>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update offering
		/// Updates the offering.
		/// Offerings_offeringIdPatch offerings/{offeringId}
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <returns>offering updated</returns>
		public async Task<OfferingMetadataResponse> Offerings_offeringIdPatchAsync(string offeringId, Offering requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OfferingMetadataResponse>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find offering's activities
		/// Responds with the activities in a specific offering.
		/// Offerings_offeringIdActivitiesOpenresponseGet offerings/{offeringId}/activities/openresponse
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <returns>offering's learners</returns>
		public async Task<OfferingActivitiesResponse[]> Offerings_offeringIdActivitiesOpenresponseGetAsync(string offeringId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/activities/openresponse";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OfferingActivitiesResponse[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find open response activity attempts
		/// Responds with all learner activity attempts for open response activities in an offering matching the offeringId.
		/// Offerings_offeringIdAnalyticsActivitiesResponsesGet offerings/{offeringId}/analytics/activities/responses
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <returns>Offering activity attempt open responses</returns>
		public async Task<ActivityAttemptOpenResponse[]> Offerings_offeringIdAnalyticsActivitiesResponsesGetAsync(string offeringId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/analytics/activities/responses";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ActivityAttemptOpenResponse[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find comments
		/// Responds with a list of comments made in any posts in a specified channel, within an offering.
		/// Offerings_offeringIdAnalyticsChannels_channelIdCommentsGet offerings/{offeringId}/analytics/channels/{channelId}/comments
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <param name="channelId">channel's id</param>
		/// <returns>Successful response</returns>
		public async Task<Comment[]> Offerings_offeringIdAnalyticsChannels_channelIdCommentsGetAsync(string offeringId, string channelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/analytics/channels/"+ (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"/comments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Comment[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find posts
		/// Responds with a list of posts made in a specified channel, within an offering.
		/// Offerings_offeringIdAnalyticsChannels_channelIdPostsGet offerings/{offeringId}/analytics/channels/{channelId}/posts
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <param name="channelId">channel's id</param>
		/// <returns>Successful response</returns>
		public async Task<HttpPost[]> Offerings_offeringIdAnalyticsChannels_channelIdPostsGetAsync(string offeringId, string channelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/analytics/channels/"+ (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"/posts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HttpPost[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find replies
		/// Responds with a list of replies to comments in any posts in a specified channel, within an offering.
		/// Offerings_offeringIdAnalyticsChannels_channelIdRepliesGet offerings/{offeringId}/analytics/channels/{channelId}/replies
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <param name="channelId">channel's id</param>
		/// <returns>Successful response</returns>
		public async Task<Comment[]> Offerings_offeringIdAnalyticsChannels_channelIdRepliesGetAsync(string offeringId, string channelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/analytics/channels/"+ (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"/replies";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Comment[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find learner progress in a specified offering
		/// Responds with all learner progress in the offering.
		/// Offerings_offeringIdAnalyticsLearners_progressGet offerings/{offeringId}/analytics/learners-progress
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <returns>Learners progress</returns>
		public async Task<LearnerProgressResponse[]> Offerings_offeringIdAnalyticsLearners_progressGetAsync(string offeringId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/analytics/learners-progress";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LearnerProgressResponse[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find assessment marks
		/// Responds with all learner assessment marks in an offering matching the offeringId.
		/// Offerings_offeringIdAnalyticsMarksAssignmentsGet offerings/{offeringId}/analytics/marks/assignments
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <returns>Assignments marks</returns>
		public async Task<AssignmentMarkResponse[]> Offerings_offeringIdAnalyticsMarksAssignmentsGetAsync(string offeringId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/analytics/marks/assignments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssignmentMarkResponse[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find quiz marks
		/// Responds with all learner quiz marks in an offering matching the offeringId.
		/// Offerings_offeringIdAnalyticsMarksQuizzesGet offerings/{offeringId}/analytics/marks/quizzes
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <returns>Quizzes marks</returns>
		public async Task<QuizMarkResponse[]> Offerings_offeringIdAnalyticsMarksQuizzesGetAsync(string offeringId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/analytics/marks/quizzes";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<QuizMarkResponse[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find all pulse IDs in the specified offering
		/// Responds with the IDs of all pulses that learners have responded to in a specified offering.
		/// Offerings_offeringIdAnalyticsPulsesGet offerings/{offeringId}/analytics/pulses
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <returns>Pulses' ids</returns>
		public async Task<string[]> Offerings_offeringIdAnalyticsPulsesGetAsync(string offeringId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/analytics/pulses";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find pulses by offeringId
		/// Responds with pulse's responses in an offering matching the offeringId.
		/// Offerings_offeringIdAnalyticsPulsesResponsesGetByPulseTypeAndResponseTime offerings/{offeringId}/analytics/pulses/responses
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <param name="pulseType">Filter pulse responses by type.</param>
		/// <param name="responseTime">Filter pulse responses by responseTime. Lower then (`lt`), lower then or equal (`lte`), greater then (`gt`) and greater then or equal (`gte`) operators are available. Example of filtering by time range __gte__2017-03-14T07:30:00Z__</param>
		/// <returns>All pulses' responses</returns>
		public async Task<PulseResponse[]> Offerings_offeringIdAnalyticsPulsesResponsesGetByPulseTypeAndResponseTimeAsync(string offeringId, Offerings_offeringIdAnalyticsPulsesResponsesGetByPulseTypeAndResponseTimePulseType pulseType, string responseTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/analytics/pulses/responses&pulseType=" + pulseType+"&responseTime=" + (responseTime==null? "" : System.Uri.EscapeDataString(responseTime));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PulseResponse[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find pulses by offeringId and pulseId
		/// Responds with pulse's responses, matching the pulseId, in an offering matching the offeringId.
		/// Offerings_offeringIdAnalyticsPulses_pulseIdResponsesGet offerings/{offeringId}/analytics/pulses/{pulseId}/responses
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <param name="pulseId">pulse's base id</param>
		/// <returns>Pulse data matching pulseId</returns>
		public async Task<PulseResponse[]> Offerings_offeringIdAnalyticsPulses_pulseIdResponsesGetAsync(string offeringId, string pulseId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/analytics/pulses/"+ (pulseId==null? "" : System.Uri.EscapeDataString(pulseId))+"/responses";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PulseResponse[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find shared social notes in an offering
		/// Responds with all shared social notes in a specified offering.
		/// Offerings_offeringIdAnalyticsSocial_notesGet offerings/{offeringId}/analytics/social-notes
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <returns>Offering social notes</returns>
		public async Task<SocialNotesResponse[]> Offerings_offeringIdAnalyticsSocial_notesGetAsync(string offeringId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/analytics/social-notes";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SocialNotesResponse[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find submissions to assessments, including marks if any
		/// Responds with all learner assessment submissions and marks, if any, in an offering matching the offeringId.
		/// Offerings_offeringIdAnalyticsSubmissionsAssignmentsGet offerings/{offeringId}/analytics/submissions/assignments
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <returns>Assignments submissions</returns>
		public async Task<AssignmentMarkResponse[]> Offerings_offeringIdAnalyticsSubmissionsAssignmentsGetAsync(string offeringId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/analytics/submissions/assignments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssignmentMarkResponse[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find submissions to a specified open response assessment, including marks if any
		/// Responds with all learner assessment submissions and marks, if any, in a specified open response assessment.
		/// Offerings_offeringIdAnalyticsSubmissionsOpen_response_assessmentIdGet offerings/{offeringId}/analytics/submissions/open-response/{assessmentId}
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <param name="assessmentId">assessment's id</param>
		/// <returns>Responds with assignment submissions for the specified assignment.</returns>
		public async Task<SubmissionMarkResponse[]> Offerings_offeringIdAnalyticsSubmissionsOpen_response_assessmentIdGetAsync(string offeringId, string assessmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/analytics/submissions/open-response/"+ (assessmentId==null? "" : System.Uri.EscapeDataString(assessmentId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SubmissionMarkResponse[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find a learner's submission to a specified assessment, including marks if any
		/// Responds with the learner's assessment submission and any marks for the submission.
		/// Offerings_offeringIdAnalyticsSubmissions_userEmailAssignments_assessmentIdGet offerings/{offeringId}/analytics/submissions/{userEmail}/assignments/{assessmentId}
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <param name="userEmail">user's email</param>
		/// <param name="assessmentId">assessment's id</param>
		/// <returns>Responds with the learner's assessment submission and any marks for the submission.</returns>
		public async Task<SubmissionMarkResponse[]> Offerings_offeringIdAnalyticsSubmissions_userEmailAssignments_assessmentIdGetAsync(string offeringId, string userEmail, string assessmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/analytics/submissions/"+ (userEmail==null? "" : System.Uri.EscapeDataString(userEmail))+"/assignments/"+ (assessmentId==null? "" : System.Uri.EscapeDataString(assessmentId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SubmissionMarkResponse[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find unit reactions
		/// Responds with user reactions to units in a specified offering.
		/// Offerings_offeringIdAnalyticsUnit_reactionsGet offerings/{offeringId}/analytics/unit-reactions
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <returns>Unit Reactions</returns>
		public async Task<UnitReactionsAnalyticsResponse[]> Offerings_offeringIdAnalyticsUnit_reactionsGetAsync(string offeringId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/analytics/unit-reactions";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UnitReactionsAnalyticsResponse[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find offering's assessments
		/// Responds with all assessments in an offering matching the offeringId.
		/// Offerings_offeringIdAssessmentsGet offerings/{offeringId}/assessments
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <returns>offering's assessments</returns>
		public async Task<AssessmentResponse[]> Offerings_offeringIdAssessmentsGetAsync(string offeringId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/assessments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssessmentResponse[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update assessment details
		/// Updates the assessment details for a specified assessment in an offering.
		/// Offerings_offeringIdAssessments_assessmentIdPatch offerings/{offeringId}/assessments/{assessmentId}
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <param name="assessmentId">assessment's id</param>
		/// <returns>assessment successfully updated</returns>
		public async Task<AssessmentResponse> Offerings_offeringIdAssessments_assessmentIdPatchAsync(string offeringId, string assessmentId, Assessment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/assessments/"+ (assessmentId==null? "" : System.Uri.EscapeDataString(assessmentId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssessmentResponse>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Remove assessment document
		/// Removes the assessment document file for a specified assessment in an offering.
		/// Offerings_offeringIdAssessments_assessmentIdDocuments_documentIdDelete offerings/{offeringId}/assessments/{assessmentId}/documents/{documentId}
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <param name="assessmentId">assessment's id</param>
		/// <param name="documentId">documents's id</param>
		public async Task Offerings_offeringIdAssessments_assessmentIdDocuments_documentIdDeleteAsync(string offeringId, string assessmentId, string documentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/assessments/"+ (assessmentId==null? "" : System.Uri.EscapeDataString(assessmentId))+"/documents/"+ (documentId==null? "" : System.Uri.EscapeDataString(documentId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update the due dates for a learner's quiz attempt
		/// Updates the due dates for a learner's quiz attempt specified by the assessmentId.
		/// Offerings_offeringIdAssessments_assessmentId_userEmailPatch offerings/{offeringId}/assessments/{assessmentId}/{userEmail}
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <param name="assessmentId">assessment's id</param>
		/// <param name="userEmail">user's email</param>
		public async Task Offerings_offeringIdAssessments_assessmentId_userEmailPatchAsync(string offeringId, string assessmentId, string userEmail, Offerings_offeringIdAssessments_assessmentId_userEmailPatchPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/assessments/"+ (assessmentId==null? "" : System.Uri.EscapeDataString(assessmentId))+"/"+ (userEmail==null? "" : System.Uri.EscapeDataString(userEmail));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find offering badges
		/// Responds with the badge for an offering matching the offeringId.
		/// Offerings_offeringIdBadgesGet offerings/{offeringId}/badges
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <returns>badges</returns>
		public async Task<Badge> Offerings_offeringIdBadgesGetAsync(string offeringId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/badges";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Badge>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find channels
		/// Responds with a list of channels in an offering.
		/// Offerings_offeringIdChannelsGet offerings/{offeringId}/channels
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <returns>Succesful response</returns>
		public async Task<ChannelResponse[]> Offerings_offeringIdChannelsGetAsync(string offeringId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/channels";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChannelResponse[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add channel
		/// Adds new channel to the specified offering.
		/// Offerings_offeringIdChannelsPost offerings/{offeringId}/channels
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		public async Task Offerings_offeringIdChannelsPostAsync(string offeringId, ChannelRequired requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/channels";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update channel
		/// Updates a channel in an offering.
		/// Offerings_offeringIdChannels_channelIdPatch offerings/{offeringId}/channels/{channelId}
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <param name="channelId">channel's id</param>
		/// <returns>channel successfully updated</returns>
		public async Task<ChannelResponse> Offerings_offeringIdChannels_channelIdPatchAsync(string offeringId, string channelId, Channel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/channels/"+ (channelId==null? "" : System.Uri.EscapeDataString(channelId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChannelResponse>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Remove learners from a group channel
		/// Removes a learner from the specified group channel.
		/// Offerings_offeringIdChannels_channelIdLearnersDelete offerings/{offeringId}/channels/{channelId}/learners
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <param name="channelId">channel's id</param>
		public async Task Offerings_offeringIdChannels_channelIdLearnersDeleteAsync(string offeringId, string channelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/channels/"+ (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"/learners";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find learners in a group channel
		/// Finds all learners in a specified group channel.
		/// Offerings_offeringIdChannels_channelIdLearnersGet offerings/{offeringId}/channels/{channelId}/learners
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <param name="channelId">channel's id</param>
		/// <returns>channel data</returns>
		public async Task<ChannelResponse> Offerings_offeringIdChannels_channelIdLearnersGetAsync(string offeringId, string channelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/channels/"+ (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"/learners";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChannelResponse>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add learners to a group channel
		/// Adds a learner to a specified group channel.
		/// Offerings_offeringIdChannels_channelIdLearnersPost offerings/{offeringId}/channels/{channelId}/learners
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <param name="channelId">channel's id</param>
		public async Task Offerings_offeringIdChannels_channelIdLearnersPostAsync(string offeringId, string channelId, Offerings_offeringIdChannels_channelIdLearnersPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/channels/"+ (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"/learners";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find assessment groups
		/// Responds with a list of assessment groups in an offering.
		/// Offerings_offeringIdGroupsGet offerings/{offeringId}/groups
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <returns>Succesful response</returns>
		public async Task<AssessmentGroupResponse[]> Offerings_offeringIdGroupsGetAsync(string offeringId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/groups";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssessmentGroupResponse[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add an assessment group
		/// Creates a new assessment group in an offering.
		/// Offerings_offeringIdGroupsPost offerings/{offeringId}/groups
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		public async Task Offerings_offeringIdGroupsPostAsync(string offeringId, AssessmentGroupRequired requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/groups";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find learners in an assessment group
		/// Responds with a list of learners in a specified assessment group.
		/// Offerings_offeringIdGroups_groupIdLearnersGet offerings/{offeringId}/groups/{groupId}/learners
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <param name="groupId">Assessment group id</param>
		/// <returns>Succesful response</returns>
		public async Task<UserResponse[]> Offerings_offeringIdGroups_groupIdLearnersGetAsync(string offeringId, string groupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/groups/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"/learners";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserResponse[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add a learner to an assessment group
		/// Adds a learner into the specified assessment group.
		/// Offerings_offeringIdGroups_groupIdLearnersPost offerings/{offeringId}/groups/{groupId}/learners
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <param name="groupId">Assessment group id</param>
		public async Task Offerings_offeringIdGroups_groupIdLearnersPostAsync(string offeringId, string groupId, Offerings_offeringIdGroups_groupIdLearnersPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/groups/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"/learners";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Remove a learner from an assessment group
		/// Removes a learner from the specified assessment group.
		/// Offerings_offeringIdGroups_groupIdLearners_userEmailDelete offerings/{offeringId}/groups/{groupId}/learners/{userEmail}
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <param name="groupId">Assessment group id</param>
		/// <param name="userEmail">user's email</param>
		public async Task Offerings_offeringIdGroups_groupIdLearners_userEmailDeleteAsync(string offeringId, string groupId, string userEmail, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/groups/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"/learners/"+ (userEmail==null? "" : System.Uri.EscapeDataString(userEmail));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find learners with assessments pending x days before due date within the specified offeringId
		/// Responds with learners who have one or more assessments due x days before the due date, with each assessment that is due, where x = the number of days specified in the request. The default is 3 days.
		/// Offerings_offeringIdLearnersPending_submissionGetByDays offerings/{offeringId}/learners/pending-submission
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <param name="days">days to assessment due date. Default is 3 days</param>
		/// <returns>offering's learners</returns>
		public async Task<AssessmentPendingSubmission[]> Offerings_offeringIdLearnersPending_submissionGetByDaysAsync(string offeringId, string days, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/learners/pending-submission&days=" + (days==null? "" : System.Uri.EscapeDataString(days));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssessmentPendingSubmission[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update offering category metadata
		/// Updates the offering category metadata.
		/// Offerings_offeringIdMetadataCategoryPut offerings/{offeringId}/metadata/category
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <returns>offering updated</returns>
		public async Task<OfferingMetadataResponse> Offerings_offeringIdMetadataCategoryPutAsync(string offeringId, Offerings_offeringIdMetadataCategoryPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/metadata/category";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OfferingMetadataResponse>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update offering level metadata
		/// Updates the offering level metadata.
		/// Offerings_offeringIdMetadataLevelPut offerings/{offeringId}/metadata/level
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <returns>offering updated</returns>
		public async Task<OfferingMetadataResponse> Offerings_offeringIdMetadataLevelPutAsync(string offeringId, Offerings_offeringIdMetadataLevelPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/metadata/level";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OfferingMetadataResponse>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update offering tags metadata
		/// Updates the offering tags metadata.
		/// Offerings_offeringIdMetadataTagsPut offerings/{offeringId}/metadata/tags
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <returns>offering updated</returns>
		public async Task<OfferingMetadataResponse> Offerings_offeringIdMetadataTagsPutAsync(string offeringId, Offerings_offeringIdMetadataTagsPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/metadata/tags";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OfferingMetadataResponse>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update offering topic metadata
		/// Updates the offering topic metadata.
		/// Offerings_offeringIdMetadataTopicPut offerings/{offeringId}/metadata/topic
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <returns>offering updated</returns>
		public async Task<OfferingMetadataResponse> Offerings_offeringIdMetadataTopicPutAsync(string offeringId, Offerings_offeringIdMetadataTopicPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/metadata/topic";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OfferingMetadataResponse>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find offering's users
		/// Responds with a list of users in the offering (facilitators, learners and markers.).
		/// Offerings_offeringIdUsersGetByFacilitatorsAndLearnersAndMarkers offerings/{offeringId}/users
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <param name="facilitators">If true, facilitators are included in the results.</param>
		/// <param name="learners">If true, learners are included in the results.</param>
		/// <param name="markers">If true, markers are included in the results.</param>
		/// <returns>offering's users</returns>
		public async Task<OfferingUserResponse[]> Offerings_offeringIdUsersGetByFacilitatorsAndLearnersAndMarkersAsync(string offeringId, Offerings_offeringIdUsersGetByFacilitatorsAndLearnersAndMarkersFacilitators facilitators, Offerings_offeringIdUsersGetByFacilitatorsAndLearnersAndMarkersLearners learners, Offerings_offeringIdUsersGetByFacilitatorsAndLearnersAndMarkersMarkers markers, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/users&facilitators=" + facilitators+"&learners=" + learners+"&markers=" + markers;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OfferingUserResponse[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Adds user to the offering
		/// Adds one or more users to the offering.
		/// Offerings_offeringIdUsersPost offerings/{offeringId}/users
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		public async Task Offerings_offeringIdUsersPostAsync(string offeringId, OfferingUser[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/users";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Remove learners from coach's marking list
		/// Removes an array of learners from coach's marking list.
		/// Offerings_offeringIdUsers_markerEmailMarksDelete offerings/{offeringId}/users/{markerEmail}/marks
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <param name="markerEmail">marker's email</param>
		/// <returns>learners marked by the marker</returns>
		public async Task<OfferingUser[]> Offerings_offeringIdUsers_markerEmailMarksDeleteAsync(string offeringId, string markerEmail, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/users/"+ (markerEmail==null? "" : System.Uri.EscapeDataString(markerEmail))+"/marks";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OfferingUser[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find Learners marked by a coach
		/// Responds with all learners marked by the specified coach.
		/// Offerings_offeringIdUsers_markerEmailMarksGet offerings/{offeringId}/users/{markerEmail}/marks
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <param name="markerEmail">marker's email</param>
		/// <returns>learners marked by the marker</returns>
		public async Task<OfferingUser[]> Offerings_offeringIdUsers_markerEmailMarksGetAsync(string offeringId, string markerEmail, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/users/"+ (markerEmail==null? "" : System.Uri.EscapeDataString(markerEmail))+"/marks";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OfferingUser[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add learners to be marked by a coach
		/// Adds an array of learners to be marked by the specified coach.
		/// Offerings_offeringIdUsers_markerEmailMarksPost offerings/{offeringId}/users/{markerEmail}/marks
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <param name="markerEmail">marker's email</param>
		/// <param name="requestBody">array of learners e-mails</param>
		/// <returns>learners marked by the marker</returns>
		public async Task<OfferingUser[]> Offerings_offeringIdUsers_markerEmailMarksPostAsync(string offeringId, string markerEmail, string[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/users/"+ (markerEmail==null? "" : System.Uri.EscapeDataString(markerEmail))+"/marks";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OfferingUser[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes user from the offering
		/// Removes a user from the offering.
		/// Offerings_offeringIdUsers_userEmailDelete offerings/{offeringId}/users/{userEmail}
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <param name="userEmail">user's email</param>
		public async Task Offerings_offeringIdUsers_userEmailDeleteAsync(string offeringId, string userEmail, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/users/"+ (userEmail==null? "" : System.Uri.EscapeDataString(userEmail));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Reset user's assessment to draft state
		/// Resets the user's submitted assessment to a draft state.
		/// Offerings_offeringIdUsers_userEmailAssessments_assessmentIdDelete offerings/{offeringId}/users/{userEmail}/assessments/{assessmentId}
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <param name="userEmail">user's email</param>
		/// <param name="assessmentId">assessment's id</param>
		public async Task Offerings_offeringIdUsers_userEmailAssessments_assessmentIdDeleteAsync(string offeringId, string userEmail, string assessmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/users/"+ (userEmail==null? "" : System.Uri.EscapeDataString(userEmail))+"/assessments/"+ (assessmentId==null? "" : System.Uri.EscapeDataString(assessmentId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Award badge
		/// Awards a badge to a user in the offering.
		/// Offerings_offeringIdUsers_userEmailBadgesAwardPost offerings/{offeringId}/users/{userEmail}/badges/award
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <param name="userEmail">user's email</param>
		public async Task Offerings_offeringIdUsers_userEmailBadgesAwardPostAsync(string offeringId, string userEmail, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/users/"+ (userEmail==null? "" : System.Uri.EscapeDataString(userEmail))+"/badges/award";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find learner's open response assessment submissions
		/// Responds with open response assessment submissions by a learner in an offering.
		/// Offerings_offeringIdUsers_userEmailSubmissionsOpen_responseGet offerings/{offeringId}/users/{userEmail}/submissions/open-response
		/// </summary>
		/// <param name="offeringId">offering's id</param>
		/// <param name="userEmail">user's email</param>
		/// <returns>user open response submission and mark details</returns>
		public async Task<Assignments[]> Offerings_offeringIdUsers_userEmailSubmissionsOpen_responseGetAsync(string offeringId, string userEmail, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/users/"+ (userEmail==null? "" : System.Uri.EscapeDataString(userEmail))+"/submissions/open-response";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Assignments[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the current organisation
		/// Returns the current organisation info.
		/// OrgGet org
		/// </summary>
		/// <returns>organisation summary data</returns>
		public async Task<OrgResponse> OrgGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OrgResponse>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add new user
		/// Creates a new user.
		/// UsersPost users
		/// </summary>
		/// <param name="requestBody">user</param>
		public async Task UsersPostAsync(User requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find learner progress in all offerings
		/// Responds with all learners' progress in all offerings.
		/// UsersAllProgressGetByTopAndOrderbyAndFilter users/all/progress
		/// </summary>
		/// <param name="top">Returns only the first n results.</param>
		/// <param name="orderby">Sorts the results.</param>
		/// <param name="filter">Filters the results, based on a Boolean condition.</param>
		/// <returns>Learners progress</returns>
		public async Task<object> UsersAllProgressGetByTopAndOrderbyAndFilterAsync(string top, string orderby, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/all/progress?$top=" + (top==null? "" : System.Uri.EscapeDataString(top))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find user by email
		/// Responds with a user matching the specified email.
		/// Users_userEmailGet users/{userEmail}
		/// </summary>
		/// <param name="userEmail">user's email</param>
		/// <returns>user data</returns>
		public async Task<UserResponse> Users_userEmailGetAsync(string userEmail, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (userEmail==null? "" : System.Uri.EscapeDataString(userEmail));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserResponse>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update user
		/// Updates the specified user by email.
		/// Users_userEmailPatch users/{userEmail}
		/// </summary>
		/// <param name="userEmail">user's email</param>
		/// <returns>user updated</returns>
		public async Task<UserResponse> Users_userEmailPatchAsync(string userEmail, User requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (userEmail==null? "" : System.Uri.EscapeDataString(userEmail));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserResponse>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find user's badges
		/// Responds with all badges that the specified user has been awarded.
		/// Users_userEmailBadgesGet users/{userEmail}/badges
		/// </summary>
		/// <param name="userEmail">user's email</param>
		/// <returns>user's badges</returns>
		public async Task<UserBadge[]> Users_userEmailBadgesGetAsync(string userEmail, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (userEmail==null? "" : System.Uri.EscapeDataString(userEmail))+"/badges";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserBadge[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Resend invitation email
		/// Re-sends an invitation e-mail to the specified user.
		/// Users_userEmailInvite_emailPost users/{userEmail}/invite-email
		/// </summary>
		/// <param name="userEmail">user's email</param>
		public async Task Users_userEmailInvite_emailPostAsync(string userEmail, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (userEmail==null? "" : System.Uri.EscapeDataString(userEmail))+"/invite-email";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find user's offerings
		/// Responds with all offerings that the user in.
		/// Users_userEmailOfferingsGet users/{userEmail}/offerings
		/// </summary>
		/// <param name="userEmail">user's email</param>
		/// <returns>user's offerings</returns>
		public async Task<OfferingMetadataResponse[]> Users_userEmailOfferingsGetAsync(string userEmail, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (userEmail==null? "" : System.Uri.EscapeDataString(userEmail))+"/offerings";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OfferingMetadataResponse[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Adds the user to the specified offerings as a learner
		/// Adds a user to an array of offerings by offeringId.
		/// Users_userEmailOfferingsPost users/{userEmail}/offerings
		/// </summary>
		/// <param name="userEmail">user's email</param>
		/// <param name="requestBody">offering ids</param>
		/// <returns>user's offerings</returns>
		public async Task<OfferingMetadataResponse[]> Users_userEmailOfferingsPostAsync(string userEmail, string[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (userEmail==null? "" : System.Uri.EscapeDataString(userEmail))+"/offerings";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OfferingMetadataResponse[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find learner's progress in a specified offering
		/// Responds with the learner's progress in a specified offering.
		/// Users_userEmailOfferings_offeringIdProgressGet users/{userEmail}/offerings/{offeringId}/progress
		/// </summary>
		/// <param name="userEmail">user's email</param>
		/// <param name="offeringId">offering's id</param>
		/// <returns>user's offerings</returns>
		public async Task<Users_userEmailOfferings_offeringIdProgressGetReturn> Users_userEmailOfferings_offeringIdProgressGetAsync(string userEmail, string offeringId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (userEmail==null? "" : System.Uri.EscapeDataString(userEmail))+"/offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/progress";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Users_userEmailOfferings_offeringIdProgressGetReturn>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add permission to user
		/// Adds additional permissions to the specified user.
		/// Users_userEmailPermissions_permissionNamePost users/{userEmail}/permissions/{permissionName}
		/// </summary>
		/// <param name="userEmail">user's email</param>
		/// <param name="permissionName">permission name</param>
		/// <returns>permission successfully added to user</returns>
		public async Task<UserResponse> Users_userEmailPermissions_permissionNamePostAsync(string userEmail, Users_userEmailPermissions_permissionNamePostPermissionName permissionName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (userEmail==null? "" : System.Uri.EscapeDataString(userEmail))+"/permissions/"+permissionName;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserResponse>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find learner's progress in offerings
		/// Responds with the specified learner's progress in all offerings.
		/// Users_userEmailProgressGet users/{userEmail}/progress
		/// </summary>
		/// <param name="userEmail">user's email</param>
		/// <returns>Learner Progress</returns>
		public async Task<LearnerResponse> Users_userEmailProgressGetAsync(string userEmail, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (userEmail==null? "" : System.Uri.EscapeDataString(userEmail))+"/progress";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LearnerResponse>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Suspend user
		/// Suspends the specified user's account.
		/// Users_userEmailSuspendPut users/{userEmail}/suspend
		/// </summary>
		/// <param name="userEmail">user's email</param>
		public async Task Users_userEmailSuspendPutAsync(string userEmail, SuspendedRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (userEmail==null? "" : System.Uri.EscapeDataString(userEmail))+"/suspend";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Transfer a user between offerings
		/// Moves the user's access and progress from one offering to another.
		/// Users_userEmailTransferPatch users/{userEmail}/transfer
		/// </summary>
		/// <param name="userEmail">user's email</param>
		/// <param name="requestBody">transfer_data</param>
		/// <returns>Updated user information</returns>
		public async Task Users_userEmailTransferPatchAsync(string userEmail, TransferRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (userEmail==null? "" : System.Uri.EscapeDataString(userEmail))+"/transfer";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public class Courses_contentIdMetadataCategoryPutPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
	}
	
	public class Courses_contentIdMetadataLevelPutPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="level")]
		public string Level { get; set; }
	}
	
	public class Courses_contentIdMetadataTagsPutPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
	}
	
	public class Courses_contentIdMetadataTopicPutPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="topic")]
		public string Topic { get; set; }
	}
	
	public class Courses_rootContentIdPermissions_userEmailPostPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="isBuilder")]
		public System.Nullable<System.Boolean> IsBuilder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isReviewer")]
		public System.Nullable<System.Boolean> IsReviewer { get; set; }
	}
	
	public enum Offerings_offeringIdAnalyticsPulsesResponsesGetByPulseTypeAndResponseTimePulseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="submit_text")]
		submit_text = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MCQ")]
		MCQ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="spatial_triangular")]
		spatial_triangular = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="spatial_planar")]
		spatial_planar = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="spatial_linear")]
		spatial_linear = 4,
	}
	
	public class Offerings_offeringIdAssessments_assessmentId_userEmailPatchPatchBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="dueDate")]
		public System.Nullable<System.DateTimeOffset> DueDate { get; set; }
	}
	
	public class Offerings_offeringIdChannels_channelIdLearnersPostPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
	}
	
	public class Offerings_offeringIdGroups_groupIdLearnersPostPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
	}
	
	public class Offerings_offeringIdMetadataCategoryPutPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
	}
	
	public class Offerings_offeringIdMetadataLevelPutPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="level")]
		public string Level { get; set; }
	}
	
	public class Offerings_offeringIdMetadataTagsPutPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
	}
	
	public class Offerings_offeringIdMetadataTopicPutPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="topic")]
		public string Topic { get; set; }
	}
	
	public enum Offerings_offeringIdUsersGetByFacilitatorsAndLearnersAndMarkersFacilitators
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 1,
	}
	
	public enum Offerings_offeringIdUsersGetByFacilitatorsAndLearnersAndMarkersLearners
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 1,
	}
	
	public enum Offerings_offeringIdUsersGetByFacilitatorsAndLearnersAndMarkersMarkers
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 1,
	}
	
	public class Users_userEmailOfferings_offeringIdProgressGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="completion")]
		public string Completion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
	}
	
	public enum Users_userEmailPermissions_permissionNamePostPermissionName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="builder")]
		builder = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="manager")]
		manager = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
