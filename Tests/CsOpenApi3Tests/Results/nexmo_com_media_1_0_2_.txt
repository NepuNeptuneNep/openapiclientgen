//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Media
	{
		
		/// <summary>
		/// The ID of your Nexmo account. This is the same as your API key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// An identifier for the content. This will change if the content of the file has been changed (i.e. if you upload a new version of the file). For more information see Wikipedia: [HTTP ETag](https://en.wikipedia.org/wiki/HTTP_ETag)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// A UUID representing the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The maximum number of times the file may be downloaded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_downloads_allowed")]
		public System.Nullable<System.Int32> Max_downloads_allowed { get; set; }
		
		/// <summary>
		/// The size of the file in bytes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="media_size")]
		public System.Nullable<System.Int32> Media_size { get; set; }
		
		/// <summary>
		/// A user set string containing metadata about the media file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata_primary")]
		public string Metadata_primary { get; set; }
		
		/// <summary>
		/// A user set string containing further metadata about the media file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata_secondary")]
		public string Metadata_secondary { get; set; }
		
		/// <summary>
		/// The IETF MIME type of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mime_type")]
		public string Mime_type { get; set; }
		
		/// <summary>
		/// The filename of the object as it was originally uploaded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="original_file_name")]
		public string Original_file_name { get; set; }
		
		/// <summary>
		/// Whether the item is available for download without authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public")]
		public System.Nullable<System.Boolean> Public { get; set; }
		
		/// <summary>
		/// An internal identifier of how the file is stored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="store_id")]
		public string Store_id { get; set; }
		
		/// <summary>
		/// A timestamp for the time that the file was created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time_created")]
		public string Time_created { get; set; }
		
		/// <summary>
		/// A timestamp for the time that the file was last modified
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time_last_updated")]
		public string Time_last_updated { get; set; }
		
		/// <summary>
		/// The number of times the file has been downloaded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="times_downloaded")]
		public System.Nullable<System.Int32> Times_downloaded { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List and search media items
		/// Retrieve information about multiple media items with the ability to search and paginate.
		/// List_and_search_media_items 
		/// </summary>
		/// <param name="order">The order of search results.</param>
		/// <param name="page_index">Which page to retrieve in pagination</param>
		/// <param name="page_size">How many items at most per page</param>
		/// <param name="start_time">Retrieve results created on or after this timestap.</param>
		/// <param name="end_time">Retrieve results created on or before this timestamp.</param>
		/// <returns>Successfully retrieved</returns>
		public async Task<List_and_search_media_itemsReturn> List_and_search_media_itemsAsync(List_and_search_media_itemsOrder order, int page_index, int page_size, string start_time, string end_time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "?order=" + order+"&page_index="+page_index+"&page_size="+page_size+"&start_time=" + (start_time==null? "" : System.Uri.EscapeDataString(start_time))+"&end_time=" + (end_time==null? "" : System.Uri.EscapeDataString(end_time));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<List_and_search_media_itemsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a media item
		/// Delete a previously created media item by ID.
		/// Delete_a_media_item :id
		/// </summary>
		public async Task Delete_a_media_itemAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ":id";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a media item
		/// Retrieve information about a single media item
		/// Retrieve_a_media_item :id/info
		/// </summary>
		/// <returns>Successfully retrieved</returns>
		public async Task<Media> Retrieve_a_media_itemAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ":id/info";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Media>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum List_and_search_media_itemsOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ascending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		descending = 1,
	}
	
	public class List_and_search_media_itemsReturn
	{
		
		/// <summary>
		/// A collection of media items. See [retrieve a media item](#retrieve-a-media-item) for a description of the returned fields
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public List_and_search_media_itemsReturn_embedded _embedded { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public List_and_search_media_itemsReturn_links _links { get; set; }
		
		/// <summary>
		/// The total number of records returned by your request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// The `page_index` used in your request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page_index")]
		public System.Nullable<System.Int32> Page_index { get; set; }
		
		/// <summary>
		/// The amount of records returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
	}
	
	public class List_and_search_media_itemsReturn_embedded
	{
		
		[System.Runtime.Serialization.DataMember(Name="media")]
		public Media[] Media { get; set; }
	}
	
	public class List_and_search_media_itemsReturn_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="first")]
		public List_and_search_media_itemsReturn_linksFirst First { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last")]
		public List_and_search_media_itemsReturn_linksLast Last { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public List_and_search_media_itemsReturn_linksSelf Self { get; set; }
	}
	
	public class List_and_search_media_itemsReturn_linksFirst
	{
		
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; } = "";
	}
	
	public class List_and_search_media_itemsReturn_linksLast
	{
		
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; } = "";
	}
	
	public class List_and_search_media_itemsReturn_linksSelf
	{
		
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; } = "";
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
