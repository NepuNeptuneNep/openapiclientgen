//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class _18_24
	{
		
		[System.Runtime.Serialization.DataMember(Name="average")]
		public System.Nullable<System.Int32> Average { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="multiplicity")]
		public System.Nullable<System.Int32> Multiplicity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="percentile")]
		public System.Nullable<System.Int32> Percentile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statistical_info")]
		public Statistical_info_18 Statistical_info { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stdev")]
		public System.Nullable<System.Int32> Stdev { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Statistical_info_18
	{
		
		[System.Runtime.Serialization.DataMember(Name="error_range")]
		public System.Nullable<System.Int32> Error_range { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lower_bound")]
		public System.Nullable<System.Int32> Lower_bound { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="upper_bound")]
		public System.Nullable<System.Int32> Upper_bound { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class _25_34
	{
		
		[System.Runtime.Serialization.DataMember(Name="average")]
		public System.Nullable<System.Int32> Average { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="multiplicity")]
		public System.Nullable<System.Int32> Multiplicity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="percentile")]
		public System.Nullable<System.Int32> Percentile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statistical_info")]
		public Statistical_info_25 Statistical_info { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stdev")]
		public System.Nullable<System.Int32> Stdev { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Statistical_info_25
	{
		
		[System.Runtime.Serialization.DataMember(Name="error_range")]
		public System.Nullable<System.Int32> Error_range { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lower_bound")]
		public System.Nullable<System.Int32> Lower_bound { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="upper_bound")]
		public System.Nullable<System.Int32> Upper_bound { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class _35_44
	{
		
		[System.Runtime.Serialization.DataMember(Name="average")]
		public System.Nullable<System.Int32> Average { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="multiplicity")]
		public System.Nullable<System.Int32> Multiplicity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="percentile")]
		public System.Nullable<System.Int32> Percentile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statistical_info")]
		public Statistical_info_35 Statistical_info { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stdev")]
		public System.Nullable<System.Int32> Stdev { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Statistical_info_35
	{
		
		[System.Runtime.Serialization.DataMember(Name="error_range")]
		public System.Nullable<System.Int32> Error_range { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lower_bound")]
		public System.Nullable<System.Int32> Lower_bound { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="upper_bound")]
		public System.Nullable<System.Int32> Upper_bound { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class _400_Error
	{
		
		[System.Runtime.Serialization.DataMember(Name="error_code_msg")]
		public string Error_code_msg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; }
		
		[System.ComponentModel.DefaultValue("false")]
		[System.Runtime.Serialization.DataMember(Name="success")]
		public string Success { get; set; } = "false";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class _401_Error
	{
		
		[System.Runtime.Serialization.DataMember(Name="error_code_msg")]
		public string Error_code_msg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; }
		
		[System.ComponentModel.DefaultValue("false")]
		[System.Runtime.Serialization.DataMember(Name="success")]
		public string Success { get; set; } = "false";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class _403_Error
	{
		
		[System.Runtime.Serialization.DataMember(Name="error_code_msg")]
		public string Error_code_msg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; }
		
		[System.ComponentModel.DefaultValue("false")]
		[System.Runtime.Serialization.DataMember(Name="success")]
		public string Success { get; set; } = "false";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class _404_Error
	{
		
		[System.Runtime.Serialization.DataMember(Name="error_code_msg")]
		public string Error_code_msg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; }
		
		[System.ComponentModel.DefaultValue("false")]
		[System.Runtime.Serialization.DataMember(Name="success")]
		public string Success { get; set; } = "false";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class _500_Error
	{
		
		[System.Runtime.Serialization.DataMember(Name="error_code_msg")]
		public string Error_code_msg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; }
		
		[System.ComponentModel.DefaultValue("false")]
		[System.Runtime.Serialization.DataMember(Name="success")]
		public string Success { get; set; } = "false";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Application_Status
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Application_response Data { get; set; }
		
		[System.ComponentModel.DefaultValue("success")]
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; } = "success";
		
		[System.ComponentModel.DefaultValue("true")]
		[System.Runtime.Serialization.DataMember(Name="success")]
		public string Success { get; set; } = "true";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Application_response
	{
		
		[System.Runtime.Serialization.DataMember(Name="remaining_count")]
		public System.Nullable<System.Int32> Remaining_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reports")]
		public Report_info Reports { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_reports_count")]
		public System.Nullable<System.Int32> Total_reports_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_reports_done")]
		public System.Nullable<System.Int32> Total_reports_done { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Report_info
	{
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public string Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report_type")]
		public string Report_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Combined_Age
	{
		
		[System.Runtime.Serialization.DataMember(Name="18 - 24")]
		public _18_24 _18___24 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="25 - 34")]
		public _25_34 _25___34 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="35 - 44")]
		public _35_44 _35___44 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_Tweet
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Create_tweet_response Data { get; set; }
		
		[System.ComponentModel.DefaultValue("success")]
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; } = "success";
		
		[System.ComponentModel.DefaultValue("true")]
		[System.Runtime.Serialization.DataMember(Name="success")]
		public string Success { get; set; } = "true";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_tweet_response
	{
		
		[System.Runtime.Serialization.DataMember(Name="aggregate_report_hash")]
		public string Aggregate_report_hash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="daily_report_hash")]
		public string Daily_report_hash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="monthly_report_hash")]
		public string Monthly_report_hash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weekly_report_hash")]
		public string Weekly_report_hash { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_Twitter
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Follower_create_response Data { get; set; }
		
		[System.ComponentModel.DefaultValue("success")]
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; } = "success";
		
		[System.ComponentModel.DefaultValue("true")]
		[System.Runtime.Serialization.DataMember(Name="success")]
		public string Success { get; set; } = "true";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Follower_create_response
	{
		
		[System.Runtime.Serialization.DataMember(Name="report_hash")]
		public string Report_hash { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Custom_Create
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Custom_create_response Data { get; set; }
		
		[System.ComponentModel.DefaultValue("success")]
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; } = "success";
		
		[System.ComponentModel.DefaultValue("true")]
		[System.Runtime.Serialization.DataMember(Name="success")]
		public string Success { get; set; } = "true";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Custom_create_response
	{
		
		[System.Runtime.Serialization.DataMember(Name="report_hash")]
		public string Report_hash { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Custom_Generate
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Custom_generate_response Data { get; set; }
		
		[System.ComponentModel.DefaultValue("success")]
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; } = "success";
		
		[System.ComponentModel.DefaultValue("true")]
		[System.Runtime.Serialization.DataMember(Name="success")]
		public string Success { get; set; } = "true";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Custom_generate_response
	{
		
		[System.Runtime.Serialization.DataMember(Name="upload_hash")]
		public string Upload_hash { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Custom_Insert
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Custom_insert_response Data { get; set; }
		
		[System.ComponentModel.DefaultValue("success")]
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; } = "success";
		
		[System.ComponentModel.DefaultValue("true")]
		[System.Runtime.Serialization.DataMember(Name="success")]
		public string Success { get; set; } = "true";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Custom_insert_response
	{
		
		[System.Runtime.Serialization.DataMember(Name="distinct_relations")]
		public System.Nullable<System.Int32> Distinct_relations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_relations")]
		public System.Nullable<System.Int32> Total_relations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Female
	{
		
		[System.Runtime.Serialization.DataMember(Name="average")]
		public System.Nullable<System.Int32> Average { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="multiplicity")]
		public System.Nullable<System.Int32> Multiplicity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="percentile")]
		public System.Nullable<System.Int32> Percentile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statistical_info")]
		public Statistical_info_f Statistical_info { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stdev")]
		public System.Nullable<System.Int32> Stdev { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Statistical_info_f
	{
		
		[System.Runtime.Serialization.DataMember(Name="error_range")]
		public System.Nullable<System.Int32> Error_range { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lower_bound")]
		public System.Nullable<System.Int32> Lower_bound { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="upper_bound")]
		public System.Nullable<System.Int32> Upper_bound { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Male
	{
		
		[System.Runtime.Serialization.DataMember(Name="average")]
		public System.Nullable<System.Int32> Average { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="multiplicity")]
		public System.Nullable<System.Int32> Multiplicity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="percentile")]
		public System.Nullable<System.Int32> Percentile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statistical_info")]
		public Statistical_info_m Statistical_info { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stdev")]
		public System.Nullable<System.Int32> Stdev { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Statistical_info_m
	{
		
		[System.Runtime.Serialization.DataMember(Name="error_range")]
		public System.Nullable<System.Int32> Error_range { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lower_bound")]
		public System.Nullable<System.Int32> Lower_bound { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="upper_bound")]
		public System.Nullable<System.Int32> Upper_bound { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Report_Dates
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public int[] Data { get; set; }
		
		[System.ComponentModel.DefaultValue("success")]
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; } = "success";
		
		[System.ComponentModel.DefaultValue("true")]
		[System.Runtime.Serialization.DataMember(Name="success")]
		public string Success { get; set; } = "true";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Report_Status
	{
		
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; }
		
		[System.ComponentModel.DefaultValue("true")]
		[System.Runtime.Serialization.DataMember(Name="success")]
		public string Success { get; set; } = "true";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Report_Success
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Report_response Data { get; set; }
		
		[System.ComponentModel.DefaultValue("success")]
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; } = "success";
		
		[System.ComponentModel.DefaultValue("true")]
		[System.Runtime.Serialization.DataMember(Name="success")]
		public string Success { get; set; } = "true";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Report_response
	{
		
		[System.Runtime.Serialization.DataMember(Name="Combined Age")]
		public Combined_Age Combined_Age { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Sex Sex { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Sex
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Female Female { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Male Male { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Used to understand API usage
		/// Remaining window and remaining count details, also returns reports that have been generated by this account.
		/// 
		/// ApplicationsStatusGetByKey applications/status/
		/// </summary>
		/// <param name="key">User application key</param>
		/// <returns>Success</returns>
		public async Task<Application_Status> ApplicationsStatusGetByKeyAsync(string key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications/status/?key=" + (key==null? "" : System.Uri.EscapeDataString(key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Application_Status>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Obtain report output
		/// Output is ordered by Demographic and followed by Affinity information. For each data point the following metrics are provided value, count, mean, percentile, multiplicity and average. For Geographic, and Demographic data points an additional statistical_info metric will be present with information regarding statistical relevance.
		/// ReportsGetByReport_hashAndBaselineAndReport_dateAndSample reports/
		/// </summary>
		/// <param name="report_hash">Unique report hash</param>
		/// <param name="baseline">Default value will be 'world'</param>
		/// <param name="report_date">report_date represents a Unix timestamp of when the report was generated. Default value will be the latest report generated. You can request the /report/dates/ endpoint in order to obtain available timestamps. Date must be in the future.</param>
		/// <param name="sample">Sample report indicator</param>
		/// <returns>Success</returns>
		public async Task<Report_Success> ReportsGetByReport_hashAndBaselineAndReport_dateAndSampleAsync(string report_hash, int baseline, int report_date, int sample, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/?report_hash=" + (report_hash==null? "" : System.Uri.EscapeDataString(report_hash))+"&baseline="+baseline+"&report_date="+report_date+"&sample="+sample;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Report_Success>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Obtain report output
		/// Output is ordered by Demographic and followed by Affinity information. For each data point the following metrics are provided value, count, mean, percentile, multiplicity and average. For Geographic, and Demographic data points an additional statistical_info metric will be present with information regarding statistical relevance.
		/// 
		/// ReportsPostByReport_hashAndBaselineAndReport_dateAndSample reports/
		/// </summary>
		/// <param name="report_hash">Unique report hash</param>
		/// <param name="baseline">Default value will be 'world'</param>
		/// <param name="report_date">report_date represents a Unix timestamp of when the report was generated. Default value will be the latest report generated. You can request the /report/dates/ endpoint in order to obtain available timestamps. Date must be in the future.</param>
		/// <param name="sample">Sample report indicator</param>
		/// <returns>Success</returns>
		public async Task<Report_Success> ReportsPostByReport_hashAndBaselineAndReport_dateAndSampleAsync(string report_hash, int baseline, int report_date, int sample, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/?report_hash=" + (report_hash==null? "" : System.Uri.EscapeDataString(report_hash))+"&baseline="+baseline+"&report_date="+report_date+"&sample="+sample;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Report_Success>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Step 3 of executing custom report
		/// Used to create a custom report. This report treats the list of ids or handles as the audience (not their followers as in the twitter report). To create follower or tweet reports other methods must be used.
		/// 
		/// ReportsCustomCreateGetByUpload_hashAndFilter reports/custom/create/
		/// </summary>
		/// <param name="upload_hash">Upload hash to be used for inserting handles</param>
		/// <param name="filter">Filtering options to be used when creating a filtered report. The options must be in JSON form, example: {'gender':['male'],'ages':['18-24'],'countries':['usa']}</param>
		public async Task ReportsCustomCreateGetByUpload_hashAndFilterAsync(string upload_hash, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/custom/create/?upload_hash=" + (upload_hash==null? "" : System.Uri.EscapeDataString(upload_hash))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Step 3 of executing custom report
		/// Used to create a custom report. This report treats the list of ids or handles as the audience (not their followers as in the twitter report). To create follower or tweet reports other methods must be used.
		/// 
		/// ReportsCustomCreatePostByUpload_hashAndFilter reports/custom/create/
		/// </summary>
		/// <param name="upload_hash">Upload hash to be used for inserting handles</param>
		/// <param name="filter">Filtering options to be used when creating a filtered report. The options must be in JSON form, example: {'gender':['male'],'ages':['18-24'],'countries':['usa']}</param>
		public async Task ReportsCustomCreatePostByUpload_hashAndFilterAsync(string upload_hash, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/custom/create/?upload_hash=" + (upload_hash==null? "" : System.Uri.EscapeDataString(upload_hash))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Step 1 of executing custom report
		/// Used to create a custom report. This report treats the list of ids or handles as the audience (not their followers as in the twitter report). To create follower or tweet reports other methods must be used.
		/// 
		/// ReportsCustomGenerateGetByReport_name reports/custom/generate/
		/// </summary>
		/// <param name="report_name">Name of the report</param>
		/// <returns>Success</returns>
		public async Task<Custom_Generate> ReportsCustomGenerateGetByReport_nameAsync(string report_name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/custom/generate/?report_name=" + (report_name==null? "" : System.Uri.EscapeDataString(report_name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Custom_Generate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Step 1 of executing custom report
		/// Used to create a custom report. This report treats the list of ids or handles as the audience (not their followers as in the twitter report). To create follower or tweet reports other methods must be used.
		/// 
		/// ReportsCustomGeneratePostByReport_name reports/custom/generate/
		/// </summary>
		/// <param name="report_name">Name of the report</param>
		/// <returns>Success</returns>
		public async Task<Custom_Generate> ReportsCustomGeneratePostByReport_nameAsync(string report_name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/custom/generate/?report_name=" + (report_name==null? "" : System.Uri.EscapeDataString(report_name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Custom_Generate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Step 2 of executing custom report
		/// Inserting twitter ids or handles into a custom report. This is used for custom reports only
		/// 
		/// ReportsCustomInsertGetByUpload_hashAndIds reports/custom/insert/
		/// </summary>
		/// <param name="upload_hash">Upload hash to be used for inserting handles</param>
		/// <param name="ids">List of twitter ids, separated by commas, to be inserted into report. Ids must be enclosed with brackets ie. [177490485] or [177490485,23423434]</param>
		public async Task ReportsCustomInsertGetByUpload_hashAndIdsAsync(string upload_hash, string[] ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/custom/insert/?upload_hash=" + (upload_hash==null? "" : System.Uri.EscapeDataString(upload_hash))+"&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Step 2 of executing custom report
		/// Inserting twitter ids or handles into a custom report. This is used for custom reports only
		/// 
		/// ReportsCustomInsertPostByUpload_hashAndIds reports/custom/insert/
		/// </summary>
		/// <param name="upload_hash">Upload hash to be used for inserting handles</param>
		/// <param name="ids">List of twitter ids, separated by commas, to be inserted into report. Ids must be enclosed with brackets ie. [177490485] or [177490485,23423434]</param>
		public async Task ReportsCustomInsertPostByUpload_hashAndIdsAsync(string upload_hash, string[] ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/custom/insert/?upload_hash=" + (upload_hash==null? "" : System.Uri.EscapeDataString(upload_hash))+"&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get report dates available for a specific report
		/// Get report dates available for a specific report.
		/// 
		/// ReportsDatesGetByReport_hash reports/dates/
		/// </summary>
		/// <param name="report_hash">Unique report hash</param>
		/// <returns>Success</returns>
		public async Task<Report_Dates> ReportsDatesGetByReport_hashAsync(string report_hash, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/dates/?report_hash=" + (report_hash==null? "" : System.Uri.EscapeDataString(report_hash));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Report_Dates>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get report dates available for a specific report
		/// Get report dates available for a specific report.
		/// 
		/// ReportsDatesPostByReport_hash reports/dates/
		/// </summary>
		/// <param name="report_hash">Unique report hash</param>
		/// <returns>Success</returns>
		public async Task<Report_Dates> ReportsDatesPostByReport_hashAsync(string report_hash, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/dates/?report_hash=" + (report_hash==null? "" : System.Uri.EscapeDataString(report_hash));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Report_Dates>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of generated reports
		/// Returns a list of custom reports generated by user (report name to upload hash etc).
		/// 
		/// ReportsStatusGetByReport_hash reports/status/
		/// </summary>
		/// <param name="report_hash">Unique hash belonging to report</param>
		/// <returns>Success</returns>
		public async Task<Report_Status> ReportsStatusGetByReport_hashAsync(string report_hash, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/status/?report_hash=" + (report_hash==null? "" : System.Uri.EscapeDataString(report_hash));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Report_Status>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of generated reports
		/// Returns a list of custom reports generated by user (report name to upload hash etc).
		/// 
		/// ReportsStatusPostByReport_hash reports/status/
		/// </summary>
		/// <param name="report_hash">Unique hash belonging to report</param>
		/// <returns>Success</returns>
		public async Task<Report_Status> ReportsStatusPostByReport_hashAsync(string report_hash, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/status/?report_hash=" + (report_hash==null? "" : System.Uri.EscapeDataString(report_hash));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Report_Status>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Used to create tweet reports
		/// This report details the audience of the users who have tweeted content that matches what was provided in the keywords. To create custom or twitter reports other methods must be used.
		/// 
		/// ReportsTweetCreateGetByReport_nameAndStart_dateAndEnd_dateAndTermsAndFilter reports/tweet/create/
		/// </summary>
		/// <param name="report_name">Name of report</param>
		/// <param name="start_date">A unix timestamp. start_date will be set to the previous midnight.</param>
		/// <param name="end_date">A unix timestamp. end_date will be set to the next midnight.</param>
		/// <param name="terms">If you are tracking a single term, then the keyword itself is suffice otherwise, tracking multiple terms must be in JSON form, example '[{"operator":"","word":"http://google.com"},{"operator":"or","word":"#test"},{"operator":"and","word":"test2"}]' Which results in filtering tweets containing 'http://google.com' OR '#test' AND 'test2'. (NOTE) Make sure to URL encode the terms value for multiple terms.</param>
		/// <param name="filter">Filtering options to be used when creating a filtered report. The options must be in JSON form, example: {'gender':['male'],'ages':['18-24'],'countries':['usa']}</param>
		public async Task ReportsTweetCreateGetByReport_nameAndStart_dateAndEnd_dateAndTermsAndFilterAsync(string report_name, int start_date, int end_date, string terms, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/tweet/create/?report_name=" + (report_name==null? "" : System.Uri.EscapeDataString(report_name))+"&start_date="+start_date+"&end_date="+end_date+"&terms=" + (terms==null? "" : System.Uri.EscapeDataString(terms))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Used to create tweet reports
		/// This report details the audience of the users who have tweeted content that matches what was provided in the keywords. To create custom or twitter reports other methods must be used.
		/// 
		/// ReportsTweetCreatePostByReport_nameAndStart_dateAndEnd_dateAndTermsAndFilter reports/tweet/create/
		/// </summary>
		/// <param name="report_name">Name of report</param>
		/// <param name="start_date">A unix timestamp. start_date will be set to the previous midnight.</param>
		/// <param name="end_date">A unix timestamp. end_date will be set to the next midnight.</param>
		/// <param name="terms">If you are tracking a single term, then the keyword itself is suffice otherwise, tracking multiple terms must be in JSON form, example '[{"operator":"","word":"http://google.com"},{"operator":"or","word":"#test"},{"operator":"and","word":"test2"}]' Which results in filtering tweets containing 'http://google.com' OR '#test' AND 'test2'. (NOTE) Make sure to URL encode the terms value for multiple terms.</param>
		/// <param name="filter">Filtering options to be used when creating a filtered report. The options must be in JSON form, example: {'gender':['male'],'ages':['18-24'],'countries':['usa']}</param>
		public async Task ReportsTweetCreatePostByReport_nameAndStart_dateAndEnd_dateAndTermsAndFilterAsync(string report_name, int start_date, int end_date, string terms, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/tweet/create/?report_name=" + (report_name==null? "" : System.Uri.EscapeDataString(report_name))+"&start_date="+start_date+"&end_date="+end_date+"&terms=" + (terms==null? "" : System.Uri.EscapeDataString(terms))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Used to create twitter follower report
		/// This report uses the twitter followers as the audience. To create custom or tweet reports other methods must be used. Any report older than two days will be automatically regenerated upon create.
		/// 
		/// ReportsTwitterCreateGetByTwitter_idAndTwitter_handleAndFilter reports/twitter/create/
		/// </summary>
		/// <param name="twitter_id">(required if twitter_handle is not supplied) twitter_id must be sent with all client requests. Multiple handles are separated by commas.</param>
		/// <param name="twitter_handle">(required if twitter_id is not supplied) twitter_handle must be sent with all client requests. Multiple ids are separated by commas.</param>
		/// <param name="filter">Filtering options to be used when creating a filtered report. The options must be in JSON form, example: {'gender':['male'],'ages':['18-24'],'countries':['usa']}</param>
		public async Task ReportsTwitterCreateGetByTwitter_idAndTwitter_handleAndFilterAsync(int twitter_id, string twitter_handle, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/twitter/create/?twitter_id="+twitter_id+"&twitter_handle=" + (twitter_handle==null? "" : System.Uri.EscapeDataString(twitter_handle))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Used to create twitter follower report
		/// This report uses the twitter followers as the audience. To create custom or tweet reports other methods must be used. Any report older than two days will be automatically regenerated upon create.
		/// 
		/// ReportsTwitterCreatePostByTwitter_idAndTwitter_handleAndFilter reports/twitter/create/
		/// </summary>
		/// <param name="twitter_id">(required if twitter_handle is not supplied) twitter_id must be sent with all client requests. Multiple handles are separated by commas.</param>
		/// <param name="twitter_handle">(required if twitter_id is not supplied) twitter_handle must be sent with all client requests. Multiple ids are separated by commas.</param>
		/// <param name="filter">Filtering options to be used when creating a filtered report. The options must be in JSON form, example: {'gender':['male'],'ages':['18-24'],'countries':['usa']}</param>
		public async Task ReportsTwitterCreatePostByTwitter_idAndTwitter_handleAndFilterAsync(int twitter_id, string twitter_handle, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/twitter/create/?twitter_id="+twitter_id+"&twitter_handle=" + (twitter_handle==null? "" : System.Uri.EscapeDataString(twitter_handle))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
