//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// AffineTransform uses a 3x3 matrix with an implied last row of [ 0 0 1 ] to transform source coordinates (x,y) into destination coordinates (x', y') according to: x' x = shear_y scale_y translate_y 1 [ 1 ] After transformation, x' = scale_x * x + shear_x * y + translate_x; y' = scale_y * y + shear_y * x + translate_y; This message is therefore composed of these six matrix elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AffineTransform
	{
		
		/// <summary>
		/// The X coordinate scaling element.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scaleX")]
		public System.Nullable<System.Double> ScaleX { get; set; }
		
		/// <summary>
		/// The Y coordinate scaling element.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scaleY")]
		public System.Nullable<System.Double> ScaleY { get; set; }
		
		/// <summary>
		/// The X coordinate shearing element.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shearX")]
		public System.Nullable<System.Double> ShearX { get; set; }
		
		/// <summary>
		/// The Y coordinate shearing element.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shearY")]
		public System.Nullable<System.Double> ShearY { get; set; }
		
		/// <summary>
		/// The X coordinate translation element.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="translateX")]
		public System.Nullable<System.Double> TranslateX { get; set; }
		
		/// <summary>
		/// The Y coordinate translation element.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="translateY")]
		public System.Nullable<System.Double> TranslateY { get; set; }
		
		/// <summary>
		/// The units for translate elements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public System.Nullable<AffineTransformUnit> Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AffineTransformUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNIT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMU = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PT = 2,
	}
	
	/// <summary>
	/// A TextElement kind that represents auto text.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AutoText
	{
		
		/// <summary>
		/// The rendered content of this auto text, if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// Represents the styling that can be applied to a TextRun. If this text is contained in a shape with a parent placeholder, then these text styles may be inherited from the parent. Which text styles are inherited depend on the nesting level of lists: * A text run in a paragraph that is not in a list will inherit its text style from the the newline character in the paragraph at the 0 nesting level of the list inside the parent placeholder. * A text run in a paragraph that is in a list will inherit its text style from the newline character in the paragraph at its corresponding nesting level of the list inside the parent placeholder. Inherited text styles are represented as unset fields in this message. If text is contained in a shape without a parent placeholder, unsetting these fields will revert the style to a value matching the defaults in the Slides editor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="style")]
		public TextStyle Style { get; set; }
		
		/// <summary>
		/// The type of this auto text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<AutoTextType> Type { get; set; }
	}
	
	/// <summary>
	/// Represents the styling that can be applied to a TextRun. If this text is contained in a shape with a parent placeholder, then these text styles may be inherited from the parent. Which text styles are inherited depend on the nesting level of lists: * A text run in a paragraph that is not in a list will inherit its text style from the the newline character in the paragraph at the 0 nesting level of the list inside the parent placeholder. * A text run in a paragraph that is in a list will inherit its text style from the newline character in the paragraph at its corresponding nesting level of the list inside the parent placeholder. Inherited text styles are represented as unset fields in this message. If text is contained in a shape without a parent placeholder, unsetting these fields will revert the style to a value matching the defaults in the Slides editor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TextStyle
	{
		
		/// <summary>
		/// A color that can either be fully opaque or fully transparent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundColor")]
		public OptionalColor BackgroundColor { get; set; }
		
		/// <summary>
		/// The text's vertical offset from its normal position. Text with `SUPERSCRIPT` or `SUBSCRIPT` baseline offsets is automatically rendered in a smaller font size, computed based on the `font_size` field. The `font_size` itself is not affected by changes in this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baselineOffset")]
		public System.Nullable<TextStyleBaselineOffset> BaselineOffset { get; set; }
		
		/// <summary>
		/// Whether or not the text is rendered as bold.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bold")]
		public System.Nullable<System.Boolean> Bold { get; set; }
		
		/// <summary>
		/// The font family of the text. The font family can be any font from the Font menu in Slides or from [Google Fonts] (https://fonts.google.com/). If the font name is unrecognized, the text is rendered in `Arial`. Some fonts can affect the weight of the text. If an update request specifies values for both `font_family` and `bold`, the explicitly-set `bold` value is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fontFamily")]
		public string FontFamily { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fontSize")]
		public Dimension FontSize { get; set; }
		
		/// <summary>
		/// A color that can either be fully opaque or fully transparent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="foregroundColor")]
		public OptionalColor ForegroundColor { get; set; }
		
		/// <summary>
		/// Whether or not the text is italicized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="italic")]
		public System.Nullable<System.Boolean> Italic { get; set; }
		
		/// <summary>
		/// A hypertext link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link")]
		public Link Link { get; set; }
		
		/// <summary>
		/// Whether or not the text is in small capital letters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smallCaps")]
		public System.Nullable<System.Boolean> SmallCaps { get; set; }
		
		/// <summary>
		/// Whether or not the text is struck through.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="strikethrough")]
		public System.Nullable<System.Boolean> Strikethrough { get; set; }
		
		/// <summary>
		/// Whether or not the text is underlined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="underline")]
		public System.Nullable<System.Boolean> Underline { get; set; }
		
		/// <summary>
		/// Represents a font family and weight used to style a TextRun.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weightedFontFamily")]
		public WeightedFontFamily WeightedFontFamily { get; set; }
	}
	
	/// <summary>
	/// A color that can either be fully opaque or fully transparent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OptionalColor
	{
		
		/// <summary>
		/// A themeable solid color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opaqueColor")]
		public OpaqueColor OpaqueColor { get; set; }
	}
	
	/// <summary>
	/// A themeable solid color value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OpaqueColor
	{
		
		/// <summary>
		/// An RGB color.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rgbColor")]
		public RgbColor RgbColor { get; set; }
		
		/// <summary>
		/// An opaque theme color.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="themeColor")]
		public System.Nullable<OpaqueColorThemeColor> ThemeColor { get; set; }
	}
	
	/// <summary>
	/// An RGB color.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RgbColor
	{
		
		/// <summary>
		/// The blue component of the color, from 0.0 to 1.0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blue")]
		public System.Nullable<System.Single> Blue { get; set; }
		
		/// <summary>
		/// The green component of the color, from 0.0 to 1.0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="green")]
		public System.Nullable<System.Single> Green { get; set; }
		
		/// <summary>
		/// The red component of the color, from 0.0 to 1.0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="red")]
		public System.Nullable<System.Single> Red { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OpaqueColorThemeColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THEME_COLOR_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DARK1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIGHT1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DARK2 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIGHT2 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCENT1 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCENT2 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCENT3 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCENT4 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCENT5 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCENT6 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HYPERLINK = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOWED_HYPERLINK = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT1 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BACKGROUND1 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT2 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BACKGROUND2 = 16,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TextStyleBaselineOffset
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASELINE_OFFSET_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUPERSCRIPT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBSCRIPT = 3,
	}
	
	/// <summary>
	/// A magnitude in a single direction in the specified units.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Dimension
	{
		
		/// <summary>
		/// The magnitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="magnitude")]
		public System.Nullable<System.Double> Magnitude { get; set; }
		
		/// <summary>
		/// The units for magnitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AffineTransformUnit Unit { get; set; }
	}
	
	/// <summary>
	/// A hypertext link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Link
	{
		
		/// <summary>
		/// If set, indicates this is a link to the specific page in this presentation with this ID. A page with this ID may not exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageObjectId")]
		public string PageObjectId { get; set; }
		
		/// <summary>
		/// If set, indicates this is a link to a slide in this presentation, addressed by its position.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relativeLink")]
		public System.Nullable<LinkRelativeLink> RelativeLink { get; set; }
		
		/// <summary>
		/// If set, indicates this is a link to the slide at this zero-based index in the presentation. There may not be a slide at this index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slideIndex")]
		public System.Nullable<System.Int32> SlideIndex { get; set; }
		
		/// <summary>
		/// If set, indicates this is a link to the external web page at this URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LinkRelativeLink
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RELATIVE_SLIDE_LINK_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEXT_SLIDE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREVIOUS_SLIDE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIRST_SLIDE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_SLIDE = 4,
	}
	
	/// <summary>
	/// Represents a font family and weight used to style a TextRun.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WeightedFontFamily
	{
		
		/// <summary>
		/// The font family of the text. The font family can be any font from the Font menu in Slides or from [Google Fonts] (https://fonts.google.com/). If the font name is unrecognized, the text is rendered in `Arial`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fontFamily")]
		public string FontFamily { get; set; }
		
		/// <summary>
		/// The rendered weight of the text. This field can have any value that is a multiple of `100` between `100` and `900`, inclusive. This range corresponds to the numerical values described in the CSS 2.1 Specification, [section 15.6](https://www.w3.org/TR/CSS21/fonts.html#font-boldness), with non-numerical values disallowed. Weights greater than or equal to `700` are considered bold, and weights less than `700`are not bold. The default value is `400` ("normal").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Int32> Weight { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AutoTextType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SLIDE_NUMBER = 1,
	}
	
	/// <summary>
	/// The autofit properties of a Shape.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Autofit
	{
		
		/// <summary>
		/// The autofit type of the shape. If the autofit type is AUTOFIT_TYPE_UNSPECIFIED, the autofit type is inherited from a parent placeholder if it exists. The field is automatically set to NONE if a request is made that might affect text fitting within its bounding text box. In this case the font_scale is applied to the font_size and the line_spacing_reduction is applied to the line_spacing. Both properties are also reset to default values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autofitType")]
		public System.Nullable<AutofitAutofitType> AutofitType { get; set; }
		
		/// <summary>
		/// The font scale applied to the shape. For shapes with autofit_type NONE or SHAPE_AUTOFIT, this value is the default value of 1. For TEXT_AUTOFIT, this value multiplied by the font_size gives the font size that is rendered in the editor. This property is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fontScale")]
		public System.Nullable<System.Single> FontScale { get; set; }
		
		/// <summary>
		/// The line spacing reduction applied to the shape. For shapes with autofit_type NONE or SHAPE_AUTOFIT, this value is the default value of 0. For TEXT_AUTOFIT, this value subtracted from the line_spacing gives the line spacing that is rendered in the editor. This property is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineSpacingReduction")]
		public System.Nullable<System.Single> LineSpacingReduction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AutofitAutofitType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOFIT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT_AUTOFIT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHAPE_AUTOFIT = 3,
	}
	
	/// <summary>
	/// Request message for PresentationsService.BatchUpdatePresentation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdatePresentationRequest
	{
		
		/// <summary>
		/// A list of updates to apply to the presentation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public Request[] Requests { get; set; }
		
		/// <summary>
		/// Provides control over how write requests are executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="writeControl")]
		public WriteControl WriteControl { get; set; }
	}
	
	/// <summary>
	/// A single kind of update to apply to a presentation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Request
	{
		
		/// <summary>
		/// Creates an image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createImage")]
		public CreateImageRequest CreateImage { get; set; }
		
		/// <summary>
		/// Creates a line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createLine")]
		public CreateLineRequest CreateLine { get; set; }
		
		/// <summary>
		/// Creates bullets for all of the paragraphs that overlap with the given text index range. The nesting level of each paragraph will be determined by counting leading tabs in front of each paragraph. To avoid excess space between the bullet and the corresponding paragraph, these leading tabs are removed by this request. This may change the indices of parts of the text. If the paragraph immediately before paragraphs being updated is in a list with a matching preset, the paragraphs being updated are added to that preceding list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createParagraphBullets")]
		public CreateParagraphBulletsRequest CreateParagraphBullets { get; set; }
		
		/// <summary>
		/// Creates a new shape.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createShape")]
		public CreateShapeRequest CreateShape { get; set; }
		
		/// <summary>
		/// Creates an embedded Google Sheets chart. NOTE: Chart creation requires at least one of the spreadsheets.readonly, spreadsheets, drive.readonly, drive.file, or drive OAuth scopes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createSheetsChart")]
		public CreateSheetsChartRequest CreateSheetsChart { get; set; }
		
		/// <summary>
		/// Creates a slide.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createSlide")]
		public CreateSlideRequest CreateSlide { get; set; }
		
		/// <summary>
		/// Creates a new table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTable")]
		public CreateTableRequest CreateTable { get; set; }
		
		/// <summary>
		/// Creates a video. NOTE: Creating a video from Google Drive requires that the requesting app have at least one of the drive, drive.readonly, or drive.file OAuth scopes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createVideo")]
		public CreateVideoRequest CreateVideo { get; set; }
		
		/// <summary>
		/// Deletes an object, either pages or page elements, from the presentation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteObject")]
		public DeleteObjectRequest DeleteObject { get; set; }
		
		/// <summary>
		/// Deletes bullets from all of the paragraphs that overlap with the given text index range. The nesting level of each paragraph will be visually preserved by adding indent to the start of the corresponding paragraph.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteParagraphBullets")]
		public DeleteParagraphBulletsRequest DeleteParagraphBullets { get; set; }
		
		/// <summary>
		/// Deletes a column from a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteTableColumn")]
		public DeleteTableColumnRequest DeleteTableColumn { get; set; }
		
		/// <summary>
		/// Deletes a row from a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteTableRow")]
		public DeleteTableRowRequest DeleteTableRow { get; set; }
		
		/// <summary>
		/// Deletes text from a shape or a table cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteText")]
		public DeleteTextRequest DeleteText { get; set; }
		
		/// <summary>
		/// Duplicates a slide or page element. When duplicating a slide, the duplicate slide will be created immediately following the specified slide. When duplicating a page element, the duplicate will be placed on the same page at the same position as the original.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duplicateObject")]
		public DuplicateObjectRequest DuplicateObject { get; set; }
		
		/// <summary>
		/// Groups objects to create an object group. For example, groups PageElements to create a Group on the same page as all the children.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupObjects")]
		public GroupObjectsRequest GroupObjects { get; set; }
		
		/// <summary>
		/// Inserts columns into a table. Other columns in the table will be resized to fit the new column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertTableColumns")]
		public InsertTableColumnsRequest InsertTableColumns { get; set; }
		
		/// <summary>
		/// Inserts rows into a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertTableRows")]
		public InsertTableRowsRequest InsertTableRows { get; set; }
		
		/// <summary>
		/// Inserts text into a shape or a table cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertText")]
		public InsertTextRequest InsertText { get; set; }
		
		/// <summary>
		/// Merges cells in a Table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mergeTableCells")]
		public MergeTableCellsRequest MergeTableCells { get; set; }
		
		/// <summary>
		/// Refreshes an embedded Google Sheets chart by replacing it with the latest version of the chart from Google Sheets. NOTE: Refreshing charts requires at least one of the spreadsheets.readonly, spreadsheets, drive.readonly, or drive OAuth scopes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refreshSheetsChart")]
		public RefreshSheetsChartRequest RefreshSheetsChart { get; set; }
		
		/// <summary>
		/// Replaces all shapes that match the given criteria with the provided image. The images replacing the shapes are rectangular after being inserted into the presentation and do not take on the forms of the shapes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replaceAllShapesWithImage")]
		public ReplaceAllShapesWithImageRequest ReplaceAllShapesWithImage { get; set; }
		
		/// <summary>
		/// Replaces all shapes that match the given criteria with the provided Google Sheets chart. The chart will be scaled and centered to fit within the bounds of the original shape. NOTE: Replacing shapes with a chart requires at least one of the spreadsheets.readonly, spreadsheets, drive.readonly, or drive OAuth scopes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replaceAllShapesWithSheetsChart")]
		public ReplaceAllShapesWithSheetsChartRequest ReplaceAllShapesWithSheetsChart { get; set; }
		
		/// <summary>
		/// Replaces all instances of text matching a criteria with replace text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replaceAllText")]
		public ReplaceAllTextRequest ReplaceAllText { get; set; }
		
		/// <summary>
		/// Replaces an existing image with a new image. Replacing an image removes some image effects from the existing image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replaceImage")]
		public ReplaceImageRequest ReplaceImage { get; set; }
		
		/// <summary>
		/// Reroutes a line such that it's connected at the two closest connection sites on the connected page elements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rerouteLine")]
		public RerouteLineRequest RerouteLine { get; set; }
		
		/// <summary>
		/// Ungroups objects, such as groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ungroupObjects")]
		public UngroupObjectsRequest UngroupObjects { get; set; }
		
		/// <summary>
		/// Unmerges cells in a Table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unmergeTableCells")]
		public UnmergeTableCellsRequest UnmergeTableCells { get; set; }
		
		/// <summary>
		/// Update the properties of an Image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateImageProperties")]
		public UpdateImagePropertiesRequest UpdateImageProperties { get; set; }
		
		/// <summary>
		/// Updates the category of a line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateLineCategory")]
		public UpdateLineCategoryRequest UpdateLineCategory { get; set; }
		
		/// <summary>
		/// Updates the properties of a Line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateLineProperties")]
		public UpdateLinePropertiesRequest UpdateLineProperties { get; set; }
		
		/// <summary>
		/// Updates the alt text title and/or description of a page element.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatePageElementAltText")]
		public UpdatePageElementAltTextRequest UpdatePageElementAltText { get; set; }
		
		/// <summary>
		/// Updates the transform of a page element. Updating the transform of a group will change the absolute transform of the page elements in that group, which can change their visual appearance. See the documentation for PageElement.transform for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatePageElementTransform")]
		public UpdatePageElementTransformRequest UpdatePageElementTransform { get; set; }
		
		/// <summary>
		/// Updates the Z-order of page elements. Z-order is an ordering of the elements on the page from back to front. The page element in the front may cover the elements that are behind it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatePageElementsZOrder")]
		public UpdatePageElementsZOrderRequest UpdatePageElementsZOrder { get; set; }
		
		/// <summary>
		/// Updates the properties of a Page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatePageProperties")]
		public UpdatePagePropertiesRequest UpdatePageProperties { get; set; }
		
		/// <summary>
		/// Updates the styling for all of the paragraphs within a Shape or Table that overlap with the given text index range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateParagraphStyle")]
		public UpdateParagraphStyleRequest UpdateParagraphStyle { get; set; }
		
		/// <summary>
		/// Update the properties of a Shape.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateShapeProperties")]
		public UpdateShapePropertiesRequest UpdateShapeProperties { get; set; }
		
		/// <summary>
		/// Updates the properties of a Slide.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateSlideProperties")]
		public UpdateSlidePropertiesRequest UpdateSlideProperties { get; set; }
		
		/// <summary>
		/// Updates the position of slides in the presentation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateSlidesPosition")]
		public UpdateSlidesPositionRequest UpdateSlidesPosition { get; set; }
		
		/// <summary>
		/// Updates the properties of the table borders in a Table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTableBorderProperties")]
		public UpdateTableBorderPropertiesRequest UpdateTableBorderProperties { get; set; }
		
		/// <summary>
		/// Update the properties of a TableCell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTableCellProperties")]
		public UpdateTableCellPropertiesRequest UpdateTableCellProperties { get; set; }
		
		/// <summary>
		/// Updates the properties of a Table column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTableColumnProperties")]
		public UpdateTableColumnPropertiesRequest UpdateTableColumnProperties { get; set; }
		
		/// <summary>
		/// Updates the properties of a Table row.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTableRowProperties")]
		public UpdateTableRowPropertiesRequest UpdateTableRowProperties { get; set; }
		
		/// <summary>
		/// Update the styling of text in a Shape or Table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTextStyle")]
		public UpdateTextStyleRequest UpdateTextStyle { get; set; }
		
		/// <summary>
		/// Update the properties of a Video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateVideoProperties")]
		public UpdateVideoPropertiesRequest UpdateVideoProperties { get; set; }
	}
	
	/// <summary>
	/// Creates an image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateImageRequest
	{
		
		/// <summary>
		/// Common properties for a page element. Note: When you initially create a PageElement, the API may modify the values of both `size` and `transform`, but the visual size will be unchanged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elementProperties")]
		public PageElementProperties ElementProperties { get; set; }
		
		/// <summary>
		/// A user-supplied object ID. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If you don't specify an ID, a unique one is generated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// The image URL. The image is fetched once at insertion time and a copy is stored for display inside the presentation. Images must be less than 50 MB in size, can't exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF formats. The provided URL must be publicly accessible and up to 2 KB in length. The URL is saved with the image, and exposed through the Image.source_url field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Common properties for a page element. Note: When you initially create a PageElement, the API may modify the values of both `size` and `transform`, but the visual size will be unchanged.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PageElementProperties
	{
		
		/// <summary>
		/// The object ID of the page where the element is located.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageObjectId")]
		public string PageObjectId { get; set; }
		
		/// <summary>
		/// A width and height.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public Size Size { get; set; }
		
		/// <summary>
		/// AffineTransform uses a 3x3 matrix with an implied last row of [ 0 0 1 ] to transform source coordinates (x,y) into destination coordinates (x', y') according to: x' x = shear_y scale_y translate_y 1 [ 1 ] After transformation, x' = scale_x * x + shear_x * y + translate_x; y' = scale_y * y + shear_y * x + translate_y; This message is therefore composed of these six matrix elements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transform")]
		public AffineTransform Transform { get; set; }
	}
	
	/// <summary>
	/// A width and height.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Size
	{
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public Dimension Height { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public Dimension Width { get; set; }
	}
	
	/// <summary>
	/// Creates a line.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateLineRequest
	{
		
		/// <summary>
		/// The category of the line to be created. The exact line type created is determined based on the category and how it's routed to connect to other page elements. If you specify both a `category` and a `line_category`, the `category` takes precedence. If you do not specify a value for `category`, but specify a value for `line_category`, then the specified `line_category` value is used. If you do not specify either, then STRAIGHT is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<CreateLineRequestCategory> Category { get; set; }
		
		/// <summary>
		/// Common properties for a page element. Note: When you initially create a PageElement, the API may modify the values of both `size` and `transform`, but the visual size will be unchanged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elementProperties")]
		public PageElementProperties ElementProperties { get; set; }
		
		/// <summary>
		/// The category of the line to be created. *Deprecated*: use `category` instead. The exact line type created is determined based on the category and how it's routed to connect to other page elements. If you specify both a `category` and a `line_category`, the `category` takes precedence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineCategory")]
		public System.Nullable<CreateLineRequestLineCategory> LineCategory { get; set; }
		
		/// <summary>
		/// A user-supplied object ID. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If you don't specify an ID, a unique one is generated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreateLineRequestCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINE_CATEGORY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRAIGHT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURVED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreateLineRequestLineCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRAIGHT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURVED = 2,
	}
	
	/// <summary>
	/// Creates bullets for all of the paragraphs that overlap with the given text index range. The nesting level of each paragraph will be determined by counting leading tabs in front of each paragraph. To avoid excess space between the bullet and the corresponding paragraph, these leading tabs are removed by this request. This may change the indices of parts of the text. If the paragraph immediately before paragraphs being updated is in a list with a matching preset, the paragraphs being updated are added to that preceding list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateParagraphBulletsRequest
	{
		
		/// <summary>
		/// The kinds of bullet glyphs to be used. Defaults to the `BULLET_DISC_CIRCLE_SQUARE` preset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bulletPreset")]
		public System.Nullable<CreateParagraphBulletsRequestBulletPreset> BulletPreset { get; set; }
		
		/// <summary>
		/// A location of a single table cell within a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cellLocation")]
		public TableCellLocation CellLocation { get; set; }
		
		/// <summary>
		/// The object ID of the shape or table containing the text to add bullets to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// Specifies a contiguous range of an indexed collection, such as characters in text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textRange")]
		public Range TextRange { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreateParagraphBulletsRequestBulletPreset
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BULLET_DISC_CIRCLE_SQUARE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BULLET_DIAMONDX_ARROW3D_SQUARE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BULLET_CHECKBOX = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BULLET_ARROW_DIAMOND_DISC = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BULLET_STAR_CIRCLE_SQUARE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BULLET_ARROW3D_CIRCLE_SQUARE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BULLET_LEFTTRIANGLE_DIAMOND_DISC = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BULLET_DIAMONDX_HOLLOWDIAMOND_SQUARE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BULLET_DIAMOND_CIRCLE_SQUARE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBERED_DIGIT_ALPHA_ROMAN = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBERED_DIGIT_ALPHA_ROMAN_PARENS = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBERED_DIGIT_NESTED = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBERED_UPPERALPHA_ALPHA_ROMAN = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBERED_UPPERROMAN_UPPERALPHA_DIGIT = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBERED_ZERODIGIT_ALPHA_ROMAN = 14,
	}
	
	/// <summary>
	/// A location of a single table cell within a table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableCellLocation
	{
		
		/// <summary>
		/// The 0-based column index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnIndex")]
		public System.Nullable<System.Int32> ColumnIndex { get; set; }
		
		/// <summary>
		/// The 0-based row index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowIndex")]
		public System.Nullable<System.Int32> RowIndex { get; set; }
	}
	
	/// <summary>
	/// Specifies a contiguous range of an indexed collection, such as characters in text.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Range
	{
		
		/// <summary>
		/// The optional zero-based index of the end of the collection. Required for `FIXED_RANGE` ranges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endIndex")]
		public System.Nullable<System.Int32> EndIndex { get; set; }
		
		/// <summary>
		/// The optional zero-based index of the beginning of the collection. Required for `FIXED_RANGE` and `FROM_START_INDEX` ranges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIndex")]
		public System.Nullable<System.Int32> StartIndex { get; set; }
		
		/// <summary>
		/// The type of range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<RangeType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RangeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RANGE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED_RANGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FROM_START_INDEX = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL = 3,
	}
	
	/// <summary>
	/// Creates a new shape.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateShapeRequest
	{
		
		/// <summary>
		/// Common properties for a page element. Note: When you initially create a PageElement, the API may modify the values of both `size` and `transform`, but the visual size will be unchanged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elementProperties")]
		public PageElementProperties ElementProperties { get; set; }
		
		/// <summary>
		/// A user-supplied object ID. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If empty, a unique identifier will be generated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// The shape type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shapeType")]
		public System.Nullable<CreateShapeRequestShapeType> ShapeType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreateShapeRequestShapeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT_BOX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECTANGLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROUND_RECTANGLE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ELLIPSE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARC = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BENT_ARROW = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BENT_UP_ARROW = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BEVEL = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLOCK_ARC = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRACE_PAIR = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRACKET_PAIR = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAN = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHEVRON = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHORD = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUD = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CORNER = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUBE = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURVED_DOWN_ARROW = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURVED_LEFT_ARROW = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURVED_RIGHT_ARROW = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURVED_UP_ARROW = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DECAGON = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIAGONAL_STRIPE = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIAMOND = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DODECAGON = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DONUT = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOUBLE_WAVE = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOWN_ARROW = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOWN_ARROW_CALLOUT = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLDED_CORNER = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRAME = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HALF_FRAME = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEART = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEPTAGON = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEXAGON = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOME_PLATE = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HORIZONTAL_SCROLL = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IRREGULAR_SEAL_1 = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IRREGULAR_SEAL_2 = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT_ARROW = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT_ARROW_CALLOUT = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT_BRACE = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT_BRACKET = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT_RIGHT_ARROW = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT_RIGHT_ARROW_CALLOUT = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT_RIGHT_UP_ARROW = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT_UP_ARROW = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIGHTNING_BOLT = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MATH_DIVIDE = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MATH_EQUAL = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MATH_MINUS = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MATH_MULTIPLY = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MATH_NOT_EQUAL = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MATH_PLUS = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOON = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_SMOKING = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOTCHED_RIGHT_ARROW = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OCTAGON = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARALLELOGRAM = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENTAGON = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PIE = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLAQUE = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLUS = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUAD_ARROW = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUAD_ARROW_CALLOUT = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RIBBON = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RIBBON_2 = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RIGHT_ARROW = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RIGHT_ARROW_CALLOUT = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RIGHT_BRACE = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RIGHT_BRACKET = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROUND_1_RECTANGLE = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROUND_2_DIAGONAL_RECTANGLE = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROUND_2_SAME_RECTANGLE = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RIGHT_TRIANGLE = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMILEY_FACE = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNIP_1_RECTANGLE = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNIP_2_DIAGONAL_RECTANGLE = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNIP_2_SAME_RECTANGLE = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNIP_ROUND_RECTANGLE = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STAR_10 = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STAR_12 = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STAR_16 = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STAR_24 = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STAR_32 = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STAR_4 = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STAR_5 = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STAR_6 = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STAR_7 = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STAR_8 = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRIPED_RIGHT_ARROW = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUN = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRAPEZOID = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRIANGLE = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UP_ARROW = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UP_ARROW_CALLOUT = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UP_DOWN_ARROW = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UTURN_ARROW = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERTICAL_SCROLL = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAVE = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEDGE_ELLIPSE_CALLOUT = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEDGE_RECTANGLE_CALLOUT = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEDGE_ROUND_RECTANGLE_CALLOUT = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOW_CHART_ALTERNATE_PROCESS = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOW_CHART_COLLATE = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOW_CHART_CONNECTOR = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOW_CHART_DECISION = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOW_CHART_DELAY = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOW_CHART_DISPLAY = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOW_CHART_DOCUMENT = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOW_CHART_EXTRACT = 111,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOW_CHART_INPUT_OUTPUT = 112,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOW_CHART_INTERNAL_STORAGE = 113,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOW_CHART_MAGNETIC_DISK = 114,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOW_CHART_MAGNETIC_DRUM = 115,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOW_CHART_MAGNETIC_TAPE = 116,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOW_CHART_MANUAL_INPUT = 117,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOW_CHART_MANUAL_OPERATION = 118,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOW_CHART_MERGE = 119,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOW_CHART_MULTIDOCUMENT = 120,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOW_CHART_OFFLINE_STORAGE = 121,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOW_CHART_OFFPAGE_CONNECTOR = 122,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOW_CHART_ONLINE_STORAGE = 123,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOW_CHART_OR = 124,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOW_CHART_PREDEFINED_PROCESS = 125,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOW_CHART_PREPARATION = 126,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOW_CHART_PROCESS = 127,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOW_CHART_PUNCHED_CARD = 128,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOW_CHART_PUNCHED_TAPE = 129,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOW_CHART_SORT = 130,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOW_CHART_SUMMING_JUNCTION = 131,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOW_CHART_TERMINATOR = 132,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARROW_EAST = 133,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARROW_NORTH_EAST = 134,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARROW_NORTH = 135,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPEECH = 136,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARBURST = 137,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEARDROP = 138,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ELLIPSE_RIBBON = 139,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ELLIPSE_RIBBON_2 = 140,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUD_CALLOUT = 141,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 142,
	}
	
	/// <summary>
	/// Creates an embedded Google Sheets chart. NOTE: Chart creation requires at least one of the spreadsheets.readonly, spreadsheets, drive.readonly, drive.file, or drive OAuth scopes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSheetsChartRequest
	{
		
		/// <summary>
		/// The ID of the specific chart in the Google Sheets spreadsheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chartId")]
		public System.Nullable<System.Int32> ChartId { get; set; }
		
		/// <summary>
		/// Common properties for a page element. Note: When you initially create a PageElement, the API may modify the values of both `size` and `transform`, but the visual size will be unchanged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elementProperties")]
		public PageElementProperties ElementProperties { get; set; }
		
		/// <summary>
		/// The mode with which the chart is linked to the source spreadsheet. When not specified, the chart will be an image that is not linked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkingMode")]
		public System.Nullable<CreateSheetsChartRequestLinkingMode> LinkingMode { get; set; }
		
		/// <summary>
		/// A user-supplied object ID. If specified, the ID must be unique among all pages and page elements in the presentation. The ID should start with a word character [a-zA-Z0-9_] and then followed by any number of the following characters [a-zA-Z0-9_-:]. The length of the ID should not be less than 5 or greater than 50. If empty, a unique identifier will be generated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// The ID of the Google Sheets spreadsheet that contains the chart. You might need to add a resource key to the HTTP header for a subset of old files. For more information, see [Access link-shared files using resource keys](https://developers.google.com/drive/api/v3/resource-keys).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spreadsheetId")]
		public string SpreadsheetId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreateSheetsChartRequestLinkingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_LINKED_IMAGE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINKED = 1,
	}
	
	/// <summary>
	/// Creates a slide.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSlideRequest
	{
		
		/// <summary>
		/// The optional zero-based index indicating where to insert the slides. If you don't specify an index, the slide is created at the end.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertionIndex")]
		public System.Nullable<System.Int32> InsertionIndex { get; set; }
		
		/// <summary>
		/// A user-supplied object ID. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The ID length must be between 5 and 50 characters, inclusive. If you don't specify an ID, a unique one is generated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// An optional list of object ID mappings from the placeholder(s) on the layout to the placeholders that are created on the slide from the specified layout. Can only be used when `slide_layout_reference` is specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placeholderIdMappings")]
		public LayoutPlaceholderIdMapping[] PlaceholderIdMappings { get; set; }
		
		/// <summary>
		/// Slide layout reference. This may reference either: - A predefined layout - One of the layouts in the presentation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slideLayoutReference")]
		public LayoutReference SlideLayoutReference { get; set; }
	}
	
	/// <summary>
	/// The user-specified ID mapping for a placeholder that will be created on a slide from a specified layout.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LayoutPlaceholderIdMapping
	{
		
		/// <summary>
		/// The placeholder information that uniquely identifies a placeholder shape.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="layoutPlaceholder")]
		public Placeholder LayoutPlaceholder { get; set; }
		
		/// <summary>
		/// The object ID of the placeholder on a layout that will be applied to a slide.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="layoutPlaceholderObjectId")]
		public string LayoutPlaceholderObjectId { get; set; }
		
		/// <summary>
		/// A user-supplied object ID for the placeholder identified above that to be created onto a slide. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If you don't specify an ID, a unique one is generated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
	}
	
	/// <summary>
	/// The placeholder information that uniquely identifies a placeholder shape.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Placeholder
	{
		
		/// <summary>
		/// The index of the placeholder. If the same placeholder types are present in the same page, they would have different index values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// The object ID of this shape's parent placeholder. If unset, the parent placeholder shape does not exist, so the shape does not inherit properties from any other shape.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentObjectId")]
		public string ParentObjectId { get; set; }
		
		/// <summary>
		/// The type of the placeholder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<PlaceholderType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PlaceholderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BODY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHART = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLIP_ART = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTERED_TITLE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIAGRAM = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE_AND_TIME = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOOTER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEADER = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIA = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PICTURE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SLIDE_NUMBER = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBTITLE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TABLE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TITLE = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SLIDE_IMAGE = 16,
	}
	
	/// <summary>
	/// Slide layout reference. This may reference either: - A predefined layout - One of the layouts in the presentation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LayoutReference
	{
		
		/// <summary>
		/// Layout ID: the object ID of one of the layouts in the presentation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="layoutId")]
		public string LayoutId { get; set; }
		
		/// <summary>
		/// Predefined layout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predefinedLayout")]
		public System.Nullable<LayoutReferencePredefinedLayout> PredefinedLayout { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LayoutReferencePredefinedLayout
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREDEFINED_LAYOUT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLANK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAPTION_ONLY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TITLE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TITLE_AND_BODY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TITLE_AND_TWO_COLUMNS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TITLE_ONLY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECTION_HEADER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECTION_TITLE_AND_DESCRIPTION = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_COLUMN_TEXT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN_POINT = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIG_NUMBER = 11,
	}
	
	/// <summary>
	/// Creates a new table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateTableRequest
	{
		
		/// <summary>
		/// Number of columns in the table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columns")]
		public System.Nullable<System.Int32> Columns { get; set; }
		
		/// <summary>
		/// Common properties for a page element. Note: When you initially create a PageElement, the API may modify the values of both `size` and `transform`, but the visual size will be unchanged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elementProperties")]
		public PageElementProperties ElementProperties { get; set; }
		
		/// <summary>
		/// A user-supplied object ID. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If you don't specify an ID, a unique one is generated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// Number of rows in the table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public System.Nullable<System.Int32> Rows { get; set; }
	}
	
	/// <summary>
	/// Creates a video. NOTE: Creating a video from Google Drive requires that the requesting app have at least one of the drive, drive.readonly, or drive.file OAuth scopes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateVideoRequest
	{
		
		/// <summary>
		/// Common properties for a page element. Note: When you initially create a PageElement, the API may modify the values of both `size` and `transform`, but the visual size will be unchanged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elementProperties")]
		public PageElementProperties ElementProperties { get; set; }
		
		/// <summary>
		/// The video source's unique identifier for this video. e.g. For YouTube video https://www.youtube.com/watch?v=7U3axjORYZ0, the ID is 7U3axjORYZ0. For a Google Drive video https://drive.google.com/file/d/1xCgQLFTJi5_Xl8DgW_lcUYq5e-q6Hi5Q the ID is 1xCgQLFTJi5_Xl8DgW_lcUYq5e-q6Hi5Q. To access a Google Drive video file, you might need to add a resource key to the HTTP header for a subset of old files. For more information, see [Access link-shared files using resource keys](https://developers.google.com/drive/api/v3/resource-keys).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A user-supplied object ID. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If you don't specify an ID, a unique one is generated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// The video source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public System.Nullable<CreateVideoRequestSource> Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreateVideoRequestSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YOUTUBE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRIVE = 2,
	}
	
	/// <summary>
	/// Deletes an object, either pages or page elements, from the presentation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteObjectRequest
	{
		
		/// <summary>
		/// The object ID of the page or page element to delete. If after a delete operation a group contains only 1 or no page elements, the group is also deleted. If a placeholder is deleted on a layout, any empty inheriting placeholders are also deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
	}
	
	/// <summary>
	/// Deletes bullets from all of the paragraphs that overlap with the given text index range. The nesting level of each paragraph will be visually preserved by adding indent to the start of the corresponding paragraph.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteParagraphBulletsRequest
	{
		
		/// <summary>
		/// A location of a single table cell within a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cellLocation")]
		public TableCellLocation CellLocation { get; set; }
		
		/// <summary>
		/// The object ID of the shape or table containing the text to delete bullets from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// Specifies a contiguous range of an indexed collection, such as characters in text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textRange")]
		public Range TextRange { get; set; }
	}
	
	/// <summary>
	/// Deletes a column from a table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteTableColumnRequest
	{
		
		/// <summary>
		/// A location of a single table cell within a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cellLocation")]
		public TableCellLocation CellLocation { get; set; }
		
		/// <summary>
		/// The table to delete columns from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableObjectId")]
		public string TableObjectId { get; set; }
	}
	
	/// <summary>
	/// Deletes a row from a table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteTableRowRequest
	{
		
		/// <summary>
		/// A location of a single table cell within a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cellLocation")]
		public TableCellLocation CellLocation { get; set; }
		
		/// <summary>
		/// The table to delete rows from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableObjectId")]
		public string TableObjectId { get; set; }
	}
	
	/// <summary>
	/// Deletes text from a shape or a table cell.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteTextRequest
	{
		
		/// <summary>
		/// A location of a single table cell within a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cellLocation")]
		public TableCellLocation CellLocation { get; set; }
		
		/// <summary>
		/// The object ID of the shape or table from which the text will be deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// Specifies a contiguous range of an indexed collection, such as characters in text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textRange")]
		public Range TextRange { get; set; }
	}
	
	/// <summary>
	/// Duplicates a slide or page element. When duplicating a slide, the duplicate slide will be created immediately following the specified slide. When duplicating a page element, the duplicate will be placed on the same page at the same position as the original.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DuplicateObjectRequest
	{
		
		/// <summary>
		/// The ID of the object to duplicate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// The object being duplicated may contain other objects, for example when duplicating a slide or a group page element. This map defines how the IDs of duplicated objects are generated: the keys are the IDs of the original objects and its values are the IDs that will be assigned to the corresponding duplicate object. The ID of the source object's duplicate may be specified in this map as well, using the same value of the `object_id` field as a key and the newly desired ID as the value. All keys must correspond to existing IDs in the presentation. All values must be unique in the presentation and must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the new ID must not be less than 5 or greater than 50. If any IDs of source objects are omitted from the map, a new random ID will be assigned. If the map is empty or unset, all duplicate objects will receive a new random ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectIds")]
		public System.Collections.Generic.Dictionary<string, string> ObjectIds { get; set; }
	}
	
	/// <summary>
	/// Groups objects to create an object group. For example, groups PageElements to create a Group on the same page as all the children.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GroupObjectsRequest
	{
		
		/// <summary>
		/// The object IDs of the objects to group. Only page elements can be grouped. There should be at least two page elements on the same page that are not already in another group. Some page elements, such as videos, tables and placeholders cannot be grouped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="childrenObjectIds")]
		public string[] ChildrenObjectIds { get; set; }
		
		/// <summary>
		/// A user-supplied object ID for the group to be created. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If you don't specify an ID, a unique one is generated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupObjectId")]
		public string GroupObjectId { get; set; }
	}
	
	/// <summary>
	/// Inserts columns into a table. Other columns in the table will be resized to fit the new column.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InsertTableColumnsRequest
	{
		
		/// <summary>
		/// A location of a single table cell within a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cellLocation")]
		public TableCellLocation CellLocation { get; set; }
		
		/// <summary>
		/// Whether to insert new columns to the right of the reference cell location. - `True`: insert to the right. - `False`: insert to the left.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertRight")]
		public System.Nullable<System.Boolean> InsertRight { get; set; }
		
		/// <summary>
		/// The number of columns to be inserted. Maximum 20 per request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int32> Number { get; set; }
		
		/// <summary>
		/// The table to insert columns into.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableObjectId")]
		public string TableObjectId { get; set; }
	}
	
	/// <summary>
	/// Inserts rows into a table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InsertTableRowsRequest
	{
		
		/// <summary>
		/// A location of a single table cell within a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cellLocation")]
		public TableCellLocation CellLocation { get; set; }
		
		/// <summary>
		/// Whether to insert new rows below the reference cell location. - `True`: insert below the cell. - `False`: insert above the cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertBelow")]
		public System.Nullable<System.Boolean> InsertBelow { get; set; }
		
		/// <summary>
		/// The number of rows to be inserted. Maximum 20 per request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int32> Number { get; set; }
		
		/// <summary>
		/// The table to insert rows into.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableObjectId")]
		public string TableObjectId { get; set; }
	}
	
	/// <summary>
	/// Inserts text into a shape or a table cell.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InsertTextRequest
	{
		
		/// <summary>
		/// A location of a single table cell within a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cellLocation")]
		public TableCellLocation CellLocation { get; set; }
		
		/// <summary>
		/// The index where the text will be inserted, in Unicode code units, based on TextElement indexes. The index is zero-based and is computed from the start of the string. The index may be adjusted to prevent insertions inside Unicode grapheme clusters. In these cases, the text will be inserted immediately after the grapheme cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertionIndex")]
		public System.Nullable<System.Int32> InsertionIndex { get; set; }
		
		/// <summary>
		/// The object ID of the shape or table where the text will be inserted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// The text to be inserted. Inserting a newline character will implicitly create a new ParagraphMarker at that index. The paragraph style of the new paragraph will be copied from the paragraph at the current insertion index, including lists and bullets. Text styles for inserted text will be determined automatically, generally preserving the styling of neighboring text. In most cases, the text will be added to the TextRun that exists at the insertion index. Some control characters (U+0000-U+0008, U+000C-U+001F) and characters from the Unicode Basic Multilingual Plane Private Use Area (U+E000-U+F8FF) will be stripped out of the inserted text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	/// <summary>
	/// Merges cells in a Table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MergeTableCellsRequest
	{
		
		/// <summary>
		/// The object ID of the table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// A table range represents a reference to a subset of a table. It's important to note that the cells specified by a table range do not necessarily form a rectangle. For example, let's say we have a 3 x 3 table where all the cells of the last row are merged together. The table looks like this: [ ] A table range with location = (0, 0), row span = 3 and column span = 2 specifies the following cells: x x [ x x x ]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableRange")]
		public TableRange TableRange { get; set; }
	}
	
	/// <summary>
	/// A table range represents a reference to a subset of a table. It's important to note that the cells specified by a table range do not necessarily form a rectangle. For example, let's say we have a 3 x 3 table where all the cells of the last row are merged together. The table looks like this: [ ] A table range with location = (0, 0), row span = 3 and column span = 2 specifies the following cells: x x [ x x x ]
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableRange
	{
		
		/// <summary>
		/// The column span of the table range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnSpan")]
		public System.Nullable<System.Int32> ColumnSpan { get; set; }
		
		/// <summary>
		/// A location of a single table cell within a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public TableCellLocation Location { get; set; }
		
		/// <summary>
		/// The row span of the table range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowSpan")]
		public System.Nullable<System.Int32> RowSpan { get; set; }
	}
	
	/// <summary>
	/// Refreshes an embedded Google Sheets chart by replacing it with the latest version of the chart from Google Sheets. NOTE: Refreshing charts requires at least one of the spreadsheets.readonly, spreadsheets, drive.readonly, or drive OAuth scopes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RefreshSheetsChartRequest
	{
		
		/// <summary>
		/// The object ID of the chart to refresh.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
	}
	
	/// <summary>
	/// Replaces all shapes that match the given criteria with the provided image. The images replacing the shapes are rectangular after being inserted into the presentation and do not take on the forms of the shapes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReplaceAllShapesWithImageRequest
	{
		
		/// <summary>
		/// A criteria that matches a specific string of text in a shape or table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containsText")]
		public SubstringMatchCriteria ContainsText { get; set; }
		
		/// <summary>
		/// The image replace method. If you specify both a `replace_method` and an `image_replace_method`, the `image_replace_method` takes precedence. If you do not specify a value for `image_replace_method`, but specify a value for `replace_method`, then the specified `replace_method` value is used. If you do not specify either, then CENTER_INSIDE is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageReplaceMethod")]
		public System.Nullable<ReplaceAllShapesWithImageRequestImageReplaceMethod> ImageReplaceMethod { get; set; }
		
		/// <summary>
		/// The image URL. The image is fetched once at insertion time and a copy is stored for display inside the presentation. Images must be less than 50MB in size, cannot exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF format. The provided URL can be at most 2 kB in length. The URL itself is saved with the image, and exposed via the Image.source_url field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// If non-empty, limits the matches to page elements only on the given pages. Returns a 400 bad request error if given the page object ID of a notes page or a notes master, or if a page with that object ID doesn't exist in the presentation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageObjectIds")]
		public string[] PageObjectIds { get; set; }
		
		/// <summary>
		/// The replace method. *Deprecated*: use `image_replace_method` instead. If you specify both a `replace_method` and an `image_replace_method`, the `image_replace_method` takes precedence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replaceMethod")]
		public System.Nullable<ReplaceAllShapesWithImageRequestReplaceMethod> ReplaceMethod { get; set; }
	}
	
	/// <summary>
	/// A criteria that matches a specific string of text in a shape or table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubstringMatchCriteria
	{
		
		/// <summary>
		/// Indicates whether the search should respect case: - `True`: the search is case sensitive. - `False`: the search is case insensitive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchCase")]
		public System.Nullable<System.Boolean> MatchCase { get; set; }
		
		/// <summary>
		/// The text to search for in the shape or table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReplaceAllShapesWithImageRequestImageReplaceMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMAGE_REPLACE_METHOD_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTER_INSIDE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTER_CROP = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReplaceAllShapesWithImageRequestReplaceMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTER_INSIDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTER_CROP = 1,
	}
	
	/// <summary>
	/// Replaces all shapes that match the given criteria with the provided Google Sheets chart. The chart will be scaled and centered to fit within the bounds of the original shape. NOTE: Replacing shapes with a chart requires at least one of the spreadsheets.readonly, spreadsheets, drive.readonly, or drive OAuth scopes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReplaceAllShapesWithSheetsChartRequest
	{
		
		/// <summary>
		/// The ID of the specific chart in the Google Sheets spreadsheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chartId")]
		public System.Nullable<System.Int32> ChartId { get; set; }
		
		/// <summary>
		/// A criteria that matches a specific string of text in a shape or table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containsText")]
		public SubstringMatchCriteria ContainsText { get; set; }
		
		/// <summary>
		/// The mode with which the chart is linked to the source spreadsheet. When not specified, the chart will be an image that is not linked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkingMode")]
		public CreateSheetsChartRequestLinkingMode LinkingMode { get; set; }
		
		/// <summary>
		/// If non-empty, limits the matches to page elements only on the given pages. Returns a 400 bad request error if given the page object ID of a notes page or a notes master, or if a page with that object ID doesn't exist in the presentation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageObjectIds")]
		public string[] PageObjectIds { get; set; }
		
		/// <summary>
		/// The ID of the Google Sheets spreadsheet that contains the chart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spreadsheetId")]
		public string SpreadsheetId { get; set; }
	}
	
	/// <summary>
	/// Replaces all instances of text matching a criteria with replace text.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReplaceAllTextRequest
	{
		
		/// <summary>
		/// A criteria that matches a specific string of text in a shape or table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containsText")]
		public SubstringMatchCriteria ContainsText { get; set; }
		
		/// <summary>
		/// If non-empty, limits the matches to page elements only on the given pages. Returns a 400 bad request error if given the page object ID of a notes master, or if a page with that object ID doesn't exist in the presentation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageObjectIds")]
		public string[] PageObjectIds { get; set; }
		
		/// <summary>
		/// The text that will replace the matched text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replaceText")]
		public string ReplaceText { get; set; }
	}
	
	/// <summary>
	/// Replaces an existing image with a new image. Replacing an image removes some image effects from the existing image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReplaceImageRequest
	{
		
		/// <summary>
		/// The ID of the existing image that will be replaced. The ID can be retrieved from the response of a get request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageObjectId")]
		public string ImageObjectId { get; set; }
		
		/// <summary>
		/// The replacement method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageReplaceMethod")]
		public ReplaceAllShapesWithImageRequestImageReplaceMethod ImageReplaceMethod { get; set; }
		
		/// <summary>
		/// The image URL. The image is fetched once at insertion time and a copy is stored for display inside the presentation. Images must be less than 50MB, cannot exceed 25 megapixels, and must be in PNG, JPEG, or GIF format. The provided URL can't surpass 2 KB in length. The URL is saved with the image, and exposed through the Image.source_url field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Reroutes a line such that it's connected at the two closest connection sites on the connected page elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RerouteLineRequest
	{
		
		/// <summary>
		/// The object ID of the line to reroute. Only a line with a category indicating it is a "connector" can be rerouted. The start and end connections of the line must be on different page elements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
	}
	
	/// <summary>
	/// Ungroups objects, such as groups.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UngroupObjectsRequest
	{
		
		/// <summary>
		/// The object IDs of the objects to ungroup. Only groups that are not inside other groups can be ungrouped. All the groups should be on the same page. The group itself is deleted. The visual sizes and positions of all the children are preserved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectIds")]
		public string[] ObjectIds { get; set; }
	}
	
	/// <summary>
	/// Unmerges cells in a Table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnmergeTableCellsRequest
	{
		
		/// <summary>
		/// The object ID of the table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// A table range represents a reference to a subset of a table. It's important to note that the cells specified by a table range do not necessarily form a rectangle. For example, let's say we have a 3 x 3 table where all the cells of the last row are merged together. The table looks like this: [ ] A table range with location = (0, 0), row span = 3 and column span = 2 specifies the following cells: x x [ x x x ]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableRange")]
		public TableRange TableRange { get; set; }
	}
	
	/// <summary>
	/// Update the properties of an Image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateImagePropertiesRequest
	{
		
		/// <summary>
		/// The fields that should be updated. At least one field must be specified. The root `imageProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the image outline color, set `fields` to `"outline.outlineFill.solidFill.color"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		/// <summary>
		/// The properties of the Image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageProperties")]
		public ImageProperties ImageProperties { get; set; }
		
		/// <summary>
		/// The object ID of the image the updates are applied to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
	}
	
	/// <summary>
	/// The properties of the Image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageProperties
	{
		
		/// <summary>
		/// The brightness effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect. This property is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brightness")]
		public System.Nullable<System.Single> Brightness { get; set; }
		
		/// <summary>
		/// The contrast effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect. This property is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contrast")]
		public System.Nullable<System.Single> Contrast { get; set; }
		
		/// <summary>
		/// The crop properties of an object enclosed in a container. For example, an Image. The crop properties is represented by the offsets of four edges which define a crop rectangle. The offsets are measured in percentage from the corresponding edges of the object's original bounding rectangle towards inside, relative to the object's original dimensions. - If the offset is in the interval (0, 1), the corresponding edge of crop rectangle is positioned inside of the object's original bounding rectangle. - If the offset is negative or greater than 1, the corresponding edge of crop rectangle is positioned outside of the object's original bounding rectangle. - If the left edge of the crop rectangle is on the right side of its right edge, the object will be flipped horizontally. - If the top edge of the crop rectangle is below its bottom edge, the object will be flipped vertically. - If all offsets and rotation angle is 0, the object is not cropped. After cropping, the content in the crop rectangle will be stretched to fit its container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cropProperties")]
		public CropProperties CropProperties { get; set; }
		
		/// <summary>
		/// A hypertext link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link")]
		public Link Link { get; set; }
		
		/// <summary>
		/// The outline of a PageElement. If these fields are unset, they may be inherited from a parent placeholder if it exists. If there is no parent, the fields will default to the value used for new page elements created in the Slides editor, which may depend on the page element kind.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outline")]
		public Outline Outline { get; set; }
		
		/// <summary>
		/// A recolor effect applied on an image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recolor")]
		public Recolor Recolor { get; set; }
		
		/// <summary>
		/// The shadow properties of a page element. If these fields are unset, they may be inherited from a parent placeholder if it exists. If there is no parent, the fields will default to the value used for new page elements created in the Slides editor, which may depend on the page element kind.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shadow")]
		public Shadow Shadow { get; set; }
		
		/// <summary>
		/// The transparency effect of the image. The value should be in the interval [0.0, 1.0], where 0 means no effect and 1 means completely transparent. This property is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transparency")]
		public System.Nullable<System.Single> Transparency { get; set; }
	}
	
	/// <summary>
	/// The crop properties of an object enclosed in a container. For example, an Image. The crop properties is represented by the offsets of four edges which define a crop rectangle. The offsets are measured in percentage from the corresponding edges of the object's original bounding rectangle towards inside, relative to the object's original dimensions. - If the offset is in the interval (0, 1), the corresponding edge of crop rectangle is positioned inside of the object's original bounding rectangle. - If the offset is negative or greater than 1, the corresponding edge of crop rectangle is positioned outside of the object's original bounding rectangle. - If the left edge of the crop rectangle is on the right side of its right edge, the object will be flipped horizontally. - If the top edge of the crop rectangle is below its bottom edge, the object will be flipped vertically. - If all offsets and rotation angle is 0, the object is not cropped. After cropping, the content in the crop rectangle will be stretched to fit its container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CropProperties
	{
		
		/// <summary>
		/// The rotation angle of the crop window around its center, in radians. Rotation angle is applied after the offset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="angle")]
		public System.Nullable<System.Single> Angle { get; set; }
		
		/// <summary>
		/// The offset specifies the bottom edge of the crop rectangle that is located above the original bounding rectangle bottom edge, relative to the object's original height.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bottomOffset")]
		public System.Nullable<System.Single> BottomOffset { get; set; }
		
		/// <summary>
		/// The offset specifies the left edge of the crop rectangle that is located to the right of the original bounding rectangle left edge, relative to the object's original width.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leftOffset")]
		public System.Nullable<System.Single> LeftOffset { get; set; }
		
		/// <summary>
		/// The offset specifies the right edge of the crop rectangle that is located to the left of the original bounding rectangle right edge, relative to the object's original width.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rightOffset")]
		public System.Nullable<System.Single> RightOffset { get; set; }
		
		/// <summary>
		/// The offset specifies the top edge of the crop rectangle that is located below the original bounding rectangle top edge, relative to the object's original height.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topOffset")]
		public System.Nullable<System.Single> TopOffset { get; set; }
	}
	
	/// <summary>
	/// The outline of a PageElement. If these fields are unset, they may be inherited from a parent placeholder if it exists. If there is no parent, the fields will default to the value used for new page elements created in the Slides editor, which may depend on the page element kind.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Outline
	{
		
		/// <summary>
		/// The dash style of the outline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dashStyle")]
		public System.Nullable<OutlineDashStyle> DashStyle { get; set; }
		
		/// <summary>
		/// The fill of the outline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlineFill")]
		public OutlineFill OutlineFill { get; set; }
		
		/// <summary>
		/// The outline property state. Updating the outline on a page element will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no outline on a page element, set this field to `NOT_RENDERED`. In this case, any other outline fields set in the same request will be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="propertyState")]
		public System.Nullable<OutlinePropertyState> PropertyState { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public Dimension Weight { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OutlineDashStyle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DASH_STYLE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOLID = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DASH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DASH_DOT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LONG_DASH = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LONG_DASH_DOT = 6,
	}
	
	/// <summary>
	/// The fill of the outline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OutlineFill
	{
		
		/// <summary>
		/// A solid color fill. The page or page element is filled entirely with the specified color value. If any field is unset, its value may be inherited from a parent placeholder if it exists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="solidFill")]
		public SolidFill SolidFill { get; set; }
	}
	
	/// <summary>
	/// A solid color fill. The page or page element is filled entirely with the specified color value. If any field is unset, its value may be inherited from a parent placeholder if it exists.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SolidFill
	{
		
		/// <summary>
		/// The fraction of this `color` that should be applied to the pixel. That is, the final pixel color is defined by the equation: pixel color = alpha * (color) + (1.0 - alpha) * (background color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alpha")]
		public System.Nullable<System.Single> Alpha { get; set; }
		
		/// <summary>
		/// A themeable solid color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public OpaqueColor Color { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OutlinePropertyState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RENDERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_RENDERED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INHERIT = 2,
	}
	
	/// <summary>
	/// A recolor effect applied on an image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Recolor
	{
		
		/// <summary>
		/// The name of the recolor effect. The name is determined from the `recolor_stops` by matching the gradient against the colors in the page's current color scheme. This property is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public System.Nullable<RecolorName> Name { get; set; }
		
		/// <summary>
		/// The recolor effect is represented by a gradient, which is a list of color stops. The colors in the gradient will replace the corresponding colors at the same position in the color palette and apply to the image. This property is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recolorStops")]
		public ColorStop[] RecolorStops { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RecolorName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIGHT1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIGHT2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIGHT3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIGHT4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIGHT5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIGHT6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIGHT7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIGHT8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIGHT9 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIGHT10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DARK1 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DARK2 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DARK3 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DARK4 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DARK5 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DARK6 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DARK7 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DARK8 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DARK9 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DARK10 = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRAYSCALE = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEGATIVE = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEPIA = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 24,
	}
	
	/// <summary>
	/// A color and position in a gradient band.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ColorStop
	{
		
		/// <summary>
		/// The alpha value of this color in the gradient band. Defaults to 1.0, fully opaque.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alpha")]
		public System.Nullable<System.Single> Alpha { get; set; }
		
		/// <summary>
		/// A themeable solid color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public OpaqueColor Color { get; set; }
		
		/// <summary>
		/// The relative position of the color stop in the gradient band measured in percentage. The value should be in the interval [0.0, 1.0].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public System.Nullable<System.Single> Position { get; set; }
	}
	
	/// <summary>
	/// The shadow properties of a page element. If these fields are unset, they may be inherited from a parent placeholder if it exists. If there is no parent, the fields will default to the value used for new page elements created in the Slides editor, which may depend on the page element kind.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Shadow
	{
		
		/// <summary>
		/// The alignment point of the shadow, that sets the origin for translate, scale and skew of the shadow. This property is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alignment")]
		public System.Nullable<ShadowAlignment> Alignment { get; set; }
		
		/// <summary>
		/// The alpha of the shadow's color, from 0.0 to 1.0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alpha")]
		public System.Nullable<System.Single> Alpha { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blurRadius")]
		public Dimension BlurRadius { get; set; }
		
		/// <summary>
		/// A themeable solid color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public OpaqueColor Color { get; set; }
		
		/// <summary>
		/// The shadow property state. Updating the shadow on a page element will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no shadow on a page element, set this field to `NOT_RENDERED`. In this case, any other shadow fields set in the same request will be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="propertyState")]
		public OutlinePropertyState PropertyState { get; set; }
		
		/// <summary>
		/// Whether the shadow should rotate with the shape. This property is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rotateWithShape")]
		public System.Nullable<System.Boolean> RotateWithShape { get; set; }
		
		/// <summary>
		/// AffineTransform uses a 3x3 matrix with an implied last row of [ 0 0 1 ] to transform source coordinates (x,y) into destination coordinates (x', y') according to: x' x = shear_y scale_y translate_y 1 [ 1 ] After transformation, x' = scale_x * x + shear_x * y + translate_x; y' = scale_y * y + shear_y * x + translate_y; This message is therefore composed of these six matrix elements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transform")]
		public AffineTransform Transform { get; set; }
		
		/// <summary>
		/// The type of the shadow. This property is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ShadowType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ShadowAlignment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECTANGLE_POSITION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOP_LEFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOP_CENTER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOP_RIGHT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT_CENTER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RIGHT_CENTER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTTOM_LEFT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTTOM_CENTER = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTTOM_RIGHT = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ShadowType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHADOW_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUTER = 1,
	}
	
	/// <summary>
	/// Updates the category of a line.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateLineCategoryRequest
	{
		
		/// <summary>
		/// The line category to update to. The exact line type is determined based on the category to update to and how it's routed to connect to other page elements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineCategory")]
		public CreateLineRequestCategory LineCategory { get; set; }
		
		/// <summary>
		/// The object ID of the line the update is applied to. Only a line with a category indicating it is a "connector" can be updated. The line may be rerouted after updating its category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
	}
	
	/// <summary>
	/// Updates the properties of a Line.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateLinePropertiesRequest
	{
		
		/// <summary>
		/// The fields that should be updated. At least one field must be specified. The root `lineProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the line solid fill color, set `fields` to `"lineFill.solidFill.color"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		/// <summary>
		/// The properties of the Line. When unset, these fields default to values that match the appearance of new lines created in the Slides editor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineProperties")]
		public LineProperties LineProperties { get; set; }
		
		/// <summary>
		/// The object ID of the line the update is applied to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
	}
	
	/// <summary>
	/// The properties of the Line. When unset, these fields default to values that match the appearance of new lines created in the Slides editor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LineProperties
	{
		
		/// <summary>
		/// The dash style of the line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dashStyle")]
		public OutlineDashStyle DashStyle { get; set; }
		
		/// <summary>
		/// The style of the arrow at the end of the line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endArrow")]
		public System.Nullable<LinePropertiesEndArrow> EndArrow { get; set; }
		
		/// <summary>
		/// The properties for one end of a Line connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endConnection")]
		public LineConnection EndConnection { get; set; }
		
		/// <summary>
		/// The fill of the line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineFill")]
		public LineFill LineFill { get; set; }
		
		/// <summary>
		/// A hypertext link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link")]
		public Link Link { get; set; }
		
		/// <summary>
		/// The style of the arrow at the beginning of the line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startArrow")]
		public LinePropertiesEndArrow StartArrow { get; set; }
		
		/// <summary>
		/// The properties for one end of a Line connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startConnection")]
		public LineConnection StartConnection { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public Dimension Weight { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LinePropertiesEndArrow
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARROW_STYLE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEALTH_ARROW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILL_ARROW = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILL_CIRCLE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILL_SQUARE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILL_DIAMOND = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN_ARROW = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN_CIRCLE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN_SQUARE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN_DIAMOND = 10,
	}
	
	/// <summary>
	/// The properties for one end of a Line connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LineConnection
	{
		
		/// <summary>
		/// The object ID of the connected page element. Some page elements, such as groups, tables, and lines do not have connection sites and therefore cannot be connected to a connector line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectedObjectId")]
		public string ConnectedObjectId { get; set; }
		
		/// <summary>
		/// The index of the connection site on the connected page element. In most cases, it corresponds to the predefined connection site index from the ECMA-376 standard. More information on those connection sites can be found in the description of the "cnx" attribute in section 20.1.9.9 and Annex H. "Predefined DrawingML Shape and Text Geometries" of "Office Open XML File Formats-Fundamentals and Markup Language Reference", part 1 of [ECMA-376 5th edition] (http://www.ecma-international.org/publications/standards/Ecma-376.htm). The position of each connection site can also be viewed from Slides editor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionSiteIndex")]
		public System.Nullable<System.Int32> ConnectionSiteIndex { get; set; }
	}
	
	/// <summary>
	/// The fill of the line.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LineFill
	{
		
		/// <summary>
		/// A solid color fill. The page or page element is filled entirely with the specified color value. If any field is unset, its value may be inherited from a parent placeholder if it exists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="solidFill")]
		public SolidFill SolidFill { get; set; }
	}
	
	/// <summary>
	/// Updates the alt text title and/or description of a page element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePageElementAltTextRequest
	{
		
		/// <summary>
		/// The updated alt text description of the page element. If unset the existing value will be maintained. The description is exposed to screen readers and other accessibility interfaces. Only use human readable values related to the content of the page element.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The object ID of the page element the updates are applied to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// The updated alt text title of the page element. If unset the existing value will be maintained. The title is exposed to screen readers and other accessibility interfaces. Only use human readable values related to the content of the page element.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Updates the transform of a page element. Updating the transform of a group will change the absolute transform of the page elements in that group, which can change their visual appearance. See the documentation for PageElement.transform for more details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePageElementTransformRequest
	{
		
		/// <summary>
		/// The apply mode of the transform update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applyMode")]
		public System.Nullable<UpdatePageElementTransformRequestApplyMode> ApplyMode { get; set; }
		
		/// <summary>
		/// The object ID of the page element to update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// AffineTransform uses a 3x3 matrix with an implied last row of [ 0 0 1 ] to transform source coordinates (x,y) into destination coordinates (x', y') according to: x' x = shear_y scale_y translate_y 1 [ 1 ] After transformation, x' = scale_x * x + shear_x * y + translate_x; y' = scale_y * y + shear_y * x + translate_y; This message is therefore composed of these six matrix elements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transform")]
		public AffineTransform Transform { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UpdatePageElementTransformRequestApplyMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPLY_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RELATIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABSOLUTE = 2,
	}
	
	/// <summary>
	/// Updates the Z-order of page elements. Z-order is an ordering of the elements on the page from back to front. The page element in the front may cover the elements that are behind it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePageElementsZOrderRequest
	{
		
		/// <summary>
		/// The Z-order operation to apply on the page elements. When applying the operation on multiple page elements, the relative Z-orders within these page elements before the operation is maintained.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public System.Nullable<UpdatePageElementsZOrderRequestOperation> Operation { get; set; }
		
		/// <summary>
		/// The object IDs of the page elements to update. All the page elements must be on the same page and must not be grouped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageElementObjectIds")]
		public string[] PageElementObjectIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UpdatePageElementsZOrderRequestOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Z_ORDER_OPERATION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRING_TO_FRONT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRING_FORWARD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEND_BACKWARD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEND_TO_BACK = 4,
	}
	
	/// <summary>
	/// Updates the properties of a Page.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePagePropertiesRequest
	{
		
		/// <summary>
		/// The fields that should be updated. At least one field must be specified. The root `pageProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the page background solid fill color, set `fields` to `"pageBackgroundFill.solidFill.color"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		/// <summary>
		/// The object ID of the page the update is applied to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// The properties of the Page. The page will inherit properties from the parent page. Depending on the page type the hierarchy is defined in either SlideProperties or LayoutProperties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageProperties")]
		public PageProperties PageProperties { get; set; }
	}
	
	/// <summary>
	/// The properties of the Page. The page will inherit properties from the parent page. Depending on the page type the hierarchy is defined in either SlideProperties or LayoutProperties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PageProperties
	{
		
		/// <summary>
		/// The palette of predefined colors for a page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colorScheme")]
		public ColorScheme ColorScheme { get; set; }
		
		/// <summary>
		/// The page background fill.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageBackgroundFill")]
		public PageBackgroundFill PageBackgroundFill { get; set; }
	}
	
	/// <summary>
	/// The palette of predefined colors for a page.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ColorScheme
	{
		
		/// <summary>
		/// The ThemeColorType and corresponding concrete color pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colors")]
		public ThemeColorPair[] Colors { get; set; }
	}
	
	/// <summary>
	/// A pair mapping a theme color type to the concrete color it represents.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThemeColorPair
	{
		
		/// <summary>
		/// An RGB color.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public RgbColor Color { get; set; }
		
		/// <summary>
		/// The type of the theme color.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public OpaqueColorThemeColor Type { get; set; }
	}
	
	/// <summary>
	/// The page background fill.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PageBackgroundFill
	{
		
		/// <summary>
		/// The background fill property state. Updating the fill on a page will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no fill on a page, set this field to `NOT_RENDERED`. In this case, any other fill fields set in the same request will be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="propertyState")]
		public OutlinePropertyState PropertyState { get; set; }
		
		/// <summary>
		/// A solid color fill. The page or page element is filled entirely with the specified color value. If any field is unset, its value may be inherited from a parent placeholder if it exists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="solidFill")]
		public SolidFill SolidFill { get; set; }
		
		/// <summary>
		/// The stretched picture fill. The page or page element is filled entirely with the specified picture. The picture is stretched to fit its container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stretchedPictureFill")]
		public StretchedPictureFill StretchedPictureFill { get; set; }
	}
	
	/// <summary>
	/// The stretched picture fill. The page or page element is filled entirely with the specified picture. The picture is stretched to fit its container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StretchedPictureFill
	{
		
		/// <summary>
		/// Reading the content_url: An URL to a picture with a default lifetime of 30 minutes. This URL is tagged with the account of the requester. Anyone with the URL effectively accesses the picture as the original requester. Access to the picture may be lost if the presentation's sharing settings change. Writing the content_url: The picture is fetched once at insertion time and a copy is stored for display inside the presentation. Pictures must be less than 50MB in size, cannot exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF format. The provided URL can be at most 2 kB in length.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentUrl")]
		public string ContentUrl { get; set; }
		
		/// <summary>
		/// A width and height.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public Size Size { get; set; }
	}
	
	/// <summary>
	/// Updates the styling for all of the paragraphs within a Shape or Table that overlap with the given text index range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateParagraphStyleRequest
	{
		
		/// <summary>
		/// A location of a single table cell within a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cellLocation")]
		public TableCellLocation CellLocation { get; set; }
		
		/// <summary>
		/// The fields that should be updated. At least one field must be specified. The root `style` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example, to update the paragraph alignment, set `fields` to `"alignment"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		/// <summary>
		/// The object ID of the shape or table with the text to be styled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// Styles that apply to a whole paragraph. If this text is contained in a shape with a parent placeholder, then these paragraph styles may be inherited from the parent. Which paragraph styles are inherited depend on the nesting level of lists: * A paragraph not in a list will inherit its paragraph style from the paragraph at the 0 nesting level of the list inside the parent placeholder. * A paragraph in a list will inherit its paragraph style from the paragraph at its corresponding nesting level of the list inside the parent placeholder. Inherited paragraph styles are represented as unset fields in this message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="style")]
		public ParagraphStyle Style { get; set; }
		
		/// <summary>
		/// Specifies a contiguous range of an indexed collection, such as characters in text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textRange")]
		public Range TextRange { get; set; }
	}
	
	/// <summary>
	/// Styles that apply to a whole paragraph. If this text is contained in a shape with a parent placeholder, then these paragraph styles may be inherited from the parent. Which paragraph styles are inherited depend on the nesting level of lists: * A paragraph not in a list will inherit its paragraph style from the paragraph at the 0 nesting level of the list inside the parent placeholder. * A paragraph in a list will inherit its paragraph style from the paragraph at its corresponding nesting level of the list inside the parent placeholder. Inherited paragraph styles are represented as unset fields in this message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParagraphStyle
	{
		
		/// <summary>
		/// The text alignment for this paragraph.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alignment")]
		public System.Nullable<ParagraphStyleAlignment> Alignment { get; set; }
		
		/// <summary>
		/// The text direction of this paragraph. If unset, the value defaults to LEFT_TO_RIGHT since text direction is not inherited.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public System.Nullable<ParagraphStyleDirection> Direction { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indentEnd")]
		public Dimension IndentEnd { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indentFirstLine")]
		public Dimension IndentFirstLine { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indentStart")]
		public Dimension IndentStart { get; set; }
		
		/// <summary>
		/// The amount of space between lines, as a percentage of normal, where normal is represented as 100.0. If unset, the value is inherited from the parent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineSpacing")]
		public System.Nullable<System.Single> LineSpacing { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spaceAbove")]
		public Dimension SpaceAbove { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spaceBelow")]
		public Dimension SpaceBelow { get; set; }
		
		/// <summary>
		/// The spacing mode for the paragraph.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spacingMode")]
		public System.Nullable<ParagraphStyleSpacingMode> SpacingMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ParagraphStyleAlignment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALIGNMENT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		END = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JUSTIFIED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ParagraphStyleDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT_DIRECTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT_TO_RIGHT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RIGHT_TO_LEFT = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ParagraphStyleSpacingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPACING_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEVER_COLLAPSE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLLAPSE_LISTS = 2,
	}
	
	/// <summary>
	/// Update the properties of a Shape.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateShapePropertiesRequest
	{
		
		/// <summary>
		/// The fields that should be updated. At least one field must be specified. The root `shapeProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the shape background solid fill color, set `fields` to `"shapeBackgroundFill.solidFill.color"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		/// <summary>
		/// The object ID of the shape the updates are applied to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// The properties of a Shape. If the shape is a placeholder shape as determined by the placeholder field, then these properties may be inherited from a parent placeholder shape. Determining the rendered value of the property depends on the corresponding property_state field value. Any text autofit settings on the shape are automatically deactivated by requests that can impact how text fits in the shape.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shapeProperties")]
		public ShapeProperties ShapeProperties { get; set; }
	}
	
	/// <summary>
	/// The properties of a Shape. If the shape is a placeholder shape as determined by the placeholder field, then these properties may be inherited from a parent placeholder shape. Determining the rendered value of the property depends on the corresponding property_state field value. Any text autofit settings on the shape are automatically deactivated by requests that can impact how text fits in the shape.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShapeProperties
	{
		
		/// <summary>
		/// The autofit properties of a Shape.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autofit")]
		public Autofit Autofit { get; set; }
		
		/// <summary>
		/// The alignment of the content in the shape. If unspecified, the alignment is inherited from a parent placeholder if it exists. If the shape has no parent, the default alignment matches the alignment for new shapes created in the Slides editor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentAlignment")]
		public System.Nullable<ShapePropertiesContentAlignment> ContentAlignment { get; set; }
		
		/// <summary>
		/// A hypertext link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link")]
		public Link Link { get; set; }
		
		/// <summary>
		/// The outline of a PageElement. If these fields are unset, they may be inherited from a parent placeholder if it exists. If there is no parent, the fields will default to the value used for new page elements created in the Slides editor, which may depend on the page element kind.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outline")]
		public Outline Outline { get; set; }
		
		/// <summary>
		/// The shadow properties of a page element. If these fields are unset, they may be inherited from a parent placeholder if it exists. If there is no parent, the fields will default to the value used for new page elements created in the Slides editor, which may depend on the page element kind.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shadow")]
		public Shadow Shadow { get; set; }
		
		/// <summary>
		/// The shape background fill.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shapeBackgroundFill")]
		public ShapeBackgroundFill ShapeBackgroundFill { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ShapePropertiesContentAlignment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_ALIGNMENT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_ALIGNMENT_UNSUPPORTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIDDLE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTTOM = 4,
	}
	
	/// <summary>
	/// The shape background fill.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShapeBackgroundFill
	{
		
		/// <summary>
		/// The background fill property state. Updating the fill on a shape will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no fill on a shape, set this field to `NOT_RENDERED`. In this case, any other fill fields set in the same request will be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="propertyState")]
		public OutlinePropertyState PropertyState { get; set; }
		
		/// <summary>
		/// A solid color fill. The page or page element is filled entirely with the specified color value. If any field is unset, its value may be inherited from a parent placeholder if it exists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="solidFill")]
		public SolidFill SolidFill { get; set; }
	}
	
	/// <summary>
	/// Updates the properties of a Slide.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSlidePropertiesRequest
	{
		
		/// <summary>
		/// The fields that should be updated. At least one field must be specified. The root 'slideProperties' is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update whether a slide is skipped, set `fields` to `"isSkipped"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		/// <summary>
		/// The object ID of the slide the update is applied to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// The properties of Page that are only relevant for pages with page_type SLIDE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slideProperties")]
		public SlideProperties SlideProperties { get; set; }
	}
	
	/// <summary>
	/// The properties of Page that are only relevant for pages with page_type SLIDE.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlideProperties
	{
		
		/// <summary>
		/// Whether the slide is skipped in the presentation mode. Defaults to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSkipped")]
		public System.Nullable<System.Boolean> IsSkipped { get; set; }
		
		/// <summary>
		/// The object ID of the layout that this slide is based on. This property is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="layoutObjectId")]
		public string LayoutObjectId { get; set; }
		
		/// <summary>
		/// The object ID of the master that this slide is based on. This property is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="masterObjectId")]
		public string MasterObjectId { get; set; }
		
		/// <summary>
		/// A page in a presentation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notesPage")]
		public Page NotesPage { get; set; }
	}
	
	/// <summary>
	/// A page in a presentation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Page
	{
		
		/// <summary>
		/// The properties of Page are only relevant for pages with page_type LAYOUT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="layoutProperties")]
		public LayoutProperties LayoutProperties { get; set; }
		
		/// <summary>
		/// The properties of Page that are only relevant for pages with page_type MASTER.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="masterProperties")]
		public MasterProperties MasterProperties { get; set; }
		
		/// <summary>
		/// The properties of Page that are only relevant for pages with page_type NOTES.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notesProperties")]
		public NotesProperties NotesProperties { get; set; }
		
		/// <summary>
		/// The object ID for this page. Object IDs used by Page and PageElement share the same namespace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// The page elements rendered on the page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageElements")]
		public PageElement[] PageElements { get; set; }
		
		/// <summary>
		/// The properties of the Page. The page will inherit properties from the parent page. Depending on the page type the hierarchy is defined in either SlideProperties or LayoutProperties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageProperties")]
		public PageProperties PageProperties { get; set; }
		
		/// <summary>
		/// The type of the page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageType")]
		public System.Nullable<PagePageType> PageType { get; set; }
		
		/// <summary>
		/// Output only. The revision ID of the presentation. Can be used in update requests to assert the presentation revision hasn't changed since the last read operation. Only populated if the user has edit access to the presentation. The revision ID is not a sequential number but an opaque string. The format of the revision ID might change over time. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the presentation has not changed. Conversely, a changed ID (for the same presentation and user) usually means the presentation has been updated. However, a changed ID can also be due to internal factors such as ID format changes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
		
		/// <summary>
		/// The properties of Page that are only relevant for pages with page_type SLIDE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slideProperties")]
		public SlideProperties SlideProperties { get; set; }
	}
	
	/// <summary>
	/// The properties of Page are only relevant for pages with page_type LAYOUT.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LayoutProperties
	{
		
		/// <summary>
		/// The human-readable name of the layout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The object ID of the master that this layout is based on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="masterObjectId")]
		public string MasterObjectId { get; set; }
		
		/// <summary>
		/// The name of the layout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The properties of Page that are only relevant for pages with page_type MASTER.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MasterProperties
	{
		
		/// <summary>
		/// The human-readable name of the master.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
	}
	
	/// <summary>
	/// The properties of Page that are only relevant for pages with page_type NOTES.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotesProperties
	{
		
		/// <summary>
		/// The object ID of the shape on this notes page that contains the speaker notes for the corresponding slide. The actual shape may not always exist on the notes page. Inserting text using this object ID will automatically create the shape. In this case, the actual shape may have different object ID. The `GetPresentation` or `GetPage` action will always return the latest object ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="speakerNotesObjectId")]
		public string SpeakerNotesObjectId { get; set; }
	}
	
	/// <summary>
	/// A visual element rendered on a page.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PageElement
	{
		
		/// <summary>
		/// The description of the page element. Combined with title to display alt text. The field is not supported for Group elements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// A PageElement kind representing a joined collection of PageElements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elementGroup")]
		public Group ElementGroup { get; set; }
		
		/// <summary>
		/// A PageElement kind representing an image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public Image Image { get; set; }
		
		/// <summary>
		/// A PageElement kind representing a non-connector line, straight connector, curved connector, or bent connector.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line")]
		public Line Line { get; set; }
		
		/// <summary>
		/// The object ID for this page element. Object IDs used by google.apps.slides.v1.Page and google.apps.slides.v1.PageElement share the same namespace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// A PageElement kind representing a generic shape that does not have a more specific classification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shape")]
		public Shape Shape { get; set; }
		
		/// <summary>
		/// A PageElement kind representing a linked chart embedded from Google Sheets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sheetsChart")]
		public SheetsChart SheetsChart { get; set; }
		
		/// <summary>
		/// A width and height.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public Size Size { get; set; }
		
		/// <summary>
		/// A PageElement kind representing a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="table")]
		public Table Table { get; set; }
		
		/// <summary>
		/// The title of the page element. Combined with description to display alt text. The field is not supported for Group elements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// AffineTransform uses a 3x3 matrix with an implied last row of [ 0 0 1 ] to transform source coordinates (x,y) into destination coordinates (x', y') according to: x' x = shear_y scale_y translate_y 1 [ 1 ] After transformation, x' = scale_x * x + shear_x * y + translate_x; y' = scale_y * y + shear_y * x + translate_y; This message is therefore composed of these six matrix elements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transform")]
		public AffineTransform Transform { get; set; }
		
		/// <summary>
		/// A PageElement kind representing a video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="video")]
		public Video Video { get; set; }
		
		/// <summary>
		/// A PageElement kind representing word art.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wordArt")]
		public WordArt WordArt { get; set; }
	}
	
	/// <summary>
	/// A PageElement kind representing a joined collection of PageElements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Group
	{
		
		/// <summary>
		/// The collection of elements in the group. The minimum size of a group is 2.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="children")]
		public PageElement[] Children { get; set; }
	}
	
	/// <summary>
	/// A PageElement kind representing an image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Image
	{
		
		/// <summary>
		/// An URL to an image with a default lifetime of 30 minutes. This URL is tagged with the account of the requester. Anyone with the URL effectively accesses the image as the original requester. Access to the image may be lost if the presentation's sharing settings change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentUrl")]
		public string ContentUrl { get; set; }
		
		/// <summary>
		/// The properties of the Image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageProperties")]
		public ImageProperties ImageProperties { get; set; }
		
		/// <summary>
		/// The placeholder information that uniquely identifies a placeholder shape.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placeholder")]
		public Placeholder Placeholder { get; set; }
		
		/// <summary>
		/// The source URL is the URL used to insert the image. The source URL can be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceUrl")]
		public string SourceUrl { get; set; }
	}
	
	/// <summary>
	/// A PageElement kind representing a non-connector line, straight connector, curved connector, or bent connector.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Line
	{
		
		/// <summary>
		/// The category of the line. It matches the `category` specified in CreateLineRequest, and can be updated with UpdateLineCategoryRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineCategory")]
		public CreateLineRequestCategory LineCategory { get; set; }
		
		/// <summary>
		/// The properties of the Line. When unset, these fields default to values that match the appearance of new lines created in the Slides editor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineProperties")]
		public LineProperties LineProperties { get; set; }
		
		/// <summary>
		/// The type of the line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineType")]
		public System.Nullable<LineLineType> LineType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LineLineType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRAIGHT_CONNECTOR_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BENT_CONNECTOR_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BENT_CONNECTOR_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BENT_CONNECTOR_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BENT_CONNECTOR_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURVED_CONNECTOR_2 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURVED_CONNECTOR_3 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURVED_CONNECTOR_4 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURVED_CONNECTOR_5 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRAIGHT_LINE = 10,
	}
	
	/// <summary>
	/// A PageElement kind representing a generic shape that does not have a more specific classification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Shape
	{
		
		/// <summary>
		/// The placeholder information that uniquely identifies a placeholder shape.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placeholder")]
		public Placeholder Placeholder { get; set; }
		
		/// <summary>
		/// The properties of a Shape. If the shape is a placeholder shape as determined by the placeholder field, then these properties may be inherited from a parent placeholder shape. Determining the rendered value of the property depends on the corresponding property_state field value. Any text autofit settings on the shape are automatically deactivated by requests that can impact how text fits in the shape.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shapeProperties")]
		public ShapeProperties ShapeProperties { get; set; }
		
		/// <summary>
		/// The type of the shape.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shapeType")]
		public CreateShapeRequestShapeType ShapeType { get; set; }
		
		/// <summary>
		/// The general text content. The text must reside in a compatible shape (e.g. text box or rectangle) or a table cell in a page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public TextContent Text { get; set; }
	}
	
	/// <summary>
	/// The general text content. The text must reside in a compatible shape (e.g. text box or rectangle) or a table cell in a page.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TextContent
	{
		
		/// <summary>
		/// The bulleted lists contained in this text, keyed by list ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lists")]
		public System.Collections.Generic.Dictionary<string, List> Lists { get; set; }
		
		/// <summary>
		/// The text contents broken down into its component parts, including styling information. This property is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textElements")]
		public TextElement[] TextElements { get; set; }
	}
	
	/// <summary>
	/// A List describes the look and feel of bullets belonging to paragraphs associated with a list. A paragraph that is part of a list has an implicit reference to that list's ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class List
	{
		
		/// <summary>
		/// The ID of the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listId")]
		public string ListId { get; set; }
		
		/// <summary>
		/// A map of nesting levels to the properties of bullets at the associated level. A list has at most nine levels of nesting, so the possible values for the keys of this map are 0 through 8, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nestingLevel")]
		public System.Collections.Generic.Dictionary<string, NestingLevel> NestingLevel { get; set; }
	}
	
	/// <summary>
	/// Contains properties describing the look and feel of a list bullet at a given level of nesting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NestingLevel
	{
		
		/// <summary>
		/// Represents the styling that can be applied to a TextRun. If this text is contained in a shape with a parent placeholder, then these text styles may be inherited from the parent. Which text styles are inherited depend on the nesting level of lists: * A text run in a paragraph that is not in a list will inherit its text style from the the newline character in the paragraph at the 0 nesting level of the list inside the parent placeholder. * A text run in a paragraph that is in a list will inherit its text style from the newline character in the paragraph at its corresponding nesting level of the list inside the parent placeholder. Inherited text styles are represented as unset fields in this message. If text is contained in a shape without a parent placeholder, unsetting these fields will revert the style to a value matching the defaults in the Slides editor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bulletStyle")]
		public TextStyle BulletStyle { get; set; }
	}
	
	/// <summary>
	/// A TextElement describes the content of a range of indices in the text content of a Shape or TableCell.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TextElement
	{
		
		/// <summary>
		/// A TextElement kind that represents auto text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoText")]
		public AutoText AutoText { get; set; }
		
		/// <summary>
		/// The zero-based end index of this text element, exclusive, in Unicode code units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endIndex")]
		public System.Nullable<System.Int32> EndIndex { get; set; }
		
		/// <summary>
		/// A TextElement kind that represents the beginning of a new paragraph.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paragraphMarker")]
		public ParagraphMarker ParagraphMarker { get; set; }
		
		/// <summary>
		/// The zero-based start index of this text element, in Unicode code units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIndex")]
		public System.Nullable<System.Int32> StartIndex { get; set; }
		
		/// <summary>
		/// A TextElement kind that represents a run of text that all has the same styling.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textRun")]
		public TextRun TextRun { get; set; }
	}
	
	/// <summary>
	/// A TextElement kind that represents the beginning of a new paragraph.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParagraphMarker
	{
		
		/// <summary>
		/// Describes the bullet of a paragraph.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bullet")]
		public Bullet Bullet { get; set; }
		
		/// <summary>
		/// Styles that apply to a whole paragraph. If this text is contained in a shape with a parent placeholder, then these paragraph styles may be inherited from the parent. Which paragraph styles are inherited depend on the nesting level of lists: * A paragraph not in a list will inherit its paragraph style from the paragraph at the 0 nesting level of the list inside the parent placeholder. * A paragraph in a list will inherit its paragraph style from the paragraph at its corresponding nesting level of the list inside the parent placeholder. Inherited paragraph styles are represented as unset fields in this message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="style")]
		public ParagraphStyle Style { get; set; }
	}
	
	/// <summary>
	/// Describes the bullet of a paragraph.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Bullet
	{
		
		/// <summary>
		/// Represents the styling that can be applied to a TextRun. If this text is contained in a shape with a parent placeholder, then these text styles may be inherited from the parent. Which text styles are inherited depend on the nesting level of lists: * A text run in a paragraph that is not in a list will inherit its text style from the the newline character in the paragraph at the 0 nesting level of the list inside the parent placeholder. * A text run in a paragraph that is in a list will inherit its text style from the newline character in the paragraph at its corresponding nesting level of the list inside the parent placeholder. Inherited text styles are represented as unset fields in this message. If text is contained in a shape without a parent placeholder, unsetting these fields will revert the style to a value matching the defaults in the Slides editor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bulletStyle")]
		public TextStyle BulletStyle { get; set; }
		
		/// <summary>
		/// The rendered bullet glyph for this paragraph.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="glyph")]
		public string Glyph { get; set; }
		
		/// <summary>
		/// The ID of the list this paragraph belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listId")]
		public string ListId { get; set; }
		
		/// <summary>
		/// The nesting level of this paragraph in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nestingLevel")]
		public System.Nullable<System.Int32> NestingLevel { get; set; }
	}
	
	/// <summary>
	/// A TextElement kind that represents a run of text that all has the same styling.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TextRun
	{
		
		/// <summary>
		/// The text of this run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// Represents the styling that can be applied to a TextRun. If this text is contained in a shape with a parent placeholder, then these text styles may be inherited from the parent. Which text styles are inherited depend on the nesting level of lists: * A text run in a paragraph that is not in a list will inherit its text style from the the newline character in the paragraph at the 0 nesting level of the list inside the parent placeholder. * A text run in a paragraph that is in a list will inherit its text style from the newline character in the paragraph at its corresponding nesting level of the list inside the parent placeholder. Inherited text styles are represented as unset fields in this message. If text is contained in a shape without a parent placeholder, unsetting these fields will revert the style to a value matching the defaults in the Slides editor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="style")]
		public TextStyle Style { get; set; }
	}
	
	/// <summary>
	/// A PageElement kind representing a linked chart embedded from Google Sheets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SheetsChart
	{
		
		/// <summary>
		/// The ID of the specific chart in the Google Sheets spreadsheet that is embedded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chartId")]
		public System.Nullable<System.Int32> ChartId { get; set; }
		
		/// <summary>
		/// The URL of an image of the embedded chart, with a default lifetime of 30 minutes. This URL is tagged with the account of the requester. Anyone with the URL effectively accesses the image as the original requester. Access to the image may be lost if the presentation's sharing settings change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentUrl")]
		public string ContentUrl { get; set; }
		
		/// <summary>
		/// The properties of the SheetsChart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sheetsChartProperties")]
		public SheetsChartProperties SheetsChartProperties { get; set; }
		
		/// <summary>
		/// The ID of the Google Sheets spreadsheet that contains the source chart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spreadsheetId")]
		public string SpreadsheetId { get; set; }
	}
	
	/// <summary>
	/// The properties of the SheetsChart.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SheetsChartProperties
	{
		
		/// <summary>
		/// The properties of the Image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chartImageProperties")]
		public ImageProperties ChartImageProperties { get; set; }
	}
	
	/// <summary>
	/// A PageElement kind representing a table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Table
	{
		
		/// <summary>
		/// Number of columns in the table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columns")]
		public System.Nullable<System.Int32> Columns { get; set; }
		
		/// <summary>
		/// Properties of horizontal cell borders. A table's horizontal cell borders are represented as a grid. The grid has one more row than the number of rows in the table and the same number of columns as the table. For example, if the table is 3 x 3, its horizontal borders will be represented as a grid with 4 rows and 3 columns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="horizontalBorderRows")]
		public TableBorderRow[] HorizontalBorderRows { get; set; }
		
		/// <summary>
		/// Number of rows in the table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public System.Nullable<System.Int32> Rows { get; set; }
		
		/// <summary>
		/// Properties of each column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableColumns")]
		public TableColumnProperties[] TableColumns { get; set; }
		
		/// <summary>
		/// Properties and contents of each row. Cells that span multiple rows are contained in only one of these rows and have a row_span greater than 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableRows")]
		public TableRow[] TableRows { get; set; }
		
		/// <summary>
		/// Properties of vertical cell borders. A table's vertical cell borders are represented as a grid. The grid has the same number of rows as the table and one more column than the number of columns in the table. For example, if the table is 3 x 3, its vertical borders will be represented as a grid with 3 rows and 4 columns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verticalBorderRows")]
		public TableBorderRow[] VerticalBorderRows { get; set; }
	}
	
	/// <summary>
	/// Contents of each border row in a table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableBorderRow
	{
		
		/// <summary>
		/// Properties of each border cell. When a border's adjacent table cells are merged, it is not included in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableBorderCells")]
		public TableBorderCell[] TableBorderCells { get; set; }
	}
	
	/// <summary>
	/// The properties of each border cell.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableBorderCell
	{
		
		/// <summary>
		/// A location of a single table cell within a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public TableCellLocation Location { get; set; }
		
		/// <summary>
		/// The border styling properties of the TableBorderCell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableBorderProperties")]
		public TableBorderProperties TableBorderProperties { get; set; }
	}
	
	/// <summary>
	/// The border styling properties of the TableBorderCell.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableBorderProperties
	{
		
		/// <summary>
		/// The dash style of the border.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dashStyle")]
		public OutlineDashStyle DashStyle { get; set; }
		
		/// <summary>
		/// The fill of the border.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableBorderFill")]
		public TableBorderFill TableBorderFill { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public Dimension Weight { get; set; }
	}
	
	/// <summary>
	/// The fill of the border.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableBorderFill
	{
		
		/// <summary>
		/// A solid color fill. The page or page element is filled entirely with the specified color value. If any field is unset, its value may be inherited from a parent placeholder if it exists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="solidFill")]
		public SolidFill SolidFill { get; set; }
	}
	
	/// <summary>
	/// Properties of each column in a table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableColumnProperties
	{
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnWidth")]
		public Dimension ColumnWidth { get; set; }
	}
	
	/// <summary>
	/// Properties and contents of each row in a table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableRow
	{
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowHeight")]
		public Dimension RowHeight { get; set; }
		
		/// <summary>
		/// Properties and contents of each cell. Cells that span multiple columns are represented only once with a column_span greater than 1. As a result, the length of this collection does not always match the number of columns of the entire table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableCells")]
		public TableCell[] TableCells { get; set; }
		
		/// <summary>
		/// Properties of each row in a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableRowProperties")]
		public TableRowProperties TableRowProperties { get; set; }
	}
	
	/// <summary>
	/// Properties and contents of each table cell.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableCell
	{
		
		/// <summary>
		/// Column span of the cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnSpan")]
		public System.Nullable<System.Int32> ColumnSpan { get; set; }
		
		/// <summary>
		/// A location of a single table cell within a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public TableCellLocation Location { get; set; }
		
		/// <summary>
		/// Row span of the cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowSpan")]
		public System.Nullable<System.Int32> RowSpan { get; set; }
		
		/// <summary>
		/// The properties of the TableCell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableCellProperties")]
		public TableCellProperties TableCellProperties { get; set; }
		
		/// <summary>
		/// The general text content. The text must reside in a compatible shape (e.g. text box or rectangle) or a table cell in a page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public TextContent Text { get; set; }
	}
	
	/// <summary>
	/// The properties of the TableCell.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableCellProperties
	{
		
		/// <summary>
		/// The alignment of the content in the table cell. The default alignment matches the alignment for newly created table cells in the Slides editor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentAlignment")]
		public ShapePropertiesContentAlignment ContentAlignment { get; set; }
		
		/// <summary>
		/// The table cell background fill.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableCellBackgroundFill")]
		public TableCellBackgroundFill TableCellBackgroundFill { get; set; }
	}
	
	/// <summary>
	/// The table cell background fill.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableCellBackgroundFill
	{
		
		/// <summary>
		/// The background fill property state. Updating the fill on a table cell will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no fill on a table cell, set this field to `NOT_RENDERED`. In this case, any other fill fields set in the same request will be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="propertyState")]
		public OutlinePropertyState PropertyState { get; set; }
		
		/// <summary>
		/// A solid color fill. The page or page element is filled entirely with the specified color value. If any field is unset, its value may be inherited from a parent placeholder if it exists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="solidFill")]
		public SolidFill SolidFill { get; set; }
	}
	
	/// <summary>
	/// Properties of each row in a table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableRowProperties
	{
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minRowHeight")]
		public Dimension MinRowHeight { get; set; }
	}
	
	/// <summary>
	/// A PageElement kind representing a video.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Video
	{
		
		/// <summary>
		/// The video source's unique identifier for this video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The video source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public CreateVideoRequestSource Source { get; set; }
		
		/// <summary>
		/// An URL to a video. The URL is valid as long as the source video exists and sharing settings do not change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The properties of the Video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoProperties")]
		public VideoProperties VideoProperties { get; set; }
	}
	
	/// <summary>
	/// The properties of the Video.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VideoProperties
	{
		
		/// <summary>
		/// Whether to enable video autoplay when the page is displayed in present mode. Defaults to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoPlay")]
		public System.Nullable<System.Boolean> AutoPlay { get; set; }
		
		/// <summary>
		/// The time at which to end playback, measured in seconds from the beginning of the video. If set, the end time should be after the start time. If not set or if you set this to a value that exceeds the video's length, the video will be played until its end.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.Nullable<System.UInt32> End { get; set; }
		
		/// <summary>
		/// Whether to mute the audio during video playback. Defaults to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mute")]
		public System.Nullable<System.Boolean> Mute { get; set; }
		
		/// <summary>
		/// The outline of a PageElement. If these fields are unset, they may be inherited from a parent placeholder if it exists. If there is no parent, the fields will default to the value used for new page elements created in the Slides editor, which may depend on the page element kind.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outline")]
		public Outline Outline { get; set; }
		
		/// <summary>
		/// The time at which to start playback, measured in seconds from the beginning of the video. If set, the start time should be before the end time. If you set this to a value that exceeds the video's length in seconds, the video will be played from the last second. If not set, the video will be played from the beginning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.UInt32> Start { get; set; }
	}
	
	/// <summary>
	/// A PageElement kind representing word art.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WordArt
	{
		
		/// <summary>
		/// The text rendered as word art.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="renderedText")]
		public string RenderedText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PagePageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SLIDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASTER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAYOUT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOTES = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOTES_MASTER = 4,
	}
	
	/// <summary>
	/// Updates the position of slides in the presentation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSlidesPositionRequest
	{
		
		/// <summary>
		/// The index where the slides should be inserted, based on the slide arrangement before the move takes place. Must be between zero and the number of slides in the presentation, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertionIndex")]
		public System.Nullable<System.Int32> InsertionIndex { get; set; }
		
		/// <summary>
		/// The IDs of the slides in the presentation that should be moved. The slides in this list must be in existing presentation order, without duplicates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slideObjectIds")]
		public string[] SlideObjectIds { get; set; }
	}
	
	/// <summary>
	/// Updates the properties of the table borders in a Table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateTableBorderPropertiesRequest
	{
		
		/// <summary>
		/// The border position in the table range the updates should apply to. If a border position is not specified, the updates will apply to all borders in the table range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="borderPosition")]
		public System.Nullable<UpdateTableBorderPropertiesRequestBorderPosition> BorderPosition { get; set; }
		
		/// <summary>
		/// The fields that should be updated. At least one field must be specified. The root `tableBorderProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the table border solid fill color, set `fields` to `"tableBorderFill.solidFill.color"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		/// <summary>
		/// The object ID of the table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// The border styling properties of the TableBorderCell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableBorderProperties")]
		public TableBorderProperties TableBorderProperties { get; set; }
		
		/// <summary>
		/// A table range represents a reference to a subset of a table. It's important to note that the cells specified by a table range do not necessarily form a rectangle. For example, let's say we have a 3 x 3 table where all the cells of the last row are merged together. The table looks like this: [ ] A table range with location = (0, 0), row span = 3 and column span = 2 specifies the following cells: x x [ x x x ]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableRange")]
		public TableRange TableRange { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UpdateTableBorderPropertiesRequestBorderPosition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTTOM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INNER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INNER_HORIZONTAL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INNER_VERTICAL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUTER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RIGHT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOP = 8,
	}
	
	/// <summary>
	/// Update the properties of a TableCell.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateTableCellPropertiesRequest
	{
		
		/// <summary>
		/// The fields that should be updated. At least one field must be specified. The root `tableCellProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the table cell background solid fill color, set `fields` to `"tableCellBackgroundFill.solidFill.color"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		/// <summary>
		/// The object ID of the table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// The properties of the TableCell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableCellProperties")]
		public TableCellProperties TableCellProperties { get; set; }
		
		/// <summary>
		/// A table range represents a reference to a subset of a table. It's important to note that the cells specified by a table range do not necessarily form a rectangle. For example, let's say we have a 3 x 3 table where all the cells of the last row are merged together. The table looks like this: [ ] A table range with location = (0, 0), row span = 3 and column span = 2 specifies the following cells: x x [ x x x ]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableRange")]
		public TableRange TableRange { get; set; }
	}
	
	/// <summary>
	/// Updates the properties of a Table column.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateTableColumnPropertiesRequest
	{
		
		/// <summary>
		/// The list of zero-based indices specifying which columns to update. If no indices are provided, all columns in the table will be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnIndices")]
		public int[] ColumnIndices { get; set; }
		
		/// <summary>
		/// The fields that should be updated. At least one field must be specified. The root `tableColumnProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the column width, set `fields` to `"column_width"`. If '"column_width"' is included in the field mask but the property is left unset, the column width will default to 406,400 EMU (32 points).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		/// <summary>
		/// The object ID of the table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// Properties of each column in a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableColumnProperties")]
		public TableColumnProperties TableColumnProperties { get; set; }
	}
	
	/// <summary>
	/// Updates the properties of a Table row.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateTableRowPropertiesRequest
	{
		
		/// <summary>
		/// The fields that should be updated. At least one field must be specified. The root `tableRowProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the minimum row height, set `fields` to `"min_row_height"`. If '"min_row_height"' is included in the field mask but the property is left unset, the minimum row height will default to 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		/// <summary>
		/// The object ID of the table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// The list of zero-based indices specifying which rows to update. If no indices are provided, all rows in the table will be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowIndices")]
		public int[] RowIndices { get; set; }
		
		/// <summary>
		/// Properties of each row in a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableRowProperties")]
		public TableRowProperties TableRowProperties { get; set; }
	}
	
	/// <summary>
	/// Update the styling of text in a Shape or Table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateTextStyleRequest
	{
		
		/// <summary>
		/// A location of a single table cell within a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cellLocation")]
		public TableCellLocation CellLocation { get; set; }
		
		/// <summary>
		/// The fields that should be updated. At least one field must be specified. The root `style` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example, to update the text style to bold, set `fields` to `"bold"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		/// <summary>
		/// The object ID of the shape or table with the text to be styled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// Represents the styling that can be applied to a TextRun. If this text is contained in a shape with a parent placeholder, then these text styles may be inherited from the parent. Which text styles are inherited depend on the nesting level of lists: * A text run in a paragraph that is not in a list will inherit its text style from the the newline character in the paragraph at the 0 nesting level of the list inside the parent placeholder. * A text run in a paragraph that is in a list will inherit its text style from the newline character in the paragraph at its corresponding nesting level of the list inside the parent placeholder. Inherited text styles are represented as unset fields in this message. If text is contained in a shape without a parent placeholder, unsetting these fields will revert the style to a value matching the defaults in the Slides editor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="style")]
		public TextStyle Style { get; set; }
		
		/// <summary>
		/// Specifies a contiguous range of an indexed collection, such as characters in text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textRange")]
		public Range TextRange { get; set; }
	}
	
	/// <summary>
	/// Update the properties of a Video.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateVideoPropertiesRequest
	{
		
		/// <summary>
		/// The fields that should be updated. At least one field must be specified. The root `videoProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the video outline color, set `fields` to `"outline.outlineFill.solidFill.color"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		/// <summary>
		/// The object ID of the video the updates are applied to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// The properties of the Video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoProperties")]
		public VideoProperties VideoProperties { get; set; }
	}
	
	/// <summary>
	/// Provides control over how write requests are executed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WriteControl
	{
		
		/// <summary>
		/// The revision ID of the presentation required for the write request. If specified and the required revision ID doesn't match the presentation's current revision ID, the request is not processed and returns a 400 bad request error. When a required revision ID is returned in a response, it indicates the revision ID of the document after the request was applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredRevisionId")]
		public string RequiredRevisionId { get; set; }
	}
	
	/// <summary>
	/// Response message from a batch update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdatePresentationResponse
	{
		
		/// <summary>
		/// The presentation the updates were applied to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="presentationId")]
		public string PresentationId { get; set; }
		
		/// <summary>
		/// The reply of the updates. This maps 1:1 with the updates, although replies to some requests may be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replies")]
		public Response[] Replies { get; set; }
		
		/// <summary>
		/// Provides control over how write requests are executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="writeControl")]
		public WriteControl WriteControl { get; set; }
	}
	
	/// <summary>
	/// A single response from an update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Response
	{
		
		/// <summary>
		/// The result of creating an image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createImage")]
		public CreateImageResponse CreateImage { get; set; }
		
		/// <summary>
		/// The result of creating a line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createLine")]
		public CreateLineResponse CreateLine { get; set; }
		
		/// <summary>
		/// The result of creating a shape.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createShape")]
		public CreateShapeResponse CreateShape { get; set; }
		
		/// <summary>
		/// The result of creating an embedded Google Sheets chart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createSheetsChart")]
		public CreateSheetsChartResponse CreateSheetsChart { get; set; }
		
		/// <summary>
		/// The result of creating a slide.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createSlide")]
		public CreateSlideResponse CreateSlide { get; set; }
		
		/// <summary>
		/// The result of creating a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTable")]
		public CreateTableResponse CreateTable { get; set; }
		
		/// <summary>
		/// The result of creating a video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createVideo")]
		public CreateVideoResponse CreateVideo { get; set; }
		
		/// <summary>
		/// The response of duplicating an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duplicateObject")]
		public DuplicateObjectResponse DuplicateObject { get; set; }
		
		/// <summary>
		/// The result of grouping objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupObjects")]
		public GroupObjectsResponse GroupObjects { get; set; }
		
		/// <summary>
		/// The result of replacing shapes with an image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replaceAllShapesWithImage")]
		public ReplaceAllShapesWithImageResponse ReplaceAllShapesWithImage { get; set; }
		
		/// <summary>
		/// The result of replacing shapes with a Google Sheets chart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replaceAllShapesWithSheetsChart")]
		public ReplaceAllShapesWithSheetsChartResponse ReplaceAllShapesWithSheetsChart { get; set; }
		
		/// <summary>
		/// The result of replacing text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replaceAllText")]
		public ReplaceAllTextResponse ReplaceAllText { get; set; }
	}
	
	/// <summary>
	/// The result of creating an image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateImageResponse
	{
		
		/// <summary>
		/// The object ID of the created image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
	}
	
	/// <summary>
	/// The result of creating a line.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateLineResponse
	{
		
		/// <summary>
		/// The object ID of the created line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
	}
	
	/// <summary>
	/// The result of creating a shape.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateShapeResponse
	{
		
		/// <summary>
		/// The object ID of the created shape.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
	}
	
	/// <summary>
	/// The result of creating an embedded Google Sheets chart.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSheetsChartResponse
	{
		
		/// <summary>
		/// The object ID of the created chart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
	}
	
	/// <summary>
	/// The result of creating a slide.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSlideResponse
	{
		
		/// <summary>
		/// The object ID of the created slide.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
	}
	
	/// <summary>
	/// The result of creating a table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateTableResponse
	{
		
		/// <summary>
		/// The object ID of the created table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
	}
	
	/// <summary>
	/// The result of creating a video.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateVideoResponse
	{
		
		/// <summary>
		/// The object ID of the created video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
	}
	
	/// <summary>
	/// The response of duplicating an object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DuplicateObjectResponse
	{
		
		/// <summary>
		/// The ID of the new duplicate object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
	}
	
	/// <summary>
	/// The result of grouping objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GroupObjectsResponse
	{
		
		/// <summary>
		/// The object ID of the created group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
	}
	
	/// <summary>
	/// The result of replacing shapes with an image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReplaceAllShapesWithImageResponse
	{
		
		/// <summary>
		/// The number of shapes replaced with images.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="occurrencesChanged")]
		public System.Nullable<System.Int32> OccurrencesChanged { get; set; }
	}
	
	/// <summary>
	/// The result of replacing shapes with a Google Sheets chart.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReplaceAllShapesWithSheetsChartResponse
	{
		
		/// <summary>
		/// The number of shapes replaced with charts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="occurrencesChanged")]
		public System.Nullable<System.Int32> OccurrencesChanged { get; set; }
	}
	
	/// <summary>
	/// The result of replacing text.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReplaceAllTextResponse
	{
		
		/// <summary>
		/// The number of occurrences changed by replacing all text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="occurrencesChanged")]
		public System.Nullable<System.Int32> OccurrencesChanged { get; set; }
	}
	
	/// <summary>
	/// A Google Slides presentation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Presentation
	{
		
		/// <summary>
		/// The layouts in the presentation. A layout is a template that determines how content is arranged and styled on the slides that inherit from that layout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="layouts")]
		public Page[] Layouts { get; set; }
		
		/// <summary>
		/// The locale of the presentation, as an IETF BCP 47 language tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		/// <summary>
		/// The slide masters in the presentation. A slide master contains all common page elements and the common properties for a set of layouts. They serve three purposes: - Placeholder shapes on a master contain the default text styles and shape properties of all placeholder shapes on pages that use that master. - The master page properties define the common page properties inherited by its layouts. - Any other shapes on the master slide appear on all slides using that master, regardless of their layout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="masters")]
		public Page[] Masters { get; set; }
		
		/// <summary>
		/// A page in a presentation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notesMaster")]
		public Page NotesMaster { get; set; }
		
		/// <summary>
		/// A width and height.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		public Size PageSize { get; set; }
		
		/// <summary>
		/// The ID of the presentation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="presentationId")]
		public string PresentationId { get; set; }
		
		/// <summary>
		/// Output only. The revision ID of the presentation. Can be used in update requests to assert the presentation revision hasn't changed since the last read operation. Only populated if the user has edit access to the presentation. The revision ID is not a sequential number but a nebulous string. The format of the revision ID may change over time, so it should be treated opaquely. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the presentation has not changed. Conversely, a changed ID (for the same presentation and user) usually means the presentation has been updated. However, a changed ID can also be due to internal factors such as ID format changes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
		
		/// <summary>
		/// The slides in the presentation. A slide inherits properties from a slide layout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slides")]
		public Page[] Slides { get; set; }
		
		/// <summary>
		/// The title of the presentation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// The thumbnail of a page.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Thumbnail
	{
		
		/// <summary>
		/// The content URL of the thumbnail image. The URL to the image has a default lifetime of 30 minutes. This URL is tagged with the account of the requester. Anyone with the URL effectively accesses the image as the original requester. Access to the image may be lost if the presentation's sharing settings change. The mime type of the thumbnail image is the same as specified in the `GetPageThumbnailRequest`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentUrl")]
		public string ContentUrl { get; set; }
		
		/// <summary>
		/// The positive height in pixels of the thumbnail image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// The positive width in pixels of the thumbnail image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates a blank presentation using the title given in the request. If a `presentationId` is provided, it is used as the ID of the new presentation. Otherwise, a new ID is generated. Other fields in the request, including any provided content, are ignored. Returns the created presentation.
		/// Slides_presentations_create v1/presentations
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Presentation> Slides_presentations_createAsync(Presentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/presentations";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Presentation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the latest version of the specified presentation.
		/// Slides_presentations_get v1/presentations/{presentationId}
		/// </summary>
		/// <param name="presentationId">The ID of the presentation to retrieve.</param>
		/// <returns>Successful response</returns>
		public async Task<Presentation> Slides_presentations_getAsync(string presentationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/presentations/"+ (presentationId==null? "" : System.Uri.EscapeDataString(presentationId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Presentation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the latest version of the specified page in the presentation.
		/// Slides_presentations_pages_get v1/presentations/{presentationId}/pages/{pageObjectId}
		/// </summary>
		/// <param name="presentationId">The ID of the presentation to retrieve.</param>
		/// <param name="pageObjectId">The object ID of the page to retrieve.</param>
		/// <returns>Successful response</returns>
		public async Task<Page> Slides_presentations_pages_getAsync(string presentationId, string pageObjectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/presentations/"+ (presentationId==null? "" : System.Uri.EscapeDataString(presentationId))+"/pages/"+ (pageObjectId==null? "" : System.Uri.EscapeDataString(pageObjectId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Page>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Generates a thumbnail of the latest version of the specified page in the presentation and returns a URL to the thumbnail image. This request counts as an [expensive read request](/slides/limits) for quota purposes.
		/// Slides_presentations_pages_getThumbnail v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail
		/// </summary>
		/// <param name="presentationId">The ID of the presentation to retrieve.</param>
		/// <param name="pageObjectId">The object ID of the page whose thumbnail to retrieve.</param>
		/// <param name="thumbnailProperties_mimeType">The optional mime type of the thumbnail image. If you don't specify the mime type, the mime type defaults to PNG.</param>
		/// <param name="thumbnailProperties_thumbnailSize">The optional thumbnail image size. If you don't specify the size, the server chooses a default size of the image.</param>
		/// <returns>Successful response</returns>
		public async Task<Thumbnail> Slides_presentations_pages_getThumbnailAsync(string presentationId, string pageObjectId, Slides_presentations_pages_getThumbnailThumbnailProperties_mimeType thumbnailProperties_mimeType, Slides_presentations_pages_getThumbnailThumbnailProperties_thumbnailSize thumbnailProperties_thumbnailSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/presentations/"+ (presentationId==null? "" : System.Uri.EscapeDataString(presentationId))+"/pages/"+ (pageObjectId==null? "" : System.Uri.EscapeDataString(pageObjectId))+"/thumbnail&thumbnailProperties.mimeType=" + thumbnailProperties_mimeType+"&thumbnailProperties.thumbnailSize=" + thumbnailProperties_thumbnailSize;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Thumbnail>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Applies one or more updates to the presentation. Each request is validated before being applied. If any request is not valid, then the entire request will fail and nothing will be applied. Some requests have replies to give you some information about how they are applied. Other requests do not need to return information; these each return an empty reply. The order of replies matches that of the requests. For example, suppose you call batchUpdate with four updates, and only the third one returns information. The response would have two empty replies: the reply to the third request, and another empty reply, in that order. Because other users may be editing the presentation, the presentation might not exactly reflect your changes: your changes may be altered with respect to collaborator changes. If there are no collaborators, the presentation should reflect your changes. In any case, the updates in your request are guaranteed to be applied together atomically.
		/// Slides_presentations_batchUpdate v1/presentations/{presentationId}:batchUpdate
		/// </summary>
		/// <param name="presentationId">The presentation to apply the updates to.</param>
		/// <returns>Successful response</returns>
		public async Task<BatchUpdatePresentationResponse> Slides_presentations_batchUpdateAsync(string presentationId, BatchUpdatePresentationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/presentations/"+ (presentationId==null? "" : System.Uri.EscapeDataString(presentationId))+":batchUpdate";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BatchUpdatePresentationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum Slides_presentations_pages_getThumbnailThumbnailProperties_mimeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PNG = 0,
	}
	
	public enum Slides_presentations_pages_getThumbnailThumbnailProperties_thumbnailSize
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THUMBNAIL_SIZE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LARGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMALL = 3,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
