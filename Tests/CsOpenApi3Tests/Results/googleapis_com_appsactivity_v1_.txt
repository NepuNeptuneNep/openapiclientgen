//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An Activity resource is a combined view of multiple events. An activity has a list of individual events and a combined view of the common fields among all events.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Activity
	{
		
		/// <summary>
		/// Represents the changes associated with an action taken by a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="combinedEvent")]
		public Event CombinedEvent { get; set; }
		
		/// <summary>
		/// A list of all the Events that make up the Activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="singleEvents")]
		public Event[] SingleEvents { get; set; }
	}
	
	/// <summary>
	/// Represents the changes associated with an action taken by a user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Event
	{
		
		/// <summary>
		/// Additional event types. Some events may have multiple types when multiple actions are part of a single event. For example, creating a document, renaming it, and sharing it may be part of a single file-creation event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalEventTypes")]
		public string[] AdditionalEventTypes { get; set; }
		
		/// <summary>
		/// The time at which the event occurred formatted as Unix time in milliseconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventTimeMillis")]
		public string EventTimeMillis { get; set; }
		
		/// <summary>
		/// Whether this event is caused by a user being deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromUserDeletion")]
		public System.Nullable<System.Boolean> FromUserDeletion { get; set; }
		
		/// <summary>
		/// Contains information about changes in an object's parents as a result of a move type event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="move")]
		public Move Move { get; set; }
		
		/// <summary>
		/// Extra information for permissionChange type events, such as the user or group the new permission applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissionChanges")]
		public PermissionChange[] PermissionChanges { get; set; }
		
		/// <summary>
		/// The main type of event that occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryEventType")]
		public System.Nullable<EventPrimaryEventType> PrimaryEventType { get; set; }
		
		/// <summary>
		/// Contains information about a renametype event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rename")]
		public Rename Rename { get; set; }
		
		/// <summary>
		/// Information about the object modified by the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public Target Target { get; set; }
		
		/// <summary>
		/// A representation of a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	/// <summary>
	/// Contains information about changes in an object's parents as a result of a move type event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Move
	{
		
		/// <summary>
		/// The added parent(s).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addedParents")]
		public Parent[] AddedParents { get; set; }
		
		/// <summary>
		/// The removed parent(s).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removedParents")]
		public Parent[] RemovedParents { get; set; }
	}
	
	/// <summary>
	/// Contains information about a parent object. For example, a folder in Drive is a parent for all files within it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Parent
	{
		
		/// <summary>
		/// The parent's ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Whether this is the root folder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isRoot")]
		public System.Nullable<System.Boolean> IsRoot { get; set; }
		
		/// <summary>
		/// The parent's title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Contains information about a Drive object's permissions that changed as a result of a permissionChange type event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PermissionChange
	{
		
		/// <summary>
		/// Lists all Permission objects added.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addedPermissions")]
		public Permission[] AddedPermissions { get; set; }
		
		/// <summary>
		/// Lists all Permission objects removed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removedPermissions")]
		public Permission[] RemovedPermissions { get; set; }
	}
	
	/// <summary>
	/// Contains information about the permissions and type of access allowed with regards to a Google Drive object. This is a subset of the fields contained in a corresponding Drive Permissions object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Permission
	{
		
		/// <summary>
		/// The name of the user or group the permission applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The ID for this permission. Corresponds to the Drive API's permission ID returned as part of the Drive Permissions resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissionId")]
		public string PermissionId { get; set; }
		
		/// <summary>
		/// Indicates the Google Drive permissions role. The role determines a user's ability to read, write, or comment on the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public System.Nullable<PermissionRole> Role { get; set; }
		
		/// <summary>
		/// Indicates how widely permissions are granted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<PermissionType> Type { get; set; }
		
		/// <summary>
		/// A representation of a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
		
		/// <summary>
		/// Whether the permission requires a link to the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="withLink")]
		public System.Nullable<System.Boolean> WithLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PermissionRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		commenter = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fileOrganizer = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		owner = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		publishedReader = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		reader = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		writer = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PermissionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		anyone = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		domain = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 3,
	}
	
	/// <summary>
	/// A representation of a user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class User
	{
		
		/// <summary>
		/// A boolean which indicates whether the specified User was deleted. If true, name, photo and permission_id will be omitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDeleted")]
		public System.Nullable<System.Boolean> IsDeleted { get; set; }
		
		/// <summary>
		/// Whether the user is the authenticated user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isMe")]
		public System.Nullable<System.Boolean> IsMe { get; set; }
		
		/// <summary>
		/// The displayable name of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The permission ID associated with this user. Equivalent to the Drive API's permission ID for this user, returned as part of the Drive Permissions resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissionId")]
		public string PermissionId { get; set; }
		
		/// <summary>
		/// Photo information for a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photo")]
		public Photo Photo { get; set; }
	}
	
	/// <summary>
	/// Photo information for a user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Photo
	{
		
		/// <summary>
		/// The URL of the photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EventPrimaryEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		comment = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		create = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		edit = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		emptyTrash = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		move = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		permissionChange = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rename = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		trash = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		untrash = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		upload = 10,
	}
	
	/// <summary>
	/// Contains information about a renametype event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Rename
	{
		
		/// <summary>
		/// The new title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newTitle")]
		public string NewTitle { get; set; }
		
		/// <summary>
		/// The old title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oldTitle")]
		public string OldTitle { get; set; }
	}
	
	/// <summary>
	/// Information about the object modified by the event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Target
	{
		
		/// <summary>
		/// The ID of the target. For example, in Google Drive, this is the file or folder ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The MIME type of the target.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
		
		/// <summary>
		/// The name of the target. For example, in Google Drive, this is the title of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The response from the list request. Contains a list of activities and a token to retrieve the next page of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListActivitiesResponse
	{
		
		/// <summary>
		/// List of activities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activities")]
		public Activity[] Activities { get; set; }
		
		/// <summary>
		/// Token for the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns a list of activities visible to the current logged in user. Visible activities are determined by the visibility settings of the object that was acted on, e.g. Drive files a user can see. An activity is a record of past events. Multiple events may be merged if they are similar. A request is scoped to activities from a given Google service using the source parameter.
		/// Appsactivity_activities_list activities
		/// </summary>
		/// <param name="drive_ancestorId">Identifies the Drive folder containing the items for which to return activities.</param>
		/// <param name="drive_fileId">Identifies the Drive item to return activities for.</param>
		/// <param name="groupingStrategy">Indicates the strategy to use when grouping singleEvents items in the associated combinedEvent object.</param>
		/// <param name="pageSize">The maximum number of events to return on a page. The response includes a continuation token if there are more events.</param>
		/// <param name="pageToken">A token to retrieve a specific page of results.</param>
		/// <param name="source">The Google service from which to return activities. Possible values of source are: 
		///- drive.google.com</param>
		/// <param name="userId">The ID used for ACL checks (does not filter the resulting event list by the assigned value). Use the special value me to indicate the currently authenticated user.</param>
		/// <returns>Successful response</returns>
		public async Task<ListActivitiesResponse> Appsactivity_activities_listAsync(string drive_ancestorId, string drive_fileId, Appsactivity_activities_listGroupingStrategy groupingStrategy, int pageSize, string pageToken, string source, string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "activities?drive.ancestorId=" + (drive_ancestorId==null? "" : System.Uri.EscapeDataString(drive_ancestorId))+"&drive.fileId=" + (drive_fileId==null? "" : System.Uri.EscapeDataString(drive_fileId))+"&groupingStrategy=" + groupingStrategy+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&source=" + (source==null? "" : System.Uri.EscapeDataString(source))+"&userId=" + (userId==null? "" : System.Uri.EscapeDataString(userId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListActivitiesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum Appsactivity_activities_listGroupingStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		driveUi = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
