//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// This message defines attributes associated with API operations, such as a network API request. The terminology is based on the conventions used by Google APIs, Istio, and OpenAPI.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Api
	{
		
		/// <summary>
		/// The API operation name. For gRPC requests, it is the fully qualified API method name, such as "google.pubsub.v1.Publisher.Publish". For OpenAPI requests, it is the `operationId`, such as "getPet".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// The API protocol used for sending the request, such as "http", "https", "grpc", or "internal".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public string Protocol { get; set; }
		
		/// <summary>
		/// The API service name. It is a logical identifier for a networked API, such as "pubsub.googleapis.com". The naming syntax depends on the API management system being used for handling the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// The API version associated with the API operation above, such as "v1" or "v1alpha1".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// This message defines the standard attribute vocabulary for Google APIs. An attribute is a piece of metadata that describes an activity on a network service. For example, the size of an HTTP request, or the status code of an HTTP response. Each attribute has a type and a name, which is logically defined as a proto message field in `AttributeContext`. The field type becomes the attribute type, and the field path becomes the attribute name. For example, the attribute `source.ip` maps to field `AttributeContext.source.ip`. This message definition is guaranteed not to have any wire breaking change. So you can use it directly for passing attributes across different systems. NOTE: Different system may generate different subset of attributes. Please verify the system specification before relying on an attribute generated a system.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttributeContext
	{
		
		/// <summary>
		/// This message defines attributes associated with API operations, such as a network API request. The terminology is based on the conventions used by Google APIs, Istio, and OpenAPI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="api")]
		public Api Api { get; set; }
		
		/// <summary>
		/// This message defines attributes for a node that handles a network request. The node can be either a service or an application that sends, forwards, or receives the request. Service peers should fill in `principal` and `labels` as appropriate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public Peer Destination { get; set; }
		
		/// <summary>
		/// Supports extensions for advanced use cases, such as logs and metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extensions")]
		public string[] Extensions { get; set; }
		
		/// <summary>
		/// This message defines attributes for a node that handles a network request. The node can be either a service or an application that sends, forwards, or receives the request. Service peers should fill in `principal` and `labels` as appropriate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public Peer Origin { get; set; }
		
		/// <summary>
		/// This message defines attributes for an HTTP request. If the actual request is not an HTTP request, the runtime system should try to map the actual request to an equivalent HTTP request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="request")]
		public Request Request { get; set; }
		
		/// <summary>
		/// This message defines core attributes for a resource. A resource is an addressable (named) entity provided by the destination service. For example, a file stored on a network storage service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public Resource Resource { get; set; }
		
		/// <summary>
		/// This message defines attributes for a typical network response. It generally models semantics of an HTTP response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public Response Response { get; set; }
		
		/// <summary>
		/// This message defines attributes for a node that handles a network request. The node can be either a service or an application that sends, forwards, or receives the request. Service peers should fill in `principal` and `labels` as appropriate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Peer Source { get; set; }
	}
	
	/// <summary>
	/// This message defines attributes for a node that handles a network request. The node can be either a service or an application that sends, forwards, or receives the request. Service peers should fill in `principal` and `labels` as appropriate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Peer
	{
		
		/// <summary>
		/// The IP address of the peer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ip")]
		public string Ip { get; set; }
		
		/// <summary>
		/// The labels associated with the peer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The network port of the peer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="port")]
		public string Port { get; set; }
		
		/// <summary>
		/// The identity of this peer. Similar to `Request.auth.principal`, but relative to the peer instead of the request. For example, the identity associated with a load balancer that forwarded the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principal")]
		public string Principal { get; set; }
		
		/// <summary>
		/// The CLDR country/region code associated with the above IP address. If the IP address is private, the `region_code` should reflect the physical location where this peer is running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionCode")]
		public string RegionCode { get; set; }
	}
	
	/// <summary>
	/// This message defines attributes for an HTTP request. If the actual request is not an HTTP request, the runtime system should try to map the actual request to an equivalent HTTP request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Request
	{
		
		/// <summary>
		/// This message defines request authentication attributes. Terminology is based on the JSON Web Token (JWT) standard, but the terms also correlate to concepts in other standards.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auth")]
		public Auth Auth { get; set; }
		
		/// <summary>
		/// The HTTP request headers. If multiple headers share the same key, they must be merged according to the HTTP spec. All header keys must be lowercased, because HTTP header keys are case-insensitive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public System.Collections.Generic.Dictionary<string, string> Headers { get; set; }
		
		/// <summary>
		/// The HTTP request `Host` header value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="host")]
		public string Host { get; set; }
		
		/// <summary>
		/// The unique ID for a request, which can be propagated to downstream systems. The ID should have low probability of collision within a single day for a specific service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The HTTP request method, such as `GET`, `POST`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// The HTTP URL path, excluding the query parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// The network protocol used with the request, such as "http/1.1", "spdy/3", "h2", "h2c", "webrtc", "tcp", "udp", "quic". See https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids for details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public string Protocol { get; set; }
		
		/// <summary>
		/// The HTTP URL query in the format of `name1=value1&name2=value2`, as it appears in the first line of the HTTP request. No decoding is performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
		
		/// <summary>
		/// A special parameter for request reason. It is used by security systems to associate auditing information with a request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The HTTP URL scheme, such as `http` and `https`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheme")]
		public string Scheme { get; set; }
		
		/// <summary>
		/// The HTTP request size in bytes. If unknown, it must be -1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// The timestamp when the `destination` service receives the last byte of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
	}
	
	/// <summary>
	/// This message defines request authentication attributes. Terminology is based on the JSON Web Token (JWT) standard, but the terms also correlate to concepts in other standards.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Auth
	{
		
		/// <summary>
		/// A list of access level resource names that allow resources to be accessed by authenticated requester. It is part of Secure GCP processing for the incoming request. An access level string has the format: "//{api_service_name}/accessPolicies/{policy_id}/accessLevels/{short_name}" Example: "//accesscontextmanager.googleapis.com/accessPolicies/MY_POLICY_ID/accessLevels/MY_LEVEL"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessLevels")]
		public string[] AccessLevels { get; set; }
		
		/// <summary>
		/// The intended audience(s) for this authentication information. Reflects the audience (`aud`) claim within a JWT. The audience value(s) depends on the `issuer`, but typically include one or more of the following pieces of information: * The services intended to receive the credential. For example, ["https://pubsub.googleapis.com/", "https://storage.googleapis.com/"]. * A set of service-based scopes. For example, ["https://www.googleapis.com/auth/cloud-platform"]. * The client id of an app, such as the Firebase project id for JWTs from Firebase Auth. Consult the documentation for the credential issuer to determine the information provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audiences")]
		public string[] Audiences { get; set; }
		
		/// <summary>
		/// Structured claims presented with the credential. JWTs include `{key: value}` pairs for standard and private claims. The following is a subset of the standard required and optional claims that would typically be presented for a Google-based JWT: {'iss': 'accounts.google.com', 'sub': '113289723416554971153', 'aud': ['123456789012', 'pubsub.googleapis.com'], 'azp': '123456789012.apps.googleusercontent.com', 'email': 'jsmith@example.com', 'iat': 1353601026, 'exp': 1353604926} SAML assertions are similarly specified, but with an identity provider dependent structure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="claims")]
		public System.Collections.Generic.Dictionary<string, object> Claims { get; set; }
		
		/// <summary>
		/// The authorized presenter of the credential. Reflects the optional Authorized Presenter (`azp`) claim within a JWT or the OAuth client id. For example, a Google Cloud Platform client id looks as follows: "123456789012.apps.googleusercontent.com".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="presenter")]
		public string Presenter { get; set; }
		
		/// <summary>
		/// The authenticated principal. Reflects the issuer (`iss`) and subject (`sub`) claims within a JWT. The issuer and subject should be `/` delimited, with `/` percent-encoded within the subject fragment. For Google accounts, the principal format is: "https://accounts.google.com/{id}"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principal")]
		public string Principal { get; set; }
	}
	
	/// <summary>
	/// This message defines core attributes for a resource. A resource is an addressable (named) entity provided by the destination service. For example, a file stored on a network storage service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Resource
	{
		
		/// <summary>
		/// Annotations is an unstructured key-value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public System.Collections.Generic.Dictionary<string, string> Annotations { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the resource was created. This may be either the time creation was initiated or when it was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the resource was deleted. If the resource is not deleted, this must be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteTime")]
		public string DeleteTime { get; set; }
		
		/// <summary>
		/// Mutable. The display name set by clients. Must be <= 63 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. An opaque value that uniquely identifies a version or generation of a resource. It can be used to confirm that the client and server agree on the ordering of a resource being written.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The labels or tags on the resource, such as AWS resource tags and Kubernetes resource labels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Immutable. The location of the resource. The location encoding is specific to the service provider, and new encoding may be introduced as the service evolves. For Google Cloud products, the encoding is what is used by Google Cloud APIs, such as `us-east1`, `aws-us-east-1`, and `azure-eastus2`. The semantics of `location` is identical to the `cloud.googleapis.com/location` label used by some Google Cloud APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The stable identifier (name) of a resource on the `service`. A resource can be logically identified as "//{resource.service}/{resource.name}". The differences between a resource name and a URI are: * Resource name is a logical identifier, independent of network protocol and API version. For example, `//pubsub.googleapis.com/projects/123/topics/news-feed`. * URI often includes protocol and version information, so it can be used directly by applications. For example, `https://pubsub.googleapis.com/v1/projects/123/topics/news-feed`. See https://cloud.google.com/apis/design/resource_names for details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The name of the service that this resource belongs to, such as `pubsub.googleapis.com`. The service may be different from the DNS hostname that actually serves the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// The type of the resource. The syntax is platform-specific because different platforms define their resources differently. For Google APIs, the type format must be "{service}/{kind}", such as "pubsub.googleapis.com/Topic".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource. UID is unique in the time and space for this resource within the scope of the service. It is typically generated by the server on successful creation of a resource and must not be changed. UID is used to uniquely identify resources with resource name reuses. This should be a UUID4.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the resource was last updated. Any change to the resource made by users must refresh this value. Changes to a resource made by the service should refresh this value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// This message defines attributes for a typical network response. It generally models semantics of an HTTP response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Response
	{
		
		/// <summary>
		/// The amount of time it takes the backend service to fully respond to a request. Measured from when the destination service starts to send the request to the backend until when the destination service receives the complete response from the backend.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backendLatency")]
		public string BackendLatency { get; set; }
		
		/// <summary>
		/// The HTTP response status code, such as `200` and `404`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The HTTP response headers. If multiple headers share the same key, they must be merged according to HTTP spec. All header keys must be lowercased, because HTTP header keys are case-insensitive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public System.Collections.Generic.Dictionary<string, string> Headers { get; set; }
		
		/// <summary>
		/// The HTTP response size in bytes. If unknown, it must be -1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// The timestamp when the `destination` service sends the last byte of the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
	}
	
	/// <summary>
	/// Common audit log format for Google Cloud Platform API operations. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuditLog
	{
		
		/// <summary>
		/// Authentication information for the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authenticationInfo")]
		public AuthenticationInfo AuthenticationInfo { get; set; }
		
		/// <summary>
		/// Authorization information. If there are multiple resources or permissions involved, then there is one AuthorizationInfo element for each {resource, permission} tuple.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizationInfo")]
		public AuthorizationInfo[] AuthorizationInfo { get; set; }
		
		/// <summary>
		/// Other service-specific data about the request, response, and other information associated with the current audited event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The name of the service method or operation. For API calls, this should be the name of the API method. For example, "google.cloud.bigquery.v2.TableService.InsertTable" "google.logging.v2.ConfigServiceV2.CreateSink"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="methodName")]
		public string MethodName { get; set; }
		
		/// <summary>
		/// The number of items returned from a List or Query API method, if applicable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numResponseItems")]
		public string NumResponseItems { get; set; }
		
		/// <summary>
		/// Information related to policy violations for this request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyViolationInfo")]
		public PolicyViolationInfo PolicyViolationInfo { get; set; }
		
		/// <summary>
		/// The operation request. This may not include all request parameters, such as those that are too large, privacy-sensitive, or duplicated elsewhere in the log record. It should never include user-generated data, such as file contents. When the JSON object represented here has a proto equivalent, the proto name will be indicated in the `@type` property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="request")]
		public System.Collections.Generic.Dictionary<string, object> Request { get; set; }
		
		/// <summary>
		/// Metadata about the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestMetadata")]
		public RequestMetadata RequestMetadata { get; set; }
		
		/// <summary>
		/// Location information about a resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceLocation")]
		public ResourceLocation ResourceLocation { get; set; }
		
		/// <summary>
		/// The resource or collection that is the target of the operation. The name is a scheme-less URI, not including the API service name. For example: "projects/PROJECT_ID/zones/us-central1-a/instances" "projects/PROJECT_ID/datasets/DATASET_ID"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// The resource's original state before mutation. Present only for operations which have successfully modified the targeted resource(s). In general, this field should contain all changed fields, except those that are already been included in `request`, `response`, `metadata` or `service_data` fields. When the JSON object represented here has a proto equivalent, the proto name will be indicated in the `@type` property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOriginalState")]
		public System.Collections.Generic.Dictionary<string, object> ResourceOriginalState { get; set; }
		
		/// <summary>
		/// The operation response. This may not include all response elements, such as those that are too large, privacy-sensitive, or duplicated elsewhere in the log record. It should never include user-generated data, such as file contents. When the JSON object represented here has a proto equivalent, the proto name will be indicated in the `@type` property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
		
		/// <summary>
		/// Deprecated. Use the `metadata` field instead. Other service-specific data about the request, response, and other activities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceData")]
		public System.Collections.Generic.Dictionary<string, object> ServiceData { get; set; }
		
		/// <summary>
		/// The name of the API service performing the operation. For example, `"compute.googleapis.com"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
	}
	
	/// <summary>
	/// Authentication information for the operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuthenticationInfo
	{
		
		/// <summary>
		/// The authority selector specified by the requestor, if any. It is not guaranteed that the principal was allowed to use this authority.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authoritySelector")]
		public string AuthoritySelector { get; set; }
		
		/// <summary>
		/// The email address of the authenticated user (or service account on behalf of third party principal) making the request. For third party identity callers, the `principal_subject` field is populated instead of this field. For privacy reasons, the principal email address is sometimes redacted. For more information, see [Caller identities in audit logs](https://cloud.google.com/logging/docs/audit#user-id).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalEmail")]
		public string PrincipalEmail { get; set; }
		
		/// <summary>
		/// String representation of identity of requesting party. Populated for both first and third party identities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalSubject")]
		public string PrincipalSubject { get; set; }
		
		/// <summary>
		/// Identity delegation history of an authenticated service account that makes the request. It contains information on the real authorities that try to access GCP resources by delegating on a service account. When multiple authorities present, they are guaranteed to be sorted based on the original ordering of the identity delegation events.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccountDelegationInfo")]
		public ServiceAccountDelegationInfo[] ServiceAccountDelegationInfo { get; set; }
		
		/// <summary>
		/// The name of the service account key used to create or exchange credentials for authenticating the service account making the request. This is a scheme-less URI full resource name. For example: "//iam.googleapis.com/projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}/keys/{key}"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccountKeyName")]
		public string ServiceAccountKeyName { get; set; }
		
		/// <summary>
		/// The history of delegation across multiple services as the result of the original user's action. Such as "service A uses its own account to do something for user B". This differs from ServiceAccountDelegationInfo, which only tracks the history of direct token exchanges (impersonation).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceDelegationHistory")]
		public ServiceDelegationHistory ServiceDelegationHistory { get; set; }
		
		/// <summary>
		/// The third party identification (if any) of the authenticated user making the request. When the JSON object represented here has a proto equivalent, the proto name will be indicated in the `@type` property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thirdPartyPrincipal")]
		public System.Collections.Generic.Dictionary<string, object> ThirdPartyPrincipal { get; set; }
	}
	
	/// <summary>
	/// Identity delegation history of an authenticated service account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceAccountDelegationInfo
	{
		
		/// <summary>
		/// First party identity principal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstPartyPrincipal")]
		public FirstPartyPrincipal FirstPartyPrincipal { get; set; }
		
		/// <summary>
		/// A string representing the principal_subject associated with the identity. For most identities, the format will be `principal://iam.googleapis.com/{identity pool name}/subject/{subject)` except for some GKE identities (GKE_WORKLOAD, FREEFORM, GKE_HUB_WORKLOAD) that are still in the legacy format `serviceAccount:{identity pool name}[{subject}]`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalSubject")]
		public string PrincipalSubject { get; set; }
		
		/// <summary>
		/// Third party identity principal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thirdPartyPrincipal")]
		public ThirdPartyPrincipal ThirdPartyPrincipal { get; set; }
	}
	
	/// <summary>
	/// First party identity principal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FirstPartyPrincipal
	{
		
		/// <summary>
		/// The email address of a Google account. .
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalEmail")]
		public string PrincipalEmail { get; set; }
		
		/// <summary>
		/// Metadata about the service that uses the service account. .
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceMetadata")]
		public System.Collections.Generic.Dictionary<string, object> ServiceMetadata { get; set; }
	}
	
	/// <summary>
	/// Third party identity principal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThirdPartyPrincipal
	{
		
		/// <summary>
		/// Metadata about third party identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thirdPartyClaims")]
		public System.Collections.Generic.Dictionary<string, object> ThirdPartyClaims { get; set; }
	}
	
	/// <summary>
	/// The history of delegation across multiple services as the result of the original user's action. Such as "service A uses its own account to do something for user B". This differs from ServiceAccountDelegationInfo, which only tracks the history of direct token exchanges (impersonation).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceDelegationHistory
	{
		
		/// <summary>
		/// The original end user who initiated the request to GCP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalPrincipal")]
		public string OriginalPrincipal { get; set; }
		
		/// <summary>
		/// Data identifying the service specific jobs or units of work that were involved in a chain of service calls.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceMetadata")]
		public ServiceMetadata[] ServiceMetadata { get; set; }
	}
	
	/// <summary>
	/// Metadata describing the service and additional service specific information used to identify the job or unit of work at hand.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceMetadata
	{
		
		/// <summary>
		/// Additional metadata provided by service teams to describe service specific job information that was triggered by the original principal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobMetadata")]
		public System.Collections.Generic.Dictionary<string, object> JobMetadata { get; set; }
		
		/// <summary>
		/// A string representing the principal_subject associated with the identity. For most identities, the format will be `principal://iam.googleapis.com/{identity pool name}/subject/{subject)` except for some GKE identities (GKE_WORKLOAD, FREEFORM, GKE_HUB_WORKLOAD) that are still in the legacy format `serviceAccount:{identity pool name}[{subject}]` If the identity is a Google account (e.g. workspace user account or service account), this will be the email of the prefixed by `serviceAccount:`. For example: `serviceAccount:my-service-account@project-1.iam.gserviceaccount.com`. If the identity is an individual user, the identity will be formatted as: `user:user_ABC@email.com`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalSubject")]
		public string PrincipalSubject { get; set; }
		
		/// <summary>
		/// The service's fully qualified domain name, e.g. "dataproc.googleapis.com".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceDomain")]
		public string ServiceDomain { get; set; }
	}
	
	/// <summary>
	/// Authorization information for the operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuthorizationInfo
	{
		
		/// <summary>
		/// Whether or not authorization for `resource` and `permission` was granted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="granted")]
		public System.Nullable<System.Boolean> Granted { get; set; }
		
		/// <summary>
		/// The required IAM permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permission")]
		public string Permission { get; set; }
		
		/// <summary>
		/// The resource being accessed, as a REST-style or cloud resource string. For example: bigquery.googleapis.com/projects/PROJECTID/datasets/DATASETID or projects/PROJECTID/datasets/DATASETID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// This message defines core attributes for a resource. A resource is an addressable (named) entity provided by the destination service. For example, a file stored on a network storage service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceAttributes")]
		public Resource ResourceAttributes { get; set; }
	}
	
	/// <summary>
	/// Information related to policy violations for this request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PolicyViolationInfo
	{
		
		/// <summary>
		/// Represents OrgPolicy Violation information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orgPolicyViolationInfo")]
		public OrgPolicyViolationInfo OrgPolicyViolationInfo { get; set; }
	}
	
	/// <summary>
	/// Represents OrgPolicy Violation information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrgPolicyViolationInfo
	{
		
		/// <summary>
		/// Optional. Resource payload that is currently in scope and is subjected to orgpolicy conditions. This payload may be the subset of the actual Resource that may come in the request. This payload should not contain any core content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public System.Collections.Generic.Dictionary<string, object> Payload { get; set; }
		
		/// <summary>
		/// Optional. Tags referenced on the resource at the time of evaluation. These also include the federated tags, if they are supplied in the CheckOrgPolicy or CheckCustomConstraints Requests. Optional field as of now. These tags are the Cloud tags that are available on the resource during the policy evaluation and will be available as part of the OrgPolicy check response for logging purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceTags")]
		public System.Collections.Generic.Dictionary<string, string> ResourceTags { get; set; }
		
		/// <summary>
		/// Optional. Resource type that the orgpolicy is checked against. Example: compute.googleapis.com/Instance, store.googleapis.com/bucket
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// Optional. Policy violations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="violationInfo")]
		public ViolationInfo[] ViolationInfo { get; set; }
	}
	
	/// <summary>
	/// Provides information about the Policy violation info for this request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ViolationInfo
	{
		
		/// <summary>
		/// Optional. Value that is being checked for the policy. This could be in encrypted form (if pii sensitive). This field will only be emitted in LIST_POLICY types
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkedValue")]
		public string CheckedValue { get; set; }
		
		/// <summary>
		/// Optional. Constraint name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="constraint")]
		public string Constraint { get; set; }
		
		/// <summary>
		/// Optional. Error message that policy is indicating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// Optional. Indicates the type of the policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyType")]
		public System.Nullable<ViolationInfoPolicyType> PolicyType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ViolationInfoPolicyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POLICY_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOLEAN_CONSTRAINT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIST_CONSTRAINT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_CONSTRAINT = 3,
	}
	
	/// <summary>
	/// Metadata about the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RequestMetadata
	{
		
		/// <summary>
		/// The IP address of the caller. For a caller from the internet, this will be the public IPv4 or IPv6 address. For calls made from inside Google's internal production network from one GCP service to another, `caller_ip` will be redacted to "private". For a caller from a Compute Engine VM with a external IP address, `caller_ip` will be the VM's external IP address. For a caller from a Compute Engine VM without a external IP address, if the VM is in the same organization (or project) as the accessed resource, `caller_ip` will be the VM's internal IPv4 address, otherwise `caller_ip` will be redacted to "gce-internal-ip". See https://cloud.google.com/compute/docs/vpc/ for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callerIp")]
		public string CallerIp { get; set; }
		
		/// <summary>
		/// The network of the caller. Set only if the network host project is part of the same GCP organization (or project) as the accessed resource. See https://cloud.google.com/compute/docs/vpc/ for more information. This is a scheme-less URI full resource name. For example: "//compute.googleapis.com/projects/PROJECT_ID/global/networks/NETWORK_ID"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callerNetwork")]
		public string CallerNetwork { get; set; }
		
		/// <summary>
		/// The user agent of the caller. This information is not authenticated and should be treated accordingly. For example: + `google-api-python-client/1.4.0`: The request was made by the Google API client for Python. + `Cloud SDK Command Line Tool apitools-client/1.0 gcloud/0.9.62`: The request was made by the Google Cloud SDK CLI (gcloud). + `AppEngine-Google; (+http://code.google.com/appengine; appid: s~my-project`: The request was made from the `my-project` App Engine app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callerSuppliedUserAgent")]
		public string CallerSuppliedUserAgent { get; set; }
		
		/// <summary>
		/// This message defines attributes for a node that handles a network request. The node can be either a service or an application that sends, forwards, or receives the request. Service peers should fill in `principal` and `labels` as appropriate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationAttributes")]
		public Peer DestinationAttributes { get; set; }
		
		/// <summary>
		/// This message defines attributes for an HTTP request. If the actual request is not an HTTP request, the runtime system should try to map the actual request to an equivalent HTTP request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestAttributes")]
		public Request RequestAttributes { get; set; }
	}
	
	/// <summary>
	/// Location information about a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceLocation
	{
		
		/// <summary>
		/// The locations of a resource after the execution of the operation. Requests to create or delete a location based resource must populate the 'current_locations' field and not the 'original_locations' field. For example: "europe-west1-a" "us-east1" "nam3"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentLocations")]
		public string[] CurrentLocations { get; set; }
		
		/// <summary>
		/// The locations of a resource prior to the execution of the operation. Requests that mutate the resource's location must populate both the 'original_locations' as well as the 'current_locations' fields. For example: "europe-west1-a" "us-east1" "nam3"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalLocations")]
		public string[] OriginalLocations { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Request message for the Check method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CheckRequest
	{
		
		/// <summary>
		/// This message defines the standard attribute vocabulary for Google APIs. An attribute is a piece of metadata that describes an activity on a network service. For example, the size of an HTTP request, or the status code of an HTTP response. Each attribute has a type and a name, which is logically defined as a proto message field in `AttributeContext`. The field type becomes the attribute type, and the field path becomes the attribute name. For example, the attribute `source.ip` maps to field `AttributeContext.source.ip`. This message definition is guaranteed not to have any wire breaking change. So you can use it directly for passing attributes across different systems. NOTE: Different system may generate different subset of attributes. Please verify the system specification before relying on an attribute generated a system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public AttributeContext Attributes { get; set; }
		
		/// <summary>
		/// Optional. Contains a comma-separated list of flags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flags")]
		public string Flags { get; set; }
		
		/// <summary>
		/// Describes the resources and the policies applied to each resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public ResourceInfo[] Resources { get; set; }
		
		/// <summary>
		/// Specifies the version of the service configuration that should be used to process the request. Must not be empty. Set this field to 'latest' to specify using the latest configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceConfigId")]
		public string ServiceConfigId { get; set; }
	}
	
	/// <summary>
	/// Describes a resource referenced in the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceInfo
	{
		
		/// <summary>
		/// Optional. The identifier of the container of this resource. For Google Cloud APIs, the resource container must be one of the following formats: - `projects/` - `folders/` - `organizations/` Required for the policy enforcement on the container level (e.g. VPCSC, Location Policy check, Org Policy check).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="container")]
		public string Container { get; set; }
		
		/// <summary>
		/// Optional. The location of the resource, it must be a valid zone, region or multiregion, for example: "europe-west4", "northamerica-northeast1-a". Required for location policy check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The name of the resource referenced in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The resource permission needed for this request. The format must be "{service}/{plural}.{verb}".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permission")]
		public string Permission { get; set; }
		
		/// <summary>
		/// The resource type in the format of "{service}/{kind}".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Response message for the Check method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CheckResponse
	{
		
		/// <summary>
		/// Returns a set of request contexts generated from the `CheckRequest`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public System.Collections.Generic.Dictionary<string, string> Headers { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
	}
	
	/// <summary>
	/// Request message for the Report method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportRequest
	{
		
		/// <summary>
		/// Describes the list of operations to be reported. Each operation is represented as an AttributeContext, and contains all attributes around an API access.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public AttributeContext[] Operations { get; set; }
		
		/// <summary>
		/// Specifies the version of the service configuration that should be used to process the request. Must not be empty. Set this field to 'latest' to specify using the latest configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceConfigId")]
		public string ServiceConfigId { get; set; }
	}
	
	/// <summary>
	/// Response message for the Report method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportResponse
	{
	}
	
	/// <summary>
	/// The context of a span. This is attached to an Exemplar in Distribution values during aggregation. It contains the name of a span with format: projects/[PROJECT_ID_OR_NUMBER]/traces/[TRACE_ID]/spans/[SPAN_ID]
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SpanContext
	{
		
		/// <summary>
		/// The resource name of the span. The format is: projects/[PROJECT_ID_OR_NUMBER]/traces/[TRACE_ID]/spans/[SPAN_ID] `[TRACE_ID]` is a unique identifier for a trace within a project; it is a 32-character hexadecimal encoding of a 16-byte array. `[SPAN_ID]` is a unique identifier for a span within a trace; it is a 16-character hexadecimal encoding of an 8-byte array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spanName")]
		public string SpanName { get; set; }
	}
	
	/// <summary>
	/// A common proto for logging HTTP requests. Only contains semantics defined by the HTTP specification. Product-specific logging information MUST be defined in a separate message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class V2HttpRequest
	{
		
		/// <summary>
		/// The number of HTTP response bytes inserted into cache. Set only when a cache fill was attempted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cacheFillBytes")]
		public string CacheFillBytes { get; set; }
		
		/// <summary>
		/// Whether or not an entity was served from cache (with or without validation).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cacheHit")]
		public System.Nullable<System.Boolean> CacheHit { get; set; }
		
		/// <summary>
		/// Whether or not a cache lookup was attempted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cacheLookup")]
		public System.Nullable<System.Boolean> CacheLookup { get; set; }
		
		/// <summary>
		/// Whether or not the response was validated with the origin server before being served from cache. This field is only meaningful if `cache_hit` is True.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cacheValidatedWithOriginServer")]
		public System.Nullable<System.Boolean> CacheValidatedWithOriginServer { get; set; }
		
		/// <summary>
		/// The request processing latency on the server, from the time the request was received until the response was sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latency")]
		public string Latency { get; set; }
		
		/// <summary>
		/// Protocol used for the request. Examples: "HTTP/1.1", "HTTP/2", "websocket"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public string Protocol { get; set; }
		
		/// <summary>
		/// The referer URL of the request, as defined in [HTTP/1.1 Header Field Definitions](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referer")]
		public string Referer { get; set; }
		
		/// <summary>
		/// The IP address (IPv4 or IPv6) of the client that issued the HTTP request. Examples: `"192.168.1.1"`, `"FE80::0202:B3FF:FE1E:8329"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteIp")]
		public string RemoteIp { get; set; }
		
		/// <summary>
		/// The request method. Examples: `"GET"`, `"HEAD"`, `"PUT"`, `"POST"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestMethod")]
		public string RequestMethod { get; set; }
		
		/// <summary>
		/// The size of the HTTP request message in bytes, including the request headers and the request body.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestSize")]
		public string RequestSize { get; set; }
		
		/// <summary>
		/// The scheme (http, https), the host name, the path, and the query portion of the URL that was requested. Example: `"http://example.com/some/info?color=red"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestUrl")]
		public string RequestUrl { get; set; }
		
		/// <summary>
		/// The size of the HTTP response message sent back to the client, in bytes, including the response headers and the response body.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseSize")]
		public string ResponseSize { get; set; }
		
		/// <summary>
		/// The IP address (IPv4 or IPv6) of the origin server that the request was sent to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverIp")]
		public string ServerIp { get; set; }
		
		/// <summary>
		/// The response code indicating the status of the response. Examples: 200, 404.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		/// <summary>
		/// The user agent sent by the client. Example: `"Mozilla/4.0 (compatible; MSIE 6.0; Windows 98; Q312461; .NET CLR 1.0.3705)"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAgent")]
		public string UserAgent { get; set; }
	}
	
	/// <summary>
	/// An individual log entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class V2LogEntry
	{
		
		/// <summary>
		/// A common proto for logging HTTP requests. Only contains semantics defined by the HTTP specification. Product-specific logging information MUST be defined in a separate message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpRequest")]
		public V2HttpRequest HttpRequest { get; set; }
		
		/// <summary>
		/// A unique ID for the log entry used for deduplication. If omitted, the implementation will generate one based on operation_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertId")]
		public string InsertId { get; set; }
		
		/// <summary>
		/// A set of user-defined (key, value) data that provides additional information about the log entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// A set of user-defined (key, value) data that provides additional information about the moniotored resource that the log entry belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitoredResourceLabels")]
		public System.Collections.Generic.Dictionary<string, string> MonitoredResourceLabels { get; set; }
		
		/// <summary>
		/// Required. The log to which this log entry belongs. Examples: `"syslog"`, `"book_log"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Additional information about a potentially long-running operation with which a log entry is associated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public V2LogEntryOperation Operation { get; set; }
		
		/// <summary>
		/// The log entry payload, represented as a protocol buffer that is expressed as a JSON object. The only accepted type currently is AuditLog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protoPayload")]
		public System.Collections.Generic.Dictionary<string, object> ProtoPayload { get; set; }
		
		/// <summary>
		/// The severity of the log entry. The default value is `LogSeverity.DEFAULT`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<V2LogEntrySeverity> Severity { get; set; }
		
		/// <summary>
		/// Additional information about the source code location that produced the log entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceLocation")]
		public V2LogEntrySourceLocation SourceLocation { get; set; }
		
		/// <summary>
		/// The log entry payload, represented as a structure that is expressed as a JSON object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="structPayload")]
		public System.Collections.Generic.Dictionary<string, object> StructPayload { get; set; }
		
		/// <summary>
		/// The log entry payload, represented as a Unicode string (UTF-8).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textPayload")]
		public string TextPayload { get; set; }
		
		/// <summary>
		/// The time the event described by the log entry occurred. If omitted, defaults to operation start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// Optional. Resource name of the trace associated with the log entry, if any. If this field contains a relative resource name, you can assume the name is relative to `//tracing.googleapis.com`. Example: `projects/my-projectid/traces/06796866738c859f2f19b7cfb3214824`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trace")]
		public string Trace { get; set; }
	}
	
	/// <summary>
	/// Additional information about a potentially long-running operation with which a log entry is associated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class V2LogEntryOperation
	{
		
		/// <summary>
		/// Optional. Set this to True if this is the first log entry in the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first")]
		public System.Nullable<System.Boolean> First { get; set; }
		
		/// <summary>
		/// Optional. An arbitrary operation identifier. Log entries with the same identifier are assumed to be part of the same operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Optional. Set this to True if this is the last log entry in the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last")]
		public System.Nullable<System.Boolean> Last { get; set; }
		
		/// <summary>
		/// Optional. An arbitrary producer identifier. The combination of `id` and `producer` must be globally unique. Examples for `producer`: `"MyDivision.MyBigCompany.com"`, `"github.com/MyProject/MyApplication"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="producer")]
		public string Producer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum V2LogEntrySeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBUG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOTICE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRITICAL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALERT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMERGENCY = 8,
	}
	
	/// <summary>
	/// Additional information about the source code location that produced the log entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class V2LogEntrySourceLocation
	{
		
		/// <summary>
		/// Optional. Source file name. Depending on the runtime environment, this might be a simple name or a fully-qualified name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file")]
		public string File { get; set; }
		
		/// <summary>
		/// Optional. Human-readable name of the function or method being invoked, with optional context such as the class or package name. This information may be used in contexts such as the logs viewer, where a file and line number are less meaningful. The format can vary by language. For example: `qual.if.ied.Class.method` (Java), `dir/package.func` (Go), `function` (Python).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="function")]
		public string Function { get; set; }
		
		/// <summary>
		/// Optional. Line within the source file. 1-based; 0 indicates no line number available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line")]
		public string Line { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Private Preview. This feature is only available for approved services. This method provides admission control for services that are integrated with [Service Infrastructure](https://cloud.google.com/service-infrastructure). It checks whether an operation should be allowed based on the service configuration and relevant policies. It must be called before the operation is executed. For more information, see [Admission Control](https://cloud.google.com/service-infrastructure/docs/admission-control). NOTE: The admission control has an expected policy propagation delay of 60s. The caller **must** not depend on the most recent policy changes. NOTE: The admission control has a hard limit of 1 referenced resources per call. If an operation refers to more than 1 resources, the caller must call the Check method multiple times. This method requires the `servicemanagement.services.check` permission on the specified service. For more information, see [Service Control API Access Control](https://cloud.google.com/service-infrastructure/docs/service-control/access-control).
		/// Servicecontrol_services_check v2/services/{serviceName}:check
		/// </summary>
		/// <param name="serviceName">The service name as specified in its service configuration. For example, `"pubsub.googleapis.com"`. See [google.api.Service](https://cloud.google.com/service-management/reference/rpc/google.api#google.api.Service) for the definition of a service name.</param>
		/// <returns>Successful response</returns>
		public async Task<CheckResponse> Servicecontrol_services_checkAsync(string serviceName, CheckRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/services/"+ (serviceName==null? "" : System.Uri.EscapeDataString(serviceName))+":check";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CheckResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Private Preview. This feature is only available for approved services. This method provides telemetry reporting for services that are integrated with [Service Infrastructure](https://cloud.google.com/service-infrastructure). It reports a list of operations that have occurred on a service. It must be called after the operations have been executed. For more information, see [Telemetry Reporting](https://cloud.google.com/service-infrastructure/docs/telemetry-reporting). NOTE: The telemetry reporting has a hard limit of 1000 operations and 1MB per Report call. It is recommended to have no more than 100 operations per call. This method requires the `servicemanagement.services.report` permission on the specified service. For more information, see [Service Control API Access Control](https://cloud.google.com/service-infrastructure/docs/service-control/access-control).
		/// Servicecontrol_services_report v2/services/{serviceName}:report
		/// </summary>
		/// <param name="serviceName">The service name as specified in its service configuration. For example, `"pubsub.googleapis.com"`. See [google.api.Service](https://cloud.google.com/service-management/reference/rpc/google.api#google.api.Service) for the definition of a service name.</param>
		/// <returns>Successful response</returns>
		public async Task<ReportResponse> Servicecontrol_services_reportAsync(string serviceName, ReportRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/services/"+ (serviceName==null? "" : System.Uri.EscapeDataString(serviceName))+":report";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ReportResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
