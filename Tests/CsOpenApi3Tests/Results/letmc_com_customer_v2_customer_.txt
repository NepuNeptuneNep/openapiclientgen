//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Defines a single branch of a client.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BranchModel
	{
		
		/// <summary>
		/// Branch address line 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address1 { get; set; }
		
		/// <summary>
		/// Branch address line 2.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address2 { get; set; }
		
		/// <summary>
		/// Branch address line 3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address3 { get; set; }
		
		/// <summary>
		/// Branch address line 4.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address4 { get; set; }
		
		/// <summary>
		/// The relevant company name, if not the one specified on the branch then the one on company.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CompanyName { get; set; }
		
		/// <summary>
		/// County
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string County { get; set; }
		
		/// <summary>
		/// Branch email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EMailAddress { get; set; }
		
		/// <summary>
		/// A unique identifier defining the object and change revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ETag { get; set; }
		
		/// <summary>
		/// Branch fax phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FaxPhone { get; set; }
		
		/// <summary>
		/// Branch land phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LandPhone { get; set; }
		
		/// <summary>
		/// The branch name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The unique Object ID (OID).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OID { get; set; }
		
		/// <summary>
		/// Branch address postcode.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Postcode { get; set; }
		
		/// <summary>
		/// Branch web address.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string WebAddress { get; set; }
	}
	
	/// <summary>
	/// Holds results from a paged query returning BranchModel values
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BranchModelResults
	{
		
		/// <summary>
		/// The total number of results available for all pages
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// The resulting data returned from the paged query range
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BranchModel[] Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KeyValuePair_String_String_
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Landlord Accounting - Finance Entry
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LandlordAccountingEntryModel
	{
		
		/// <summary>
		/// Amount
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Payment Date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// Description.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Transaction Number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TransactionNumber { get; set; }
	}
	
	/// <summary>
	/// Invoices
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LandlordAccountingInvoiceModel
	{
		
		/// <summary>
		/// Payment Date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// Transaction Number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InvoiceID { get; set; }
		
		/// <summary>
		/// Does this invoice contain contractor payments?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsMaintenanceInvoice { get; set; }
	}
	
	/// <summary>
	/// Landlord Accounting
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LandlordAccountingModel
	{
		
		/// <summary>
		/// Account Balance
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AccountBalance { get; set; }
		
		/// <summary>
		/// Last Payment Made
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastPayment { get; set; }
		
		/// <summary>
		/// Payment History
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LandlordAccountingEntryModel[] PaymentHistory { get; set; }
		
		/// <summary>
		/// Statements
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LandlordAccountingInvoiceModel[] Statements { get; set; }
	}
	
	/// <summary>
	/// Landlord Arrears Chase Note.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LandlordChaseNoteModel
	{
		
		/// <summary>
		/// Created Date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// Note.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Note { get; set; }
		
		/// <summary>
		/// Note Type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NoteType { get; set; }
		
		/// <summary>
		/// Tenant
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TenantID { get; set; }
	}
	
	/// <summary>
	/// Class for Landlord CRM Entries
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LandlordCrmEntry
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BranchID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GlobalReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OID { get; set; }
	}
	
	/// <summary>
	/// Landlord Details
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LandlordDetailsModel
	{
		
		/// <summary>
		/// Address
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address { get; set; }
		
		/// <summary>
		/// Email
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		/// <summary>
		/// User Friendly ID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string GlobalReference { get; set; }
		
		/// <summary>
		/// ID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Mobile
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Mobile { get; set; }
		
		/// <summary>
		/// Name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Phone
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Phone { get; set; }
	}
	
	/// <summary>
	/// Lettings Inspection
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LandlordLettingsInspectionModel
	{
		
		/// <summary>
		/// InspectionDate
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> InspectionDate { get; set; }
		
		/// <summary>
		/// Notes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
	}
	
	/// <summary>
	/// Maintenance Certificate
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LandlordMaintenanceCertificateModel
	{
		
		/// <summary>
		/// Due
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Due { get; set; }
		
		/// <summary>
		/// Files
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LettingsLandlordDocument[] Files { get; set; }
		
		/// <summary>
		/// Status.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		/// <summary>
		/// Type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Document details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LettingsLandlordDocument
	{
		
		/// <summary>
		/// File Name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FileName { get; set; }
		
		/// <summary>
		/// File Size Bytes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FileSize { get; set; }
		
		/// <summary>
		/// ID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// MIME Type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MIMEType { get; set; }
		
		/// <summary>
		/// Document Note
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Note { get; set; }
	}
	
	/// <summary>
	/// Maintenance Job
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LandlordMaintenanceJobModel
	{
		
		/// <summary>
		/// AssignedTo
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AssignedTo { get; set; }
		
		/// <summary>
		/// Job Closed Date:-
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ClosedDate { get; set; }
		
		/// <summary>
		/// Description
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LandlordMaintenanceJobNoteModel[] MaintenanceNotes { get; set; }
		
		/// <summary>
		/// Property
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Property { get; set; }
		
		/// <summary>
		/// Reported
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Reported { get; set; }
		
		/// <summary>
		/// Status
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Maintenance Job Note Helper Model:-
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LandlordMaintenanceJobNoteModel
	{
		
		/// <summary>
		/// Created At:-
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Note Contents:-
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NoteContents { get; set; }
		
		/// <summary>
		/// Job ID:-
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OID { get; set; }
	}
	
	/// <summary>
	/// Landlord Maintenance
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LandlordMaintenanceModel
	{
		
		/// <summary>
		/// Maintenance Jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LandlordMaintenanceJobModel[] Jobs { get; set; }
	}
	
	/// <summary>
	/// Maintenance Preference
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LandlordMaintenancePreferenceModel
	{
		
		/// <summary>
		/// Name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Notes.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
		
		/// <summary>
		/// Type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Stores a photo related to a property structure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LandlordPhotoModel
	{
		
		/// <summary>
		/// A unique identifier defining the object and change revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ETag { get; set; }
		
		/// <summary>
		/// The file name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FileName { get; set; }
		
		/// <summary>
		/// The unique Object ID (OID).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OID { get; set; }
		
		/// <summary>
		/// The photo type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<LandlordPhotoModelPhotoType> PhotoType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LandlordPhotoModelPhotoType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Photo = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Map = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FloorPlan = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SiteMap = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AerialPhoto = 4,
	}
	
	/// <summary>
	/// Holds results from a paged query returning LandlordPhotoModel values
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LandlordPhotoModelResults
	{
		
		/// <summary>
		/// The total number of results available for all pages
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// The resulting data returned from the paged query range
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LandlordPhotoModel[] Data { get; set; }
	}
	
	/// <summary>
	/// Class to represent proffit loss report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LandlordProfitLossModel
	{
		
		/// <summary>
		/// Class for a group of entries.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LandlordProfitLossSectionModel DirectCosts { get; set; }
		
		/// <summary>
		/// Class for a group of entries.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LandlordProfitLossSectionModel GrossProfitLoss { get; set; }
		
		/// <summary>
		/// Class for a group of entries.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LandlordProfitLossSectionModel Income { get; set; }
	}
	
	/// <summary>
	/// Class for a group of entries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LandlordProfitLossSectionModel
	{
		
		/// <summary>
		/// Rows.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LandlordProfitLossRowModel[] Rows { get; set; }
	}
	
	/// <summary>
	/// Class for a group of entries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LandlordProfitLossRowModel
	{
		
		/// <summary>
		/// Month Totals
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public KeyValuePair_String_String_[] MonthTotals { get; set; }
		
		/// <summary>
		/// Nominal Code
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NominalCode { get; set; }
		
		/// <summary>
		/// Title of the values.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		/// <summary>
		/// Total for all months.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Total { get; set; }
	}
	
	/// <summary>
	/// Landlord Rent Arrears.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LandlordRentArrearsModel
	{
		
		/// <summary>
		/// Chase Notes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LandlordChaseNoteModel[] ChaseNotes { get; set; }
		
		/// <summary>
		/// Rent Collected
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> RentCollected { get; set; }
		
		/// <summary>
		/// Outstanding Rent
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LandlordRentOustandingItem[] RentOutstanding { get; set; }
		
		/// <summary>
		/// Rent Arrears
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TotalRentArrears { get; set; }
	}
	
	/// <summary>
	/// Outstanding Rent
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LandlordRentOustandingItem
	{
		
		/// <summary>
		/// Days since the tenant went into arrears
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DebtDays { get; set; }
		
		/// <summary>
		/// Outstanding Rent
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> OutstandingRent { get; set; }
		
		/// <summary>
		/// Property
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Property { get; set; }
		
		/// <summary>
		/// Tenant
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tenant { get; set; }
		
		/// <summary>
		/// TenantID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TenantID { get; set; }
	}
	
	/// <summary>
	/// Landlord Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LandlordSettingsModel
	{
		
		/// <summary>
		/// Linked Accounts
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LandlordDetailsModel[] LinkedAccounts { get; set; }
	}
	
	/// <summary>
	/// Landlord Summary - Landing Page.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LandlordSummaryModel
	{
		
		/// <summary>
		/// Account Balance
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AccountBalance { get; set; }
		
		/// <summary>
		/// Last Payment Made
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastPayment { get; set; }
		
		/// <summary>
		/// Tenancies
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LandlordSummaryTenancyModel[] Tenancies { get; set; }
		
		/// <summary>
		/// Rent Arrears
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TotalRentArrears { get; set; }
	}
	
	/// <summary>
	/// Landlord Summary - Landing Page.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LandlordSummaryTenancyModel
	{
		
		/// <summary>
		/// Bomd
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Bond { get; set; }
		
		/// <summary>
		/// The Tenancy Branch ID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BranchID { get; set; }
		
		/// <summary>
		/// Description.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// User Friendly ID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string GlobalReference { get; set; }
		
		/// <summary>
		/// ID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Maintenance Jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaintenanceJobs { get; set; }
		
		/// <summary>
		/// State of the tenancy
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ManagedRent { get; set; }
		
		/// <summary>
		/// Display Property Address
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PropertyAddress { get; set; }
		
		/// <summary>
		/// Rent
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Rent { get; set; }
		
		/// <summary>
		/// Rent Arrears
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> RentArrears { get; set; }
		
		/// <summary>
		/// Rent Arrears
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> RentCollected { get; set; }
		
		/// <summary>
		/// Tenancy Property
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TenancyProperty { get; set; }
		
		/// <summary>
		/// State of the tenancy
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TenancyState { get; set; }
	}
	
	/// <summary>
	/// Landlord Tenancy Model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LandlordTenancyModel
	{
		
		/// <summary>
		/// Actual End Date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ActualEndDate { get; set; }
		
		/// <summary>
		/// Beds
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Beds { get; set; }
		
		/// <summary>
		/// Bond
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Bond { get; set; }
		
		/// <summary>
		/// The tenancy branch ID:-
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BranchID { get; set; }
		
		/// <summary>
		/// Maintenance Certificates.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LandlordMaintenanceCertificateModel[] Certificates { get; set; }
		
		/// <summary>
		/// Tenancy documents:-
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LettingsLandlordDocument[] Documents { get; set; }
		
		/// <summary>
		/// Fixed Date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FixedDate { get; set; }
		
		/// <summary>
		/// User Friendly ID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string GlobalReference { get; set; }
		
		/// <summary>
		/// ID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Inspections
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LandlordLettingsInspectionModel[] Inspections { get; set; }
		
		/// <summary>
		/// State of the tenancy
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ManagedRent { get; set; }
		
		/// <summary>
		/// Maintenance Preferences.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LandlordMaintenancePreferenceModel[] Preferences { get; set; }
		
		/// <summary>
		/// Previous Rent Amount
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PreviousRentAmount { get; set; }
		
		/// <summary>
		/// Display Property Address
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PropertyAddress { get; set; }
		
		/// <summary>
		/// Rent
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Rent { get; set; }
		
		/// <summary>
		/// Rent Amount
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> RentAmount { get; set; }
		
		/// <summary>
		/// Start Date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		/// <summary>
		/// Tenancy Property
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TenancyProperty { get; set; }
		
		/// <summary>
		/// State of the tenancy
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TenancyState { get; set; }
		
		/// <summary>
		/// Tenants
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Tenants { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Object
	{
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// All branches defined for a company
		/// BranchController_GetBranches v2/customer/{shortName}/branch/branches
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="offset">The index of the first item to return</param>
		/// <param name="count">The maximum number of items to return (up to 1000 per request)</param>
		/// <returns>OK</returns>
		public async Task<BranchModelResults> BranchController_GetBranchesAsync(string shortName, int offset, int count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customer/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/branch/branches&offset="+offset+"&count="+count;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BranchModelResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a specific branch given its unique Object ID (OID)
		/// BranchControllerGetByShortNameAndBranchID v2/customer/{shortName}/branch/branches/{branchID}
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="branchID">The unique ID of the Branch</param>
		/// <returns>OK</returns>
		public async Task<BranchModel> BranchControllerGetByShortNameAndBranchIDAsync(string shortName, string branchID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customer/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/branch/branches/"+ (branchID==null? "" : System.Uri.EscapeDataString(branchID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BranchModel>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the accounting details for the landlord.
		/// LandlordController_GetAccounts v2/customer/{shortName}/landlord/accounting
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="token">The login token returned from the /session POST call</param>
		/// <returns>OK</returns>
		public async Task<LandlordAccountingModel> LandlordController_GetAccountsAsync(string shortName, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customer/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/landlord/accounting&token=" + (token==null? "" : System.Uri.EscapeDataString(token));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LandlordAccountingModel>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Download a Document
		/// LandlordController_GetDocument v2/customer/{shortName}/landlord/document
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="token">The login token returned from the /session POST call</param>
		/// <param name="ID">The Document ID</param>
		/// <returns>OK</returns>
		public async Task<Object> LandlordController_GetDocumentAsync(string shortName, string token, string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customer/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/landlord/document&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&ID=" + (ID==null? "" : System.Uri.EscapeDataString(ID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Object>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Generate a Inventory PDF for a tenancy
		/// LandlordController_GetInvetoryReport v2/customer/{shortName}/landlord/inventory
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="token">The login token returned from the /session POST call</param>
		/// <param name="tenancyID">The Tenancy ID</param>
		/// <returns>OK</returns>
		public async Task<Object> LandlordController_GetInvetoryReportAsync(string shortName, string token, string tenancyID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customer/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/landlord/inventory&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&tenancyID=" + (tenancyID==null? "" : System.Uri.EscapeDataString(tenancyID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Object>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get an invoice pdf belonging to the landlord.
		/// LandlordController_GetInvoice v2/customer/{shortName}/landlord/invoice
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="token">The login token returned from the /session POST call</param>
		/// <param name="invoiceID">The invoice ID to load.</param>
		/// <returns>OK</returns>
		public async Task<Object> LandlordController_GetInvoiceAsync(string shortName, string token, string invoiceID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customer/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/landlord/invoice&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&invoiceID=" + (invoiceID==null? "" : System.Uri.EscapeDataString(invoiceID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Object>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve landlord's CRM ID
		/// LandlordController_GetLandlordCrmEntries v2/customer/{shortName}/landlord/landlordcrmentries
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="token">The login token returned from the /session POST call</param>
		/// <returns>OK</returns>
		public async Task<LandlordCrmEntry[]> LandlordController_GetLandlordCrmEntriesAsync(string shortName, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customer/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/landlord/landlordcrmentries&token=" + (token==null? "" : System.Uri.EscapeDataString(token));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LandlordCrmEntry[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Active maintenance jobs.
		/// LandlordController_GetMaintenanceJobs v2/customer/{shortName}/landlord/maintenance
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="token">The login token returned from the /session POST call</param>
		/// <returns>OK</returns>
		public async Task<LandlordMaintenanceModel> LandlordController_GetMaintenanceJobsAsync(string shortName, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customer/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/landlord/maintenance&token=" + (token==null? "" : System.Uri.EscapeDataString(token));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LandlordMaintenanceModel>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Generate a Profit and Loss Report
		/// LandlordController_GetProfitLossReport v2/customer/{shortName}/landlord/profitloss
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="token">The login token returned from the /session POST call</param>
		/// <returns>OK</returns>
		public async Task<LandlordProfitLossModel> LandlordController_GetProfitLossReportAsync(string shortName, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customer/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/landlord/profitloss&token=" + (token==null? "" : System.Uri.EscapeDataString(token));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LandlordProfitLossModel>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Rent Arrears
		/// LandlordController_GetRentArrears v2/customer/{shortName}/landlord/rentarrears
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="token">The login token returned from the /session POST call</param>
		/// <returns>OK</returns>
		public async Task<LandlordRentArrearsModel> LandlordController_GetRentArrearsAsync(string shortName, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customer/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/landlord/rentarrears&token=" + (token==null? "" : System.Uri.EscapeDataString(token));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LandlordRentArrearsModel>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Generate a Self Assessment Tax Report
		/// LandlordController_GetSASReport v2/customer/{shortName}/landlord/sas
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="token">The login token returned from the /session POST call</param>
		/// <param name="yearEnd">The Tax Year End.</param>
		/// <returns>OK</returns>
		public async Task<Object> LandlordController_GetSASReportAsync(string shortName, string token, int yearEnd, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customer/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/landlord/sas&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&yearEnd="+yearEnd;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Object>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get contact details of all linked landlords.
		/// LandlordController_GetSettings v2/customer/{shortName}/landlord/settings
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="token">The login token returned from the /session POST call</param>
		/// <returns>OK</returns>
		public async Task<LandlordSettingsModel> LandlordController_GetSettingsAsync(string shortName, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customer/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/landlord/settings&token=" + (token==null? "" : System.Uri.EscapeDataString(token));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LandlordSettingsModel>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the summary details for the landlord.
		/// LandlordController_GetSummaryDetails v2/customer/{shortName}/landlord/summary
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="token">The login token returned from the /session POST call</param>
		/// <returns>OK</returns>
		public async Task<LandlordSummaryModel> LandlordController_GetSummaryDetailsAsync(string shortName, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customer/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/landlord/summary&token=" + (token==null? "" : System.Uri.EscapeDataString(token));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LandlordSummaryModel>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get tenancy details.
		/// LandlordController_GetTenancy v2/customer/{shortName}/landlord/tenancy
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="token">The login token returned from the /session POST call</param>
		/// <param name="tenancyID">The Tenancy ID</param>
		/// <returns>OK</returns>
		public async Task<LandlordTenancyModel> LandlordController_GetTenancyAsync(string shortName, string token, string tenancyID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customer/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/landlord/tenancy&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&tenancyID=" + (tenancyID==null? "" : System.Uri.EscapeDataString(tenancyID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LandlordTenancyModel>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Post tenancy maintenance preferences:-
		/// LandlordController_CreateMaintenancePreference v2/customer/{shortName}/landlord/tenancy/maintenance/preference
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="token">The login token returned from the /session POST call</param>
		/// <param name="tenancyID">The Tenancy ID</param>
		/// <param name="name">Name of the maintenance preference to add</param>
		/// <param name="notes">Notes of the maintenance preference to add</param>
		/// <returns>OK</returns>
		public async Task<string> LandlordController_CreateMaintenancePreferenceAsync(string shortName, string token, string tenancyID, string name, string notes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customer/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/landlord/tenancy/maintenance/preference&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&tenancyID=" + (tenancyID==null? "" : System.Uri.EscapeDataString(tenancyID))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&notes=" + (notes==null? "" : System.Uri.EscapeDataString(notes));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Generate a Tenancy Agreement Copy (PDF)
		/// LandlordController_GetTenancyAgreementReport v2/customer/{shortName}/landlord/tenancyagreement
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="token">The login token returned from the /session POST call</param>
		/// <param name="tenancyID">The Tenancy ID</param>
		/// <returns>OK</returns>
		public async Task<Object> LandlordController_GetTenancyAgreementReportAsync(string shortName, string token, string tenancyID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customer/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/landlord/tenancyagreement&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&tenancyID=" + (tenancyID==null? "" : System.Uri.EscapeDataString(tenancyID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Object>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Downloads the photo of a property given the photo ID.
		/// PhotoController_GetPhotoDownload v2/customer/{shortName}/photo/download
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="token">The login token returned from the /session POST call</param>
		/// <param name="photoID">The unique ID of the photo on the property</param>
		/// <param name="width">An optional parameter specifying the image width</param>
		/// <param name="height">An optional parameter specifying the image height</param>
		/// <returns>OK</returns>
		public async Task<Object> PhotoController_GetPhotoDownloadAsync(string shortName, string token, string photoID, int width, int height, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customer/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/photo/download&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&photoID=" + (photoID==null? "" : System.Uri.EscapeDataString(photoID))+"&width="+width+"&height="+height;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Object>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// A collection showing all the photos linked to a specific block, property or room
		/// PropertyController_GetPropertiesPhotos v2/customer/{shortName}/property/{propertyID}/photos
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="token">The login token returned from the /session POST call</param>
		/// <param name="propertyID">The unique ID of the Property</param>
		/// <param name="offset">The index of the first item to return</param>
		/// <param name="count">The maximum number of items to return (up to 1000 per request)</param>
		/// <returns>OK</returns>
		public async Task<LandlordPhotoModelResults> PropertyController_GetPropertiesPhotosAsync(string shortName, string token, string propertyID, int offset, int count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customer/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/property/"+ (propertyID==null? "" : System.Uri.EscapeDataString(propertyID))+"/photos&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&offset="+offset+"&count="+count;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LandlordPhotoModelResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Logout a customer previously logged in via the Login endpoint.
		/// SessionController_Logout v2/customer/{shortName}/session
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="token">The login token returned from the /session POST call</param>
		public async Task SessionController_LogoutAsync(string shortName, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customer/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/session&token=" + (token==null? "" : System.Uri.EscapeDataString(token));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets information about the currently logged on customer.
		/// SessionController_GetSessionInfo v2/customer/{shortName}/session
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="token">The login token returned from the /session POST call</param>
		/// <returns>OK</returns>
		public async Task<string> SessionController_GetSessionInfoAsync(string shortName, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customer/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/session&token=" + (token==null? "" : System.Uri.EscapeDataString(token));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Login as a customer given their username and password.
		/// SessionController_Login v2/customer/{shortName}/session
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="username">The user's username.</param>
		/// <param name="password">The user's password.</param>
		/// <returns>OK</returns>
		public async Task<string> SessionController_LoginAsync(string shortName, string username, string password, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customer/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/session&username=" + (username==null? "" : System.Uri.EscapeDataString(username))+"&password=" + (password==null? "" : System.Uri.EscapeDataString(password));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Send a request to the in-tray to create a landlord login.
		/// SessionController_CreateLandlordLogin v2/customer/{shortName}/session/createlandlordlogin
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="email">The email address of the landlord</param>
		/// <param name="title">The title of the landlord</param>
		/// <param name="forename">The forename of the landlord</param>
		/// <param name="surname">The surname of the landlord</param>
		/// <param name="propertyAddress">Address of the property linked to the landlord</param>
		/// <param name="contactDetails">Contact details of the landlord</param>
		/// <param name="branchID">(Optional) The branch ID linked to the login. This will determine which in tray the request display in</param>
		public async Task SessionController_CreateLandlordLoginAsync(string shortName, string email, string title, string forename, string surname, string propertyAddress, string contactDetails, string branchID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customer/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/session/createlandlordlogin&email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&title=" + (title==null? "" : System.Uri.EscapeDataString(title))+"&forename=" + (forename==null? "" : System.Uri.EscapeDataString(forename))+"&surname=" + (surname==null? "" : System.Uri.EscapeDataString(surname))+"&propertyAddress=" + (propertyAddress==null? "" : System.Uri.EscapeDataString(propertyAddress))+"&contactDetails=" + (contactDetails==null? "" : System.Uri.EscapeDataString(contactDetails))+"&branchID=" + (branchID==null? "" : System.Uri.EscapeDataString(branchID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Change the password of a customer given their existing and new password.
		/// SessionController_ChangePassword v2/customer/{shortName}/session/password
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="token">The login token returned from the /session POST call</param>
		/// <param name="oldPassword">The customer's existing password.</param>
		/// <param name="newPassword">The customer's new password.</param>
		public async Task SessionController_ChangePasswordAsync(string shortName, string token, string oldPassword, string newPassword, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customer/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/session/password&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&oldPassword=" + (oldPassword==null? "" : System.Uri.EscapeDataString(oldPassword))+"&newPassword=" + (newPassword==null? "" : System.Uri.EscapeDataString(newPassword));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Reset the customer's password. An email will be sent out to reset.
		/// SessionController_ResetPassword v2/customer/{shortName}/session/resetpassword
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="email">The login Email Address.</param>
		public async Task SessionController_ResetPasswordAsync(string shortName, string email, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/customer/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/session/resetpassword&email=" + (email==null? "" : System.Uri.EscapeDataString(email));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
