//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchGetAggregateResourceConfigResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BaseConfigurationItem[] BaseConfigurationItems { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AggregateResourceIdentifier[] UnprocessedResourceIdentifiers { get; set; }
	}
	
	/// <summary>
	/// The detailed configuration of a specified resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BaseConfigurationItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configurationItemCaptureTime")]
		public System.DateTimeOffset ConfigurationItemCaptureTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configurationItemStatus")]
		public ConfigurationItemStatus ConfigurationItemStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configurationStateId")]
		public string ConfigurationStateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="awsRegion")]
		public string AwsRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availabilityZone")]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceCreationTime")]
		public System.DateTimeOffset ResourceCreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public string Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supplementaryConfiguration")]
		public SupplementaryConfiguration SupplementaryConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ConfigurationItemStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceDiscovered = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceNotRecorded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceDeleted = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceDeletedNotRecorded = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::CustomerGateway")]
		AWSEC2CustomerGateway = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::EIP")]
		AWSEC2EIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::Host")]
		AWSEC2Host = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::Instance")]
		AWSEC2Instance = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::InternetGateway")]
		AWSEC2InternetGateway = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::NetworkAcl")]
		AWSEC2NetworkAcl = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::NetworkInterface")]
		AWSEC2NetworkInterface = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::RouteTable")]
		AWSEC2RouteTable = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::SecurityGroup")]
		AWSEC2SecurityGroup = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::Subnet")]
		AWSEC2Subnet = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::CloudTrail::Trail")]
		AWSCloudTrailTrail = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::Volume")]
		AWSEC2Volume = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::VPC")]
		AWSEC2VPC = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::VPNConnection")]
		AWSEC2VPNConnection = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::VPNGateway")]
		AWSEC2VPNGateway = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::RegisteredHAInstance")]
		AWSEC2RegisteredHAInstance = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::NatGateway")]
		AWSEC2NatGateway = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::EgressOnlyInternetGateway")]
		AWSEC2EgressOnlyInternetGateway = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::VPCEndpoint")]
		AWSEC2VPCEndpoint = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::VPCEndpointService")]
		AWSEC2VPCEndpointService = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::FlowLog")]
		AWSEC2FlowLog = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::VPCPeeringConnection")]
		AWSEC2VPCPeeringConnection = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Elasticsearch::Domain")]
		AWSElasticsearchDomain = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IAM::Group")]
		AWSIAMGroup = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IAM::Policy")]
		AWSIAMPolicy = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IAM::Role")]
		AWSIAMRole = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IAM::User")]
		AWSIAMUser = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::ElasticLoadBalancingV2::LoadBalancer")]
		AWSElasticLoadBalancingV2LoadBalancer = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::ACM::Certificate")]
		AWSACMCertificate = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::RDS::DBInstance")]
		AWSRDSDBInstance = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::RDS::DBSubnetGroup")]
		AWSRDSDBSubnetGroup = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::RDS::DBSecurityGroup")]
		AWSRDSDBSecurityGroup = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::RDS::DBSnapshot")]
		AWSRDSDBSnapshot = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::RDS::DBCluster")]
		AWSRDSDBCluster = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::RDS::DBClusterSnapshot")]
		AWSRDSDBClusterSnapshot = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::RDS::EventSubscription")]
		AWSRDSEventSubscription = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::S3::Bucket")]
		AWSS3Bucket = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::S3::AccountPublicAccessBlock")]
		AWSS3AccountPublicAccessBlock = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Redshift::Cluster")]
		AWSRedshiftCluster = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Redshift::ClusterSnapshot")]
		AWSRedshiftClusterSnapshot = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Redshift::ClusterParameterGroup")]
		AWSRedshiftClusterParameterGroup = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Redshift::ClusterSecurityGroup")]
		AWSRedshiftClusterSecurityGroup = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Redshift::ClusterSubnetGroup")]
		AWSRedshiftClusterSubnetGroup = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Redshift::EventSubscription")]
		AWSRedshiftEventSubscription = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::SSM::ManagedInstanceInventory")]
		AWSSSMManagedInstanceInventory = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::CloudWatch::Alarm")]
		AWSCloudWatchAlarm = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::CloudFormation::Stack")]
		AWSCloudFormationStack = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::ElasticLoadBalancing::LoadBalancer")]
		AWSElasticLoadBalancingLoadBalancer = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::AutoScaling::AutoScalingGroup")]
		AWSAutoScalingAutoScalingGroup = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::AutoScaling::LaunchConfiguration")]
		AWSAutoScalingLaunchConfiguration = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::AutoScaling::ScalingPolicy")]
		AWSAutoScalingScalingPolicy = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::AutoScaling::ScheduledAction")]
		AWSAutoScalingScheduledAction = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::DynamoDB::Table")]
		AWSDynamoDBTable = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::CodeBuild::Project")]
		AWSCodeBuildProject = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::WAF::RateBasedRule")]
		AWSWAFRateBasedRule = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::WAF::Rule")]
		AWSWAFRule = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::WAF::RuleGroup")]
		AWSWAFRuleGroup = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::WAF::WebACL")]
		AWSWAFWebACL = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::WAFRegional::RateBasedRule")]
		AWSWAFRegionalRateBasedRule = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::WAFRegional::Rule")]
		AWSWAFRegionalRule = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::WAFRegional::RuleGroup")]
		AWSWAFRegionalRuleGroup = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::WAFRegional::WebACL")]
		AWSWAFRegionalWebACL = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::CloudFront::Distribution")]
		AWSCloudFrontDistribution = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::CloudFront::StreamingDistribution")]
		AWSCloudFrontStreamingDistribution = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Lambda::Function")]
		AWSLambdaFunction = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::NetworkFirewall::Firewall")]
		AWSNetworkFirewallFirewall = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::NetworkFirewall::FirewallPolicy")]
		AWSNetworkFirewallFirewallPolicy = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::NetworkFirewall::RuleGroup")]
		AWSNetworkFirewallRuleGroup = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::ElasticBeanstalk::Application")]
		AWSElasticBeanstalkApplication = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::ElasticBeanstalk::ApplicationVersion")]
		AWSElasticBeanstalkApplicationVersion = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::ElasticBeanstalk::Environment")]
		AWSElasticBeanstalkEnvironment = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::WAFv2::WebACL")]
		AWSWAFv2WebACL = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::WAFv2::RuleGroup")]
		AWSWAFv2RuleGroup = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::WAFv2::IPSet")]
		AWSWAFv2IPSet = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::WAFv2::RegexPatternSet")]
		AWSWAFv2RegexPatternSet = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::WAFv2::ManagedRuleSet")]
		AWSWAFv2ManagedRuleSet = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::XRay::EncryptionConfig")]
		AWSXRayEncryptionConfig = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::SSM::AssociationCompliance")]
		AWSSSMAssociationCompliance = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::SSM::PatchCompliance")]
		AWSSSMPatchCompliance = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Shield::Protection")]
		AWSShieldProtection = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::ShieldRegional::Protection")]
		AWSShieldRegionalProtection = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Config::ConformancePackCompliance")]
		AWSConfigConformancePackCompliance = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Config::ResourceCompliance")]
		AWSConfigResourceCompliance = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::ApiGateway::Stage")]
		AWSApiGatewayStage = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::ApiGateway::RestApi")]
		AWSApiGatewayRestApi = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::ApiGatewayV2::Stage")]
		AWSApiGatewayV2Stage = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::ApiGatewayV2::Api")]
		AWSApiGatewayV2Api = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::CodePipeline::Pipeline")]
		AWSCodePipelinePipeline = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::ServiceCatalog::CloudFormationProvisionedProduct")]
		AWSServiceCatalogCloudFormationProvisionedProduct = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::ServiceCatalog::CloudFormationProduct")]
		AWSServiceCatalogCloudFormationProduct = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::ServiceCatalog::Portfolio")]
		AWSServiceCatalogPortfolio = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::SQS::Queue")]
		AWSSQSQueue = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::KMS::Key")]
		AWSKMSKey = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::QLDB::Ledger")]
		AWSQLDBLedger = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::SecretsManager::Secret")]
		AWSSecretsManagerSecret = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::SNS::Topic")]
		AWSSNSTopic = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::SSM::FileData")]
		AWSSSMFileData = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Backup::BackupPlan")]
		AWSBackupBackupPlan = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Backup::BackupSelection")]
		AWSBackupBackupSelection = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Backup::BackupVault")]
		AWSBackupBackupVault = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Backup::RecoveryPoint")]
		AWSBackupRecoveryPoint = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::ECR::Repository")]
		AWSECRRepository = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::ECS::Cluster")]
		AWSECSCluster = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::ECS::Service")]
		AWSECSService = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::ECS::TaskDefinition")]
		AWSECSTaskDefinition = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EFS::AccessPoint")]
		AWSEFSAccessPoint = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EFS::FileSystem")]
		AWSEFSFileSystem = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EKS::Cluster")]
		AWSEKSCluster = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::OpenSearch::Domain")]
		AWSOpenSearchDomain = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::TransitGateway")]
		AWSEC2TransitGateway = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Kinesis::Stream")]
		AWSKinesisStream = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Kinesis::StreamConsumer")]
		AWSKinesisStreamConsumer = 111,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::CodeDeploy::Application")]
		AWSCodeDeployApplication = 112,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::CodeDeploy::DeploymentConfig")]
		AWSCodeDeployDeploymentConfig = 113,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::CodeDeploy::DeploymentGroup")]
		AWSCodeDeployDeploymentGroup = 114,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::LaunchTemplate")]
		AWSEC2LaunchTemplate = 115,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::ECR::PublicRepository")]
		AWSECRPublicRepository = 116,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::GuardDuty::Detector")]
		AWSGuardDutyDetector = 117,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EMR::SecurityConfiguration")]
		AWSEMRSecurityConfiguration = 118,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::SageMaker::CodeRepository")]
		AWSSageMakerCodeRepository = 119,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Route53Resolver::ResolverEndpoint")]
		AWSRoute53ResolverResolverEndpoint = 120,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Route53Resolver::ResolverRule")]
		AWSRoute53ResolverResolverRule = 121,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Route53Resolver::ResolverRuleAssociation")]
		AWSRoute53ResolverResolverRuleAssociation = 122,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::DMS::ReplicationSubnetGroup")]
		AWSDMSReplicationSubnetGroup = 123,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::DMS::EventSubscription")]
		AWSDMSEventSubscription = 124,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::MSK::Cluster")]
		AWSMSKCluster = 125,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::StepFunctions::Activity")]
		AWSStepFunctionsActivity = 126,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::WorkSpaces::Workspace")]
		AWSWorkSpacesWorkspace = 127,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::WorkSpaces::ConnectionAlias")]
		AWSWorkSpacesConnectionAlias = 128,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::SageMaker::Model")]
		AWSSageMakerModel = 129,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::ElasticLoadBalancingV2::Listener")]
		AWSElasticLoadBalancingV2Listener = 130,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::StepFunctions::StateMachine")]
		AWSStepFunctionsStateMachine = 131,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Batch::JobQueue")]
		AWSBatchJobQueue = 132,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Batch::ComputeEnvironment")]
		AWSBatchComputeEnvironment = 133,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::AccessAnalyzer::Analyzer")]
		AWSAccessAnalyzerAnalyzer = 134,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Athena::WorkGroup")]
		AWSAthenaWorkGroup = 135,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Athena::DataCatalog")]
		AWSAthenaDataCatalog = 136,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Detective::Graph")]
		AWSDetectiveGraph = 137,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::GlobalAccelerator::Accelerator")]
		AWSGlobalAcceleratorAccelerator = 138,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::GlobalAccelerator::EndpointGroup")]
		AWSGlobalAcceleratorEndpointGroup = 139,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::GlobalAccelerator::Listener")]
		AWSGlobalAcceleratorListener = 140,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::TransitGatewayAttachment")]
		AWSEC2TransitGatewayAttachment = 141,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::TransitGatewayRouteTable")]
		AWSEC2TransitGatewayRouteTable = 142,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::DMS::Certificate")]
		AWSDMSCertificate = 143,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::AppConfig::Application")]
		AWSAppConfigApplication = 144,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::AppSync::GraphQLApi")]
		AWSAppSyncGraphQLApi = 145,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::DataSync::LocationSMB")]
		AWSDataSyncLocationSMB = 146,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::DataSync::LocationFSxLustre")]
		AWSDataSyncLocationFSxLustre = 147,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::DataSync::LocationS3")]
		AWSDataSyncLocationS3 = 148,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::DataSync::LocationEFS")]
		AWSDataSyncLocationEFS = 149,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::DataSync::Task")]
		AWSDataSyncTask = 150,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::DataSync::LocationNFS")]
		AWSDataSyncLocationNFS = 151,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::NetworkInsightsAccessScopeAnalysis")]
		AWSEC2NetworkInsightsAccessScopeAnalysis = 152,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EKS::FargateProfile")]
		AWSEKSFargateProfile = 153,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Glue::Job")]
		AWSGlueJob = 154,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::GuardDuty::ThreatIntelSet")]
		AWSGuardDutyThreatIntelSet = 155,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::GuardDuty::IPSet")]
		AWSGuardDutyIPSet = 156,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::SageMaker::Workteam")]
		AWSSageMakerWorkteam = 157,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::SageMaker::NotebookInstanceLifecycleConfig")]
		AWSSageMakerNotebookInstanceLifecycleConfig = 158,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::ServiceDiscovery::Service")]
		AWSServiceDiscoveryService = 159,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::ServiceDiscovery::PublicDnsNamespace")]
		AWSServiceDiscoveryPublicDnsNamespace = 160,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::SES::ContactList")]
		AWSSESContactList = 161,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::SES::ConfigurationSet")]
		AWSSESConfigurationSet = 162,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Route53::HostedZone")]
		AWSRoute53HostedZone = 163,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IoTEvents::Input")]
		AWSIoTEventsInput = 164,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IoTEvents::DetectorModel")]
		AWSIoTEventsDetectorModel = 165,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IoTEvents::AlarmModel")]
		AWSIoTEventsAlarmModel = 166,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::ServiceDiscovery::HttpNamespace")]
		AWSServiceDiscoveryHttpNamespace = 167,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Events::EventBus")]
		AWSEventsEventBus = 168,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::ImageBuilder::ContainerRecipe")]
		AWSImageBuilderContainerRecipe = 169,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::ImageBuilder::DistributionConfiguration")]
		AWSImageBuilderDistributionConfiguration = 170,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::ImageBuilder::InfrastructureConfiguration")]
		AWSImageBuilderInfrastructureConfiguration = 171,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::DataSync::LocationObjectStorage")]
		AWSDataSyncLocationObjectStorage = 172,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::DataSync::LocationHDFS")]
		AWSDataSyncLocationHDFS = 173,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Glue::Classifier")]
		AWSGlueClassifier = 174,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Route53RecoveryReadiness::Cell")]
		AWSRoute53RecoveryReadinessCell = 175,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Route53RecoveryReadiness::ReadinessCheck")]
		AWSRoute53RecoveryReadinessReadinessCheck = 176,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::ECR::RegistryPolicy")]
		AWSECRRegistryPolicy = 177,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Backup::ReportPlan")]
		AWSBackupReportPlan = 178,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Lightsail::Certificate")]
		AWSLightsailCertificate = 179,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::RUM::AppMonitor")]
		AWSRUMAppMonitor = 180,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Events::Endpoint")]
		AWSEventsEndpoint = 181,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::SES::ReceiptRuleSet")]
		AWSSESReceiptRuleSet = 182,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Events::Archive")]
		AWSEventsArchive = 183,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Events::ApiDestination")]
		AWSEventsApiDestination = 184,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Lightsail::Disk")]
		AWSLightsailDisk = 185,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::FIS::ExperimentTemplate")]
		AWSFISExperimentTemplate = 186,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::DataSync::LocationFSxWindows")]
		AWSDataSyncLocationFSxWindows = 187,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::SES::ReceiptFilter")]
		AWSSESReceiptFilter = 188,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::GuardDuty::Filter")]
		AWSGuardDutyFilter = 189,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::SES::Template")]
		AWSSESTemplate = 190,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::AmazonMQ::Broker")]
		AWSAmazonMQBroker = 191,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::AppConfig::Environment")]
		AWSAppConfigEnvironment = 192,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::AppConfig::ConfigurationProfile")]
		AWSAppConfigConfigurationProfile = 193,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Cloud9::EnvironmentEC2")]
		AWSCloud9EnvironmentEC2 = 194,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EventSchemas::Registry")]
		AWSEventSchemasRegistry = 195,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EventSchemas::RegistryPolicy")]
		AWSEventSchemasRegistryPolicy = 196,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EventSchemas::Discoverer")]
		AWSEventSchemasDiscoverer = 197,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::FraudDetector::Label")]
		AWSFraudDetectorLabel = 198,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::FraudDetector::EntityType")]
		AWSFraudDetectorEntityType = 199,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::FraudDetector::Variable")]
		AWSFraudDetectorVariable = 200,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::FraudDetector::Outcome")]
		AWSFraudDetectorOutcome = 201,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IoT::Authorizer")]
		AWSIoTAuthorizer = 202,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IoT::SecurityProfile")]
		AWSIoTSecurityProfile = 203,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IoT::RoleAlias")]
		AWSIoTRoleAlias = 204,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IoT::Dimension")]
		AWSIoTDimension = 205,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IoTAnalytics::Datastore")]
		AWSIoTAnalyticsDatastore = 206,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Lightsail::Bucket")]
		AWSLightsailBucket = 207,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Lightsail::StaticIp")]
		AWSLightsailStaticIp = 208,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::MediaPackage::PackagingGroup")]
		AWSMediaPackagePackagingGroup = 209,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Route53RecoveryReadiness::RecoveryGroup")]
		AWSRoute53RecoveryReadinessRecoveryGroup = 210,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::ResilienceHub::ResiliencyPolicy")]
		AWSResilienceHubResiliencyPolicy = 211,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Transfer::Workflow")]
		AWSTransferWorkflow = 212,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EKS::IdentityProviderConfig")]
		AWSEKSIdentityProviderConfig = 213,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EKS::Addon")]
		AWSEKSAddon = 214,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Glue::MLTransform")]
		AWSGlueMLTransform = 215,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IoT::Policy")]
		AWSIoTPolicy = 216,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IoT::MitigationAction")]
		AWSIoTMitigationAction = 217,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IoTTwinMaker::Workspace")]
		AWSIoTTwinMakerWorkspace = 218,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IoTTwinMaker::Entity")]
		AWSIoTTwinMakerEntity = 219,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IoTAnalytics::Dataset")]
		AWSIoTAnalyticsDataset = 220,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IoTAnalytics::Pipeline")]
		AWSIoTAnalyticsPipeline = 221,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IoTAnalytics::Channel")]
		AWSIoTAnalyticsChannel = 222,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IoTSiteWise::Dashboard")]
		AWSIoTSiteWiseDashboard = 223,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IoTSiteWise::Project")]
		AWSIoTSiteWiseProject = 224,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IoTSiteWise::Portal")]
		AWSIoTSiteWisePortal = 225,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IoTSiteWise::AssetModel")]
		AWSIoTSiteWiseAssetModel = 226,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IVS::Channel")]
		AWSIVSChannel = 227,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IVS::RecordingConfiguration")]
		AWSIVSRecordingConfiguration = 228,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IVS::PlaybackKeyPair")]
		AWSIVSPlaybackKeyPair = 229,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::KinesisAnalyticsV2::Application")]
		AWSKinesisAnalyticsV2Application = 230,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::RDS::GlobalCluster")]
		AWSRDSGlobalCluster = 231,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::S3::MultiRegionAccessPoint")]
		AWSS3MultiRegionAccessPoint = 232,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::DeviceFarm::TestGridProject")]
		AWSDeviceFarmTestGridProject = 233,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Budgets::BudgetsAction")]
		AWSBudgetsBudgetsAction = 234,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Lex::Bot")]
		AWSLexBot = 235,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::CodeGuruReviewer::RepositoryAssociation")]
		AWSCodeGuruReviewerRepositoryAssociation = 236,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IoT::CustomMetric")]
		AWSIoTCustomMetric = 237,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Route53Resolver::FirewallDomainList")]
		AWSRoute53ResolverFirewallDomainList = 238,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::RoboMaker::RobotApplicationVersion")]
		AWSRoboMakerRobotApplicationVersion = 239,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::TrafficMirrorSession")]
		AWSEC2TrafficMirrorSession = 240,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IoTSiteWise::Gateway")]
		AWSIoTSiteWiseGateway = 241,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Lex::BotAlias")]
		AWSLexBotAlias = 242,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::LookoutMetrics::Alert")]
		AWSLookoutMetricsAlert = 243,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IoT::AccountAuditConfiguration")]
		AWSIoTAccountAuditConfiguration = 244,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::TrafficMirrorTarget")]
		AWSEC2TrafficMirrorTarget = 245,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::S3::StorageLens")]
		AWSS3StorageLens = 246,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IoT::ScheduledAudit")]
		AWSIoTScheduledAudit = 247,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Events::Connection")]
		AWSEventsConnection = 248,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EventSchemas::Schema")]
		AWSEventSchemasSchema = 249,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::MediaPackage::PackagingConfiguration")]
		AWSMediaPackagePackagingConfiguration = 250,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::KinesisVideo::SignalingChannel")]
		AWSKinesisVideoSignalingChannel = 251,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::AppStream::DirectoryConfig")]
		AWSAppStreamDirectoryConfig = 252,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::LookoutVision::Project")]
		AWSLookoutVisionProject = 253,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Route53RecoveryControl::Cluster")]
		AWSRoute53RecoveryControlCluster = 254,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Route53RecoveryControl::SafetyRule")]
		AWSRoute53RecoveryControlSafetyRule = 255,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Route53RecoveryControl::ControlPanel")]
		AWSRoute53RecoveryControlControlPanel = 256,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Route53RecoveryControl::RoutingControl")]
		AWSRoute53RecoveryControlRoutingControl = 257,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Route53RecoveryReadiness::ResourceSet")]
		AWSRoute53RecoveryReadinessResourceSet = 258,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::RoboMaker::SimulationApplication")]
		AWSRoboMakerSimulationApplication = 259,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::RoboMaker::RobotApplication")]
		AWSRoboMakerRobotApplication = 260,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::HealthLake::FHIRDatastore")]
		AWSHealthLakeFHIRDatastore = 261,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Pinpoint::Segment")]
		AWSPinpointSegment = 262,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Pinpoint::ApplicationSettings")]
		AWSPinpointApplicationSettings = 263,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Events::Rule")]
		AWSEventsRule = 264,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::DHCPOptions")]
		AWSEC2DHCPOptions = 265,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::NetworkInsightsPath")]
		AWSEC2NetworkInsightsPath = 266,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::TrafficMirrorFilter")]
		AWSEC2TrafficMirrorFilter = 267,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::IPAM")]
		AWSEC2IPAM = 268,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IoTTwinMaker::Scene")]
		AWSIoTTwinMakerScene = 269,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::NetworkManager::TransitGatewayRegistration")]
		AWSNetworkManagerTransitGatewayRegistration = 270,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::CustomerProfiles::Domain")]
		AWSCustomerProfilesDomain = 271,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::AutoScaling::WarmPool")]
		AWSAutoScalingWarmPool = 272,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Connect::PhoneNumber")]
		AWSConnectPhoneNumber = 273,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::AppConfig::DeploymentStrategy")]
		AWSAppConfigDeploymentStrategy = 274,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::AppFlow::Flow")]
		AWSAppFlowFlow = 275,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::AuditManager::Assessment")]
		AWSAuditManagerAssessment = 276,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::CloudWatch::MetricStream")]
		AWSCloudWatchMetricStream = 277,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::DeviceFarm::InstanceProfile")]
		AWSDeviceFarmInstanceProfile = 278,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::DeviceFarm::Project")]
		AWSDeviceFarmProject = 279,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::EC2Fleet")]
		AWSEC2EC2Fleet = 280,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::SubnetRouteTableAssociation")]
		AWSEC2SubnetRouteTableAssociation = 281,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::ECR::PullThroughCacheRule")]
		AWSECRPullThroughCacheRule = 282,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::GroundStation::Config")]
		AWSGroundStationConfig = 283,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::ImageBuilder::ImagePipeline")]
		AWSImageBuilderImagePipeline = 284,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IoT::FleetMetric")]
		AWSIoTFleetMetric = 285,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IoTWireless::ServiceProfile")]
		AWSIoTWirelessServiceProfile = 286,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::NetworkManager::Device")]
		AWSNetworkManagerDevice = 287,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::NetworkManager::GlobalNetwork")]
		AWSNetworkManagerGlobalNetwork = 288,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::NetworkManager::Link")]
		AWSNetworkManagerLink = 289,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::NetworkManager::Site")]
		AWSNetworkManagerSite = 290,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Panorama::Package")]
		AWSPanoramaPackage = 291,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Pinpoint::App")]
		AWSPinpointApp = 292,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Redshift::ScheduledAction")]
		AWSRedshiftScheduledAction = 293,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Route53Resolver::FirewallRuleGroupAssociation")]
		AWSRoute53ResolverFirewallRuleGroupAssociation = 294,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::SageMaker::AppImageConfig")]
		AWSSageMakerAppImageConfig = 295,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::SageMaker::Image")]
		AWSSageMakerImage = 296,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::ECS::TaskSet")]
		AWSECSTaskSet = 297,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Cassandra::Keyspace")]
		AWSCassandraKeyspace = 298,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Signer::SigningProfile")]
		AWSSignerSigningProfile = 299,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Amplify::App")]
		AWSAmplifyApp = 300,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::AppMesh::VirtualNode")]
		AWSAppMeshVirtualNode = 301,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::AppMesh::VirtualService")]
		AWSAppMeshVirtualService = 302,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::AppRunner::VpcConnector")]
		AWSAppRunnerVpcConnector = 303,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::AppStream::Application")]
		AWSAppStreamApplication = 304,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::CodeArtifact::Repository")]
		AWSCodeArtifactRepository = 305,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::PrefixList")]
		AWSEC2PrefixList = 306,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::EC2::SpotFleet")]
		AWSEC2SpotFleet = 307,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Evidently::Project")]
		AWSEvidentlyProject = 308,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Forecast::Dataset")]
		AWSForecastDataset = 309,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IAM::SAMLProvider")]
		AWSIAMSAMLProvider = 310,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::IAM::ServerCertificate")]
		AWSIAMServerCertificate = 311,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Pinpoint::Campaign")]
		AWSPinpointCampaign = 312,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Pinpoint::InAppTemplate")]
		AWSPinpointInAppTemplate = 313,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::SageMaker::Domain")]
		AWSSageMakerDomain = 314,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Transfer::Agreement")]
		AWSTransferAgreement = 315,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::Transfer::Connector")]
		AWSTransferConnector = 316,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::KinesisFirehose::DeliveryStream")]
		AWSKinesisFirehoseDeliveryStream = 317,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SupplementaryConfiguration
	{
	}
	
	/// <summary>
	/// The details that identify a resource that is collected by Config aggregator, including the resource type, ID, (if available) the custom resource name, the source account, and source region.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AggregateResourceIdentifier
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceAccountId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceRegion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchGetAggregateResourceConfigRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationAggregatorName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AggregateResourceIdentifier[] ResourceIdentifiers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NoSuchConfigurationAggregatorException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchGetResourceConfigResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseConfigurationItems")]
		public BaseConfigurationItem[] BaseConfigurationItems { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unprocessedResourceKeys")]
		public ResourceKey[] UnprocessedResourceKeys { get; set; }
	}
	
	/// <summary>
	/// The details that identify a resource within Config, including the resource type and resource ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceKey
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchGetResourceConfigRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceKeys")]
		public ResourceKey[] ResourceKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NoAvailableConfigurationRecorderException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAggregationAuthorizationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizedAccountId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizedAwsRegion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidParameterValueException
	{
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteConfigRuleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigRuleName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NoSuchConfigRuleException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceInUseException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteConfigurationAggregatorRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationAggregatorName { get; set; }
	}
	
	/// <summary>
	/// The request object for the <code>DeleteConfigurationRecorder</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteConfigurationRecorderRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationRecorderName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NoSuchConfigurationRecorderException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteConformancePackRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConformancePackName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NoSuchConformancePackException
	{
	}
	
	/// <summary>
	/// The input for the <a>DeleteDeliveryChannel</a> action. The action accepts the following data, in JSON format. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDeliveryChannelRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeliveryChannelName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NoSuchDeliveryChannelException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LastDeliveryChannelDeleteFailedException
	{
	}
	
	/// <summary>
	/// The output when you delete the evaluation results for the specified Config rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteEvaluationResultsResponse
	{
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteEvaluationResultsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigRuleName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteOrganizationConfigRuleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OrganizationConfigRuleName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NoSuchOrganizationConfigRuleException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationAccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteOrganizationConformancePackRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OrganizationConformancePackName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NoSuchOrganizationConformancePackException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletePendingAggregationRequestRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RequesterAccountId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RequesterAwsRegion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteRemediationConfigurationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteRemediationConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigRuleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NoSuchRemediationConfigurationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemediationInProgressException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InsufficientPermissionsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteRemediationExceptionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FailedDeleteRemediationExceptionsBatch[] FailedBatches { get; set; }
	}
	
	/// <summary>
	/// List of each of the failed delete remediation exceptions with specific reasons.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FailedDeleteRemediationExceptionsBatch
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RemediationExceptionResourceKey[] FailedItems { get; set; }
	}
	
	/// <summary>
	/// The details that identify a resource within Config, including the resource type and resource ID. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemediationExceptionResourceKey
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteRemediationExceptionsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigRuleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RemediationExceptionResourceKey[] ResourceKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NoSuchRemediationExceptionException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteResourceConfigRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NoRunningConfigurationRecorderException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteRetentionConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RetentionConfigurationName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NoSuchRetentionConfigurationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteStoredQueryResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteStoredQueryRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string QueryName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFoundException
	{
	}
	
	/// <summary>
	/// The output for the <a>DeliverConfigSnapshot</a> action, in JSON format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeliverConfigSnapshotResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="configSnapshotId")]
		public string ConfigSnapshotId { get; set; }
	}
	
	/// <summary>
	/// The input for the <a>DeliverConfigSnapshot</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeliverConfigSnapshotRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deliveryChannelName")]
		public string DeliveryChannelName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAggregateComplianceByConfigRulesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AggregateComplianceByConfigRule[] AggregateComplianceByConfigRules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p>Indicates whether an Config rule is compliant based on account ID, region, compliance, and rule name.</p> <p>A rule is compliant if all of the resources that the rule evaluated comply with it. It is noncompliant if any of these resources do not comply.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AggregateComplianceByConfigRule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigRuleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Compliance Compliance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsRegion { get; set; }
	}
	
	/// <summary>
	/// Indicates whether an Amazon Web Services resource or Config rule is compliant and provides the number of contributors that affect the compliance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Compliance
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceType ComplianceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceContributorCount ComplianceContributorCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ComplianceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLIANT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_COMPLIANT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_APPLICABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSUFFICIENT_DATA = 3,
	}
	
	/// <summary>
	/// The number of Amazon Web Services resources or Config rules responsible for the current compliance of the item, up to a maximum number.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComplianceContributorCount
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CappedCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CapExceeded { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAggregateComplianceByConfigRulesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationAggregatorName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigRuleComplianceFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Filters the compliance results based on account ID, region, compliance type, and rule name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigRuleComplianceFilters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigRuleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceType ComplianceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsRegion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidLimitException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidNextTokenException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAggregateComplianceByConformancePacksResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AggregateComplianceByConformancePack[] AggregateComplianceByConformancePacks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p>Provides aggregate compliance of the conformance pack. Indicates whether a conformance pack is compliant based on the name of the conformance pack, account ID, and region.</p> <p>A conformance pack is compliant if all of the rules in a conformance packs are compliant. It is noncompliant if any of the rules are not compliant. The compliance status of a conformance pack is INSUFFICIENT_DATA only if all rules within a conformance pack cannot be evaluated due to insufficient data. If some of the rules in a conformance pack are compliant but the compliance status of other rules in that same conformance pack is INSUFFICIENT_DATA, the conformance pack shows compliant.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AggregateComplianceByConformancePack
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConformancePackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AggregateConformancePackCompliance Compliance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsRegion { get; set; }
	}
	
	/// <summary>
	/// <p>Provides the number of compliant and noncompliant rules within a conformance pack. Also provides the compliance status of the conformance pack and the total rule count which includes compliant rules, noncompliant rules, and rules that cannot be evaluated due to insufficient data.</p> <p>A conformance pack is compliant if all of the rules in a conformance packs are compliant. It is noncompliant if any of the rules are not compliant. The compliance status of a conformance pack is INSUFFICIENT_DATA only if all rules within a conformance pack cannot be evaluated due to insufficient data. If some of the rules in a conformance pack are compliant but the compliance status of other rules in that same conformance pack is INSUFFICIENT_DATA, the conformance pack shows compliant.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AggregateConformancePackCompliance
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConformancePackComplianceType ComplianceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CompliantRuleCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NonCompliantRuleCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalRuleCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ConformancePackComplianceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLIANT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_COMPLIANT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSUFFICIENT_DATA = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAggregateComplianceByConformancePacksRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationAggregatorName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AggregateConformancePackComplianceFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Filters the conformance packs based on an account ID, region, compliance type, and the name of the conformance pack.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AggregateConformancePackComplianceFilters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConformancePackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConformancePackComplianceType ComplianceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsRegion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAggregationAuthorizationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AggregationAuthorization[] AggregationAuthorizations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An object that represents the authorizations granted to aggregator accounts and regions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AggregationAuthorization
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AggregationAuthorizationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizedAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizedAwsRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAggregationAuthorizationsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeComplianceByConfigRuleResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceByConfigRule[] ComplianceByConfigRules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Indicates whether an Config rule is compliant. A rule is compliant if all of the resources that the rule evaluated comply with it. A rule is noncompliant if any of these resources do not comply.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComplianceByConfigRule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigRuleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Compliance Compliance { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeComplianceByConfigRuleRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ConfigRuleNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceType[] ComplianceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeComplianceByResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceByResource[] ComplianceByResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Indicates whether an Amazon Web Services resource that is evaluated according to one or more Config rules is compliant. A resource is compliant if it complies with all of the rules that evaluate it. A resource is noncompliant if it does not comply with one or more of these rules.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComplianceByResource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Compliance Compliance { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeComplianceByResourceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceType[] ComplianceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeConfigRuleEvaluationStatusResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigRuleEvaluationStatus[] ConfigRulesEvaluationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p>Status information for your Config Managed rules and Config Custom Policy rules. The status includes information such as the last time the rule ran, the last time it failed, and the related error for the last failure.</p> <p>This action does not return status information about Config Custom Lambda rules.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigRuleEvaluationStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigRuleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigRuleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigRuleId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastSuccessfulInvocationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastFailedInvocationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastSuccessfulEvaluationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastFailedEvaluationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset FirstActivatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastDeactivatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> FirstEvaluationStarted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastDebugLogDeliveryStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastDebugLogDeliveryStatusReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastDebugLogDeliveryTime { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeConfigRuleEvaluationStatusRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ConfigRuleNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeConfigRulesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigRule[] ConfigRules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p>Config rules evaluate the configuration settings of your Amazon Web Services resources. A rule can run when Config detects a configuration change to an Amazon Web Services resource or at a periodic frequency that you choose (for example, every 24 hours). There are two types of rules: <i>Config Managed Rules</i> and <i>Config Custom Rules</i>.</p> <p>Config Managed Rules are predefined, customizable rules created by Config. For a list of managed rules, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/managed-rules-by-aws-config.html">List of Config Managed Rules</a>.</p> <p>Config Custom Rules are rules that you create from scratch. There are two ways to create Config custom rules: with Lambda functions (<a href="https://docs.aws.amazon.com/config/latest/developerguide/gettingstarted-concepts.html#gettingstarted-concepts-function"> Lambda Developer Guide</a>) and with Guard (<a href="https://github.com/aws-cloudformation/cloudformation-guard">Guard GitHub Repository</a>), a policy-as-code language. Config custom rules created with Lambda are called <i>Config Custom Lambda Rules</i> and Config custom rules created with Guard are called <i>Config Custom Policy Rules</i>.</p> <p>For more information about developing and using Config rules, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config.html">Evaluating Resource with Config Rules</a> in the <i>Config Developer Guide</i>.</p> <note> <p>You can use the Amazon Web Services CLI and Amazon Web Services SDKs if you want to create a rule that triggers evaluations for your resources when Config delivers the configuration snapshot. For more information, see <a>ConfigSnapshotDeliveryProperties</a>.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigRule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigRuleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigRuleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigRuleId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Scope Scope { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Source Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InputParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaximumExecutionFrequency MaximumExecutionFrequency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigRuleState ConfigRuleState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EvaluationModeConfiguration[] EvaluationModes { get; set; }
	}
	
	/// <summary>
	/// Defines which resources trigger an evaluation for an Config rule. The scope can include one or more resource types, a combination of a tag key and value, or a combination of one resource type and one resource ID. Specify a scope to constrain which resources trigger an evaluation for a rule. Otherwise, evaluations for the rule are triggered when any resource in your recording group changes in configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Scope
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ComplianceResourceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TagKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TagValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ComplianceResourceId { get; set; }
	}
	
	/// <summary>
	/// Provides the CustomPolicyDetails, the rule owner (<code>Amazon Web Services</code> for managed rules, <code>CUSTOM_POLICY</code> for Custom Policy rules, and <code>CUSTOM_LAMBDA</code> for Custom Lambda rules), the rule identifier, and the events that cause the evaluation of your Amazon Web Services resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Source
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Owner Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourceDetail[] SourceDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CustomPolicyDetails CustomPolicyDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Owner
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_LAMBDA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_POLICY = 2,
	}
	
	/// <summary>
	/// Provides the source and the message types that trigger Config to evaluate your Amazon Web Services resources against a rule. It also provides the frequency with which you want Config to run evaluations for the rule if the trigger type is periodic. You can specify the parameter values for <code>SourceDetail</code> only for custom rules. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EventSource EventSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MessageType MessageType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaximumExecutionFrequency MaximumExecutionFrequency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum EventSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="aws.config")]
		aws_config = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MessageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ConfigurationItemChangeNotification = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ConfigurationSnapshotDeliveryCompleted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScheduledNotification = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OversizedConfigurationItemChangeNotification = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MaximumExecutionFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		One_Hour = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Three_Hours = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Six_Hours = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Twelve_Hours = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TwentyFour_Hours = 4,
	}
	
	/// <summary>
	/// Provides the runtime system, policy definition, and whether debug logging enabled. You can specify the following CustomPolicyDetails parameter values only for Config Custom Policy rules.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomPolicyDetails
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyRuntime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyText { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableDebugLogDelivery { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ConfigRuleState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING_RESULTS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVALUATING = 3,
	}
	
	/// <summary>
	/// The configuration object for Config rule evaluation mode. The Supported valid values are Detective or Proactive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EvaluationModeConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EvaluationMode Mode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum EvaluationMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DETECTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROACTIVE = 1,
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeConfigRulesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ConfigRuleNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeConfigRulesFilters Filters { get; set; }
	}
	
	/// <summary>
	/// Returns a filtered list of Detective or Proactive Config rules. By default, if the filter is not defined, this API returns an unfiltered list. For more information on Detective or Proactive Config rules, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config-rules.html"> <b>Evaluation Mode</b> </a> in the <i>Config Developer Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeConfigRulesFilters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EvaluationMode EvaluationMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeConfigurationAggregatorSourcesStatusResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AggregatedSourceStatus[] AggregatedSourceStatusList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The current sync status between the source and the aggregator account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AggregatedSourceStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AggregatedSourceType SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AggregatedSourceStatusType LastUpdateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastErrorMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AggregatedSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORGANIZATION = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AggregatedSourceStatusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUTDATED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeConfigurationAggregatorSourcesStatusRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationAggregatorName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AggregatedSourceStatusType[] UpdateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeConfigurationAggregatorsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationAggregator[] ConfigurationAggregators { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The details about the configuration aggregator, including information about source accounts, regions, and metadata of the aggregator. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigurationAggregator
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationAggregatorName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationAggregatorArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AccountAggregationSource[] AccountAggregationSources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationAggregationSource OrganizationAggregationSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedBy { get; set; }
	}
	
	/// <summary>
	/// A collection of accounts and regions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountAggregationSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] AccountIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllAwsRegions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AwsRegions { get; set; }
	}
	
	/// <summary>
	/// This object contains regions to set up the aggregator and an IAM role to retrieve organization details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationAggregationSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AwsRegions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllAwsRegions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeConfigurationAggregatorsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ConfigurationAggregatorNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
	}
	
	/// <summary>
	/// The output for the <a>DescribeConfigurationRecorderStatus</a> action, in JSON format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeConfigurationRecorderStatusResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationRecorderStatus[] ConfigurationRecordersStatus { get; set; }
	}
	
	/// <summary>
	/// <p>The current status of the configuration recorder.</p> <note> <p>For a detailed status of recording events over time, add your Config events to CloudWatch metrics and use CloudWatch metrics.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigurationRecorderStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastStartTime")]
		public System.DateTimeOffset LastStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastStopTime")]
		public System.DateTimeOffset LastStopTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recording")]
		public System.Nullable<System.Boolean> Recording { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastStatus")]
		public RecorderStatus LastStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastErrorCode")]
		public string LastErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastErrorMessage")]
		public string LastErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastStatusChangeTime")]
		public System.DateTimeOffset LastStatusChangeTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RecorderStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failure = 2,
	}
	
	/// <summary>
	/// The input for the <a>DescribeConfigurationRecorderStatus</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeConfigurationRecorderStatusRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ConfigurationRecorderNames { get; set; }
	}
	
	/// <summary>
	/// The output for the <a>DescribeConfigurationRecorders</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeConfigurationRecordersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationRecorder[] ConfigurationRecorders { get; set; }
	}
	
	/// <summary>
	/// Records configuration changes to specified resource types. For more information about the configuration recorder, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/stop-start-recorder.html"> <b>Managing the Configuration Recorder</b> </a> in the <i>Config Developer Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigurationRecorder
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleARN")]
		public string RoleARN { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recordingGroup")]
		public RecordingGroup RecordingGroup { get; set; }
	}
	
	/// <summary>
	/// <p>Specifies which resource types Config records for configuration changes. In the recording group, you specify whether you want to record all supported resource types or to include or exclude specific types of resources.</p> <p>By default, Config records configuration changes for all supported types of <i>Regional resources</i> that Config discovers in the Amazon Web Services Region in which it is running. Regional resources are tied to a Region and can be used only in that Region. Examples of Regional resources are Amazon EC2 instances and Amazon EBS volumes.</p> <p>You can also have Config record supported types of <i>global resources</i>. Global resources are not tied to a specific Region and can be used in all Regions. The global resource types that Config supports include IAM users, groups, roles, and customer managed policies.</p> <important> <p>Global resource types onboarded to Config recording after February 2022 will be recorded only in the service's home Region for the commercial partition and Amazon Web Services GovCloud (US-West) for the Amazon Web Services GovCloud (US) partition. You can view the Configuration Items for these new global resource types only in their home Region and Amazon Web Services GovCloud (US-West).</p> </important> <p>If you don't want Config to record all resources, you can specify which types of resources Config records with the <code>resourceTypes</code> parameter.</p> <p>For a list of supported resource types, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/resource-config-reference.html#supported-resources">Supported Resource Types</a> in the <i>Config developer guide</i>.</p> <p>For more information and a table of the Home Regions for Global Resource Types Onboarded after February 2022, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/select-resources.html">Selecting Which Resources Config Records</a> in the <i>Config developer guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecordingGroup
	{
		
		[System.Runtime.Serialization.DataMember(Name="allSupported")]
		public System.Nullable<System.Boolean> AllSupported { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includeGlobalResourceTypes")]
		public System.Nullable<System.Boolean> IncludeGlobalResourceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceTypes")]
		public ResourceType[] ResourceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exclusionByResourceTypes")]
		public ExclusionByResourceTypes ExclusionByResourceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recordingStrategy")]
		public RecordingStrategy RecordingStrategy { get; set; }
	}
	
	/// <summary>
	/// Specifies whether the configuration recorder excludes resource types from being recorded. Use the <code>resourceTypes</code> field to enter a comma-separated list of resource types to exclude as exemptions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExclusionByResourceTypes
	{
		
		[System.Runtime.Serialization.DataMember(Name="resourceTypes")]
		public ResourceType[] ResourceTypes { get; set; }
	}
	
	/// <summary>
	/// Specifies the recording strategy of the configuration recorder.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecordingStrategy
	{
		
		[System.Runtime.Serialization.DataMember(Name="useOnly")]
		public RecordingStrategyType UseOnly { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RecordingStrategyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL_SUPPORTED_RESOURCE_TYPES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUSION_BY_RESOURCE_TYPES = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUSION_BY_RESOURCE_TYPES = 2,
	}
	
	/// <summary>
	/// The input for the <a>DescribeConfigurationRecorders</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeConfigurationRecordersRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ConfigurationRecorderNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeConformancePackComplianceResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConformancePackName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConformancePackRuleCompliance[] ConformancePackRuleComplianceList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Compliance information of one or more Config rules within a conformance pack. You can filter using Config rule names and compliance types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConformancePackRuleCompliance
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigRuleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConformancePackComplianceType ComplianceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Controls { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeConformancePackComplianceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConformancePackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConformancePackComplianceFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Filters the conformance pack by compliance types and Config rule names.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConformancePackComplianceFilters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ConfigRuleNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConformancePackComplianceType ComplianceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NoSuchConfigRuleInConformancePackException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeConformancePackStatusResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConformancePackStatusDetail[] ConformancePackStatusDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Status details of a conformance pack.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConformancePackStatusDetail
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConformancePackName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConformancePackId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConformancePackArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConformancePackState ConformancePackState { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StackArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConformancePackStatusReason { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdateRequestedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdateCompletedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ConformancePackState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_COMPLETE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_IN_PROGRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_FAILED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeConformancePackStatusRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ConformancePackNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeConformancePacksResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConformancePackDetail[] ConformancePackDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Returns details of a conformance pack. A conformance pack is a collection of Config rules and remediation actions that can be easily deployed in an account and a region.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConformancePackDetail
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConformancePackName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConformancePackArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConformancePackId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeliveryS3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeliveryS3KeyPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConformancePackInputParameter[] ConformancePackInputParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdateRequestedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TemplateSSMDocumentDetails TemplateSSMDocumentDetails { get; set; }
	}
	
	/// <summary>
	/// Input parameters in the form of key-value pairs for the conformance pack, both of which you define. Keys can have a maximum character length of 255 characters, and values can have a maximum length of 4096 characters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConformancePackInputParameter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ParameterName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ParameterValue { get; set; }
	}
	
	/// <summary>
	/// <p>This API allows you to create a conformance pack template with an Amazon Web Services Systems Manager document (SSM document). To deploy a conformance pack using an SSM document, first create an SSM document with conformance pack content, and then provide the <code>DocumentName</code> in the <a href="https://docs.aws.amazon.com/config/latest/APIReference/API_PutConformancePack.html">PutConformancePack API</a>. You can also provide the <code>DocumentVersion</code>.</p> <p>The <code>TemplateSSMDocumentDetails</code> object contains the name of the SSM document and the version of the SSM document.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TemplateSSMDocumentDetails
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DocumentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DocumentVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeConformancePacksRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ConformancePackNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The output for the <a>DescribeDeliveryChannelStatus</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDeliveryChannelStatusResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeliveryChannelStatus[] DeliveryChannelsStatus { get; set; }
	}
	
	/// <summary>
	/// <p>The status of a specified delivery channel.</p> <p>Valid values: <code>Success</code> | <code>Failure</code> </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeliveryChannelStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configSnapshotDeliveryInfo")]
		public ConfigExportDeliveryInfo ConfigSnapshotDeliveryInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configHistoryDeliveryInfo")]
		public ConfigExportDeliveryInfo ConfigHistoryDeliveryInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configStreamDeliveryInfo")]
		public ConfigStreamDeliveryInfo ConfigStreamDeliveryInfo { get; set; }
	}
	
	/// <summary>
	/// Provides status of the delivery of the snapshot or the configuration history to the specified Amazon S3 bucket. Also provides the status of notifications about the Amazon S3 delivery to the specified Amazon SNS topic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigExportDeliveryInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="lastStatus")]
		public DeliveryStatus LastStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastErrorCode")]
		public string LastErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastErrorMessage")]
		public string LastErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastAttemptTime")]
		public System.DateTimeOffset LastAttemptTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastSuccessfulTime")]
		public System.DateTimeOffset LastSuccessfulTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextDeliveryTime")]
		public System.DateTimeOffset NextDeliveryTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DeliveryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failure = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Not_Applicable = 2,
	}
	
	/// <summary>
	/// A list that contains the status of the delivery of the configuration stream notification to the Amazon SNS topic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigStreamDeliveryInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="lastStatus")]
		public DeliveryStatus LastStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastErrorCode")]
		public string LastErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastErrorMessage")]
		public string LastErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastStatusChangeTime")]
		public System.DateTimeOffset LastStatusChangeTime { get; set; }
	}
	
	/// <summary>
	/// The input for the <a>DeliveryChannelStatus</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDeliveryChannelStatusRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DeliveryChannelNames { get; set; }
	}
	
	/// <summary>
	/// The output for the <a>DescribeDeliveryChannels</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDeliveryChannelsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeliveryChannel[] DeliveryChannels { get; set; }
	}
	
	/// <summary>
	/// The channel through which Config delivers notifications and updated configuration states.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeliveryChannel
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3BucketName")]
		public string S3BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3KeyPrefix")]
		public string S3KeyPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3KmsKeyArn")]
		public string S3KmsKeyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="snsTopicARN")]
		public string SnsTopicARN { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configSnapshotDeliveryProperties")]
		public ConfigSnapshotDeliveryProperties ConfigSnapshotDeliveryProperties { get; set; }
	}
	
	/// <summary>
	/// <p>Provides options for how often Config delivers configuration snapshots to the Amazon S3 bucket in your delivery channel.</p> <p>The frequency for a rule that triggers evaluations for your resources when Config delivers the configuration snapshot is set by one of two values, depending on which is less frequent:</p> <ul> <li> <p>The value for the <code>deliveryFrequency</code> parameter within the delivery channel configuration, which sets how often Config delivers configuration snapshots. This value also sets how often Config invokes evaluations for Config rules.</p> </li> <li> <p>The value for the <code>MaximumExecutionFrequency</code> parameter, which sets the maximum frequency with which Config invokes evaluations for the rule. For more information, see <a>ConfigRule</a>.</p> </li> </ul> <p>If the <code>deliveryFrequency</code> value is less frequent than the <code>MaximumExecutionFrequency</code> value for a rule, Config invokes the rule only as often as the <code>deliveryFrequency</code> value.</p> <ol> <li> <p>For example, you want your rule to run evaluations when Config delivers the configuration snapshot.</p> </li> <li> <p>You specify the <code>MaximumExecutionFrequency</code> value for <code>Six_Hours</code>. </p> </li> <li> <p>You then specify the delivery channel <code>deliveryFrequency</code> value for <code>TwentyFour_Hours</code>.</p> </li> <li> <p>Because the value for <code>deliveryFrequency</code> is less frequent than <code>MaximumExecutionFrequency</code>, Config invokes evaluations for the rule every 24 hours. </p> </li> </ol> <p>You should set the <code>MaximumExecutionFrequency</code> value to be at least as frequent as the <code>deliveryFrequency</code> value. You can view the <code>deliveryFrequency</code> value by using the <code>DescribeDeliveryChannnels</code> action.</p> <p>To update the <code>deliveryFrequency</code> with which Config delivers your configuration snapshots, use the <code>PutDeliveryChannel</code> action.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigSnapshotDeliveryProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="deliveryFrequency")]
		public MaximumExecutionFrequency DeliveryFrequency { get; set; }
	}
	
	/// <summary>
	/// The input for the <a>DescribeDeliveryChannels</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDeliveryChannelsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DeliveryChannelNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeOrganizationConfigRuleStatusesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationConfigRuleStatus[] OrganizationConfigRuleStatuses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Returns the status for an organization Config rule in an organization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationConfigRuleStatus
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OrganizationConfigRuleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OrganizationRuleStatus OrganizationRuleStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OrganizationRuleStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_SUCCESSFUL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_SUCCESSFUL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_IN_PROGRESS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_SUCCESSFUL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_IN_PROGRESS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeOrganizationConfigRuleStatusesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] OrganizationConfigRuleNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeOrganizationConfigRulesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationConfigRule[] OrganizationConfigRules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An organization Config rule that has information about Config rules that Config creates in member accounts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationConfigRule
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OrganizationConfigRuleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OrganizationConfigRuleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationManagedRuleMetadata OrganizationManagedRuleMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationCustomRuleMetadata OrganizationCustomRuleMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ExcludedAccounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationCustomPolicyRuleMetadataNoPolicy OrganizationCustomPolicyRuleMetadata { get; set; }
	}
	
	/// <summary>
	///  organization managed rule metadata such as resource type and ID of Amazon Web Services resource along with the rule identifier. It also provides the frequency with which you want Config to run evaluations for the rule if the trigger type is periodic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationManagedRuleMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RuleIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InputParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaximumExecutionFrequency MaximumExecutionFrequency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ResourceTypesScope { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceIdScope { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TagKeyScope { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TagValueScope { get; set; }
	}
	
	/// <summary>
	///  organization custom rule metadata such as resource type, resource ID of Amazon Web Services resource, Lambda function ARN, and organization trigger types that trigger Config to evaluate your Amazon Web Services resources against a rule. It also provides the frequency with which you want Config to run evaluations for the rule if the trigger type is periodic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationCustomRuleMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LambdaFunctionArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OrganizationConfigRuleTriggerType[] OrganizationConfigRuleTriggerTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InputParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaximumExecutionFrequency MaximumExecutionFrequency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ResourceTypesScope { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceIdScope { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TagKeyScope { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TagValueScope { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OrganizationConfigRuleTriggerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ConfigurationItemChangeNotification = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OversizedConfigurationItemChangeNotification = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScheduledNotification = 2,
	}
	
	/// <summary>
	///  metadata for your organization Config Custom Policy rule including the runtime system in use, which accounts have debug logging enabled, and other custom rule metadata such as resource type, resource ID of Amazon Web Services resource, and organization trigger types that trigger Config to evaluate Amazon Web Services resources against a rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationCustomPolicyRuleMetadataNoPolicy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationConfigRuleTriggerTypeNoSN[] OrganizationConfigRuleTriggerTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InputParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaximumExecutionFrequency MaximumExecutionFrequency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ResourceTypesScope { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceIdScope { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TagKeyScope { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TagValueScope { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyRuntime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DebugLogDeliveryAccounts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OrganizationConfigRuleTriggerTypeNoSN
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ConfigurationItemChangeNotification = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OversizedConfigurationItemChangeNotification = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeOrganizationConfigRulesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] OrganizationConfigRuleNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeOrganizationConformancePackStatusesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationConformancePackStatus[] OrganizationConformancePackStatuses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Returns the status for an organization conformance pack in an organization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationConformancePackStatus
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OrganizationConformancePackName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OrganizationRuleStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeOrganizationConformancePackStatusesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] OrganizationConformancePackNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeOrganizationConformancePacksResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationConformancePack[] OrganizationConformancePacks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An organization conformance pack that has information about conformance packs that Config creates in member accounts. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationConformancePack
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OrganizationConformancePackName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OrganizationConformancePackArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeliveryS3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeliveryS3KeyPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConformancePackInputParameter[] ConformancePackInputParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ExcludedAccounts { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeOrganizationConformancePacksRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] OrganizationConformancePackNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribePendingAggregationRequestsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PendingAggregationRequest[] PendingAggregationRequests { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An object that represents the account ID and region of an aggregator account that is requesting authorization but is not yet authorized.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PendingAggregationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RequesterAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequesterAwsRegion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribePendingAggregationRequestsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeRemediationConfigurationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RemediationConfiguration[] RemediationConfigurations { get; set; }
	}
	
	/// <summary>
	/// An object that represents the details about the remediation configuration that includes the remediation action, parameters, and data to execute the action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemediationConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigRuleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RemediationTargetType TargetType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RemediationParameters Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Automatic { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExecutionControls ExecutionControls { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaximumAutomaticAttempts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RetryAttemptSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedByService { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RemediationTargetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSM_DOCUMENT = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemediationParameters
	{
	}
	
	/// <summary>
	/// The controls that Config uses for executing remediations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExecutionControls
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SsmControls SsmControls { get; set; }
	}
	
	/// <summary>
	/// Amazon Web Services Systems Manager (SSM) specific remediation controls.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SsmControls
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ConcurrentExecutionRatePercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ErrorPercentage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeRemediationConfigurationsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ConfigRuleNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeRemediationExceptionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RemediationException[] RemediationExceptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An object that represents the details about the remediation exception. The details include the rule name, an explanation of an exception, the time when the exception will be deleted, the resource ID, and resource type. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemediationException
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigRuleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ExpirationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeRemediationExceptionsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigRuleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RemediationExceptionResourceKey[] ResourceKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeRemediationExecutionStatusResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RemediationExecutionStatus[] RemediationExecutionStatuses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Provides details of the current status of the invoked remediation action for that resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemediationExecutionStatus
	{
		
		/// <summary>
		/// The details that identify a resource within Config, including the resource type and resource ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceKey ResourceKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RemediationExecutionState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RemediationExecutionStep[] StepDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset InvocationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RemediationExecutionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	/// <summary>
	/// Name of the step from the SSM document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemediationExecutionStep
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RemediationExecutionStepState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StopTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RemediationExecutionStepState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeRemediationExecutionStatusRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigRuleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceKey[] ResourceKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeRetentionConfigurationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RetentionConfiguration[] RetentionConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An object with the name of the retention configuration and the retention period in days. The object stores the configuration for data retention in Config.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetentionConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int RetentionPeriodInDays { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeRetentionConfigurationsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] RetentionConfigurationNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAggregateComplianceDetailsByConfigRuleResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AggregateEvaluationResult[] AggregateEvaluationResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The details of an Config evaluation for an account ID and region in an aggregator. Provides the Amazon Web Services resource that was evaluated, the compliance of the resource, related time stamps, and supplementary information. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AggregateEvaluationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EvaluationResultIdentifier EvaluationResultIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceType ComplianceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ResultRecordedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ConfigRuleInvokedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Annotation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsRegion { get; set; }
	}
	
	/// <summary>
	/// Uniquely identifies an evaluation result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EvaluationResultIdentifier
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EvaluationResultQualifier EvaluationResultQualifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset OrderingTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceEvaluationId { get; set; }
	}
	
	/// <summary>
	/// Identifies an Config rule that evaluated an Amazon Web Services resource, and provides the type and ID of the resource that the rule evaluated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EvaluationResultQualifier
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigRuleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EvaluationMode EvaluationMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAggregateComplianceDetailsByConfigRuleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationAggregatorName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigRuleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AwsRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceType ComplianceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAggregateConfigRuleComplianceSummaryResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupByKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AggregateComplianceCount[] AggregateComplianceCounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Returns the number of compliant and noncompliant rules for one or more accounts and regions in an aggregator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AggregateComplianceCount
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceSummary ComplianceSummary { get; set; }
	}
	
	/// <summary>
	/// The number of Config rules or Amazon Web Services resources that are compliant and noncompliant.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComplianceSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceContributorCount CompliantResourceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceContributorCount NonCompliantResourceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ComplianceSummaryTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAggregateConfigRuleComplianceSummaryRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationAggregatorName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigRuleComplianceSummaryFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigRuleComplianceSummaryGroupKey GroupByKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Filters the results based on the account IDs and regions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigRuleComplianceSummaryFilters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsRegion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ConfigRuleComplianceSummaryGroupKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_ID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_REGION = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAggregateConformancePackComplianceSummaryResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AggregateConformancePackComplianceSummary[] AggregateConformancePackComplianceSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupByKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Provides a summary of compliance based on either account ID or region. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AggregateConformancePackComplianceSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AggregateConformancePackComplianceCount ComplianceSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
	}
	
	/// <summary>
	/// The number of conformance packs that are compliant and noncompliant.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AggregateConformancePackComplianceCount
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CompliantConformancePackCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NonCompliantConformancePackCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAggregateConformancePackComplianceSummaryRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationAggregatorName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AggregateConformancePackComplianceSummaryFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigRuleComplianceSummaryGroupKey GroupByKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Filters the results based on account ID and region. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AggregateConformancePackComplianceSummaryFilters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsRegion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAggregateDiscoveredResourceCountsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int TotalDiscoveredResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupByKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GroupedResourceCount[] GroupedResourceCounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The count of resources that are grouped by the group name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupedResourceCount
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ResourceCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAggregateDiscoveredResourceCountsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationAggregatorName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceCountFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceCountGroupKey GroupByKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Filters the resource count based on account ID, region, and resource type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceCountFilters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ResourceCountGroupKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_TYPE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_ID = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_REGION = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAggregateResourceConfigResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationItem ConfigurationItem { get; set; }
	}
	
	/// <summary>
	/// A list that contains detailed configurations of a specified resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigurationItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configurationItemCaptureTime")]
		public System.DateTimeOffset ConfigurationItemCaptureTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configurationItemStatus")]
		public ConfigurationItemStatus ConfigurationItemStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configurationStateId")]
		public string ConfigurationStateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configurationItemMD5Hash")]
		public string ConfigurationItemMD5Hash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="awsRegion")]
		public string AwsRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availabilityZone")]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceCreationTime")]
		public System.DateTimeOffset ResourceCreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relatedEvents")]
		public string[] RelatedEvents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public Relationship[] Relationships { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public string Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supplementaryConfiguration")]
		public SupplementaryConfiguration SupplementaryConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tags
	{
	}
	
	/// <summary>
	/// The relationship of the related resource to the main resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Relationship
	{
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationshipName")]
		public string RelationshipName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAggregateResourceConfigRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationAggregatorName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AggregateResourceIdentifier ResourceIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OversizedConfigurationItemException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotDiscoveredException
	{
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetComplianceDetailsByConfigRuleResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EvaluationResult[] EvaluationResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The details of an Config evaluation. Provides the Amazon Web Services resource that was evaluated, the compliance of the resource, related time stamps, and supplementary information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EvaluationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EvaluationResultIdentifier EvaluationResultIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceType ComplianceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ResultRecordedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ConfigRuleInvokedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Annotation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResultToken { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetComplianceDetailsByConfigRuleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigRuleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceType[] ComplianceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetComplianceDetailsByResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EvaluationResult[] EvaluationResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetComplianceDetailsByResourceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceType[] ComplianceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceEvaluationId { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetComplianceSummaryByConfigRuleResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceSummary ComplianceSummary { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetComplianceSummaryByResourceTypeResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceSummaryByResourceType[] ComplianceSummariesByResourceType { get; set; }
	}
	
	/// <summary>
	/// The number of Amazon Web Services resources of a specific type that are compliant or noncompliant, up to a maximum of 100 for each.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComplianceSummaryByResourceType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceSummary ComplianceSummary { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetComplianceSummaryByResourceTypeRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ResourceTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetConformancePackComplianceDetailsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConformancePackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConformancePackEvaluationResult[] ConformancePackRuleEvaluationResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The details of a conformance pack evaluation. Provides Config rule and Amazon Web Services resource type that was evaluated, the compliance of the conformance pack, related time stamps, and supplementary information. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConformancePackEvaluationResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConformancePackComplianceType ComplianceType { get; set; }
		
		/// <summary>
		/// Uniquely identifies an evaluation result.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EvaluationResultIdentifier EvaluationResultIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ConfigRuleInvokedTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ResultRecordedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Annotation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetConformancePackComplianceDetailsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConformancePackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConformancePackEvaluationFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Filters a conformance pack by Config rule names, compliance types, Amazon Web Services resource types, and resource IDs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConformancePackEvaluationFilters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ConfigRuleNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConformancePackComplianceType ComplianceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ResourceIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetConformancePackComplianceSummaryResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConformancePackComplianceSummary[] ConformancePackComplianceSummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summary includes the name and status of the conformance pack.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConformancePackComplianceSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConformancePackName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConformancePackComplianceType ConformancePackComplianceStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetConformancePackComplianceSummaryRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ConformancePackNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCustomRulePolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCustomRulePolicyRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigRuleName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDiscoveredResourceCountsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="totalDiscoveredResources")]
		public System.Nullable<System.Int32> TotalDiscoveredResources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceCounts")]
		public ResourceCount[] ResourceCounts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An object that contains the resource type and the number of resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceCount
	{
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDiscoveredResourceCountsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="resourceTypes")]
		public string[] ResourceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOrganizationConfigRuleDetailedStatusResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MemberAccountStatus[] OrganizationConfigRuleDetailedStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Organization Config rule creation or deletion status in each member account. This includes the name of the rule, the status, error code and error message when the rule creation or deletion failed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MemberAccountStatus
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigRuleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OrganizationRuleStatus MemberAccountRuleStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOrganizationConfigRuleDetailedStatusRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OrganizationConfigRuleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StatusDetailFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Status filter object to filter results based on specific member account ID or status type for an organization Config rule. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StatusDetailFilters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationRuleStatus MemberAccountRuleStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOrganizationConformancePackDetailedStatusResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationConformancePackDetailedStatus[] OrganizationConformancePackDetailedStatuses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Organization conformance pack creation or deletion status in each member account. This includes the name of the conformance pack, the status, error code and error message when the conformance pack creation or deletion failed. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationConformancePackDetailedStatus
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConformancePackName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OrganizationRuleStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOrganizationConformancePackDetailedStatusRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OrganizationConformancePackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationResourceDetailedStatusFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Status filter object to filter results based on specific member account ID or status type for an organization conformance pack.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationResourceDetailedStatusFilters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationRuleStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOrganizationCustomRulePolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOrganizationCustomRulePolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OrganizationConfigRuleName { get; set; }
	}
	
	/// <summary>
	/// The output for the <a>GetResourceConfigHistory</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetResourceConfigHistoryResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="configurationItems")]
		public ConfigurationItem[] ConfigurationItems { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The input for the <a>GetResourceConfigHistory</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetResourceConfigHistoryRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="laterTime")]
		public System.DateTimeOffset LaterTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="earlierTime")]
		public System.DateTimeOffset EarlierTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chronologicalOrder")]
		public ChronologicalOrder ChronologicalOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ChronologicalOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Reverse = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Forward = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidTimeRangeException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetResourceEvaluationSummaryResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceEvaluationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EvaluationMode EvaluationMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EvaluationStatus EvaluationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EvaluationStartTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceType Compliance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EvaluationContext EvaluationContext { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceDetails ResourceDetails { get; set; }
	}
	
	/// <summary>
	/// Returns status details of an evaluation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EvaluationStatus
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceEvaluationStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ResourceEvaluationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 2,
	}
	
	/// <summary>
	/// Use EvaluationContext to group independently initiated proactive resource evaluations. For example, CFN Stack. If you want to check just a resource definition, you do not need to provide evaluation context.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EvaluationContext
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EvaluationContextIdentifier { get; set; }
	}
	
	/// <summary>
	/// Returns information about the resource being evaluated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceDetails
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceConfigurationSchemaType ResourceConfigurationSchemaType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ResourceConfigurationSchemaType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CFN_RESOURCE_SCHEMA = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetResourceEvaluationSummaryRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceEvaluationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetStoredQueryResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StoredQuery StoredQuery { get; set; }
	}
	
	/// <summary>
	/// Provides the details of a stored query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StoredQuery
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string QueryId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string QueryArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string QueryName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Expression { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetStoredQueryRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string QueryName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAggregateDiscoveredResourcesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AggregateResourceIdentifier[] ResourceIdentifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAggregateDiscoveredResourcesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationAggregatorName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Filters the results by resource account ID, region, resource ID, and resource name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceFilters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListConformancePackComplianceScoresResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConformancePackComplianceScore[] ConformancePackComplianceScores { get; set; }
	}
	
	/// <summary>
	/// A compliance score is the percentage of the number of compliant rule-resource combinations in a conformance pack compared to the number of total possible rule-resource combinations in the conformance pack. This metric provides you with a high-level view of the compliance state of your conformance packs. You can use it to identify, investigate, and understand the level of compliance in your conformance packs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConformancePackComplianceScore
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Score { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConformancePackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListConformancePackComplianceScoresRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConformancePackComplianceScoresFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A list of filters to apply to the conformance pack compliance score result set. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConformancePackComplianceScoresFilters
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ConformancePackNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASCENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCENDING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCORE = 0,
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDiscoveredResourcesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="resourceIdentifiers")]
		public ResourceIdentifier[] ResourceIdentifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The details that identify a resource that is discovered by Config, including the resource type, ID, and (if available) the custom resource name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceIdentifier
	{
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceDeletionTime")]
		public System.DateTimeOffset ResourceDeletionTime { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDiscoveredResourcesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceIds")]
		public string[] ResourceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includeDeletedResources")]
		public System.Nullable<System.Boolean> IncludeDeletedResources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListResourceEvaluationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceEvaluation[] ResourceEvaluations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Returns details of a resource evaluation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceEvaluation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceEvaluationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EvaluationMode EvaluationMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EvaluationStartTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListResourceEvaluationsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceEvaluationFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Returns details of a resource evaluation based on the selected filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceEvaluationFilters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EvaluationMode EvaluationMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TimeWindow TimeWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EvaluationContextIdentifier { get; set; }
	}
	
	/// <summary>
	/// Filters evaluation results based on start and end times.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimeWindow
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListStoredQueriesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StoredQueryMetadata[] StoredQueryMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Returns details of a specific query. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StoredQueryMetadata
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string QueryId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string QueryArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string QueryName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListStoredQueriesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The tags for the resource. The metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tag
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutAggregationAuthorizationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AggregationAuthorization AggregationAuthorization { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutAggregationAuthorizationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizedAccountId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizedAwsRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutConfigRuleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConfigRule ConfigRule { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MaxNumberOfConfigRulesExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutConfigurationAggregatorResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationAggregator ConfigurationAggregator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutConfigurationAggregatorRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationAggregatorName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AccountAggregationSource[] AccountAggregationSources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationAggregationSource OrganizationAggregationSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidRoleException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NoAvailableOrganizationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationAllFeaturesNotEnabledException
	{
	}
	
	/// <summary>
	/// The input for the <a>PutConfigurationRecorder</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutConfigurationRecorderRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationRecorder ConfigurationRecorder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MaxNumberOfConfigurationRecordersExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidConfigurationRecorderNameException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidRecordingGroupException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutConformancePackResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConformancePackArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutConformancePackRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConformancePackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateS3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateBody { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeliveryS3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeliveryS3KeyPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConformancePackInputParameter[] ConformancePackInputParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TemplateSSMDocumentDetails TemplateSSMDocumentDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConformancePackTemplateValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MaxNumberOfConformancePacksExceededException
	{
	}
	
	/// <summary>
	/// The input for the <a>PutDeliveryChannel</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutDeliveryChannelRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeliveryChannel DeliveryChannel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MaxNumberOfDeliveryChannelsExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidDeliveryChannelNameException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NoSuchBucketException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidS3KeyPrefixException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidS3KmsKeyArnException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidSNSTopicARNException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InsufficientDeliveryPolicyException
	{
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutEvaluationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Evaluation[] FailedEvaluations { get; set; }
	}
	
	/// <summary>
	/// Identifies an Amazon Web Services resource and indicates whether it complies with the Config rule that it was evaluated against.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Evaluation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ComplianceResourceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ComplianceResourceId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ComplianceType ComplianceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Annotation { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset OrderingTimestamp { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutEvaluationsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Evaluation[] Evaluations { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResultToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TestMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidResultTokenException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutExternalEvaluationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutExternalEvaluationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigRuleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ExternalEvaluation ExternalEvaluation { get; set; }
	}
	
	/// <summary>
	/// Identifies an Amazon Web Services resource and indicates whether it complies with the Config rule that it was evaluated against.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExternalEvaluation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ComplianceResourceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ComplianceResourceId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ComplianceType ComplianceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Annotation { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset OrderingTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutOrganizationConfigRuleResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OrganizationConfigRuleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutOrganizationConfigRuleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OrganizationConfigRuleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationManagedRuleMetadata OrganizationManagedRuleMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationCustomRuleMetadata OrganizationCustomRuleMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ExcludedAccounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationCustomPolicyRuleMetadata OrganizationCustomPolicyRuleMetadata { get; set; }
	}
	
	/// <summary>
	/// An object that specifies metadata for your organization's Config Custom Policy rule. The metadata includes the runtime system in use, which accounts have debug logging enabled, and other custom rule metadata, such as resource type, resource ID of Amazon Web Services resource, and organization trigger types that initiate Config to evaluate Amazon Web Services resources against a rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationCustomPolicyRuleMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationConfigRuleTriggerTypeNoSN[] OrganizationConfigRuleTriggerTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InputParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaximumExecutionFrequency MaximumExecutionFrequency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ResourceTypesScope { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceIdScope { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TagKeyScope { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TagValueScope { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyRuntime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyText { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DebugLogDeliveryAccounts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MaxNumberOfOrganizationConfigRulesExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutOrganizationConformancePackResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OrganizationConformancePackArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutOrganizationConformancePackRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OrganizationConformancePackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateS3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateBody { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeliveryS3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeliveryS3KeyPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConformancePackInputParameter[] ConformancePackInputParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ExcludedAccounts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MaxNumberOfOrganizationConformancePacksExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationConformancePackTemplateValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutRemediationConfigurationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FailedRemediationBatch[] FailedBatches { get; set; }
	}
	
	/// <summary>
	/// List of each of the failed remediations with specific reasons.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FailedRemediationBatch
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RemediationConfiguration[] FailedItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutRemediationConfigurationsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RemediationConfiguration[] RemediationConfigurations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutRemediationExceptionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FailedRemediationExceptionBatch[] FailedBatches { get; set; }
	}
	
	/// <summary>
	/// List of each of the failed remediation exceptions with specific reasons.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FailedRemediationExceptionBatch
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RemediationException[] FailedItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutRemediationExceptionsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigRuleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RemediationExceptionResourceKey[] ResourceKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ExpirationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutResourceConfigRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemaVersionId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MaxActiveResourcesExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutRetentionConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RetentionConfiguration RetentionConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutRetentionConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int RetentionPeriodInDays { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MaxNumberOfRetentionConfigurationsExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutStoredQueryResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string QueryArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutStoredQueryRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StoredQuery StoredQuery { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TooManyTagsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceConcurrentModificationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SelectAggregateResourceConfigResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Results { get; set; }
		
		/// <summary>
		/// Details about the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public QueryInfo QueryInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Details about the query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QueryInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FieldInfo[] SelectFields { get; set; }
	}
	
	/// <summary>
	/// Details about the fields such as name of the field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FieldInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SelectAggregateResourceConfigRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Expression { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationAggregatorName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidExpressionException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SelectResourceConfigResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public QueryInfo QueryInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SelectResourceConfigRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Expression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The output when you start the evaluation for the specified Config rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartConfigRulesEvaluationResponse
	{
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartConfigRulesEvaluationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ConfigRuleNames { get; set; }
	}
	
	/// <summary>
	/// The input for the <a>StartConfigurationRecorder</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartConfigurationRecorderRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationRecorderName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NoAvailableDeliveryChannelException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartRemediationExecutionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceKey[] FailedItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartRemediationExecutionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigRuleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceKey[] ResourceKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartResourceEvaluationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceEvaluationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartResourceEvaluationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceDetails ResourceDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EvaluationContext EvaluationContext { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EvaluationMode EvaluationMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EvaluationTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IdempotentParameterMismatch
	{
	}
	
	/// <summary>
	/// The input for the <a>StopConfigurationRecorder</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopConfigurationRecorderRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationRecorderName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AggregateConformancePackComplianceSummaryGroupKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_ID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_REGION = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MemberAccountRuleStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_SUCCESSFUL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_SUCCESSFUL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_IN_PROGRESS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_SUCCESSFUL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_IN_PROGRESS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OrganizationResourceDetailedStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_SUCCESSFUL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_SUCCESSFUL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_IN_PROGRESS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_SUCCESSFUL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_IN_PROGRESS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OrganizationResourceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_SUCCESSFUL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_SUCCESSFUL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_IN_PROGRESS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_SUCCESSFUL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_IN_PROGRESS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 8,
	}
	
	/// <summary>
	/// The dynamic value of the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceValue
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceValueType Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ResourceValueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_ID = 0,
	}
	
	/// <summary>
	/// The static value of the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StaticValue
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// The value is either a dynamic (resource) value or a static value. You must select either a dynamic value or a static value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemediationParameterValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceValue ResourceValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StaticValue StaticValue { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Returns the current configuration items for resources that are present in your Config aggregator. The operation also returns a list of resources that are not processed in the current request. If there are no unprocessed resources, the operation returns an empty <code>unprocessedResourceIdentifiers</code> list. </p> <note> <ul> <li> <p>The API does not return results for deleted resources.</p> </li> <li> <p> The API does not return tags and relationships.</p> </li> </ul> </note>
		/// BatchGetAggregateResourceConfig #X-Amz-Target=StarlingDoveService.BatchGetAggregateResourceConfig
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchGetAggregateResourceConfigResponse> BatchGetAggregateResourceConfigAsync(BatchGetAggregateResourceConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.BatchGetAggregateResourceConfig";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchGetAggregateResourceConfigResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the <code>BaseConfigurationItem</code> for one or more requested resources. The operation also returns a list of resources that are not processed in the current request. If there are no unprocessed resources, the operation returns an empty unprocessedResourceKeys list. </p> <note> <ul> <li> <p>The API does not return results for deleted resources.</p> </li> <li> <p> The API does not return any tags for the requested resources. This information is filtered out of the supplementaryConfiguration section of the API response.</p> </li> </ul> </note>
		/// BatchGetResourceConfig #X-Amz-Target=StarlingDoveService.BatchGetResourceConfig
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchGetResourceConfigResponse> BatchGetResourceConfigAsync(BatchGetResourceConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.BatchGetResourceConfig";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchGetResourceConfigResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the authorization granted to the specified configuration aggregator account in a specified region.
		/// DeleteAggregationAuthorization #X-Amz-Target=StarlingDoveService.DeleteAggregationAuthorization
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteAggregationAuthorizationAsync(DeleteAggregationAuthorizationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DeleteAggregationAuthorization";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified Config rule and all of its evaluation results.</p> <p>Config sets the state of a rule to <code>DELETING</code> until the deletion is complete. You cannot update a rule while it is in this state. If you make a <code>PutConfigRule</code> or <code>DeleteConfigRule</code> request for the rule, you will receive a <code>ResourceInUseException</code>.</p> <p>You can check the state of a rule by using the <code>DescribeConfigRules</code> request.</p>
		/// DeleteConfigRule #X-Amz-Target=StarlingDoveService.DeleteConfigRule
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteConfigRuleAsync(DeleteConfigRuleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DeleteConfigRule";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified configuration aggregator and the aggregated data associated with the aggregator.
		/// DeleteConfigurationAggregator #X-Amz-Target=StarlingDoveService.DeleteConfigurationAggregator
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteConfigurationAggregatorAsync(DeleteConfigurationAggregatorRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DeleteConfigurationAggregator";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the configuration recorder.</p> <p>After the configuration recorder is deleted, Config will not record resource configuration changes until you create a new configuration recorder.</p> <p>This action does not delete the configuration information that was previously recorded. You will be able to access the previously recorded information by using the <code>GetResourceConfigHistory</code> action, but you will not be able to access this information in the Config console until you create a new configuration recorder.</p>
		/// DeleteConfigurationRecorder #X-Amz-Target=StarlingDoveService.DeleteConfigurationRecorder
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteConfigurationRecorderAsync(DeleteConfigurationRecorderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DeleteConfigurationRecorder";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified conformance pack and all the Config rules, remediation actions, and all evaluation results within that conformance pack.</p> <p>Config sets the conformance pack to <code>DELETE_IN_PROGRESS</code> until the deletion is complete. You cannot update a conformance pack while it is in this state.</p>
		/// DeleteConformancePack #X-Amz-Target=StarlingDoveService.DeleteConformancePack
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteConformancePackAsync(DeleteConformancePackRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DeleteConformancePack";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the delivery channel.</p> <p>Before you can delete the delivery channel, you must stop the configuration recorder by using the <a>StopConfigurationRecorder</a> action.</p>
		/// DeleteDeliveryChannel #X-Amz-Target=StarlingDoveService.DeleteDeliveryChannel
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteDeliveryChannelAsync(DeleteDeliveryChannelRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DeleteDeliveryChannel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the evaluation results for the specified Config rule. You can specify one Config rule per request. After you delete the evaluation results, you can call the <a>StartConfigRulesEvaluation</a> API to start evaluating your Amazon Web Services resources against the rule.
		/// DeleteEvaluationResults #X-Amz-Target=StarlingDoveService.DeleteEvaluationResults
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteEvaluationResultsResponse> DeleteEvaluationResultsAsync(DeleteEvaluationResultsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DeleteEvaluationResults";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteEvaluationResultsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified organization Config rule and all of its evaluation results from all member accounts in that organization. </p> <p>Only a management account and a delegated administrator account can delete an organization Config rule. When calling this API with a delegated administrator, you must ensure Organizations <code>ListDelegatedAdministrator</code> permissions are added.</p> <p>Config sets the state of a rule to DELETE_IN_PROGRESS until the deletion is complete. You cannot update a rule while it is in this state.</p>
		/// DeleteOrganizationConfigRule #X-Amz-Target=StarlingDoveService.DeleteOrganizationConfigRule
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteOrganizationConfigRuleAsync(DeleteOrganizationConfigRuleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DeleteOrganizationConfigRule";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified organization conformance pack and all of the Config rules and remediation actions from all member accounts in that organization. </p> <p> Only a management account or a delegated administrator account can delete an organization conformance pack. When calling this API with a delegated administrator, you must ensure Organizations <code>ListDelegatedAdministrator</code> permissions are added.</p> <p>Config sets the state of a conformance pack to DELETE_IN_PROGRESS until the deletion is complete. You cannot update a conformance pack while it is in this state. </p>
		/// DeleteOrganizationConformancePack #X-Amz-Target=StarlingDoveService.DeleteOrganizationConformancePack
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteOrganizationConformancePackAsync(DeleteOrganizationConformancePackRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DeleteOrganizationConformancePack";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes pending authorization requests for a specified aggregator account in a specified region.
		/// DeletePendingAggregationRequest #X-Amz-Target=StarlingDoveService.DeletePendingAggregationRequest
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeletePendingAggregationRequestAsync(DeletePendingAggregationRequestRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DeletePendingAggregationRequest";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the remediation configuration.
		/// DeleteRemediationConfiguration #X-Amz-Target=StarlingDoveService.DeleteRemediationConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteRemediationConfigurationResponse> DeleteRemediationConfigurationAsync(DeleteRemediationConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DeleteRemediationConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteRemediationConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes one or more remediation exceptions mentioned in the resource keys.</p> <note> <p>Config generates a remediation exception when a problem occurs executing a remediation action to a specific resource. Remediation exceptions blocks auto-remediation until the exception is cleared.</p> </note>
		/// DeleteRemediationExceptions #X-Amz-Target=StarlingDoveService.DeleteRemediationExceptions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteRemediationExceptionsResponse> DeleteRemediationExceptionsAsync(DeleteRemediationExceptionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DeleteRemediationExceptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteRemediationExceptionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Records the configuration state for a custom resource that has been deleted. This API records a new ConfigurationItem with a ResourceDeleted status. You can retrieve the ConfigurationItems recorded for this resource in your Config History.
		/// DeleteResourceConfig #X-Amz-Target=StarlingDoveService.DeleteResourceConfig
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteResourceConfigAsync(DeleteResourceConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DeleteResourceConfig";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the retention configuration.
		/// DeleteRetentionConfiguration #X-Amz-Target=StarlingDoveService.DeleteRetentionConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteRetentionConfigurationAsync(DeleteRetentionConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DeleteRetentionConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the stored query for a single Amazon Web Services account and a single Amazon Web Services Region.
		/// DeleteStoredQuery #X-Amz-Target=StarlingDoveService.DeleteStoredQuery
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteStoredQueryResponse> DeleteStoredQueryAsync(DeleteStoredQueryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DeleteStoredQuery";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteStoredQueryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Schedules delivery of a configuration snapshot to the Amazon S3 bucket in the specified delivery channel. After the delivery has started, Config sends the following notifications using an Amazon SNS topic that you have specified.</p> <ul> <li> <p>Notification of the start of the delivery.</p> </li> <li> <p>Notification of the completion of the delivery, if the delivery was successfully completed.</p> </li> <li> <p>Notification of delivery failure, if the delivery failed.</p> </li> </ul>
		/// DeliverConfigSnapshot #X-Amz-Target=StarlingDoveService.DeliverConfigSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeliverConfigSnapshotResponse> DeliverConfigSnapshotAsync(DeliverConfigSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DeliverConfigSnapshot";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeliverConfigSnapshotResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of compliant and noncompliant rules with the number of resources for compliant and noncompliant rules. Does not display rules that do not have compliance results. </p> <note> <p>The results can return an empty result page, but if you have a <code>nextToken</code>, the results are displayed on the next page.</p> </note>
		/// DescribeAggregateComplianceByConfigRules #X-Amz-Target=StarlingDoveService.DescribeAggregateComplianceByConfigRules
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeAggregateComplianceByConfigRulesResponse> DescribeAggregateComplianceByConfigRulesAsync(string Limit, string NextToken, DescribeAggregateComplianceByConfigRulesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DescribeAggregateComplianceByConfigRules?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeAggregateComplianceByConfigRulesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of the conformance packs and their associated compliance status with the count of compliant and noncompliant Config rules within each conformance pack. Also returns the total rule count which includes compliant rules, noncompliant rules, and rules that cannot be evaluated due to insufficient data.</p> <note> <p>The results can return an empty result page, but if you have a <code>nextToken</code>, the results are displayed on the next page.</p> </note>
		/// DescribeAggregateComplianceByConformancePacks #X-Amz-Target=StarlingDoveService.DescribeAggregateComplianceByConformancePacks
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeAggregateComplianceByConformancePacksResponse> DescribeAggregateComplianceByConformancePacksAsync(string Limit, string NextToken, DescribeAggregateComplianceByConformancePacksRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DescribeAggregateComplianceByConformancePacks?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeAggregateComplianceByConformancePacksResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of authorizations granted to various aggregator accounts and regions.
		/// DescribeAggregationAuthorizations #X-Amz-Target=StarlingDoveService.DescribeAggregationAuthorizations
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeAggregationAuthorizationsResponse> DescribeAggregationAuthorizationsAsync(string Limit, string NextToken, DescribeAggregationAuthorizationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DescribeAggregationAuthorizations?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeAggregationAuthorizationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Indicates whether the specified Config rules are compliant. If a rule is noncompliant, this action returns the number of Amazon Web Services resources that do not comply with the rule.</p> <p>A rule is compliant if all of the evaluated resources comply with it. It is noncompliant if any of these resources do not comply.</p> <p>If Config has no current evaluation results for the rule, it returns <code>INSUFFICIENT_DATA</code>. This result might indicate one of the following conditions:</p> <ul> <li> <p>Config has never invoked an evaluation for the rule. To check whether it has, use the <code>DescribeConfigRuleEvaluationStatus</code> action to get the <code>LastSuccessfulInvocationTime</code> and <code>LastFailedInvocationTime</code>.</p> </li> <li> <p>The rule's Lambda function is failing to send evaluation results to Config. Verify that the role you assigned to your configuration recorder includes the <code>config:PutEvaluations</code> permission. If the rule is a custom rule, verify that the Lambda execution role includes the <code>config:PutEvaluations</code> permission.</p> </li> <li> <p>The rule's Lambda function has returned <code>NOT_APPLICABLE</code> for all evaluation results. This can occur if the resources were deleted or removed from the rule's scope.</p> </li> </ul>
		/// DescribeComplianceByConfigRule #X-Amz-Target=StarlingDoveService.DescribeComplianceByConfigRule
		/// </summary>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeComplianceByConfigRuleResponse> DescribeComplianceByConfigRuleAsync(string NextToken, DescribeComplianceByConfigRuleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DescribeComplianceByConfigRule?NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeComplianceByConfigRuleResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Indicates whether the specified Amazon Web Services resources are compliant. If a resource is noncompliant, this action returns the number of Config rules that the resource does not comply with.</p> <p>A resource is compliant if it complies with all the Config rules that evaluate it. It is noncompliant if it does not comply with one or more of these rules.</p> <p>If Config has no current evaluation results for the resource, it returns <code>INSUFFICIENT_DATA</code>. This result might indicate one of the following conditions about the rules that evaluate the resource:</p> <ul> <li> <p>Config has never invoked an evaluation for the rule. To check whether it has, use the <code>DescribeConfigRuleEvaluationStatus</code> action to get the <code>LastSuccessfulInvocationTime</code> and <code>LastFailedInvocationTime</code>.</p> </li> <li> <p>The rule's Lambda function is failing to send evaluation results to Config. Verify that the role that you assigned to your configuration recorder includes the <code>config:PutEvaluations</code> permission. If the rule is a custom rule, verify that the Lambda execution role includes the <code>config:PutEvaluations</code> permission.</p> </li> <li> <p>The rule's Lambda function has returned <code>NOT_APPLICABLE</code> for all evaluation results. This can occur if the resources were deleted or removed from the rule's scope.</p> </li> </ul>
		/// DescribeComplianceByResource #X-Amz-Target=StarlingDoveService.DescribeComplianceByResource
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeComplianceByResourceResponse> DescribeComplianceByResourceAsync(string Limit, string NextToken, DescribeComplianceByResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DescribeComplianceByResource?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeComplianceByResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns status information for each of your Config managed rules. The status includes information such as the last time Config invoked the rule, the last time Config failed to invoke the rule, and the related error for the last failure.
		/// DescribeConfigRuleEvaluationStatus #X-Amz-Target=StarlingDoveService.DescribeConfigRuleEvaluationStatus
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeConfigRuleEvaluationStatusResponse> DescribeConfigRuleEvaluationStatusAsync(string Limit, string NextToken, DescribeConfigRuleEvaluationStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DescribeConfigRuleEvaluationStatus?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeConfigRuleEvaluationStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns details about your Config rules.
		/// DescribeConfigRules #X-Amz-Target=StarlingDoveService.DescribeConfigRules
		/// </summary>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeConfigRulesResponse> DescribeConfigRulesAsync(string NextToken, DescribeConfigRulesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DescribeConfigRules?NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeConfigRulesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns status information for sources within an aggregator. The status includes information about the last time Config verified authorization between the source account and an aggregator account. In case of a failure, the status contains the related error code or message.
		/// DescribeConfigurationAggregatorSourcesStatus #X-Amz-Target=StarlingDoveService.DescribeConfigurationAggregatorSourcesStatus
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeConfigurationAggregatorSourcesStatusResponse> DescribeConfigurationAggregatorSourcesStatusAsync(string Limit, string NextToken, DescribeConfigurationAggregatorSourcesStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DescribeConfigurationAggregatorSourcesStatus?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeConfigurationAggregatorSourcesStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the details of one or more configuration aggregators. If the configuration aggregator is not specified, this action returns the details for all the configuration aggregators associated with the account.
		/// DescribeConfigurationAggregators #X-Amz-Target=StarlingDoveService.DescribeConfigurationAggregators
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeConfigurationAggregatorsResponse> DescribeConfigurationAggregatorsAsync(string Limit, string NextToken, DescribeConfigurationAggregatorsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DescribeConfigurationAggregators?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeConfigurationAggregatorsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the current status of the specified configuration recorder as well as the status of the last recording event for the recorder. If a configuration recorder is not specified, this action returns the status of all configuration recorders associated with the account.</p> <note> <p>&gt;You can specify only one configuration recorder for each Amazon Web Services Region for each account. For a detailed status of recording events over time, add your Config events to Amazon CloudWatch metrics and use CloudWatch metrics.</p> </note>
		/// DescribeConfigurationRecorderStatus #X-Amz-Target=StarlingDoveService.DescribeConfigurationRecorderStatus
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeConfigurationRecorderStatusResponse> DescribeConfigurationRecorderStatusAsync(DescribeConfigurationRecorderStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DescribeConfigurationRecorderStatus";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeConfigurationRecorderStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the details for the specified configuration recorders. If the configuration recorder is not specified, this action returns the details for all configuration recorders associated with the account.</p> <note> <p>You can specify only one configuration recorder for each Amazon Web Services Region for each account.</p> </note>
		/// DescribeConfigurationRecorders #X-Amz-Target=StarlingDoveService.DescribeConfigurationRecorders
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeConfigurationRecordersResponse> DescribeConfigurationRecordersAsync(DescribeConfigurationRecordersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DescribeConfigurationRecorders";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeConfigurationRecordersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns compliance details for each rule in that conformance pack.</p> <note> <p>You must provide exact rule names.</p> </note>
		/// DescribeConformancePackCompliance #X-Amz-Target=StarlingDoveService.DescribeConformancePackCompliance
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeConformancePackComplianceResponse> DescribeConformancePackComplianceAsync(string Limit, string NextToken, DescribeConformancePackComplianceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DescribeConformancePackCompliance?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeConformancePackComplianceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Provides one or more conformance packs deployment status.</p> <note> <p>If there are no conformance packs then you will see an empty result.</p> </note>
		/// DescribeConformancePackStatus #X-Amz-Target=StarlingDoveService.DescribeConformancePackStatus
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeConformancePackStatusResponse> DescribeConformancePackStatusAsync(string Limit, string NextToken, DescribeConformancePackStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DescribeConformancePackStatus?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeConformancePackStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of one or more conformance packs.
		/// DescribeConformancePacks #X-Amz-Target=StarlingDoveService.DescribeConformancePacks
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeConformancePacksResponse> DescribeConformancePacksAsync(string Limit, string NextToken, DescribeConformancePacksRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DescribeConformancePacks?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeConformancePacksResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the current status of the specified delivery channel. If a delivery channel is not specified, this action returns the current status of all delivery channels associated with the account.</p> <note> <p>Currently, you can specify only one delivery channel per region in your account.</p> </note>
		/// DescribeDeliveryChannelStatus #X-Amz-Target=StarlingDoveService.DescribeDeliveryChannelStatus
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeDeliveryChannelStatusResponse> DescribeDeliveryChannelStatusAsync(DescribeDeliveryChannelStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DescribeDeliveryChannelStatus";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeDeliveryChannelStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns details about the specified delivery channel. If a delivery channel is not specified, this action returns the details of all delivery channels associated with the account.</p> <note> <p>Currently, you can specify only one delivery channel per region in your account.</p> </note>
		/// DescribeDeliveryChannels #X-Amz-Target=StarlingDoveService.DescribeDeliveryChannels
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeDeliveryChannelsResponse> DescribeDeliveryChannelsAsync(DescribeDeliveryChannelsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DescribeDeliveryChannels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeDeliveryChannelsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Provides organization Config rule deployment status for an organization.</p> <note> <p>The status is not considered successful until organization Config rule is successfully deployed in all the member accounts with an exception of excluded accounts.</p> <p>When you specify the limit and the next token, you receive a paginated response. Limit and next token are not applicable if you specify organization Config rule names. It is only applicable, when you request all the organization Config rules.</p> </note>
		/// DescribeOrganizationConfigRuleStatuses #X-Amz-Target=StarlingDoveService.DescribeOrganizationConfigRuleStatuses
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeOrganizationConfigRuleStatusesResponse> DescribeOrganizationConfigRuleStatusesAsync(string Limit, string NextToken, DescribeOrganizationConfigRuleStatusesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DescribeOrganizationConfigRuleStatuses?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeOrganizationConfigRuleStatusesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of organization Config rules. </p> <note> <p>When you specify the limit and the next token, you receive a paginated response.</p> <p>Limit and next token are not applicable if you specify organization Config rule names. It is only applicable, when you request all the organization Config rules.</p> <p> <i>For accounts within an organzation</i> </p> <p>If you deploy an organizational rule or conformance pack in an organization administrator account, and then establish a delegated administrator and deploy an organizational rule or conformance pack in the delegated administrator account, you won't be able to see the organizational rule or conformance pack in the organization administrator account from the delegated administrator account or see the organizational rule or conformance pack in the delegated administrator account from organization administrator account. The <code>DescribeOrganizationConfigRules</code> and <code>DescribeOrganizationConformancePacks</code> APIs can only see and interact with the organization-related resource that were deployed from within the account calling those APIs.</p> </note>
		/// DescribeOrganizationConfigRules #X-Amz-Target=StarlingDoveService.DescribeOrganizationConfigRules
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeOrganizationConfigRulesResponse> DescribeOrganizationConfigRulesAsync(string Limit, string NextToken, DescribeOrganizationConfigRulesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DescribeOrganizationConfigRules?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeOrganizationConfigRulesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Provides organization conformance pack deployment status for an organization. </p> <note> <p>The status is not considered successful until organization conformance pack is successfully deployed in all the member accounts with an exception of excluded accounts.</p> <p>When you specify the limit and the next token, you receive a paginated response. Limit and next token are not applicable if you specify organization conformance pack names. They are only applicable, when you request all the organization conformance packs.</p> </note>
		/// DescribeOrganizationConformancePackStatuses #X-Amz-Target=StarlingDoveService.DescribeOrganizationConformancePackStatuses
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeOrganizationConformancePackStatusesResponse> DescribeOrganizationConformancePackStatusesAsync(string Limit, string NextToken, DescribeOrganizationConformancePackStatusesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DescribeOrganizationConformancePackStatuses?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeOrganizationConformancePackStatusesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of organization conformance packs. </p> <note> <p>When you specify the limit and the next token, you receive a paginated response. </p> <p>Limit and next token are not applicable if you specify organization conformance packs names. They are only applicable, when you request all the organization conformance packs. </p> <p> <i>For accounts within an organzation</i> </p> <p>If you deploy an organizational rule or conformance pack in an organization administrator account, and then establish a delegated administrator and deploy an organizational rule or conformance pack in the delegated administrator account, you won't be able to see the organizational rule or conformance pack in the organization administrator account from the delegated administrator account or see the organizational rule or conformance pack in the delegated administrator account from organization administrator account. The <code>DescribeOrganizationConfigRules</code> and <code>DescribeOrganizationConformancePacks</code> APIs can only see and interact with the organization-related resource that were deployed from within the account calling those APIs.</p> </note>
		/// DescribeOrganizationConformancePacks #X-Amz-Target=StarlingDoveService.DescribeOrganizationConformancePacks
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeOrganizationConformancePacksResponse> DescribeOrganizationConformancePacksAsync(string Limit, string NextToken, DescribeOrganizationConformancePacksRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DescribeOrganizationConformancePacks?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeOrganizationConformancePacksResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all pending aggregation requests.
		/// DescribePendingAggregationRequests #X-Amz-Target=StarlingDoveService.DescribePendingAggregationRequests
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribePendingAggregationRequestsResponse> DescribePendingAggregationRequestsAsync(string Limit, string NextToken, DescribePendingAggregationRequestsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DescribePendingAggregationRequests?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribePendingAggregationRequestsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the details of one or more remediation configurations.
		/// DescribeRemediationConfigurations #X-Amz-Target=StarlingDoveService.DescribeRemediationConfigurations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeRemediationConfigurationsResponse> DescribeRemediationConfigurationsAsync(DescribeRemediationConfigurationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DescribeRemediationConfigurations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeRemediationConfigurationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the details of one or more remediation exceptions. A detailed view of a remediation exception for a set of resources that includes an explanation of an exception and the time when the exception will be deleted. When you specify the limit and the next token, you receive a paginated response. </p> <note> <p>Config generates a remediation exception when a problem occurs executing a remediation action to a specific resource. Remediation exceptions blocks auto-remediation until the exception is cleared.</p> <p>When you specify the limit and the next token, you receive a paginated response. </p> <p>Limit and next token are not applicable if you request resources in batch. It is only applicable, when you request all resources.</p> </note>
		/// DescribeRemediationExceptions #X-Amz-Target=StarlingDoveService.DescribeRemediationExceptions
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeRemediationExceptionsResponse> DescribeRemediationExceptionsAsync(string Limit, string NextToken, DescribeRemediationExceptionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DescribeRemediationExceptions?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeRemediationExceptionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides a detailed view of a Remediation Execution for a set of resources including state, timestamps for when steps for the remediation execution occur, and any error messages for steps that have failed. When you specify the limit and the next token, you receive a paginated response.
		/// DescribeRemediationExecutionStatus #X-Amz-Target=StarlingDoveService.DescribeRemediationExecutionStatus
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeRemediationExecutionStatusResponse> DescribeRemediationExecutionStatusAsync(string Limit, string NextToken, DescribeRemediationExecutionStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DescribeRemediationExecutionStatus?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeRemediationExecutionStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the details of one or more retention configurations. If the retention configuration name is not specified, this action returns the details for all the retention configurations for that account.</p> <note> <p>Currently, Config supports only one retention configuration per region in your account.</p> </note>
		/// DescribeRetentionConfigurations #X-Amz-Target=StarlingDoveService.DescribeRetentionConfigurations
		/// </summary>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeRetentionConfigurationsResponse> DescribeRetentionConfigurationsAsync(string NextToken, DescribeRetentionConfigurationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.DescribeRetentionConfigurations?NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeRetentionConfigurationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the evaluation results for the specified Config rule for a specific resource in a rule. The results indicate which Amazon Web Services resources were evaluated by the rule, when each resource was last evaluated, and whether each resource complies with the rule. </p> <note> <p>The results can return an empty result page. But if you have a <code>nextToken</code>, the results are displayed on the next page.</p> </note>
		/// GetAggregateComplianceDetailsByConfigRule #X-Amz-Target=StarlingDoveService.GetAggregateComplianceDetailsByConfigRule
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetAggregateComplianceDetailsByConfigRuleResponse> GetAggregateComplianceDetailsByConfigRuleAsync(string Limit, string NextToken, GetAggregateComplianceDetailsByConfigRuleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.GetAggregateComplianceDetailsByConfigRule?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAggregateComplianceDetailsByConfigRuleResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the number of compliant and noncompliant rules for one or more accounts and regions in an aggregator.</p> <note> <p>The results can return an empty result page, but if you have a nextToken, the results are displayed on the next page.</p> </note>
		/// GetAggregateConfigRuleComplianceSummary #X-Amz-Target=StarlingDoveService.GetAggregateConfigRuleComplianceSummary
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetAggregateConfigRuleComplianceSummaryResponse> GetAggregateConfigRuleComplianceSummaryAsync(string Limit, string NextToken, GetAggregateConfigRuleComplianceSummaryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.GetAggregateConfigRuleComplianceSummary?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAggregateConfigRuleComplianceSummaryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the count of compliant and noncompliant conformance packs across all Amazon Web Services accounts and Amazon Web Services Regions in an aggregator. You can filter based on Amazon Web Services account ID or Amazon Web Services Region.</p> <note> <p>The results can return an empty result page, but if you have a nextToken, the results are displayed on the next page.</p> </note>
		/// GetAggregateConformancePackComplianceSummary #X-Amz-Target=StarlingDoveService.GetAggregateConformancePackComplianceSummary
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetAggregateConformancePackComplianceSummaryResponse> GetAggregateConformancePackComplianceSummaryAsync(string Limit, string NextToken, GetAggregateConformancePackComplianceSummaryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.GetAggregateConformancePackComplianceSummary?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAggregateConformancePackComplianceSummaryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the resource counts across accounts and regions that are present in your Config aggregator. You can request the resource counts by providing filters and GroupByKey.</p> <p>For example, if the input contains accountID 12345678910 and region us-east-1 in filters, the API returns the count of resources in account ID 12345678910 and region us-east-1. If the input contains ACCOUNT_ID as a GroupByKey, the API returns resource counts for all source accounts that are present in your aggregator.</p>
		/// GetAggregateDiscoveredResourceCounts #X-Amz-Target=StarlingDoveService.GetAggregateDiscoveredResourceCounts
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetAggregateDiscoveredResourceCountsResponse> GetAggregateDiscoveredResourceCountsAsync(string Limit, string NextToken, GetAggregateDiscoveredResourceCountsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.GetAggregateDiscoveredResourceCounts?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAggregateDiscoveredResourceCountsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns configuration item that is aggregated for your specific resource in a specific source account and region.
		/// GetAggregateResourceConfig #X-Amz-Target=StarlingDoveService.GetAggregateResourceConfig
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetAggregateResourceConfigResponse> GetAggregateResourceConfigAsync(GetAggregateResourceConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.GetAggregateResourceConfig";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAggregateResourceConfigResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the evaluation results for the specified Config rule. The results indicate which Amazon Web Services resources were evaluated by the rule, when each resource was last evaluated, and whether each resource complies with the rule.
		/// GetComplianceDetailsByConfigRule #X-Amz-Target=StarlingDoveService.GetComplianceDetailsByConfigRule
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetComplianceDetailsByConfigRuleResponse> GetComplianceDetailsByConfigRuleAsync(string Limit, string NextToken, GetComplianceDetailsByConfigRuleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.GetComplianceDetailsByConfigRule?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetComplianceDetailsByConfigRuleResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the evaluation results for the specified Amazon Web Services resource. The results indicate which Config rules were used to evaluate the resource, when each rule was last invoked, and whether the resource complies with each rule.
		/// GetComplianceDetailsByResource #X-Amz-Target=StarlingDoveService.GetComplianceDetailsByResource
		/// </summary>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetComplianceDetailsByResourceResponse> GetComplianceDetailsByResourceAsync(string NextToken, GetComplianceDetailsByResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.GetComplianceDetailsByResource?NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetComplianceDetailsByResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the number of Config rules that are compliant and noncompliant, up to a maximum of 25 for each.
		/// GetComplianceSummaryByConfigRule #X-Amz-Target=StarlingDoveService.GetComplianceSummaryByConfigRule
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetComplianceSummaryByConfigRuleResponse> GetComplianceSummaryByConfigRuleAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.GetComplianceSummaryByConfigRule";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetComplianceSummaryByConfigRuleResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the number of resources that are compliant and the number that are noncompliant. You can specify one or more resource types to get these numbers for each resource type. The maximum number returned is 100.
		/// GetComplianceSummaryByResourceType #X-Amz-Target=StarlingDoveService.GetComplianceSummaryByResourceType
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetComplianceSummaryByResourceTypeResponse> GetComplianceSummaryByResourceTypeAsync(GetComplianceSummaryByResourceTypeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.GetComplianceSummaryByResourceType";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetComplianceSummaryByResourceTypeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns compliance details of a conformance pack for all Amazon Web Services resources that are monitered by conformance pack.
		/// GetConformancePackComplianceDetails #X-Amz-Target=StarlingDoveService.GetConformancePackComplianceDetails
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetConformancePackComplianceDetailsResponse> GetConformancePackComplianceDetailsAsync(string Limit, string NextToken, GetConformancePackComplianceDetailsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.GetConformancePackComplianceDetails?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetConformancePackComplianceDetailsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns compliance details for the conformance pack based on the cumulative compliance results of all the rules in that conformance pack.
		/// GetConformancePackComplianceSummary #X-Amz-Target=StarlingDoveService.GetConformancePackComplianceSummary
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetConformancePackComplianceSummaryResponse> GetConformancePackComplianceSummaryAsync(string Limit, string NextToken, GetConformancePackComplianceSummaryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.GetConformancePackComplianceSummary?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetConformancePackComplianceSummaryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the policy definition containing the logic for your Config Custom Policy rule.
		/// GetCustomRulePolicy #X-Amz-Target=StarlingDoveService.GetCustomRulePolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetCustomRulePolicyResponse> GetCustomRulePolicyAsync(GetCustomRulePolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.GetCustomRulePolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetCustomRulePolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the resource types, the number of each resource type, and the total number of resources that Config is recording in this region for your Amazon Web Services account. </p> <p class="title"> <b>Example</b> </p> <ol> <li> <p>Config is recording three resource types in the US East (Ohio) Region for your account: 25 EC2 instances, 20 IAM users, and 15 S3 buckets.</p> </li> <li> <p>You make a call to the <code>GetDiscoveredResourceCounts</code> action and specify that you want all resource types. </p> </li> <li> <p>Config returns the following:</p> <ul> <li> <p>The resource types (EC2 instances, IAM users, and S3 buckets).</p> </li> <li> <p>The number of each resource type (25, 20, and 15).</p> </li> <li> <p>The total number of all resources (60).</p> </li> </ul> </li> </ol> <p>The response is paginated. By default, Config lists 100 <a>ResourceCount</a> objects on each page. You can customize this number with the <code>limit</code> parameter. The response includes a <code>nextToken</code> string. To get the next page of results, run the request again and specify the string for the <code>nextToken</code> parameter.</p> <note> <p>If you make a call to the <a>GetDiscoveredResourceCounts</a> action, you might not immediately receive resource counts in the following situations:</p> <ul> <li> <p>You are a new Config customer.</p> </li> <li> <p>You just enabled resource recording.</p> </li> </ul> <p>It might take a few minutes for Config to record and count your resources. Wait a few minutes and then retry the <a>GetDiscoveredResourceCounts</a> action. </p> </note>
		/// GetDiscoveredResourceCounts #X-Amz-Target=StarlingDoveService.GetDiscoveredResourceCounts
		/// </summary>
		/// <param name="limit">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetDiscoveredResourceCountsResponse> GetDiscoveredResourceCountsAsync(string limit, string nextToken, GetDiscoveredResourceCountsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.GetDiscoveredResourceCounts?limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDiscoveredResourceCountsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns detailed status for each member account within an organization for a given organization Config rule.
		/// GetOrganizationConfigRuleDetailedStatus #X-Amz-Target=StarlingDoveService.GetOrganizationConfigRuleDetailedStatus
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetOrganizationConfigRuleDetailedStatusResponse> GetOrganizationConfigRuleDetailedStatusAsync(string Limit, string NextToken, GetOrganizationConfigRuleDetailedStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.GetOrganizationConfigRuleDetailedStatus?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetOrganizationConfigRuleDetailedStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns detailed status for each member account within an organization for a given organization conformance pack.
		/// GetOrganizationConformancePackDetailedStatus #X-Amz-Target=StarlingDoveService.GetOrganizationConformancePackDetailedStatus
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetOrganizationConformancePackDetailedStatusResponse> GetOrganizationConformancePackDetailedStatusAsync(string Limit, string NextToken, GetOrganizationConformancePackDetailedStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.GetOrganizationConformancePackDetailedStatus?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetOrganizationConformancePackDetailedStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the policy definition containing the logic for your organization Config Custom Policy rule.
		/// GetOrganizationCustomRulePolicy #X-Amz-Target=StarlingDoveService.GetOrganizationCustomRulePolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetOrganizationCustomRulePolicyResponse> GetOrganizationCustomRulePolicyAsync(GetOrganizationCustomRulePolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.GetOrganizationCustomRulePolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetOrganizationCustomRulePolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of <code>ConfigurationItems</code> for the specified resource. The list contains details about each state of the resource during the specified time interval. If you specified a retention period to retain your <code>ConfigurationItems</code> between a minimum of 30 days and a maximum of 7 years (2557 days), Config returns the <code>ConfigurationItems</code> for the specified retention period. </p> <p>The response is paginated. By default, Config returns a limit of 10 configuration items per page. You can customize this number with the <code>limit</code> parameter. The response includes a <code>nextToken</code> string. To get the next page of results, run the request again and specify the string for the <code>nextToken</code> parameter.</p> <note> <p>Each call to the API is limited to span a duration of seven days. It is likely that the number of records returned is smaller than the specified <code>limit</code>. In such cases, you can make another call, using the <code>nextToken</code>.</p> </note>
		/// GetResourceConfigHistory #X-Amz-Target=StarlingDoveService.GetResourceConfigHistory
		/// </summary>
		/// <param name="limit">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetResourceConfigHistoryResponse> GetResourceConfigHistoryAsync(string limit, string nextToken, GetResourceConfigHistoryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.GetResourceConfigHistory?limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetResourceConfigHistoryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a summary of resource evaluation for the specified resource evaluation ID from the proactive rules that were run. The results indicate which evaluation context was used to evaluate the rules, which resource details were evaluated, the evaluation mode that was run, and whether the resource details comply with the configuration of the proactive rules. </p> <note> <p>To see additional information about the evaluation result, such as which rule flagged a resource as NON_COMPLIANT, use the <a href="https://docs.aws.amazon.com/config/latest/APIReference/API_GetComplianceDetailsByResource.html">GetComplianceDetailsByResource</a> API. For more information, see the <a href="https://docs.aws.amazon.com/config/latest/APIReference/API_GetResourceEvaluationSummary.html#API_GetResourceEvaluationSummary_Examples">Examples</a> section.</p> </note>
		/// GetResourceEvaluationSummary #X-Amz-Target=StarlingDoveService.GetResourceEvaluationSummary
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetResourceEvaluationSummaryResponse> GetResourceEvaluationSummaryAsync(GetResourceEvaluationSummaryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.GetResourceEvaluationSummary";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetResourceEvaluationSummaryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the details of a specific stored query.
		/// GetStoredQuery #X-Amz-Target=StarlingDoveService.GetStoredQuery
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetStoredQueryResponse> GetStoredQueryAsync(GetStoredQueryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.GetStoredQuery";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetStoredQueryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Accepts a resource type and returns a list of resource identifiers that are aggregated for a specific resource type across accounts and regions. A resource identifier includes the resource type, ID, (if available) the custom resource name, source account, and source region. You can narrow the results to include only resources that have specific resource IDs, or a resource name, or source account ID, or source region.</p> <p>For example, if the input consists of accountID 12345678910 and the region is us-east-1 for resource type <code>AWS::EC2::Instance</code> then the API returns all the EC2 instance identifiers of accountID 12345678910 and region us-east-1.</p>
		/// ListAggregateDiscoveredResources #X-Amz-Target=StarlingDoveService.ListAggregateDiscoveredResources
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListAggregateDiscoveredResourcesResponse> ListAggregateDiscoveredResourcesAsync(string Limit, string NextToken, ListAggregateDiscoveredResourcesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.ListAggregateDiscoveredResources?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAggregateDiscoveredResourcesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of conformance pack compliance scores. A compliance score is the percentage of the number of compliant rule-resource combinations in a conformance pack compared to the number of total possible rule-resource combinations in the conformance pack. This metric provides you with a high-level view of the compliance state of your conformance packs. You can use it to identify, investigate, and understand the level of compliance in your conformance packs.</p> <note> <p>Conformance packs with no evaluation results will have a compliance score of <code>INSUFFICIENT_DATA</code>.</p> </note>
		/// ListConformancePackComplianceScores #X-Amz-Target=StarlingDoveService.ListConformancePackComplianceScores
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListConformancePackComplianceScoresResponse> ListConformancePackComplianceScoresAsync(string Limit, string NextToken, ListConformancePackComplianceScoresRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.ListConformancePackComplianceScores?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListConformancePackComplianceScoresResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Accepts a resource type and returns a list of resource identifiers for the resources of that type. A resource identifier includes the resource type, ID, and (if available) the custom resource name. The results consist of resources that Config has discovered, including those that Config is not currently recording. You can narrow the results to include only resources that have specific resource IDs or a resource name.</p> <note> <p>You can specify either resource IDs or a resource name, but not both, in the same request.</p> </note> <p>The response is paginated. By default, Config lists 100 resource identifiers on each page. You can customize this number with the <code>limit</code> parameter. The response includes a <code>nextToken</code> string. To get the next page of results, run the request again and specify the string for the <code>nextToken</code> parameter.</p>
		/// ListDiscoveredResources #X-Amz-Target=StarlingDoveService.ListDiscoveredResources
		/// </summary>
		/// <param name="limit">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDiscoveredResourcesResponse> ListDiscoveredResourcesAsync(string limit, string nextToken, ListDiscoveredResourcesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.ListDiscoveredResources?limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDiscoveredResourcesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of proactive resource evaluations.
		/// ListResourceEvaluations #X-Amz-Target=StarlingDoveService.ListResourceEvaluations
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListResourceEvaluationsResponse> ListResourceEvaluationsAsync(string Limit, string NextToken, ListResourceEvaluationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.ListResourceEvaluations?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListResourceEvaluationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the stored queries for a single Amazon Web Services account and a single Amazon Web Services Region. The default is 100.
		/// ListStoredQueries #X-Amz-Target=StarlingDoveService.ListStoredQueries
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListStoredQueriesResponse> ListStoredQueriesAsync(string MaxResults, string NextToken, ListStoredQueriesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.ListStoredQueries?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListStoredQueriesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List the tags for Config resource.
		/// ListTagsForResource #X-Amz-Target=StarlingDoveService.ListTagsForResource
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string Limit, string NextToken, ListTagsForResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.ListTagsForResource?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Authorizes the aggregator account and region to collect data from the source account and region. </p> <note> <p> <code>PutAggregationAuthorization</code> is an idempotent API. Subsequent requests won’t create a duplicate resource if one was already created. If a following request has different <code>tags</code> values, Config will ignore these differences and treat it as an idempotent request of the previous. In this case, <code>tags</code> will not be updated, even if they are different.</p> </note>
		/// PutAggregationAuthorization #X-Amz-Target=StarlingDoveService.PutAggregationAuthorization
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutAggregationAuthorizationResponse> PutAggregationAuthorizationAsync(PutAggregationAuthorizationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.PutAggregationAuthorization";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutAggregationAuthorizationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Adds or updates an Config rule to evaluate if your Amazon Web Services resources comply with your desired configurations. For information on how many Config rules you can have per account, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/configlimits.html"> <b>Service Limits</b> </a> in the <i>Config Developer Guide</i>.</p> <p>There are two types of rules: <i>Config Managed Rules</i> and <i>Config Custom Rules</i>. You can use <code>PutConfigRule</code> to create both Config Managed Rules and Config Custom Rules.</p> <p>Config Managed Rules are predefined, customizable rules created by Config. For a list of managed rules, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/managed-rules-by-aws-config.html">List of Config Managed Rules</a>. If you are adding an Config managed rule, you must specify the rule's identifier for the <code>SourceIdentifier</code> key.</p> <p>Config Custom Rules are rules that you create from scratch. There are two ways to create Config custom rules: with Lambda functions (<a href="https://docs.aws.amazon.com/config/latest/developerguide/gettingstarted-concepts.html#gettingstarted-concepts-function"> Lambda Developer Guide</a>) and with Guard (<a href="https://github.com/aws-cloudformation/cloudformation-guard">Guard GitHub Repository</a>), a policy-as-code language. Config custom rules created with Lambda are called <i>Config Custom Lambda Rules</i> and Config custom rules created with Guard are called <i>Config Custom Policy Rules</i>.</p> <p>If you are adding a new Config Custom Lambda rule, you first need to create an Lambda function that the rule invokes to evaluate your resources. When you use <code>PutConfigRule</code> to add a Custom Lambda rule to Config, you must specify the Amazon Resource Name (ARN) that Lambda assigns to the function. You specify the ARN in the <code>SourceIdentifier</code> key. This key is part of the <code>Source</code> object, which is part of the <code>ConfigRule</code> object. </p> <p>For any new Config rule that you add, specify the <code>ConfigRuleName</code> in the <code>ConfigRule</code> object. Do not specify the <code>ConfigRuleArn</code> or the <code>ConfigRuleId</code>. These values are generated by Config for new rules.</p> <p>If you are updating a rule that you added previously, you can specify the rule by <code>ConfigRuleName</code>, <code>ConfigRuleId</code>, or <code>ConfigRuleArn</code> in the <code>ConfigRule</code> data type that you use in this request.</p> <p>For more information about developing and using Config rules, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config.html">Evaluating Resources with Config Rules</a> in the <i>Config Developer Guide</i>.</p> <note> <p> <code>PutConfigRule</code> is an idempotent API. Subsequent requests won’t create a duplicate resource if one was already created. If a following request has different <code>tags</code> values, Config will ignore these differences and treat it as an idempotent request of the previous. In this case, <code>tags</code> will not be updated, even if they are different.</p> </note>
		/// PutConfigRule #X-Amz-Target=StarlingDoveService.PutConfigRule
		/// </summary>
		/// <returns>Success</returns>
		public async Task PutConfigRuleAsync(PutConfigRuleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.PutConfigRule";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates and updates the configuration aggregator with the selected source accounts and regions. The source account can be individual account(s) or an organization.</p> <p> <code>accountIds</code> that are passed will be replaced with existing accounts. If you want to add additional accounts into the aggregator, call <code>DescribeConfigurationAggregators</code> to get the previous accounts and then append new ones.</p> <note> <p>Config should be enabled in source accounts and regions you want to aggregate.</p> <p>If your source type is an organization, you must be signed in to the management account or a registered delegated administrator and all the features must be enabled in your organization. If the caller is a management account, Config calls <code>EnableAwsServiceAccess</code> API to enable integration between Config and Organizations. If the caller is a registered delegated administrator, Config calls <code>ListDelegatedAdministrators</code> API to verify whether the caller is a valid delegated administrator.</p> <p>To register a delegated administrator, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/set-up-aggregator-cli.html#register-a-delegated-administrator-cli">Register a Delegated Administrator</a> in the <i>Config developer guide</i>. </p> </note> <note> <p> <code>PutConfigurationAggregator</code> is an idempotent API. Subsequent requests won’t create a duplicate resource if one was already created. If a following request has different <code>tags</code> values, Config will ignore these differences and treat it as an idempotent request of the previous. In this case, <code>tags</code> will not be updated, even if they are different.</p> </note>
		/// PutConfigurationAggregator #X-Amz-Target=StarlingDoveService.PutConfigurationAggregator
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutConfigurationAggregatorResponse> PutConfigurationAggregatorAsync(PutConfigurationAggregatorRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.PutConfigurationAggregator";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutConfigurationAggregatorResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new configuration recorder to record configuration changes for specified resource types.</p> <p>You can also use this action to change the <code>roleARN</code> or the <code>recordingGroup</code> of an existing recorder. For more information, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/stop-start-recorder.html"> <b>Managing the Configuration Recorder</b> </a> in the <i>Config Developer Guide</i>.</p> <note> <p>You can specify only one configuration recorder for each Amazon Web Services Region for each account.</p> <p>If the configuration recorder does not have the <code>recordingGroup</code> field specified, the default is to record all supported resource types.</p> </note>
		/// PutConfigurationRecorder #X-Amz-Target=StarlingDoveService.PutConfigurationRecorder
		/// </summary>
		/// <returns>Success</returns>
		public async Task PutConfigurationRecorderAsync(PutConfigurationRecorderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.PutConfigurationRecorder";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates or updates a conformance pack. A conformance pack is a collection of Config rules that can be easily deployed in an account and a region and across an organization. For information on how many conformance packs you can have per account, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/configlimits.html"> <b>Service Limits</b> </a> in the <i>Config Developer Guide</i>.</p> <p>This API creates a service-linked role <code>AWSServiceRoleForConfigConforms</code> in your account. The service-linked role is created only when the role does not exist in your account. </p> <note> <p>You must specify only one of the follow parameters: <code>TemplateS3Uri</code>, <code>TemplateBody</code> or <code>TemplateSSMDocumentDetails</code>.</p> </note>
		/// PutConformancePack #X-Amz-Target=StarlingDoveService.PutConformancePack
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutConformancePackResponse> PutConformancePackAsync(PutConformancePackRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.PutConformancePack";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutConformancePackResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a delivery channel object to deliver configuration information to an Amazon S3 bucket and Amazon SNS topic.</p> <p>Before you can create a delivery channel, you must create a configuration recorder.</p> <p>You can use this action to change the Amazon S3 bucket or an Amazon SNS topic of the existing delivery channel. To change the Amazon S3 bucket or an Amazon SNS topic, call this action and specify the changed values for the S3 bucket and the SNS topic. If you specify a different value for either the S3 bucket or the SNS topic, this action will keep the existing value for the parameter that is not changed.</p> <note> <p>You can have only one delivery channel per region in your account.</p> </note>
		/// PutDeliveryChannel #X-Amz-Target=StarlingDoveService.PutDeliveryChannel
		/// </summary>
		/// <returns>Success</returns>
		public async Task PutDeliveryChannelAsync(PutDeliveryChannelRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.PutDeliveryChannel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Used by an Lambda function to deliver evaluation results to Config. This action is required in every Lambda function that is invoked by an Config rule.
		/// PutEvaluations #X-Amz-Target=StarlingDoveService.PutEvaluations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutEvaluationsResponse> PutEvaluationsAsync(PutEvaluationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.PutEvaluations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutEvaluationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add or updates the evaluations for process checks. This API checks if the rule is a process check when the name of the Config rule is provided.
		/// PutExternalEvaluation #X-Amz-Target=StarlingDoveService.PutExternalEvaluation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutExternalEvaluationResponse> PutExternalEvaluationAsync(PutExternalEvaluationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.PutExternalEvaluation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutExternalEvaluationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Adds or updates an Config rule for your entire organization to evaluate if your Amazon Web Services resources comply with your desired configurations. For information on how many organization Config rules you can have per account, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/configlimits.html"> <b>Service Limits</b> </a> in the <i>Config Developer Guide</i>.</p> <p> Only a management account and a delegated administrator can create or update an organization Config rule. When calling this API with a delegated administrator, you must ensure Organizations <code>ListDelegatedAdministrator</code> permissions are added. An organization can have up to 3 delegated administrators.</p> <p>This API enables organization service access through the <code>EnableAWSServiceAccess</code> action and creates a service-linked role <code>AWSServiceRoleForConfigMultiAccountSetup</code> in the management or delegated administrator account of your organization. The service-linked role is created only when the role does not exist in the caller account. Config verifies the existence of role with <code>GetRole</code> action.</p> <p>To use this API with delegated administrator, register a delegated administrator by calling Amazon Web Services Organization <code>register-delegated-administrator</code> for <code>config-multiaccountsetup.amazonaws.com</code>. </p> <p>There are two types of rules: <i>Config Managed Rules</i> and <i>Config Custom Rules</i>. You can use <code>PutOrganizationConfigRule</code> to create both Config Managed Rules and Config Custom Rules.</p> <p>Config Managed Rules are predefined, customizable rules created by Config. For a list of managed rules, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/managed-rules-by-aws-config.html">List of Config Managed Rules</a>. If you are adding an Config managed rule, you must specify the rule's identifier for the <code>RuleIdentifier</code> key.</p> <p>Config Custom Rules are rules that you create from scratch. There are two ways to create Config custom rules: with Lambda functions (<a href="https://docs.aws.amazon.com/config/latest/developerguide/gettingstarted-concepts.html#gettingstarted-concepts-function"> Lambda Developer Guide</a>) and with Guard (<a href="https://github.com/aws-cloudformation/cloudformation-guard">Guard GitHub Repository</a>), a policy-as-code language. Config custom rules created with Lambda are called <i>Config Custom Lambda Rules</i> and Config custom rules created with Guard are called <i>Config Custom Policy Rules</i>.</p> <p>If you are adding a new Config Custom Lambda rule, you first need to create an Lambda function in the management account or a delegated administrator that the rule invokes to evaluate your resources. You also need to create an IAM role in the managed account that can be assumed by the Lambda function. When you use <code>PutOrganizationConfigRule</code> to add a Custom Lambda rule to Config, you must specify the Amazon Resource Name (ARN) that Lambda assigns to the function.</p> <note> <p>Prerequisite: Ensure you call <code>EnableAllFeatures</code> API to enable all features in an organization.</p> <p>Make sure to specify one of either <code>OrganizationCustomPolicyRuleMetadata</code> for Custom Policy rules, <code>OrganizationCustomRuleMetadata</code> for Custom Lambda rules, or <code>OrganizationManagedRuleMetadata</code> for managed rules.</p> </note>
		/// PutOrganizationConfigRule #X-Amz-Target=StarlingDoveService.PutOrganizationConfigRule
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutOrganizationConfigRuleResponse> PutOrganizationConfigRuleAsync(PutOrganizationConfigRuleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.PutOrganizationConfigRule";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutOrganizationConfigRuleResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deploys conformance packs across member accounts in an Amazon Web Services Organization. For information on how many organization conformance packs and how many Config rules you can have per account, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/configlimits.html"> <b>Service Limits</b> </a> in the <i>Config Developer Guide</i>.</p> <p>Only a management account and a delegated administrator can call this API. When calling this API with a delegated administrator, you must ensure Organizations <code>ListDelegatedAdministrator</code> permissions are added. An organization can have up to 3 delegated administrators.</p> <p>This API enables organization service access for <code>config-multiaccountsetup.amazonaws.com</code> through the <code>EnableAWSServiceAccess</code> action and creates a service-linked role <code>AWSServiceRoleForConfigMultiAccountSetup</code> in the management or delegated administrator account of your organization. The service-linked role is created only when the role does not exist in the caller account. To use this API with delegated administrator, register a delegated administrator by calling Amazon Web Services Organization <code>register-delegate-admin</code> for <code>config-multiaccountsetup.amazonaws.com</code>.</p> <note> <p>Prerequisite: Ensure you call <code>EnableAllFeatures</code> API to enable all features in an organization.</p> <p>You must specify either the <code>TemplateS3Uri</code> or the <code>TemplateBody</code> parameter, but not both. If you provide both Config uses the <code>TemplateS3Uri</code> parameter and ignores the <code>TemplateBody</code> parameter.</p> <p>Config sets the state of a conformance pack to CREATE_IN_PROGRESS and UPDATE_IN_PROGRESS until the conformance pack is created or updated. You cannot update a conformance pack while it is in this state.</p> </note>
		/// PutOrganizationConformancePack #X-Amz-Target=StarlingDoveService.PutOrganizationConformancePack
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutOrganizationConformancePackResponse> PutOrganizationConformancePackAsync(PutOrganizationConformancePackRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.PutOrganizationConformancePack";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutOrganizationConformancePackResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Adds or updates the remediation configuration with a specific Config rule with the selected target or action. The API creates the <code>RemediationConfiguration</code> object for the Config rule. The Config rule must already exist for you to add a remediation configuration. The target (SSM document) must exist and have permissions to use the target. </p> <note> <p>If you make backward incompatible changes to the SSM document, you must call this again to ensure the remediations can run.</p> <p>This API does not support adding remediation configurations for service-linked Config Rules such as Organization Config rules, the rules deployed by conformance packs, and rules deployed by Amazon Web Services Security Hub.</p> </note> <note> <p>For manual remediation configuration, you need to provide a value for <code>automationAssumeRole</code> or use a value in the <code>assumeRole</code>field to remediate your resources. The SSM automation document can use either as long as it maps to a valid parameter.</p> <p>However, for automatic remediation configuration, the only valid <code>assumeRole</code> field value is <code>AutomationAssumeRole</code> and you need to provide a value for <code>AutomationAssumeRole</code> to remediate your resources.</p> </note>
		/// PutRemediationConfigurations #X-Amz-Target=StarlingDoveService.PutRemediationConfigurations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutRemediationConfigurationsResponse> PutRemediationConfigurationsAsync(PutRemediationConfigurationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.PutRemediationConfigurations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutRemediationConfigurationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>A remediation exception is when a specified resource is no longer considered for auto-remediation. This API adds a new exception or updates an existing exception for a specified resource with a specified Config rule. </p> <note> <p>Config generates a remediation exception when a problem occurs running a remediation action for a specified resource. Remediation exceptions blocks auto-remediation until the exception is cleared.</p> </note> <note> <p>When placing an exception on an Amazon Web Services resource, it is recommended that remediation is set as manual remediation until the given Config rule for the specified resource evaluates the resource as <code>NON_COMPLIANT</code>. Once the resource has been evaluated as <code>NON_COMPLIANT</code>, you can add remediation exceptions and change the remediation type back from Manual to Auto if you want to use auto-remediation. Otherwise, using auto-remediation before a <code>NON_COMPLIANT</code> evaluation result can delete resources before the exception is applied.</p> </note> <note> <p>Placing an exception can only be performed on resources that are <code>NON_COMPLIANT</code>. If you use this API for <code>COMPLIANT</code> resources or resources that are <code>NOT_APPLICABLE</code>, a remediation exception will not be generated. For more information on the conditions that initiate the possible Config evaluation results, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/config-concepts.html#aws-config-rules">Concepts | Config Rules</a> in the <i>Config Developer Guide</i>.</p> </note>
		/// PutRemediationExceptions #X-Amz-Target=StarlingDoveService.PutRemediationExceptions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutRemediationExceptionsResponse> PutRemediationExceptionsAsync(PutRemediationExceptionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.PutRemediationExceptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutRemediationExceptionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Records the configuration state for the resource provided in the request. The configuration state of a resource is represented in Config as Configuration Items. Once this API records the configuration item, you can retrieve the list of configuration items for the custom resource type using existing Config APIs. </p> <note> <p>The custom resource type must be registered with CloudFormation. This API accepts the configuration item registered with CloudFormation.</p> <p>When you call this API, Config only stores configuration state of the resource provided in the request. This API does not change or remediate the configuration of the resource. </p> <p>Write-only schema properites are not recorded as part of the published configuration item.</p> </note>
		/// PutResourceConfig #X-Amz-Target=StarlingDoveService.PutResourceConfig
		/// </summary>
		/// <returns>Success</returns>
		public async Task PutResourceConfigAsync(PutResourceConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.PutResourceConfig";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates and updates the retention configuration with details about retention period (number of days) that Config stores your historical information. The API creates the <code>RetentionConfiguration</code> object and names the object as <b>default</b>. When you have a <code>RetentionConfiguration</code> object named <b>default</b>, calling the API modifies the default object. </p> <note> <p>Currently, Config supports only one retention configuration per region in your account.</p> </note>
		/// PutRetentionConfiguration #X-Amz-Target=StarlingDoveService.PutRetentionConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutRetentionConfigurationResponse> PutRetentionConfigurationAsync(PutRetentionConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.PutRetentionConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutRetentionConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Saves a new query or updates an existing saved query. The <code>QueryName</code> must be unique for a single Amazon Web Services account and a single Amazon Web Services Region. You can create upto 300 queries in a single Amazon Web Services account and a single Amazon Web Services Region.</p> <note> <p> <code>PutStoredQuery</code> is an idempotent API. Subsequent requests won’t create a duplicate resource if one was already created. If a following request has different <code>tags</code> values, Config will ignore these differences and treat it as an idempotent request of the previous. In this case, <code>tags</code> will not be updated, even if they are different.</p> </note>
		/// PutStoredQuery #X-Amz-Target=StarlingDoveService.PutStoredQuery
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutStoredQueryResponse> PutStoredQueryAsync(PutStoredQueryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.PutStoredQuery";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutStoredQueryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Accepts a structured query language (SQL) SELECT command and an aggregator to query configuration state of Amazon Web Services resources across multiple accounts and regions, performs the corresponding search, and returns resource configurations matching the properties.</p> <p>For more information about query components, see the <a href="https://docs.aws.amazon.com/config/latest/developerguide/query-components.html"> <b>Query Components</b> </a> section in the <i>Config Developer Guide</i>.</p> <note> <p>If you run an aggregation query (i.e., using <code>GROUP BY</code> or using aggregate functions such as <code>COUNT</code>; e.g., <code>SELECT resourceId, COUNT(*) WHERE resourceType = 'AWS::IAM::Role' GROUP BY resourceId</code>) and do not specify the <code>MaxResults</code> or the <code>Limit</code> query parameters, the default page size is set to 500.</p> <p>If you run a non-aggregation query (i.e., not using <code>GROUP BY</code> or aggregate function; e.g., <code>SELECT * WHERE resourceType = 'AWS::IAM::Role'</code>) and do not specify the <code>MaxResults</code> or the <code>Limit</code> query parameters, the default page size is set to 25.</p> </note>
		/// SelectAggregateResourceConfig #X-Amz-Target=StarlingDoveService.SelectAggregateResourceConfig
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<SelectAggregateResourceConfigResponse> SelectAggregateResourceConfigAsync(string Limit, string NextToken, SelectAggregateResourceConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.SelectAggregateResourceConfig?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SelectAggregateResourceConfigResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Accepts a structured query language (SQL) <code>SELECT</code> command, performs the corresponding search, and returns resource configurations matching the properties.</p> <p>For more information about query components, see the <a href="https://docs.aws.amazon.com/config/latest/developerguide/query-components.html"> <b>Query Components</b> </a> section in the <i>Config Developer Guide</i>.</p>
		/// SelectResourceConfig #X-Amz-Target=StarlingDoveService.SelectResourceConfig
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<SelectResourceConfigResponse> SelectResourceConfigAsync(string Limit, string NextToken, SelectResourceConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.SelectResourceConfig?Limit=" + (Limit==null? "" : System.Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SelectResourceConfigResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Runs an on-demand evaluation for the specified Config rules against the last known configuration state of the resources. Use <code>StartConfigRulesEvaluation</code> when you want to test that a rule you updated is working as expected. <code>StartConfigRulesEvaluation</code> does not re-record the latest configuration state for your resources. It re-runs an evaluation against the last known state of your resources. </p> <p>You can specify up to 25 Config rules per request. </p> <p>An existing <code>StartConfigRulesEvaluation</code> call for the specified rules must complete before you can call the API again. If you chose to have Config stream to an Amazon SNS topic, you will receive a <code>ConfigRuleEvaluationStarted</code> notification when the evaluation starts.</p> <note> <p>You don't need to call the <code>StartConfigRulesEvaluation</code> API to run an evaluation for a new rule. When you create a rule, Config evaluates your resources against the rule automatically. </p> </note> <p>The <code>StartConfigRulesEvaluation</code> API is useful if you want to run on-demand evaluations, such as the following example:</p> <ol> <li> <p>You have a custom rule that evaluates your IAM resources every 24 hours.</p> </li> <li> <p>You update your Lambda function to add additional conditions to your rule.</p> </li> <li> <p>Instead of waiting for the next periodic evaluation, you call the <code>StartConfigRulesEvaluation</code> API.</p> </li> <li> <p>Config invokes your Lambda function and evaluates your IAM resources.</p> </li> <li> <p>Your custom rule will still run periodic evaluations every 24 hours.</p> </li> </ol>
		/// StartConfigRulesEvaluation #X-Amz-Target=StarlingDoveService.StartConfigRulesEvaluation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartConfigRulesEvaluationResponse> StartConfigRulesEvaluationAsync(StartConfigRulesEvaluationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.StartConfigRulesEvaluation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartConfigRulesEvaluationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Starts recording configurations of the Amazon Web Services resources you have selected to record in your Amazon Web Services account.</p> <p>You must have created at least one delivery channel to successfully start the configuration recorder.</p>
		/// StartConfigurationRecorder #X-Amz-Target=StarlingDoveService.StartConfigurationRecorder
		/// </summary>
		/// <returns>Success</returns>
		public async Task StartConfigurationRecorderAsync(StartConfigurationRecorderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.StartConfigurationRecorder";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Runs an on-demand remediation for the specified Config rules against the last known remediation configuration. It runs an execution against the current state of your resources. Remediation execution is asynchronous.</p> <p>You can specify up to 100 resource keys per request. An existing StartRemediationExecution call for the specified resource keys must complete before you can call the API again.</p>
		/// StartRemediationExecution #X-Amz-Target=StarlingDoveService.StartRemediationExecution
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartRemediationExecutionResponse> StartRemediationExecutionAsync(StartRemediationExecutionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.StartRemediationExecution";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartRemediationExecutionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Runs an on-demand evaluation for the specified resource to determine whether the resource details will comply with configured Config rules. You can also use it for evaluation purposes. Config recommends using an evaluation context. It runs an execution against the resource details with all of the Config rules in your account that match with the specified proactive mode and resource type.</p> <note> <p>Ensure you have the <code>cloudformation:DescribeType</code> role setup to validate the resource type schema.</p> <p>You can find the <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-schema.html">Resource type schema</a> in "<i>Amazon Web Services public extensions</i>" within the CloudFormation registry or with the following CLI commmand: <code>aws cloudformation describe-type --type-name "AWS::S3::Bucket" --type RESOURCE</code>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry.html#registry-view">Managing extensions through the CloudFormation registry</a> and <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html">Amazon Web Services resource and property types reference</a> in the CloudFormation User Guide.</p> </note>
		/// StartResourceEvaluation #X-Amz-Target=StarlingDoveService.StartResourceEvaluation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartResourceEvaluationResponse> StartResourceEvaluationAsync(StartResourceEvaluationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.StartResourceEvaluation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartResourceEvaluationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stops recording configurations of the Amazon Web Services resources you have selected to record in your Amazon Web Services account.
		/// StopConfigurationRecorder #X-Amz-Target=StarlingDoveService.StopConfigurationRecorder
		/// </summary>
		/// <returns>Success</returns>
		public async Task StopConfigurationRecorderAsync(StopConfigurationRecorderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.StopConfigurationRecorder";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Associates the specified tags to a resource with the specified resourceArn. If existing tags on a resource are not specified in the request parameters, they are not changed. If existing tags are specified, however, then their values will be updated. When a resource is deleted, the tags associated with that resource are deleted as well.
		/// TagResource #X-Amz-Target=StarlingDoveService.TagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task TagResourceAsync(TagResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.TagResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes specified tags from a resource.
		/// UntagResource #X-Amz-Target=StarlingDoveService.UntagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task UntagResourceAsync(UntagResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=StarlingDoveService.UntagResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum BatchGetAggregateResourceConfigX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.BatchGetAggregateResourceConfig")]
		StarlingDoveService_BatchGetAggregateResourceConfig = 0,
	}
	
	public enum BatchGetResourceConfigX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.BatchGetResourceConfig")]
		StarlingDoveService_BatchGetResourceConfig = 0,
	}
	
	public enum DeleteAggregationAuthorizationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DeleteAggregationAuthorization")]
		StarlingDoveService_DeleteAggregationAuthorization = 0,
	}
	
	public enum DeleteConfigRuleX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DeleteConfigRule")]
		StarlingDoveService_DeleteConfigRule = 0,
	}
	
	public enum DeleteConfigurationAggregatorX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DeleteConfigurationAggregator")]
		StarlingDoveService_DeleteConfigurationAggregator = 0,
	}
	
	public enum DeleteConfigurationRecorderX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DeleteConfigurationRecorder")]
		StarlingDoveService_DeleteConfigurationRecorder = 0,
	}
	
	public enum DeleteConformancePackX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DeleteConformancePack")]
		StarlingDoveService_DeleteConformancePack = 0,
	}
	
	public enum DeleteDeliveryChannelX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DeleteDeliveryChannel")]
		StarlingDoveService_DeleteDeliveryChannel = 0,
	}
	
	public enum DeleteEvaluationResultsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DeleteEvaluationResults")]
		StarlingDoveService_DeleteEvaluationResults = 0,
	}
	
	public enum DeleteOrganizationConfigRuleX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DeleteOrganizationConfigRule")]
		StarlingDoveService_DeleteOrganizationConfigRule = 0,
	}
	
	public enum DeleteOrganizationConformancePackX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DeleteOrganizationConformancePack")]
		StarlingDoveService_DeleteOrganizationConformancePack = 0,
	}
	
	public enum DeletePendingAggregationRequestX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DeletePendingAggregationRequest")]
		StarlingDoveService_DeletePendingAggregationRequest = 0,
	}
	
	public enum DeleteRemediationConfigurationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DeleteRemediationConfiguration")]
		StarlingDoveService_DeleteRemediationConfiguration = 0,
	}
	
	public enum DeleteRemediationExceptionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DeleteRemediationExceptions")]
		StarlingDoveService_DeleteRemediationExceptions = 0,
	}
	
	public enum DeleteResourceConfigX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DeleteResourceConfig")]
		StarlingDoveService_DeleteResourceConfig = 0,
	}
	
	public enum DeleteRetentionConfigurationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DeleteRetentionConfiguration")]
		StarlingDoveService_DeleteRetentionConfiguration = 0,
	}
	
	public enum DeleteStoredQueryX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DeleteStoredQuery")]
		StarlingDoveService_DeleteStoredQuery = 0,
	}
	
	public enum DeliverConfigSnapshotX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DeliverConfigSnapshot")]
		StarlingDoveService_DeliverConfigSnapshot = 0,
	}
	
	public enum DescribeAggregateComplianceByConfigRulesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DescribeAggregateComplianceByConfigRules")]
		StarlingDoveService_DescribeAggregateComplianceByConfigRules = 0,
	}
	
	public enum DescribeAggregateComplianceByConformancePacksX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DescribeAggregateComplianceByConformancePacks")]
		StarlingDoveService_DescribeAggregateComplianceByConformancePacks = 0,
	}
	
	public enum DescribeAggregationAuthorizationsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DescribeAggregationAuthorizations")]
		StarlingDoveService_DescribeAggregationAuthorizations = 0,
	}
	
	public enum DescribeComplianceByConfigRuleX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DescribeComplianceByConfigRule")]
		StarlingDoveService_DescribeComplianceByConfigRule = 0,
	}
	
	public enum DescribeComplianceByResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DescribeComplianceByResource")]
		StarlingDoveService_DescribeComplianceByResource = 0,
	}
	
	public enum DescribeConfigRuleEvaluationStatusX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DescribeConfigRuleEvaluationStatus")]
		StarlingDoveService_DescribeConfigRuleEvaluationStatus = 0,
	}
	
	public enum DescribeConfigRulesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DescribeConfigRules")]
		StarlingDoveService_DescribeConfigRules = 0,
	}
	
	public enum DescribeConfigurationAggregatorSourcesStatusX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DescribeConfigurationAggregatorSourcesStatus")]
		StarlingDoveService_DescribeConfigurationAggregatorSourcesStatus = 0,
	}
	
	public enum DescribeConfigurationAggregatorsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DescribeConfigurationAggregators")]
		StarlingDoveService_DescribeConfigurationAggregators = 0,
	}
	
	public enum DescribeConfigurationRecorderStatusX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DescribeConfigurationRecorderStatus")]
		StarlingDoveService_DescribeConfigurationRecorderStatus = 0,
	}
	
	public enum DescribeConfigurationRecordersX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DescribeConfigurationRecorders")]
		StarlingDoveService_DescribeConfigurationRecorders = 0,
	}
	
	public enum DescribeConformancePackComplianceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DescribeConformancePackCompliance")]
		StarlingDoveService_DescribeConformancePackCompliance = 0,
	}
	
	public enum DescribeConformancePackStatusX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DescribeConformancePackStatus")]
		StarlingDoveService_DescribeConformancePackStatus = 0,
	}
	
	public enum DescribeConformancePacksX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DescribeConformancePacks")]
		StarlingDoveService_DescribeConformancePacks = 0,
	}
	
	public enum DescribeDeliveryChannelStatusX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DescribeDeliveryChannelStatus")]
		StarlingDoveService_DescribeDeliveryChannelStatus = 0,
	}
	
	public enum DescribeDeliveryChannelsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DescribeDeliveryChannels")]
		StarlingDoveService_DescribeDeliveryChannels = 0,
	}
	
	public enum DescribeOrganizationConfigRuleStatusesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DescribeOrganizationConfigRuleStatuses")]
		StarlingDoveService_DescribeOrganizationConfigRuleStatuses = 0,
	}
	
	public enum DescribeOrganizationConfigRulesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DescribeOrganizationConfigRules")]
		StarlingDoveService_DescribeOrganizationConfigRules = 0,
	}
	
	public enum DescribeOrganizationConformancePackStatusesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DescribeOrganizationConformancePackStatuses")]
		StarlingDoveService_DescribeOrganizationConformancePackStatuses = 0,
	}
	
	public enum DescribeOrganizationConformancePacksX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DescribeOrganizationConformancePacks")]
		StarlingDoveService_DescribeOrganizationConformancePacks = 0,
	}
	
	public enum DescribePendingAggregationRequestsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DescribePendingAggregationRequests")]
		StarlingDoveService_DescribePendingAggregationRequests = 0,
	}
	
	public enum DescribeRemediationConfigurationsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DescribeRemediationConfigurations")]
		StarlingDoveService_DescribeRemediationConfigurations = 0,
	}
	
	public enum DescribeRemediationExceptionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DescribeRemediationExceptions")]
		StarlingDoveService_DescribeRemediationExceptions = 0,
	}
	
	public enum DescribeRemediationExecutionStatusX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DescribeRemediationExecutionStatus")]
		StarlingDoveService_DescribeRemediationExecutionStatus = 0,
	}
	
	public enum DescribeRetentionConfigurationsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.DescribeRetentionConfigurations")]
		StarlingDoveService_DescribeRetentionConfigurations = 0,
	}
	
	public enum GetAggregateComplianceDetailsByConfigRuleX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.GetAggregateComplianceDetailsByConfigRule")]
		StarlingDoveService_GetAggregateComplianceDetailsByConfigRule = 0,
	}
	
	public enum GetAggregateConfigRuleComplianceSummaryX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.GetAggregateConfigRuleComplianceSummary")]
		StarlingDoveService_GetAggregateConfigRuleComplianceSummary = 0,
	}
	
	public enum GetAggregateConformancePackComplianceSummaryX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.GetAggregateConformancePackComplianceSummary")]
		StarlingDoveService_GetAggregateConformancePackComplianceSummary = 0,
	}
	
	public enum GetAggregateDiscoveredResourceCountsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.GetAggregateDiscoveredResourceCounts")]
		StarlingDoveService_GetAggregateDiscoveredResourceCounts = 0,
	}
	
	public enum GetAggregateResourceConfigX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.GetAggregateResourceConfig")]
		StarlingDoveService_GetAggregateResourceConfig = 0,
	}
	
	public enum GetComplianceDetailsByConfigRuleX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.GetComplianceDetailsByConfigRule")]
		StarlingDoveService_GetComplianceDetailsByConfigRule = 0,
	}
	
	public enum GetComplianceDetailsByResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.GetComplianceDetailsByResource")]
		StarlingDoveService_GetComplianceDetailsByResource = 0,
	}
	
	public enum GetComplianceSummaryByConfigRuleX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.GetComplianceSummaryByConfigRule")]
		StarlingDoveService_GetComplianceSummaryByConfigRule = 0,
	}
	
	public enum GetComplianceSummaryByResourceTypeX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.GetComplianceSummaryByResourceType")]
		StarlingDoveService_GetComplianceSummaryByResourceType = 0,
	}
	
	public enum GetConformancePackComplianceDetailsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.GetConformancePackComplianceDetails")]
		StarlingDoveService_GetConformancePackComplianceDetails = 0,
	}
	
	public enum GetConformancePackComplianceSummaryX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.GetConformancePackComplianceSummary")]
		StarlingDoveService_GetConformancePackComplianceSummary = 0,
	}
	
	public enum GetCustomRulePolicyX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.GetCustomRulePolicy")]
		StarlingDoveService_GetCustomRulePolicy = 0,
	}
	
	public enum GetDiscoveredResourceCountsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.GetDiscoveredResourceCounts")]
		StarlingDoveService_GetDiscoveredResourceCounts = 0,
	}
	
	public enum GetOrganizationConfigRuleDetailedStatusX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.GetOrganizationConfigRuleDetailedStatus")]
		StarlingDoveService_GetOrganizationConfigRuleDetailedStatus = 0,
	}
	
	public enum GetOrganizationConformancePackDetailedStatusX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.GetOrganizationConformancePackDetailedStatus")]
		StarlingDoveService_GetOrganizationConformancePackDetailedStatus = 0,
	}
	
	public enum GetOrganizationCustomRulePolicyX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.GetOrganizationCustomRulePolicy")]
		StarlingDoveService_GetOrganizationCustomRulePolicy = 0,
	}
	
	public enum GetResourceConfigHistoryX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.GetResourceConfigHistory")]
		StarlingDoveService_GetResourceConfigHistory = 0,
	}
	
	public enum GetResourceEvaluationSummaryX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.GetResourceEvaluationSummary")]
		StarlingDoveService_GetResourceEvaluationSummary = 0,
	}
	
	public enum GetStoredQueryX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.GetStoredQuery")]
		StarlingDoveService_GetStoredQuery = 0,
	}
	
	public enum ListAggregateDiscoveredResourcesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.ListAggregateDiscoveredResources")]
		StarlingDoveService_ListAggregateDiscoveredResources = 0,
	}
	
	public enum ListConformancePackComplianceScoresX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.ListConformancePackComplianceScores")]
		StarlingDoveService_ListConformancePackComplianceScores = 0,
	}
	
	public enum ListDiscoveredResourcesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.ListDiscoveredResources")]
		StarlingDoveService_ListDiscoveredResources = 0,
	}
	
	public enum ListResourceEvaluationsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.ListResourceEvaluations")]
		StarlingDoveService_ListResourceEvaluations = 0,
	}
	
	public enum ListStoredQueriesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.ListStoredQueries")]
		StarlingDoveService_ListStoredQueries = 0,
	}
	
	public enum ListTagsForResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.ListTagsForResource")]
		StarlingDoveService_ListTagsForResource = 0,
	}
	
	public enum PutAggregationAuthorizationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.PutAggregationAuthorization")]
		StarlingDoveService_PutAggregationAuthorization = 0,
	}
	
	public enum PutConfigRuleX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.PutConfigRule")]
		StarlingDoveService_PutConfigRule = 0,
	}
	
	public enum PutConfigurationAggregatorX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.PutConfigurationAggregator")]
		StarlingDoveService_PutConfigurationAggregator = 0,
	}
	
	public enum PutConfigurationRecorderX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.PutConfigurationRecorder")]
		StarlingDoveService_PutConfigurationRecorder = 0,
	}
	
	public enum PutConformancePackX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.PutConformancePack")]
		StarlingDoveService_PutConformancePack = 0,
	}
	
	public enum PutDeliveryChannelX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.PutDeliveryChannel")]
		StarlingDoveService_PutDeliveryChannel = 0,
	}
	
	public enum PutEvaluationsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.PutEvaluations")]
		StarlingDoveService_PutEvaluations = 0,
	}
	
	public enum PutExternalEvaluationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.PutExternalEvaluation")]
		StarlingDoveService_PutExternalEvaluation = 0,
	}
	
	public enum PutOrganizationConfigRuleX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.PutOrganizationConfigRule")]
		StarlingDoveService_PutOrganizationConfigRule = 0,
	}
	
	public enum PutOrganizationConformancePackX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.PutOrganizationConformancePack")]
		StarlingDoveService_PutOrganizationConformancePack = 0,
	}
	
	public enum PutRemediationConfigurationsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.PutRemediationConfigurations")]
		StarlingDoveService_PutRemediationConfigurations = 0,
	}
	
	public enum PutRemediationExceptionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.PutRemediationExceptions")]
		StarlingDoveService_PutRemediationExceptions = 0,
	}
	
	public enum PutResourceConfigX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.PutResourceConfig")]
		StarlingDoveService_PutResourceConfig = 0,
	}
	
	public enum PutRetentionConfigurationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.PutRetentionConfiguration")]
		StarlingDoveService_PutRetentionConfiguration = 0,
	}
	
	public enum PutStoredQueryX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.PutStoredQuery")]
		StarlingDoveService_PutStoredQuery = 0,
	}
	
	public enum SelectAggregateResourceConfigX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.SelectAggregateResourceConfig")]
		StarlingDoveService_SelectAggregateResourceConfig = 0,
	}
	
	public enum SelectResourceConfigX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.SelectResourceConfig")]
		StarlingDoveService_SelectResourceConfig = 0,
	}
	
	public enum StartConfigRulesEvaluationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.StartConfigRulesEvaluation")]
		StarlingDoveService_StartConfigRulesEvaluation = 0,
	}
	
	public enum StartConfigurationRecorderX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.StartConfigurationRecorder")]
		StarlingDoveService_StartConfigurationRecorder = 0,
	}
	
	public enum StartRemediationExecutionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.StartRemediationExecution")]
		StarlingDoveService_StartRemediationExecution = 0,
	}
	
	public enum StartResourceEvaluationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.StartResourceEvaluation")]
		StarlingDoveService_StartResourceEvaluation = 0,
	}
	
	public enum StopConfigurationRecorderX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.StopConfigurationRecorder")]
		StarlingDoveService_StopConfigurationRecorder = 0,
	}
	
	public enum TagResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.TagResource")]
		StarlingDoveService_TagResource = 0,
	}
	
	public enum UntagResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StarlingDoveService.UntagResource")]
		StarlingDoveService_UntagResource = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
