//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateServiceRoleToAccountResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="associatedAt")]
		public string AssociatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchAssociateClientDeviceWithCoreDeviceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="errorEntries")]
		public AssociateClientDeviceWithCoreDeviceErrorEntry[] ErrorEntries { get; set; }
	}
	
	/// <summary>
	/// Contains an error that occurs from a request to associate a client device with a core device. The <a href="https://docs.aws.amazon.com/greengrass/v2/APIReference/API_BatchAssociateClientDeviceWithCoreDevice.html">BatchAssociateClientDeviceWithCoreDevice</a> operation returns a list of these errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateClientDeviceWithCoreDeviceErrorEntry
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingName")]
		public string ThingName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Contains a request to associate a client device with a core device. The <a href="https://docs.aws.amazon.com/greengrass/v2/APIReference/API_BatchAssociateClientDeviceWithCoreDevice.html">BatchAssociateClientDeviceWithCoreDevice</a> operation consumes a list of these requests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateClientDeviceWithCoreDeviceEntry
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="thingName")]
		public string ThingName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDisassociateClientDeviceFromCoreDeviceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="errorEntries")]
		public DisassociateClientDeviceFromCoreDeviceErrorEntry[] ErrorEntries { get; set; }
	}
	
	/// <summary>
	/// Contains an error that occurs from a request to disassociate a client device from a core device. The <a href="https://docs.aws.amazon.com/greengrass/v2/APIReference/API_BatchDisassociateClientDeviceWithCoreDevice.html">BatchDisassociateClientDeviceWithCoreDevice</a> operation returns a list of these errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateClientDeviceFromCoreDeviceErrorEntry
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingName")]
		public string ThingName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Contains a request to disassociate a client device from a core device. The <a href="https://docs.aws.amazon.com/greengrass/v2/APIReference/API_BatchDisassociateClientDeviceWithCoreDevice.html">BatchDisassociateClientDeviceWithCoreDevice</a> operation consumes a list of these requests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateClientDeviceFromCoreDeviceEntry
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="thingName")]
		public string ThingName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelDeploymentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateComponentVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="componentName")]
		public string ComponentName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="componentVersion")]
		public string ComponentVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTimestamp")]
		public System.DateTimeOffset CreationTimestamp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public CloudComponentStatus Status { get; set; }
	}
	
	/// <summary>
	/// Contains the status of a component version in the IoT Greengrass service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CloudComponentStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="componentState")]
		public CloudComponentState ComponentState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public StringMap Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendorGuidance")]
		public VendorGuidance VendorGuidance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendorGuidanceMessage")]
		public string VendorGuidanceMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CloudComponentState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUESTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPLOYABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPRECATED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StringMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VendorGuidance
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISCONTINUED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 2,
	}
	
	/// <summary>
	/// Contains information about a platform that a component supports.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComponentPlatform
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public PlatformAttributesMap Attributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlatformAttributesMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComponentDependencyMap
	{
	}
	
	/// <summary>
	/// Contains parameters for a Lambda function that runs on IoT Greengrass.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LambdaExecutionParameters
	{
		
		[System.Runtime.Serialization.DataMember(Name="eventSources")]
		public LambdaEventSource[] EventSources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxQueueSize")]
		public System.Nullable<System.Int32> MaxQueueSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxInstancesCount")]
		public System.Nullable<System.Int32> MaxInstancesCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxIdleTimeInSeconds")]
		public System.Nullable<System.Int32> MaxIdleTimeInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeoutInSeconds")]
		public System.Nullable<System.Int32> TimeoutInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusTimeoutInSeconds")]
		public System.Nullable<System.Int32> StatusTimeoutInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pinned")]
		public System.Nullable<System.Boolean> Pinned { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inputPayloadEncodingType")]
		public LambdaInputPayloadEncodingType InputPayloadEncodingType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="execArgs")]
		public string[] ExecArgs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentVariables")]
		public LambdaEnvironmentVariables EnvironmentVariables { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linuxProcessParams")]
		public LambdaLinuxProcessParams LinuxProcessParams { get; set; }
	}
	
	/// <summary>
	/// Contains information about an event source for an Lambda function. The event source defines the topics on which this Lambda function subscribes to receive messages that run the function.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LambdaEventSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="topic")]
		public string Topic { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public LambdaEventSourceType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LambdaEventSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUB_SUB = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IOT_CORE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LambdaInputPayloadEncodingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		json = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		binary = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LambdaEnvironmentVariables
	{
	}
	
	/// <summary>
	/// Contains parameters for a Linux process that contains an Lambda function.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LambdaLinuxProcessParams
	{
		
		[System.Runtime.Serialization.DataMember(Name="isolationMode")]
		public LambdaIsolationMode IsolationMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="containerParams")]
		public LambdaContainerParams ContainerParams { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LambdaIsolationMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreengrassContainer = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoContainer = 1,
	}
	
	/// <summary>
	/// Contains information about a container in which Lambda functions run on Greengrass core devices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LambdaContainerParams
	{
		
		[System.Runtime.Serialization.DataMember(Name="memorySizeInKB")]
		public System.Nullable<System.Int32> MemorySizeInKB { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mountROSysfs")]
		public System.Nullable<System.Boolean> MountROSysfs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="volumes")]
		public LambdaVolumeMount[] Volumes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="devices")]
		public LambdaDeviceMount[] Devices { get; set; }
	}
	
	/// <summary>
	/// Contains information about a volume that Linux processes in a container can access. When you define a volume, the IoT Greengrass Core software mounts the source files to the destination inside the container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LambdaVolumeMount
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourcePath")]
		public string SourcePath { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationPath")]
		public string DestinationPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permission")]
		public LambdaFilesystemPermission Permission { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="addGroupOwner")]
		public System.Nullable<System.Boolean> AddGroupOwner { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LambdaFilesystemPermission
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ro = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rw = 1,
	}
	
	/// <summary>
	/// Contains information about a device that Linux processes in a container can access.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LambdaDeviceMount
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permission")]
		public LambdaFilesystemPermission Permission { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="addGroupOwner")]
		public System.Nullable<System.Boolean> AddGroupOwner { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RequestAlreadyInProgressException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDeploymentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="deploymentId")]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iotJobId")]
		public string IotJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iotJobArn")]
		public string IotJobArn { get; set; }
	}
	
	/// <summary>
	/// Contains information about a component to deploy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComponentDeploymentSpecification
	{
		
		[System.Runtime.Serialization.DataMember(Name="componentVersion")]
		public string ComponentVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configurationUpdate")]
		public ComponentConfigurationUpdate ConfigurationUpdate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runWith")]
		public ComponentRunWith RunWith { get; set; }
	}
	
	/// <summary>
	/// Contains information about a deployment's update to a component's configuration on Greengrass core devices. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/update-component-configurations.html">Update component configurations</a> in the <i>IoT Greengrass V2 Developer Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComponentConfigurationUpdate
	{
		
		[System.Runtime.Serialization.DataMember(Name="merge")]
		public string Merge { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reset")]
		public string[] Reset { get; set; }
	}
	
	/// <summary>
	/// Contains information system user and group that the IoT Greengrass Core software uses to run component processes on the core device. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-user">Configure the user and group that run components</a> in the <i>IoT Greengrass V2 Developer Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComponentRunWith
	{
		
		[System.Runtime.Serialization.DataMember(Name="posixUser")]
		public string PosixUser { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="systemResourceLimits")]
		public SystemResourceLimits SystemResourceLimits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="windowsUser")]
		public string WindowsUser { get; set; }
	}
	
	/// <summary>
	/// Contains information about system resource limits that the IoT Greengrass Core software applies to a component's processes. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-system-resource-limits">Configure system resource limits for components</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SystemResourceLimits
	{
		
		[System.Runtime.Serialization.DataMember(Name="memory")]
		public System.Nullable<System.Int32> Memory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cpus")]
		public System.Nullable<System.Double> Cpus { get; set; }
	}
	
	/// <summary>
	/// Contains information about the rollout configuration for a job. This configuration defines the rate at which the job deploys a configuration to a fleet of target devices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IoTJobExecutionsRolloutConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="exponentialRate")]
		public IoTJobExponentialRolloutRate ExponentialRate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maximumPerMinute")]
		public System.Nullable<System.Int32> MaximumPerMinute { get; set; }
	}
	
	/// <summary>
	/// Contains information about an exponential rollout rate for a configuration deployment job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IoTJobExponentialRolloutRate
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="baseRatePerMinute")]
		public int BaseRatePerMinute { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="incrementFactor")]
		public double IncrementFactor { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rateIncreaseCriteria")]
		public IoTJobRateIncreaseCriteria RateIncreaseCriteria { get; set; }
	}
	
	/// <summary>
	/// Contains information about criteria to meet before a job increases its rollout rate. Specify either <code>numberOfNotifiedThings</code> or <code>numberOfSucceededThings</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IoTJobRateIncreaseCriteria
	{
		
		[System.Runtime.Serialization.DataMember(Name="numberOfNotifiedThings")]
		public System.Nullable<System.Int32> NumberOfNotifiedThings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfSucceededThings")]
		public System.Nullable<System.Int32> NumberOfSucceededThings { get; set; }
	}
	
	/// <summary>
	/// Contains a list of criteria that define when and how to cancel a configuration deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IoTJobAbortConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="criteriaList")]
		public IoTJobAbortCriteria[] CriteriaList { get; set; }
	}
	
	/// <summary>
	/// <p>Contains criteria that define when and how to cancel a job.</p> <p>The deployment stops if the following conditions are true:</p> <ol> <li> <p>The number of things that receive the deployment exceeds the <code>minNumberOfExecutedThings</code>.</p> </li> <li> <p>The percentage of failures with type <code>failureType</code> exceeds the <code>thresholdPercentage</code>.</p> </li> </ol>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IoTJobAbortCriteria
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="failureType")]
		public IoTJobExecutionFailureType FailureType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public IoTJobAbortAction Action { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="thresholdPercentage")]
		public double ThresholdPercentage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="minNumberOfExecutedThings")]
		public int MinNumberOfExecutedThings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IoTJobExecutionFailureType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMED_OUT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IoTJobAbortAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCEL = 0,
	}
	
	/// <summary>
	/// Contains information about the timeout configuration for a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IoTJobTimeoutConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="inProgressTimeoutInMinutes")]
		public System.Nullable<System.Int32> InProgressTimeoutInMinutes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeploymentFailureHandlingPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROLLBACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DO_NOTHING = 1,
	}
	
	/// <summary>
	/// <p>Contains information about a deployment's policy that defines when components are safe to update.</p> <p>Each component on a device can report whether or not it's ready to update. After a component and its dependencies are ready, they can apply the update in the deployment. You can configure whether or not the deployment notifies components of an update and waits for a response. You specify the amount of time each component has to respond to the update notification.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentComponentUpdatePolicy
	{
		
		[System.Runtime.Serialization.DataMember(Name="timeoutInSeconds")]
		public System.Nullable<System.Int32> TimeoutInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public DeploymentComponentUpdatePolicyAction Action { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeploymentComponentUpdatePolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOTIFY_COMPONENTS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIP_NOTIFY_COMPONENTS = 1,
	}
	
	/// <summary>
	/// Contains information about how long a component on a core device can validate its configuration updates before it times out. Components can use the <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/interprocess-communication.html#ipc-operation-subscribetovalidateconfigurationupdates">SubscribeToValidateConfigurationUpdates</a> IPC operation to receive notifications when a deployment specifies a configuration update. Then, components can respond with the <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/interprocess-communication.html#ipc-operation-sendconfigurationvalidityreport">SendConfigurationValidityReport</a> IPC operation. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/create-deployments.html">Create deployments</a> in the <i>IoT Greengrass V2 Developer Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentConfigurationValidationPolicy
	{
		
		[System.Runtime.Serialization.DataMember(Name="timeoutInSeconds")]
		public System.Nullable<System.Int32> TimeoutInSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeComponentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentName")]
		public string ComponentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentVersion")]
		public string ComponentVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTimestamp")]
		public System.DateTimeOffset CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public CloudComponentStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platforms")]
		public ComponentPlatform[] Platforms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateServiceRoleFromAccountResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="disassociatedAt")]
		public string DisassociatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetComponentResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipeOutputFormat")]
		public RecipeOutputFormat RecipeOutputFormat { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipe")]
		public string Recipe { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RecipeOutputFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YAML = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetComponentVersionArtifactResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="preSignedUrl")]
		public string PreSignedUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetConnectivityInfoResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="connectivityInfo")]
		public ConnectivityInfo[] ConnectivityInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Contains information about an endpoint and port where client devices can connect to an MQTT broker on a Greengrass core device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConnectivityInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hostAddress")]
		public string HostAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="portNumber")]
		public System.Nullable<System.Int32> PortNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public string Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetCoreDeviceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="coreDeviceThingName")]
		public string CoreDeviceThingName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coreVersion")]
		public string CoreVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public string Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="architecture")]
		public string Architecture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public CoreDeviceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastStatusUpdateTimestamp")]
		public System.DateTimeOffset LastStatusUpdateTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CoreDeviceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEALTHY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNHEALTHY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDeploymentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="targetArn")]
		public string TargetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentId")]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentName")]
		public string DeploymentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentStatus")]
		public DeploymentStatus DeploymentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iotJobId")]
		public string IotJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iotJobArn")]
		public string IotJobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="components")]
		public ComponentDeploymentSpecifications Components { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentPolicies")]
		public DeploymentPolicies DeploymentPolicies { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iotJobConfiguration")]
		public DeploymentIoTJobConfiguration IotJobConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTimestamp")]
		public System.DateTimeOffset CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isLatestForTarget")]
		public System.Nullable<System.Boolean> IsLatestForTarget { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentTargetArn")]
		public string ParentTargetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeploymentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComponentDeploymentSpecifications
	{
	}
	
	/// <summary>
	/// Contains information about policies that define how a deployment updates components and handles failure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentPolicies
	{
		
		[System.Runtime.Serialization.DataMember(Name="failureHandlingPolicy")]
		public DeploymentFailureHandlingPolicy FailureHandlingPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentUpdatePolicy")]
		public DeploymentComponentUpdatePolicy ComponentUpdatePolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configurationValidationPolicy")]
		public DeploymentConfigurationValidationPolicy ConfigurationValidationPolicy { get; set; }
	}
	
	/// <summary>
	/// Contains information about an IoT job configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentIoTJobConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobExecutionsRolloutConfig")]
		public IoTJobExecutionsRolloutConfig JobExecutionsRolloutConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="abortConfig")]
		public IoTJobAbortConfig AbortConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeoutConfig")]
		public IoTJobTimeoutConfig TimeoutConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetServiceRoleForAccountResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="associatedAt")]
		public string AssociatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListClientDevicesAssociatedWithCoreDeviceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="associatedClientDevices")]
		public AssociatedClientDevice[] AssociatedClientDevices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains information about a client device that is associated to a core device for cloud discovery.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociatedClientDevice
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingName")]
		public string ThingName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="associationTimestamp")]
		public System.DateTimeOffset AssociationTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListComponentVersionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="componentVersions")]
		public ComponentVersionListItem[] ComponentVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains information about a component version in a list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComponentVersionListItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="componentName")]
		public string ComponentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentVersion")]
		public string ComponentVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListComponentsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="components")]
		public Component[] Components { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains information about a component.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Component
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentName")]
		public string ComponentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latestVersion")]
		public ComponentLatestVersion LatestVersion { get; set; }
	}
	
	/// <summary>
	/// Contains information about the latest version of a component.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComponentLatestVersion
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentVersion")]
		public string ComponentVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTimestamp")]
		public System.DateTimeOffset CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platforms")]
		public ComponentPlatform[] Platforms { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCoreDevicesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="coreDevices")]
		public CoreDevice[] CoreDevices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains information about a Greengrass core device, which is an IoT thing that runs the IoT Greengrass Core software.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CoreDevice
	{
		
		[System.Runtime.Serialization.DataMember(Name="coreDeviceThingName")]
		public string CoreDeviceThingName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public CoreDeviceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastStatusUpdateTimestamp")]
		public System.DateTimeOffset LastStatusUpdateTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDeploymentsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="deployments")]
		public Deployment[] Deployments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains information about a deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Deployment
	{
		
		[System.Runtime.Serialization.DataMember(Name="targetArn")]
		public string TargetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentId")]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentName")]
		public string DeploymentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTimestamp")]
		public System.DateTimeOffset CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentStatus")]
		public DeploymentStatus DeploymentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isLatestForTarget")]
		public System.Nullable<System.Boolean> IsLatestForTarget { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentTargetArn")]
		public string ParentTargetArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEffectiveDeploymentsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="effectiveDeployments")]
		public EffectiveDeployment[] EffectiveDeployments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains information about a deployment job that IoT Greengrass sends to a Greengrass core device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EffectiveDeployment
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deploymentId")]
		public string DeploymentId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deploymentName")]
		public string DeploymentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iotJobId")]
		public string IotJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iotJobArn")]
		public string IotJobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetArn")]
		public string TargetArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="coreDeviceExecutionStatus")]
		public EffectiveDeploymentExecutionStatus CoreDeviceExecutionStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTimestamp")]
		public System.DateTimeOffset CreationTimestamp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modifiedTimestamp")]
		public System.DateTimeOffset ModifiedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusDetails")]
		public EffectiveDeploymentStatusDetails StatusDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EffectiveDeploymentExecutionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMED_OUT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 7,
	}
	
	/// <summary>
	/// <p>Contains all error-related information for the deployment record. The status details will be null if the deployment is in a success state.</p> <note> <p>Greengrass nucleus v2.8.0 or later is required to get an accurate <code>errorStack</code> and <code>errorTypes</code> response. This field will not be returned for earlier Greengrass nucleus versions.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EffectiveDeploymentStatusDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="errorStack")]
		public string[] ErrorStack { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorTypes")]
		public string[] ErrorTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListInstalledComponentsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="installedComponents")]
		public InstalledComponent[] InstalledComponents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains information about a component on a Greengrass core device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstalledComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="componentName")]
		public string ComponentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentVersion")]
		public string ComponentVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lifecycleState")]
		public InstalledComponentLifecycleState LifecycleState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lifecycleStateDetails")]
		public string LifecycleStateDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isRoot")]
		public System.Nullable<System.Boolean> IsRoot { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastStatusChangeTimestamp")]
		public System.DateTimeOffset LastStatusChangeTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastReportedTimestamp")]
		public System.DateTimeOffset LastReportedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastInstallationSource")]
		public string LastInstallationSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lifecycleStatusCodes")]
		public string[] LifecycleStatusCodes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InstalledComponentLifecycleState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTALLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERRORED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BROKEN = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINISHED = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResolveComponentCandidatesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="resolvedComponentVersions")]
		public ResolvedComponentVersion[] ResolvedComponentVersions { get; set; }
	}
	
	/// <summary>
	/// Contains information about a component version that is compatible to run on a Greengrass core device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResolvedComponentVersion
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentName")]
		public string ComponentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentVersion")]
		public string ComponentVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recipe")]
		public string Recipe { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendorGuidance")]
		public VendorGuidance VendorGuidance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Contains information about a component that is a candidate to deploy to a Greengrass core device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComponentCandidate
	{
		
		[System.Runtime.Serialization.DataMember(Name="componentName")]
		public string ComponentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentVersion")]
		public string ComponentVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="versionRequirements")]
		public ComponentVersionRequirementMap VersionRequirements { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComponentVersionRequirementMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateConnectivityInfoResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateServiceRoleToAccountRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchAssociateClientDeviceWithCoreDeviceRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public AssociateClientDeviceWithCoreDeviceEntry[] Entries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDisassociateClientDeviceFromCoreDeviceRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public DisassociateClientDeviceFromCoreDeviceEntry[] Entries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelDeploymentRequest
	{
	}
	
	/// <summary>
	/// Contains information about a component dependency for a Lambda function component.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComponentDependencyRequirement
	{
		
		[System.Runtime.Serialization.DataMember(Name="versionRequirement")]
		public string VersionRequirement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dependencyType")]
		public ComponentDependencyType DependencyType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ComponentDependencyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOFT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ComponentVisibilityScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLIC = 1,
	}
	
	/// <summary>
	/// Contains information about an Lambda function to import to create a component.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LambdaFunctionRecipeSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lambdaArn")]
		public string LambdaArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentName")]
		public string ComponentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentVersion")]
		public string ComponentVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentPlatforms")]
		public ComponentPlatform[] ComponentPlatforms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentDependencies")]
		public ComponentDependencyMap ComponentDependencies { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentLambdaParameters")]
		public LambdaExecutionParameters ComponentLambdaParameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateComponentVersionRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="inlineRecipe")]
		public string InlineRecipe { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lambdaFunction")]
		public LambdaFunctionRecipeSource LambdaFunction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDeploymentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetArn")]
		public string TargetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentName")]
		public string DeploymentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="components")]
		public ComponentDeploymentSpecifications Components { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iotJobConfiguration")]
		public DeploymentIoTJobConfiguration IotJobConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentPolicies")]
		public DeploymentPolicies DeploymentPolicies { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentTargetArn")]
		public string ParentTargetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteComponentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteCoreDeviceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDeploymentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeploymentHistoryFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LATEST_ONLY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeComponentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateServiceRoleFromAccountRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetComponentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetComponentVersionArtifactRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetConnectivityInfoRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetCoreDeviceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDeploymentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetServiceRoleForAccountRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InstalledComponentTopologyFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROOT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListClientDevicesAssociatedWithCoreDeviceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListComponentVersionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListComponentsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCoreDevicesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDeploymentsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEffectiveDeploymentsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListInstalledComponentsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResolveComponentCandidatesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public ComponentPlatform Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentCandidates")]
		public ComponentCandidate[] ComponentCandidates { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateConnectivityInfoRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectivityInfo")]
		public ConnectivityInfo[] ConnectivityInfo { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Associates a Greengrass service role with IoT Greengrass for your Amazon Web Services account in this Amazon Web Services Region. IoT Greengrass uses this role to verify the identity of client devices and manage core device connectivity information. The role must include the <a href="https://console.aws.amazon.com/iam/home#/policies/arn:awsiam::aws:policy/service-role/AWSGreengrassResourceAccessRolePolicy">AWSGreengrassResourceAccessRolePolicy</a> managed policy or a custom policy that defines equivalent permissions for the IoT Greengrass features that you use. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-service-role.html">Greengrass service role</a> in the <i>IoT Greengrass Version 2 Developer Guide</i>.
		/// AssociateServiceRoleToAccount greengrass/servicerole
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AssociateServiceRoleToAccountResponse> AssociateServiceRoleToAccountAsync(AssociateServiceRoleToAccountPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/servicerole";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AssociateServiceRoleToAccountResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates the Greengrass service role from IoT Greengrass for your Amazon Web Services account in this Amazon Web Services Region. Without a service role, IoT Greengrass can't verify the identity of client devices or manage core device connectivity information. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-service-role.html">Greengrass service role</a> in the <i>IoT Greengrass Version 2 Developer Guide</i>.
		/// DisassociateServiceRoleFromAccount greengrass/servicerole
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisassociateServiceRoleFromAccountResponse> DisassociateServiceRoleFromAccountAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/servicerole";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DisassociateServiceRoleFromAccountResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the service role associated with IoT Greengrass for your Amazon Web Services account in this Amazon Web Services Region. IoT Greengrass uses this role to verify the identity of client devices and manage core device connectivity information. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-service-role.html">Greengrass service role</a> in the <i>IoT Greengrass Version 2 Developer Guide</i>.
		/// GetServiceRoleForAccount greengrass/servicerole
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetServiceRoleForAccountResponse> GetServiceRoleForAccountAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/servicerole";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetServiceRoleForAccountResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Associates a list of client devices with a core device. Use this API operation to specify which client devices can discover a core device through cloud discovery. With cloud discovery, client devices connect to IoT Greengrass to retrieve associated core devices' connectivity information and certificates. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-cloud-discovery.html">Configure cloud discovery</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p> <note> <p>Client devices are local IoT devices that connect to and communicate with an IoT Greengrass core device over MQTT. You can connect client devices to a core device to sync MQTT messages and data to Amazon Web Services IoT Core and interact with client devices in Greengrass components. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/interact-with-local-iot-devices.html">Interact with local IoT devices</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p> </note>
		/// BatchAssociateClientDeviceWithCoreDevice greengrass/v2/coreDevices/{coreDeviceThingName}/associateClientDevices
		/// </summary>
		/// <param name="coreDeviceThingName">The name of the core device. This is also the name of the IoT thing.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<BatchAssociateClientDeviceWithCoreDeviceResponse> BatchAssociateClientDeviceWithCoreDeviceAsync(string coreDeviceThingName, BatchAssociateClientDeviceWithCoreDevicePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/v2/coreDevices/"+ (coreDeviceThingName==null? "" : System.Uri.EscapeDataString(coreDeviceThingName))+"/associateClientDevices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchAssociateClientDeviceWithCoreDeviceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates a list of client devices from a core device. After you disassociate a client device from a core device, the client device won't be able to use cloud discovery to retrieve the core device's connectivity information and certificates.
		/// BatchDisassociateClientDeviceFromCoreDevice greengrass/v2/coreDevices/{coreDeviceThingName}/disassociateClientDevices
		/// </summary>
		/// <param name="coreDeviceThingName">The name of the core device. This is also the name of the IoT thing.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<BatchDisassociateClientDeviceFromCoreDeviceResponse> BatchDisassociateClientDeviceFromCoreDeviceAsync(string coreDeviceThingName, BatchDisassociateClientDeviceFromCoreDevicePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/v2/coreDevices/"+ (coreDeviceThingName==null? "" : System.Uri.EscapeDataString(coreDeviceThingName))+"/disassociateClientDevices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchDisassociateClientDeviceFromCoreDeviceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels a deployment. This operation cancels the deployment for devices that haven't yet received it. If a device already received the deployment, this operation doesn't change anything for that device.
		/// CancelDeployment greengrass/v2/deployments/{deploymentId}/cancel
		/// </summary>
		/// <param name="deploymentId">The ID of the deployment.
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<CancelDeploymentResponse> CancelDeploymentAsync(string deploymentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/v2/deployments/"+ (deploymentId==null? "" : System.Uri.EscapeDataString(deploymentId))+"/cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CancelDeploymentResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a component. Components are software that run on Greengrass core devices. After you develop and test a component on your core device, you can use this operation to upload your component to IoT Greengrass. Then, you can deploy the component to other core devices.</p> <p>You can use this operation to do the following:</p> <ul> <li> <p> <b>Create components from recipes</b> </p> <p>Create a component from a recipe, which is a file that defines the component's metadata, parameters, dependencies, lifecycle, artifacts, and platform capability. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/component-recipe-reference.html">IoT Greengrass component recipe reference</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p> <p>To create a component from a recipe, specify <code>inlineRecipe</code> when you call this operation.</p> </li> <li> <p> <b>Create components from Lambda functions</b> </p> <p>Create a component from an Lambda function that runs on IoT Greengrass. This creates a recipe and artifacts from the Lambda function's deployment package. You can use this operation to migrate Lambda functions from IoT Greengrass V1 to IoT Greengrass V2.</p> <p>This function only accepts Lambda functions that use the following runtimes:</p> <ul> <li> <p>Python 2.7 – <code>python2.7</code> </p> </li> <li> <p>Python 3.7 – <code>python3.7</code> </p> </li> <li> <p>Python 3.8 – <code>python3.8</code> </p> </li> <li> <p>Python 3.9 – <code>python3.9</code> </p> </li> <li> <p>Java 8 – <code>java8</code> </p> </li> <li> <p>Java 11 – <code>java11</code> </p> </li> <li> <p>Node.js 10 – <code>nodejs10.x</code> </p> </li> <li> <p>Node.js 12 – <code>nodejs12.x</code> </p> </li> <li> <p>Node.js 14 – <code>nodejs14.x</code> </p> </li> </ul> <p>To create a component from a Lambda function, specify <code>lambdaFunction</code> when you call this operation.</p> <note> <p>IoT Greengrass currently supports Lambda functions on only Linux core devices.</p> </note> </li> </ul>
		/// CreateComponentVersion greengrass/v2/createComponentVersion
		/// </summary>
		public async Task CreateComponentVersionAsync(CreateComponentVersionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/v2/createComponentVersion";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a continuous deployment for a target, which is a Greengrass core device or group of core devices. When you add a new core device to a group of core devices that has a deployment, IoT Greengrass deploys that group's deployment to the new device.</p> <p>You can define one deployment for each target. When you create a new deployment for a target that has an existing deployment, you replace the previous deployment. IoT Greengrass applies the new deployment to the target devices.</p> <p>Every deployment has a revision number that indicates how many deployment revisions you define for a target. Use this operation to create a new revision of an existing deployment.</p> <p>For more information, see the <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/create-deployments.html">Create deployments</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
		/// CreateDeployment greengrass/v2/deployments
		/// </summary>
		public async Task CreateDeploymentAsync(CreateDeploymentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/v2/deployments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a paginated list of deployments.
		/// ListDeployments greengrass/v2/deployments
		/// </summary>
		/// <param name="targetArn">The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the target IoT thing or thing group.</param>
		/// <param name="historyFilter"><p>The filter for the list of deployments. Choose one of the following options:</p> <ul> <li> <p> <code>ALL</code> – The list includes all deployments.</p> </li> <li> <p> <code>LATEST_ONLY</code> – The list includes only the latest revision of each deployment.</p> </li> </ul> <p>Default: <code>LATEST_ONLY</code> </p></param>
		/// <param name="parentTargetArn">The parent deployment's target <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> within a subdeployment.</param>
		/// <param name="maxResults">The maximum number of results to be returned per paginated request.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">The token to be used for the next set of paginated results.</param>
		/// <returns>Success</returns>
		public async Task<ListDeploymentsResponse> ListDeploymentsAsync(string targetArn, DeploymentHistoryFilter historyFilter, string parentTargetArn, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/v2/deployments?targetArn=" + (targetArn==null? "" : System.Uri.EscapeDataString(targetArn))+"&historyFilter=" + historyFilter+"&parentTargetArn=" + (parentTargetArn==null? "" : System.Uri.EscapeDataString(parentTargetArn))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListDeploymentsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a version of a component from IoT Greengrass.</p> <note> <p>This operation deletes the component's recipe and artifacts. As a result, deployments that refer to this component version will fail. If you have deployments that use this component version, you can remove the component from the deployment or update the deployment to use a valid version.</p> </note>
		/// DeleteComponent greengrass/v2/components/{arn}
		/// </summary>
		/// <param name="arn">The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the component version.</param>
		public async Task DeleteComponentAsync(string arn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/v2/components/"+ (arn==null? "" : System.Uri.EscapeDataString(arn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the recipe for a version of a component.
		/// GetComponent greengrass/v2/components/{arn}
		/// </summary>
		/// <param name="recipeOutputFormat">The format of the recipe.</param>
		/// <param name="arn">The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the component version.</param>
		/// <returns>Success</returns>
		public async Task<GetComponentResponse> GetComponentAsync(RecipeOutputFormat recipeOutputFormat, string arn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/v2/components/"+ (arn==null? "" : System.Uri.EscapeDataString(arn))+"?recipeOutputFormat=" + recipeOutputFormat;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetComponentResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a Greengrass core device, which is an IoT thing. This operation removes the core device from the list of core devices. This operation doesn't delete the IoT thing. For more information about how to delete the IoT thing, see <a href="https://docs.aws.amazon.com/iot/latest/apireference/API_DeleteThing.html">DeleteThing</a> in the <i>IoT API Reference</i>.
		/// DeleteCoreDevice greengrass/v2/coreDevices/{coreDeviceThingName}
		/// </summary>
		/// <param name="coreDeviceThingName">The name of the core device. This is also the name of the IoT thing.
		/// Min length: 1
		/// Max length: 128
		// </param>
		public async Task DeleteCoreDeviceAsync(string coreDeviceThingName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/v2/coreDevices/"+ (coreDeviceThingName==null? "" : System.Uri.EscapeDataString(coreDeviceThingName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves metadata for a Greengrass core device.</p> <note> <p>IoT Greengrass relies on individual devices to send status updates to the Amazon Web Services Cloud. If the IoT Greengrass Core software isn't running on the device, or if device isn't connected to the Amazon Web Services Cloud, then the reported status of that device might not reflect its current status. The status timestamp indicates when the device status was last updated.</p> <p>Core devices send status updates at the following times:</p> <ul> <li> <p>When the IoT Greengrass Core software starts</p> </li> <li> <p>When the core device receives a deployment from the Amazon Web Services Cloud</p> </li> <li> <p>When the status of any component on the core device becomes <code>BROKEN</code> </p> </li> <li> <p>At a <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-nucleus-component.html#greengrass-nucleus-component-configuration-fss">regular interval that you can configure</a>, which defaults to 24 hours</p> </li> <li> <p>For IoT Greengrass Core v2.7.0, the core device sends status updates upon local deployment and cloud deployment</p> </li> </ul> </note>
		/// GetCoreDevice greengrass/v2/coreDevices/{coreDeviceThingName}
		/// </summary>
		/// <param name="coreDeviceThingName">The name of the core device. This is also the name of the IoT thing.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<GetCoreDeviceResponse> GetCoreDeviceAsync(string coreDeviceThingName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/v2/coreDevices/"+ (coreDeviceThingName==null? "" : System.Uri.EscapeDataString(coreDeviceThingName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetCoreDeviceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a deployment. To delete an active deployment, you must first cancel it. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/apireference/API_CancelDeployment.html">CancelDeployment</a>.</p> <p>Deleting a deployment doesn't affect core devices that run that deployment, because core devices store the deployment's configuration on the device. Additionally, core devices can roll back to a previous deployment that has been deleted.</p>
		/// DeleteDeployment greengrass/v2/deployments/{deploymentId}
		/// </summary>
		/// <param name="deploymentId">The ID of the deployment.
		/// Min length: 1
		// </param>
		public async Task DeleteDeploymentAsync(string deploymentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/v2/deployments/"+ (deploymentId==null? "" : System.Uri.EscapeDataString(deploymentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a deployment. Deployments define the components that run on Greengrass core devices.
		/// GetDeployment greengrass/v2/deployments/{deploymentId}
		/// </summary>
		/// <param name="deploymentId">The ID of the deployment.
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<GetDeploymentResponse> GetDeploymentAsync(string deploymentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/v2/deployments/"+ (deploymentId==null? "" : System.Uri.EscapeDataString(deploymentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetDeploymentResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves metadata for a version of a component.
		/// DescribeComponent greengrass/v2/components/{arn}/metadata
		/// </summary>
		/// <param name="arn">The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the component version.</param>
		/// <returns>Success</returns>
		public async Task<DescribeComponentResponse> DescribeComponentAsync(string arn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/v2/components/"+ (arn==null? "" : System.Uri.EscapeDataString(arn))+"/metadata";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeComponentResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the pre-signed URL to download a public or a Lambda component artifact. Core devices call this operation to identify the URL that they can use to download an artifact to install.
		/// GetComponentVersionArtifact greengrass/v2/components/{arn}/artifacts/{artifactName}
		/// </summary>
		/// <param name="arn">The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the component version. Specify the ARN of a public or a Lambda component version.</param>
		/// <param name="artifactName"><p>The name of the artifact.</p> <p>You can use the <a href="https://docs.aws.amazon.com/greengrass/v2/APIReference/API_GetComponent.html">GetComponent</a> operation to download the component recipe, which includes the URI of the artifact. The artifact name is the section of the URI after the scheme. For example, in the artifact URI <code>greengrass:SomeArtifact.zip</code>, the artifact name is <code>SomeArtifact.zip</code>.</p>
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<GetComponentVersionArtifactResponse> GetComponentVersionArtifactAsync(string arn, string artifactName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/v2/components/"+ (arn==null? "" : System.Uri.EscapeDataString(arn))+"/artifacts/"+ (artifactName==null? "" : System.Uri.EscapeDataString(artifactName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetComponentVersionArtifactResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves connectivity information for a Greengrass core device.</p> <p>Connectivity information includes endpoints and ports where client devices can connect to an MQTT broker on the core device. When a client device calls the <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-discover-api.html">IoT Greengrass discovery API</a>, IoT Greengrass returns connectivity information for all of the core devices where the client device can connect. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/connect-client-devices.html">Connect client devices to core devices</a> in the <i>IoT Greengrass Version 2 Developer Guide</i>.</p>
		/// GetConnectivityInfo greengrass/things/{thingName}/connectivityInfo
		/// </summary>
		/// <param name="thingName">The name of the core device. This is also the name of the IoT thing.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<GetConnectivityInfoResponse> GetConnectivityInfoAsync(string thingName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/things/"+ (thingName==null? "" : System.Uri.EscapeDataString(thingName))+"/connectivityInfo";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetConnectivityInfoResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates connectivity information for a Greengrass core device.</p> <p>Connectivity information includes endpoints and ports where client devices can connect to an MQTT broker on the core device. When a client device calls the <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-discover-api.html">IoT Greengrass discovery API</a>, IoT Greengrass returns connectivity information for all of the core devices where the client device can connect. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/connect-client-devices.html">Connect client devices to core devices</a> in the <i>IoT Greengrass Version 2 Developer Guide</i>.</p>
		/// UpdateConnectivityInfo greengrass/things/{thingName}/connectivityInfo
		/// </summary>
		/// <param name="thingName">The name of the core device. This is also the name of the IoT thing.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateConnectivityInfoResponse> UpdateConnectivityInfoAsync(string thingName, UpdateConnectivityInfoPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/things/"+ (thingName==null? "" : System.Uri.EscapeDataString(thingName))+"/connectivityInfo";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateConnectivityInfoResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a paginated list of client devices that are associated with a core device.
		/// ListClientDevicesAssociatedWithCoreDevice greengrass/v2/coreDevices/{coreDeviceThingName}/associatedClientDevices
		/// </summary>
		/// <param name="coreDeviceThingName">The name of the core device. This is also the name of the IoT thing.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="maxResults">The maximum number of results to be returned per paginated request.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">The token to be used for the next set of paginated results.</param>
		/// <returns>Success</returns>
		public async Task<ListClientDevicesAssociatedWithCoreDeviceResponse> ListClientDevicesAssociatedWithCoreDeviceAsync(string coreDeviceThingName, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/v2/coreDevices/"+ (coreDeviceThingName==null? "" : System.Uri.EscapeDataString(coreDeviceThingName))+"/associatedClientDevices&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListClientDevicesAssociatedWithCoreDeviceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a paginated list of all versions for a component. Greater versions are listed first.
		/// ListComponentVersions greengrass/v2/components/{arn}/versions
		/// </summary>
		/// <param name="arn">The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the component.</param>
		/// <param name="maxResults">The maximum number of results to be returned per paginated request.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">The token to be used for the next set of paginated results.</param>
		/// <returns>Success</returns>
		public async Task<ListComponentVersionsResponse> ListComponentVersionsAsync(string arn, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/v2/components/"+ (arn==null? "" : System.Uri.EscapeDataString(arn))+"/versions&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListComponentVersionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a paginated list of component summaries. This list includes components that you have permission to view.
		/// ListComponents greengrass/v2/components
		/// </summary>
		/// <param name="scope"><p>The scope of the components to list.</p> <p>Default: <code>PRIVATE</code> </p></param>
		/// <param name="maxResults">The maximum number of results to be returned per paginated request.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">The token to be used for the next set of paginated results.</param>
		/// <returns>Success</returns>
		public async Task<ListComponentsResponse> ListComponentsAsync(ComponentVisibilityScope scope, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/v2/components?scope=" + scope+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListComponentsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves a paginated list of Greengrass core devices.</p> <note> <p>IoT Greengrass relies on individual devices to send status updates to the Amazon Web Services Cloud. If the IoT Greengrass Core software isn't running on the device, or if device isn't connected to the Amazon Web Services Cloud, then the reported status of that device might not reflect its current status. The status timestamp indicates when the device status was last updated.</p> <p>Core devices send status updates at the following times:</p> <ul> <li> <p>When the IoT Greengrass Core software starts</p> </li> <li> <p>When the core device receives a deployment from the Amazon Web Services Cloud</p> </li> <li> <p>When the status of any component on the core device becomes <code>BROKEN</code> </p> </li> <li> <p>At a <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-nucleus-component.html#greengrass-nucleus-component-configuration-fss">regular interval that you can configure</a>, which defaults to 24 hours</p> </li> <li> <p>For IoT Greengrass Core v2.7.0, the core device sends status updates upon local deployment and cloud deployment</p> </li> </ul> </note>
		/// ListCoreDevices greengrass/v2/coreDevices
		/// </summary>
		/// <param name="thingGroupArn">The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the IoT thing group by which to filter. If you specify this parameter, the list includes only core devices that have successfully deployed a deployment that targets the thing group. When you remove a core device from a thing group, the list continues to include that core device.</param>
		/// <param name="status"><p>The core device status by which to filter. If you specify this parameter, the list includes only core devices that have this status. Choose one of the following options:</p> <ul> <li> <p> <code>HEALTHY</code> – The IoT Greengrass Core software and all components run on the core device without issue.</p> </li> <li> <p> <code>UNHEALTHY</code> – The IoT Greengrass Core software or a component is in a failed state on the core device.</p> </li> </ul></param>
		/// <param name="maxResults">The maximum number of results to be returned per paginated request.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">The token to be used for the next set of paginated results.</param>
		/// <returns>Success</returns>
		public async Task<ListCoreDevicesResponse> ListCoreDevicesAsync(string thingGroupArn, CoreDeviceStatus status, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/v2/coreDevices?thingGroupArn=" + (thingGroupArn==null? "" : System.Uri.EscapeDataString(thingGroupArn))+"&status=" + status+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListCoreDevicesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a paginated list of deployment jobs that IoT Greengrass sends to Greengrass core devices.
		/// ListEffectiveDeployments greengrass/v2/coreDevices/{coreDeviceThingName}/effectiveDeployments
		/// </summary>
		/// <param name="coreDeviceThingName">The name of the core device. This is also the name of the IoT thing.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="maxResults">The maximum number of results to be returned per paginated request.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">The token to be used for the next set of paginated results.</param>
		/// <returns>Success</returns>
		public async Task<ListEffectiveDeploymentsResponse> ListEffectiveDeploymentsAsync(string coreDeviceThingName, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/v2/coreDevices/"+ (coreDeviceThingName==null? "" : System.Uri.EscapeDataString(coreDeviceThingName))+"/effectiveDeployments&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListEffectiveDeploymentsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves a paginated list of the components that a Greengrass core device runs. By default, this list doesn't include components that are deployed as dependencies of other components. To include dependencies in the response, set the <code>topologyFilter</code> parameter to <code>ALL</code>.</p> <note> <p>IoT Greengrass relies on individual devices to send status updates to the Amazon Web Services Cloud. If the IoT Greengrass Core software isn't running on the device, or if device isn't connected to the Amazon Web Services Cloud, then the reported status of that device might not reflect its current status. The status timestamp indicates when the device status was last updated.</p> <p>Core devices send status updates at the following times:</p> <ul> <li> <p>When the IoT Greengrass Core software starts</p> </li> <li> <p>When the core device receives a deployment from the Amazon Web Services Cloud</p> </li> <li> <p>When the status of any component on the core device becomes <code>BROKEN</code> </p> </li> <li> <p>At a <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-nucleus-component.html#greengrass-nucleus-component-configuration-fss">regular interval that you can configure</a>, which defaults to 24 hours</p> </li> <li> <p>For IoT Greengrass Core v2.7.0, the core device sends status updates upon local deployment and cloud deployment</p> </li> </ul> </note>
		/// ListInstalledComponents greengrass/v2/coreDevices/{coreDeviceThingName}/installedComponents
		/// </summary>
		/// <param name="coreDeviceThingName">The name of the core device. This is also the name of the IoT thing.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="maxResults">The maximum number of results to be returned per paginated request.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">The token to be used for the next set of paginated results.</param>
		/// <param name="topologyFilter"><p>The filter for the list of components. Choose from the following options:</p> <ul> <li> <p> <code>ALL</code> – The list includes all components installed on the core device.</p> </li> <li> <p> <code>ROOT</code> – The list includes only <i>root</i> components, which are components that you specify in a deployment. When you choose this option, the list doesn't include components that the core device installs as dependencies of other components.</p> </li> </ul> <p>Default: <code>ROOT</code> </p></param>
		/// <returns>Success</returns>
		public async Task<ListInstalledComponentsResponse> ListInstalledComponentsAsync(string coreDeviceThingName, int maxResults, string nextToken, InstalledComponentTopologyFilter topologyFilter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/v2/coreDevices/"+ (coreDeviceThingName==null? "" : System.Uri.EscapeDataString(coreDeviceThingName))+"/installedComponents&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&topologyFilter=" + topologyFilter;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListInstalledComponentsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the list of tags for an IoT Greengrass resource.
		/// ListTagsForResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the resource.</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTagsForResourceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds tags to an IoT Greengrass resource. If a tag already exists for the resource, this operation updates the tag's value.
		/// TagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the resource to tag.</param>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TagResourceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves a list of components that meet the component, version, and platform requirements of a deployment. Greengrass core devices call this operation when they receive a deployment to identify the components to install.</p> <p>This operation identifies components that meet all dependency requirements for a deployment. If the requirements conflict, then this operation returns an error and the deployment fails. For example, this occurs if component <code>A</code> requires version <code>&gt;2.0.0</code> and component <code>B</code> requires version <code>&lt;2.0.0</code> of a component dependency.</p> <p>When you specify the component candidates to resolve, IoT Greengrass compares each component's digest from the core device with the component's digest in the Amazon Web Services Cloud. If the digests don't match, then IoT Greengrass specifies to use the version from the Amazon Web Services Cloud.</p> <important> <p>To use this operation, you must use the data plane API endpoint and authenticate with an IoT device certificate. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/greengrass.html">IoT Greengrass endpoints and quotas</a>.</p> </important>
		/// ResolveComponentCandidates greengrass/v2/resolveComponentCandidates
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ResolveComponentCandidatesResponse> ResolveComponentCandidatesAsync(ResolveComponentCandidatesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/v2/resolveComponentCandidates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ResolveComponentCandidatesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a tag from an IoT Greengrass resource.
		/// UntagResource tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the resource to untag.</param>
		/// <param name="tagKeys">A list of keys for tags to remove from the resource.
		/// Minimum items: 1
		/// Maximum items: 200
		// </param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UntagResourceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class AssociateServiceRoleToAccountPutBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the service role to associate with IoT Greengrass for your Amazon Web Services account in this Amazon Web Services Region.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
	}
	
	public class BatchAssociateClientDeviceWithCoreDevicePostBody
	{
		
		/// <summary>
		/// The list of client devices to associate.
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public AssociateClientDeviceWithCoreDeviceEntry[] Entries { get; set; }
	}
	
	public class BatchDisassociateClientDeviceFromCoreDevicePostBody
	{
		
		/// <summary>
		/// The list of client devices to disassociate.
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DisassociateClientDeviceFromCoreDeviceEntry[] Entries { get; set; }
	}
	
	public class CreateComponentVersionPostBody
	{
		
		/// <summary>
		/// <p>The recipe to use to create the component. The recipe defines the component's metadata, parameters, dependencies, lifecycle, artifacts, and platform compatibility.</p> <p>You must specify either <code>inlineRecipe</code> or <code>lambdaFunction</code>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inlineRecipe")]
		public string InlineRecipe { get; set; }
		
		/// <summary>
		/// Contains information about an Lambda function to import to create a component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lambdaFunction")]
		public CreateComponentVersionPostBodyLambdaFunction LambdaFunction { get; set; }
		
		/// <summary>
		/// A list of key-value pairs that contain metadata for the resource. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html">Tag your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// A unique, case-sensitive identifier that you can provide to ensure that the request is idempotent. Idempotency means that the request is successfully processed only once, even if you send the request multiple times. When a request succeeds, and you specify the same client token for subsequent successful requests, the IoT Greengrass V2 service returns the successful response that it caches from the previous request. IoT Greengrass V2 caches successful responses for idempotent requests for up to 8 hours.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9-]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9-]+$")]
		public string ClientToken { get; set; }
	}
	
	public class CreateComponentVersionPostBodyLambdaFunction
	{
		
		[System.Runtime.Serialization.DataMember(Name="lambdaArn")]
		public string LambdaArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentName")]
		public string ComponentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentVersion")]
		public string ComponentVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentPlatforms")]
		public ComponentPlatform[] ComponentPlatforms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentDependencies")]
		public ComponentDependencyMap ComponentDependencies { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentLambdaParameters")]
		public LambdaExecutionParameters ComponentLambdaParameters { get; set; }
	}
	
	public class CreateDeploymentPostBody
	{
		
		/// <summary>
		/// The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the target IoT thing or thing group. When creating a subdeployment, the targetARN can only be a thing group.
		/// Required
		/// Pattern: arn:[^:]*:iot:[^:]*:[0-9]+:(thing|thinggroup)/.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"arn:[^:]*:iot:[^:]*:[0-9]+:(thing|thinggroup)/.+")]
		public string TargetArn { get; set; }
		
		/// <summary>
		/// The name of the deployment.
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deploymentName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string DeploymentName { get; set; }
		
		/// <summary>
		/// The components to deploy. This is a dictionary, where each key is the name of a component, and each key's value is the version and configuration to deploy for that component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="components")]
		public System.Collections.Generic.Dictionary<string, ComponentDeploymentSpecification> Components { get; set; }
		
		/// <summary>
		/// Contains information about an IoT job configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iotJobConfiguration")]
		public CreateDeploymentPostBodyIotJobConfiguration IotJobConfiguration { get; set; }
		
		/// <summary>
		/// Contains information about policies that define how a deployment updates components and handles failure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deploymentPolicies")]
		public CreateDeploymentPostBodyDeploymentPolicies DeploymentPolicies { get; set; }
		
		/// <summary>
		/// The parent deployment's target <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> within a subdeployment.
		/// Pattern: arn:[^:]*:iot:[^:]*:[0-9]+:thinggroup/.+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentTargetArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"arn:[^:]*:iot:[^:]*:[0-9]+:thinggroup/.+")]
		public string ParentTargetArn { get; set; }
		
		/// <summary>
		/// A list of key-value pairs that contain metadata for the resource. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html">Tag your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// A unique, case-sensitive identifier that you can provide to ensure that the request is idempotent. Idempotency means that the request is successfully processed only once, even if you send the request multiple times. When a request succeeds, and you specify the same client token for subsequent successful requests, the IoT Greengrass V2 service returns the successful response that it caches from the previous request. IoT Greengrass V2 caches successful responses for idempotent requests for up to 8 hours.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9-]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9-]+$")]
		public string ClientToken { get; set; }
	}
	
	public class CreateDeploymentPostBodyIotJobConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobExecutionsRolloutConfig")]
		public IoTJobExecutionsRolloutConfig JobExecutionsRolloutConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="abortConfig")]
		public IoTJobAbortConfig AbortConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeoutConfig")]
		public IoTJobTimeoutConfig TimeoutConfig { get; set; }
	}
	
	public class CreateDeploymentPostBodyDeploymentPolicies
	{
		
		[System.Runtime.Serialization.DataMember(Name="failureHandlingPolicy")]
		public DeploymentFailureHandlingPolicy FailureHandlingPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentUpdatePolicy")]
		public DeploymentComponentUpdatePolicy ComponentUpdatePolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configurationValidationPolicy")]
		public DeploymentConfigurationValidationPolicy ConfigurationValidationPolicy { get; set; }
	}
	
	public class UpdateConnectivityInfoPutBody
	{
		
		/// <summary>
		/// The connectivity information for the core device.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConnectivityInfo[] ConnectivityInfo { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// A list of key-value pairs that contain metadata for the resource. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html">Tag your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class ResolveComponentCandidatesPostBody
	{
		
		/// <summary>
		/// Contains information about a platform that a component supports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public ResolveComponentCandidatesPostBodyPlatform Platform { get; set; }
		
		/// <summary>
		/// The list of components to resolve.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="componentCandidates")]
		public ComponentCandidate[] ComponentCandidates { get; set; }
	}
	
	public class ResolveComponentCandidatesPostBodyPlatform
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public PlatformAttributesMap Attributes { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
