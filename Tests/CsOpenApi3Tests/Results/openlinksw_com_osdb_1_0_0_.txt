//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActionDescription
	{
		
		/// <summary>
		/// A unique one word identifier for the action.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action_id")]
		public string Action_id { get; set; }
		
		/// <summary>
		/// A short description of the action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entry_point")]
		public EntryPoint Entry_point { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntryPoint
	{
		
		/// <summary>
		/// The supported MIME type(s) for an EntryPoint response.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="content_types")]
		public string[] Content_types { get; set; }
		
		/// <summary>
		/// A short description of the action. Optional - may be null.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The supported MIME type(s) for an EntryPoint request. Null if not applicable.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="encoding_types")]
		public string[] Encoding_types { get; set; }
		
		/// <summary>
		/// The HTTP method used by the EntryPoint.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="http_method")]
		public EntryPointHttp_method Http_method { get; set; }
		
		/// <summary>
		/// A word or short phrase to be used as the action's display name. Optional - may be null.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Descriptions of the EntryPoint parameters. Null if not applicable.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public EntryPointParameter[] Parameters { get; set; }
		
		/// <summary>
		/// The EntryPoint URL. It will be non-null if url_template is null.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The EntryPoint's URL template. Only required if the entry point URL is parameterized. Property 'url' will be null if url_template is non-null.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url_template")]
		public string Url_template { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EntryPointHttp_method
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POST = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntryPointParameter
	{
		
		/// <summary>
		/// A short description of the parameter for use in the OSDB Action Console. Optional - may be null.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The parameter's display name in the OSDB Action Console. Optional - may be null.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="display_name")]
		public string Display_name { get; set; }
		
		/// <summary>
		/// The parameter name as present in the HTTP request. e.g. the key name in a query string key-value pair.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parameter_name")]
		public string Parameter_name { get; set; }
		
		/// <summary>
		/// If the parameter accepts only a limited set of values, the allowed set of values. Null if not applicable.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="permitted_values")]
		public string[] Permitted_values { get; set; }
		
		/// <summary>
		/// A flag indicating if the parameter is optional.
		/// Required
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="required")]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public int Required { get; set; }
		
		/// <summary>
		/// The type of the parameter, indicating its location in the HTTP request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public EntryPointParameterType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EntryPointParameterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		query = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		header = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		uri = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		path = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		body = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActionHelp
	{
		
		/// <summary>
		/// A unique one word identifier for the action.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action_id")]
		public string Action_id { get; set; }
		
		/// <summary>
		/// The help text for the action.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="help_text")]
		public string Help_text { get; set; }
		
		/// <summary>
		/// A unique one word identifier for the service.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service_id")]
		public string Service_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActionHelpResponse
	{
		
		/// <summary>
		/// The path of the REST API method
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="api")]
		public string Api { get; set; }
		
		/// <summary>
		/// The name of the REST API method
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="response")]
		public ActionHelp Response { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(ActionHelpResponseStatus.success)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ActionHelpResponseStatus Status { get; set; } = ActionHelpResponseStatus.success;
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ActionHelpResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		success = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeActionResponse
	{
		
		/// <summary>
		/// The path of the REST API method
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="api")]
		public string Api { get; set; }
		
		/// <summary>
		/// The name of the REST API method
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="response")]
		public ActionDescription Response { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(ActionHelpResponseStatus.success)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ActionHelpResponseStatus Status { get; set; } = ActionHelpResponseStatus.success;
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeServiceResponse
	{
		
		/// <summary>
		/// The path of the REST API method
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="api")]
		public string Api { get; set; }
		
		/// <summary>
		/// The name of the REST API method
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="response")]
		public ServiceDescription Response { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(ActionHelpResponseStatus.success)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ActionHelpResponseStatus Status { get; set; } = ActionHelpResponseStatus.success;
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceDescription
	{
		
		/// <summary>
		/// A short description of the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The URI of the source service description document used to load the service into OSDB.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="import_source_uri")]
		public string Import_source_uri { get; set; }
		
		/// <summary>
		/// A unique one word identifier for the service.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service_id")]
		public string Service_id { get; set; }
		
		/// <summary>
		/// A word or phrase naming the service.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service_name")]
		public string Service_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ErrorModel
	{
		
		/// <summary>
		/// The path of the REST API method reporting the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="api")]
		public string Api { get; set; }
		
		/// <summary>
		/// The name of the REST API method reporting the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// A message describing the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public string Response { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<ErrorModelStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ErrorModelStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		error = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExecBody
	{
		
		/// <summary>
		/// An example action specific property. There may be 0, 1 or more action specific properties, each holding an action specific parameter value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action_specific_property1")]
		public string Action_specific_property1 { get; set; }
		
		/// <summary>
		/// An example action specific property. There may be 0, 1 or more action specific properties, each holding an action specific parameter value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action_specific_property2")]
		public string Action_specific_property2 { get; set; }
		
		/// <summary>
		/// The media type of the data associated with osdb:body_data_raw or osdb:body_data_src_url. In the case of osdb:body_data_raw, this is the media type before base64 encoding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osdb:body_data_encoding")]
		public string Osdb_body_data_encoding { get; set; }
		
		/// <summary>
		/// Input data for the action (e.g. CSV data). The data must be base64 encoded by the client. Alternatively, clients can use osdb:body_data_src_url to supply the input data via a web-accessible document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osdb:body_data_raw")]
		public string Osdb_body_data_raw { get; set; }
		
		/// <summary>
		/// URL of a resource containing input data for the action (e.g. CSV data). Clients can instead use osdb:body_data_raw to supply the input data directly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osdb:body_data_src_url")]
		public string Osdb_body_data_src_url { get; set; }
		
		/// <summary>
		/// An OSDB-specific parameter controlling the action output type. If omitted, the native action output is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osdb:output_type")]
		public System.Nullable<ExecBodyOsdb_output_type> Osdb_output_type { get; set; }
		
		/// <summary>
		/// Preferred response MIME type. This must be an output MIME type supported natively by the action or, if 'osdb:output_type' is set to 'generate_rdf', a Virtuoso Sponger output format. i.e. 'application/ld+json', 'text/turtle' or 'application/rdf+xml'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osdb:response_format")]
		public string Osdb_response_format { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExecBodyOsdb_output_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		url_only = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		generate_rdf = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		display_rdf = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListActionsResponse
	{
		
		/// <summary>
		/// The path of the REST API method
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="api")]
		public string Api { get; set; }
		
		/// <summary>
		/// The name of the REST API method
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="response")]
		public ActionDescription[] Response { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(ActionHelpResponseStatus.success)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ActionHelpResponseStatus Status { get; set; } = ActionHelpResponseStatus.success;
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListServicesResponse
	{
		
		/// <summary>
		/// The path of the REST API method
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="api")]
		public string Api { get; set; }
		
		/// <summary>
		/// The name of the REST API method
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="response")]
		public ServiceDescription[] Response { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(ActionHelpResponseStatus.success)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ActionHelpResponseStatus Status { get; set; } = ActionHelpResponseStatus.success;
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoginResponse
	{
		
		/// <summary>
		/// The path of the REST API method
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="api")]
		public string Api { get; set; }
		
		/// <summary>
		/// The name of the REST API method
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="response")]
		public LoginResponseResponse Response { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(ActionHelpResponseStatus.success)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ActionHelpResponseStatus Status { get; set; } = ActionHelpResponseStatus.success;
	}
	
	public class LoginResponseResponse
	{
		
		/// <summary>
		/// The WebID of the user who has logged in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LogoutResponse
	{
		
		/// <summary>
		/// The path of the REST API method
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="api")]
		public string Api { get; set; }
		
		/// <summary>
		/// The name of the REST API method
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="response")]
		public LogoutResponseResponse Response { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(ActionHelpResponseStatus.success)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ActionHelpResponseStatus Status { get; set; } = ActionHelpResponseStatus.success;
	}
	
	public class LogoutResponseResponse
	{
		
		/// <summary>
		/// The WebID of the user who has logged out.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List actions
		/// Returns an array of action descriptions for the actions supported by the given service
		/// ListActions api/v1/actions/{serviceId}
		/// </summary>
		/// <param name="serviceId">Service ID of the service for which actions are to be listed</param>
		/// <returns>An array of action descriptions for the actions supported by the given service.</returns>
		public async Task<ListActionsResponse> ListActionsAsync(string serviceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/actions/"+ (serviceId==null? "" : System.Uri.EscapeDataString(serviceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListActionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describe action
		/// Returns a description of a given service action.
		/// DescribeAction api/v1/actions/{serviceId}/{actionId}
		/// </summary>
		/// <param name="serviceId">Service ID of the service supporting the action.</param>
		/// <param name="actionId">Action ID of the action to describe.</param>
		/// <returns>A single action description</returns>
		public async Task<DescribeActionResponse> DescribeActionAsync(string serviceId, string actionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/actions/"+ (serviceId==null? "" : System.Uri.EscapeDataString(serviceId))+"/"+ (actionId==null? "" : System.Uri.EscapeDataString(actionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeActionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Execute action
		/// Executes a registered service action and returns any output from the action.
		/// The data returned in the POST response body may be:
		/// * the raw action output,
		/// * a URL encapsulating the action request which executes the action when dereferenced  (only for actions using GET),
		/// * RDF generated from the action output,
		/// * a URL to an RDF viewer's display of the generated RDF.
		/// 
		/// Any parameters required by the action are supplied as a JSON object in the POST body. The parameter types supported are: "query", "header", "uri", "path" and "body".  The parameter type determines where a supplied parameter value is inserted into the HTTP request constructed by OSDB to invoke the target service action. In addition to native parameters required by the service action, 'Execute action' accepts some OSDB-specific parameters.<br/><br/>
		/// 
		/// **Examples**
		/// * ```curl -ik -X POST -d '{ "latitude":"37.7759792", "longitude":"-122.41823" }' -H 'Content-Type: application/json' https://osdb.openlinksw.com/osdb/api/v1/actions/uber/products/exec```
		/// * ```curl -ikL -X POST -d '{ "latitude":"37.7759792", "longitude":"-122.41823", "osdb:output_type":"generate_rdf", "osdb:response_format":"application/rdf+xml" }' -H 'Content-Type: application/json' https://osdb.openlinksw.com/osdb/api/v1/actions/uber/products/exec```
		/// * ```curl -ikL -X POST -d '{ "latitude":"37.7759792", "longitude":"-122.41823", "osdb:output_type":"display_rdf" }' -H 'Content-Type: application/json' https://osdb.openlinksw.com/osdb/api/v1/actions/uber/products/exec```
		/// * ```curl -ik -X POST -d '{ "q":"skiing", "osdb:response_format": "application/rdf+xml" }' -H 'Content-Type: application/json' https://osdb.openlinksw.com/osdb/api/v1/actions/facet/search/exec```
		/// * ```curl -ik -X POST -d '{ "q":"skiing", "osdb:output_type": "url_only" }' -H 'Content-Type: application/json' https://osdb.openlinksw.com/osdb/api/v1/actions/facet/search/exec```
		/// * ```curl -ik -X POST -d '{ "Content-Location": "http://demo.openlinksw.co.uk/pubs", "osdb:body_data_src_url": "http://ods-qa.openlinksw.com/DAV/home/osdb/pubs.csv", "extractor": "csv", "osdb:response_format": "application/rdf+xml", "osdb:body_data_encoding": "text/csv" }' -H 'Content-Type: application/json' https://osdb.openlinksw.com/osdb/api/v1/actions/csv_transformer/transform/exec```
		/// ExecuteAction api/v1/actions/{serviceId}/{actionId}/exec
		/// </summary>
		/// <param name="serviceId">Service ID of the service supporting the action.</param>
		/// <param name="actionId">Action ID of the action to execute.</param>
		/// <param name="requestBody">Any parameters required by the action are supplied as a JSON object in the request body. The properties of this object depend on the service action being invoked.</param>
		public async Task ExecuteActionAsync(string serviceId, string actionId, ExecBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/actions/"+ (serviceId==null? "" : System.Uri.EscapeDataString(serviceId))+"/"+ (actionId==null? "" : System.Uri.EscapeDataString(actionId))+"/exec";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Action help
		/// Returns the help text for a given service action
		/// ActionHelp api/v1/actions/{serviceId}/{actionId}/help
		/// </summary>
		/// <param name="serviceId">Service ID of the service supporting the action.</param>
		/// <param name="actionId">Action ID of the action for which help text is being requested.</param>
		/// <returns>Action help text</returns>
		public async Task<ActionHelpResponse> ActionHelpAsync(string serviceId, string actionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/actions/"+ (serviceId==null? "" : System.Uri.EscapeDataString(serviceId))+"/"+ (actionId==null? "" : System.Uri.EscapeDataString(actionId))+"/help";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ActionHelpResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Login
		/// Logs a user into the OSDB server, authenticating them by their WebID and returning an OSDB session ID in cookie osdb.sid
		/// Login api/v1/login
		/// </summary>
		/// <returns>Confirmation of a successful OSDB login.</returns>
		public async Task<LoginResponse> LoginAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/login";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LoginResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Logout
		/// Logs a user out of the OSDB server, ending their OSDB session
		/// Logout api/v1/logout
		/// </summary>
		/// <returns>Confirmation of a successful OSDB logout.</returns>
		public async Task<LogoutResponse> LogoutAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/logout";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LogoutResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List services
		/// Returns descriptions of all services registered with the OSDB server.
		/// ListServices api/v1/services
		/// </summary>
		/// <returns>An array of service descriptions for all services registered with the OSDB server</returns>
		public async Task<ListServicesResponse> ListServicesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/services";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListServicesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Load service
		/// Loads a service description into the OSDB Service Registry
		/// LoadService api/v1/services
		/// </summary>
		/// <param name="requestBody">Service to register with OSDB</param>
		/// <returns>loadService response</returns>
		public async Task<LoadServiceReturn> LoadServiceAsync(LoadServicePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/services";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LoadServiceReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unload service
		/// Removes a service description from the OSDB Service Registry
		/// UnloadService api/v1/services/{serviceId}
		/// </summary>
		/// <param name="serviceId">Service ID of the service to be unloaded</param>
		/// <returns>unloadService response</returns>
		public async Task<UnloadServiceReturn> UnloadServiceAsync(string serviceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/services/"+ (serviceId==null? "" : System.Uri.EscapeDataString(serviceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UnloadServiceReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describe service
		/// Returns a description of a given service
		/// DescribeService api/v1/services/{serviceId}
		/// </summary>
		/// <param name="serviceId">Service ID of the service to describe.</param>
		/// <returns>A single service description</returns>
		public async Task<DescribeServiceResponse> DescribeServiceAsync(string serviceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/services/"+ (serviceId==null? "" : System.Uri.EscapeDataString(serviceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeServiceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class LoadServicePostBody
	{
		
		/// <summary>
		/// The URL of the resource containing the service description to load.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service_description_url")]
		public string Service_description_url { get; set; }
		
		/// <summary>
		/// Service ID to be used to uniquely identify the service. (Optional: Required for anonymous services or to override the service name in the service description.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_moniker")]
		public string Service_moniker { get; set; }
	}
	
	public class LoadServiceReturn
	{
		
		/// <summary>
		/// The path of the REST API method
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="api")]
		public string Api { get; set; }
		
		/// <summary>
		/// The name of the REST API method
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Confirmation message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="response")]
		public string Response { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(ActionHelpResponseStatus.success)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ActionHelpResponseStatus Status { get; set; } = ActionHelpResponseStatus.success;
	}
	
	public class UnloadServiceReturn
	{
		
		/// <summary>
		/// The path of the REST API method
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="api")]
		public string Api { get; set; }
		
		/// <summary>
		/// The name of the REST API method
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Confirmation message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="response")]
		public string Response { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(ActionHelpResponseStatus.success)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ActionHelpResponseStatus Status { get; set; } = ActionHelpResponseStatus.success;
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
