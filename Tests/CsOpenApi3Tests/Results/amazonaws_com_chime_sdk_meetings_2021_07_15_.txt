//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchCreateAttendeeResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attendee[] Attendees { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateAttendeeError[] Errors { get; set; }
	}
	
	/// <summary>
	/// <p>An Amazon Chime SDK meeting attendee. Includes a unique <code>AttendeeId</code> and <code>JoinToken</code>. The <code>JoinToken</code> allows a client to authenticate and join as the specified attendee. The <code>JoinToken</code> expires when the meeting ends, or when <a>DeleteAttendee</a> is called. After that, the attendee is unable to join the meeting. </p> <p>We recommend securely transferring each <code>JoinToken</code> from your server application to the client so that no other client has access to the token except for the one authorized to represent the attendee.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Attendee
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ExternalUserId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AttendeeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JoinToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttendeeCapabilities Capabilities { get; set; }
	}
	
	/// <summary>
	/// <p>The media capabilities of an attendee: audio, video, or content. </p> <note> <p>You use the capabilities with a set of values that control what the capabilities can do, such as <code>SendReceive</code> data. For more information about those values, see .</p> </note> <p>When using capabilities, be aware of these corner cases:</p> <ul> <li> <p>You can't set <code>content</code> capabilities to <code>SendReceive</code> or <code>Receive</code> unless you also set <code>video</code> capabilities to <code>SendReceive</code> or <code>Receive</code>. If you don't set the <code>video</code> capability to receive, the response will contain an HTTP 400 Bad Request status code. However, you can set your <code>video</code> capability to receive and you set your <code>content</code> capability to not receive.</p> </li> <li> <p>When you change an <code>audio</code> capability from <code>None</code> or <code>Receive</code> to <code>Send</code> or <code>SendReceive</code> , and if the attendee left their microphone unmuted, audio will flow from the attendee to the other meeting participants.</p> </li> <li> <p>When you change a <code>video</code> or <code>content</code> capability from <code>None</code> or <code>Receive</code> to <code>Send</code> or <code>SendReceive</code> , and if the attendee turned on their video or content streams, remote attendees can receive those streams, but only after media renegotiation between the client and the Amazon Chime back-end server.</p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttendeeCapabilities
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MediaCapabilities Audio { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MediaCapabilities Video { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MediaCapabilities Content { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MediaCapabilities
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SendReceive")]
		SendReceive = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Send")]
		Send = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Receive")]
		Receive = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 3,
	}
	
	/// <summary>
	/// The list of errors returned when errors are encountered during the BatchCreateAttendee and CreateAttendee actions. This includes external user IDs, error codes, and error messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAttendeeError
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ExternalUserId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
	}
	
	/// <summary>
	/// The Amazon Chime SDK attendee fields to create, used with the BatchCreateAttendee action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAttendeeRequestItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ExternalUserId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttendeeCapabilities Capabilities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BadRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ForbiddenException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnauthorizedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnprocessableEntityException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceUnavailableException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceFailureException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThrottlingException
	{
	}
	
	/// <summary>
	/// A structure that contains one or more attendee IDs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttendeeIdItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AttendeeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAttendeeResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attendee Attendee { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateMeetingResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Meeting Meeting { get; set; }
	}
	
	/// <summary>
	/// A meeting created using the Amazon Chime SDK.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Meeting
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MeetingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MeetingHostId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExternalMeetingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MediaRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaPlacement MediaPlacement { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MeetingFeaturesConfiguration MeetingFeatures { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrimaryMeetingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TenantIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MeetingArn { get; set; }
	}
	
	/// <summary>
	/// A set of endpoints used by clients to connect to the media service group for an Amazon Chime SDK meeting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaPlacement
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AudioHostUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AudioFallbackUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SignalingUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TurnControlUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScreenDataUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScreenViewingUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScreenSharingUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EventIngestionUrl { get; set; }
	}
	
	/// <summary>
	/// The configuration settings of the features available to a meeting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MeetingFeaturesConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AudioFeatures Audio { get; set; }
	}
	
	/// <summary>
	/// An optional category of meeting features that contains audio-specific configurations, such as operating parameters for Amazon Voice Focus. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AudioFeatures
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MeetingFeatureStatus EchoReduction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MeetingFeatureStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AVAILABLE")]
		AVAILABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNAVAILABLE")]
		UNAVAILABLE = 1,
	}
	
	/// <summary>
	/// A key-value pair that you define.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tag
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateMeetingWithAttendeesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Meeting Meeting { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Attendee[] Attendees { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateAttendeeError[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAttendeeResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attendee Attendee { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMeetingResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Meeting Meeting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAttendeesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attendee[] Attendees { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFoundException
	{
	}
	
	/// <summary>
	/// <p>Settings specific for Amazon Transcribe as the live transcription engine. </p> <p>If you specify an invalid combination of parameters, a <code>TranscriptFailed</code> event will be sent with the contents of the <code>BadRequestException</code> generated by Amazon Transcribe. For more information on each parameter and which combinations are valid, refer to the <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/API_streaming_StartStreamTranscription.html">StartStreamTranscription</a> API in the <i>Amazon Transcribe Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EngineTranscribeSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TranscribeLanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TranscribeVocabularyFilterMethod VocabularyFilterMethod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VocabularyFilterName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VocabularyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TranscribeRegion Region { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnablePartialResultsStabilization { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TranscribePartialResultsStability PartialResultsStability { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TranscribeContentIdentificationType ContentIdentificationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TranscribeContentIdentificationType ContentRedactionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PiiEntityTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LanguageModelName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IdentifyLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LanguageOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TranscribeLanguageCode PreferredLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VocabularyNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VocabularyFilterNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TranscribeLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-US")]
		enMinusUS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-GB")]
		enMinusGB = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-US")]
		esMinusUS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-CA")]
		frMinusCA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-FR")]
		frMinusFR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-AU")]
		enMinusAU = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="it-IT")]
		itMinusIT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de-DE")]
		deMinusDE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pt-BR")]
		ptMinusBR = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ja-JP")]
		jaMinusJP = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ko-KR")]
		koMinusKR = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh-CN")]
		zhMinusCN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="th-TH")]
		thMinusTH = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hi-IN")]
		hiMinusIN = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TranscribeVocabularyFilterMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="remove")]
		remove = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mask")]
		mask = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tag")]
		tag = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TranscribeRegion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="us-east-2")]
		usMinuseastMinus2 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="us-east-1")]
		usMinuseastMinus1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="us-west-2")]
		usMinuswestMinus2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ap-northeast-2")]
		apMinusnortheastMinus2 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ap-southeast-2")]
		apMinussoutheastMinus2 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ap-northeast-1")]
		apMinusnortheastMinus1 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ca-central-1")]
		caMinuscentralMinus1 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eu-central-1")]
		euMinuscentralMinus1 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eu-west-1")]
		euMinuswestMinus1 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eu-west-2")]
		euMinuswestMinus2 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sa-east-1")]
		saMinuseastMinus1 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="auto")]
		auto = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="us-gov-west-1")]
		usMinusgovMinuswestMinus1 = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TranscribePartialResultsStability
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="low")]
		low = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="medium")]
		medium = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="high")]
		high = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TranscribeContentIdentificationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PII")]
		PII = 0,
	}
	
	/// <summary>
	/// Settings specific to the Amazon Transcribe Medical engine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EngineTranscribeMedicalSettings
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TranscribeMedicalLanguageCode LanguageCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TranscribeMedicalSpecialty Specialty { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TranscribeMedicalType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VocabularyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TranscribeMedicalRegion Region { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TranscribeMedicalContentIdentificationType ContentIdentificationType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TranscribeMedicalLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-US")]
		enMinusUS = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TranscribeMedicalSpecialty
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRIMARYCARE")]
		PRIMARYCARE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CARDIOLOGY")]
		CARDIOLOGY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NEUROLOGY")]
		NEUROLOGY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ONCOLOGY")]
		ONCOLOGY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RADIOLOGY")]
		RADIOLOGY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UROLOGY")]
		UROLOGY = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TranscribeMedicalType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONVERSATION")]
		CONVERSATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DICTATION")]
		DICTATION = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TranscribeMedicalRegion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="us-east-1")]
		usMinuseastMinus1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="us-east-2")]
		usMinuseastMinus2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="us-west-2")]
		usMinuswestMinus2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ap-southeast-2")]
		apMinussoutheastMinus2 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ca-central-1")]
		caMinuscentralMinus1 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eu-west-1")]
		euMinuswestMinus1 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="auto")]
		auto = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TranscribeMedicalContentIdentificationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PHI")]
		PHI = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TooManyTagsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAttendeeCapabilitiesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attendee Attendee { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchCreateAttendeeRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateAttendeeRequestItem[] Attendees { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchUpdateAttendeeCapabilitiesExceptRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AttendeeIdItem[] ExcludedAttendeeIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AttendeeCapabilities Capabilities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAttendeeRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ExternalUserId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttendeeCapabilities Capabilities { get; set; }
	}
	
	/// <summary>
	/// The configuration for resource targets to receive notifications when meeting and attendee events occur.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotificationsConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LambdaFunctionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnsTopicArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SqsQueueArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateMeetingRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MediaRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MeetingHostId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ExternalMeetingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotificationsConfiguration NotificationsConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MeetingFeaturesConfiguration MeetingFeatures { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrimaryMeetingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TenantIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateMeetingWithAttendeesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MediaRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MeetingHostId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ExternalMeetingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MeetingFeaturesConfiguration MeetingFeatures { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotificationsConfiguration NotificationsConfiguration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateAttendeeRequestItem[] Attendees { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrimaryMeetingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TenantIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAttendeeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteMeetingRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TranscribeContentRedactionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PII")]
		PII = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAttendeeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMeetingRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAttendeesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceRequest
	{
	}
	
	/// <summary>
	/// The configuration for the current transcription operation. Must contain <code>EngineTranscribeSettings</code> or <code>EngineTranscribeMedicalSettings</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TranscriptionConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EngineTranscribeSettings EngineTranscribeSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EngineTranscribeMedicalSettings EngineTranscribeMedicalSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartMeetingTranscriptionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TranscriptionConfiguration TranscriptionConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopMeetingTranscriptionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAttendeeCapabilitiesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AttendeeCapabilities Capabilities { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates up to 100 attendees for an active Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
		/// BatchCreateAttendee meetings/{MeetingId}/attendees#operation=batch-create
		/// </summary>
		/// <param name="MeetingId">The Amazon Chime SDK ID of the meeting to which you're adding attendees.</param>
		/// <returns>Success</returns>
		public async Task<BatchCreateAttendeeResponse> BatchCreateAttendeeAsync(string MeetingId, BatchCreateAttendeeOperation operation, BatchCreateAttendeePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "meetings/"+ (MeetingId==null? "" : System.Uri.EscapeDataString(MeetingId))+"/attendees#operation=batch-create&operation=" + operation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchCreateAttendeeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates <code>AttendeeCapabilities</code> except the capabilities listed in an <code>ExcludedAttendeeIds</code> table.</p> <note> <p>You use the capabilities with a set of values that control what the capabilities can do, such as <code>SendReceive</code> data. For more information about those values, see .</p> </note> <p>When using capabilities, be aware of these corner cases:</p> <ul> <li> <p>You can't set <code>content</code> capabilities to <code>SendReceive</code> or <code>Receive</code> unless you also set <code>video</code> capabilities to <code>SendReceive</code> or <code>Receive</code>. If you don't set the <code>video</code> capability to receive, the response will contain an HTTP 400 Bad Request status code. However, you can set your <code>video</code> capability to receive and you set your <code>content</code> capability to not receive.</p> </li> <li> <p>When you change an <code>audio</code> capability from <code>None</code> or <code>Receive</code> to <code>Send</code> or <code>SendReceive</code> , and if the attendee left their microphone unmuted, audio will flow from the attendee to the other meeting participants.</p> </li> <li> <p>When you change a <code>video</code> or <code>content</code> capability from <code>None</code> or <code>Receive</code> to <code>Send</code> or <code>SendReceive</code> , and if the attendee turned on their video or content streams, remote attendees can receive those streams, but only after media renegotiation between the client and the Amazon Chime back-end server.</p> </li> </ul>
		/// BatchUpdateAttendeeCapabilitiesExcept meetings/{MeetingId}/attendees/capabilities#operation=batch-update-except
		/// </summary>
		/// <param name="MeetingId">The ID of the meeting associated with the update request.</param>
		/// <returns>Success</returns>
		public async Task BatchUpdateAttendeeCapabilitiesExceptAsync(string MeetingId, BatchUpdateAttendeeCapabilitiesExceptOperation operation, BatchUpdateAttendeeCapabilitiesExceptPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "meetings/"+ (MeetingId==null? "" : System.Uri.EscapeDataString(MeetingId))+"/attendees/capabilities#operation=batch-update-except&operation=" + operation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new attendee for an active Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
		/// CreateAttendee meetings/{MeetingId}/attendees
		/// </summary>
		/// <param name="MeetingId">The unique ID of the meeting.</param>
		/// <returns>Success</returns>
		public async Task<CreateAttendeeResponse> CreateAttendeeAsync(string MeetingId, CreateAttendeePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "meetings/"+ (MeetingId==null? "" : System.Uri.EscapeDataString(MeetingId))+"/attendees";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateAttendeeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the attendees for the specified Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
		/// ListAttendees meetings/{MeetingId}/attendees
		/// </summary>
		/// <param name="MeetingId">The Amazon Chime SDK meeting ID.</param>
		/// <param name="next_token">The token to use to retrieve the next page of results.</param>
		/// <param name="max_results">The maximum number of results to return in a single call.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListAttendeesResponse> ListAttendeesAsync(string MeetingId, string next_token, int max_results, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "meetings/"+ (MeetingId==null? "" : System.Uri.EscapeDataString(MeetingId))+"/attendees&next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&max-results="+max_results+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAttendeesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Amazon Chime SDK meeting in the specified media Region with no initial attendees. For more information about specifying media Regions, see <a href="https://docs.aws.amazon.com/chime/latest/dg/chime-sdk-meetings-regions.html">Amazon Chime SDK Media Regions</a> in the <i>Amazon Chime Developer Guide</i>. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
		/// CreateMeeting meetings
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateMeetingResponse> CreateMeetingAsync(CreateMeetingPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "meetings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateMeetingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new Amazon Chime SDK meeting in the specified media Region, with attendees. For more information about specifying media Regions, see <a href="https://docs.aws.amazon.com/chime/latest/dg/chime-sdk-meetings-regions.html">Amazon Chime SDK Media Regions</a> in the <i>Amazon Chime Developer Guide</i>. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
		/// CreateMeetingWithAttendees meetings#operation=create-attendees
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateMeetingWithAttendeesResponse> CreateMeetingWithAttendeesAsync(CreateMeetingWithAttendeesOperation operation, CreateMeetingWithAttendeesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "meetings#operation=create-attendees?operation=" + operation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateMeetingWithAttendeesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an attendee from the specified Amazon Chime SDK meeting and deletes their <code>JoinToken</code>. Attendees are automatically deleted when a Amazon Chime SDK meeting is deleted. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
		/// DeleteAttendee meetings/{MeetingId}/attendees/{AttendeeId}
		/// </summary>
		/// <param name="MeetingId">The Amazon Chime SDK meeting ID.</param>
		/// <param name="AttendeeId">The Amazon Chime SDK attendee ID.</param>
		public async Task DeleteAttendeeAsync(string MeetingId, string AttendeeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "meetings/"+ (MeetingId==null? "" : System.Uri.EscapeDataString(MeetingId))+"/attendees/"+ (AttendeeId==null? "" : System.Uri.EscapeDataString(AttendeeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the Amazon Chime SDK attendee details for a specified meeting ID and attendee ID. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
		/// GetAttendee meetings/{MeetingId}/attendees/{AttendeeId}
		/// </summary>
		/// <param name="MeetingId">The Amazon Chime SDK meeting ID.</param>
		/// <param name="AttendeeId">The Amazon Chime SDK attendee ID.</param>
		/// <returns>Success</returns>
		public async Task<GetAttendeeResponse> GetAttendeeAsync(string MeetingId, string AttendeeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "meetings/"+ (MeetingId==null? "" : System.Uri.EscapeDataString(MeetingId))+"/attendees/"+ (AttendeeId==null? "" : System.Uri.EscapeDataString(AttendeeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAttendeeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified Amazon Chime SDK meeting. The operation deletes all attendees, disconnects all clients, and prevents new clients from joining the meeting. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
		/// DeleteMeeting meetings/{MeetingId}
		/// </summary>
		/// <param name="MeetingId">The Amazon Chime SDK meeting ID.</param>
		public async Task DeleteMeetingAsync(string MeetingId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "meetings/"+ (MeetingId==null? "" : System.Uri.EscapeDataString(MeetingId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the Amazon Chime SDK meeting details for the specified meeting ID. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
		/// GetMeeting meetings/{MeetingId}
		/// </summary>
		/// <param name="MeetingId">The Amazon Chime SDK meeting ID.</param>
		/// <returns>Success</returns>
		public async Task<GetMeetingResponse> GetMeetingAsync(string MeetingId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "meetings/"+ (MeetingId==null? "" : System.Uri.EscapeDataString(MeetingId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetMeetingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of the tags available for the specified resource.
		/// ListTagsForResource tags#arn
		/// </summary>
		/// <param name="arn">The ARN of the resource.</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string arn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags#arn?arn=" + (arn==null? "" : System.Uri.EscapeDataString(arn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Starts transcription for the specified <code>meetingId</code>. For more information, refer to <a href="https://docs.aws.amazon.com/chime-sdk/latest/dg/meeting-transcription.html"> Using Amazon Chime SDK live transcription </a> in the <i>Amazon Chime SDK Developer Guide</i>.</p> <p>If you specify an invalid configuration, a <code>TranscriptFailed</code> event will be sent with the contents of the <code>BadRequestException</code> generated by Amazon Transcribe. For more information on each parameter and which combinations are valid, refer to the <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/API_streaming_StartStreamTranscription.html">StartStreamTranscription</a> API in the <i>Amazon Transcribe Developer Guide</i>.</p> <important> <p>Amazon Chime SDK live transcription is powered by Amazon Transcribe. Use of Amazon Transcribe is subject to the <a href="https://aws.amazon.com/service-terms/">AWS Service Terms</a>, including the terms specific to the AWS Machine Learning and Artificial Intelligence Services.</p> </important>
		/// StartMeetingTranscription meetings/{MeetingId}/transcription#operation=start
		/// </summary>
		/// <param name="MeetingId">The unique ID of the meeting being transcribed.</param>
		/// <returns>Success</returns>
		public async Task StartMeetingTranscriptionAsync(string MeetingId, StartMeetingTranscriptionOperation operation, StartMeetingTranscriptionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "meetings/"+ (MeetingId==null? "" : System.Uri.EscapeDataString(MeetingId))+"/transcription#operation=start&operation=" + operation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Stops transcription for the specified <code>meetingId</code>. For more information, refer to <a href="https://docs.aws.amazon.com/chime-sdk/latest/dg/meeting-transcription.html"> Using Amazon Chime SDK live transcription </a> in the <i>Amazon Chime SDK Developer Guide</i>.</p> <important> <p>Amazon Chime SDK live transcription is powered by Amazon Transcribe. Use of Amazon Transcribe is subject to the <a href="https://aws.amazon.com/service-terms/">AWS Service Terms</a>, including the terms specific to the AWS Machine Learning and Artificial Intelligence Services.</p> </important>
		/// StopMeetingTranscription meetings/{MeetingId}/transcription#operation=stop
		/// </summary>
		/// <param name="MeetingId">The unique ID of the meeting for which you stop transcription.</param>
		/// <returns>Success</returns>
		public async Task StopMeetingTranscriptionAsync(string MeetingId, StopMeetingTranscriptionOperation operation, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "meetings/"+ (MeetingId==null? "" : System.Uri.EscapeDataString(MeetingId))+"/transcription#operation=stop&operation=" + operation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The resource that supports tags.
		/// TagResource tags#operation=tag-resource
		/// </summary>
		public async Task TagResourceAsync(TagResourceOperation operation, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags#operation=tag-resource?operation=" + operation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Removes the specified tags from the specified resources. When you specify a tag key, the action removes both that key and its associated value. The operation succeeds even if you attempt to remove tags from a resource that were already removed. Note the following:</p> <ul> <li> <p>To remove tags from a resource, you need the necessary permissions for the service that the resource belongs to as well as permissions for removing tags. For more information, see the documentation for the service whose resource you want to untag.</p> </li> <li> <p>You can only tag resources that are located in the specified AWS Region for the calling AWS account.</p> </li> </ul> <p> <b>Minimum permissions</b> </p> <p>In addition to the <code>tag:UntagResources</code> permission required by this operation, you must also have the remove tags permission defined by the service that created the resource. For example, to remove the tags from an Amazon EC2 instance using the <code>UntagResources</code> operation, you must have both of the following permissions:</p> <p> <code>tag:UntagResource</code> </p> <p> <code>ChimeSDKMeetings:DeleteTags</code> </p>
		/// UntagResource tags#operation=untag-resource
		/// </summary>
		public async Task UntagResourceAsync(UntagResourceOperation operation, UntagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags#operation=untag-resource?operation=" + operation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>The capabilities that you want to update.</p> <note> <p>You use the capabilities with a set of values that control what the capabilities can do, such as <code>SendReceive</code> data. For more information about those values, see .</p> </note> <p>When using capabilities, be aware of these corner cases:</p> <ul> <li> <p>You can't set <code>content</code> capabilities to <code>SendReceive</code> or <code>Receive</code> unless you also set <code>video</code> capabilities to <code>SendReceive</code> or <code>Receive</code>. If you don't set the <code>video</code> capability to receive, the response will contain an HTTP 400 Bad Request status code. However, you can set your <code>video</code> capability to receive and you set your <code>content</code> capability to not receive.</p> </li> <li> <p>When you change an <code>audio</code> capability from <code>None</code> or <code>Receive</code> to <code>Send</code> or <code>SendReceive</code> , and if the attendee left their microphone unmuted, audio will flow from the attendee to the other meeting participants.</p> </li> <li> <p>When you change a <code>video</code> or <code>content</code> capability from <code>None</code> or <code>Receive</code> to <code>Send</code> or <code>SendReceive</code> , and if the attendee turned on their video or content streams, remote attendees can receive those streams, but only after media renegotiation between the client and the Amazon Chime back-end server.</p> </li> </ul>
		/// UpdateAttendeeCapabilities meetings/{MeetingId}/attendees/{AttendeeId}/capabilities
		/// </summary>
		/// <param name="MeetingId">The ID of the meeting associated with the update request.</param>
		/// <param name="AttendeeId">The ID of the attendee associated with the update request.</param>
		/// <returns>Success</returns>
		public async Task<UpdateAttendeeCapabilitiesResponse> UpdateAttendeeCapabilitiesAsync(string MeetingId, string AttendeeId, UpdateAttendeeCapabilitiesPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "meetings/"+ (MeetingId==null? "" : System.Uri.EscapeDataString(MeetingId))+"/attendees/"+ (AttendeeId==null? "" : System.Uri.EscapeDataString(AttendeeId))+"/capabilities";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateAttendeeCapabilitiesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum BatchCreateAttendeeOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="batch-create")]
		batchMinuscreate = 0,
	}
	
	public class BatchCreateAttendeePostBody
	{
		
		/// <summary>
		/// The attendee information, including attendees' IDs and join tokens.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public CreateAttendeeRequestItem[] Attendees { get; set; }
	}
	
	public enum BatchUpdateAttendeeCapabilitiesExceptOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="batch-update-except")]
		batchMinusupdateMinusexcept = 0,
	}
	
	public class BatchUpdateAttendeeCapabilitiesExceptPutBody
	{
		
		/// <summary>
		/// The <code>AttendeeIDs</code> that you want to exclude from one or more capabilities.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public AttendeeIdItem[] ExcludedAttendeeIds { get; set; }
		
		/// <summary>
		/// <p>The media capabilities of an attendee: audio, video, or content. </p> <note> <p>You use the capabilities with a set of values that control what the capabilities can do, such as <code>SendReceive</code> data. For more information about those values, see .</p> </note> <p>When using capabilities, be aware of these corner cases:</p> <ul> <li> <p>You can't set <code>content</code> capabilities to <code>SendReceive</code> or <code>Receive</code> unless you also set <code>video</code> capabilities to <code>SendReceive</code> or <code>Receive</code>. If you don't set the <code>video</code> capability to receive, the response will contain an HTTP 400 Bad Request status code. However, you can set your <code>video</code> capability to receive and you set your <code>content</code> capability to not receive.</p> </li> <li> <p>When you change an <code>audio</code> capability from <code>None</code> or <code>Receive</code> to <code>Send</code> or <code>SendReceive</code> , and if the attendee left their microphone unmuted, audio will flow from the attendee to the other meeting participants.</p> </li> <li> <p>When you change a <code>video</code> or <code>content</code> capability from <code>None</code> or <code>Receive</code> to <code>Send</code> or <code>SendReceive</code> , and if the attendee turned on their video or content streams, remote attendees can receive those streams, but only after media renegotiation between the client and the Amazon Chime back-end server.</p> </li> </ul>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BatchUpdateAttendeeCapabilitiesExceptPutBodyCapabilities Capabilities { get; set; }
	}
	
	public class BatchUpdateAttendeeCapabilitiesExceptPutBodyCapabilities
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MediaCapabilities Audio { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaCapabilities Video { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaCapabilities Content { get; set; }
	}
	
	public class CreateAttendeePostBody
	{
		
		/// <summary>
		/// <p>The Amazon Chime SDK external user ID. An idempotency token. Links the attendee to an identity managed by a builder application.</p> <p>Pattern: <code>[-_&amp;@+=,(){}\[\]\/«».:|'"#a-zA-Z0-9À-ÿ\s]*</code> </p> <p>Values that begin with <code>aws:</code> are reserved. You can't configure a value that uses this prefix.</p>
		/// Required
		/// Max length: 64
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string ExternalUserId { get; set; }
		
		/// <summary>
		/// <p>The media capabilities of an attendee: audio, video, or content. </p> <note> <p>You use the capabilities with a set of values that control what the capabilities can do, such as <code>SendReceive</code> data. For more information about those values, see .</p> </note> <p>When using capabilities, be aware of these corner cases:</p> <ul> <li> <p>You can't set <code>content</code> capabilities to <code>SendReceive</code> or <code>Receive</code> unless you also set <code>video</code> capabilities to <code>SendReceive</code> or <code>Receive</code>. If you don't set the <code>video</code> capability to receive, the response will contain an HTTP 400 Bad Request status code. However, you can set your <code>video</code> capability to receive and you set your <code>content</code> capability to not receive.</p> </li> <li> <p>When you change an <code>audio</code> capability from <code>None</code> or <code>Receive</code> to <code>Send</code> or <code>SendReceive</code> , and if the attendee left their microphone unmuted, audio will flow from the attendee to the other meeting participants.</p> </li> <li> <p>When you change a <code>video</code> or <code>content</code> capability from <code>None</code> or <code>Receive</code> to <code>Send</code> or <code>SendReceive</code> , and if the attendee turned on their video or content streams, remote attendees can receive those streams, but only after media renegotiation between the client and the Amazon Chime back-end server.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateAttendeePostBodyCapabilities Capabilities { get; set; }
	}
	
	public class CreateAttendeePostBodyCapabilities
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MediaCapabilities Audio { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaCapabilities Video { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaCapabilities Content { get; set; }
	}
	
	public class CreateMeetingPostBody
	{
		
		/// <summary>
		/// The unique identifier for the client request. Use a different token for different meetings.
		/// Required
		/// Max length: 64
		/// Min length: 2
		/// Pattern: [-_a-zA-Z0-9]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[-_a-zA-Z0-9]*")]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// <p>The Region in which to create the meeting.</p> <p> Available values: <code>af-south-1</code>, <code>ap-northeast-1</code>, <code>ap-northeast-2</code>, <code>ap-south-1</code>, <code>ap-southeast-1</code>, <code>ap-southeast-2</code>, <code>ca-central-1</code>, <code>eu-central-1</code>, <code>eu-north-1</code>, <code>eu-south-1</code>, <code>eu-west-1</code>, <code>eu-west-2</code>, <code>eu-west-3</code>, <code>sa-east-1</code>, <code>us-east-1</code>, <code>us-east-2</code>, <code>us-west-1</code>, <code>us-west-2</code>. </p> <p>Available values in AWS GovCloud (US) Regions: <code>us-gov-east-1</code>, <code>us-gov-west-1</code>.</p>
		/// Required
		/// Max length: 64
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string MediaRegion { get; set; }
		
		/// <summary>
		/// Reserved.
		/// Max length: 64
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string MeetingHostId { get; set; }
		
		/// <summary>
		/// <p>The external meeting ID.</p> <p>Pattern: <code>[-_&amp;@+=,(){}\[\]\/«».:|'"#a-zA-Z0-9À-ÿ\s]*</code> </p> <p>Values that begin with <code>aws:</code> are reserved. You can't configure a value that uses this prefix. Case insensitive.</p>
		/// Required
		/// Max length: 64
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string ExternalMeetingId { get; set; }
		
		/// <summary>
		/// The configuration for resource targets to receive notifications when meeting and attendee events occur.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateMeetingPostBodyNotificationsConfiguration NotificationsConfiguration { get; set; }
		
		/// <summary>
		/// The configuration settings of the features available to a meeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateMeetingPostBodyMeetingFeatures MeetingFeatures { get; set; }
		
		/// <summary>
		/// When specified, replicates the media from the primary meeting to the new meeting.
		/// Max length: 64
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string PrimaryMeetingId { get; set; }
		
		/// <summary>
		/// A consistent and opaque identifier, created and maintained by the builder to represent a segment of their users.
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string[] TenantIds { get; set; }
		
		/// <summary>
		/// <p>Applies one or more tags to an Amazon Chime SDK meeting. Note the following:</p> <ul> <li> <p>Not all resources have tags. For a list of services with resources that support tagging using this operation, see <a href="https://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/supported-services.html">Services that support the Resource Groups Tagging API</a>. If the resource doesn't yet support this operation, the resource's service might support tagging using its own API operations. For more information, refer to the documentation for that service.</p> </li> <li> <p>Each resource can have up to 50 tags. For other limits, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html#tag-conventions">Tag Naming and Usage Conventions</a> in the <i>AWS General Reference</i>.</p> </li> <li> <p>You can only tag resources that are located in the specified AWS Region for the AWS account.</p> </li> <li> <p>To add tags to a resource, you need the necessary permissions for the service that the resource belongs to as well as permissions for adding tags. For more information, see the documentation for each service.</p> </li> </ul> <important> <p>Do not store personally identifiable information (PII) or other confidential or sensitive information in tags. We use tags to provide you with billing and administration services. Tags are not intended to be used for private or sensitive data.</p> </important> <p> <b>Minimum permissions</b> </p> <p>In addition to the <code>tag:TagResources</code> permission required by this operation, you must also have the tagging permission defined by the service that created the resource. For example, to tag a <code>ChimeSDKMeetings</code> instance using the <code>TagResources</code> operation, you must have both of the following permissions:</p> <p> <code>tag:TagResources</code> </p> <p> <code>ChimeSDKMeetings:CreateTags</code> </p> <note> <p>Some services might have specific requirements for tagging some resources. For example, to tag an Amazon S3 bucket, you must also have the <code>s3:GetBucketTagging</code> permission. If the expected minimum permissions don't work, check the documentation for that service's tagging APIs for more information.</p> </note>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	public class CreateMeetingPostBodyNotificationsConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LambdaFunctionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnsTopicArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SqsQueueArn { get; set; }
	}
	
	public class CreateMeetingPostBodyMeetingFeatures
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AudioFeatures Audio { get; set; }
	}
	
	public enum CreateMeetingWithAttendeesOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="create-attendees")]
		createMinusattendees = 0,
	}
	
	public class CreateMeetingWithAttendeesPostBody
	{
		
		/// <summary>
		/// The unique identifier for the client request. Use a different token for different meetings.
		/// Required
		/// Max length: 64
		/// Min length: 2
		/// Pattern: [-_a-zA-Z0-9]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[-_a-zA-Z0-9]*")]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// <p>The Region in which to create the meeting.</p> <p> Available values: <code>af-south-1</code>, <code>ap-northeast-1</code>, <code>ap-northeast-2</code>, <code>ap-south-1</code>, <code>ap-southeast-1</code>, <code>ap-southeast-2</code>, <code>ca-central-1</code>, <code>eu-central-1</code>, <code>eu-north-1</code>, <code>eu-south-1</code>, <code>eu-west-1</code>, <code>eu-west-2</code>, <code>eu-west-3</code>, <code>sa-east-1</code>, <code>us-east-1</code>, <code>us-east-2</code>, <code>us-west-1</code>, <code>us-west-2</code>. </p> <p>Available values in AWS GovCloud (US) Regions: <code>us-gov-east-1</code>, <code>us-gov-west-1</code>.</p>
		/// Required
		/// Max length: 64
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string MediaRegion { get; set; }
		
		/// <summary>
		/// Reserved.
		/// Max length: 64
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string MeetingHostId { get; set; }
		
		/// <summary>
		/// <p>The external meeting ID.</p> <p>Pattern: <code>[-_&amp;@+=,(){}\[\]\/«».:|'"#a-zA-Z0-9À-ÿ\s]*</code> </p> <p>Values that begin with <code>aws:</code> are reserved. You can't configure a value that uses this prefix. Case insensitive.</p>
		/// Required
		/// Max length: 64
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string ExternalMeetingId { get; set; }
		
		/// <summary>
		/// The configuration settings of the features available to a meeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateMeetingWithAttendeesPostBodyMeetingFeatures MeetingFeatures { get; set; }
		
		/// <summary>
		/// The configuration for resource targets to receive notifications when meeting and attendee events occur.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateMeetingWithAttendeesPostBodyNotificationsConfiguration NotificationsConfiguration { get; set; }
		
		/// <summary>
		/// The attendee information, including attendees' IDs and join tokens.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public CreateAttendeeRequestItem[] Attendees { get; set; }
		
		/// <summary>
		/// When specified, replicates the media from the primary meeting to the new meeting.
		/// Max length: 64
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string PrimaryMeetingId { get; set; }
		
		/// <summary>
		/// A consistent and opaque identifier, created and maintained by the builder to represent a segment of their users.
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string[] TenantIds { get; set; }
		
		/// <summary>
		/// The tags in the request.
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	public class CreateMeetingWithAttendeesPostBodyMeetingFeatures
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AudioFeatures Audio { get; set; }
	}
	
	public class CreateMeetingWithAttendeesPostBodyNotificationsConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LambdaFunctionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnsTopicArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SqsQueueArn { get; set; }
	}
	
	public enum StartMeetingTranscriptionOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="start")]
		start = 0,
	}
	
	public class StartMeetingTranscriptionPostBody
	{
		
		/// <summary>
		/// The configuration for the current transcription operation. Must contain <code>EngineTranscribeSettings</code> or <code>EngineTranscribeMedicalSettings</code>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StartMeetingTranscriptionPostBodyTranscriptionConfiguration TranscriptionConfiguration { get; set; }
	}
	
	public class StartMeetingTranscriptionPostBodyTranscriptionConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EngineTranscribeSettings EngineTranscribeSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EngineTranscribeMedicalSettings EngineTranscribeMedicalSettings { get; set; }
	}
	
	public enum StopMeetingTranscriptionOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="stop")]
		stop = 0,
	}
	
	public enum TagResourceOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tag-resource")]
		tagMinusresource = 0,
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// The ARN of the resource.
		/// Required
		/// Max length: 1011
		/// Min length: 1
		/// Pattern: ^arn:.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1011)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:.*")]
		public string ResourceARN { get; set; }
		
		/// <summary>
		/// Lists the requested tags.
		/// Required
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	public enum UntagResourceOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="untag-resource")]
		untagMinusresource = 0,
	}
	
	public class UntagResourcePostBody
	{
		
		/// <summary>
		/// The ARN of the resource that you're removing tags from.
		/// Required
		/// Max length: 1011
		/// Min length: 1
		/// Pattern: ^arn:.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1011)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:.*")]
		public string ResourceARN { get; set; }
		
		/// <summary>
		/// The tag keys being removed from the resources.
		/// Required
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string[] TagKeys { get; set; }
	}
	
	public class UpdateAttendeeCapabilitiesPutBody
	{
		
		/// <summary>
		/// <p>The media capabilities of an attendee: audio, video, or content. </p> <note> <p>You use the capabilities with a set of values that control what the capabilities can do, such as <code>SendReceive</code> data. For more information about those values, see .</p> </note> <p>When using capabilities, be aware of these corner cases:</p> <ul> <li> <p>You can't set <code>content</code> capabilities to <code>SendReceive</code> or <code>Receive</code> unless you also set <code>video</code> capabilities to <code>SendReceive</code> or <code>Receive</code>. If you don't set the <code>video</code> capability to receive, the response will contain an HTTP 400 Bad Request status code. However, you can set your <code>video</code> capability to receive and you set your <code>content</code> capability to not receive.</p> </li> <li> <p>When you change an <code>audio</code> capability from <code>None</code> or <code>Receive</code> to <code>Send</code> or <code>SendReceive</code> , and if the attendee left their microphone unmuted, audio will flow from the attendee to the other meeting participants.</p> </li> <li> <p>When you change a <code>video</code> or <code>content</code> capability from <code>None</code> or <code>Receive</code> to <code>Send</code> or <code>SendReceive</code> , and if the attendee turned on their video or content streams, remote attendees can receive those streams, but only after media renegotiation between the client and the Amazon Chime back-end server.</p> </li> </ul>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateAttendeeCapabilitiesPutBodyCapabilities Capabilities { get; set; }
	}
	
	public class UpdateAttendeeCapabilitiesPutBodyCapabilities
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MediaCapabilities Audio { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaCapabilities Video { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaCapabilities Content { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
