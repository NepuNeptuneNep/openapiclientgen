//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiHealthStatus
	{
		
		/// <summary>
		/// Health status of API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiVersion
	{
		
		/// <summary>
		/// Version of API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion1 { get; set; }
		
		/// <summary>
		/// Version of the Service
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceVersion")]
		public string ServiceVersion { get; set; }
	}
	
	/// <summary>
	/// Error object reported in case of authentication or authorization errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuthError
	{
		
		/// <summary>
		/// Error message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// Detailed information about the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error_description")]
		public string Error_description { get; set; }
	}
	
	/// <summary>
	/// CDMA measurement
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Cdma
	{
		
		/// <summary>
		/// Base station latitude
		/// Minimum: -90
		/// Maximum: 90
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseLat")]
		[System.ComponentModel.DataAnnotations.Range(-90, 90)]
		public System.Nullable<System.Double> BaseLat { get; set; }
		
		/// <summary>
		/// Base station longitude
		/// Minimum: -180
		/// Maximum: 180
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseLng")]
		[System.ComponentModel.DataAnnotations.Range(-180, 180)]
		public System.Nullable<System.Double> BaseLng { get; set; }
		
		/// <summary>
		/// Base Station ID (CDMA BSID, BID)
		/// Required
		/// Minimum: 0
		/// Maximum: 65535
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bsid")]
		[System.ComponentModel.DataAnnotations.Range(0, 65535)]
		public int Bsid { get; set; }
		
		/// <summary>
		/// Local identification parameters of CDMA serving cell
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localId")]
		public CdmaLocalId LocalId { get; set; }
		
		/// <summary>
		/// Network ID (NID)
		/// Required
		/// Minimum: 0
		/// Maximum: 65535
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nid")]
		[System.ComponentModel.DataAnnotations.Range(0, 65535)]
		public int Nid { get; set; }
		
		/// <summary>
		/// CDMA Network measurements
		/// Minimum items: 1
		/// Maximum items: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nmr")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public CdmaNmr[] Nmr { get; set; }
		
		/// <summary>
		/// Pilot Power (dBm). If Pilot Power is not available directly, it needs to be calculated from Total Power in the band and Pilot Strength with respect to the Total Power. Pilot power less than -142dBm should be mapped to -142. Pilot power greater than -49dBm should be mapped to -49.
		///
		/// Minimum: -142
		/// Maximum: -49
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pilotPower")]
		[System.ComponentModel.DataAnnotations.Range(-142, -49)]
		public System.Nullable<System.Int32> PilotPower { get; set; }
		
		/// <summary>
		/// CDMA Registration Zone (RZ)
		/// Minimum: 0
		/// Maximum: 4095
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rz")]
		[System.ComponentModel.DataAnnotations.Range(0, 4095)]
		public System.Nullable<System.Int32> Rz { get; set; }
		
		/// <summary>
		/// System ID (SID)
		/// Required
		/// Minimum: 1
		/// Maximum: 32767
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.Range(1, 32767)]
		public int Sid { get; set; }
	}
	
	/// <summary>
	/// Local identification parameters of CDMA serving cell
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CdmaLocalId
	{
		
		/// <summary>
		/// CDMA channel frequency
		/// Required
		/// Minimum: 0
		/// Maximum: 2047
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channel")]
		[System.ComponentModel.DataAnnotations.Range(0, 2047)]
		public int Channel { get; set; }
		
		/// <summary>
		/// Pseudonoise offset. This field and CDMA channel frequency together allow for the locally unique identification of the cell.
		///
		/// Required
		/// Minimum: 0
		/// Maximum: 511
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pnOffset")]
		[System.ComponentModel.DataAnnotations.Range(0, 511)]
		public int PnOffset { get; set; }
	}
	
	/// <summary>
	/// CDMA Network measurement
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CdmaNmr
	{
		
		/// <summary>
		/// Base Station ID (CDMA BSID, BID)
		/// Minimum: 0
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bsid")]
		[System.ComponentModel.DataAnnotations.Range(0, 65535)]
		public System.Nullable<System.Int32> Bsid { get; set; }
		
		/// <summary>
		/// CDMA channel frequency
		/// Required
		/// Minimum: 0
		/// Maximum: 2047
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channel")]
		[System.ComponentModel.DataAnnotations.Range(0, 2047)]
		public int Channel { get; set; }
		
		/// <summary>
		/// Pilot Power (dBm). If Pilot Power is not available directly, it needs to be calculated from Total Power in the band and Pilot Strength with respect to the Total Power. Pilot power less than -142dBm should be mapped to -142. Pilot power greater than -49dBm should be mapped to -49.
		///
		/// Minimum: -142
		/// Maximum: -49
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pilotPower")]
		[System.ComponentModel.DataAnnotations.Range(-142, -49)]
		public System.Nullable<System.Int32> PilotPower { get; set; }
		
		/// <summary>
		/// Pseudonoise offset. This field and CDMA channel frequency together allow for the locally unique identification of the cell.
		///
		/// Required
		/// Minimum: 0
		/// Maximum: 511
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pnOffset")]
		[System.ComponentModel.DataAnnotations.Range(0, 511)]
		public int PnOffset { get; set; }
	}
	
	/// <summary>
	/// Information about the client
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClientInfo
	{
		
		/// <summary>
		/// Device firmware version information
		/// Min length: 1
		/// Max length: 150
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firmware")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(150)]
		public string Firmware { get; set; }
		
		/// <summary>
		/// Manufacturer of the device (hardware)
		/// Required
		/// Min length: 2
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="manufacturer")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Manufacturer { get; set; }
		
		/// <summary>
		/// Model of the device (hardware)
		/// Required
		/// Min length: 1
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="model")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Model { get; set; }
		
		/// <summary>
		/// Name of the client software accessing the HERE API
		/// Required
		/// Min length: 3
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Name { get; set; }
		
		/// <summary>
		/// Software platform information of the device, for example operating system name and version.
		/// Min length: 3
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platform")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Platform { get; set; }
		
		/// <summary>
		/// Version of the client software in format X.Y.Z, where X [0..255] is a major, Y [0..255] is a minor, and Z [0..65535] is a build version number. Increase the version/build number for each release of the client.
		/// Required
		/// Min length: 3
		/// Max length: 13
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(13)]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Object wrapper for the error response to a request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Error
	{
		
		/// <summary>
		/// Actionable instructions for the user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// Reason for the error
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cause")]
		public string Cause { get; set; }
		
		/// <summary>
		/// Error code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Copy from X-Correlation-ID header for logging
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="correlationId")]
		public string CorrelationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public ErrorDetail[] Details { get; set; }
		
		/// <summary>
		/// Equals HTTP status code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public double Status { get; set; }
		
		/// <summary>
		/// Localized error string
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Detail about an error
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ErrorDetail
	{
		
		/// <summary>
		/// Localize message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messagePlaceholders")]
		public object MessagePlaceholders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messageTemplate")]
		public string MessageTemplate { get; set; }
		
		/// <summary>
		/// Source of the error, using JSONPath
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// Title for the detail
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// GSM measurement
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Gsm
	{
		
		/// <summary>
		/// Cell identifier (GERAN CID)
		/// Required
		/// Minimum: 0
		/// Maximum: 65535
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cid")]
		[System.ComponentModel.DataAnnotations.Range(0, 65535)]
		public int Cid { get; set; }
		
		/// <summary>
		/// Location Area Code (LAC). Note, value 65534 is invalid.
		/// Required
		/// Minimum: 1
		/// Maximum: 65535
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lac")]
		[System.ComponentModel.DataAnnotations.Range(1, 65535)]
		public int Lac { get; set; }
		
		/// <summary>
		/// Local identification parameters of GSM serving cell
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localId")]
		public GsmLocalId LocalId { get; set; }
		
		/// <summary>
		/// Mobile Country Code (MCC). Note: 0xx is for test networks, 1xx and 8xx are not used
		///
		/// Required
		/// Minimum: 200
		/// Maximum: 999
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mcc")]
		[System.ComponentModel.DataAnnotations.Range(200, 999)]
		public int Mcc { get; set; }
		
		/// <summary>
		/// Mobile Network Code (MNC).
		/// Required
		/// Minimum: 0
		/// Maximum: 999
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mnc")]
		[System.ComponentModel.DataAnnotations.Range(0, 999)]
		public int Mnc { get; set; }
		
		/// <summary>
		/// GSM Network measurements
		/// Minimum items: 1
		/// Maximum items: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nmr")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public GsmNmr[] Nmr { get; set; }
		
		/// <summary>
		/// Received Signal power (dBm). Power less than -110dBm should be mapped to -110. Power greater than -25dBm should be mapped to -25.
		///
		/// Minimum: -110
		/// Maximum: -25
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rxLevel")]
		[System.ComponentModel.DataAnnotations.Range(-110, -25)]
		public System.Nullable<System.Int32> RxLevel { get; set; }
		
		/// <summary>
		/// Timing advance (TA). Expressed in the units of GSM bits equaling to 48/13 μs ~ 1107 meters.
		/// Minimum: 0
		/// Maximum: 63
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ta")]
		[System.ComponentModel.DataAnnotations.Range(0, 63)]
		public System.Nullable<System.Int32> Ta { get; set; }
	}
	
	/// <summary>
	/// Local identification parameters of GSM serving cell
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GsmLocalId
	{
		
		/// <summary>
		/// Broadcast Control Channel (BCCH, synonymous to ARFCN = Absolute Radio Frequency Channel)
		/// Required
		/// Minimum: 0
		/// Maximum: 1023
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bcch")]
		[System.ComponentModel.DataAnnotations.Range(0, 1023)]
		public int Bcch { get; set; }
		
		/// <summary>
		/// Base Station Identity Code (BSIC, for instance, color code)
		/// Required
		/// Minimum: 0
		/// Maximum: 63
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bsic")]
		[System.ComponentModel.DataAnnotations.Range(0, 63)]
		public int Bsic { get; set; }
	}
	
	/// <summary>
	/// GSM Network measurements.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GsmNmr
	{
		
		/// <summary>
		/// Broadcast Control Channel (BCCH, synonymous to ARFCN = Absolute Radio Frequency Channel)
		/// Required
		/// Minimum: 0
		/// Maximum: 1023
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bcch")]
		[System.ComponentModel.DataAnnotations.Range(0, 1023)]
		public int Bcch { get; set; }
		
		/// <summary>
		/// Base Station Identity Code (BSIC, for instance, color code)
		/// Required
		/// Minimum: 0
		/// Maximum: 63
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bsic")]
		[System.ComponentModel.DataAnnotations.Range(0, 63)]
		public int Bsic { get; set; }
		
		/// <summary>
		/// The `lac` and `cid` parameters of global ID for GSM neighbor measurement. They should be from the same PLMN (MCC+MNC) as the serving cell.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="globalIdentity")]
		public GsmNmrGlobalId GlobalIdentity { get; set; }
		
		/// <summary>
		/// Received Signal power (dBm). Power less than -110dBm should be mapped to -110. Power greater than -25dBm should be mapped to -25.
		///
		/// Minimum: -110
		/// Maximum: -25
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rxLevel")]
		[System.ComponentModel.DataAnnotations.Range(-110, -25)]
		public System.Nullable<System.Int32> RxLevel { get; set; }
	}
	
	/// <summary>
	/// The `lac` and `cid` parameters of global ID for GSM neighbor measurement. They should be from the same PLMN (MCC+MNC) as the serving cell.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GsmNmrGlobalId
	{
		
		/// <summary>
		/// Cell identifier (GERAN CID)
		/// Required
		/// Minimum: 0
		/// Maximum: 65535
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cid")]
		[System.ComponentModel.DataAnnotations.Range(0, 65535)]
		public int Cid { get; set; }
		
		/// <summary>
		/// Location Area Code (LAC). Note, value 65534 is invalid.
		/// Required
		/// Minimum: 1
		/// Maximum: 65535
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lac")]
		[System.ComponentModel.DataAnnotations.Range(1, 65535)]
		public int Lac { get; set; }
	}
	
	/// <summary>
	/// Object wrapping the location data submitted in a request for a position. At least one of `gsm`, `wcdma`, `tdscdma`, `lte`, `cdma`, or `wlan` elements is required. Array elements should be unique within the request.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Locate
	{
		
		/// <summary>
		/// CDMA cells (CDMA2000)
		/// Minimum items: 1
		/// Maximum items: 16
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cdma")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public Cdma[] Cdma { get; set; }
		
		/// <summary>
		/// Information about the client
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client")]
		public ClientInfo Client { get; set; }
		
		/// <summary>
		/// GSM cells (GERAN)
		/// Minimum items: 1
		/// Maximum items: 16
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gsm")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public Gsm[] Gsm { get; set; }
		
		/// <summary>
		/// LTE cells (E-UTRA, 4G)
		/// Minimum items: 1
		/// Maximum items: 16
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lte")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public Lte[] Lte { get; set; }
		
		/// <summary>
		/// TD-SCDMA cells (UTRA-TDD, 3G UMTS TDD)
		/// Minimum items: 1
		/// Maximum items: 16
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tdscdma")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public Tdscdma[] Tdscdma { get; set; }
		
		/// <summary>
		/// WCDMA cells (UTRA-FDD, 3G UMTS)
		/// Minimum items: 1
		/// Maximum items: 16
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wcdma")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public Wcdma[] Wcdma { get; set; }
		
		/// <summary>
		/// WLAN access positions. For privacy reasons positioning based on a single WLAN AP is not possible; there has to be at least one other matching wlan or cell. Alternatively, you can allow fallbacks to less accurate single WLAN AP location estimates by using the setting `fallback=singleWifi`.
		///
		/// Minimum items: 1
		/// Maximum items: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wlan")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public WlanLocate[] Wlan { get; set; }
	}
	
	/// <summary>
	/// LTE measurement
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Lte
	{
		
		/// <summary>
		/// E-UTRA Cell Identifier (UC-Id), 28 bits (20 bits eNodeB and 8 bits Cell ID). MCC + MNC + CID uniquely identifies the LTE cell, TAC is optional.
		///
		/// Required
		/// Minimum: 0
		/// Maximum: 268435455
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cid")]
		[System.ComponentModel.DataAnnotations.Range(0, 268435455)]
		public int Cid { get; set; }
		
		/// <summary>
		/// Local identification parameters of LTE serving cell
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localId")]
		public LteLocalId LocalId { get; set; }
		
		/// <summary>
		/// Mobile Country Code (MCC). Note: 0xx is for test networks, 1xx and 8xx are not used
		///
		/// Required
		/// Minimum: 200
		/// Maximum: 999
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mcc")]
		[System.ComponentModel.DataAnnotations.Range(200, 999)]
		public int Mcc { get; set; }
		
		/// <summary>
		/// Mobile Network Code (MNC).
		/// Required
		/// Minimum: 0
		/// Maximum: 999
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mnc")]
		[System.ComponentModel.DataAnnotations.Range(0, 999)]
		public int Mnc { get; set; }
		
		/// <summary>
		/// LTE Network measurements
		/// Minimum items: 1
		/// Maximum items: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nmr")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public LteNmr[] Nmr { get; set; }
		
		/// <summary>
		/// Reference Signal Received Power (RSRP) in dBm. Power less than -140dBm should be mapped to -140. Power greater than -44dBm should be mapped to -44.
		///
		/// Minimum: -140
		/// Maximum: -44
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rsrp")]
		[System.ComponentModel.DataAnnotations.Range(-140, -44)]
		public System.Nullable<System.Int32> Rsrp { get; set; }
		
		/// <summary>
		/// Reference Signal Received Quality (RSRQ) in dBm. Values less than -19.5dB should be mapped to -19.5, and values greater than -3dB should be mapped to -3dB.
		///
		/// Minimum: -19.5
		/// Maximum: -3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rsrq")]
		[System.ComponentModel.DataAnnotations.Range(-19.5, -3)]
		public System.Nullable<System.Double> Rsrq { get; set; }
		
		/// <summary>
		/// Timing Advance. Expressed in the units of 16*Ts (16 Basic time units) = 16/(15000*2048) seconds ~ 156meters. For reference see 3GPP TS 36.213 and 36.211.
		///
		/// Minimum: 0
		/// Maximum: 1282
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ta")]
		[System.ComponentModel.DataAnnotations.Range(0, 1282)]
		public System.Nullable<System.Int32> Ta { get; set; }
		
		/// <summary>
		/// Tracking Area Code (TAC)
		/// Minimum: 0
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tac")]
		[System.ComponentModel.DataAnnotations.Range(0, 65535)]
		public System.Nullable<System.Int32> Tac { get; set; }
	}
	
	/// <summary>
	/// Local identification parameters of LTE serving cell
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LteLocalId
	{
		
		/// <summary>
		/// Evolved Absolute Radio Frequency Channel (E-ARFCN)
		/// Required
		/// Minimum: 0
		/// Maximum: 262143
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="earfcn")]
		[System.ComponentModel.DataAnnotations.Range(0, 262143)]
		public int Earfcn { get; set; }
		
		/// <summary>
		/// Physical Cell Identity (PCI)
		/// Required
		/// Minimum: 0
		/// Maximum: 503
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pci")]
		[System.ComponentModel.DataAnnotations.Range(0, 503)]
		public int Pci { get; set; }
	}
	
	/// <summary>
	/// LTE Network measurement
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LteNmr
	{
		
		/// <summary>
		/// E-UTRA Cell Identifier (UC-Id), 28 bits (20 bits eNodeB and 8 bits Cell ID). MCC + MNC + CID uniquely identifies the LTE cell, TAC is optional.
		///
		/// Minimum: 0
		/// Maximum: 268435455
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cid")]
		[System.ComponentModel.DataAnnotations.Range(0, 268435455)]
		public System.Nullable<System.Int32> Cid { get; set; }
		
		/// <summary>
		/// Evolved Absolute Radio Frequency Channel (E-ARFCN)
		/// Required
		/// Minimum: 0
		/// Maximum: 262143
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="earfcn")]
		[System.ComponentModel.DataAnnotations.Range(0, 262143)]
		public int Earfcn { get; set; }
		
		/// <summary>
		/// Physical Cell Identity (PCI)
		/// Required
		/// Minimum: 0
		/// Maximum: 503
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pci")]
		[System.ComponentModel.DataAnnotations.Range(0, 503)]
		public int Pci { get; set; }
		
		/// <summary>
		/// Reference Signal Received Power (RSRP) in dBm. Power less than -140dBm should be mapped to -140. Power greater than -44dBm should be mapped to -44.
		///
		/// Minimum: -140
		/// Maximum: -44
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rsrp")]
		[System.ComponentModel.DataAnnotations.Range(-140, -44)]
		public System.Nullable<System.Int32> Rsrp { get; set; }
		
		/// <summary>
		/// Reference Signal Received Quality (RSRQ) in dBm. Values less than -19.5dB should be mapped to -19.5, and values greater than -3dB should be mapped to -3dB.
		///
		/// Minimum: -19.5
		/// Maximum: -3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rsrq")]
		[System.ComponentModel.DataAnnotations.Range(-19.5, -3)]
		public System.Nullable<System.Double> Rsrq { get; set; }
	}
	
	/// <summary>
	/// TD-SCDMA measurement.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Tdscdma
	{
		
		/// <summary>
		/// UTRAN Cell Identifier (UC-Id), 28 bits (12 bits RNC and 16 bits Cell ID). MCC + MNC + CID uniquely identifies the WCDMA cell, LAC is optional.
		///
		/// Required
		/// Minimum: 0
		/// Maximum: 268435455
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cid")]
		[System.ComponentModel.DataAnnotations.Range(0, 268435455)]
		public int Cid { get; set; }
		
		/// <summary>
		/// Location Area Code (LAC). Note, value 65534 is invalid.
		/// Minimum: 1
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lac")]
		[System.ComponentModel.DataAnnotations.Range(1, 65535)]
		public System.Nullable<System.Int32> Lac { get; set; }
		
		/// <summary>
		/// Local identification parameters of TD-SCDMA serving cell
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localId")]
		public TdscdmaLocalId LocalId { get; set; }
		
		/// <summary>
		/// Mobile Country Code (MCC). Note: 0xx is for test networks, 1xx and 8xx are not used
		///
		/// Required
		/// Minimum: 200
		/// Maximum: 999
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mcc")]
		[System.ComponentModel.DataAnnotations.Range(200, 999)]
		public int Mcc { get; set; }
		
		/// <summary>
		/// Mobile Network Code (MNC).
		/// Required
		/// Minimum: 0
		/// Maximum: 999
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mnc")]
		[System.ComponentModel.DataAnnotations.Range(0, 999)]
		public int Mnc { get; set; }
		
		/// <summary>
		/// TD-SCDMA Network measurements. Maximum of 8 distinct uarfcn frequencies.
		/// Minimum items: 1
		/// Maximum items: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nmr")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public TdscdmaNmr[] Nmr { get; set; }
		
		/// <summary>
		/// UTRAN pathloss (dBm)
		/// Minimum: 46
		/// Maximum: 158
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pathloss")]
		[System.ComponentModel.DataAnnotations.Range(46, 158)]
		public System.Nullable<System.Int32> Pathloss { get; set; }
		
		/// <summary>
		/// Received Signal Code Power (RSCP) in dBm. Power less than -120dBm should be mapped to -120. Power greater than -25dBm should be mapped to -25.
		///
		/// Minimum: -120
		/// Maximum: -25
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rscp")]
		[System.ComponentModel.DataAnnotations.Range(-120, -25)]
		public System.Nullable<System.Int32> Rscp { get; set; }
		
		/// <summary>
		/// Timing advance (TA). Round-Trip distance presented in the units of 4*c/7.68e6 ~156 meters. That is, the scaling factor is 4 times the chip length at chip rate of 7.68 Mchips/s. Note that at chip rates 1.28 Mchips/s and 3.84 Mchips/s you need to scale according to chip length of 7.68 Mchips/s, that is, multiply by 6 or 2 if needed.
		///
		/// Minimum: 0
		/// Maximum: 1530
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ta")]
		[System.ComponentModel.DataAnnotations.Range(0, 1530)]
		public System.Nullable<System.Int32> Ta { get; set; }
	}
	
	/// <summary>
	/// Local identification parameters of TD-SCDMA serving cell
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TdscdmaLocalId
	{
		
		/// <summary>
		/// Cell Parameters ID (CDMA Spreading Code ID)
		/// Required
		/// Minimum: 0
		/// Maximum: 127
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cellParams")]
		[System.ComponentModel.DataAnnotations.Range(0, 127)]
		public int CellParams { get; set; }
		
		/// <summary>
		/// UTRAN Absolute Radio Frequency (U-ARFCN)
		/// Required
		/// Minimum: 0
		/// Maximum: 16383
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uarfcn")]
		[System.ComponentModel.DataAnnotations.Range(0, 16383)]
		public int Uarfcn { get; set; }
	}
	
	/// <summary>
	/// TD-SCDMA Network measurement
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TdscdmaNmr
	{
		
		/// <summary>
		/// Cell Parameters ID (CDMA Spreading Code ID)
		/// Required
		/// Minimum: 0
		/// Maximum: 127
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cellParams")]
		[System.ComponentModel.DataAnnotations.Range(0, 127)]
		public int CellParams { get; set; }
		
		/// <summary>
		/// UTRAN Cell Identifier (UC-Id), 28 bits (12 bits RNC and 16 bits Cell ID). MCC + MNC + CID uniquely identifies the WCDMA cell, LAC is optional.
		///
		/// Minimum: 0
		/// Maximum: 268435455
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cid")]
		[System.ComponentModel.DataAnnotations.Range(0, 268435455)]
		public System.Nullable<System.Int32> Cid { get; set; }
		
		/// <summary>
		/// UTRAN pathloss (dBm)
		/// Minimum: 46
		/// Maximum: 158
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pathloss")]
		[System.ComponentModel.DataAnnotations.Range(46, 158)]
		public System.Nullable<System.Int32> Pathloss { get; set; }
		
		/// <summary>
		/// Received Signal Code Power (RSCP) in dBm. Power less than -120dBm should be mapped to -120. Power greater than -25dBm should be mapped to -25.
		///
		/// Minimum: -120
		/// Maximum: -25
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rscp")]
		[System.ComponentModel.DataAnnotations.Range(-120, -25)]
		public System.Nullable<System.Int32> Rscp { get; set; }
		
		/// <summary>
		/// UTRAN Absolute Radio Frequency (U-ARFCN)
		/// Required
		/// Minimum: 0
		/// Maximum: 16383
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uarfcn")]
		[System.ComponentModel.DataAnnotations.Range(0, 16383)]
		public int Uarfcn { get; set; }
	}
	
	/// <summary>
	/// WCDMA measurement
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Wcdma
	{
		
		/// <summary>
		/// UTRAN Cell Identifier (UC-Id), 28 bits (12 bits RNC and 16 bits Cell ID). MCC + MNC + CID uniquely identifies the WCDMA cell, LAC is optional.
		///
		/// Required
		/// Minimum: 0
		/// Maximum: 268435455
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cid")]
		[System.ComponentModel.DataAnnotations.Range(0, 268435455)]
		public int Cid { get; set; }
		
		/// <summary>
		/// Location Area Code (LAC). Note, value 65534 is invalid.
		/// Minimum: 1
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lac")]
		[System.ComponentModel.DataAnnotations.Range(1, 65535)]
		public System.Nullable<System.Int32> Lac { get; set; }
		
		/// <summary>
		/// Local identification parameters of WCDMA serving cell
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localId")]
		public WcdmaLocalId LocalId { get; set; }
		
		/// <summary>
		/// Mobile Country Code (MCC). Note: 0xx is for test networks, 1xx and 8xx are not used
		///
		/// Required
		/// Minimum: 200
		/// Maximum: 999
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mcc")]
		[System.ComponentModel.DataAnnotations.Range(200, 999)]
		public int Mcc { get; set; }
		
		/// <summary>
		/// Mobile Network Code (MNC).
		/// Required
		/// Minimum: 0
		/// Maximum: 999
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mnc")]
		[System.ComponentModel.DataAnnotations.Range(0, 999)]
		public int Mnc { get; set; }
		
		/// <summary>
		/// WCDMA Network measurements. Maximum of 8 distinct uarfcndl frequencies.
		/// Minimum items: 1
		/// Maximum items: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nmr")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public WcdmaNmr[] Nmr { get; set; }
		
		/// <summary>
		/// UTRAN pathloss (dBm)
		/// Minimum: 46
		/// Maximum: 158
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pathloss")]
		[System.ComponentModel.DataAnnotations.Range(46, 158)]
		public System.Nullable<System.Int32> Pathloss { get; set; }
		
		/// <summary>
		/// Received Signal Code Power (RSCP) in dBm. Power less than -120dBm should be mapped to -120. Power greater than -25dBm should be mapped to -25.
		///
		/// Minimum: -120
		/// Maximum: -25
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rscp")]
		[System.ComponentModel.DataAnnotations.Range(-120, -25)]
		public System.Nullable<System.Int32> Rscp { get; set; }
	}
	
	/// <summary>
	/// Local identification parameters of WCDMA serving cell
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WcdmaLocalId
	{
		
		/// <summary>
		/// Primary Scrambling Code (PSC, Primary CPICH, Primary Control Pilot Channel).
		/// Required
		/// Minimum: 0
		/// Maximum: 511
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="psc")]
		[System.ComponentModel.DataAnnotations.Range(0, 511)]
		public int Psc { get; set; }
		
		/// <summary>
		/// UTRAN Absolute Radio Frequency Downlink (UARFCN-DL)
		/// Required
		/// Minimum: 0
		/// Maximum: 16383
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uarfcndl")]
		[System.ComponentModel.DataAnnotations.Range(0, 16383)]
		public int Uarfcndl { get; set; }
	}
	
	/// <summary>
	/// WCDMA Network measurement
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WcdmaNmr
	{
		
		/// <summary>
		/// UTRAN Cell Identifier (UC-Id), 28 bits (12 bits RNC and 16 bits Cell ID). MCC + MNC + CID uniquely identifies the WCDMA cell, LAC is optional.
		///
		/// Minimum: 0
		/// Maximum: 268435455
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cid")]
		[System.ComponentModel.DataAnnotations.Range(0, 268435455)]
		public System.Nullable<System.Int32> Cid { get; set; }
		
		/// <summary>
		/// UTRAN pathloss (dBm)
		/// Minimum: 46
		/// Maximum: 158
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pathloss")]
		[System.ComponentModel.DataAnnotations.Range(46, 158)]
		public System.Nullable<System.Int32> Pathloss { get; set; }
		
		/// <summary>
		/// Primary Scrambling Code (PSC, Primary CPICH, Primary Control Pilot Channel).
		/// Required
		/// Minimum: 0
		/// Maximum: 511
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="psc")]
		[System.ComponentModel.DataAnnotations.Range(0, 511)]
		public int Psc { get; set; }
		
		/// <summary>
		/// Received Signal Code Power (RSCP) in dBm. Power less than -120dBm should be mapped to -120. Power greater than -25dBm should be mapped to -25.
		///
		/// Minimum: -120
		/// Maximum: -25
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rscp")]
		[System.ComponentModel.DataAnnotations.Range(-120, -25)]
		public System.Nullable<System.Int32> Rscp { get; set; }
		
		/// <summary>
		/// UTRAN Absolute Radio Frequency Downlink (UARFCN-DL)
		/// Required
		/// Minimum: 0
		/// Maximum: 16383
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uarfcndl")]
		[System.ComponentModel.DataAnnotations.Range(0, 16383)]
		public int Uarfcndl { get; set; }
	}
	
	/// <summary>
	/// WLAN measurement
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WlanLocate
	{
		
		/// <summary>
		/// The MAC address of the WLAN access point. MAC-48 address with colon (:) or hyphen (-) separators, upper or lower case hex digits. Note that if the SSID contains postfix "_nomap", the AP should not be used for positioning.
		///
		/// Required
		/// Pattern: ^((([0-9a-fA-F]{2}:){5})|(([0-9a-fA-F]{2}-){5}))[0-9a-fA-F]{2}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mac")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^((([0-9a-fA-F]{2}:){5})|(([0-9a-fA-F]{2}-){5}))[0-9a-fA-F]{2}$")]
		public string Mac { get; set; }
		
		/// <summary>
		/// Received signal level (dBm) at the terminal
		/// Minimum: -128
		/// Maximum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rss")]
		[System.ComponentModel.DataAnnotations.Range(-128, 0)]
		public System.Nullable<System.Int32> Rss { get; set; }
	}
	
	/// <summary>
	/// Object containing information on a location where a measurement was taken.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PositionLocate
	{
		
		/// <summary>
		/// Uncertainty circle radius in meters (degree of confidence according to the `confidence` parameter).
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accuracy")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Double.MaxValue)]
		public double Accuracy { get; set; }
		
		/// <summary>
		/// Altitude in meters (referenced to the WGS-84 ellipsoid) negative or positive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alt")]
		public System.Nullable<System.Double> Alt { get; set; }
		
		/// <summary>
		/// Uncertainty of the altitude estimate in meters (degree of confidence according to the `confidence` parameter). This field superceeds old `altaccuracy`.
		///
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="altAccuracy")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Double.MaxValue)]
		public System.Nullable<System.Double> AltAccuracy { get; set; }
		
		/// <summary>
		/// Latitude in WGS-84 format, decimal representation ranging from -90 to 90.
		/// Required
		/// Minimum: -90
		/// Maximum: 90
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lat")]
		[System.ComponentModel.DataAnnotations.Range(-90, 90)]
		public double Lat { get; set; }
		
		/// <summary>
		/// Longitude in WGS-84 format, decimal representation ranging from -180 to 180.
		/// Required
		/// Minimum: -180
		/// Maximum: 180
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lng")]
		[System.ComponentModel.DataAnnotations.Range(-180, 180)]
		public double Lng { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Service health
		/// Tests basic health of the service
		/// GetHealth health
		/// </summary>
		/// <returns>Health status</returns>
		public async Task<ApiHealthStatus> GetHealthAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "health";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiHealthStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Location query
		/// Request WGS-84 compliant geocoordinates for a location based on 2G/3G/4G cell and/or WLAN measurements.
		/// PostLocate locate
		/// </summary>
		/// <param name="confidence">Confidence level in percent for the accuracy/uncertainty in the location estimate response. If not specified, the default is 68 (this corresponds to a 68% probability that the true position is within the accuracy/uncertainty radius of the location estimate: the higher the number, the greater the confidence level).
		///
		/// Minimum: 50
		/// Maximum: 99
		// </param>
		/// <param name="fallback">Acceptable fallback options for cell and WLAN positioning. Values `area` and `any` apply to cell based positioning, and value `singleWifi` applies to WLAN based positioning. Both cell and WLAN options may be specified in the same request. If both `area` and `any` are specified, then `area` is ignored.
		///
		///By default, cell based positioning returns cell tower level location estimates only. If you allow a WGS-84 compliant geocoordinate location estimate based on LAC, RNC, TAC, NID, or RZ areas, use the `fallback=area` setting. If you use the `fallback=any` setting, the service uses all available cell fallback methods and therefore the location estimate in the response may be at the MNC, SID, or MCC level.
		///
		///For privacy reasons, the precise positioning based on a single WLAN AP is not possible. You can use the `fallback=singleWifi` setting to allow less accurate positioning based on a single WLAN AP. In that case, the center location of the position estimate will be deviated and the reported accuracy radius will be larger.
		///</param>
		/// <param name="desired">Comma-separated list of additional data fields that the service should include in the response if data is available. The query parameter supports the value `altitude`.
		///</param>
		/// <param name="required">Comma-separated list of additional data fields that the service should include in the response. If the data is not available, the response contains an error message. The query parameter supports the value `altitude`.
		///</param>
		/// <param name="requestBody">Request body containing cell and/or WLAN measurement data. Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.
		///</param>
		/// <returns>Request processed successfully and a WGS-84 compliant geocoordinate location estimate was included in the response.</returns>
		public async Task<PostLocateReturn> PostLocateAsync(int confidence, string[] fallback, string[] desired, string[] required, Locate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "locate?confidence="+confidence+"&"+string.Join("&", fallback.Select(z => $"fallback={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", desired.Select(z => $"desired={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", required.Select(z => $"required={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PostLocateReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// API version
		/// Retrieves API Specification version information
		/// GetApiVersion version
		/// </summary>
		/// <returns>Version of API</returns>
		public async Task<ApiVersion> GetApiVersionAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "version";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiVersion>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum PostLocateContent_Encoding
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gzip = 0,
	}
	
	public class PostLocateReturn
	{
		
		/// <summary>
		/// Object containing information on a location where a measurement was taken.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public PositionLocate Location { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
