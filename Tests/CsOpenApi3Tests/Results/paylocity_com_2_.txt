//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The Add Client Secret Request Model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddClientSecret
	{
		
		/// <summary>
		/// A value sent with the 'ACTION NEEDED: Web Link API Credentials Expiring Soon.' email notification.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
	}
	
	/// <summary>
	/// The additional pay rate model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AdditionalRate
	{
		
		/// <summary>
		/// Not required. If populated, must match one of the system coded values available in the Additional Rates Change Reason drop down.<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeReason")]
		public string ChangeReason { get; set; }
		
		/// <summary>
		/// Not required. Valid values must match one of the system coded cost centers available in the Additional Rates Cost Center level 1 drop down. This cell must be in a text format.<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costCenter1")]
		public string CostCenter1 { get; set; }
		
		/// <summary>
		/// Not required. Valid values must match one of the system coded cost centers available in the Additional Rates Cost Center level 2 drop down. This cell must be in a text format.<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costCenter2")]
		public string CostCenter2 { get; set; }
		
		/// <summary>
		/// Not required. Valid values must match one of the system coded cost centers available in the Additional Rates Cost Center level 3 drop down. This cell must be in a text format.<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costCenter3")]
		public string CostCenter3 { get; set; }
		
		/// <summary>
		/// Required. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effectiveDate")]
		public string EffectiveDate { get; set; }
		
		/// <summary>
		/// Not required. Must match one of the system coded check dates available in the Additional Rates End Check Date drop down. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endCheckDate")]
		public string EndCheckDate { get; set; }
		
		/// <summary>
		/// Not required. If populated, must match one of the system coded values available in the Additional Rates Job drop down.<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="job")]
		public string Job { get; set; }
		
		/// <summary>
		/// Required. Enter dollar amount that corresponds to the Per selection.<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rate")]
		public System.Nullable<System.Double> Rate { get; set; }
		
		/// <summary>
		/// Required. If populated, must match one of the system coded values available in the Additional Rates Rate Code drop down.<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rateCode")]
		public string RateCode { get; set; }
		
		/// <summary>
		/// Not required.<br  />Max length: 4000<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rateNotes")]
		public string RateNotes { get; set; }
		
		/// <summary>
		/// Required. Valid values are HOUR or WEEK.<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ratePer")]
		public string RatePer { get; set; }
		
		/// <summary>
		/// Not required. If populated, must match one of the system coded values available in the Additional Rates Shift drop down.<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shift")]
		public string Shift { get; set; }
	}
	
	/// <summary>
	/// The benefit setup model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BenefitSetup
	{
		
		/// <summary>
		/// Benefit Class code. Values are configured in Web Pay Company > Setup > Benefits > Classes.<br  />Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="benefitClass")]
		public string BenefitClass { get; set; }
		
		/// <summary>
		/// Date when Benefit Class takes effect. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="benefitClassEffectiveDate")]
		public string BenefitClassEffectiveDate { get; set; }
		
		/// <summary>
		/// Salary used to configure benefits.<br  />Decimal(12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="benefitSalary")]
		public System.Nullable<System.Double> BenefitSalary { get; set; }
		
		/// <summary>
		/// Date when Benefit Salary takes effect. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="benefitSalaryEffectiveDate")]
		public string BenefitSalaryEffectiveDate { get; set; }
		
		/// <summary>
		/// Applicable only for HR Enhanced clients and Benefit Classes with ACA Employment Type of Full Time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doNotApplyAdministrativePeriod")]
		public System.Nullable<System.Boolean> DoNotApplyAdministrativePeriod { get; set; }
		
		/// <summary>
		/// Only valid for HR Enhanced clients and Benefit Classes that are ACA Employment Type of Full Time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isMeasureAcaEligibility")]
		public System.Nullable<System.Boolean> IsMeasureAcaEligibility { get; set; }
	}
	
	/// <summary>
	/// The Client Credentials Response Model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClientCredentialsResponse
	{
		
		/// <summary>
		/// The client's secret
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientSecret")]
		public string ClientSecret { get; set; }
		
		/// <summary>
		/// The client's secret expiration date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientSecretExpirationDate")]
		public string ClientSecretExpirationDate { get; set; }
	}
	
	/// <summary>
	/// The Company Codes model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompanyCodes
	{
		
		/// <summary>
		/// Code.<br  /> Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description. <br  /> Max length: 150
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomFieldDefinition
	{
		
		/// <summary>
		/// The custom field category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// Specifies the default value of the custom field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public string DefaultValue { get; set; }
		
		/// <summary>
		/// Indicates whether the custom field is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isRequired")]
		public System.Nullable<System.Boolean> IsRequired { get; set; }
		
		/// <summary>
		/// The custom field label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// The custom field type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// A set of values that are applicable to the custom field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public CustomFieldDefinitionValues[] CustomFieldDefinitionValues { get; set; }
	}
	
	public class CustomFieldDefinitionValues
	{
		
		/// <summary>
		/// The custom field code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The custom field description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// The Direct Deposit model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DirectDeposit
	{
		
		/// <summary>
		/// Additional Direct Deposits that are not the main Direct Deposit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalDirectDeposit")]
		public DirectDepositAdditionalDirectDeposit[] DirectDepositAdditionalDirectDeposit { get; set; }
		
		/// <summary>
		/// The main Direct Deposit account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mainDirectDeposit")]
		public DirectDepositMainDirectDeposit MainDirectDeposit { get; set; }
	}
	
	public class DirectDepositAdditionalDirectDeposit
	{
		
		/// <summary>
		/// Account number, entered without special characters and spaces. <br  />Max length: 17<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// Account type. Valid values are *C* (Checking), *S* (Saving), *P* (Pay Card). <br   />Max length: 1<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountType")]
		public string AccountType { get; set; }
		
		/// <summary>
		/// Amount value to be deposited to the account.<br  />Decimal (12,2)<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Amount type to indicate the context of the amount. Common values are *F* (FLAT), *F-* (Net Minus), *P* (Percent). <br  /> Max length: 5<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountType")]
		public string AmountType { get; set; }
		
		/// <summary>
		/// Indicates if direct deposit should be blocked when special check types such as Bonus are processed.<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blockSpecial")]
		public System.Nullable<System.Boolean> BlockSpecial { get; set; }
		
		/// <summary>
		/// Indicates if account will not pre-note.<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSkipPreNote")]
		public System.Nullable<System.Boolean> IsSkipPreNote { get; set; }
		
		/// <summary>
		/// Name on the bank account. Defaults to employee's name. <br  />Max length: 30<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameOnAccount")]
		public string NameOnAccount { get; set; }
		
		/// <summary>
		/// Date to end the pre-note of the account. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preNoteDate")]
		public string PreNoteDate { get; set; }
		
		/// <summary>
		/// ABA Transit Routing Number, entered without dashes or spaces. <br  />Max length: 9<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routingNumber")]
		public string RoutingNumber { get; set; }
	}
	
	public class DirectDepositMainDirectDeposit
	{
		
		/// <summary>
		/// Account number, entered without special characters and spaces. <br  />Max length: 17
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// Account type. Valid values are *C* (Checking), *S* (Saving), *P* (Pay Card). <br   />Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountType")]
		public string AccountType { get; set; }
		
		/// <summary>
		/// Indicates if direct deposit should be blocked when special check types such as Bonus are processed.<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blockSpecial")]
		public System.Nullable<System.Boolean> BlockSpecial { get; set; }
		
		/// <summary>
		/// Indicates if account will not pre-note.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSkipPreNote")]
		public System.Nullable<System.Boolean> IsSkipPreNote { get; set; }
		
		/// <summary>
		/// Name on the bank account. Defaults to employee's name. <br  />Max length: 30<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameOnAccount")]
		public string NameOnAccount { get; set; }
		
		/// <summary>
		/// Date to end the pre-note of the account. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preNoteDate")]
		public string PreNoteDate { get; set; }
		
		/// <summary>
		/// ABA Transit Routing Number, entered without dashes or spaces. <br  />Max length: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routingNumber")]
		public string RoutingNumber { get; set; }
	}
	
	/// <summary>
	/// The employee earning model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Earning
	{
		
		/// <summary>
		/// Third-party agency associated with earning. Must match Company setup.<br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agency")]
		public string Agency { get; set; }
		
		/// <summary>
		/// Value that matches CalculationCode to add to gross wages. For percentage (%), enter whole number (10 = 10%).  <br  />Decimal(12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Year to Date dollar amount not to be exceeded for an earning in the calendar year. Used only with company driven maximums. <br  />Decimal(12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annualMaximum")]
		public System.Nullable<System.Double> AnnualMaximum { get; set; }
		
		/// <summary>
		/// Defines how earnings are calculated. Common values are *% (percentage of gross), flat (flat dollar amount)*. Defaulted to the Company setup calcCode for earning. <br  />Max length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calculationCode")]
		public string CalculationCode { get; set; }
		
		/// <summary>
		/// Cost Center associated with earning. Must match Company setup.<br  /> Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costCenter1")]
		public string CostCenter1 { get; set; }
		
		/// <summary>
		/// Cost Center associated with earning. Must match Company setup.<br  /> Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costCenter2")]
		public string CostCenter2 { get; set; }
		
		/// <summary>
		/// Cost Center associated with earning. Must match Company setup.<br  /> Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costCenter3")]
		public string CostCenter3 { get; set; }
		
		/// <summary>
		/// Earning code. Must match Company setup. <br  />Max length: 10
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="earningCode")]
		public string EarningCode { get; set; }
		
		/// <summary>
		/// Date earning is active. Defaulted to run date or check date based on Company setup. Common formats are MM-DD-CCYY, CCYY-MM-DD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effectiveDate")]
		public string EffectiveDate { get; set; }
		
		/// <summary>
		/// Stop date of an earning. Common formats are MM-DD-CCYY, CCYY-MM-DD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public string EndDate { get; set; }
		
		/// <summary>
		/// Needed if earning is applied differently from the payroll frequency (one time earning for example).<br  /> Max length: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public string Frequency { get; set; }
		
		/// <summary>
		/// Dollar amount. The employee earning will stop when the goal amount is reached.<br  /> Decimal(12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="goal")]
		public System.Nullable<System.Double> Goal { get; set; }
		
		/// <summary>
		/// The value is used in conjunction with the Rate field. When entering Group Term Life Insurance (GTL), it should contain the full amount of the group term life insurance policy. <br  /> Decimal(12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hoursOrUnits")]
		public System.Nullable<System.Double> HoursOrUnits { get; set; }
		
		/// <summary>
		/// Used for ACA. If not entered, defaulted to Company earning setup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSelfInsured")]
		public System.Nullable<System.Boolean> IsSelfInsured { get; set; }
		
		/// <summary>
		/// Job code associated with earnings. Must match Company setup.<br  /> Max length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobCode")]
		public string JobCode { get; set; }
		
		/// <summary>
		/// Information to print on the check stub if agency is set up for this earning. <br  />Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="miscellaneousInfo")]
		public string MiscellaneousInfo { get; set; }
		
		/// <summary>
		/// Amount already paid to employee toward goal. <br  /> Decimal(12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paidTowardsGoal")]
		public System.Nullable<System.Double> PaidTowardsGoal { get; set; }
		
		/// <summary>
		/// Maximum amount of the earning on a single paycheck. <br  /> Decimal(12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payPeriodMaximum")]
		public System.Nullable<System.Double> PayPeriodMaximum { get; set; }
		
		/// <summary>
		/// Minimum amount of the earning on a single paycheck. <br  /> Decimal(12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payPeriodMinimum")]
		public System.Nullable<System.Double> PayPeriodMinimum { get; set; }
		
		/// <summary>
		/// Rate is used in conjunction with the hoursOrUnits field. <br  /> Decimal(12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rate")]
		public System.Nullable<System.Double> Rate { get; set; }
		
		/// <summary>
		/// Rate Code applies to additional pay rates entered for an employee. Must match Company setup. <br  /> Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rateCode")]
		public string RateCode { get; set; }
		
		/// <summary>
		/// Start date of an earning based on payroll calendar. Common formats are MM-DD-CCYY, CCYY-MM-DD.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public string StartDate { get; set; }
	}
	
	/// <summary>
	/// The emergency contact model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EmergencyContact
	{
		
		/// <summary>
		/// 1st address line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address1")]
		public string Address1 { get; set; }
		
		/// <summary>
		/// 2nd address line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address2")]
		public string Address2 { get; set; }
		
		/// <summary>
		/// City.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// County.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Country.  Must be a valid 3 character country code.  Common values are *USA* (United States), *CAN* (Canada).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="county")]
		public string County { get; set; }
		
		/// <summary>
		/// Contact email.  Must be valid email address format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Required. Contact first name. <br  />Max length: 40
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Contact Home Phone.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homePhone")]
		public string HomePhone { get; set; }
		
		/// <summary>
		/// Required. Contact last name. <br  />Max length: 40
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// Contact Mobile Phone.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilePhone")]
		public string MobilePhone { get; set; }
		
		/// <summary>
		/// Notes. <br  />Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// Contact Pager.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pager")]
		public string Pager { get; set; }
		
		/// <summary>
		/// Required. Contact primary phone type.  Must match Company setup.  Valid  values are H (Home), M (Mobile), P (Pager), W (Work)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryPhone")]
		public string PrimaryPhone { get; set; }
		
		/// <summary>
		/// Required. Contact priority. Valid values are *P* (Primary) or *S* (Secondary).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public string Priority { get; set; }
		
		/// <summary>
		/// Required. Contact relationship.  Must match Company setup.  Common values are Spouse, Mother, Father.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relationship")]
		public string Relationship { get; set; }
		
		/// <summary>
		/// State or Province.  If U.S. address, must be valid 2 character state code.  Common values are *IL* (Illinois), *CA* (California).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Valid values are *true* or *false*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syncEmployeeInfo")]
		public System.Nullable<System.Boolean> SyncEmployeeInfo { get; set; }
		
		/// <summary>
		/// Work Extension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workExtension")]
		public string WorkExtension { get; set; }
		
		/// <summary>
		/// Contact Work Phone.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workPhone")]
		public string WorkPhone { get; set; }
		
		/// <summary>
		/// Postal code.  If U.S. address, must be a valid zip code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zip")]
		public string Zip { get; set; }
	}
	
	/// <summary>
	/// The employee model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Employee
	{
		
		/// <summary>
		/// Add up to 19 direct deposit accounts in addition to the main direct deposit account. IMPORTANT: A direct deposit update will remove ALL existing main and additional direct deposit information in WebPay and replace with information provided on the request. GET API will not return direct deposit data.
		/// Maximum items: 19
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalDirectDeposit")]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		public EmployeeAdditionalDirectDeposit[] EmployeeAdditionalDirectDeposit { get; set; }
		
		/// <summary>
		/// Add Additional Rates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalRate")]
		public EmployeeAdditionalRate[] EmployeeAdditionalRate { get; set; }
		
		/// <summary>
		///  Add or update setup values used for employee benefits integration, insurance plan settings, and ACA reporting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="benefitSetup")]
		public EmployeeBenefitSetup BenefitSetup { get; set; }
		
		/// <summary>
		/// Employee birthdate. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="birthDate")]
		public string BirthDate { get; set; }
		
		/// <summary>
		/// Unique idenifier for SSO.<br  />Max length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coEmpCode")]
		public string CoEmpCode { get; set; }
		
		/// <summary>
		/// Company FEIN as defined in Web Pay, applicable with GET requests only.<br  /> Max length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="companyFEIN")]
		public string CompanyFEIN { get; set; }
		
		/// <summary>
		/// Company name as defined in Web Pay, applicable with GET requests only.<br  /> Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="companyName")]
		public string CompanyName { get; set; }
		
		/// <summary>
		/// Employee is paid in this currency. <br  />Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// Up to 8 custom fields of boolean (checkbox) type value.
		/// Maximum items: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customBooleanFields")]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public EmployeeCustomBooleanFields[] EmployeeCustomBooleanFields { get; set; }
		
		/// <summary>
		/// Up to 8 custom fields of the date type value.
		/// Maximum items: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customDateFields")]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public EmployeeCustomDateFields[] EmployeeCustomDateFields { get; set; }
		
		/// <summary>
		/// Up to 8 custom fields of the dropdown type value.
		/// Maximum items: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customDropDownFields")]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public EmployeeCustomDropDownFields[] EmployeeCustomDropDownFields { get; set; }
		
		/// <summary>
		/// Up to 8 custom fields of numeric type value.
		/// Maximum items: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customNumberFields")]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public EmployeeCustomNumberFields[] EmployeeCustomNumberFields { get; set; }
		
		/// <summary>
		/// Up to 8 custom fields of text type value.
		/// Maximum items: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customTextFields")]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public EmployeeCustomTextFields[] EmployeeCustomTextFields { get; set; }
		
		/// <summary>
		/// Add or update home department cost center, position, supervisor, reviewer, employment type, EEO class, pay settings, and union information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="departmentPosition")]
		public EmployeeDepartmentPosition DepartmentPosition { get; set; }
		
		/// <summary>
		/// Indicates if employee has disability status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabilityDescription")]
		public string DisabilityDescription { get; set; }
		
		/// <summary>
		/// Add or update Emergency Contacts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emergencyContacts")]
		public EmployeeEmergencyContacts[] EmployeeEmergencyContacts { get; set; }
		
		/// <summary>
		/// Leave blank to have Web Pay automatically assign the next available employee ID.<br  />Max length: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employeeId")]
		public string EmployeeId { get; set; }
		
		/// <summary>
		/// Employee ethnicity.<br  /> Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ethnicity")]
		public string Ethnicity { get; set; }
		
		/// <summary>
		/// Add or update federal tax amount type (taxCalculationCode), amount or percentage, filing status, and exemptions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="federalTax")]
		public EmployeeFederalTax FederalTax { get; set; }
		
		/// <summary>
		/// Employee first name. <br  />Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Employee gender. Common values *M* (Male), *F* (Female). <br  />Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; }
		
		/// <summary>
		/// Add or update employee's home address, personal phone numbers, and personal email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homeAddress")]
		public EmployeeHomeAddress HomeAddress { get; set; }
		
		/// <summary>
		/// Indicates if employee meets the highly compensated employee criteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isHighlyCompensated")]
		public System.Nullable<System.Boolean> IsHighlyCompensated { get; set; }
		
		/// <summary>
		/// Indicates if employee is a smoker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSmoker")]
		public System.Nullable<System.Boolean> IsSmoker { get; set; }
		
		/// <summary>
		/// Employee last name. <br  />Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// Add, update, or delete local tax code, filing status, and exemptions including  PA-PSD taxes.
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localTax")]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public EmployeeLocalTax[] EmployeeLocalTax { get; set; }
		
		/// <summary>
		/// Add the main direct deposit account. After deposits are made to any additional direct deposit accounts, the remaining net check is deposited in the main direct deposit account. IMPORTANT: A direct deposit update will remove ALL existing main and additional direct deposit information in WebPay and replace with what is provided on the request. GET API will not return direct deposit data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mainDirectDeposit")]
		public EmployeeMainDirectDeposit MainDirectDeposit { get; set; }
		
		/// <summary>
		/// Employee marital status. Common values *D (Divorced), M (Married), S (Single), W (Widowed)*. <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maritalStatus")]
		public string MaritalStatus { get; set; }
		
		/// <summary>
		/// Employee middle name.<br  /> Max length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="middleName")]
		public string MiddleName { get; set; }
		
		/// <summary>
		/// Add or update non-primary state tax code, amount type (taxCalculationCode), amount or percentage, filing status, exemptions, supplemental check (specialCheckCalc), and reciprocity code information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonPrimaryStateTax")]
		public EmployeeNonPrimaryStateTax NonPrimaryStateTax { get; set; }
		
		/// <summary>
		/// Percentage of employee's ownership in the company, entered as a whole number. <br  /> Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerPercent")]
		public System.Nullable<System.Double> OwnerPercent { get; set; }
		
		/// <summary>
		/// Employee preferred display name.<br  /> Max length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preferredName")]
		public string PreferredName { get; set; }
		
		/// <summary>
		/// Add or update hourly or salary pay rate, effective date, and pay frequency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryPayRate")]
		public EmployeePrimaryPayRate PrimaryPayRate { get; set; }
		
		/// <summary>
		/// Add or update primary state tax code, amount type (taxCalculationCode), amount or percentage, filing status, exemptions, and supplemental check (specialCheckCalc) information. Only one primary state is allowed. Sending an updated primary state will replace the current primary state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryStateTax")]
		public EmployeePrimaryStateTax PrimaryStateTax { get; set; }
		
		/// <summary>
		/// Prior last name if applicable.<br  />Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priorLastName")]
		public string PriorLastName { get; set; }
		
		/// <summary>
		/// Employee preferred salutation. <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="salutation")]
		public string Salutation { get; set; }
		
		/// <summary>
		/// Employee social security number. Leave it blank if valid social security number not available. <br  />Max length: 11
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ssn")]
		public string Ssn { get; set; }
		
		/// <summary>
		/// Add or update employee status, change reason, effective date, and adjusted seniority date. Note that companies that are still in Implementation cannot hire future employees.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EmployeeStatus Status { get; set; }
		
		/// <summary>
		/// Employee name suffix. Common values are *Jr, Sr, II*.<br  />Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suffix")]
		public string Suffix { get; set; }
		
		/// <summary>
		/// Add tax form, 1099 exempt reasons and notes, and 943 agricultural employee information. Once the employee receives wages, this information cannot be updated. Add or update SUI tax state, retirement plan, and statutory information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxSetup")]
		public EmployeeTaxSetup TaxSetup { get; set; }
		
		/// <summary>
		/// Indicates if employee is a veteran.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="veteranDescription")]
		public string VeteranDescription { get; set; }
		
		/// <summary>
		/// Add or update Web Time badge number and charge rate and synchronize Web Pay and Web Time employee data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webTime")]
		public EmployeeWebTime WebTime { get; set; }
		
		/// <summary>
		/// Add or update employee's work address, phone numbers, and email. Work Location drop down field is not included.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workAddress")]
		public EmployeeWorkAddress WorkAddress { get; set; }
		
		/// <summary>
		/// Add or update I-9 work authorization information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workEligibility")]
		public EmployeeWorkEligibility WorkEligibility { get; set; }
	}
	
	public class EmployeeAdditionalDirectDeposit
	{
		
		/// <summary>
		/// Account number, entered without special characters and spaces. <br  />Max length: 17<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// Account type. Valid values are *C* (Checking), *S* (Saving), *P* (Pay Card). <br   />Max length: 1<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountType")]
		public string AccountType { get; set; }
		
		/// <summary>
		/// Amount value to be deposited to the account.<br  />Decimal (12,2)<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Amount type to indicate the context of the amount. Common values are *F* (FLAT), *F-* (Net Minus), *P* (Percent). <br  /> Max length: 5<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountType")]
		public string AmountType { get; set; }
		
		/// <summary>
		/// Indicates if direct deposit should be blocked when special check types such as Bonus are processed.<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blockSpecial")]
		public System.Nullable<System.Boolean> BlockSpecial { get; set; }
		
		/// <summary>
		/// Indicates if account will not pre-note.<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSkipPreNote")]
		public System.Nullable<System.Boolean> IsSkipPreNote { get; set; }
		
		/// <summary>
		/// Name on the bank account. Defaults to employee's name. <br  />Max length: 30<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameOnAccount")]
		public string NameOnAccount { get; set; }
		
		/// <summary>
		/// Date to end the pre-note of the account. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preNoteDate")]
		public string PreNoteDate { get; set; }
		
		/// <summary>
		/// ABA Transit Routing Number, entered without dashes or spaces. <br  />Max length: 9<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routingNumber")]
		public string RoutingNumber { get; set; }
	}
	
	public class EmployeeAdditionalRate
	{
		
		/// <summary>
		/// Not required. If populated, must match one of the system coded values available in the Additional Rates Change Reason drop down.<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeReason")]
		public string ChangeReason { get; set; }
		
		/// <summary>
		/// Not required. Valid values must match one of the system coded cost centers available in the Additional Rates Cost Center level 1 drop down. This cell must be in a text format.<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costCenter1")]
		public string CostCenter1 { get; set; }
		
		/// <summary>
		/// Not required. Valid values must match one of the system coded cost centers available in the Additional Rates Cost Center level 2 drop down. This cell must be in a text format.<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costCenter2")]
		public string CostCenter2 { get; set; }
		
		/// <summary>
		/// Not required. Valid values must match one of the system coded cost centers available in the Additional Rates Cost Center level 3 drop down. This cell must be in a text format.<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costCenter3")]
		public string CostCenter3 { get; set; }
		
		/// <summary>
		/// Required. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effectiveDate")]
		public string EffectiveDate { get; set; }
		
		/// <summary>
		/// Not required. Must match one of the system coded check dates available in the Additional Rates End Check Date drop down. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endCheckDate")]
		public string EndCheckDate { get; set; }
		
		/// <summary>
		/// Not required. If populated, must match one of the system coded values available in the Additional Rates Job drop down.<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="job")]
		public string Job { get; set; }
		
		/// <summary>
		/// Required. Enter dollar amount that corresponds to the Per selection.<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rate")]
		public System.Nullable<System.Double> Rate { get; set; }
		
		/// <summary>
		/// Required. If populated, must match one of the system coded values available in the Additional Rates Rate Code drop down.<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rateCode")]
		public string RateCode { get; set; }
		
		/// <summary>
		/// Not required.<br  />Max length: 4000<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rateNotes")]
		public string RateNotes { get; set; }
		
		/// <summary>
		/// Required. Valid values are HOUR or WEEK.<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ratePer")]
		public string RatePer { get; set; }
		
		/// <summary>
		/// Not required. If populated, must match one of the system coded values available in the Additional Rates Shift drop down.<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shift")]
		public string Shift { get; set; }
	}
	
	public class EmployeeBenefitSetup
	{
		
		/// <summary>
		/// Benefit Class code. Values are configured in Web Pay Company > Setup > Benefits > Classes.<br  />Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="benefitClass")]
		public string BenefitClass { get; set; }
		
		/// <summary>
		/// Date when Benefit Class takes effect. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="benefitClassEffectiveDate")]
		public string BenefitClassEffectiveDate { get; set; }
		
		/// <summary>
		/// Salary used to configure benefits.<br  />Decimal(12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="benefitSalary")]
		public System.Nullable<System.Double> BenefitSalary { get; set; }
		
		/// <summary>
		/// Date when Benefit Salary takes effect. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="benefitSalaryEffectiveDate")]
		public string BenefitSalaryEffectiveDate { get; set; }
		
		/// <summary>
		/// Applicable only for HR Enhanced clients and Benefit Classes with ACA Employment Type of Full Time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doNotApplyAdministrativePeriod")]
		public System.Nullable<System.Boolean> DoNotApplyAdministrativePeriod { get; set; }
		
		/// <summary>
		/// Only valid for HR Enhanced clients and Benefit Classes that are ACA Employment Type of Full Time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isMeasureAcaEligibility")]
		public System.Nullable<System.Boolean> IsMeasureAcaEligibility { get; set; }
	}
	
	public class EmployeeCustomBooleanFields
	{
		
		/// <summary>
		/// The custom field category.  Acceptable value is 'PayrollAndHR'.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public EmployeeCustomBooleanFieldsCategory Category { get; set; }
		
		/// <summary>
		/// The custom field label whose value is to be added/updated. Must match to the label defined in Web Pay Custom Fields setup.  Max length: 255.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// The custom boolean field value.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Boolean> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EmployeeCustomBooleanFieldsCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PayrollAndHR")]
		PayrollAndHR = 0,
	}
	
	public class EmployeeCustomDateFields
	{
		
		/// <summary>
		/// The custom field category.  Acceptable value is 'PayrollAndHR'.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public EmployeeCustomBooleanFieldsCategory Category { get; set; }
		
		/// <summary>
		/// The custom field label whose value is to be added/updated.  Must match to the label defined in Web Pay Custom Fields setup.  Max length: 255.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// The custom date field value.  Common formats include MM-DD-CCYY, CCYY-MM-DD.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class EmployeeCustomDropDownFields
	{
		
		/// <summary>
		/// The custom field category.  Acceptable value is 'PayrollAndHR'.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public EmployeeCustomBooleanFieldsCategory Category { get; set; }
		
		/// <summary>
		/// The custom field label whose value is to be added/updated.  Must match to the label defined in Web Pay Custom Fields setup.  Max length: 255.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// The custom dropdown field value.  Values are configured in Web Pay Company > Setup > List Values > Lookup Values > Custom Fields: PayrollAndHR.  Max length: 10.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class EmployeeCustomNumberFields
	{
		
		/// <summary>
		/// The custom field category.  Acceptable value is 'PayrollAndHR'.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public EmployeeCustomBooleanFieldsCategory Category { get; set; }
		
		/// <summary>
		/// The custom field label whose value is to be added/updated.  Must match to the label defined in Web Pay Custom Fields setup.  Max length: 255.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// The custom number field value.  Decimal (18,6).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public class EmployeeCustomTextFields
	{
		
		/// <summary>
		/// The custom field category.  Acceptable value is 'PayrollAndHR'.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public EmployeeCustomBooleanFieldsCategory Category { get; set; }
		
		/// <summary>
		/// The custom field label whose value is to be added/updated.  Must match to the label defined in Web Pay Custom Fields setup.  Max length: 255.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// The custom text field value.  Max length: 255.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class EmployeeDepartmentPosition
	{
		
		/// <summary>
		/// Employee department/position change reason. Must match Company setup. <br  />Max length: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeReason")]
		public string ChangeReason { get; set; }
		
		/// <summary>
		/// Employee clock badge number. Defaults to employeeId. <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clockBadgeNumber")]
		public string ClockBadgeNumber { get; set; }
		
		/// <summary>
		/// Employer defined location, like *branch, division, department*, etc. Must match Company setup. <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costCenter1")]
		public string CostCenter1 { get; set; }
		
		/// <summary>
		/// Employer defined location, like *branch, division, department*, etc. Must match Company setup. <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costCenter2")]
		public string CostCenter2 { get; set; }
		
		/// <summary>
		/// Employer defined location, like *branch, division, department*, etc. Must match Company setup. <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costCenter3")]
		public string CostCenter3 { get; set; }
		
		/// <summary>
		/// The date the position takes effect. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effectiveDate")]
		public string EffectiveDate { get; set; }
		
		/// <summary>
		/// Employee current employment type. Common values *RFT (Regular Full Time), RPT (Regular Part Time), SNL (Seasonal), TFT (Temporary Full Time), TPT (Temporary Part Time)*. <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employeeType")]
		public string EmployeeType { get; set; }
		
		/// <summary>
		/// Values are configured in Company > Setup > HR > EEO Classes.<br  /> Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="equalEmploymentOpportunityClass")]
		public string EqualEmploymentOpportunityClass { get; set; }
		
		/// <summary>
		/// Indicates if employee is exempt from minimum wage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isMinimumWageExempt")]
		public System.Nullable<System.Boolean> IsMinimumWageExempt { get; set; }
		
		/// <summary>
		/// Indicates if employee is exempt from overtime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isOvertimeExempt")]
		public System.Nullable<System.Boolean> IsOvertimeExempt { get; set; }
		
		/// <summary>
		/// Indicates if employee is a supervisor or reviewer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSupervisorReviewer")]
		public System.Nullable<System.Boolean> IsSupervisorReviewer { get; set; }
		
		/// <summary>
		/// Indicates if union dues are collected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isUnionDuesCollected")]
		public System.Nullable<System.Boolean> IsUnionDuesCollected { get; set; }
		
		/// <summary>
		/// Indicates if initiations fees are collected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isUnionInitiationCollected")]
		public System.Nullable<System.Boolean> IsUnionInitiationCollected { get; set; }
		
		/// <summary>
		/// Employee current job title. <br  />Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobTitle")]
		public string JobTitle { get; set; }
		
		/// <summary>
		/// Employee pay group. Must match Company setup. <br  /> Max length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payGroup")]
		public string PayGroup { get; set; }
		
		/// <summary>
		/// Employee position code. Must match Company setup.<br  />Max length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="positionCode")]
		public string PositionCode { get; set; }
		
		/// <summary>
		/// Company number of reviewer.<br />Max length: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewerCompanyNumber")]
		public string ReviewerCompanyNumber { get; set; }
		
		/// <summary>
		/// Employee id of the reviewer.<br />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewerEmployeeId")]
		public string ReviewerEmployeeId { get; set; }
		
		/// <summary>
		/// Employee work shift.<br  />Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shift")]
		public string Shift { get; set; }
		
		/// <summary>
		/// Supervisor's company number. Defaults to employee company number.<br  />Max length: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supervisorCompanyNumber")]
		public string SupervisorCompanyNumber { get; set; }
		
		/// <summary>
		/// EmployeeId of the supervisor. <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supervisorEmployeeId")]
		public string SupervisorEmployeeId { get; set; }
		
		/// <summary>
		/// Indicates if employee receives tips.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tipped")]
		public string Tipped { get; set; }
		
		/// <summary>
		/// Employee union affiliation effective date. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unionAffiliationDate")]
		public string UnionAffiliationDate { get; set; }
		
		/// <summary>
		/// Employee union code. Must match Company setup. <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unionCode")]
		public string UnionCode { get; set; }
		
		/// <summary>
		/// Employee union position. Must match Company setup. <br  />Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unionPosition")]
		public string UnionPosition { get; set; }
		
		/// <summary>
		/// Employee worker compensation code. Must match Company setup.<br  /> Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workersCompensation")]
		public string WorkersCompensation { get; set; }
	}
	
	public class EmployeeEmergencyContacts
	{
		
		/// <summary>
		/// 1st address line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address1")]
		public string Address1 { get; set; }
		
		/// <summary>
		/// 2nd address line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address2")]
		public string Address2 { get; set; }
		
		/// <summary>
		/// City.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// County.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Country.  Must be a valid 3 character country code.  Common values are *USA* (United States), *CAN* (Canada).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="county")]
		public string County { get; set; }
		
		/// <summary>
		/// Contact email.  Must be valid email address format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Required. Contact first name. <br  />Max length: 40
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Contact Home Phone.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homePhone")]
		public string HomePhone { get; set; }
		
		/// <summary>
		/// Required. Contact last name. <br  />Max length: 40
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// Contact Mobile Phone.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilePhone")]
		public string MobilePhone { get; set; }
		
		/// <summary>
		/// Notes. <br  />Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// Contact Pager.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pager")]
		public string Pager { get; set; }
		
		/// <summary>
		/// Required. Contact primary phone type.  Must match Company setup.  Valid  values are H (Home), M (Mobile), P (Pager), W (Work)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryPhone")]
		public string PrimaryPhone { get; set; }
		
		/// <summary>
		/// Required. Contact priority. Valid values are *P* (Primary) or *S* (Secondary).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public string Priority { get; set; }
		
		/// <summary>
		/// Required. Contact relationship.  Must match Company setup.  Common values are Spouse, Mother, Father.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relationship")]
		public string Relationship { get; set; }
		
		/// <summary>
		/// State or Province.  If U.S. address, must be valid 2 character state code.  Common values are *IL* (Illinois), *CA* (California).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Valid values are *true* or *false*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syncEmployeeInfo")]
		public System.Nullable<System.Boolean> SyncEmployeeInfo { get; set; }
		
		/// <summary>
		/// Work Extension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workExtension")]
		public string WorkExtension { get; set; }
		
		/// <summary>
		/// Contact Work Phone.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workPhone")]
		public string WorkPhone { get; set; }
		
		/// <summary>
		/// Postal code.  If U.S. address, must be a valid zip code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zip")]
		public string Zip { get; set; }
	}
	
	public class EmployeeFederalTax
	{
		
		/// <summary>
		/// Tax amount. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Box 4(b) on form W4 (year 2020 or later): Deductions amount. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deductionsAmount")]
		public System.Nullable<System.Double> DeductionsAmount { get; set; }
		
		/// <summary>
		/// Box 3 on form W4 (year 2020 or later): Total dependents amount. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependentsAmount")]
		public System.Nullable<System.Double> DependentsAmount { get; set; }
		
		/// <summary>
		/// Federal tax exemptions value. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptions")]
		public System.Nullable<System.Double> Exemptions { get; set; }
		
		/// <summary>
		/// Employee federal filing status. Common values are *S* (Single), *M* (Married).<br  />Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filingStatus")]
		public string FilingStatus { get; set; }
		
		/// <summary>
		/// Box 2(c) on form W4 (year 2020 or later): Multiple Jobs or Spouse Works. <br  />Boolean
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="higherRate")]
		public System.Nullable<System.Boolean> HigherRate { get; set; }
		
		/// <summary>
		/// Box 4(a) on form W4 (year 2020 or later): Other income amount. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otherIncomeAmount")]
		public System.Nullable<System.Double> OtherIncomeAmount { get; set; }
		
		/// <summary>
		/// Tax percentage. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public System.Nullable<System.Double> Percentage { get; set; }
		
		/// <summary>
		/// Tax calculation code. Common values are *F* (Flat), *P* (Percentage), *FDFP* (Flat Dollar Amount plus Fixed Percentage). <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxCalculationCode")]
		public string TaxCalculationCode { get; set; }
		
		/// <summary>
		/// The federal W4 form year <br  />Integer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="w4FormYear")]
		public System.Nullable<System.Int32> W4FormYear { get; set; }
	}
	
	public class EmployeeHomeAddress
	{
		
		/// <summary>
		/// 1st address line.<br  /> Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address1")]
		public string Address1 { get; set; }
		
		/// <summary>
		/// 2nd address line. <br  /> Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address2")]
		public string Address2 { get; set; }
		
		/// <summary>
		/// City.<br  /> Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Country.<br  /> Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// County.<br  /> Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="county")]
		public string County { get; set; }
		
		/// <summary>
		/// Email. <br  />Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// Mobile phone number.<br  /> Max length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilePhone")]
		public string MobilePhone { get; set; }
		
		/// <summary>
		/// Phone number.<br  /> Max length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// Postal code.<br  /> Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// State or province.<br  /> Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	public class EmployeeLocalTax
	{
		
		/// <summary>
		/// Local tax exemptions value.<br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptions")]
		public System.Nullable<System.Double> Exemptions { get; set; }
		
		/// <summary>
		/// Local tax exemptions 2 value.<br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptions2")]
		public System.Nullable<System.Double> Exemptions2 { get; set; }
		
		/// <summary>
		/// Employee local tax filing status. Must match specific local tax setup. <br  /> Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filingStatus")]
		public string FilingStatus { get; set; }
		
		/// <summary>
		/// Resident PSD (political subdivision code) applicable in PA. Must match Company setup.<br  /> Max length: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="residentPSD")]
		public string ResidentPSD { get; set; }
		
		/// <summary>
		/// Local tax code.<br  />Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxCode")]
		public string TaxCode { get; set; }
		
		/// <summary>
		/// Work location PSD. Must match Company setup. <br  /> Max length: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workPSD")]
		public string WorkPSD { get; set; }
	}
	
	public class EmployeeMainDirectDeposit
	{
		
		/// <summary>
		/// Account number, entered without special characters and spaces. <br  />Max length: 17
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// Account type. Valid values are *C* (Checking), *S* (Saving), *P* (Pay Card). <br   />Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountType")]
		public string AccountType { get; set; }
		
		/// <summary>
		/// Indicates if direct deposit should be blocked when special check types such as Bonus are processed.<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blockSpecial")]
		public System.Nullable<System.Boolean> BlockSpecial { get; set; }
		
		/// <summary>
		/// Indicates if account will not pre-note.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSkipPreNote")]
		public System.Nullable<System.Boolean> IsSkipPreNote { get; set; }
		
		/// <summary>
		/// Name on the bank account. Defaults to employee's name. <br  />Max length: 30<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameOnAccount")]
		public string NameOnAccount { get; set; }
		
		/// <summary>
		/// Date to end the pre-note of the account. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preNoteDate")]
		public string PreNoteDate { get; set; }
		
		/// <summary>
		/// ABA Transit Routing Number, entered without dashes or spaces. <br  />Max length: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routingNumber")]
		public string RoutingNumber { get; set; }
	}
	
	public class EmployeeNonPrimaryStateTax
	{
		
		/// <summary>
		/// State tax code.<br  /> Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Box 4(b) on form W4 (year 2020 or later): Deductions amount. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deductionsAmount")]
		public System.Nullable<System.Double> DeductionsAmount { get; set; }
		
		/// <summary>
		/// Box 3 on form W4 (year 2020 or later): Total dependents amount. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependentsAmount")]
		public System.Nullable<System.Double> DependentsAmount { get; set; }
		
		/// <summary>
		/// State tax exemptions value.<br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptions")]
		public System.Nullable<System.Double> Exemptions { get; set; }
		
		/// <summary>
		/// State tax exemptions 2 value.<br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptions2")]
		public System.Nullable<System.Double> Exemptions2 { get; set; }
		
		/// <summary>
		/// Employee state tax filing status. Common values are *S* (Single), *M* (Married).<br  />Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filingStatus")]
		public string FilingStatus { get; set; }
		
		/// <summary>
		/// Box 2(c) on form W4 (year 2020 or later): Multiple Jobs or Spouse Works. <br  />Boolean
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="higherRate")]
		public System.Nullable<System.Boolean> HigherRate { get; set; }
		
		/// <summary>
		/// Box 4(a) on form W4 (year 2020 or later): Other income amount. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otherIncomeAmount")]
		public System.Nullable<System.Double> OtherIncomeAmount { get; set; }
		
		/// <summary>
		/// State Tax percentage. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public System.Nullable<System.Double> Percentage { get; set; }
		
		/// <summary>
		/// Non-primary state tax reciprocity code.<br  /> Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reciprocityCode")]
		public string ReciprocityCode { get; set; }
		
		/// <summary>
		/// Supplemental check calculation code. Common values are *Blocked* (Taxes blocked on Supplemental checks), *Supp* (Use supplemental Tax Rate-Code). <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="specialCheckCalc")]
		public string SpecialCheckCalc { get; set; }
		
		/// <summary>
		/// Tax calculation code. Common values are *F* (Flat), *P* (Percentage), *FDFP* (Flat Dollar Amount plus Fixed Percentage). <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxCalculationCode")]
		public string TaxCalculationCode { get; set; }
		
		/// <summary>
		/// State tax code.<br  /> Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxCode")]
		public string TaxCode { get; set; }
		
		/// <summary>
		/// The state W4 form year <br  />Integer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="w4FormYear")]
		public System.Nullable<System.Int32> W4FormYear { get; set; }
	}
	
	public class EmployeePrimaryPayRate
	{
		
		/// <summary>
		/// Employee annual salary.<br />Decimal (12,6)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annualSalary")]
		public System.Nullable<System.Double> AnnualSalary { get; set; }
		
		/// <summary>
		/// Employee base rate, used for Hourly employees. <br  />Decimal (12,6)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseRate")]
		public System.Nullable<System.Double> BaseRate { get; set; }
		
		/// <summary>
		/// The date of the first check on which the new pay rate will appear. This value is only applicable when updating an existing employee. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beginCheckDate")]
		public string BeginCheckDate { get; set; }
		
		/// <summary>
		/// Pay rate change reason.<br  /> Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeReason")]
		public string ChangeReason { get; set; }
		
		/// <summary>
		/// Employee default hours consistently worked. If autoPayType is set to D, employee will be paid hourly base rate for the defaultHours. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultHours")]
		public System.Nullable<System.Double> DefaultHours { get; set; }
		
		/// <summary>
		/// The date the employee's pay rate takes effect. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effectiveDate")]
		public string EffectiveDate { get; set; }
		
		/// <summary>
		/// If set to *True*, employee will be paid automatically using deafultHours.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAutoPay")]
		public System.Nullable<System.Boolean> IsAutoPay { get; set; }
		
		/// <summary>
		/// Employee current pay frequency. Common values are *A (Annual), B (Bi-Weekly), D (Daily), M (Monthly), S (Semi-Monthly), Q (Quarterly), W (Weekly)*. <br  />Max length: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payFrequency")]
		public string PayFrequency { get; set; }
		
		/// <summary>
		/// Employee pay grade. Must match Company setup. <br  /> Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payGrade")]
		public string PayGrade { get; set; }
		
		/// <summary>
		/// Pay rate notes regarding employee.<br  /> Max length: 250
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payRateNote")]
		public string PayRateNote { get; set; }
		
		/// <summary>
		/// Employee pay type (rate code). Valid values are *Hourly* or *Salary*. <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payType")]
		public string PayType { get; set; }
		
		/// <summary>
		/// Employee base rate frequency used with payType Hourly. Common values are *Hour, Week*. Default is Hour. <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ratePer")]
		public string RatePer { get; set; }
		
		/// <summary>
		/// Employee gross salary per pay period used with payType Salary.<br  />Decimal (12,6)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="salary")]
		public System.Nullable<System.Double> Salary { get; set; }
	}
	
	public class EmployeePrimaryStateTax
	{
		
		/// <summary>
		/// State tax code.<br  /> Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Box 4(b) on form W4 (year 2020 or later): Deductions amount. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deductionsAmount")]
		public System.Nullable<System.Double> DeductionsAmount { get; set; }
		
		/// <summary>
		/// Box 3 on form W4 (year 2020 or later): Total dependents amount. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependentsAmount")]
		public System.Nullable<System.Double> DependentsAmount { get; set; }
		
		/// <summary>
		/// State tax exemptions value.<br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptions")]
		public System.Nullable<System.Double> Exemptions { get; set; }
		
		/// <summary>
		/// State tax exemptions 2 value.<br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptions2")]
		public System.Nullable<System.Double> Exemptions2 { get; set; }
		
		/// <summary>
		/// Employee state tax filing status. Common values are *S* (Single), *M* (Married).<br  />Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filingStatus")]
		public string FilingStatus { get; set; }
		
		/// <summary>
		/// Box 2(c) on form W4 (year 2020 or later): Multiple Jobs or Spouse Works. <br  />Boolean
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="higherRate")]
		public System.Nullable<System.Boolean> HigherRate { get; set; }
		
		/// <summary>
		/// Box 4(a) on form W4 (year 2020 or later): Other income amount. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otherIncomeAmount")]
		public System.Nullable<System.Double> OtherIncomeAmount { get; set; }
		
		/// <summary>
		/// State Tax percentage. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public System.Nullable<System.Double> Percentage { get; set; }
		
		/// <summary>
		/// Supplemental check calculation code. Common values are *Blocked* (Taxes blocked on Supplemental checks), *Supp* (Use supplemental Tax Rate-Code). <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="specialCheckCalc")]
		public string SpecialCheckCalc { get; set; }
		
		/// <summary>
		/// Tax calculation code. Common values are *F* (Flat), *P* (Percentage), *FDFP* (Flat Dollar Amount plus Fixed Percentage). <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxCalculationCode")]
		public string TaxCalculationCode { get; set; }
		
		/// <summary>
		/// State tax code.<br  /> Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxCode")]
		public string TaxCode { get; set; }
		
		/// <summary>
		/// The state W4 form year <br  />Integer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="w4FormYear")]
		public System.Nullable<System.Int32> W4FormYear { get; set; }
	}
	
	public class EmployeeStatus
	{
		
		/// <summary>
		/// Adjusted seniority date. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adjustedSeniorityDate")]
		public string AdjustedSeniorityDate { get; set; }
		
		/// <summary>
		/// Employee status change reason. Must match Company setup.<br  /> Max length: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeReason")]
		public string ChangeReason { get; set; }
		
		/// <summary>
		/// Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effectiveDate")]
		public string EffectiveDate { get; set; }
		
		/// <summary>
		/// Employee current work status. Common values are *A* (Active), *L* (Leave of Absence), *T* (Terminated). <br  />Max length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employeeStatus")]
		public string EmployeeStatus1 { get; set; }
		
		/// <summary>
		/// Employee hired date. Updates to hire date are not allowed and will be ignored. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hireDate")]
		public string HireDate { get; set; }
		
		/// <summary>
		/// Indicates if employee eligible for rehire.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isEligibleForRehire")]
		public System.Nullable<System.Boolean> IsEligibleForRehire { get; set; }
		
		/// <summary>
		/// Rehire date if employee is rehired.  Updates to re-hire date are not allowed and will be ignored. Common formats are *MM-DD-CCYY, CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reHireDate")]
		public string ReHireDate { get; set; }
		
		/// <summary>
		/// The Status Type associated with the Employee Status code. Each Employee Status  code for a company is assigned to one of the Status Type values of  A (Active), L (Leave of Absence), T (Terminated).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusType")]
		public string StatusType { get; set; }
		
		/// <summary>
		/// Employee termination date. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="terminationDate")]
		public string TerminationDate { get; set; }
	}
	
	public class EmployeeTaxSetup
	{
		
		/// <summary>
		/// Notes for FITW exemption.<br  /> Max length: 250
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fitwExemptNotes")]
		public string FitwExemptNotes { get; set; }
		
		/// <summary>
		/// Reason code for FITW exemption. Common values are *SE* (Statutory employee), *CR* (clergy/Religious). <br  /> Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fitwExemptReason")]
		public string FitwExemptReason { get; set; }
		
		/// <summary>
		/// Notes for FUTA exemption.<br  /> Max length: 250
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="futaExemptNotes")]
		public string FutaExemptNotes { get; set; }
		
		/// <summary>
		/// Reason code for FUTA exemption. Common values are *501* (5019c)(3) Organization), *IC* (Independent Contractor).<br  /> Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="futaExemptReason")]
		public string FutaExemptReason { get; set; }
		
		/// <summary>
		/// Indicates if employee in agriculture or farming.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isEmployee943")]
		public System.Nullable<System.Boolean> IsEmployee943 { get; set; }
		
		/// <summary>
		/// Indicates if employee is eligible for pension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPension")]
		public System.Nullable<System.Boolean> IsPension { get; set; }
		
		/// <summary>
		/// Indicates if employee is statutory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isStatutory")]
		public System.Nullable<System.Boolean> IsStatutory { get; set; }
		
		/// <summary>
		/// Notes for Medicare exemption.<br  /> Max length: 250
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="medExemptNotes")]
		public string MedExemptNotes { get; set; }
		
		/// <summary>
		/// Reason code for Medicare exemption. Common values are *501* (5019c)(3) Organization), *IC* (Independent Contractor).<br  /> Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="medExemptReason")]
		public string MedExemptReason { get; set; }
		
		/// <summary>
		/// Notes for SITW exemption.<br  /> Max length: 250
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sitwExemptNotes")]
		public string SitwExemptNotes { get; set; }
		
		/// <summary>
		/// Reason code for SITW exemption. Common values are *SE* (Statutory employee), *CR* (clergy/Religious). <br  /> Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sitwExemptReason")]
		public string SitwExemptReason { get; set; }
		
		/// <summary>
		/// Notes for Social Security exemption.<br  /> Max length: 250
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ssExemptNotes")]
		public string SsExemptNotes { get; set; }
		
		/// <summary>
		/// Reason code for Social Security exemption. Common values are *SE* (Statutory employee), *CR* (clergy/Religious). <br  /> Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ssExemptReason")]
		public string SsExemptReason { get; set; }
		
		/// <summary>
		/// Notes for SUI exemption.<br  /> Max length: 250
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suiExemptNotes")]
		public string SuiExemptNotes { get; set; }
		
		/// <summary>
		/// Reason code for SUI exemption. Common values are *SE* (Statutory employee), *CR* (clergy/Religious). <br  /> Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suiExemptReason")]
		public string SuiExemptReason { get; set; }
		
		/// <summary>
		/// Employee SUI (State Unemployment Insurance) state. <br  />Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suiState")]
		public string SuiState { get; set; }
		
		/// <summary>
		/// Employee 1099R distribution code. Common values are *7* (Normal Distribution), *F* (Charitable Gift Annuity). <br  />Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxDistributionCode1099R")]
		public string TaxDistributionCode1099R { get; set; }
		
		/// <summary>
		/// Employee tax form for reporting income. Valid values are *W2, 1099M, 1099R*. Default is W2. <br  />Max length: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxForm")]
		public string TaxForm { get; set; }
	}
	
	public class EmployeeWebTime
	{
		
		/// <summary>
		/// Badge number usually issued for time and attendance system use. <br  />Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="badgeNumber")]
		public string BadgeNumber { get; set; }
		
		/// <summary>
		/// Rate to be charged to third party for time worked by the employee. It is most commonly referenced in the Cost Center Charge, Cost Center Charge vs. Cost Reports, and the Customer Invoice time and attendance reports. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chargeRate")]
		public System.Nullable<System.Double> ChargeRate { get; set; }
		
		/// <summary>
		/// If set to true, changes to employee data will be reflected in Web Time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isTimeLaborEnabled")]
		public System.Nullable<System.Boolean> IsTimeLaborEnabled { get; set; }
	}
	
	public class EmployeeWorkAddress
	{
		
		/// <summary>
		/// 1st address line.<br  /> Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address1")]
		public string Address1 { get; set; }
		
		/// <summary>
		/// 2nd address line. <br  /> Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address2")]
		public string Address2 { get; set; }
		
		/// <summary>
		/// City.<br  /> Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Country.<br  /> Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// County.<br  /> Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="county")]
		public string County { get; set; }
		
		/// <summary>
		/// Email. <br  />Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// Work Location name. <br />Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Employee mail stop.<br  /> Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mailStop")]
		public string MailStop { get; set; }
		
		/// <summary>
		/// Mobile phone number.<br  /> Max length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilePhone")]
		public string MobilePhone { get; set; }
		
		/// <summary>
		/// Employee pager number.<br  /> Max length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pager")]
		public string Pager { get; set; }
		
		/// <summary>
		/// Phone number.<br  /> Max length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// Phone number extension.<br  /> Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneExtension")]
		public string PhoneExtension { get; set; }
		
		/// <summary>
		/// Postal code.<br  /> Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// State or province.<br  /> Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	public class EmployeeWorkEligibility
	{
		
		/// <summary>
		/// Employee USCIS or Admission Number. <br  /> Must be 7-10 characters and may begin with an 'A'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alienOrAdmissionDocumentNumber")]
		public string AlienOrAdmissionDocumentNumber { get; set; }
		
		/// <summary>
		/// The date the I-9 Verification form was attested by Employer or Authorized representative. Common formats are *MM-DD-CCYY, CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attestedDate")]
		public string AttestedDate { get; set; }
		
		/// <summary>
		/// If Foreign Passport number is provided, provide its country of issuance. Must match Paylocity setup.<br  /> Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryOfIssuance")]
		public string CountryOfIssuance { get; set; }
		
		/// <summary>
		/// Foreign Passport Number.<br  /> Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="foreignPassportNumber")]
		public string ForeignPassportNumber { get; set; }
		
		/// <summary>
		/// Form I-94 admission number.<br  /> Must be 11 numeric characters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="i94AdmissionNumber")]
		public string I94AdmissionNumber { get; set; }
		
		/// <summary>
		/// Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="i9DateVerified")]
		public string I9DateVerified { get; set; }
		
		/// <summary>
		/// Notes regarding employee's i9.<br  /> Max length: 4000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="i9Notes")]
		public string I9Notes { get; set; }
		
		/// <summary>
		/// Indicates if employee I9 is verified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isI9Verified")]
		public System.Nullable<System.Boolean> IsI9Verified { get; set; }
		
		/// <summary>
		/// Indicates if employee SSN is verified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSsnVerified")]
		public System.Nullable<System.Boolean> IsSsnVerified { get; set; }
		
		/// <summary>
		/// The date of employer verification of employee SSN. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ssnDateVerified")]
		public string SsnDateVerified { get; set; }
		
		/// <summary>
		/// Notes regarding employee's SSN.<br  /> Max length: 4000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ssnNotes")]
		public string SsnNotes { get; set; }
		
		/// <summary>
		/// Employee Visa type. Must match one of the system coded values.<br  /> Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visaType")]
		public string VisaType { get; set; }
		
		/// <summary>
		/// Employee work authorization. Must match one of the system coded values.<br  /> Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workAuthorization")]
		public string WorkAuthorization { get; set; }
		
		/// <summary>
		/// End date of employee work eligibility.  Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workUntil")]
		public string WorkUntil { get; set; }
	}
	
	/// <summary>
	/// The EmployeeId Response Model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EmployeeIdResponse
	{
		
		/// <summary>
		/// The EmployeeId
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employeeId")]
		public string EmployeeId { get; set; }
	}
	
	/// <summary>
	/// The employee info model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EmployeeInfo
	{
		
		/// <summary>
		/// Employee Id.<br  /> Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employeeId")]
		public string EmployeeId { get; set; }
		
		/// <summary>
		/// Employee current work status. Common values are *A* (Active), *L* (Leave of Absence), *T* (Terminated). <br  />Max length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public string StatusCode { get; set; }
		
		/// <summary>
		/// Employee current work status type. <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusTypeCode")]
		public string StatusTypeCode { get; set; }
	}
	
	/// <summary>
	/// The error model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Error
	{
		
		/// <summary>
		/// The name of the field, or property in the request message that contains an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// A list of options associated with this error. These options may indicate valid values for the field, or property that contains an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public ErrorOptions[] ErrorOptions { get; set; }
		
		/// <summary>
		/// The JSON path of the field, or property, that contains an error in the request message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	public class ErrorOptions
	{
		
		/// <summary>
		/// The code associated with this option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The description of the option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// The Local Tax model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocalTax
	{
		
		/// <summary>
		/// Local tax exemptions value.<br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptions")]
		public System.Nullable<System.Double> Exemptions { get; set; }
		
		/// <summary>
		/// Local tax exemptions 2 value.<br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptions2")]
		public System.Nullable<System.Double> Exemptions2 { get; set; }
		
		/// <summary>
		/// Employee local tax filing status. Must match specific local tax setup. <br  /> Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filingStatus")]
		public string FilingStatus { get; set; }
		
		/// <summary>
		/// Resident PSD (political subdivision code) applicable in PA. Must match Company setup.<br  /> Max length: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="residentPSD")]
		public string ResidentPSD { get; set; }
		
		/// <summary>
		/// Local tax code.<br  />Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxCode")]
		public string TaxCode { get; set; }
		
		/// <summary>
		/// Work location PSD. Must match Company setup. <br  /> Max length: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workPSD")]
		public string WorkPSD { get; set; }
	}
	
	/// <summary>
	/// The Non-Primary State Tax model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NonPrimaryStateTax
	{
		
		/// <summary>
		/// State tax code.<br  /> Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Box 4(b) on form W4 (year 2020 or later): Deductions amount. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deductionsAmount")]
		public System.Nullable<System.Double> DeductionsAmount { get; set; }
		
		/// <summary>
		/// Box 3 on form W4 (year 2020 or later): Total dependents amount. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependentsAmount")]
		public System.Nullable<System.Double> DependentsAmount { get; set; }
		
		/// <summary>
		/// State tax exemptions value.<br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptions")]
		public System.Nullable<System.Double> Exemptions { get; set; }
		
		/// <summary>
		/// State tax exemptions 2 value.<br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptions2")]
		public System.Nullable<System.Double> Exemptions2 { get; set; }
		
		/// <summary>
		/// Employee state tax filing status. Common values are *S* (Single), *M* (Married).<br  />Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filingStatus")]
		public string FilingStatus { get; set; }
		
		/// <summary>
		/// Box 2(c) on form W4 (year 2020 or later): Multiple Jobs or Spouse Works. <br  />Boolean
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="higherRate")]
		public System.Nullable<System.Boolean> HigherRate { get; set; }
		
		/// <summary>
		/// Box 4(a) on form W4 (year 2020 or later): Other income amount. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otherIncomeAmount")]
		public System.Nullable<System.Double> OtherIncomeAmount { get; set; }
		
		/// <summary>
		/// State Tax percentage. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public System.Nullable<System.Double> Percentage { get; set; }
		
		/// <summary>
		/// Non-primary state tax reciprocity code.<br  /> Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reciprocityCode")]
		public string ReciprocityCode { get; set; }
		
		/// <summary>
		/// Supplemental check calculation code. Common values are *Blocked* (Taxes blocked on Supplemental checks), *Supp* (Use supplemental Tax Rate-Code). <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="specialCheckCalc")]
		public string SpecialCheckCalc { get; set; }
		
		/// <summary>
		/// Tax calculation code. Common values are *F* (Flat), *P* (Percentage), *FDFP* (Flat Dollar Amount plus Fixed Percentage). <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxCalculationCode")]
		public string TaxCalculationCode { get; set; }
		
		/// <summary>
		/// State tax code.<br  /> Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxCode")]
		public string TaxCode { get; set; }
		
		/// <summary>
		/// The state W4 form year <br  />Integer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="w4FormYear")]
		public System.Nullable<System.Int32> W4FormYear { get; set; }
	}
	
	/// <summary>
	/// The pay statement details model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayStatementDetails
	{
		
		/// <summary>
		/// .<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// .<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkDate")]
		public string CheckDate { get; set; }
		
		/// <summary>
		/// .<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="det")]
		public string Det { get; set; }
		
		/// <summary>
		/// .<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detCode")]
		public string DetCode { get; set; }
		
		/// <summary>
		/// .<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detType")]
		public string DetType { get; set; }
		
		/// <summary>
		/// .<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eligibleCompensation")]
		public System.Nullable<System.Double> EligibleCompensation { get; set; }
		
		/// <summary>
		/// .<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hours")]
		public System.Nullable<System.Double> Hours { get; set; }
		
		/// <summary>
		/// .<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rate")]
		public System.Nullable<System.Double> Rate { get; set; }
		
		/// <summary>
		/// <br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionNumber")]
		public System.Nullable<System.Int32> TransactionNumber { get; set; }
		
		/// <summary>
		/// .<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionType")]
		public string TransactionType { get; set; }
		
		/// <summary>
		/// .<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	/// <summary>
	/// The pay statement summary model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayStatementSummary
	{
		
		/// <summary>
		/// .<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoPay")]
		public System.Nullable<System.Boolean> AutoPay { get; set; }
		
		/// <summary>
		/// .<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beginDate")]
		public string BeginDate { get; set; }
		
		/// <summary>
		/// .<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkDate")]
		public string CheckDate { get; set; }
		
		/// <summary>
		/// .<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkNumber")]
		public System.Nullable<System.Int32> CheckNumber { get; set; }
		
		/// <summary>
		/// .<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directDepositAmount")]
		public System.Nullable<System.Double> DirectDepositAmount { get; set; }
		
		/// <summary>
		/// .<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public string EndDate { get; set; }
		
		/// <summary>
		/// .<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grossPay")]
		public System.Nullable<System.Double> GrossPay { get; set; }
		
		/// <summary>
		/// .<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hours")]
		public System.Nullable<System.Double> Hours { get; set; }
		
		/// <summary>
		/// .<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="netCheck")]
		public System.Nullable<System.Double> NetCheck { get; set; }
		
		/// <summary>
		/// .<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="netPay")]
		public System.Nullable<System.Double> NetPay { get; set; }
		
		/// <summary>
		/// .<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overtimeDollars")]
		public System.Nullable<System.Double> OvertimeDollars { get; set; }
		
		/// <summary>
		/// .<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overtimeHours")]
		public System.Nullable<System.Double> OvertimeHours { get; set; }
		
		/// <summary>
		/// .<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="process")]
		public System.Nullable<System.Int32> Process { get; set; }
		
		/// <summary>
		/// .<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regularDollars")]
		public System.Nullable<System.Double> RegularDollars { get; set; }
		
		/// <summary>
		/// .<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regularHours")]
		public System.Nullable<System.Double> RegularHours { get; set; }
		
		/// <summary>
		/// <br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionNumber")]
		public System.Nullable<System.Int32> TransactionNumber { get; set; }
		
		/// <summary>
		/// .<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="voucherNumber")]
		public System.Nullable<System.Int32> VoucherNumber { get; set; }
		
		/// <summary>
		/// .<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workersCompCode")]
		public string WorkersCompCode { get; set; }
		
		/// <summary>
		/// .<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	/// <summary>
	/// The sensitive data model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SensitiveData
	{
		
		/// <summary>
		/// Add or update disability data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disability")]
		public SensitiveDataDisability Disability { get; set; }
		
		/// <summary>
		/// Add or update ethnicity data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ethnicity")]
		public SensitiveDataEthnicity Ethnicity { get; set; }
		
		/// <summary>
		/// Add or update gender data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public SensitiveDataGender Gender { get; set; }
		
		/// <summary>
		/// Add or update veteran data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="veteran")]
		public SensitiveDataVeteran Veteran { get; set; }
	}
	
	public class SensitiveDataDisability
	{
		
		/// <summary>
		/// Description of employee's disability or accommodation.<br  />Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disability")]
		public string Disability { get; set; }
		
		/// <summary>
		/// Add or update employee's disability classifications
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabilityClassifications")]
		public SensitiveDataDisabilityDisabilityClassifications[] SensitiveDataDisabilityDisabilityClassifications { get; set; }
		
		/// <summary>
		/// Indicates if the employee has a disability. Values include:<br  /><br  />0 = No<br  />1 = Yes<br  />2 = Prefer not to say
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasDisability")]
		public string HasDisability { get; set; }
	}
	
	public class SensitiveDataDisabilityDisabilityClassifications
	{
		
		/// <summary>
		/// Indicates the type of disability. This field is only allowed if hasDisability is set to 1=Yes. Values include:<br  /><br  />Auditory<br  />Cognitive, learning, and neurological<br  />Physical<br  />Speech<br  />Vision<br  />Prefer not to say<br  /><br  />Valid values can be obtained from Company Codes endpoint, codeResource = disabilityClassification
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classification")]
		public string Classification { get; set; }
	}
	
	public class SensitiveDataEthnicity
	{
		
		/// <summary>
		/// Add or update Ethnic Racial Identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ethnicRacialIdentities")]
		public SensitiveDataEthnicityEthnicRacialIdentities[] SensitiveDataEthnicityEthnicRacialIdentities { get; set; }
		
		/// <summary>
		/// Employee's legal ethnicity or race.<br  />A = Asian<br  />B = Black<br  />H = Hispanic<br  />I = American Indian<br  />N = Native Hawaiian or Pacific Islander<br  />T = Two or More Races<br  />W = White<br  /><br  />Valid values can be obtained from Company Codes endpoint, codeResource = ethnicity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ethnicity")]
		public string Ethnicity { get; set; }
	}
	
	public class SensitiveDataEthnicityEthnicRacialIdentities
	{
		
		/// <summary>
		/// Employee's preferred or chosen ethnicity or race.<br  />Max length: 40.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	public class SensitiveDataGender
	{
		
		/// <summary>
		/// Specifies whether employee's preferred pronouns will be displayed to co-workers in Community, Directory, etc. Values include:<br  /><br  />0 = No<br  />1 = Yes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayPronouns")]
		public System.Nullable<System.Boolean> DisplayPronouns { get; set; }
		
		/// <summary>
		/// Employee's preferred or chosen gender identification.<br  />Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="genderIdentityDescription")]
		public string GenderIdentityDescription { get; set; }
		
		/// <summary>
		/// Employee's self-identification of legal gender. Numerical values include:<br  /><br  />0 = No<br  />1 = Yes<br  />2 = Prefer not to say
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifyAsLegalGender")]
		public string IdentifyAsLegalGender { get; set; }
		
		/// <summary>
		/// Employee's legal gender. Values include:<br  /><br  />M = Male<br  />F = Female<br  /><br  />Valid values can be obtained from Company Codes endpoint, codeResource = legalGender
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="legalGender")]
		public string LegalGender { get; set; }
		
		/// <summary>
		/// Employee's preferred or chosen pronouns. Values include:<br  /><br  />He / Him / His<br  />She / Her / Hers<br  />They / Them / Theirs<br  />Prefer not to say<br  /><br  />Valid values can be obtained from Company Codes endpoint, codeResource = preferredPronouns
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pronouns")]
		public string Pronouns { get; set; }
		
		/// <summary>
		/// Employee's self-identification of sexual orientation. Values may include values below. Additionally, any custom value may be provided.<br  /><br  />Asexual<br  />Gay / Lesbian<br  />Heterosexual / Straight<br  />Pansexual<br  />Queer<br  />Bisexual<br  />Prefer not to say
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sexualOrientation")]
		public string SexualOrientation { get; set; }
	}
	
	public class SensitiveDataVeteran
	{
		
		/// <summary>
		/// Indicates if the employee is a veteran.  Values include:<br  /><br  />0 = No<br  />1 = Yes<br  />2 = Prefer not to say
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isVeteran")]
		public string IsVeteran { get; set; }
		
		/// <summary>
		/// Employee's Veteran Notes<br  />Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="veteran")]
		public string Veteran { get; set; }
	}
	
	/// <summary>
	/// The staged employee model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StagedEmployee
	{
		
		/// <summary>
		/// Add up to 19 direct deposit accounts in addition to the main direct deposit account. IMPORTANT: A direct deposit update will remove ALL existing main and additional direct deposit information in WebPay and replace with information provided on the request. GET API will not return direct deposit data.
		/// Maximum items: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalDirectDeposit")]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public StagedEmployeeAdditionalDirectDeposit[] StagedEmployeeAdditionalDirectDeposit { get; set; }
		
		/// <summary>
		/// Add setup values used for employee benefits integration, insurance plan settings, and ACA reporting.
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="benefitSetup")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public StagedEmployeeBenefitSetup[] StagedEmployeeBenefitSetup { get; set; }
		
		/// <summary>
		/// Employee birthdate. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="birthDate")]
		public string BirthDate { get; set; }
		
		/// <summary>
		/// Up to 8 custom fields of boolean (checkbox) type value.
		/// Maximum items: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customBooleanFields")]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public StagedEmployeeCustomBooleanFields[] StagedEmployeeCustomBooleanFields { get; set; }
		
		/// <summary>
		/// Up to 8 custom fields of the date type value.
		/// Maximum items: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customDateFields")]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public StagedEmployeeCustomDateFields[] StagedEmployeeCustomDateFields { get; set; }
		
		/// <summary>
		/// Up to 8 custom fields of the dropdown type value.
		/// Maximum items: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customDropDownFields")]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public StagedEmployeeCustomDropDownFields[] StagedEmployeeCustomDropDownFields { get; set; }
		
		/// <summary>
		/// Up to 8 custom fields of numeric type value.
		/// Maximum items: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customNumberFields")]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public StagedEmployeeCustomNumberFields[] StagedEmployeeCustomNumberFields { get; set; }
		
		/// <summary>
		/// Up to 8 custom fields of text type value.
		/// Maximum items: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customTextFields")]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public StagedEmployeeCustomTextFields[] StagedEmployeeCustomTextFields { get; set; }
		
		/// <summary>
		/// Add home department cost center, position, supervisor, reviewer, employment type, EEO class, pay settings, and union information.
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="departmentPosition")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public StagedEmployeeDepartmentPosition[] StagedEmployeeDepartmentPosition { get; set; }
		
		/// <summary>
		/// Indicates if employee has disability status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabilityDescription")]
		public string DisabilityDescription { get; set; }
		
		/// <summary>
		/// Leave blank to have Web Pay automatically assign the next available employee ID.<br  /> Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employeeId")]
		public string EmployeeId { get; set; }
		
		/// <summary>
		/// Employee ethnicity.<br  /> Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ethnicity")]
		public string Ethnicity { get; set; }
		
		/// <summary>
		/// Add federal tax amount type (taxCalculationCode), amount or percentage, filing status, and exemptions.
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="federalTax")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public StagedEmployeeFederalTax[] StagedEmployeeFederalTax { get; set; }
		
		/// <summary>
		/// Employee first name. <br  />Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Reason code for FITW exemption. Common values are *SE* (Statutory employee), *CR* (clergy/Religious). <br  /> Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fitwExemptReason")]
		public string FitwExemptReason { get; set; }
		
		/// <summary>
		/// Reason code for FUTA exemption. Common values are *501* (5019c)(3) Organization), *IC* (Independent Contractor).<br  /> Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="futaExemptReason")]
		public string FutaExemptReason { get; set; }
		
		/// <summary>
		/// Employee gender. Common values *M* (Male), *F* (Female). <br  />Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; }
		
		/// <summary>
		/// Add employee's home address, personal phone numbers, and personal email.
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homeAddress")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public StagedEmployeeHomeAddress[] StagedEmployeeHomeAddress { get; set; }
		
		/// <summary>
		/// Indicates if employee in agriculture or farming.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isEmployee943")]
		public System.Nullable<System.Boolean> IsEmployee943 { get; set; }
		
		/// <summary>
		/// Indicates if employee is a smoker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSmoker")]
		public System.Nullable<System.Boolean> IsSmoker { get; set; }
		
		/// <summary>
		/// Employee last name. <br  />Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// Add local tax code, filing status, and exemptions including PA-PSD taxes.
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localTax")]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public StagedEmployeeLocalTax[] StagedEmployeeLocalTax { get; set; }
		
		/// <summary>
		/// Add the main direct deposit account. After deposits are made to any additional direct deposit accounts, the remaining net check is deposited in the main direct deposit account. IMPORTANT: A direct deposit update will remove ALL existing main and additional direct deposit information in WebPay and replace with what is provided on the request. GET API will not return direct deposit data.
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mainDirectDeposit")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public StagedEmployeeMainDirectDeposit[] StagedEmployeeMainDirectDeposit { get; set; }
		
		/// <summary>
		/// Employee marital status. Common values *D (Divorced), M (Married), S (Single), W (Widowed)*. <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maritalStatus")]
		public string MaritalStatus { get; set; }
		
		/// <summary>
		/// Reason code for Medicare exemption. Common values are *501* (5019c)(3) Organization), *IC* (Independent Contractor).<br  /> Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="medExemptReason")]
		public string MedExemptReason { get; set; }
		
		/// <summary>
		/// Employee middle name.<br  /> Max length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="middleName")]
		public string MiddleName { get; set; }
		
		/// <summary>
		/// Add non-primary state tax code, amount type (taxCalculationCode), amount or percentage, filing status, exemptions, supplemental check (specialCheckCalc), and reciprocity code information.
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonPrimaryStateTax")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public StagedEmployeeNonPrimaryStateTax[] StagedEmployeeNonPrimaryStateTax { get; set; }
		
		/// <summary>
		/// Employee preferred display name.<br  /> Max length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preferredName")]
		public string PreferredName { get; set; }
		
		/// <summary>
		/// Add hourly or salary pay rate, effective date, and pay frequency.
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryPayRate")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public StagedEmployeePrimaryPayRate[] StagedEmployeePrimaryPayRate { get; set; }
		
		/// <summary>
		/// Add primary state tax code, amount type (taxCalculationCode), amount or percentage, filing status, exemptions, and supplemental check (specialCheckCalc) information. Only one primary state is allowed.
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryStateTax")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public StagedEmployeePrimaryStateTax[] StagedEmployeePrimaryStateTax { get; set; }
		
		/// <summary>
		/// Prior last name if applicable.<br  />Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priorLastName")]
		public string PriorLastName { get; set; }
		
		/// <summary>
		/// Employee preferred salutation. <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="salutation")]
		public string Salutation { get; set; }
		
		/// <summary>
		/// Reason code for SITW exemption. Common values are *SE* (Statutory employee), *CR* (clergy/Religious). <br  /> Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sitwExemptReason")]
		public string SitwExemptReason { get; set; }
		
		/// <summary>
		/// Reason code for Social Security exemption. Common values are *SE* (Statutory employee), *CR* (clergy/Religious). <br  /> Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ssExemptReason")]
		public string SsExemptReason { get; set; }
		
		/// <summary>
		/// Employee social security number. Leave it blank if valid social security number not available. <br  />Max length: 11
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ssn")]
		public string Ssn { get; set; }
		
		/// <summary>
		/// Add employee status, change reason, effective date, and adjusted seniority date. Note that companies that are still in Implementation cannot hire future employees.
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public StagedEmployeeStatus[] StagedEmployeeStatus { get; set; }
		
		/// <summary>
		/// Employee name suffix. Common values are *Jr, Sr, II*.<br  />Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suffix")]
		public string Suffix { get; set; }
		
		/// <summary>
		/// Reason code for SUI exemption. Common values are *SE* (Statutory employee), *CR* (clergy/Religious). <br  /> Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suiExemptReason")]
		public string SuiExemptReason { get; set; }
		
		/// <summary>
		/// Employee SUI (State Unemployment Insurance) state. <br  />Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suiState")]
		public string SuiState { get; set; }
		
		/// <summary>
		/// Employee 1099R distribution code. Common values are *7* (Normal Distribution), *F* (Charitable Gift Annuity). <br  />Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxDistributionCode1099R")]
		public string TaxDistributionCode1099R { get; set; }
		
		/// <summary>
		/// Employee tax form for reporting income. Valid values are *W2, 1099M, 1099R*. Default is W2. <br  />Max length: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxForm")]
		public string TaxForm { get; set; }
		
		/// <summary>
		/// Indicates if employee is a veteran.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="veteranDescription")]
		public string VeteranDescription { get; set; }
		
		/// <summary>
		/// Add Web Time badge number and charge rate and synchronize Web Pay and Web Time employee data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webTime")]
		public StagedEmployeeWebTime WebTime { get; set; }
		
		/// <summary>
		/// Add employee's work address, phone numbers, and email. Work Location drop down field is not included.
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workAddress")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public StagedEmployeeWorkAddress[] StagedEmployeeWorkAddress { get; set; }
		
		/// <summary>
		/// Add I-9 work authorization information.
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workEligibility")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public StagedEmployeeWorkEligibility[] StagedEmployeeWorkEligibility { get; set; }
	}
	
	public class StagedEmployeeAdditionalDirectDeposit
	{
		
		/// <summary>
		/// Account number, entered without special characters and spaces. <br  />Max length: 17<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// Account type. Valid values are *C* (Checking), *S* (Saving), *P* (Pay Card). <br   />Max length: 1<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountType")]
		public string AccountType { get; set; }
		
		/// <summary>
		/// Amount value to be deposited to the account.<br  />Decimal (12,2)<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Amount type to indicate the context of the amount. Common values are *F* (FLAT), *F-* (Net Minus), *P* (Percent). <br  /> Max length: 5<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountType")]
		public string AmountType { get; set; }
		
		/// <summary>
		/// Indicates if account will not pre-note.<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSkipPreNote")]
		public System.Nullable<System.Boolean> IsSkipPreNote { get; set; }
		
		/// <summary>
		/// Date to end the pre-note of the account. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preNoteDate")]
		public string PreNoteDate { get; set; }
		
		/// <summary>
		/// ABA Transit Routing Number, entered without dashes or spaces. <br  />Max length: 9<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routingNumber")]
		public string RoutingNumber { get; set; }
	}
	
	public class StagedEmployeeBenefitSetup
	{
		
		/// <summary>
		/// Benefit Class code. Values are configured in Web Pay Company > Setup > Benefits > Classes.<br  />Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="benefitClass")]
		public string BenefitClass { get; set; }
		
		/// <summary>
		/// Date when Benefit Class takes effect. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="benefitClassEffectiveDate")]
		public string BenefitClassEffectiveDate { get; set; }
		
		/// <summary>
		/// Salary used to configure benefits.<br  />Decimal(12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="benefitSalary")]
		public System.Nullable<System.Double> BenefitSalary { get; set; }
		
		/// <summary>
		/// Date when Benefit Salary takes effect. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="benefitSalaryEffectiveDate")]
		public string BenefitSalaryEffectiveDate { get; set; }
		
		/// <summary>
		/// Applicable only for ACA Enhanced clients and Benefit Classes with ACA Employment Type of Full Time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doNotApplyAdministrativePeriod")]
		public System.Nullable<System.Boolean> DoNotApplyAdministrativePeriod { get; set; }
		
		/// <summary>
		/// Only valid for ACA Enhanced clients and Benefit Classes that are ACA Employment Type of Full Time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isMeasureAcaEligibility")]
		public System.Nullable<System.Boolean> IsMeasureAcaEligibility { get; set; }
	}
	
	public class StagedEmployeeCustomBooleanFields
	{
		
		/// <summary>
		/// The custom field category.  Acceptable value is 'PayrollAndHR'.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public EmployeeCustomBooleanFieldsCategory Category { get; set; }
		
		/// <summary>
		/// The custom field label whose value is to be added/updated. Must match to the label defined in Web Pay Custom Fields setup.  Max length: 255.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// The custom boolean field value.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Boolean> Value { get; set; }
	}
	
	public class StagedEmployeeCustomDateFields
	{
		
		/// <summary>
		/// The custom field category.  Acceptable value is 'PayrollAndHR'.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public EmployeeCustomBooleanFieldsCategory Category { get; set; }
		
		/// <summary>
		/// The custom field label whose value is to be added/updated.  Must match to the label defined in Web Pay Custom Fields setup.  Max length: 255.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// The custom date field value.  Common formats include MM-DD-CCYY, CCYY-MM-DD.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class StagedEmployeeCustomDropDownFields
	{
		
		/// <summary>
		/// The custom field category.  Acceptable value is 'PayrollAndHR'.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public EmployeeCustomBooleanFieldsCategory Category { get; set; }
		
		/// <summary>
		/// The custom field label whose value is to be added/updated.  Must match to the label defined in Web Pay Custom Fields setup.  Max length: 255.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// The custom dropdown field value.  Values are configured in Web Pay Company > Setup > List Values > Lookup Values > Custom Fields: PayrollAndHR.  Max length: 10.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class StagedEmployeeCustomNumberFields
	{
		
		/// <summary>
		/// The custom field category.  Acceptable value is 'PayrollAndHR'.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public EmployeeCustomBooleanFieldsCategory Category { get; set; }
		
		/// <summary>
		/// The custom field label whose value is to be added/updated.  Must match to the label defined in Web Pay Custom Fields setup.  Max length: 255.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// The custom number field value.  Decimal (18,6).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public class StagedEmployeeCustomTextFields
	{
		
		/// <summary>
		/// The custom field category.  Acceptable value is 'PayrollAndHR'.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public EmployeeCustomBooleanFieldsCategory Category { get; set; }
		
		/// <summary>
		/// The custom field label whose value is to be added/updated.  Must match to the label defined in Web Pay Custom Fields setup.  Max length: 255.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// The custom text field value.  Max length: 255.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class StagedEmployeeDepartmentPosition
	{
		
		/// <summary>
		/// Employee department/position change reason. Must match Company setup. <br  />Max length: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeReason")]
		public string ChangeReason { get; set; }
		
		/// <summary>
		/// Employee clock badge number. Defaults to employeeId. <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clockBadgeNumber")]
		public string ClockBadgeNumber { get; set; }
		
		/// <summary>
		/// Employer defined location, like *branch, division, department*, etc. Must match Company setup. <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costCenter1")]
		public string CostCenter1 { get; set; }
		
		/// <summary>
		/// Employer defined location, like *branch, division, department*, etc. Must match Company setup. <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costCenter2")]
		public string CostCenter2 { get; set; }
		
		/// <summary>
		/// Employer defined location, like *branch, division, department*, etc. Must match Company setup. <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costCenter3")]
		public string CostCenter3 { get; set; }
		
		/// <summary>
		/// The date the position takes effect. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effectiveDate")]
		public string EffectiveDate { get; set; }
		
		/// <summary>
		/// Employee current employment type. Common values *RFT (Regular Full Time), RPT (Regular Part Time), SNL (Seasonal), TFT (Temporary Full Time), TPT (Temporary Part Time)*. <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employeeType")]
		public string EmployeeType { get; set; }
		
		/// <summary>
		/// Values are configured in Company > Setup > HR > EEO Classes.<br  /> Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="equalEmploymentOpportunityClass")]
		public string EqualEmploymentOpportunityClass { get; set; }
		
		/// <summary>
		/// Indicates if employee is exempt from minimum wage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isMinimumWageExempt")]
		public System.Nullable<System.Boolean> IsMinimumWageExempt { get; set; }
		
		/// <summary>
		/// Indicates if employee is exempt from overtime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isOvertimeExempt")]
		public System.Nullable<System.Boolean> IsOvertimeExempt { get; set; }
		
		/// <summary>
		/// Indicates if employee is a supervisor or reviewer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSupervisorReviewer")]
		public System.Nullable<System.Boolean> IsSupervisorReviewer { get; set; }
		
		/// <summary>
		/// Indicates if union dues are collected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isUnionDuesCollected")]
		public System.Nullable<System.Boolean> IsUnionDuesCollected { get; set; }
		
		/// <summary>
		/// Indicates if initiations fees are collected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isUnionInitiationCollected")]
		public System.Nullable<System.Boolean> IsUnionInitiationCollected { get; set; }
		
		/// <summary>
		/// Employee current job title. <br  />Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobTitle")]
		public string JobTitle { get; set; }
		
		/// <summary>
		/// Employee pay group. Must match Company setup. <br  /> Max length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payGroup")]
		public string PayGroup { get; set; }
		
		/// <summary>
		/// Employee position code. Must match Company setup.<br  />Max length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="positionCode")]
		public string PositionCode { get; set; }
		
		/// <summary>
		/// Employee work shift.<br  />Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shift")]
		public string Shift { get; set; }
		
		/// <summary>
		/// Supervisor's company number. Defaults to employee company number.<br  />Max length: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supervisorCompanyNumber")]
		public string SupervisorCompanyNumber { get; set; }
		
		/// <summary>
		/// EmployeeId of the supervisor. <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supervisorEmployeeId")]
		public string SupervisorEmployeeId { get; set; }
		
		/// <summary>
		/// Indicates if employee receives tips.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tipped")]
		public string Tipped { get; set; }
		
		/// <summary>
		/// Employee union affiliation effective date. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unionAffiliationDate")]
		public string UnionAffiliationDate { get; set; }
		
		/// <summary>
		/// Employee union code. Must match Company setup. <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unionCode")]
		public string UnionCode { get; set; }
		
		/// <summary>
		/// Employee union position. Must match Company setup. <br  />Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unionPosition")]
		public string UnionPosition { get; set; }
		
		/// <summary>
		/// Employee worker compensation code. Must match Company setup.<br  /> Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workersCompensation")]
		public string WorkersCompensation { get; set; }
	}
	
	public class StagedEmployeeFederalTax
	{
		
		/// <summary>
		/// Tax amount. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Box 4(b) on form W4 (year 2020 or later): Deductions amount. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deductionsAmount")]
		public System.Nullable<System.Double> DeductionsAmount { get; set; }
		
		/// <summary>
		/// Box 3 on form W4 (year 2020 or later): Total dependents amount. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependentsAmount")]
		public System.Nullable<System.Double> DependentsAmount { get; set; }
		
		/// <summary>
		/// Federal tax exemptions value. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptions")]
		public System.Nullable<System.Double> Exemptions { get; set; }
		
		/// <summary>
		/// Employee federal filing status. Common values are *S* (Single), *M* (Married).<br  />Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filingStatus")]
		public string FilingStatus { get; set; }
		
		/// <summary>
		/// Box 2(c) on form W4 (year 2020 or later): Multiple Jobs or Spouse Works. <br  />Boolean
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="higherRate")]
		public System.Nullable<System.Boolean> HigherRate { get; set; }
		
		/// <summary>
		/// Box 4(a) on form W4 (year 2020 or later): Other income amount. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otherIncomeAmount")]
		public System.Nullable<System.Double> OtherIncomeAmount { get; set; }
		
		/// <summary>
		/// Tax percentage. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public System.Nullable<System.Double> Percentage { get; set; }
		
		/// <summary>
		/// Tax calculation code. Common values are *F* (Flat), *P* (Percentage), *FDFP* (Flat Dollar Amount plus Fixed Percentage). <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxCalculationCode")]
		public string TaxCalculationCode { get; set; }
		
		/// <summary>
		/// The federal W4 form year <br  />Integer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="w4FormYear")]
		public System.Nullable<System.Int32> W4FormYear { get; set; }
	}
	
	public class StagedEmployeeHomeAddress
	{
		
		/// <summary>
		/// 1st address line.<br  /> Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address1")]
		public string Address1 { get; set; }
		
		/// <summary>
		/// 2nd address line. <br  /> Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address2")]
		public string Address2 { get; set; }
		
		/// <summary>
		/// City.<br  /> Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Country.<br  /> Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// County.<br  /> Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="county")]
		public string County { get; set; }
		
		/// <summary>
		/// Email. <br  />Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// Mobile phone number.<br  /> Max length: 12
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilePhone")]
		public string MobilePhone { get; set; }
		
		/// <summary>
		/// Phone number.<br  /> Max length: 12
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// Postal code.<br  /> Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// State or province.<br  /> Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	public class StagedEmployeeLocalTax
	{
		
		/// <summary>
		/// Local tax exemptions value.<br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptions")]
		public System.Nullable<System.Double> Exemptions { get; set; }
		
		/// <summary>
		/// Local tax exemptions 2 value.<br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptions2")]
		public System.Nullable<System.Double> Exemptions2 { get; set; }
		
		/// <summary>
		/// Employee local tax filing status. Must match specific local tax setup. <br  /> Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filingStatus")]
		public string FilingStatus { get; set; }
		
		/// <summary>
		/// Resident PSD (political subdivision code) applicable in PA. Must match Company setup.<br  /> Max length: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="residentPSD")]
		public string ResidentPSD { get; set; }
		
		/// <summary>
		/// Local tax code.<br  />Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxCode")]
		public string TaxCode { get; set; }
		
		/// <summary>
		/// Work location PSD. Must match Company setup. <br  /> Max length: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workPSD")]
		public string WorkPSD { get; set; }
	}
	
	public class StagedEmployeeMainDirectDeposit
	{
		
		/// <summary>
		/// Account number, entered without special characters and spaces. <br  />Max length: 17
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// Account type. Valid values are *C* (Checking), *S* (Saving), *P* (Pay Card). <br   />Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountType")]
		public string AccountType { get; set; }
		
		/// <summary>
		/// Indicates if account will not pre-note.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSkipPreNote")]
		public System.Nullable<System.Boolean> IsSkipPreNote { get; set; }
		
		/// <summary>
		/// Date to end the pre-note of the account. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preNoteDate")]
		public string PreNoteDate { get; set; }
		
		/// <summary>
		/// ABA Transit Routing Number, entered without dashes or spaces. <br  />Max length: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routingNumber")]
		public string RoutingNumber { get; set; }
	}
	
	public class StagedEmployeeNonPrimaryStateTax
	{
		
		/// <summary>
		/// State tax code.<br  /> Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Box 4(b) on form W4 (year 2020 or later): Deductions amount. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deductionsAmount")]
		public System.Nullable<System.Double> DeductionsAmount { get; set; }
		
		/// <summary>
		/// Box 3 on form W4 (year 2020 or later): Total dependents amount. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependentsAmount")]
		public System.Nullable<System.Double> DependentsAmount { get; set; }
		
		/// <summary>
		/// State tax exemptions value.<br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptions")]
		public System.Nullable<System.Double> Exemptions { get; set; }
		
		/// <summary>
		/// State tax exemptions 2 value.<br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptions2")]
		public System.Nullable<System.Double> Exemptions2 { get; set; }
		
		/// <summary>
		/// Employee state tax filing status. Common values are *S* (Single), *M* (Married).<br  />Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filingStatus")]
		public string FilingStatus { get; set; }
		
		/// <summary>
		/// Box 2(c) on form W4 (year 2020 or later): Multiple Jobs or Spouse Works. <br  />Boolean
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="higherRate")]
		public System.Nullable<System.Boolean> HigherRate { get; set; }
		
		/// <summary>
		/// Box 4(a) on form W4 (year 2020 or later): Other income amount. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otherIncomeAmount")]
		public System.Nullable<System.Double> OtherIncomeAmount { get; set; }
		
		/// <summary>
		/// State Tax percentage. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public System.Nullable<System.Double> Percentage { get; set; }
		
		/// <summary>
		/// Non-primary state tax reciprocity code.<br  /> Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reciprocityCode")]
		public string ReciprocityCode { get; set; }
		
		/// <summary>
		/// Supplemental check calculation code. Common values are *Blocked* (Taxes blocked on Supplemental checks), *Supp* (Use supplemental Tax Rate-Code). <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="specialCheckCalc")]
		public string SpecialCheckCalc { get; set; }
		
		/// <summary>
		/// Tax calculation code. Common values are *F* (Flat), *P* (Percentage), *FDFP* (Flat Dollar Amount plus Fixed Percentage). <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxCalculationCode")]
		public string TaxCalculationCode { get; set; }
		
		/// <summary>
		/// State tax code.<br  /> Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxCode")]
		public string TaxCode { get; set; }
		
		/// <summary>
		/// The state W4 form year <br  />Integer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="w4FormYear")]
		public System.Nullable<System.Int32> W4FormYear { get; set; }
	}
	
	public class StagedEmployeePrimaryPayRate
	{
		
		/// <summary>
		/// Employee base rate, used for Hourly employees. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseRate")]
		public System.Nullable<System.Double> BaseRate { get; set; }
		
		/// <summary>
		/// Pay rate change reason.<br  /> Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeReason")]
		public string ChangeReason { get; set; }
		
		/// <summary>
		/// Employee default hours consistently worked. If autoPayType is set to D, employee will be paid hourly base rate for the defaultHours. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultHours")]
		public System.Nullable<System.Double> DefaultHours { get; set; }
		
		/// <summary>
		/// The date the employee's pay rate takes effect. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effectiveDate")]
		public string EffectiveDate { get; set; }
		
		/// <summary>
		/// If set to *True*, employee will be paid automatically using deafultHours.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAutoPay")]
		public System.Nullable<System.Boolean> IsAutoPay { get; set; }
		
		/// <summary>
		/// Employee current pay frequency. Common values are *A (Annual), B (Bi-Weekly), D (Daily), M (Monthly), S (Semi-Monthly), Q (Quarterly), W (Weekly)*. <br  />Max length: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payFrequency")]
		public string PayFrequency { get; set; }
		
		/// <summary>
		/// Employee pay grade. Must match Company setup. <br  /> Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payGrade")]
		public string PayGrade { get; set; }
		
		/// <summary>
		/// Employee pay type (rate code). Valid values are *Hourly* or *Salary*. <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payType")]
		public string PayType { get; set; }
		
		/// <summary>
		/// Employee base rate frequency used with payType Hourly. Common values are *Hour, Week*. Default is Hour. <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ratePer")]
		public string RatePer { get; set; }
		
		/// <summary>
		/// Employee gross salary per pay period used with payType Salary.<br  />Decimal (12,6)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="salary")]
		public System.Nullable<System.Double> Salary { get; set; }
	}
	
	public class StagedEmployeePrimaryStateTax
	{
		
		/// <summary>
		/// State tax code.<br  /> Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Box 4(b) on form W4 (year 2020 or later): Deductions amount. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deductionsAmount")]
		public System.Nullable<System.Double> DeductionsAmount { get; set; }
		
		/// <summary>
		/// Box 3 on form W4 (year 2020 or later): Total dependents amount. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependentsAmount")]
		public System.Nullable<System.Double> DependentsAmount { get; set; }
		
		/// <summary>
		/// State tax exemptions value.<br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptions")]
		public System.Nullable<System.Double> Exemptions { get; set; }
		
		/// <summary>
		/// State tax exemptions 2 value.<br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptions2")]
		public System.Nullable<System.Double> Exemptions2 { get; set; }
		
		/// <summary>
		/// Employee state tax filing status. Common values are *S* (Single), *M* (Married).<br  />Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filingStatus")]
		public string FilingStatus { get; set; }
		
		/// <summary>
		/// Box 2(c) on form W4 (year 2020 or later): Multiple Jobs or Spouse Works. <br  />Boolean
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="higherRate")]
		public System.Nullable<System.Boolean> HigherRate { get; set; }
		
		/// <summary>
		/// Box 4(a) on form W4 (year 2020 or later): Other income amount. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otherIncomeAmount")]
		public System.Nullable<System.Double> OtherIncomeAmount { get; set; }
		
		/// <summary>
		/// State Tax percentage. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public System.Nullable<System.Double> Percentage { get; set; }
		
		/// <summary>
		/// Supplemental check calculation code. Common values are *Blocked* (Taxes blocked on Supplemental checks), *Supp* (Use supplemental Tax Rate-Code). <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="specialCheckCalc")]
		public string SpecialCheckCalc { get; set; }
		
		/// <summary>
		/// Tax calculation code. Common values are *F* (Flat), *P* (Percentage), *FDFP* (Flat Dollar Amount plus Fixed Percentage). <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxCalculationCode")]
		public string TaxCalculationCode { get; set; }
		
		/// <summary>
		/// State tax code.<br  /> Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxCode")]
		public string TaxCode { get; set; }
		
		/// <summary>
		/// The state W4 form year <br  />Integer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="w4FormYear")]
		public System.Nullable<System.Int32> W4FormYear { get; set; }
	}
	
	public class StagedEmployeeStatus
	{
		
		/// <summary>
		/// Adjusted seniority date. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adjustedSeniorityDate")]
		public string AdjustedSeniorityDate { get; set; }
		
		/// <summary>
		/// Employee status change reason. Must match Company setup.<br  /> Max length: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeReason")]
		public string ChangeReason { get; set; }
		
		/// <summary>
		/// Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effectiveDate")]
		public string EffectiveDate { get; set; }
		
		/// <summary>
		/// Employee current work status. Common values are *A* (Active), *L* (Leave of Absence), *T* (Terminated). <br  />Max length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employeeStatus")]
		public string EmployeeStatus { get; set; }
		
		/// <summary>
		/// Employee hired date. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hireDate")]
		public string HireDate { get; set; }
		
		/// <summary>
		/// Indicates if employee eligible for rehire.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isEligibleForRehire")]
		public System.Nullable<System.Boolean> IsEligibleForRehire { get; set; }
	}
	
	public class StagedEmployeeWebTime
	{
		
		/// <summary>
		/// Badge number usually issued for time and attendance system use. <br  />Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="badgeNumber")]
		public string BadgeNumber { get; set; }
		
		/// <summary>
		/// Rate to be charged to third party for time worked by the employee. It is most commonly referenced in the Cost Center Charge, Cost Center Charge vs. Cost Reports, and the Customer Invoice time and attendance reports. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chargeRate")]
		public System.Nullable<System.Double> ChargeRate { get; set; }
		
		/// <summary>
		/// If set to true, changes to employee data will be reflected in Web Time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isTimeLaborEnabled")]
		public System.Nullable<System.Boolean> IsTimeLaborEnabled { get; set; }
	}
	
	public class StagedEmployeeWorkAddress
	{
		
		/// <summary>
		/// 1st address line.<br  /> Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address1")]
		public string Address1 { get; set; }
		
		/// <summary>
		/// 2nd address line. <br  /> Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address2")]
		public string Address2 { get; set; }
		
		/// <summary>
		/// City.<br  /> Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Country.<br  /> Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// County.<br  /> Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="county")]
		public string County { get; set; }
		
		/// <summary>
		/// Email. <br  />Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// Mobile phone number.<br  /> Max length: 12
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilePhone")]
		public string MobilePhone { get; set; }
		
		/// <summary>
		/// Employee pager number.<br  /> Max length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pager")]
		public string Pager { get; set; }
		
		/// <summary>
		/// Phone number.<br  /> Max length: 12
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// Phone number extension.<br  /> Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneExtension")]
		public string PhoneExtension { get; set; }
		
		/// <summary>
		/// Postal code.<br  /> Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// State or province.<br  /> Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	public class StagedEmployeeWorkEligibility
	{
		
		/// <summary>
		/// Employee USCIS or Admission Number. <br  /> Must be 7-10 characters and may begin with an 'A'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alienOrAdmissionDocumentNumber")]
		public string AlienOrAdmissionDocumentNumber { get; set; }
		
		/// <summary>
		/// The date the I-9 Verification form was attested by Employer or Authorized representative. Common formats are *MM-DD-CCYY, CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attestedDate")]
		public string AttestedDate { get; set; }
		
		/// <summary>
		/// If Foreign Passport number is provided, provide its country of issuance. Must match Paylocity setup.<br  /> Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryOfIssuance")]
		public string CountryOfIssuance { get; set; }
		
		/// <summary>
		/// Foreign Passport Number.<br  /> Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="foreignPassportNumber")]
		public string ForeignPassportNumber { get; set; }
		
		/// <summary>
		/// Form I-94 admission number.<br  /> Must be 11 numeric characters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="i94AdmissionNumber")]
		public string I94AdmissionNumber { get; set; }
		
		/// <summary>
		/// Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="i9DateVerified")]
		public string I9DateVerified { get; set; }
		
		/// <summary>
		/// Notes regarding employee's i9.<br  /> Max length: 4000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="i9Notes")]
		public string I9Notes { get; set; }
		
		/// <summary>
		/// Indicates if employee I9 is verified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isI9Verified")]
		public System.Nullable<System.Boolean> IsI9Verified { get; set; }
		
		/// <summary>
		/// Indicates if employee SSN is verified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSsnVerified")]
		public System.Nullable<System.Boolean> IsSsnVerified { get; set; }
		
		/// <summary>
		/// The date of employer verification of employee SSN. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ssnDateVerified")]
		public string SsnDateVerified { get; set; }
		
		/// <summary>
		/// Notes regarding employee's SSN.<br  /> Max length: 4000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ssnNotes")]
		public string SsnNotes { get; set; }
		
		/// <summary>
		/// Employee Visa type. Must match one of the system coded values.<br  /> Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visaType")]
		public string VisaType { get; set; }
		
		/// <summary>
		/// Employee work authorization. Must match one of the system coded values.<br  /> Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workAuthorization")]
		public string WorkAuthorization { get; set; }
		
		/// <summary>
		/// End date of employee work eligibility.  Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workUntil")]
		public string WorkUntil { get; set; }
	}
	
	/// <summary>
	/// The State Tax model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StateTax
	{
		
		/// <summary>
		/// State tax code.<br  /> Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Box 4(b) on form W4 (year 2020 or later): Deductions amount. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deductionsAmount")]
		public System.Nullable<System.Double> DeductionsAmount { get; set; }
		
		/// <summary>
		/// Box 3 on form W4 (year 2020 or later): Total dependents amount. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependentsAmount")]
		public System.Nullable<System.Double> DependentsAmount { get; set; }
		
		/// <summary>
		/// State tax exemptions value.<br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptions")]
		public System.Nullable<System.Double> Exemptions { get; set; }
		
		/// <summary>
		/// State tax exemptions 2 value.<br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptions2")]
		public System.Nullable<System.Double> Exemptions2 { get; set; }
		
		/// <summary>
		/// Employee state tax filing status. Common values are *S* (Single), *M* (Married).<br  />Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filingStatus")]
		public string FilingStatus { get; set; }
		
		/// <summary>
		/// Box 2(c) on form W4 (year 2020 or later): Multiple Jobs or Spouse Works. <br  />Boolean
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="higherRate")]
		public System.Nullable<System.Boolean> HigherRate { get; set; }
		
		/// <summary>
		/// Box 4(a) on form W4 (year 2020 or later): Other income amount. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otherIncomeAmount")]
		public System.Nullable<System.Double> OtherIncomeAmount { get; set; }
		
		/// <summary>
		/// State Tax percentage. <br  />Decimal (12,2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public System.Nullable<System.Double> Percentage { get; set; }
		
		/// <summary>
		/// Supplemental check calculation code. Common values are *Blocked* (Taxes blocked on Supplemental checks), *Supp* (Use supplemental Tax Rate-Code). <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="specialCheckCalc")]
		public string SpecialCheckCalc { get; set; }
		
		/// <summary>
		/// Tax calculation code. Common values are *F* (Flat), *P* (Percentage), *FDFP* (Flat Dollar Amount plus Fixed Percentage). <br  />Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxCalculationCode")]
		public string TaxCalculationCode { get; set; }
		
		/// <summary>
		/// State tax code.<br  /> Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxCode")]
		public string TaxCode { get; set; }
		
		/// <summary>
		/// The state W4 form year <br  />Integer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="w4FormYear")]
		public System.Nullable<System.Int32> W4FormYear { get; set; }
	}
	
	/// <summary>
	/// The Tracking Number Response model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrackingNumberResponse
	{
		
		/// <summary>
		/// The unique tracking number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingNumber")]
		public string TrackingNumber { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get All Company Codes
		/// Get All Company Codes for the selected company and resource
		/// Get_All_Company_Codes_and_Descriptions_by_Resource v2/companies/{companyId}/codes/{codeResource}
		/// </summary>
		/// <param name="companyId">Company Id</param>
		/// <param name="codeResource">Type of Company Code. Common values costcenter1, costcenter2, costcenter3, deductions, earnings, taxes, paygrade, positions.</param>
		/// <returns>Successfully retrieved</returns>
		public async Task<CompanyCodes[]> Get_All_Company_Codes_and_Descriptions_by_ResourceAsync(string companyId, string codeResource, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/codes/"+ (codeResource==null? "" : System.Uri.EscapeDataString(codeResource));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CompanyCodes[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get All Custom Fields
		/// Get All Custom Fields for the selected company
		/// Get_All_Custom_Fields_by_category v2/companies/{companyId}/customfields/{category}
		/// </summary>
		/// <param name="companyId">Company Id</param>
		/// <param name="category">Custom Fields Category</param>
		/// <returns>Successfully retrieved</returns>
		public async Task<CustomFieldDefinition[]> Get_All_Custom_Fields_by_categoryAsync(string companyId, string category, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/customfields/"+ (category==null? "" : System.Uri.EscapeDataString(category));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomFieldDefinition[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add new employee
		/// New Employee API sends new employee data directly to Web Pay. Companies who use the New Hire Template in Web Pay may require additional fields when hiring employees. New Employee API Requests will honor these required fields.
		/// Add_employee v2/companies/{companyId}/employees
		/// </summary>
		/// <param name="companyId">Company Id</param>
		/// <param name="requestBody">Employee Model</param>
		public async Task Add_employeeAsync(string companyId, Employee requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/employees";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all employees
		/// Get All Employees API will return employee data currently available in Web Pay.
		/// Get_all_employees v2/companies/{companyId}/employees/
		/// </summary>
		/// <param name="companyId">Company Id</param>
		/// <param name="pagesize">Number of records per page. Default value is 25.</param>
		/// <param name="pagenumber">Page number to retrieve; page numbers are 0-based (so to get the first page of results, pass pagenumber=0). Default value is 0.</param>
		/// <param name="includetotalcount">Whether to include the total record count in the header's X-Pcty-Total-Count property. Default value is true.</param>
		/// <returns>Successfully Retrieved</returns>
		public async Task<EmployeeInfo[]> Get_all_employeesAsync(string companyId, int pagesize, int pagenumber, bool includetotalcount, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/employees/&pagesize="+pagesize+"&pagenumber="+pagenumber+"&includetotalcount="+includetotalcount;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EmployeeInfo[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get employee
		/// Get Employee API will return employee data currently available in Web Pay.
		/// Get_employee v2/companies/{companyId}/employees/{employeeId}
		/// </summary>
		/// <param name="companyId">Company Id</param>
		/// <param name="employeeId">Employee Id</param>
		/// <returns>Successfully Retrieved</returns>
		public async Task<Employee> Get_employeeAsync(string companyId, string employeeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/employees/"+ (employeeId==null? "" : System.Uri.EscapeDataString(employeeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Employee>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update employee
		/// Update Employee API will update existing employee data in WebPay.
		/// Update_employee v2/companies/{companyId}/employees/{employeeId}
		/// </summary>
		/// <param name="companyId">Company Id</param>
		/// <param name="employeeId">Employee Id</param>
		/// <param name="requestBody">Employee Model</param>
		/// <returns>Successfully Updated</returns>
		public async Task Update_employeeAsync(string companyId, string employeeId, Employee requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/employees/"+ (employeeId==null? "" : System.Uri.EscapeDataString(employeeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add/update additional rates
		/// Sends new or updated employee additional rates information directly to Web Pay.
		/// Add_or_update_additional_rates v2/companies/{companyId}/employees/{employeeId}/additionalRates
		/// </summary>
		/// <param name="companyId">Company Id</param>
		/// <param name="employeeId">Employee Id</param>
		/// <param name="requestBody">Additional Rate Model</param>
		/// <returns>Successfully added or updated</returns>
		public async Task Add_or_update_additional_ratesAsync(string companyId, string employeeId, AdditionalRate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/employees/"+ (employeeId==null? "" : System.Uri.EscapeDataString(employeeId))+"/additionalRates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add/update employee's benefit setup
		/// Sends new or updated employee benefit setup information directly to Web Pay.
		/// Update_or_add_employee_benefit_setup v2/companies/{companyId}/employees/{employeeId}/benefitSetup
		/// </summary>
		/// <param name="companyId">Company Id</param>
		/// <param name="employeeId">Employee Id</param>
		/// <param name="requestBody">BenefitSetup Model</param>
		/// <returns>Successfully added or updated</returns>
		public async Task Update_or_add_employee_benefit_setupAsync(string companyId, string employeeId, BenefitSetup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/employees/"+ (employeeId==null? "" : System.Uri.EscapeDataString(employeeId))+"/benefitSetup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get All Direct Deposit
		/// Get All Direct Deposit returns main direct deposit and all additional direct depositsfor the selected employee.
		/// Get_All_Direct_Deposit v2/companies/{companyId}/employees/{employeeId}/directDeposit
		/// </summary>
		/// <param name="companyId">Company Id</param>
		/// <param name="employeeId">Employee Id</param>
		/// <returns>Successfully Retrieved</returns>
		public async Task<DirectDeposit[]> Get_All_Direct_DepositAsync(string companyId, string employeeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/employees/"+ (employeeId==null? "" : System.Uri.EscapeDataString(employeeId))+"/directDeposit";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DirectDeposit[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get All Earnings
		/// Get All Earnings returns all earnings for the selected employee.
		/// Get_All_Earnings v2/companies/{companyId}/employees/{employeeId}/earnings
		/// </summary>
		/// <param name="companyId">Company Id</param>
		/// <param name="employeeId">Employee Id</param>
		/// <returns>Successfully retrieved</returns>
		public async Task<Earning[]> Get_All_EarningsAsync(string companyId, string employeeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/employees/"+ (employeeId==null? "" : System.Uri.EscapeDataString(employeeId))+"/earnings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Earning[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add/Update Earning
		/// Add/Update Earning API sends new or updated employee earnings information directly to Web Pay.
		/// Add_or_update_an_employee_earning v2/companies/{companyId}/employees/{employeeId}/earnings
		/// </summary>
		/// <param name="companyId">Company Id</param>
		/// <param name="employeeId">Employee Id</param>
		/// <param name="requestBody">Earning Model</param>
		/// <returns>Successfully added or updated</returns>
		public async Task Add_or_update_an_employee_earningAsync(string companyId, string employeeId, Earning requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/employees/"+ (employeeId==null? "" : System.Uri.EscapeDataString(employeeId))+"/earnings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Earnings by Earning Code
		/// Get Earnings returns all earnings with the provided earning code for the selected employee.
		/// Get_Earnings_by_Earning_Code v2/companies/{companyId}/employees/{employeeId}/earnings/{earningCode}
		/// </summary>
		/// <param name="companyId">Company Id</param>
		/// <param name="employeeId">Employee Id</param>
		/// <param name="earningCode">Earning Code</param>
		/// <returns>Successfully retrieved</returns>
		public async Task<Earning[]> Get_Earnings_by_Earning_CodeAsync(string companyId, string employeeId, string earningCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/employees/"+ (employeeId==null? "" : System.Uri.EscapeDataString(employeeId))+"/earnings/"+ (earningCode==null? "" : System.Uri.EscapeDataString(earningCode));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Earning[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Earning by Earning Code and Start Date
		/// Delete Earning by Earning Code and Start Date
		/// Delete_Earning_by_Earning_Code_and_Start_Date v2/companies/{companyId}/employees/{employeeId}/earnings/{earningCode}/{startDate}
		/// </summary>
		/// <param name="companyId">Company Id</param>
		/// <param name="employeeId">Employee Id</param>
		/// <param name="earningCode">Earning Code</param>
		/// <param name="startDate">Start Date</param>
		public async Task Delete_Earning_by_Earning_Code_and_Start_DateAsync(string companyId, string employeeId, string earningCode, string startDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/employees/"+ (employeeId==null? "" : System.Uri.EscapeDataString(employeeId))+"/earnings/"+ (earningCode==null? "" : System.Uri.EscapeDataString(earningCode))+"/"+ (startDate==null? "" : System.Uri.EscapeDataString(startDate));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Earning by Earning Code and Start Date
		/// Get Earnings returns the single earning with the provided earning code and start date for the selected employee.
		/// Get_Earning_by_Earning_Code_and_Start_Date v2/companies/{companyId}/employees/{employeeId}/earnings/{earningCode}/{startDate}
		/// </summary>
		/// <param name="companyId">Company Id</param>
		/// <param name="employeeId">Employee Id</param>
		/// <param name="earningCode">Earning Code</param>
		/// <param name="startDate">Start Date</param>
		/// <returns>Successfully retrieved</returns>
		public async Task<Earning> Get_Earning_by_Earning_Code_and_Start_DateAsync(string companyId, string employeeId, string earningCode, string startDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/employees/"+ (employeeId==null? "" : System.Uri.EscapeDataString(employeeId))+"/earnings/"+ (earningCode==null? "" : System.Uri.EscapeDataString(earningCode))+"/"+ (startDate==null? "" : System.Uri.EscapeDataString(startDate));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Earning>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add/update emergency contacts
		/// Sends new or updated employee emergency contacts directly to Web Pay.
		/// Add_or_update_emergency_contacts v2/companies/{companyId}/employees/{employeeId}/emergencyContacts
		/// </summary>
		/// <param name="companyId">Company Id</param>
		/// <param name="employeeId">Employee Id</param>
		/// <param name="requestBody">Emergency Contact Model</param>
		/// <returns>Successfully added or updated</returns>
		public async Task Add_or_update_emergency_contactsAsync(string companyId, string employeeId, EmergencyContact requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/employees/"+ (employeeId==null? "" : System.Uri.EscapeDataString(employeeId))+"/emergencyContacts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all local taxes
		/// Returns all local taxes for the selected employee.
		/// Get_all_local_taxes v2/companies/{companyId}/employees/{employeeId}/localTaxes
		/// </summary>
		/// <param name="companyId">Company Id</param>
		/// <param name="employeeId">Employee Id</param>
		/// <returns>Successfully retrieved</returns>
		public async Task<LocalTax[]> Get_all_local_taxesAsync(string companyId, string employeeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/employees/"+ (employeeId==null? "" : System.Uri.EscapeDataString(employeeId))+"/localTaxes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LocalTax[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add new local tax
		/// Sends new employee local tax information directly to Web Pay.
		/// Add_local_tax v2/companies/{companyId}/employees/{employeeId}/localTaxes
		/// </summary>
		/// <param name="companyId">Company Id</param>
		/// <param name="employeeId">Employee Id</param>
		/// <param name="requestBody">LocalTax Model</param>
		public async Task Add_local_taxAsync(string companyId, string employeeId, LocalTax requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/employees/"+ (employeeId==null? "" : System.Uri.EscapeDataString(employeeId))+"/localTaxes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete local tax by tax code
		/// Delete local tax by tax code
		/// Delete_local_tax_by_tax_code v2/companies/{companyId}/employees/{employeeId}/localTaxes/{taxCode}
		/// </summary>
		/// <param name="companyId">Company Id</param>
		/// <param name="employeeId">Employee Id</param>
		/// <param name="taxCode">Tax Code</param>
		public async Task Delete_local_tax_by_tax_codeAsync(string companyId, string employeeId, string taxCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/employees/"+ (employeeId==null? "" : System.Uri.EscapeDataString(employeeId))+"/localTaxes/"+ (taxCode==null? "" : System.Uri.EscapeDataString(taxCode));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get local taxes by tax code
		/// Returns all local taxes with the provided tax code for the selected employee.
		/// Get_local_tax_by_tax_code v2/companies/{companyId}/employees/{employeeId}/localTaxes/{taxCode}
		/// </summary>
		/// <param name="companyId">Company Id</param>
		/// <param name="employeeId">Employee Id</param>
		/// <param name="taxCode">Tax Code</param>
		/// <returns>Successfully retrieved</returns>
		public async Task<LocalTax[]> Get_local_tax_by_tax_codeAsync(string companyId, string employeeId, string taxCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/employees/"+ (employeeId==null? "" : System.Uri.EscapeDataString(employeeId))+"/localTaxes/"+ (taxCode==null? "" : System.Uri.EscapeDataString(taxCode));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LocalTax[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add/update non-primary state tax
		/// Sends new or updated employee non-primary state tax information directly to Web Pay.
		/// Add_or_update_non_primary_state_tax v2/companies/{companyId}/employees/{employeeId}/nonprimaryStateTax
		/// </summary>
		/// <param name="companyId">Company Id</param>
		/// <param name="employeeId">Employee Id</param>
		/// <param name="requestBody">Non-Primary State Tax Model</param>
		/// <returns>Successfully added or updated</returns>
		public async Task Add_or_update_non_primary_state_taxAsync(string companyId, string employeeId, NonPrimaryStateTax requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/employees/"+ (employeeId==null? "" : System.Uri.EscapeDataString(employeeId))+"/nonprimaryStateTax";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get employee pay statement details data for the specified year.
		/// Get pay statement details API will return employee pay statement details data currently available in Web Pay for the specified year.
		/// Gets_employee_pay_statement_detail_data_based_on_the_specified_year v2/companies/{companyId}/employees/{employeeId}/paystatement/details/{year}
		/// </summary>
		/// <param name="companyId">Company Id</param>
		/// <param name="employeeId">Employee Id</param>
		/// <param name="year">The year for which to retrieve pay statement data</param>
		/// <param name="pagesize">Number of records per page. Default value is 25.</param>
		/// <param name="pagenumber">Page number to retrieve; page numbers are 0-based (so to get the first page of results, pass pagenumber=0). Default value is 0.</param>
		/// <param name="includetotalcount">Whether to include the total record count in the header's X-Pcty-Total-Count property. Default value is true.</param>
		/// <param name="codegroup">Retrieve pay statement details related to specific deduction, earning or tax types. Common values include 401k, Memo, Reg, OT, Cash Tips, FED and SITW.</param>
		/// <returns>Successfully Retrieved</returns>
		public async Task<PayStatementDetails[]> Gets_employee_pay_statement_detail_data_based_on_the_specified_yearAsync(string companyId, string employeeId, string year, int pagesize, int pagenumber, bool includetotalcount, string codegroup, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/employees/"+ (employeeId==null? "" : System.Uri.EscapeDataString(employeeId))+"/paystatement/details/"+ (year==null? "" : System.Uri.EscapeDataString(year))+"&pagesize="+pagesize+"&pagenumber="+pagenumber+"&includetotalcount="+includetotalcount+"&codegroup=" + (codegroup==null? "" : System.Uri.EscapeDataString(codegroup));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayStatementDetails[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get employee pay statement details data for the specified year and check date.
		/// Get pay statement details API will return employee pay statement detail data currently available in Web Pay for the specified year and check date.
		/// Gets_employee_pay_statement_detail_data_based_on_the_specified_year_and_check_date v2/companies/{companyId}/employees/{employeeId}/paystatement/details/{year}/{checkDate}
		/// </summary>
		/// <param name="companyId">Company Id</param>
		/// <param name="employeeId">Employee Id</param>
		/// <param name="year">The year for which to retrieve pay statement data</param>
		/// <param name="checkDate">The check date for which to retrieve pay statement data</param>
		/// <param name="pagesize">Number of records per page. Default value is 25.</param>
		/// <param name="pagenumber">Page number to retrieve; page numbers are 0-based (so to get the first page of results, pass pagenumber=0). Default value is 0.</param>
		/// <param name="includetotalcount">Whether to include the total record count in the header's X-Pcty-Total-Count property. Default value is true.</param>
		/// <param name="codegroup">Retrieve pay statement details related to specific deduction, earning or tax types. Common values include 401k, Memo, Reg, OT, Cash Tips, FED and SITW.</param>
		/// <returns>Successfully Retrieved</returns>
		public async Task<PayStatementDetails[]> Gets_employee_pay_statement_detail_data_based_on_the_specified_year_and_check_dateAsync(string companyId, string employeeId, string year, string checkDate, int pagesize, int pagenumber, bool includetotalcount, string codegroup, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/employees/"+ (employeeId==null? "" : System.Uri.EscapeDataString(employeeId))+"/paystatement/details/"+ (year==null? "" : System.Uri.EscapeDataString(year))+"/"+ (checkDate==null? "" : System.Uri.EscapeDataString(checkDate))+"&pagesize="+pagesize+"&pagenumber="+pagenumber+"&includetotalcount="+includetotalcount+"&codegroup=" + (codegroup==null? "" : System.Uri.EscapeDataString(codegroup));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayStatementDetails[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get employee pay statement summary data for the specified year.
		/// Get pay statement summary API will return employee pay statement summary data currently available in Web Pay for the specified year.
		/// Gets_employee_pay_statement_summary_data_based_on_the_specified_year v2/companies/{companyId}/employees/{employeeId}/paystatement/summary/{year}
		/// </summary>
		/// <param name="companyId">Company Id</param>
		/// <param name="employeeId">Employee Id</param>
		/// <param name="year">The year for which to retrieve pay statement data</param>
		/// <param name="pagesize">Number of records per page. Default value is 25.</param>
		/// <param name="pagenumber">Page number to retrieve; page numbers are 0-based (so to get the first page of results, pass pagenumber=0). Default value is 0.</param>
		/// <param name="includetotalcount">Whether to include the total record count in the header's X-Pcty-Total-Count property. Default value is true.</param>
		/// <param name="codegroup">Retrieve pay statement details related to specific deduction, earning or tax types. Common values include 401k, Memo, Reg, OT, Cash Tips, FED and SITW.</param>
		/// <returns>Successfully Retrieved</returns>
		public async Task<PayStatementSummary[]> Gets_employee_pay_statement_summary_data_based_on_the_specified_yearAsync(string companyId, string employeeId, string year, int pagesize, int pagenumber, bool includetotalcount, string codegroup, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/employees/"+ (employeeId==null? "" : System.Uri.EscapeDataString(employeeId))+"/paystatement/summary/"+ (year==null? "" : System.Uri.EscapeDataString(year))+"&pagesize="+pagesize+"&pagenumber="+pagenumber+"&includetotalcount="+includetotalcount+"&codegroup=" + (codegroup==null? "" : System.Uri.EscapeDataString(codegroup));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayStatementSummary[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get employee pay statement summary data for the specified year and check date.
		/// Get pay statement summary API will return employee pay statement summary data currently available in Web Pay for the specified year and check date.
		/// Gets_employee_pay_statement_summary_data_based_on_the_specified_year_and_check_date v2/companies/{companyId}/employees/{employeeId}/paystatement/summary/{year}/{checkDate}
		/// </summary>
		/// <param name="companyId">Company Id</param>
		/// <param name="employeeId">Employee Id</param>
		/// <param name="year">The year for which to retrieve pay statement data</param>
		/// <param name="checkDate">The check date for which to retrieve pay statement data</param>
		/// <param name="pagesize">Number of records per page. Default value is 25.</param>
		/// <param name="pagenumber">Page number to retrieve; page numbers are 0-based (so to get the first page of results, pass pagenumber=0). Default value is 0.</param>
		/// <param name="includetotalcount">Whether to include the total record count in the header's X-Pcty-Total-Count property. Default value is true.</param>
		/// <param name="codegroup">Retrieve pay statement details related to specific deduction, earning or tax types. Common values include 401k, Memo, Reg, OT, Cash Tips, FED and SITW.</param>
		/// <returns>Successfully Retrieved</returns>
		public async Task<PayStatementSummary[]> Gets_employee_pay_statement_summary_data_based_on_the_specified_year_and_check_dateAsync(string companyId, string employeeId, string year, string checkDate, int pagesize, int pagenumber, bool includetotalcount, string codegroup, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/employees/"+ (employeeId==null? "" : System.Uri.EscapeDataString(employeeId))+"/paystatement/summary/"+ (year==null? "" : System.Uri.EscapeDataString(year))+"/"+ (checkDate==null? "" : System.Uri.EscapeDataString(checkDate))+"&pagesize="+pagesize+"&pagenumber="+pagenumber+"&includetotalcount="+includetotalcount+"&codegroup=" + (codegroup==null? "" : System.Uri.EscapeDataString(codegroup));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayStatementSummary[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add/update primary state tax
		/// Sends new or updated employee primary state tax information directly to Web Pay.
		/// Add_or_update_primary_state_tax v2/companies/{companyId}/employees/{employeeId}/primaryStateTax
		/// </summary>
		/// <param name="companyId">Company Id</param>
		/// <param name="employeeId">Employee Id</param>
		/// <param name="requestBody">Primary State Tax Model</param>
		/// <returns>Successfully added or updated</returns>
		public async Task Add_or_update_primary_state_taxAsync(string companyId, string employeeId, StateTax requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/employees/"+ (employeeId==null? "" : System.Uri.EscapeDataString(employeeId))+"/primaryStateTax";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get sensitive data
		/// Gets employee sensitive data information directly from Web Pay.
		/// Get_sensitive_data v2/companies/{companyId}/employees/{employeeId}/sensitivedata
		/// </summary>
		/// <param name="companyId">Company Id</param>
		/// <param name="employeeId">Employee Id</param>
		/// <returns>Successfully Retrieved</returns>
		public async Task<SensitiveData[]> Get_sensitive_dataAsync(string companyId, string employeeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/employees/"+ (employeeId==null? "" : System.Uri.EscapeDataString(employeeId))+"/sensitivedata";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SensitiveData[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add/update sensitive data
		/// Sends new or updated employee sensitive data information directly to Web Pay.
		/// Add_or_update_Sensitive_Data v2/companies/{companyId}/employees/{employeeId}/sensitivedata
		/// </summary>
		/// <param name="companyId">Company Id</param>
		/// <param name="employeeId">Employee Id</param>
		/// <param name="requestBody">Sensitive Data Model</param>
		/// <returns>Successfully added or updated</returns>
		public async Task Add_or_update_Sensitive_DataAsync(string companyId, string employeeId, SensitiveData requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/employees/"+ (employeeId==null? "" : System.Uri.EscapeDataString(employeeId))+"/sensitivedata";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Company-Specific Open API Documentation
		/// The company-specific Open API endpoint allows the client to GET an Open API document for the Paylocity API that is customized with company-specific resource schemas. These customized resource schemas define certain properties as enumerations of pre-defined values that correspond to the company's setup with Web Pay. The customized schemas also indicate which properties are required by the company within Web Pay.<br  />To learn more about Open API, click [here](https://www.openapis.org/)
		/// Get_company_specific_Open_API_documentation v2/companies/{companyId}/openapi
		/// </summary>
		/// <param name="companyId">Company Id</param>
		/// <returns>Successfully retrieved</returns>
		public async Task Get_company_specific_Open_API_documentationAsync(string companyId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/openapi";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Obtain new client secret.
		/// Obtain new client secret for Paylocity-issued client id. See Setup section for details.
		/// Add_Client_Secret v2/credentials/secrets
		/// </summary>
		/// <param name="requestBody">Add Client Secret Model</param>
		/// <returns>Successfully added</returns>
		public async Task<ClientCredentialsResponse[]> Add_Client_SecretAsync(AddClientSecret requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/credentials/secrets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClientCredentialsResponse[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add new employee to Web Link
		/// Add new employee to Web Link will send partially completed or potentially erroneous new hire record to Web Link, where it can be corrected and competed by company administrator or authorized Paylocity Service Bureau employee.
		/// Add_new_employee_to_Web_Link v2/weblinkstaging/companies/{companyId}/employees/newemployees
		/// </summary>
		/// <param name="companyId">Company Id</param>
		/// <param name="requestBody">StagedEmployee Model</param>
		public async Task Add_new_employee_to_Web_LinkAsync(string companyId, StagedEmployee requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/weblinkstaging/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/employees/newemployees";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
