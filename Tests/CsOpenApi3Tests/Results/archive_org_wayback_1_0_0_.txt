//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArchivedResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="snapshot")]
		public Snapshot Snapshot { get; set; }
		
		/// <summary>
		/// The user-supplied tag for use in collation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
		
		/// <summary>
		/// The _intepreted_ timestamp requested, in [RFC 3339](http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html) format
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// The URL requested
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Snapshot
	{
		
		/// <summary>
		/// The HTTP status of the URL requested
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		/// <summary>
		/// The timestamp of the snapshot in [RFC 3339](http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html) format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// The URL requested
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AvailabilityRequest
	{
		
		/// <summary>
		/// The direction to find the closest snapshot to the requested timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="closest")]
		public System.Nullable<AvailabilityRequestClosest> Closest { get; set; }
		
		/// <summary>
		/// A user-supplied tag, used for collation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
		
		/// <summary>
		/// Timestamp requested in ISO 8601 format. The following formats are acceptable: - YYYY - YYYY-MM - YYYY-MM-DD - YYYY-MM-DDTHH:mm:SSz - YYYY-MM-DD:HH:mm+00:00
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// The URL requested
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AvailabilityRequestClosest
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="either")]
		either = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="after")]
		after = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="before")]
		before = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AvailabilityResults
	{
		
		/// <summary>
		/// A list of results
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ArchivedResult[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Error
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// WaybackV1AvailableGetByUrlAndTimestampAndCallbackAndTimeoutAndClosestAndStatus_codeAndTag wayback/v1/available
		/// </summary>
		/// <param name="url">A single URL to query.</param>
		/// <param name="timestamp">Timestamp requested in ISO 8601 format. The following formats are acceptable:
		/// - YYYY
		/// - YYYY-MM
		/// - YYYY-MM-DD
		/// - YYYY-MM-DDTHH:mm:SSz
		/// - YYYY-MM-DD:HH:mm+00:00
		///</param>
		/// <param name="callback">Specifies a JavaScript function func, for a JSON-P response. When provided, results are wrapped as `callback(data)`, and the returned MIME type is application/javascript. This causes the caller to automatically run the func with the JSON results as its argument.
		///</param>
		/// <param name="timeout">Timeout is the maximum number of seconds to wait for the availability API to get its underlying results from the CDX server. The default value is 5.0.
		///</param>
		/// <param name="closest">The direction specifies whether to match archived timestamps that are before the provided one, after, or the default either (closest in either direction). Must be before, after, or either. May be overidden by individual requests.
		///</param>
		/// <param name="status_code">HTTP status codes to filter by. Only results with these codes will be returned
		///</param>
		/// <param name="tag">The optional tag can have any value, and is returned with the results; it can be used to help collate input and output values.
		///</param>
		/// <returns>Nominal Availability results</returns>
		public async Task<AvailabilityResults> WaybackV1AvailableGetByUrlAndTimestampAndCallbackAndTimeoutAndClosestAndStatus_codeAndTagAsync(string url, string timestamp, string callback, double timeout, WaybackV1AvailableGetByUrlAndTimestampAndCallbackAndTimeoutAndClosestAndStatus_codeAndTagClosest closest, WaybackV1AvailableGetByUrlAndTimestampAndCallbackAndTimeoutAndClosestAndStatus_codeAndTagStatus_code status_code, string tag, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wayback/v1/available?url=" + (url==null? "" : System.Uri.EscapeDataString(url))+"&timestamp=" + (timestamp==null? "" : System.Uri.EscapeDataString(timestamp))+"&callback=" + (callback==null? "" : System.Uri.EscapeDataString(callback))+"&timeout="+timeout+"&closest=" + closest+"&status_code="+status_code+"&tag=" + (tag==null? "" : System.Uri.EscapeDataString(tag));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AvailabilityResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// WaybackV1AvailablePostByUrlAndTimestampAndCallbackAndTimeoutAndClosestAndStatus_codeAndTag wayback/v1/available
		/// </summary>
		/// <param name="url">A single URL to query.</param>
		/// <param name="timestamp">Timestamp requested in ISO 8601 format. The following formats are acceptable:
		/// - YYYY
		/// - YYYY-MM
		/// - YYYY-MM-DD
		/// - YYYY-MM-DDTHH:mm:SSz
		/// - YYYY-MM-DD:HH:mm+00:00
		///</param>
		/// <param name="callback">Specifies a JavaScript function func, for a JSON-P response. When provided, results are wrapped as `callback(data)`, and the returned MIME type is application/javascript. This causes the caller to automatically run the func with the JSON results as its argument.
		///</param>
		/// <param name="timeout">Timeout is the maximum number of seconds to wait for the availability API to get its underlying results from the CDX server. The default value is 5.0.
		///</param>
		/// <param name="closest">The direction specifies whether to match archived timestamps that are before the provided one, after, or the default either (closest in either direction). Must be before, after, or either. May be overidden by individual requests.
		///</param>
		/// <param name="status_code">HTTP status codes to filter by. Only results with these codes will be returned
		///</param>
		/// <param name="tag">The optional tag can have any value, and is returned with the results; it can be used to help collate input and output values.
		///</param>
		/// <returns>Nominal Availability results</returns>
		public async Task<AvailabilityResults> WaybackV1AvailablePostByUrlAndTimestampAndCallbackAndTimeoutAndClosestAndStatus_codeAndTagAsync(string url, string timestamp, string callback, double timeout, WaybackV1AvailableGetByUrlAndTimestampAndCallbackAndTimeoutAndClosestAndStatus_codeAndTagClosest closest, WaybackV1AvailablePostByUrlAndTimestampAndCallbackAndTimeoutAndClosestAndStatus_codeAndTagStatus_code status_code, string tag, AvailabilityRequest[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wayback/v1/available?url=" + (url==null? "" : System.Uri.EscapeDataString(url))+"&timestamp=" + (timestamp==null? "" : System.Uri.EscapeDataString(timestamp))+"&callback=" + (callback==null? "" : System.Uri.EscapeDataString(callback))+"&timeout="+timeout+"&closest=" + closest+"&status_code="+status_code+"&tag=" + (tag==null? "" : System.Uri.EscapeDataString(tag));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AvailabilityResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum WaybackV1AvailableGetByUrlAndTimestampAndCallbackAndTimeoutAndClosestAndStatus_codeAndTagClosest
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="either")]
		either = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="before")]
		before = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="after")]
		after = 2,
	}
	
	public enum WaybackV1AvailableGetByUrlAndTimestampAndCallbackAndTimeoutAndClosestAndStatus_codeAndTagStatus_code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_200 = 200,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_201 = 201,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_202 = 202,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_203 = 203,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_204 = 204,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_205 = 205,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_206 = 206,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_300 = 300,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_301 = 301,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_302 = 302,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_303 = 303,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_304 = 304,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_305 = 305,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_306 = 306,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_307 = 307,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_308 = 308,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_400 = 400,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_401 = 401,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_402 = 402,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_403 = 403,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_404 = 404,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_405 = 405,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_406 = 406,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_407 = 407,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_408 = 408,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_409 = 409,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_410 = 410,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_411 = 411,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_412 = 412,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_413 = 413,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_414 = 414,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_415 = 415,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_416 = 416,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_417 = 417,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_418 = 418,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_421 = 421,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_426 = 426,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_428 = 428,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_429 = 429,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_431 = 431,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_500 = 500,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_501 = 501,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_502 = 502,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_503 = 503,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_504 = 504,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_505 = 505,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_506 = 506,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_507 = 507,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_511 = 511,
	}
	
	public enum WaybackV1AvailablePostByUrlAndTimestampAndCallbackAndTimeoutAndClosestAndStatus_codeAndTagStatus_code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_200 = 200,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_201 = 201,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_202 = 202,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_203 = 203,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_204 = 204,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_205 = 205,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_206 = 206,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_300 = 300,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_301 = 301,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_302 = 302,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_303 = 303,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_304 = 304,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_305 = 305,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_306 = 306,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_307 = 307,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_308 = 308,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_400 = 400,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_401 = 401,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_402 = 402,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_403 = 403,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_404 = 404,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_405 = 405,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_406 = 406,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_407 = 407,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_408 = 408,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_409 = 409,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_410 = 410,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_411 = 411,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_412 = 412,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_413 = 413,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_414 = 414,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_415 = 415,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_416 = 416,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_417 = 417,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_418 = 418,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_421 = 421,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_426 = 426,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_428 = 428,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_429 = 429,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_431 = 431,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_500 = 500,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_501 = 501,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_502 = 502,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_503 = 503,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_504 = 504,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_505 = 505,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_506 = 506,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_507 = 507,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_511 = 511,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
