//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchInputSubscriptionBatchUpdateRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputs")]
		public SubscriptionBatchUpdateRequest[] Inputs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionBatchUpdateRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="active")]
		public bool Active { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public int Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchResponseSubscriptionResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="completedAt")]
		public System.DateTimeOffset CompletedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public System.Collections.Generic.Dictionary<string, string> Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestedAt")]
		public System.Nullable<System.DateTimeOffset> RequestedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public SubscriptionResponse[] Results { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startedAt")]
		public System.DateTimeOffset StartedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public BatchResponseSubscriptionResponseStatus Status { get; set; }
	}
	
	/// <summary>
	/// Complete details for an event subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionResponse
	{
		
		/// <summary>
		/// Determines if the subscription is active or paused.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="active")]
		public bool Active { get; set; }
		
		/// <summary>
		/// When this subscription was created. Formatted as milliseconds from the [Unix epoch](#).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// Type of event to listen for. Can be one of `create`, `delete`, `deletedForPrivacy`, or `propertyChange`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		public SubscriptionResponseEventType EventType { get; set; }
		
		/// <summary>
		/// The unique ID of the subscription.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The internal name of the property being monitored for changes. Only applies when `eventType` is `propertyChange`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="propertyName")]
		public string PropertyName { get; set; }
		
		/// <summary>
		/// When this subscription was last updated. Formatted as milliseconds from the [Unix epoch](#).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SubscriptionResponseEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="contact.propertyChange")]
		contact_propertyChange = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="company.propertyChange")]
		company_propertyChange = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deal.propertyChange")]
		deal_propertyChange = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ticket.propertyChange")]
		ticket_propertyChange = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="product.propertyChange")]
		product_propertyChange = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="line_item.propertyChange")]
		line_item_propertyChange = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="contact.creation")]
		contact_creation = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="contact.deletion")]
		contact_deletion = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="contact.privacyDeletion")]
		contact_privacyDeletion = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="company.creation")]
		company_creation = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="company.deletion")]
		company_deletion = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deal.creation")]
		deal_creation = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deal.deletion")]
		deal_deletion = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ticket.creation")]
		ticket_creation = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ticket.deletion")]
		ticket_deletion = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="product.creation")]
		product_creation = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="product.deletion")]
		product_deletion = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="line_item.creation")]
		line_item_creation = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="line_item.deletion")]
		line_item_deletion = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="conversation.creation")]
		conversation_creation = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="conversation.deletion")]
		conversation_deletion = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="conversation.newMessage")]
		conversation_newMessage = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="conversation.privacyDeletion")]
		conversation_privacyDeletion = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="conversation.propertyChange")]
		conversation_propertyChange = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="contact.merge")]
		contact_merge = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="company.merge")]
		company_merge = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deal.merge")]
		deal_merge = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ticket.merge")]
		ticket_merge = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="product.merge")]
		product_merge = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="line_item.merge")]
		line_item_merge = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="contact.restore")]
		contact_restore = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="company.restore")]
		company_restore = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deal.restore")]
		deal_restore = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ticket.restore")]
		ticket_restore = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="product.restore")]
		product_restore = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="line_item.restore")]
		line_item_restore = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="contact.associationChange")]
		contact_associationChange = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="company.associationChange")]
		company_associationChange = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deal.associationChange")]
		deal_associationChange = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ticket.associationChange")]
		ticket_associationChange = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="line_item.associationChange")]
		line_item_associationChange = 40,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BatchResponseSubscriptionResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCESSING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchResponseSubscriptionResponseWithErrors
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="completedAt")]
		public System.DateTimeOffset CompletedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public StandardError[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public System.Collections.Generic.Dictionary<string, string> Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numErrors")]
		public System.Nullable<System.Int32> NumErrors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestedAt")]
		public System.Nullable<System.DateTimeOffset> RequestedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public SubscriptionResponse[] Results { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startedAt")]
		public System.DateTimeOffset StartedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public BatchResponseSubscriptionResponseStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StandardError
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="context")]
		public System.Collections.Generic.Dictionary<string, string[]> Context { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public ErrorDetail[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public System.Collections.Generic.Dictionary<string, string> Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subCategory")]
		public string SubCategory { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ErrorDetail
	{
		
		/// <summary>
		/// The status code associated with the error detail
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Context about the error condition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public System.Collections.Generic.Dictionary<string, string[]> Context { get; set; }
		
		/// <summary>
		/// The name of the field or parameter in which the error was found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="in")]
		public string In { get; set; }
		
		/// <summary>
		/// A human readable message describing the error along with remediation steps where appropriate
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// A specific category that contains more specific detail about the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subCategory")]
		public string SubCategory { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Error
	{
		
		/// <summary>
		/// The error category
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// Context about the error condition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public System.Collections.Generic.Dictionary<string, string[]> Context { get; set; }
		
		/// <summary>
		/// A unique identifier for the request. Include this value with any error reports or support tickets
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="correlationId")]
		public string CorrelationId { get; set; }
		
		/// <summary>
		/// further information about the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public ErrorDetail[] Errors { get; set; }
		
		/// <summary>
		/// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public System.Collections.Generic.Dictionary<string, string> Links { get; set; }
		
		/// <summary>
		/// A human readable message describing the error along with remediation steps where appropriate
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// A specific category that contains more specific detail about the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subCategory")]
		public string SubCategory { get; set; }
	}
	
	/// <summary>
	/// New or updated webhook settings for an app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SettingsChangeRequest
	{
		
		/// <summary>
		/// A publicly available URL for Hubspot to call where event payloads will be delivered. See [link-so-some-doc](#) for details about the format of these event payloads.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetUrl")]
		public string TargetUrl { get; set; }
		
		/// <summary>
		/// Configuration details for webhook throttling.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="throttling")]
		public ThrottlingSettings Throttling { get; set; }
	}
	
	/// <summary>
	/// Configuration details for webhook throttling.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThrottlingSettings
	{
		
		/// <summary>
		/// The maximum number of HTTP requests HubSpot will attempt to make to your app in a given time frame determined by `period`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="maxConcurrentRequests")]
		public int MaxConcurrentRequests { get; set; }
		
		/// <summary>
		/// Time scale for this setting. Can be either `SECONDLY` (per second) or `ROLLING_MINUTE` (per minute).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="period")]
		public ThrottlingSettingsPeriod Period { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ThrottlingSettingsPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDLY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROLLING_MINUTE = 1,
	}
	
	/// <summary>
	/// Webhook settings for an app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SettingsResponse
	{
		
		/// <summary>
		/// When this subscription was created. Formatted as milliseconds from the [Unix epoch](#).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// A publicly available URL for Hubspot to call where event payloads will be delivered. See [link-so-some-doc](#) for details about the format of these event payloads.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetUrl")]
		public string TargetUrl { get; set; }
		
		/// <summary>
		/// Configuration details for webhook throttling.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="throttling")]
		public ThrottlingSettings Throttling { get; set; }
		
		/// <summary>
		/// When this subscription was last updated. Formatted as milliseconds from the [Unix epoch](#).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	/// <summary>
	/// New webhook settings for an app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionCreateRequest
	{
		
		/// <summary>
		/// Determines if the subscription is active or paused. Defaults to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Type of event to listen for. Can be one of `create`, `delete`, `deletedForPrivacy`, or `propertyChange`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		public SubscriptionCreateRequestEventType EventType { get; set; }
		
		/// <summary>
		/// The internal name of the property to monitor for changes. Only applies when `eventType` is `propertyChange`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="propertyName")]
		public string PropertyName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SubscriptionCreateRequestEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="contact.propertyChange")]
		contact_propertyChange = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="company.propertyChange")]
		company_propertyChange = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deal.propertyChange")]
		deal_propertyChange = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ticket.propertyChange")]
		ticket_propertyChange = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="product.propertyChange")]
		product_propertyChange = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="line_item.propertyChange")]
		line_item_propertyChange = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="contact.creation")]
		contact_creation = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="contact.deletion")]
		contact_deletion = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="contact.privacyDeletion")]
		contact_privacyDeletion = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="company.creation")]
		company_creation = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="company.deletion")]
		company_deletion = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deal.creation")]
		deal_creation = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deal.deletion")]
		deal_deletion = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ticket.creation")]
		ticket_creation = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ticket.deletion")]
		ticket_deletion = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="product.creation")]
		product_creation = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="product.deletion")]
		product_deletion = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="line_item.creation")]
		line_item_creation = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="line_item.deletion")]
		line_item_deletion = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="conversation.creation")]
		conversation_creation = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="conversation.deletion")]
		conversation_deletion = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="conversation.newMessage")]
		conversation_newMessage = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="conversation.privacyDeletion")]
		conversation_privacyDeletion = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="conversation.propertyChange")]
		conversation_propertyChange = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="contact.merge")]
		contact_merge = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="company.merge")]
		company_merge = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deal.merge")]
		deal_merge = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ticket.merge")]
		ticket_merge = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="product.merge")]
		product_merge = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="line_item.merge")]
		line_item_merge = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="contact.restore")]
		contact_restore = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="company.restore")]
		company_restore = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deal.restore")]
		deal_restore = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ticket.restore")]
		ticket_restore = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="product.restore")]
		product_restore = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="line_item.restore")]
		line_item_restore = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="contact.associationChange")]
		contact_associationChange = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="company.associationChange")]
		company_associationChange = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deal.associationChange")]
		deal_associationChange = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ticket.associationChange")]
		ticket_associationChange = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="line_item.associationChange")]
		line_item_associationChange = 40,
	}
	
	/// <summary>
	/// List of event subscriptions for your app
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionListResponse
	{
		
		/// <summary>
		/// List of event subscriptions for your app
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public SubscriptionResponse[] Results { get; set; }
	}
	
	/// <summary>
	/// Updated details for the subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionPatchRequest
	{
		
		/// <summary>
		/// Determines if the subscription is active or paused.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Delete_SlashwebhooksSlashv3SlashappIdSlashsettings_clear webhooks/v3/{appId}/settings
		/// </summary>
		public async Task Delete_SlashwebhooksSlashv3SlashappIdSlashsettings_clearAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/v3/"+appId+"/settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get_SlashwebhooksSlashv3SlashappIdSlashsettings_getAll webhooks/v3/{appId}/settings
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<SettingsResponse> Get_SlashwebhooksSlashv3SlashappIdSlashsettings_getAllAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/v3/"+appId+"/settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SettingsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Put_SlashwebhooksSlashv3SlashappIdSlashsettings_configure webhooks/v3/{appId}/settings
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<SettingsResponse> Put_SlashwebhooksSlashv3SlashappIdSlashsettings_configureAsync(int appId, SettingsChangeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/v3/"+appId+"/settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SettingsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get_SlashwebhooksSlashv3SlashappIdSlashsubscriptions_getAll webhooks/v3/{appId}/subscriptions
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<SubscriptionListResponse> Get_SlashwebhooksSlashv3SlashappIdSlashsubscriptions_getAllAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/v3/"+appId+"/subscriptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SubscriptionListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Post_SlashwebhooksSlashv3SlashappIdSlashsubscriptions_create webhooks/v3/{appId}/subscriptions
		/// </summary>
		public async Task Post_SlashwebhooksSlashv3SlashappIdSlashsubscriptions_createAsync(int appId, SubscriptionCreateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/v3/"+appId+"/subscriptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Post_SlashwebhooksSlashv3SlashappIdSlashsubscriptionsSlashbatchSlashupdate_updateBatch webhooks/v3/{appId}/subscriptions/batch/update
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<BatchResponseSubscriptionResponse> Post_SlashwebhooksSlashv3SlashappIdSlashsubscriptionsSlashbatchSlashupdate_updateBatchAsync(int appId, BatchInputSubscriptionBatchUpdateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/v3/"+appId+"/subscriptions/batch/update";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchResponseSubscriptionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete_SlashwebhooksSlashv3SlashappIdSlashsubscriptionsSlashsubscriptionId_archive webhooks/v3/{appId}/subscriptions/{subscriptionId}
		/// </summary>
		public async Task Delete_SlashwebhooksSlashv3SlashappIdSlashsubscriptionsSlashsubscriptionId_archiveAsync(int subscriptionId, int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/v3/"+appId+"/subscriptions/"+subscriptionId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get_SlashwebhooksSlashv3SlashappIdSlashsubscriptionsSlashsubscriptionId_getById webhooks/v3/{appId}/subscriptions/{subscriptionId}
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<SubscriptionResponse> Get_SlashwebhooksSlashv3SlashappIdSlashsubscriptionsSlashsubscriptionId_getByIdAsync(int subscriptionId, int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/v3/"+appId+"/subscriptions/"+subscriptionId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SubscriptionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patch_SlashwebhooksSlashv3SlashappIdSlashsubscriptionsSlashsubscriptionId_update webhooks/v3/{appId}/subscriptions/{subscriptionId}
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<SubscriptionResponse> Patch_SlashwebhooksSlashv3SlashappIdSlashsubscriptionsSlashsubscriptionId_updateAsync(int subscriptionId, int appId, SubscriptionPatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/v3/"+appId+"/subscriptions/"+subscriptionId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SubscriptionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
