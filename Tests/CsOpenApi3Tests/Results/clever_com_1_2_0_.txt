//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BadRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Credentials
	{
		
		[System.Runtime.Serialization.DataMember(Name="district_username")]
		public string District_username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class District
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mdr_number")]
		public string Mdr_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DistrictAdmin
	{
		
		[System.Runtime.Serialization.DataMember(Name="district")]
		public string District { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public Name Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Name
	{
		
		[System.Runtime.Serialization.DataMember(Name="first")]
		public string First { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last")]
		public string Last { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="middle")]
		public string Middle { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DistrictAdminResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DistrictAdmin Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DistrictAdminsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DistrictAdmin[] Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DistrictResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public District Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DistrictStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instant_login")]
		public System.Nullable<System.Boolean> Instant_login { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_sync")]
		public string Last_sync { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launch_date")]
		public string Launch_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pause_end")]
		public string Pause_end { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pause_start")]
		public string Pause_start { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sis_type")]
		public string Sis_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<DistrictStatusState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DistrictStatusState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		running = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		error = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		paused = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DistrictStatusResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DistrictStatus Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DistrictStatusResponses
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DistrictStatusResponse[] Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DistrictsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DistrictResponse[] Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GradeLevelsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string[] Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalError
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Location
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public string Lat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public string Lon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="zip")]
		public string Zip { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotFound
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Principal
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class School
	{
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public string Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="district")]
		public string District { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="high_grade")]
		public System.Nullable<SchoolHigh_grade> High_grade { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_modified")]
		public string Last_modified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="low_grade")]
		public System.Nullable<SchoolLow_grade> Low_grade { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mdr_number")]
		public string Mdr_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nces_id")]
		public string Nces_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="principal")]
		public Principal Principal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="school_number")]
		public string School_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sis_id")]
		public string Sis_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state_id")]
		public string State_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SchoolHigh_grade
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PreKindergarten = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kindergarten = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PostGraduate = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SchoolLow_grade
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PreKindergarten = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kindergarten = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PostGraduate = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SchoolAdmin
	{
		
		[System.Runtime.Serialization.DataMember(Name="credentials")]
		public Credentials Credentials { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="district")]
		public string District { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public Name Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schools")]
		public string[] Schools { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="staff_id")]
		public string Staff_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SchoolAdminResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public SchoolAdmin Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SchoolAdminsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public SchoolAdminResponse[] Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SchoolResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public School Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SchoolsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public SchoolResponse[] Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Section
	{
		
		[System.Runtime.Serialization.DataMember(Name="course_description")]
		public string Course_description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="course_name")]
		public string Course_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="course_number")]
		public string Course_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public string Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="district")]
		public string District { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="grade")]
		public System.Nullable<SectionGrade> Grade { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_modified")]
		public string Last_modified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="period")]
		public string Period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="school")]
		public string School { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="section_number")]
		public string Section_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sis_id")]
		public string Sis_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="students")]
		public string[] Students { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public System.Nullable<SectionSubject> Subject { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teacher")]
		public string Teacher { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teachers")]
		public string[] Teachers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public Term Term { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SectionGrade
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PreKindergarten = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kindergarten = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PostGraduate = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SectionSubject
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="english/language arts")]
		english_language_arts = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		math = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		science = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="social studies")]
		social_studies = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		language = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="homeroom/advisory")]
		homeroom_advisory = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="interventions/online learning")]
		interventions_online_learning = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="technology and engineering")]
		technology_and_engineering = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PE and health")]
		PE_and_health = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="arts and music")]
		arts_and_music = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		other = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Term
	{
		
		[System.Runtime.Serialization.DataMember(Name="end_date")]
		public string End_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start_date")]
		public string Start_date { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SectionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Section Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SectionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public SectionResponse[] Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Student
	{
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public string Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="credentials")]
		public Credentials Credentials { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="district")]
		public string District { get; set; }
		
		/// <summary>
		/// Pattern: (?:[0-9]{1,2})/([0-9]{1,2})/([0-9]{4})
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dob")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"(?:[0-9]{1,2})/([0-9]{1,2})/([0-9]{4})")]
		public string Dob { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ell_status")]
		public System.Nullable<StudentEll_status> Ell_status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public System.Nullable<StudentGender> Gender { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="grade")]
		public System.Nullable<StudentGrade> Grade { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="graduation_year")]
		public string Graduation_year { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hispanic_ethnicity")]
		public System.Nullable<StudentHispanic_ethnicity> Hispanic_ethnicity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_modified")]
		public string Last_modified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public Name Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="race")]
		public System.Nullable<StudentRace> Race { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="school")]
		public string School { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schools")]
		public string[] Schools { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sis_id")]
		public string Sis_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state_id")]
		public string State_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="student_number")]
		public string Student_number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StudentEll_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Y = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		N = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="")]
		_ = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StudentGender
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		M = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		F = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="")]
		_ = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StudentGrade
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PreKindergarten = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kindergarten = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PostGraduate = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StudentHispanic_ethnicity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Y = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		N = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="")]
		_ = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StudentRace
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Caucasian = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Asian = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Black or African American")]
		Black_or_African_American = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="American Indian")]
		American_Indian = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Hawaiian or Other Pacific Islander")]
		Hawaiian_or_Other_Pacific_Islander = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Two or More Races")]
		Two_or_More_Races = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="")]
		_ = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StudentContact
	{
		
		[System.Runtime.Serialization.DataMember(Name="district")]
		public string District { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone_type")]
		public string Phone_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationship")]
		public string Relationship { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sis_id")]
		public string Sis_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="student")]
		public string Student { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StudentContactResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public StudentContact Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StudentContactsForStudentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public StudentContact[] Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StudentContactsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public StudentContactResponse[] Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StudentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Student Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StudentsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public StudentResponse[] Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Teacher
	{
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public string Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="credentials")]
		public Credentials Credentials { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="district")]
		public string District { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_modified")]
		public string Last_modified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public Name Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="school")]
		public string School { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schools")]
		public string[] Schools { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sis_id")]
		public string Sis_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state_id")]
		public string State_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teacher_number")]
		public string Teacher_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TeacherResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Teacher Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TeachersResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TeacherResponse[] Data { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns a list of student contacts
		/// GetContacts contacts
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<StudentContactsResponse> GetContactsAsync(int limit, string starting_after, string ending_before, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts?limit="+limit+"&starting_after=" + (starting_after==null? "" : System.Uri.EscapeDataString(starting_after))+"&ending_before=" + (ending_before==null? "" : System.Uri.EscapeDataString(ending_before));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StudentContactsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a specific student contact
		/// GetContact contacts/{id}
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<StudentContactResponse> GetContactAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StudentContactResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the district for a student contact
		/// GetDistrictForStudentContact contacts/{id}/district
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<DistrictResponse> GetDistrictForStudentContactAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/district";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DistrictResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the student for a student contact
		/// GetStudentForContact contacts/{id}/student
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<StudentResponse> GetStudentForContactAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/student";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StudentResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of district admins
		/// GetDistrictAdmins district_admins
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<DistrictAdminsResponse> GetDistrictAdminsAsync(string starting_after, string ending_before, string show_links, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "district_admins?starting_after=" + (starting_after==null? "" : System.Uri.EscapeDataString(starting_after))+"&ending_before=" + (ending_before==null? "" : System.Uri.EscapeDataString(ending_before))+"&show_links=" + (show_links==null? "" : System.Uri.EscapeDataString(show_links));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DistrictAdminsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a specific district admin
		/// GetDistrictAdmin district_admins/{id}
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<DistrictAdminResponse> GetDistrictAdminAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "district_admins/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DistrictAdminResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of districts. In practice this will only return the one district associated with the bearer token
		/// GetDistricts districts
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<DistrictsResponse> GetDistrictsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "districts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DistrictsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a specific district
		/// GetDistrict districts/{id}
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<DistrictResponse> GetDistrictAsync(string id, string include, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "districts/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&include=" + (include==null? "" : System.Uri.EscapeDataString(include));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DistrictResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the admins for a district
		/// GetAdminsForDistrict districts/{id}/admins
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<DistrictAdminsResponse> GetAdminsForDistrictAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "districts/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/admins";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DistrictAdminsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the schools for a district
		/// GetSchoolsForDistrict districts/{id}/schools
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<SchoolsResponse> GetSchoolsForDistrictAsync(string id, int limit, string starting_after, string ending_before, string @where, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "districts/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/schools&limit="+limit+"&starting_after=" + (starting_after==null? "" : System.Uri.EscapeDataString(starting_after))+"&ending_before=" + (ending_before==null? "" : System.Uri.EscapeDataString(ending_before))+"&where=" + (where==null? "" : System.Uri.EscapeDataString(where));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SchoolsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the sections for a district
		/// GetSectionsForDistrict districts/{id}/sections
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<SectionsResponse> GetSectionsForDistrictAsync(string id, int limit, string starting_after, string ending_before, string @where, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "districts/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/sections&limit="+limit+"&starting_after=" + (starting_after==null? "" : System.Uri.EscapeDataString(starting_after))+"&ending_before=" + (ending_before==null? "" : System.Uri.EscapeDataString(ending_before))+"&where=" + (where==null? "" : System.Uri.EscapeDataString(where));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SectionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the status of the district
		/// GetDistrictStatus districts/{id}/status
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<DistrictStatusResponses> GetDistrictStatusAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "districts/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DistrictStatusResponses>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the students for a district
		/// GetStudentsForDistrict districts/{id}/students
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<StudentsResponse> GetStudentsForDistrictAsync(string id, int limit, string starting_after, string ending_before, string @where, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "districts/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/students&limit="+limit+"&starting_after=" + (starting_after==null? "" : System.Uri.EscapeDataString(starting_after))+"&ending_before=" + (ending_before==null? "" : System.Uri.EscapeDataString(ending_before))+"&where=" + (where==null? "" : System.Uri.EscapeDataString(where));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StudentsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the teachers for a district
		/// GetTeachersForDistrict districts/{id}/teachers
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<TeachersResponse> GetTeachersForDistrictAsync(string id, int limit, string starting_after, string ending_before, string @where, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "districts/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/teachers&limit="+limit+"&starting_after=" + (starting_after==null? "" : System.Uri.EscapeDataString(starting_after))+"&ending_before=" + (ending_before==null? "" : System.Uri.EscapeDataString(ending_before))+"&where=" + (where==null? "" : System.Uri.EscapeDataString(where));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TeachersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of school admins
		/// GetSchoolAdmins school_admins
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<SchoolAdminsResponse> GetSchoolAdminsAsync(int limit, string starting_after, string ending_before, string @where, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "school_admins?limit="+limit+"&starting_after=" + (starting_after==null? "" : System.Uri.EscapeDataString(starting_after))+"&ending_before=" + (ending_before==null? "" : System.Uri.EscapeDataString(ending_before))+"&where=" + (where==null? "" : System.Uri.EscapeDataString(where));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SchoolAdminsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a specific school admin
		/// GetSchoolAdmin school_admins/{id}
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<SchoolAdminResponse> GetSchoolAdminAsync(string id, string include, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "school_admins/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&include=" + (include==null? "" : System.Uri.EscapeDataString(include));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SchoolAdminResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the schools for a school admin
		/// GetSchoolsForSchoolAdmin school_admins/{id}/schools
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<SchoolsResponse> GetSchoolsForSchoolAdminAsync(string id, int limit, string starting_after, string ending_before, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "school_admins/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/schools&limit="+limit+"&starting_after=" + (starting_after==null? "" : System.Uri.EscapeDataString(starting_after))+"&ending_before=" + (ending_before==null? "" : System.Uri.EscapeDataString(ending_before));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SchoolsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of schools
		/// GetSchools schools
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<SchoolsResponse> GetSchoolsAsync(int limit, string starting_after, string ending_before, string @where, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schools?limit="+limit+"&starting_after=" + (starting_after==null? "" : System.Uri.EscapeDataString(starting_after))+"&ending_before=" + (ending_before==null? "" : System.Uri.EscapeDataString(ending_before))+"&where=" + (where==null? "" : System.Uri.EscapeDataString(where));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SchoolsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a specific school
		/// GetSchool schools/{id}
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<SchoolResponse> GetSchoolAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schools/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SchoolResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the district for a school
		/// GetDistrictForSchool schools/{id}/district
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<DistrictResponse> GetDistrictForSchoolAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schools/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/district";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DistrictResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the sections for a school
		/// GetSectionsForSchool schools/{id}/sections
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<SectionsResponse> GetSectionsForSchoolAsync(string id, int limit, string starting_after, string ending_before, string @where, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schools/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/sections&limit="+limit+"&starting_after=" + (starting_after==null? "" : System.Uri.EscapeDataString(starting_after))+"&ending_before=" + (ending_before==null? "" : System.Uri.EscapeDataString(ending_before))+"&where=" + (where==null? "" : System.Uri.EscapeDataString(where));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SectionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the students for a school
		/// GetStudentsForSchool schools/{id}/students
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<StudentsResponse> GetStudentsForSchoolAsync(string id, int limit, string starting_after, string ending_before, string @where, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schools/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/students&limit="+limit+"&starting_after=" + (starting_after==null? "" : System.Uri.EscapeDataString(starting_after))+"&ending_before=" + (ending_before==null? "" : System.Uri.EscapeDataString(ending_before))+"&where=" + (where==null? "" : System.Uri.EscapeDataString(where));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StudentsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the teachers for a school
		/// GetTeachersForSchool schools/{id}/teachers
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<TeachersResponse> GetTeachersForSchoolAsync(string id, int limit, string starting_after, string ending_before, string @where, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schools/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/teachers&limit="+limit+"&starting_after=" + (starting_after==null? "" : System.Uri.EscapeDataString(starting_after))+"&ending_before=" + (ending_before==null? "" : System.Uri.EscapeDataString(ending_before))+"&where=" + (where==null? "" : System.Uri.EscapeDataString(where));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TeachersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of sections
		/// GetSections sections
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<SectionsResponse> GetSectionsAsync(int limit, string starting_after, string ending_before, string @where, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sections?limit="+limit+"&starting_after=" + (starting_after==null? "" : System.Uri.EscapeDataString(starting_after))+"&ending_before=" + (ending_before==null? "" : System.Uri.EscapeDataString(ending_before))+"&where=" + (where==null? "" : System.Uri.EscapeDataString(where));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SectionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a specific section
		/// GetSection sections/{id}
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<SectionResponse> GetSectionAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sections/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SectionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the district for a section
		/// GetDistrictForSection sections/{id}/district
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<DistrictResponse> GetDistrictForSectionAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sections/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/district";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DistrictResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the school for a section
		/// GetSchoolForSection sections/{id}/school
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<SchoolResponse> GetSchoolForSectionAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sections/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/school";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SchoolResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the students for a section
		/// GetStudentsForSection sections/{id}/students
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<StudentsResponse> GetStudentsForSectionAsync(string id, int limit, string starting_after, string ending_before, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sections/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/students&limit="+limit+"&starting_after=" + (starting_after==null? "" : System.Uri.EscapeDataString(starting_after))+"&ending_before=" + (ending_before==null? "" : System.Uri.EscapeDataString(ending_before));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StudentsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the primary teacher for a section
		/// GetTeacherForSection sections/{id}/teacher
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<TeacherResponse> GetTeacherForSectionAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sections/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/teacher";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TeacherResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the teachers for a section
		/// GetTeachersForSection sections/{id}/teachers
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<TeachersResponse> GetTeachersForSectionAsync(string id, int limit, string starting_after, string ending_before, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sections/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/teachers&limit="+limit+"&starting_after=" + (starting_after==null? "" : System.Uri.EscapeDataString(starting_after))+"&ending_before=" + (ending_before==null? "" : System.Uri.EscapeDataString(ending_before));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TeachersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of students
		/// GetStudents students
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<StudentsResponse> GetStudentsAsync(int limit, string starting_after, string ending_before, string @where, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "students?limit="+limit+"&starting_after=" + (starting_after==null? "" : System.Uri.EscapeDataString(starting_after))+"&ending_before=" + (ending_before==null? "" : System.Uri.EscapeDataString(ending_before))+"&where=" + (where==null? "" : System.Uri.EscapeDataString(where));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StudentsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a specific student
		/// GetStudent students/{id}
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<StudentResponse> GetStudentAsync(string id, string include, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "students/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&include=" + (include==null? "" : System.Uri.EscapeDataString(include));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StudentResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the contacts for a student
		/// GetContactsForStudent students/{id}/contacts
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<StudentContactsForStudentResponse> GetContactsForStudentAsync(string id, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "students/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/contacts&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StudentContactsForStudentResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the district for a student
		/// GetDistrictForStudent students/{id}/district
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<DistrictResponse> GetDistrictForStudentAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "students/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/district";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DistrictResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the primary school for a student
		/// GetSchoolForStudent students/{id}/school
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<SchoolResponse> GetSchoolForStudentAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "students/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/school";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SchoolResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the sections for a student
		/// GetSectionsForStudent students/{id}/sections
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<SectionsResponse> GetSectionsForStudentAsync(string id, int limit, string starting_after, string ending_before, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "students/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/sections&limit="+limit+"&starting_after=" + (starting_after==null? "" : System.Uri.EscapeDataString(starting_after))+"&ending_before=" + (ending_before==null? "" : System.Uri.EscapeDataString(ending_before));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SectionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the teachers for a student
		/// GetTeachersForStudent students/{id}/teachers
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<TeachersResponse> GetTeachersForStudentAsync(string id, int limit, string starting_after, string ending_before, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "students/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/teachers&limit="+limit+"&starting_after=" + (starting_after==null? "" : System.Uri.EscapeDataString(starting_after))+"&ending_before=" + (ending_before==null? "" : System.Uri.EscapeDataString(ending_before));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TeachersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of teachers
		/// GetTeachers teachers
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<TeachersResponse> GetTeachersAsync(int limit, string starting_after, string ending_before, string @where, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teachers?limit="+limit+"&starting_after=" + (starting_after==null? "" : System.Uri.EscapeDataString(starting_after))+"&ending_before=" + (ending_before==null? "" : System.Uri.EscapeDataString(ending_before))+"&where=" + (where==null? "" : System.Uri.EscapeDataString(where));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TeachersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a specific teacher
		/// GetTeacher teachers/{id}
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<TeacherResponse> GetTeacherAsync(string id, string include, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teachers/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&include=" + (include==null? "" : System.Uri.EscapeDataString(include));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TeacherResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the district for a teacher
		/// GetDistrictForTeacher teachers/{id}/district
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<DistrictResponse> GetDistrictForTeacherAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teachers/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/district";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DistrictResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the grade levels for sections a teacher teaches
		/// GetGradeLevelsForTeacher teachers/{id}/grade_levels
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<GradeLevelsResponse> GetGradeLevelsForTeacherAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teachers/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/grade_levels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GradeLevelsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves school info for a teacher.
		/// GetSchoolForTeacher teachers/{id}/school
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<SchoolResponse> GetSchoolForTeacherAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teachers/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/school";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SchoolResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the sections for a teacher
		/// GetSectionsForTeacher teachers/{id}/sections
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<SectionsResponse> GetSectionsForTeacherAsync(string id, int limit, string starting_after, string ending_before, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teachers/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/sections&limit="+limit+"&starting_after=" + (starting_after==null? "" : System.Uri.EscapeDataString(starting_after))+"&ending_before=" + (ending_before==null? "" : System.Uri.EscapeDataString(ending_before));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SectionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the students for a teacher
		/// GetStudentsForTeacher teachers/{id}/students
		/// </summary>
		/// <returns>OK Response</returns>
		public async Task<StudentsResponse> GetStudentsForTeacherAsync(string id, int limit, string starting_after, string ending_before, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teachers/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/students&limit="+limit+"&starting_after=" + (starting_after==null? "" : System.Uri.EscapeDataString(starting_after))+"&ending_before=" + (ending_before==null? "" : System.Uri.EscapeDataString(ending_before));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StudentsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
