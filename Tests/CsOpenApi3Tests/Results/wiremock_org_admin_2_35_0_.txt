//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RequestPattern
	{
		
		/// <summary>
		/// Pre-emptive basic auth credentials to match against
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basicAuthCredentials")]
		public RequestPatternBasicAuthCredentials BasicAuthCredentials { get; set; }
		
		/// <summary>
		/// Request body patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bodyPatterns")]
		public string[] BodyPatterns { get; set; }
		
		/// <summary>
		/// Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookies")]
		public string Cookies { get; set; }
		
		/// <summary>
		/// Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public string Headers { get; set; }
		
		/// <summary>
		/// The HTTP request method e.g. GET
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Query parameter patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryParameters")]
		public string QueryParameters { get; set; }
		
		/// <summary>
		/// The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPath")]
		public string UrlPath { get; set; }
		
		/// <summary>
		/// The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPathPattern")]
		public string UrlPathPattern { get; set; }
		
		/// <summary>
		/// The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPattern")]
		public string UrlPattern { get; set; }
	}
	
	public class RequestPatternBasicAuthCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StubMapping
	{
		
		/// <summary>
		/// This stub mapping's unique identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public string Metadata { get; set; }
		
		/// <summary>
		/// The stub mapping's name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The new state for the scenario to be updated to after this stub is served.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newScenarioState")]
		public string NewScenarioState { get; set; }
		
		/// <summary>
		/// Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="persistent")]
		public System.Nullable<System.Boolean> Persistent { get; set; }
		
		/// <summary>
		/// A map of the names of post serve action extensions to trigger and their parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postServeActions")]
		public string PostServeActions { get; set; }
		
		/// <summary>
		/// This stub mapping's priority relative to others. 1 is highest.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="request")]
		public StubMappingRequest Request { get; set; }
		
		/// <summary>
		/// The required state of the scenario in order for this stub to be matched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredScenarioState")]
		public string RequiredScenarioState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="response")]
		public StubMappingResponse Response { get; set; }
		
		/// <summary>
		/// The name of the scenario that this stub mapping is part of
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scenarioName")]
		public string ScenarioName { get; set; }
		
		/// <summary>
		/// Alias for the id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
	}
	
	public class StubMappingRequest
	{
		
		/// <summary>
		/// Pre-emptive basic auth credentials to match against
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basicAuthCredentials")]
		public StubMappingRequestBasicAuthCredentials BasicAuthCredentials { get; set; }
		
		/// <summary>
		/// Request body patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bodyPatterns")]
		public string[] BodyPatterns { get; set; }
		
		/// <summary>
		/// Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookies")]
		public string Cookies { get; set; }
		
		/// <summary>
		/// Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public string Headers { get; set; }
		
		/// <summary>
		/// The HTTP request method e.g. GET
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Query parameter patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryParameters")]
		public string QueryParameters { get; set; }
		
		/// <summary>
		/// The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPath")]
		public string UrlPath { get; set; }
		
		/// <summary>
		/// The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPathPattern")]
		public string UrlPathPattern { get; set; }
		
		/// <summary>
		/// The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPattern")]
		public string UrlPattern { get; set; }
	}
	
	public class StubMappingRequestBasicAuthCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	public class StubMappingResponse
	{
		
		/// <summary>
		/// Extra request headers to send when proxying to another host.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalProxyRequestHeaders")]
		public string AdditionalProxyRequestHeaders { get; set; }
		
		/// <summary>
		/// The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="base64Body")]
		public string Base64Body { get; set; }
		
		/// <summary>
		/// The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bodyFileName")]
		public string BodyFileName { get; set; }
		
		/// <summary>
		/// The delay distribution. Valid property configuration is either median/sigma/type or lower/type/upper.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delayDistribution")]
		public StubMappingResponseDelayDistribution DelayDistribution { get; set; }
		
		/// <summary>
		/// The fault to apply (instead of a full, valid response).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fault")]
		public System.Nullable<StubMappingResponseFault> Fault { get; set; }
		
		/// <summary>
		/// Number of milliseconds to delay be before sending the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedDelayMilliseconds")]
		public System.Nullable<System.Int32> FixedDelayMilliseconds { get; set; }
		
		/// <summary>
		/// Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromConfiguredStub")]
		public System.Nullable<System.Boolean> FromConfiguredStub { get; set; }
		
		/// <summary>
		/// Map of response headers to send
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public string Headers { get; set; }
		
		/// <summary>
		/// The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jsonBody")]
		public string JsonBody { get; set; }
		
		/// <summary>
		/// The base URL of the target to proxy matching requests to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proxyBaseUrl")]
		public string ProxyBaseUrl { get; set; }
		
		/// <summary>
		/// The HTTP status code to be returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		/// <summary>
		/// The HTTP status message to be returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Parameters to apply to response transformers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transformerParameters")]
		public string TransformerParameters { get; set; }
		
		/// <summary>
		/// List of names of transformers to apply to this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transformers")]
		public string[] Transformers { get; set; }
	}
	
	public class StubMappingResponseDelayDistribution
	{
		
		[System.Runtime.Serialization.DataMember(Name="median")]
		public System.Nullable<System.Int32> Median { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sigma")]
		public System.Nullable<System.Double> Sigma { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<StubMappingResponseDelayDistributionType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum StubMappingResponseDelayDistributionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lognormal")]
		lognormal = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum StubMappingResponseFault
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONNECTION_RESET_BY_PEER")]
		CONNECTION_RESET_BY_PEER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EMPTY_RESPONSE")]
		EMPTY_RESPONSE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MALFORMED_RESPONSE_CHUNK")]
		MALFORMED_RESPONSE_CHUNK = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RANDOM_DATA_THEN_CLOSE")]
		RANDOM_DATA_THEN_CLOSE = 3,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Delete all stub mappings
		/// __adminMappingsDelete __admin/mappings
		/// </summary>
		/// <returns>Successfully deleted</returns>
		public async Task @__adminMappingsDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__admin/mappings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all stub mappings
		/// __adminMappingsGetByLimitAndOffset __admin/mappings
		/// </summary>
		/// <param name="limit">The maximum number of results to return</param>
		/// <param name="offset">The start index of the results to return</param>
		/// <returns>All stub mappings</returns>
		public async Task<@__adminMappingsGetByLimitAndOffsetReturn> @__adminMappingsGetByLimitAndOffsetAsync(int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__admin/mappings?limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<@__adminMappingsGetByLimitAndOffsetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new stub mapping
		/// __adminMappingsPost __admin/mappings
		/// </summary>
		public async Task @__adminMappingsPostAsync(@__adminMappingsPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__admin/mappings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Find stubs by matching on their metadata
		/// __adminMappingsFind_by_metadataPost __admin/mappings/find-by-metadata
		/// </summary>
		/// <returns>Matched stub mappings</returns>
		public async Task<@__adminMappingsFind_by_metadataPostReturn> @__adminMappingsFind_by_metadataPostAsync(@__adminMappingsFind_by_metadataPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__admin/mappings/find-by-metadata";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<@__adminMappingsFind_by_metadataPostReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Import stub mappings
		/// Import given stub mappings to the backing store
		/// __adminMappingsImportPost __admin/mappings/import
		/// </summary>
		/// <returns>Successfully imported</returns>
		public async Task @__adminMappingsImportPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__admin/mappings/import";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete stub mappings matching metadata
		/// __adminMappingsRemove_by_metadataPost __admin/mappings/remove-by-metadata
		/// </summary>
		/// <returns>The stub mappings were successfully removed</returns>
		public async Task @__adminMappingsRemove_by_metadataPostAsync(@__adminMappingsRemove_by_metadataPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__admin/mappings/remove-by-metadata";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Reset stub mappings
		/// Restores stub mappings to the defaults defined back in the backing store
		/// __adminMappingsResetPost __admin/mappings/reset
		/// </summary>
		/// <returns>Successfully reset</returns>
		public async Task @__adminMappingsResetPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__admin/mappings/reset";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Persist stub mappings
		/// Save all persistent stub mappings to the backing store
		/// __adminMappingsSavePost __admin/mappings/save
		/// </summary>
		/// <returns>Successfully saved</returns>
		public async Task @__adminMappingsSavePostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__admin/mappings/save";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a stub mapping
		/// __adminMappings_stubMappingIdDelete __admin/mappings/{stubMappingId}
		/// </summary>
		/// <returns>OK</returns>
		public async Task @__adminMappings_stubMappingIdDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__admin/mappings/{stubMappingId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get stub mapping by ID
		/// __adminMappings_stubMappingIdGet __admin/mappings/{stubMappingId}
		/// </summary>
		/// <returns>The stub mapping</returns>
		public async Task<@__adminMappings_stubMappingIdGetReturn> @__adminMappings_stubMappingIdGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__admin/mappings/{stubMappingId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<@__adminMappings_stubMappingIdGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a stub mapping
		/// __adminMappings_stubMappingIdPut __admin/mappings/{stubMappingId}
		/// </summary>
		/// <returns>The stub mapping</returns>
		public async Task<@__adminMappings_stubMappingIdPutReturn> @__adminMappings_stubMappingIdPutAsync(@__adminMappings_stubMappingIdPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__admin/mappings/{stubMappingId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<@__adminMappings_stubMappingIdPutReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Find near misses matching specific request
		/// Find at most 3 near misses for closest stub mappings to the specified request
		/// __adminNear_missesRequestPost __admin/near-misses/request
		/// </summary>
		/// <returns>Near misses matching criteria</returns>
		public async Task<@__adminNear_missesRequestPostReturn> @__adminNear_missesRequestPostAsync(@__adminNear_missesRequestPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__admin/near-misses/request";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<@__adminNear_missesRequestPostReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Find near misses matching request pattern
		/// Find at most 3 near misses for closest logged requests to the specified request pattern
		/// __adminNear_missesRequest_patternPost __admin/near-misses/request-pattern
		/// </summary>
		/// <returns>Near misses matching criteria</returns>
		public async Task<@__adminNear_missesRequest_patternPostReturn> @__adminNear_missesRequest_patternPostAsync(@__adminNear_missesRequest_patternPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__admin/near-misses/request-pattern";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<@__adminNear_missesRequest_patternPostReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Take a snapshot recording
		/// __adminRecordingsSnapshotPost __admin/recordings/snapshot
		/// </summary>
		/// <returns>Successfully took a snapshot recording</returns>
		public async Task<@__adminRecordingsSnapshotPostReturn> @__adminRecordingsSnapshotPostAsync(string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__admin/recordings/snapshot";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<@__adminRecordingsSnapshotPostReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Start recording
		/// Begin recording stub mappings
		/// __adminRecordingsStartPost __admin/recordings/start
		/// </summary>
		/// <returns>Successfully started recording</returns>
		public async Task @__adminRecordingsStartPostAsync(@__adminRecordingsStartPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__admin/recordings/start";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get recording status
		/// __adminRecordingsStatusGet __admin/recordings/status
		/// </summary>
		/// <returns>Successfully got the record status</returns>
		public async Task<@__adminRecordingsStatusGetReturn> @__adminRecordingsStatusGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__admin/recordings/status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<@__adminRecordingsStatusGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stop recording
		/// End recording of stub mappings
		/// __adminRecordingsStopPost __admin/recordings/stop
		/// </summary>
		/// <returns>Successfully stopped recording</returns>
		public async Task<@__adminRecordingsStopPostReturn> @__adminRecordingsStopPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__admin/recordings/stop";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<@__adminRecordingsStopPostReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete all requests in journal
		/// __adminRequestsDelete __admin/requests
		/// </summary>
		/// <returns>Successfully deleted</returns>
		public async Task @__adminRequestsDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__admin/requests";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all requests in journal
		/// __adminRequestsGetByLimitAndSince __admin/requests
		/// </summary>
		/// <param name="limit">The maximum number of results to return</param>
		/// <param name="since">Only return logged requests after this date</param>
		/// <returns>List of received requests</returns>
		public async Task @__adminRequestsGetByLimitAndSinceAsync(string limit, string since, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__admin/requests?limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit))+"&since=" + (since==null? "" : System.Uri.EscapeDataString(since));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count requests by criteria
		/// Count requests logged in the journal matching the specified criteria
		/// __adminRequestsCountPost __admin/requests/count
		/// </summary>
		/// <returns>Number of matching requests</returns>
		public async Task<@__adminRequestsCountPostReturn> @__adminRequestsCountPostAsync(@__adminRequestsCountPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__admin/requests/count";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<@__adminRequestsCountPostReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Find requests by criteria
		/// Retrieve details of requests logged in the journal matching the specified criteria
		/// __adminRequestsFindPost __admin/requests/find
		/// </summary>
		/// <returns>Matching request details</returns>
		public async Task @__adminRequestsFindPostAsync(@__adminRequestsFindPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__admin/requests/find";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove requests by criteria
		/// Removed requests logged in the journal matching the specified criteria
		/// __adminRequestsRemovePost __admin/requests/remove
		/// </summary>
		/// <returns>Removed request details</returns>
		public async Task @__adminRequestsRemovePostAsync(@__adminRequestsRemovePostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__admin/requests/remove";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete requests mappings matching metadata
		/// __adminRequestsRemove_by_metadataPost __admin/requests/remove-by-metadata
		/// </summary>
		/// <returns>Removed request details</returns>
		public async Task @__adminRequestsRemove_by_metadataPostAsync(@__adminRequestsRemove_by_metadataPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__admin/requests/remove-by-metadata";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Empty the request journal
		/// __adminRequestsResetPost __admin/requests/reset
		/// </summary>
		/// <returns>Successfully reset</returns>
		public async Task @__adminRequestsResetPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__admin/requests/reset";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find unmatched requests
		/// Get details of logged requests that weren't matched by any stub mapping
		/// __adminRequestsUnmatchedGet __admin/requests/unmatched
		/// </summary>
		/// <returns>Unmatched request details</returns>
		public async Task @__adminRequestsUnmatchedGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__admin/requests/unmatched";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve near-misses for all unmatched requests
		/// __adminRequestsUnmatchedNear_missesGet __admin/requests/unmatched/near-misses
		/// </summary>
		/// <returns>Near misses matching criteria</returns>
		public async Task<@__adminRequestsUnmatchedNear_missesGetReturn> @__adminRequestsUnmatchedNear_missesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__admin/requests/unmatched/near-misses";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<@__adminRequestsUnmatchedNear_missesGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete request by ID
		/// __adminRequests_requestIdDelete __admin/requests/{requestId}
		/// </summary>
		/// <param name="requestId">The UUID of the logged request</param>
		/// <returns>Successfully deleted</returns>
		public async Task @__adminRequests_requestIdDeleteAsync(string requestId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__admin/requests/"+ (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get request by ID
		/// __adminRequests_requestIdGet __admin/requests/{requestId}
		/// </summary>
		/// <param name="requestId">The UUID of the logged request</param>
		/// <returns>OK</returns>
		public async Task @__adminRequests_requestIdGetAsync(string requestId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__admin/requests/"+ (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reset mappings and request journal
		/// Reset mappings to the default state and reset the request journal
		/// __adminResetPost __admin/reset
		/// </summary>
		/// <returns>Successfully reset</returns>
		public async Task @__adminResetPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__admin/reset";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all scenarios
		/// __adminScenariosGet __admin/scenarios
		/// </summary>
		/// <returns>All scenarios</returns>
		public async Task<@__adminScenariosGetReturn> @__adminScenariosGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__admin/scenarios";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<@__adminScenariosGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reset the state of all scenarios
		/// __adminScenariosResetPost __admin/scenarios/reset
		/// </summary>
		/// <returns>Successfully reset</returns>
		public async Task @__adminScenariosResetPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__admin/scenarios/reset";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update global settings
		/// __adminSettingsPost __admin/settings
		/// </summary>
		/// <returns>Settings successfully updated</returns>
		public async Task @__adminSettingsPostAsync(@__adminSettingsPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__admin/settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Shutdown the WireMock server
		/// __adminShutdownPost __admin/shutdown
		/// </summary>
		/// <returns>Server will be shut down</returns>
		public async Task @__adminShutdownPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__admin/shutdown";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class @__adminMappingsGetByLimitAndOffsetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="mappings")]
		public @__adminMappingsGetByLimitAndOffsetReturnMappings[] @__adminMappingsGetByLimitAndOffsetReturnMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public @__adminMappingsGetByLimitAndOffsetReturnMeta Meta { get; set; }
	}
	
	public class @__adminMappingsGetByLimitAndOffsetReturnMappings
	{
		
		/// <summary>
		/// This stub mapping's unique identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public string Metadata { get; set; }
		
		/// <summary>
		/// The stub mapping's name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The new state for the scenario to be updated to after this stub is served.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newScenarioState")]
		public string NewScenarioState { get; set; }
		
		/// <summary>
		/// Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="persistent")]
		public System.Nullable<System.Boolean> Persistent { get; set; }
		
		/// <summary>
		/// A map of the names of post serve action extensions to trigger and their parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postServeActions")]
		public string PostServeActions { get; set; }
		
		/// <summary>
		/// This stub mapping's priority relative to others. 1 is highest.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="request")]
		public @__adminMappingsGetByLimitAndOffsetReturnMappingsRequest Request { get; set; }
		
		/// <summary>
		/// The required state of the scenario in order for this stub to be matched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredScenarioState")]
		public string RequiredScenarioState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="response")]
		public @__adminMappingsGetByLimitAndOffsetReturnMappingsResponse Response { get; set; }
		
		/// <summary>
		/// The name of the scenario that this stub mapping is part of
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scenarioName")]
		public string ScenarioName { get; set; }
		
		/// <summary>
		/// Alias for the id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
	}
	
	public class @__adminMappingsGetByLimitAndOffsetReturnMappingsRequest
	{
		
		/// <summary>
		/// Pre-emptive basic auth credentials to match against
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basicAuthCredentials")]
		public @__adminMappingsGetByLimitAndOffsetReturnMappingsRequestBasicAuthCredentials BasicAuthCredentials { get; set; }
		
		/// <summary>
		/// Request body patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bodyPatterns")]
		public string[] BodyPatterns { get; set; }
		
		/// <summary>
		/// Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookies")]
		public string Cookies { get; set; }
		
		/// <summary>
		/// Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public string Headers { get; set; }
		
		/// <summary>
		/// The HTTP request method e.g. GET
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Query parameter patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryParameters")]
		public string QueryParameters { get; set; }
		
		/// <summary>
		/// The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPath")]
		public string UrlPath { get; set; }
		
		/// <summary>
		/// The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPathPattern")]
		public string UrlPathPattern { get; set; }
		
		/// <summary>
		/// The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPattern")]
		public string UrlPattern { get; set; }
	}
	
	public class @__adminMappingsGetByLimitAndOffsetReturnMappingsRequestBasicAuthCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	public class @__adminMappingsGetByLimitAndOffsetReturnMappingsResponse
	{
		
		/// <summary>
		/// Extra request headers to send when proxying to another host.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalProxyRequestHeaders")]
		public string AdditionalProxyRequestHeaders { get; set; }
		
		/// <summary>
		/// The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="base64Body")]
		public string Base64Body { get; set; }
		
		/// <summary>
		/// The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bodyFileName")]
		public string BodyFileName { get; set; }
		
		/// <summary>
		/// The delay distribution. Valid property configuration is either median/sigma/type or lower/type/upper.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delayDistribution")]
		public @__adminMappingsGetByLimitAndOffsetReturnMappingsResponseDelayDistribution DelayDistribution { get; set; }
		
		/// <summary>
		/// The fault to apply (instead of a full, valid response).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fault")]
		public StubMappingResponseFault Fault { get; set; }
		
		/// <summary>
		/// Number of milliseconds to delay be before sending the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedDelayMilliseconds")]
		public System.Nullable<System.Int32> FixedDelayMilliseconds { get; set; }
		
		/// <summary>
		/// Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromConfiguredStub")]
		public System.Nullable<System.Boolean> FromConfiguredStub { get; set; }
		
		/// <summary>
		/// Map of response headers to send
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public string Headers { get; set; }
		
		/// <summary>
		/// The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jsonBody")]
		public string JsonBody { get; set; }
		
		/// <summary>
		/// The base URL of the target to proxy matching requests to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proxyBaseUrl")]
		public string ProxyBaseUrl { get; set; }
		
		/// <summary>
		/// The HTTP status code to be returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		/// <summary>
		/// The HTTP status message to be returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Parameters to apply to response transformers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transformerParameters")]
		public string TransformerParameters { get; set; }
		
		/// <summary>
		/// List of names of transformers to apply to this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transformers")]
		public string[] Transformers { get; set; }
	}
	
	public class @__adminMappingsGetByLimitAndOffsetReturnMappingsResponseDelayDistribution
	{
		
		[System.Runtime.Serialization.DataMember(Name="median")]
		public System.Nullable<System.Int32> Median { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sigma")]
		public System.Nullable<System.Double> Sigma { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public StubMappingResponseDelayDistributionType Type { get; set; }
	}
	
	public class @__adminMappingsGetByLimitAndOffsetReturnMeta
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public int Total { get; set; }
	}
	
	public class @__adminMappingsPostPostBody
	{
		
		/// <summary>
		/// This stub mapping's unique identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public string Metadata { get; set; }
		
		/// <summary>
		/// The stub mapping's name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The new state for the scenario to be updated to after this stub is served.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newScenarioState")]
		public string NewScenarioState { get; set; }
		
		/// <summary>
		/// Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="persistent")]
		public System.Nullable<System.Boolean> Persistent { get; set; }
		
		/// <summary>
		/// A map of the names of post serve action extensions to trigger and their parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postServeActions")]
		public string PostServeActions { get; set; }
		
		/// <summary>
		/// This stub mapping's priority relative to others. 1 is highest.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="request")]
		public @__adminMappingsPostPostBodyRequest Request { get; set; }
		
		/// <summary>
		/// The required state of the scenario in order for this stub to be matched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredScenarioState")]
		public string RequiredScenarioState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="response")]
		public @__adminMappingsPostPostBodyResponse Response { get; set; }
		
		/// <summary>
		/// The name of the scenario that this stub mapping is part of
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scenarioName")]
		public string ScenarioName { get; set; }
		
		/// <summary>
		/// Alias for the id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
	}
	
	public class @__adminMappingsPostPostBodyRequest
	{
		
		/// <summary>
		/// Pre-emptive basic auth credentials to match against
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basicAuthCredentials")]
		public @__adminMappingsPostPostBodyRequestBasicAuthCredentials BasicAuthCredentials { get; set; }
		
		/// <summary>
		/// Request body patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bodyPatterns")]
		public string[] BodyPatterns { get; set; }
		
		/// <summary>
		/// Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookies")]
		public string Cookies { get; set; }
		
		/// <summary>
		/// Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public string Headers { get; set; }
		
		/// <summary>
		/// The HTTP request method e.g. GET
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Query parameter patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryParameters")]
		public string QueryParameters { get; set; }
		
		/// <summary>
		/// The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPath")]
		public string UrlPath { get; set; }
		
		/// <summary>
		/// The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPathPattern")]
		public string UrlPathPattern { get; set; }
		
		/// <summary>
		/// The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPattern")]
		public string UrlPattern { get; set; }
	}
	
	public class @__adminMappingsPostPostBodyRequestBasicAuthCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	public class @__adminMappingsPostPostBodyResponse
	{
		
		/// <summary>
		/// Extra request headers to send when proxying to another host.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalProxyRequestHeaders")]
		public string AdditionalProxyRequestHeaders { get; set; }
		
		/// <summary>
		/// The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="base64Body")]
		public string Base64Body { get; set; }
		
		/// <summary>
		/// The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bodyFileName")]
		public string BodyFileName { get; set; }
		
		/// <summary>
		/// The delay distribution. Valid property configuration is either median/sigma/type or lower/type/upper.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delayDistribution")]
		public @__adminMappingsPostPostBodyResponseDelayDistribution DelayDistribution { get; set; }
		
		/// <summary>
		/// The fault to apply (instead of a full, valid response).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fault")]
		public StubMappingResponseFault Fault { get; set; }
		
		/// <summary>
		/// Number of milliseconds to delay be before sending the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedDelayMilliseconds")]
		public System.Nullable<System.Int32> FixedDelayMilliseconds { get; set; }
		
		/// <summary>
		/// Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromConfiguredStub")]
		public System.Nullable<System.Boolean> FromConfiguredStub { get; set; }
		
		/// <summary>
		/// Map of response headers to send
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public string Headers { get; set; }
		
		/// <summary>
		/// The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jsonBody")]
		public string JsonBody { get; set; }
		
		/// <summary>
		/// The base URL of the target to proxy matching requests to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proxyBaseUrl")]
		public string ProxyBaseUrl { get; set; }
		
		/// <summary>
		/// The HTTP status code to be returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		/// <summary>
		/// The HTTP status message to be returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Parameters to apply to response transformers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transformerParameters")]
		public string TransformerParameters { get; set; }
		
		/// <summary>
		/// List of names of transformers to apply to this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transformers")]
		public string[] Transformers { get; set; }
	}
	
	public class @__adminMappingsPostPostBodyResponseDelayDistribution
	{
		
		[System.Runtime.Serialization.DataMember(Name="median")]
		public System.Nullable<System.Int32> Median { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sigma")]
		public System.Nullable<System.Double> Sigma { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public StubMappingResponseDelayDistributionType Type { get; set; }
	}
	
	public class @__adminMappingsFind_by_metadataPostPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="caseInsensitive")]
		public System.Nullable<System.Boolean> CaseInsensitive { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="equalTo")]
		public bool EqualTo { get; set; }
	}
	
	public class @__adminMappingsFind_by_metadataPostReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="mappings")]
		public @__adminMappingsFind_by_metadataPostReturnMappings[] @__adminMappingsFind_by_metadataPostReturnMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public @__adminMappingsFind_by_metadataPostReturnMeta Meta { get; set; }
	}
	
	public class @__adminMappingsFind_by_metadataPostReturnMappings
	{
		
		/// <summary>
		/// This stub mapping's unique identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public string Metadata { get; set; }
		
		/// <summary>
		/// The stub mapping's name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The new state for the scenario to be updated to after this stub is served.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newScenarioState")]
		public string NewScenarioState { get; set; }
		
		/// <summary>
		/// Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="persistent")]
		public System.Nullable<System.Boolean> Persistent { get; set; }
		
		/// <summary>
		/// A map of the names of post serve action extensions to trigger and their parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postServeActions")]
		public string PostServeActions { get; set; }
		
		/// <summary>
		/// This stub mapping's priority relative to others. 1 is highest.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="request")]
		public @__adminMappingsFind_by_metadataPostReturnMappingsRequest Request { get; set; }
		
		/// <summary>
		/// The required state of the scenario in order for this stub to be matched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredScenarioState")]
		public string RequiredScenarioState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="response")]
		public @__adminMappingsFind_by_metadataPostReturnMappingsResponse Response { get; set; }
		
		/// <summary>
		/// The name of the scenario that this stub mapping is part of
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scenarioName")]
		public string ScenarioName { get; set; }
		
		/// <summary>
		/// Alias for the id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
	}
	
	public class @__adminMappingsFind_by_metadataPostReturnMappingsRequest
	{
		
		/// <summary>
		/// Pre-emptive basic auth credentials to match against
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basicAuthCredentials")]
		public @__adminMappingsFind_by_metadataPostReturnMappingsRequestBasicAuthCredentials BasicAuthCredentials { get; set; }
		
		/// <summary>
		/// Request body patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bodyPatterns")]
		public string[] BodyPatterns { get; set; }
		
		/// <summary>
		/// Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookies")]
		public string Cookies { get; set; }
		
		/// <summary>
		/// Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public string Headers { get; set; }
		
		/// <summary>
		/// The HTTP request method e.g. GET
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Query parameter patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryParameters")]
		public string QueryParameters { get; set; }
		
		/// <summary>
		/// The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPath")]
		public string UrlPath { get; set; }
		
		/// <summary>
		/// The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPathPattern")]
		public string UrlPathPattern { get; set; }
		
		/// <summary>
		/// The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPattern")]
		public string UrlPattern { get; set; }
	}
	
	public class @__adminMappingsFind_by_metadataPostReturnMappingsRequestBasicAuthCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	public class @__adminMappingsFind_by_metadataPostReturnMappingsResponse
	{
		
		/// <summary>
		/// Extra request headers to send when proxying to another host.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalProxyRequestHeaders")]
		public string AdditionalProxyRequestHeaders { get; set; }
		
		/// <summary>
		/// The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="base64Body")]
		public string Base64Body { get; set; }
		
		/// <summary>
		/// The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bodyFileName")]
		public string BodyFileName { get; set; }
		
		/// <summary>
		/// The delay distribution. Valid property configuration is either median/sigma/type or lower/type/upper.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delayDistribution")]
		public @__adminMappingsFind_by_metadataPostReturnMappingsResponseDelayDistribution DelayDistribution { get; set; }
		
		/// <summary>
		/// The fault to apply (instead of a full, valid response).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fault")]
		public StubMappingResponseFault Fault { get; set; }
		
		/// <summary>
		/// Number of milliseconds to delay be before sending the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedDelayMilliseconds")]
		public System.Nullable<System.Int32> FixedDelayMilliseconds { get; set; }
		
		/// <summary>
		/// Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromConfiguredStub")]
		public System.Nullable<System.Boolean> FromConfiguredStub { get; set; }
		
		/// <summary>
		/// Map of response headers to send
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public string Headers { get; set; }
		
		/// <summary>
		/// The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jsonBody")]
		public string JsonBody { get; set; }
		
		/// <summary>
		/// The base URL of the target to proxy matching requests to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proxyBaseUrl")]
		public string ProxyBaseUrl { get; set; }
		
		/// <summary>
		/// The HTTP status code to be returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		/// <summary>
		/// The HTTP status message to be returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Parameters to apply to response transformers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transformerParameters")]
		public string TransformerParameters { get; set; }
		
		/// <summary>
		/// List of names of transformers to apply to this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transformers")]
		public string[] Transformers { get; set; }
	}
	
	public class @__adminMappingsFind_by_metadataPostReturnMappingsResponseDelayDistribution
	{
		
		[System.Runtime.Serialization.DataMember(Name="median")]
		public System.Nullable<System.Int32> Median { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sigma")]
		public System.Nullable<System.Double> Sigma { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public StubMappingResponseDelayDistributionType Type { get; set; }
	}
	
	public class @__adminMappingsFind_by_metadataPostReturnMeta
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public int Total { get; set; }
	}
	
	public class @__adminMappingsRemove_by_metadataPostPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="caseInsensitive")]
		public System.Nullable<System.Boolean> CaseInsensitive { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="equalTo")]
		public bool EqualTo { get; set; }
	}
	
	public class @__adminMappings_stubMappingIdGetReturn
	{
		
		/// <summary>
		/// This stub mapping's unique identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public string Metadata { get; set; }
		
		/// <summary>
		/// The stub mapping's name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The new state for the scenario to be updated to after this stub is served.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newScenarioState")]
		public string NewScenarioState { get; set; }
		
		/// <summary>
		/// Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="persistent")]
		public System.Nullable<System.Boolean> Persistent { get; set; }
		
		/// <summary>
		/// A map of the names of post serve action extensions to trigger and their parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postServeActions")]
		public string PostServeActions { get; set; }
		
		/// <summary>
		/// This stub mapping's priority relative to others. 1 is highest.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="request")]
		public @__adminMappings_stubMappingIdGetReturnRequest Request { get; set; }
		
		/// <summary>
		/// The required state of the scenario in order for this stub to be matched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredScenarioState")]
		public string RequiredScenarioState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="response")]
		public @__adminMappings_stubMappingIdGetReturnResponse Response { get; set; }
		
		/// <summary>
		/// The name of the scenario that this stub mapping is part of
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scenarioName")]
		public string ScenarioName { get; set; }
		
		/// <summary>
		/// Alias for the id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
	}
	
	public class @__adminMappings_stubMappingIdGetReturnRequest
	{
		
		/// <summary>
		/// Pre-emptive basic auth credentials to match against
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basicAuthCredentials")]
		public @__adminMappings_stubMappingIdGetReturnRequestBasicAuthCredentials BasicAuthCredentials { get; set; }
		
		/// <summary>
		/// Request body patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bodyPatterns")]
		public string[] BodyPatterns { get; set; }
		
		/// <summary>
		/// Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookies")]
		public string Cookies { get; set; }
		
		/// <summary>
		/// Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public string Headers { get; set; }
		
		/// <summary>
		/// The HTTP request method e.g. GET
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Query parameter patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryParameters")]
		public string QueryParameters { get; set; }
		
		/// <summary>
		/// The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPath")]
		public string UrlPath { get; set; }
		
		/// <summary>
		/// The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPathPattern")]
		public string UrlPathPattern { get; set; }
		
		/// <summary>
		/// The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPattern")]
		public string UrlPattern { get; set; }
	}
	
	public class @__adminMappings_stubMappingIdGetReturnRequestBasicAuthCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	public class @__adminMappings_stubMappingIdGetReturnResponse
	{
		
		/// <summary>
		/// Extra request headers to send when proxying to another host.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalProxyRequestHeaders")]
		public string AdditionalProxyRequestHeaders { get; set; }
		
		/// <summary>
		/// The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="base64Body")]
		public string Base64Body { get; set; }
		
		/// <summary>
		/// The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bodyFileName")]
		public string BodyFileName { get; set; }
		
		/// <summary>
		/// The delay distribution. Valid property configuration is either median/sigma/type or lower/type/upper.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delayDistribution")]
		public @__adminMappings_stubMappingIdGetReturnResponseDelayDistribution DelayDistribution { get; set; }
		
		/// <summary>
		/// The fault to apply (instead of a full, valid response).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fault")]
		public StubMappingResponseFault Fault { get; set; }
		
		/// <summary>
		/// Number of milliseconds to delay be before sending the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedDelayMilliseconds")]
		public System.Nullable<System.Int32> FixedDelayMilliseconds { get; set; }
		
		/// <summary>
		/// Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromConfiguredStub")]
		public System.Nullable<System.Boolean> FromConfiguredStub { get; set; }
		
		/// <summary>
		/// Map of response headers to send
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public string Headers { get; set; }
		
		/// <summary>
		/// The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jsonBody")]
		public string JsonBody { get; set; }
		
		/// <summary>
		/// The base URL of the target to proxy matching requests to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proxyBaseUrl")]
		public string ProxyBaseUrl { get; set; }
		
		/// <summary>
		/// The HTTP status code to be returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		/// <summary>
		/// The HTTP status message to be returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Parameters to apply to response transformers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transformerParameters")]
		public string TransformerParameters { get; set; }
		
		/// <summary>
		/// List of names of transformers to apply to this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transformers")]
		public string[] Transformers { get; set; }
	}
	
	public class @__adminMappings_stubMappingIdGetReturnResponseDelayDistribution
	{
		
		[System.Runtime.Serialization.DataMember(Name="median")]
		public System.Nullable<System.Int32> Median { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sigma")]
		public System.Nullable<System.Double> Sigma { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public StubMappingResponseDelayDistributionType Type { get; set; }
	}
	
	public class @__adminMappings_stubMappingIdPutPutBody
	{
		
		/// <summary>
		/// This stub mapping's unique identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public string Metadata { get; set; }
		
		/// <summary>
		/// The stub mapping's name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The new state for the scenario to be updated to after this stub is served.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newScenarioState")]
		public string NewScenarioState { get; set; }
		
		/// <summary>
		/// Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="persistent")]
		public System.Nullable<System.Boolean> Persistent { get; set; }
		
		/// <summary>
		/// A map of the names of post serve action extensions to trigger and their parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postServeActions")]
		public string PostServeActions { get; set; }
		
		/// <summary>
		/// This stub mapping's priority relative to others. 1 is highest.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="request")]
		public @__adminMappings_stubMappingIdPutPutBodyRequest Request { get; set; }
		
		/// <summary>
		/// The required state of the scenario in order for this stub to be matched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredScenarioState")]
		public string RequiredScenarioState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="response")]
		public @__adminMappings_stubMappingIdPutPutBodyResponse Response { get; set; }
		
		/// <summary>
		/// The name of the scenario that this stub mapping is part of
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scenarioName")]
		public string ScenarioName { get; set; }
		
		/// <summary>
		/// Alias for the id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
	}
	
	public class @__adminMappings_stubMappingIdPutPutBodyRequest
	{
		
		/// <summary>
		/// Pre-emptive basic auth credentials to match against
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basicAuthCredentials")]
		public @__adminMappings_stubMappingIdPutPutBodyRequestBasicAuthCredentials BasicAuthCredentials { get; set; }
		
		/// <summary>
		/// Request body patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bodyPatterns")]
		public string[] BodyPatterns { get; set; }
		
		/// <summary>
		/// Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookies")]
		public string Cookies { get; set; }
		
		/// <summary>
		/// Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public string Headers { get; set; }
		
		/// <summary>
		/// The HTTP request method e.g. GET
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Query parameter patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryParameters")]
		public string QueryParameters { get; set; }
		
		/// <summary>
		/// The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPath")]
		public string UrlPath { get; set; }
		
		/// <summary>
		/// The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPathPattern")]
		public string UrlPathPattern { get; set; }
		
		/// <summary>
		/// The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPattern")]
		public string UrlPattern { get; set; }
	}
	
	public class @__adminMappings_stubMappingIdPutPutBodyRequestBasicAuthCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	public class @__adminMappings_stubMappingIdPutPutBodyResponse
	{
		
		/// <summary>
		/// Extra request headers to send when proxying to another host.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalProxyRequestHeaders")]
		public string AdditionalProxyRequestHeaders { get; set; }
		
		/// <summary>
		/// The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="base64Body")]
		public string Base64Body { get; set; }
		
		/// <summary>
		/// The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bodyFileName")]
		public string BodyFileName { get; set; }
		
		/// <summary>
		/// The delay distribution. Valid property configuration is either median/sigma/type or lower/type/upper.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delayDistribution")]
		public @__adminMappings_stubMappingIdPutPutBodyResponseDelayDistribution DelayDistribution { get; set; }
		
		/// <summary>
		/// The fault to apply (instead of a full, valid response).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fault")]
		public StubMappingResponseFault Fault { get; set; }
		
		/// <summary>
		/// Number of milliseconds to delay be before sending the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedDelayMilliseconds")]
		public System.Nullable<System.Int32> FixedDelayMilliseconds { get; set; }
		
		/// <summary>
		/// Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromConfiguredStub")]
		public System.Nullable<System.Boolean> FromConfiguredStub { get; set; }
		
		/// <summary>
		/// Map of response headers to send
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public string Headers { get; set; }
		
		/// <summary>
		/// The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jsonBody")]
		public string JsonBody { get; set; }
		
		/// <summary>
		/// The base URL of the target to proxy matching requests to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proxyBaseUrl")]
		public string ProxyBaseUrl { get; set; }
		
		/// <summary>
		/// The HTTP status code to be returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		/// <summary>
		/// The HTTP status message to be returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Parameters to apply to response transformers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transformerParameters")]
		public string TransformerParameters { get; set; }
		
		/// <summary>
		/// List of names of transformers to apply to this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transformers")]
		public string[] Transformers { get; set; }
	}
	
	public class @__adminMappings_stubMappingIdPutPutBodyResponseDelayDistribution
	{
		
		[System.Runtime.Serialization.DataMember(Name="median")]
		public System.Nullable<System.Int32> Median { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sigma")]
		public System.Nullable<System.Double> Sigma { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public StubMappingResponseDelayDistributionType Type { get; set; }
	}
	
	public class @__adminMappings_stubMappingIdPutReturn
	{
		
		/// <summary>
		/// This stub mapping's unique identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public string Metadata { get; set; }
		
		/// <summary>
		/// The stub mapping's name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The new state for the scenario to be updated to after this stub is served.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newScenarioState")]
		public string NewScenarioState { get; set; }
		
		/// <summary>
		/// Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="persistent")]
		public System.Nullable<System.Boolean> Persistent { get; set; }
		
		/// <summary>
		/// A map of the names of post serve action extensions to trigger and their parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postServeActions")]
		public string PostServeActions { get; set; }
		
		/// <summary>
		/// This stub mapping's priority relative to others. 1 is highest.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="request")]
		public @__adminMappings_stubMappingIdPutReturnRequest Request { get; set; }
		
		/// <summary>
		/// The required state of the scenario in order for this stub to be matched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredScenarioState")]
		public string RequiredScenarioState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="response")]
		public @__adminMappings_stubMappingIdPutReturnResponse Response { get; set; }
		
		/// <summary>
		/// The name of the scenario that this stub mapping is part of
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scenarioName")]
		public string ScenarioName { get; set; }
		
		/// <summary>
		/// Alias for the id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
	}
	
	public class @__adminMappings_stubMappingIdPutReturnRequest
	{
		
		/// <summary>
		/// Pre-emptive basic auth credentials to match against
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basicAuthCredentials")]
		public @__adminMappings_stubMappingIdPutReturnRequestBasicAuthCredentials BasicAuthCredentials { get; set; }
		
		/// <summary>
		/// Request body patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bodyPatterns")]
		public string[] BodyPatterns { get; set; }
		
		/// <summary>
		/// Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookies")]
		public string Cookies { get; set; }
		
		/// <summary>
		/// Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public string Headers { get; set; }
		
		/// <summary>
		/// The HTTP request method e.g. GET
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Query parameter patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryParameters")]
		public string QueryParameters { get; set; }
		
		/// <summary>
		/// The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPath")]
		public string UrlPath { get; set; }
		
		/// <summary>
		/// The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPathPattern")]
		public string UrlPathPattern { get; set; }
		
		/// <summary>
		/// The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPattern")]
		public string UrlPattern { get; set; }
	}
	
	public class @__adminMappings_stubMappingIdPutReturnRequestBasicAuthCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	public class @__adminMappings_stubMappingIdPutReturnResponse
	{
		
		/// <summary>
		/// Extra request headers to send when proxying to another host.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalProxyRequestHeaders")]
		public string AdditionalProxyRequestHeaders { get; set; }
		
		/// <summary>
		/// The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="base64Body")]
		public string Base64Body { get; set; }
		
		/// <summary>
		/// The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bodyFileName")]
		public string BodyFileName { get; set; }
		
		/// <summary>
		/// The delay distribution. Valid property configuration is either median/sigma/type or lower/type/upper.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delayDistribution")]
		public @__adminMappings_stubMappingIdPutReturnResponseDelayDistribution DelayDistribution { get; set; }
		
		/// <summary>
		/// The fault to apply (instead of a full, valid response).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fault")]
		public StubMappingResponseFault Fault { get; set; }
		
		/// <summary>
		/// Number of milliseconds to delay be before sending the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedDelayMilliseconds")]
		public System.Nullable<System.Int32> FixedDelayMilliseconds { get; set; }
		
		/// <summary>
		/// Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromConfiguredStub")]
		public System.Nullable<System.Boolean> FromConfiguredStub { get; set; }
		
		/// <summary>
		/// Map of response headers to send
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public string Headers { get; set; }
		
		/// <summary>
		/// The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jsonBody")]
		public string JsonBody { get; set; }
		
		/// <summary>
		/// The base URL of the target to proxy matching requests to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proxyBaseUrl")]
		public string ProxyBaseUrl { get; set; }
		
		/// <summary>
		/// The HTTP status code to be returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		/// <summary>
		/// The HTTP status message to be returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Parameters to apply to response transformers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transformerParameters")]
		public string TransformerParameters { get; set; }
		
		/// <summary>
		/// List of names of transformers to apply to this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transformers")]
		public string[] Transformers { get; set; }
	}
	
	public class @__adminMappings_stubMappingIdPutReturnResponseDelayDistribution
	{
		
		[System.Runtime.Serialization.DataMember(Name="median")]
		public System.Nullable<System.Int32> Median { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sigma")]
		public System.Nullable<System.Double> Sigma { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public StubMappingResponseDelayDistributionType Type { get; set; }
	}
	
	public class @__adminNear_missesRequestPostPostBody
	{
		
		/// <summary>
		/// The full URL to match against
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="absoluteUrl")]
		public string AbsoluteUrl { get; set; }
		
		/// <summary>
		/// Body string to match against
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookies")]
		public string Cookies { get; set; }
		
		/// <summary>
		/// Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public string Headers { get; set; }
		
		/// <summary>
		/// The HTTP request method
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// The path and query to match exactly against
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class @__adminNear_missesRequestPostReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="nearMisses")]
		public @__adminNear_missesRequestPostReturnNearMisses[] @__adminNear_missesRequestPostReturnNearMisses { get; set; }
	}
	
	public class @__adminNear_missesRequestPostReturnNearMisses
	{
		
		/// <summary>
		/// The full URL to match against
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="absoluteUrl")]
		public string AbsoluteUrl { get; set; }
		
		/// <summary>
		/// Body string to match against
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookies")]
		public string Cookies { get; set; }
		
		/// <summary>
		/// Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public string Headers { get; set; }
		
		/// <summary>
		/// The HTTP request method
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// The path and query to match exactly against
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class @__adminNear_missesRequest_patternPostPostBody
	{
		
		/// <summary>
		/// Pre-emptive basic auth credentials to match against
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basicAuthCredentials")]
		public @__adminNear_missesRequest_patternPostPostBodyBasicAuthCredentials BasicAuthCredentials { get; set; }
		
		/// <summary>
		/// Request body patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bodyPatterns")]
		public string[] BodyPatterns { get; set; }
		
		/// <summary>
		/// Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookies")]
		public string Cookies { get; set; }
		
		/// <summary>
		/// Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public string Headers { get; set; }
		
		/// <summary>
		/// The HTTP request method e.g. GET
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Query parameter patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryParameters")]
		public string QueryParameters { get; set; }
		
		/// <summary>
		/// The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPath")]
		public string UrlPath { get; set; }
		
		/// <summary>
		/// The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPathPattern")]
		public string UrlPathPattern { get; set; }
		
		/// <summary>
		/// The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPattern")]
		public string UrlPattern { get; set; }
	}
	
	public class @__adminNear_missesRequest_patternPostPostBodyBasicAuthCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	public class @__adminNear_missesRequest_patternPostReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="nearMisses")]
		public @__adminNear_missesRequest_patternPostReturnNearMisses[] @__adminNear_missesRequest_patternPostReturnNearMisses { get; set; }
	}
	
	public class @__adminNear_missesRequest_patternPostReturnNearMisses
	{
		
		/// <summary>
		/// The full URL to match against
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="absoluteUrl")]
		public string AbsoluteUrl { get; set; }
		
		/// <summary>
		/// Body string to match against
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookies")]
		public string Cookies { get; set; }
		
		/// <summary>
		/// Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public string Headers { get; set; }
		
		/// <summary>
		/// The HTTP request method
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// The path and query to match exactly against
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class @__adminRecordingsSnapshotPostReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="mappings")]
		public @__adminRecordingsSnapshotPostReturnMappings[] @__adminRecordingsSnapshotPostReturnMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public @__adminRecordingsSnapshotPostReturnMeta Meta { get; set; }
	}
	
	public class @__adminRecordingsSnapshotPostReturnMappings
	{
		
		/// <summary>
		/// This stub mapping's unique identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public string Metadata { get; set; }
		
		/// <summary>
		/// The stub mapping's name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The new state for the scenario to be updated to after this stub is served.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newScenarioState")]
		public string NewScenarioState { get; set; }
		
		/// <summary>
		/// Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="persistent")]
		public System.Nullable<System.Boolean> Persistent { get; set; }
		
		/// <summary>
		/// A map of the names of post serve action extensions to trigger and their parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postServeActions")]
		public string PostServeActions { get; set; }
		
		/// <summary>
		/// This stub mapping's priority relative to others. 1 is highest.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="request")]
		public @__adminRecordingsSnapshotPostReturnMappingsRequest Request { get; set; }
		
		/// <summary>
		/// The required state of the scenario in order for this stub to be matched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredScenarioState")]
		public string RequiredScenarioState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="response")]
		public @__adminRecordingsSnapshotPostReturnMappingsResponse Response { get; set; }
		
		/// <summary>
		/// The name of the scenario that this stub mapping is part of
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scenarioName")]
		public string ScenarioName { get; set; }
		
		/// <summary>
		/// Alias for the id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
	}
	
	public class @__adminRecordingsSnapshotPostReturnMappingsRequest
	{
		
		/// <summary>
		/// Pre-emptive basic auth credentials to match against
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basicAuthCredentials")]
		public @__adminRecordingsSnapshotPostReturnMappingsRequestBasicAuthCredentials BasicAuthCredentials { get; set; }
		
		/// <summary>
		/// Request body patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bodyPatterns")]
		public string[] BodyPatterns { get; set; }
		
		/// <summary>
		/// Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookies")]
		public string Cookies { get; set; }
		
		/// <summary>
		/// Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public string Headers { get; set; }
		
		/// <summary>
		/// The HTTP request method e.g. GET
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Query parameter patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryParameters")]
		public string QueryParameters { get; set; }
		
		/// <summary>
		/// The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPath")]
		public string UrlPath { get; set; }
		
		/// <summary>
		/// The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPathPattern")]
		public string UrlPathPattern { get; set; }
		
		/// <summary>
		/// The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPattern")]
		public string UrlPattern { get; set; }
	}
	
	public class @__adminRecordingsSnapshotPostReturnMappingsRequestBasicAuthCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	public class @__adminRecordingsSnapshotPostReturnMappingsResponse
	{
		
		/// <summary>
		/// Extra request headers to send when proxying to another host.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalProxyRequestHeaders")]
		public string AdditionalProxyRequestHeaders { get; set; }
		
		/// <summary>
		/// The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="base64Body")]
		public string Base64Body { get; set; }
		
		/// <summary>
		/// The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bodyFileName")]
		public string BodyFileName { get; set; }
		
		/// <summary>
		/// The delay distribution. Valid property configuration is either median/sigma/type or lower/type/upper.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delayDistribution")]
		public @__adminRecordingsSnapshotPostReturnMappingsResponseDelayDistribution DelayDistribution { get; set; }
		
		/// <summary>
		/// The fault to apply (instead of a full, valid response).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fault")]
		public StubMappingResponseFault Fault { get; set; }
		
		/// <summary>
		/// Number of milliseconds to delay be before sending the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedDelayMilliseconds")]
		public System.Nullable<System.Int32> FixedDelayMilliseconds { get; set; }
		
		/// <summary>
		/// Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromConfiguredStub")]
		public System.Nullable<System.Boolean> FromConfiguredStub { get; set; }
		
		/// <summary>
		/// Map of response headers to send
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public string Headers { get; set; }
		
		/// <summary>
		/// The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jsonBody")]
		public string JsonBody { get; set; }
		
		/// <summary>
		/// The base URL of the target to proxy matching requests to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proxyBaseUrl")]
		public string ProxyBaseUrl { get; set; }
		
		/// <summary>
		/// The HTTP status code to be returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		/// <summary>
		/// The HTTP status message to be returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Parameters to apply to response transformers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transformerParameters")]
		public string TransformerParameters { get; set; }
		
		/// <summary>
		/// List of names of transformers to apply to this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transformers")]
		public string[] Transformers { get; set; }
	}
	
	public class @__adminRecordingsSnapshotPostReturnMappingsResponseDelayDistribution
	{
		
		[System.Runtime.Serialization.DataMember(Name="median")]
		public System.Nullable<System.Int32> Median { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sigma")]
		public System.Nullable<System.Double> Sigma { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public StubMappingResponseDelayDistributionType Type { get; set; }
	}
	
	public class @__adminRecordingsSnapshotPostReturnMeta
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public int Total { get; set; }
	}
	
	public class @__adminRecordingsStartPostPostBody
	{
		
		/// <summary>
		/// Headers from the request to include in the generated stub mappings, mapped to parameter objects. The only parameter available is "caseInsensitive", which defaults to false
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="captureHeaders")]
		public System.Collections.Generic.Dictionary<string, @__adminRecordingsStartPostPostBodyCaptureHeaders> CaptureHeaders { get; set; }
		
		/// <summary>
		/// Criteria for extracting response bodies to a separate file instead of including it in the stub mapping
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extractBodyCriteria")]
		public @__adminRecordingsStartPostPostBodyExtractBodyCriteria ExtractBodyCriteria { get; set; }
		
		/// <summary>
		/// Whether to save stub mappings to the file system or just return them
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="persist")]
		public System.Nullable<System.Boolean> Persist { get; set; }
		
		/// <summary>
		/// When true, duplicate requests will be added to a Scenario. When false, duplicates are discarded
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repeatsAsScenarios")]
		public System.Nullable<System.Boolean> RepeatsAsScenarios { get; set; }
		
		/// <summary>
		/// Control the request body matcher used in generated stub mappings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestBodyPattern")]
		public string RequestBodyPattern { get; set; }
		
		/// <summary>
		/// List of names of stub mappings transformers to apply to generated stubs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transformerParameters")]
		public string TransformerParameters { get; set; }
		
		/// <summary>
		/// Parameters to pass to stub mapping transformers
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transformers")]
		public string[] Transformers { get; set; }
	}
	
	public class @__adminRecordingsStartPostPostBodyCaptureHeaders
	{
		
		[System.Runtime.Serialization.DataMember(Name="caseInsensitive")]
		public System.Nullable<System.Boolean> CaseInsensitive { get; set; }
	}
	
	public class @__adminRecordingsStartPostPostBodyExtractBodyCriteria
	{
		
		/// <summary>
		/// Size threshold for extracting binary response bodies. Supports humanized size strings, e.g. "56 Mb". Default unit is bytes.
		/// </summary>
		[System.ComponentModel.DefaultValue("0")]
		[System.Runtime.Serialization.DataMember(Name="binarySizeThreshold")]
		public string BinarySizeThreshold { get; set; } = "0";
		
		/// <summary>
		/// Size threshold for extracting binary response bodies. Supports humanized size strings, e.g. "56 Mb". Default unit is bytes.
		/// </summary>
		[System.ComponentModel.DefaultValue("0")]
		[System.Runtime.Serialization.DataMember(Name="textSizeThreshold")]
		public string TextSizeThreshold { get; set; } = "0";
	}
	
	public class @__adminRecordingsStatusGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<__adminRecordingsStatusGetReturnStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum @__adminRecordingsStatusGetReturnStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NeverStarted")]
		NeverStarted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Recording")]
		Recording = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Stopped")]
		Stopped = 2,
	}
	
	public class @__adminRecordingsStopPostReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="mappings")]
		public @__adminRecordingsStopPostReturnMappings[] @__adminRecordingsStopPostReturnMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public @__adminRecordingsStopPostReturnMeta Meta { get; set; }
	}
	
	public class @__adminRecordingsStopPostReturnMappings
	{
		
		/// <summary>
		/// This stub mapping's unique identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public string Metadata { get; set; }
		
		/// <summary>
		/// The stub mapping's name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The new state for the scenario to be updated to after this stub is served.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newScenarioState")]
		public string NewScenarioState { get; set; }
		
		/// <summary>
		/// Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="persistent")]
		public System.Nullable<System.Boolean> Persistent { get; set; }
		
		/// <summary>
		/// A map of the names of post serve action extensions to trigger and their parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postServeActions")]
		public string PostServeActions { get; set; }
		
		/// <summary>
		/// This stub mapping's priority relative to others. 1 is highest.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="request")]
		public @__adminRecordingsStopPostReturnMappingsRequest Request { get; set; }
		
		/// <summary>
		/// The required state of the scenario in order for this stub to be matched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredScenarioState")]
		public string RequiredScenarioState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="response")]
		public @__adminRecordingsStopPostReturnMappingsResponse Response { get; set; }
		
		/// <summary>
		/// The name of the scenario that this stub mapping is part of
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scenarioName")]
		public string ScenarioName { get; set; }
		
		/// <summary>
		/// Alias for the id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
	}
	
	public class @__adminRecordingsStopPostReturnMappingsRequest
	{
		
		/// <summary>
		/// Pre-emptive basic auth credentials to match against
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basicAuthCredentials")]
		public @__adminRecordingsStopPostReturnMappingsRequestBasicAuthCredentials BasicAuthCredentials { get; set; }
		
		/// <summary>
		/// Request body patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bodyPatterns")]
		public string[] BodyPatterns { get; set; }
		
		/// <summary>
		/// Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookies")]
		public string Cookies { get; set; }
		
		/// <summary>
		/// Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public string Headers { get; set; }
		
		/// <summary>
		/// The HTTP request method e.g. GET
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Query parameter patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryParameters")]
		public string QueryParameters { get; set; }
		
		/// <summary>
		/// The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPath")]
		public string UrlPath { get; set; }
		
		/// <summary>
		/// The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPathPattern")]
		public string UrlPathPattern { get; set; }
		
		/// <summary>
		/// The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPattern")]
		public string UrlPattern { get; set; }
	}
	
	public class @__adminRecordingsStopPostReturnMappingsRequestBasicAuthCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	public class @__adminRecordingsStopPostReturnMappingsResponse
	{
		
		/// <summary>
		/// Extra request headers to send when proxying to another host.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalProxyRequestHeaders")]
		public string AdditionalProxyRequestHeaders { get; set; }
		
		/// <summary>
		/// The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="base64Body")]
		public string Base64Body { get; set; }
		
		/// <summary>
		/// The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bodyFileName")]
		public string BodyFileName { get; set; }
		
		/// <summary>
		/// The delay distribution. Valid property configuration is either median/sigma/type or lower/type/upper.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delayDistribution")]
		public @__adminRecordingsStopPostReturnMappingsResponseDelayDistribution DelayDistribution { get; set; }
		
		/// <summary>
		/// The fault to apply (instead of a full, valid response).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fault")]
		public StubMappingResponseFault Fault { get; set; }
		
		/// <summary>
		/// Number of milliseconds to delay be before sending the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedDelayMilliseconds")]
		public System.Nullable<System.Int32> FixedDelayMilliseconds { get; set; }
		
		/// <summary>
		/// Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromConfiguredStub")]
		public System.Nullable<System.Boolean> FromConfiguredStub { get; set; }
		
		/// <summary>
		/// Map of response headers to send
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public string Headers { get; set; }
		
		/// <summary>
		/// The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jsonBody")]
		public string JsonBody { get; set; }
		
		/// <summary>
		/// The base URL of the target to proxy matching requests to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proxyBaseUrl")]
		public string ProxyBaseUrl { get; set; }
		
		/// <summary>
		/// The HTTP status code to be returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		/// <summary>
		/// The HTTP status message to be returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Parameters to apply to response transformers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transformerParameters")]
		public string TransformerParameters { get; set; }
		
		/// <summary>
		/// List of names of transformers to apply to this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transformers")]
		public string[] Transformers { get; set; }
	}
	
	public class @__adminRecordingsStopPostReturnMappingsResponseDelayDistribution
	{
		
		[System.Runtime.Serialization.DataMember(Name="median")]
		public System.Nullable<System.Int32> Median { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sigma")]
		public System.Nullable<System.Double> Sigma { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public StubMappingResponseDelayDistributionType Type { get; set; }
	}
	
	public class @__adminRecordingsStopPostReturnMeta
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public int Total { get; set; }
	}
	
	public class @__adminRequestsCountPostPostBody
	{
		
		/// <summary>
		/// Pre-emptive basic auth credentials to match against
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basicAuthCredentials")]
		public @__adminRequestsCountPostPostBodyBasicAuthCredentials BasicAuthCredentials { get; set; }
		
		/// <summary>
		/// Request body patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bodyPatterns")]
		public string[] BodyPatterns { get; set; }
		
		/// <summary>
		/// Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookies")]
		public string Cookies { get; set; }
		
		/// <summary>
		/// Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public string Headers { get; set; }
		
		/// <summary>
		/// The HTTP request method e.g. GET
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Query parameter patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryParameters")]
		public string QueryParameters { get; set; }
		
		/// <summary>
		/// The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPath")]
		public string UrlPath { get; set; }
		
		/// <summary>
		/// The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPathPattern")]
		public string UrlPathPattern { get; set; }
		
		/// <summary>
		/// The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPattern")]
		public string UrlPattern { get; set; }
	}
	
	public class @__adminRequestsCountPostPostBodyBasicAuthCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	public class @__adminRequestsCountPostReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	public class @__adminRequestsFindPostPostBody
	{
		
		/// <summary>
		/// Pre-emptive basic auth credentials to match against
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basicAuthCredentials")]
		public @__adminRequestsFindPostPostBodyBasicAuthCredentials BasicAuthCredentials { get; set; }
		
		/// <summary>
		/// Request body patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bodyPatterns")]
		public string[] BodyPatterns { get; set; }
		
		/// <summary>
		/// Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookies")]
		public string Cookies { get; set; }
		
		/// <summary>
		/// Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public string Headers { get; set; }
		
		/// <summary>
		/// The HTTP request method e.g. GET
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Query parameter patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryParameters")]
		public string QueryParameters { get; set; }
		
		/// <summary>
		/// The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPath")]
		public string UrlPath { get; set; }
		
		/// <summary>
		/// The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPathPattern")]
		public string UrlPathPattern { get; set; }
		
		/// <summary>
		/// The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPattern")]
		public string UrlPattern { get; set; }
	}
	
	public class @__adminRequestsFindPostPostBodyBasicAuthCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	public class @__adminRequestsRemovePostPostBody
	{
		
		/// <summary>
		/// Pre-emptive basic auth credentials to match against
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basicAuthCredentials")]
		public @__adminRequestsRemovePostPostBodyBasicAuthCredentials BasicAuthCredentials { get; set; }
		
		/// <summary>
		/// Request body patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bodyPatterns")]
		public string[] BodyPatterns { get; set; }
		
		/// <summary>
		/// Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookies")]
		public string Cookies { get; set; }
		
		/// <summary>
		/// Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public string Headers { get; set; }
		
		/// <summary>
		/// The HTTP request method e.g. GET
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Query parameter patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryParameters")]
		public string QueryParameters { get; set; }
		
		/// <summary>
		/// The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPath")]
		public string UrlPath { get; set; }
		
		/// <summary>
		/// The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPathPattern")]
		public string UrlPathPattern { get; set; }
		
		/// <summary>
		/// The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPattern")]
		public string UrlPattern { get; set; }
	}
	
	public class @__adminRequestsRemovePostPostBodyBasicAuthCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	public class @__adminRequestsRemove_by_metadataPostPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="caseInsensitive")]
		public System.Nullable<System.Boolean> CaseInsensitive { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="equalTo")]
		public bool EqualTo { get; set; }
	}
	
	public class @__adminRequestsUnmatchedNear_missesGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="nearMisses")]
		public @__adminRequestsUnmatchedNear_missesGetReturnNearMisses[] @__adminRequestsUnmatchedNear_missesGetReturnNearMisses { get; set; }
	}
	
	public class @__adminRequestsUnmatchedNear_missesGetReturnNearMisses
	{
		
		/// <summary>
		/// The full URL to match against
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="absoluteUrl")]
		public string AbsoluteUrl { get; set; }
		
		/// <summary>
		/// Body string to match against
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookies")]
		public string Cookies { get; set; }
		
		/// <summary>
		/// Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public string Headers { get; set; }
		
		/// <summary>
		/// The HTTP request method
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// The path and query to match exactly against
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class @__adminScenariosGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="scenarios")]
		public @__adminScenariosGetReturnScenarios[] @__adminScenariosGetReturnScenarios { get; set; }
	}
	
	public class @__adminScenariosGetReturnScenarios
	{
		
		/// <summary>
		/// The scenario ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The scenario name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="possibleStates")]
		public string[] PossibleStates { get; set; }
		
		/// <summary>
		/// The current state of this scenario
		/// </summary>
		[System.ComponentModel.DefaultValue("Started")]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; } = "Started";
	}
	
	public class @__adminSettingsPostPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="median")]
		public System.Nullable<System.Int32> Median { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sigma")]
		public System.Nullable<System.Double> Sigma { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public StubMappingResponseDelayDistributionType Type { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
