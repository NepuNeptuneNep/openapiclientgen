//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Accelerator describes Compute Engine accelerators to be attached to the VM.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Accelerator
	{
		
		/// <summary>
		/// The number of accelerators of this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public string Count { get; set; }
		
		/// <summary>
		/// Optional. The NVIDIA GPU driver version that should be installed for this type. You can define the specific driver version such as "470.103.01", following the driver version requirements in https://cloud.google.com/compute/docs/gpus/install-drivers-gpu#minimum-driver. Batch will install the specific accelerator driver if qualified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driverVersion")]
		public string DriverVersion { get; set; }
		
		/// <summary>
		/// Deprecated: please use instances[0].install_gpu_drivers instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installGpuDrivers")]
		public System.Nullable<System.Boolean> InstallGpuDrivers { get; set; }
		
		/// <summary>
		/// The accelerator type. For example, "nvidia-tesla-t4". See `gcloud compute accelerator-types list`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Conditions for actions to deal with task failures.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActionCondition
	{
		
		/// <summary>
		/// Exit codes of a task execution. If there are more than 1 exit codes, when task executes with any of the exit code in the list, the condition is met and the action will be executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exitCodes")]
		public int[] ExitCodes { get; set; }
	}
	
	/// <summary>
	/// Container runnable representation on the agent side.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AgentContainer
	{
		
		/// <summary>
		/// Overrides the `CMD` specified in the container. If there is an ENTRYPOINT (either in the container image or with the entrypoint field below) then commands are appended as arguments to the ENTRYPOINT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commands")]
		public string[] Commands { get; set; }
		
		/// <summary>
		/// Overrides the `ENTRYPOINT` specified in the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entrypoint")]
		public string Entrypoint { get; set; }
		
		/// <summary>
		/// The URI to pull the container image from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUri")]
		public string ImageUri { get; set; }
		
		/// <summary>
		/// Arbitrary additional options to include in the "docker run" command when running this container, e.g. "--network host".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string Options { get; set; }
		
		/// <summary>
		/// Volumes to mount (bind mount) from the host machine files or directories into the container, formatted to match docker run's --volume option, e.g. /foo:/bar, or /foo:/bar:ro
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumes")]
		public string[] Volumes { get; set; }
	}
	
	/// <summary>
	/// AgentEnvironment is the Environment representation between Agent and CLH communication. The environment is used in both task level and agent level.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AgentEnvironment
	{
		
		/// <summary>
		/// AgentKMSEnvMap contains the encrypted key/value pair to be used in the environment on the Agent side.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptedVariables")]
		public AgentKMSEnvMap EncryptedVariables { get; set; }
		
		/// <summary>
		/// A map of environment variable names to Secret Manager secret names. The VM will access the named secrets to set the value of each environment variable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretVariables")]
		public System.Collections.Generic.Dictionary<string, string> SecretVariables { get; set; }
		
		/// <summary>
		/// A map of environment variable names to values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variables")]
		public System.Collections.Generic.Dictionary<string, string> Variables { get; set; }
	}
	
	/// <summary>
	/// AgentKMSEnvMap contains the encrypted key/value pair to be used in the environment on the Agent side.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AgentKMSEnvMap
	{
		
		/// <summary>
		/// The value of the cipherText response from the `encrypt` method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cipherText")]
		public string CipherText { get; set; }
		
		/// <summary>
		/// The name of the KMS key that will be used to decrypt the cipher text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyName")]
		public string KeyName { get; set; }
	}
	
	/// <summary>
	/// VM Agent Info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AgentInfo
	{
		
		/// <summary>
		/// Optional. The assigned Job ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		/// <summary>
		/// When the AgentInfo is generated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportTime")]
		public string ReportTime { get; set; }
		
		/// <summary>
		/// Agent state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<AgentInfoState> State { get; set; }
		
		/// <summary>
		/// The assigned task group ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskGroupId")]
		public string TaskGroupId { get; set; }
		
		/// <summary>
		/// Task Info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tasks")]
		public AgentTaskInfo[] Tasks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AgentInfoState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENT_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENT_STARTING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENT_RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENT_STOPPED = 3,
	}
	
	/// <summary>
	/// Task Info
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AgentTaskInfo
	{
		
		/// <summary>
		/// The highest index of a runnable started by the agent for this task. The runnables are indexed from 1. Value 0 is undefined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runnable")]
		public string Runnable { get; set; }
		
		/// <summary>
		/// ID of the Task
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskId")]
		public string TaskId { get; set; }
		
		/// <summary>
		/// Status of a task
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskStatus")]
		public TaskStatus TaskStatus { get; set; }
	}
	
	/// <summary>
	/// Status of a task
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TaskStatus
	{
		
		/// <summary>
		/// Task state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<TaskStatusState> State { get; set; }
		
		/// <summary>
		/// Detailed info about why the state is reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusEvents")]
		public StatusEvent[] StatusEvents { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TaskStatusState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSIGNED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNEXECUTED = 6,
	}
	
	/// <summary>
	/// Status event
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StatusEvent
	{
		
		/// <summary>
		/// Description of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The time this event occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventTime")]
		public string EventTime { get; set; }
		
		/// <summary>
		/// This Task Execution field includes detail information for task execution procedures, based on StatusEvent types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskExecution")]
		public TaskExecution TaskExecution { get; set; }
		
		/// <summary>
		/// Task State
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskState")]
		public TaskStatusState TaskState { get; set; }
		
		/// <summary>
		/// Type of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// This Task Execution field includes detail information for task execution procedures, based on StatusEvent types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TaskExecution
	{
		
		/// <summary>
		/// When task is completed as the status of FAILED or SUCCEEDED, exit code is for one task execution result, default is 0 as success.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exitCode")]
		public System.Nullable<System.Int32> ExitCode { get; set; }
	}
	
	/// <summary>
	/// VM Agent Metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AgentMetadata
	{
		
		/// <summary>
		/// When the VM agent started. Use agent_startup_time instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public string CreationTime { get; set; }
		
		/// <summary>
		/// Full name of the entity that created this vm. For MIG, this path is: projects/{project}/regions/{region}/InstanceGroupManagers/{igm} The value is retrieved from the vm metadata key of "created-by".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creator")]
		public string Creator { get; set; }
		
		/// <summary>
		/// image version for the VM that this agent is installed on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageVersion")]
		public string ImageVersion { get; set; }
		
		/// <summary>
		/// GCP instance name (go/instance-name).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		/// <summary>
		/// GCP instance ID (go/instance-id).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceId")]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// If the GCP instance has received preemption notice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instancePreemptionNoticeReceived")]
		public System.Nullable<System.Boolean> InstancePreemptionNoticeReceived { get; set; }
		
		/// <summary>
		/// parsed contents of /etc/os-release
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osRelease")]
		public System.Collections.Generic.Dictionary<string, string> OsRelease { get; set; }
		
		/// <summary>
		/// agent binary version running on VM
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		/// <summary>
		/// Agent zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	/// <summary>
	/// Script runnable representation on the agent side.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AgentScript
	{
		
		/// <summary>
		/// Script file path on the host VM. To specify an interpreter, please add a `#!`(also known as [shebang line](https://en.wikipedia.org/wiki/Shebang_(Unix))) as the first line of the file.(For example, to execute the script using bash, `#!/bin/bash` should be the first line of the file. To execute the script using`Python3`, `#!/usr/bin/env python3` should be the first line of the file.) Otherwise, the file will by default be excuted by `/bin/sh`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Shell script text. To specify an interpreter, please add a `#!\n` at the beginning of the text.(For example, to execute the script using bash, `#!/bin/bash\n` should be added. To execute the script using`Python3`, `#!/usr/bin/env python3\n` should be added.) Otherwise, the script will by default be excuted by `/bin/sh`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	/// <summary>
	/// TODO(b/182501497) The message needs to be redefined when the Agent API server updates data in storage per the backend design.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AgentTask
	{
		
		/// <summary>
		/// AgentTaskSpec is the user's TaskSpec representation between Agent and CLH communication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agentTaskSpec")]
		public AgentTaskSpec AgentTaskSpec { get; set; }
		
		/// <summary>
		/// The intended state of the task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intendedState")]
		public System.Nullable<AgentTaskIntendedState> IntendedState { get; set; }
		
		/// <summary>
		/// The highest barrier reached by all tasks in the task's TaskGroup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reachedBarrier")]
		public string ReachedBarrier { get; set; }
		
		/// <summary>
		/// Spec of a task
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public TaskSpec Spec { get; set; }
		
		/// <summary>
		/// Status of a task
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public TaskStatus Status { get; set; }
		
		/// <summary>
		/// Task name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="task")]
		public string Task { get; set; }
		
		/// <summary>
		/// TaskSource represents the source of the task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskSource")]
		public System.Nullable<AgentTaskTaskSource> TaskSource { get; set; }
	}
	
	/// <summary>
	/// AgentTaskSpec is the user's TaskSpec representation between Agent and CLH communication.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AgentTaskSpec
	{
		
		/// <summary>
		/// AgentEnvironment is the Environment representation between Agent and CLH communication. The environment is used in both task level and agent level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public AgentEnvironment Environment { get; set; }
		
		/// <summary>
		/// Maximum duration the task should run. The task will be killed and marked as FAILED if over this limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxRunDuration")]
		public string MaxRunDuration { get; set; }
		
		/// <summary>
		/// AgentTaskRunnable is runanbles that will be executed on the agent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runnables")]
		public AgentTaskRunnable[] Runnables { get; set; }
		
		/// <summary>
		/// AgentTaskUserAccount contains the information of a POSIX account on the guest os which is used to execute the runnables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAccount")]
		public AgentTaskUserAccount UserAccount { get; set; }
	}
	
	/// <summary>
	/// AgentTaskRunnable is the Runnable representation between Agent and CLH communication.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AgentTaskRunnable
	{
		
		/// <summary>
		/// By default, after a Runnable fails, no further Runnable are executed. This flag indicates that this Runnable must be run even if the Task has already failed. This is useful for Runnables that copy output files off of the VM or for debugging. The always_run flag does not override the Task's overall max_run_duration. If the max_run_duration has expired then no further Runnables will execute, not even always_run Runnables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alwaysRun")]
		public System.Nullable<System.Boolean> AlwaysRun { get; set; }
		
		/// <summary>
		/// This flag allows a Runnable to continue running in the background while the Task executes subsequent Runnables. This is useful to provide services to other Runnables (or to provide debugging support tools like SSH servers).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="background")]
		public System.Nullable<System.Boolean> Background { get; set; }
		
		/// <summary>
		/// Container runnable representation on the agent side.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="container")]
		public AgentContainer Container { get; set; }
		
		/// <summary>
		/// AgentEnvironment is the Environment representation between Agent and CLH communication. The environment is used in both task level and agent level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public AgentEnvironment Environment { get; set; }
		
		/// <summary>
		/// Normally, a non-zero exit status causes the Task to fail. This flag allows execution of other Runnables to continue instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoreExitStatus")]
		public System.Nullable<System.Boolean> IgnoreExitStatus { get; set; }
		
		/// <summary>
		/// Script runnable representation on the agent side.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="script")]
		public AgentScript Script { get; set; }
		
		/// <summary>
		/// Timeout for this Runnable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		public string Timeout { get; set; }
	}
	
	/// <summary>
	/// AgentTaskUserAccount contains the information of a POSIX account on the guest os which is used to execute the runnables.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AgentTaskUserAccount
	{
		
		/// <summary>
		/// gid id an unique identifier of the POSIX account group corresponding to the user account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gid")]
		public string Gid { get; set; }
		
		/// <summary>
		/// uid is an unique identifier of the POSIX account corresponding to the user account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AgentTaskIntendedState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTENDED_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSIGNED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 3,
	}
	
	/// <summary>
	/// Spec of a task
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TaskSpec
	{
		
		/// <summary>
		/// Compute resource requirements. ComputeResource defines the amount of resources required for each task. Make sure your tasks have enough resources to successfully run. If you also define the types of resources for a job to use with the [InstancePolicyOrTemplate](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicyortemplate) field, make sure both fields are compatible with each other.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computeResource")]
		public ComputeResource ComputeResource { get; set; }
		
		/// <summary>
		/// An Environment describes a collection of environment variables to set when executing Tasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public Environment Environment { get; set; }
		
		/// <summary>
		/// Deprecated: please use environment(non-plural) instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environments")]
		public System.Collections.Generic.Dictionary<string, string> Environments { get; set; }
		
		/// <summary>
		/// Lifecycle management schema when any task in a task group is failed. Currently we only support one lifecycle policy. When the lifecycle policy condition is met, the action in the policy will execute. If task execution result does not meet with the defined lifecycle policy, we consider it as the default policy. Default policy means if the exit code is 0, exit task. If task ends with non-zero exit code, retry the task with max_retry_count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lifecyclePolicies")]
		public LifecyclePolicy[] LifecyclePolicies { get; set; }
		
		/// <summary>
		/// Maximum number of retries on failures. The default, 0, which means never retry. The valid value range is [0, 10].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxRetryCount")]
		public System.Nullable<System.Int32> MaxRetryCount { get; set; }
		
		/// <summary>
		/// Maximum duration the task should run. The task will be killed and marked as FAILED if over this limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxRunDuration")]
		public string MaxRunDuration { get; set; }
		
		/// <summary>
		/// The sequence of scripts or containers to run for this Task. Each Task using this TaskSpec executes its list of runnables in order. The Task succeeds if all of its runnables either exit with a zero status or any that exit with a non-zero status have the ignore_exit_status flag. Background runnables are killed automatically (if they have not already exited) a short time after all foreground runnables have completed. Even though this is likely to result in a non-zero exit status for the background runnable, these automatic kills are not treated as Task failures.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runnables")]
		public Runnable[] Runnables { get; set; }
		
		/// <summary>
		/// Volumes to mount before running Tasks using this TaskSpec.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumes")]
		public Volume[] Volumes { get; set; }
	}
	
	/// <summary>
	/// Compute resource requirements. ComputeResource defines the amount of resources required for each task. Make sure your tasks have enough resources to successfully run. If you also define the types of resources for a job to use with the [InstancePolicyOrTemplate](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicyortemplate) field, make sure both fields are compatible with each other.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComputeResource
	{
		
		/// <summary>
		/// Extra boot disk size in MiB for each task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootDiskMib")]
		public string BootDiskMib { get; set; }
		
		/// <summary>
		/// The milliCPU count. `cpuMilli` defines the amount of CPU resources per task in milliCPU units. For example, `1000` corresponds to 1 vCPU per task. If undefined, the default value is `2000`. If you also define the VM's machine type using the `machineType` in [InstancePolicy](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicy) field or inside the `instanceTemplate` in the [InstancePolicyOrTemplate](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicyortemplate) field, make sure the CPU resources for both fields are compatible with each other and with how many tasks you want to allow to run on the same VM at the same time. For example, if you specify the `n2-standard-2` machine type, which has 2 vCPUs each, you are recommended to set `cpuMilli` no more than `2000`, or you are recommended to run two tasks on the same VM if you set `cpuMilli` to `1000` or less.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpuMilli")]
		public string CpuMilli { get; set; }
		
		/// <summary>
		/// Memory in MiB. `memoryMib` defines the amount of memory per task in MiB units. If undefined, the default value is `2000`. If you also define the VM's machine type using the `machineType` in [InstancePolicy](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicy) field or inside the `instanceTemplate` in the [InstancePolicyOrTemplate](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicyortemplate) field, make sure the memory resources for both fields are compatible with each other and with how many tasks you want to allow to run on the same VM at the same time. For example, if you specify the `n2-standard-2` machine type, which has 8 GiB each, you are recommended to set `memoryMib` to no more than `8192`, or you are recommended to run two tasks on the same VM if you set `memoryMib` to `4096` or less.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memoryMib")]
		public string MemoryMib { get; set; }
	}
	
	/// <summary>
	/// An Environment describes a collection of environment variables to set when executing Tasks.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Environment
	{
		
		[System.Runtime.Serialization.DataMember(Name="encryptedVariables")]
		public KMSEnvMap EncryptedVariables { get; set; }
		
		/// <summary>
		/// A map of environment variable names to Secret Manager secret names. The VM will access the named secrets to set the value of each environment variable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretVariables")]
		public System.Collections.Generic.Dictionary<string, string> SecretVariables { get; set; }
		
		/// <summary>
		/// A map of environment variable names to values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variables")]
		public System.Collections.Generic.Dictionary<string, string> Variables { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KMSEnvMap
	{
		
		/// <summary>
		/// The value of the cipherText response from the `encrypt` method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cipherText")]
		public string CipherText { get; set; }
		
		/// <summary>
		/// The name of the KMS key that will be used to decrypt the cipher text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyName")]
		public string KeyName { get; set; }
	}
	
	/// <summary>
	/// LifecyclePolicy describes how to deal with task failures based on different conditions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LifecyclePolicy
	{
		
		/// <summary>
		/// Action to execute when ActionCondition is true. When RETRY_TASK is specified, we will retry failed tasks if we notice any exit code match and fail tasks if no match is found. Likewise, when FAIL_TASK is specified, we will fail tasks if we notice any exit code match and retry tasks if no match is found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public System.Nullable<LifecyclePolicyAction> Action { get; set; }
		
		/// <summary>
		/// Conditions for actions to deal with task failures.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionCondition")]
		public ActionCondition ActionCondition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LifecyclePolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETRY_TASK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAIL_TASK = 2,
	}
	
	/// <summary>
	/// Runnable describes instructions for executing a specific script or container as part of a Task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Runnable
	{
		
		/// <summary>
		/// By default, after a Runnable fails, no further Runnable are executed. This flag indicates that this Runnable must be run even if the Task has already failed. This is useful for Runnables that copy output files off of the VM or for debugging. The always_run flag does not override the Task's overall max_run_duration. If the max_run_duration has expired then no further Runnables will execute, not even always_run Runnables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alwaysRun")]
		public System.Nullable<System.Boolean> AlwaysRun { get; set; }
		
		/// <summary>
		/// This flag allows a Runnable to continue running in the background while the Task executes subsequent Runnables. This is useful to provide services to other Runnables (or to provide debugging support tools like SSH servers).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="background")]
		public System.Nullable<System.Boolean> Background { get; set; }
		
		/// <summary>
		/// Barrier runnable blocks until all tasks in a taskgroup reach it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="barrier")]
		public Barrier Barrier { get; set; }
		
		/// <summary>
		/// Container runnable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="container")]
		public Container Container { get; set; }
		
		/// <summary>
		/// Optional. DisplayName is an optional field that can be provided by the caller. If provided, it will be used in logs and other outputs to identify the script, making it easier for users to understand the logs. If not provided the index of the runnable will be used for outputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// An Environment describes a collection of environment variables to set when executing Tasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public Environment Environment { get; set; }
		
		/// <summary>
		/// Normally, a non-zero exit status causes the Task to fail. This flag allows execution of other Runnables to continue instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoreExitStatus")]
		public System.Nullable<System.Boolean> IgnoreExitStatus { get; set; }
		
		/// <summary>
		/// Labels for this Runnable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Script runnable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="script")]
		public Script Script { get; set; }
		
		/// <summary>
		/// Timeout for this Runnable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		public string Timeout { get; set; }
	}
	
	/// <summary>
	/// Barrier runnable blocks until all tasks in a taskgroup reach it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Barrier
	{
		
		/// <summary>
		/// Barriers are identified by their index in runnable list. Names are not required, but if present should be an identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Container runnable.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Container
	{
		
		/// <summary>
		/// If set to true, external network access to and from container will be blocked, containers that are with block_external_network as true can still communicate with each other, network cannot be specified in the `container.options` field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blockExternalNetwork")]
		public System.Nullable<System.Boolean> BlockExternalNetwork { get; set; }
		
		/// <summary>
		/// Overrides the `CMD` specified in the container. If there is an ENTRYPOINT (either in the container image or with the entrypoint field below) then commands are appended as arguments to the ENTRYPOINT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commands")]
		public string[] Commands { get; set; }
		
		/// <summary>
		/// Optional. If set to true, container will run with Image streaming. The container runtime will be changed to containerd instead of docker. Currently, only imageUri, commands, entrypoint and volumes are supported and any other fields will be ignored. Please refer [here](https://github.com/GoogleCloudPlatform/batch-samples/tree/main/api-samples/image-streaming) for the feature requirements and limitations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableImageStreaming")]
		public System.Nullable<System.Boolean> EnableImageStreaming { get; set; }
		
		/// <summary>
		/// Overrides the `ENTRYPOINT` specified in the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entrypoint")]
		public string Entrypoint { get; set; }
		
		/// <summary>
		/// The URI to pull the container image from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUri")]
		public string ImageUri { get; set; }
		
		/// <summary>
		/// Arbitrary additional options to include in the "docker run" command when running this container, e.g. "--network host".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string Options { get; set; }
		
		/// <summary>
		/// Optional password for logging in to a docker registry. If password matches `projects/*/secrets/*/versions/*` then Batch will read the password from the Secret Manager;
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Optional username for logging in to a docker registry. If username matches `projects/*/secrets/*/versions/*` then Batch will read the username from the Secret Manager.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
		
		/// <summary>
		/// Volumes to mount (bind mount) from the host machine files or directories into the container, formatted to match docker run's --volume option, e.g. /foo:/bar, or /foo:/bar:ro If the `TaskSpec.Volumes` field is specified but this field is not, Batch will mount each volume from the host machine to the container with the same mount path by default. In this case, the default mount option for containers will be read-only (ro) for existing persistent disks and read-write (rw) for other volume types, regardless of the original mount options specified in `TaskSpec.Volumes`. If you need different mount settings, you can explicitly configure them in this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumes")]
		public string[] Volumes { get; set; }
	}
	
	/// <summary>
	/// Script runnable.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Script
	{
		
		/// <summary>
		/// Script file path on the host VM. To specify an interpreter, please add a `#!`(also known as [shebang line](https://en.wikipedia.org/wiki/Shebang_(Unix))) as the first line of the file.(For example, to execute the script using bash, `#!/bin/bash` should be the first line of the file. To execute the script using`Python3`, `#!/usr/bin/env python3` should be the first line of the file.) Otherwise, the file will by default be excuted by `/bin/sh`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Shell script text. To specify an interpreter, please add a `#!\n` at the beginning of the text.(For example, to execute the script using bash, `#!/bin/bash\n` should be added. To execute the script using`Python3`, `#!/usr/bin/env python3\n` should be added.) Otherwise, the script will by default be excuted by `/bin/sh`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	/// <summary>
	/// Volume describes a volume and parameters for it to be mounted to a VM.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Volume
	{
		
		/// <summary>
		/// Device name of an attached disk volume, which should align with a device_name specified by job.allocation_policy.instances[0].policy.disks[i].device_name or defined by the given instance template in job.allocation_policy.instances[0].instance_template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceName")]
		public string DeviceName { get; set; }
		
		/// <summary>
		/// Represents a Google Cloud Storage volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcs")]
		public GCS Gcs { get; set; }
		
		/// <summary>
		/// For Google Cloud Storage (GCS), mount options are the options supported by the gcsfuse tool (https://github.com/GoogleCloudPlatform/gcsfuse). For existing persistent disks, mount options provided by the mount command (https://man7.org/linux/man-pages/man8/mount.8.html) except writing are supported. This is due to restrictions of multi-writer mode (https://cloud.google.com/compute/docs/disks/sharing-disks-between-vms). For other attached disks and Network File System (NFS), mount options are these supported by the mount command (https://man7.org/linux/man-pages/man8/mount.8.html).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mountOptions")]
		public string[] MountOptions { get; set; }
		
		/// <summary>
		/// The mount path for the volume, e.g. /mnt/disks/share.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mountPath")]
		public string MountPath { get; set; }
		
		/// <summary>
		/// Represents an NFS volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nfs")]
		public NFS Nfs { get; set; }
	}
	
	/// <summary>
	/// Represents a Google Cloud Storage volume.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GCS
	{
		
		/// <summary>
		/// Remote path, either a bucket name or a subdirectory of a bucket, e.g.: bucket_name, bucket_name/subdirectory/
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remotePath")]
		public string RemotePath { get; set; }
	}
	
	/// <summary>
	/// Represents an NFS volume.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NFS
	{
		
		/// <summary>
		/// Remote source path exported from the NFS, e.g., "/share".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remotePath")]
		public string RemotePath { get; set; }
		
		/// <summary>
		/// The IP address of the NFS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="server")]
		public string Server { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AgentTaskTaskSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TASK_SOURCE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BATCH_INTERNAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER = 2,
	}
	
	/// <summary>
	/// VM timing information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AgentTimingInfo
	{
		
		/// <summary>
		/// Agent startup time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agentStartupTime")]
		public string AgentStartupTime { get; set; }
		
		/// <summary>
		/// Boot timestamp of the VM OS
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootTime")]
		public string BootTime { get; set; }
		
		/// <summary>
		/// Startup time of the Batch VM script.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scriptStartupTime")]
		public string ScriptStartupTime { get; set; }
	}
	
	/// <summary>
	/// A Job's resource allocation policy describes when, where, and how compute resources should be allocated for the Job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AllocationPolicy
	{
		
		/// <summary>
		/// Describe instances that can be created by this AllocationPolicy. Only instances[0] is supported now.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instances")]
		public InstancePolicyOrTemplate[] Instances { get; set; }
		
		/// <summary>
		/// Labels applied to all VM instances and other resources created by AllocationPolicy. Labels could be user provided or system generated. You can assign up to 64 labels. [Google Compute Engine label restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) apply. Label names that start with "goog-" or "google-" are reserved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public LocationPolicy Location { get; set; }
		
		/// <summary>
		/// NetworkPolicy describes VM instance network configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="network")]
		public NetworkPolicy Network { get; set; }
		
		/// <summary>
		/// PlacementPolicy describes a group placement policy for the VMs controlled by this AllocationPolicy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placement")]
		public PlacementPolicy Placement { get; set; }
		
		/// <summary>
		/// Carries information about a Google Cloud service account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccount")]
		public ServiceAccount ServiceAccount { get; set; }
		
		/// <summary>
		/// Optional. Tags applied to the VM instances. The tags identify valid sources or targets for network firewalls. Each tag must be 1-63 characters long, and comply with [RFC1035](https://www.ietf.org/rfc/rfc1035.txt).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
	}
	
	/// <summary>
	/// InstancePolicyOrTemplate lets you define the type of resources to use for this job either with an InstancePolicy or an instance template. If undefined, Batch picks the type of VM to use and doesn't include optional VM resources such as GPUs and extra disks.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstancePolicyOrTemplate
	{
		
		/// <summary>
		/// Set this field true if users want Batch to help fetch drivers from a third party location and install them for GPUs specified in policy.accelerators or instance_template on their behalf. Default is false. For Container-Optimized Image cases, Batch will install the accelerator driver following milestones of https://cloud.google.com/container-optimized-os/docs/release-notes. For non Container-Optimized Image cases, following https://github.com/GoogleCloudPlatform/compute-gpu-installation/blob/main/linux/install_gpu_driver.py.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installGpuDrivers")]
		public System.Nullable<System.Boolean> InstallGpuDrivers { get; set; }
		
		/// <summary>
		/// Name of an instance template used to create VMs. Named the field as 'instance_template' instead of 'template' to avoid c++ keyword conflict.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceTemplate")]
		public string InstanceTemplate { get; set; }
		
		/// <summary>
		/// InstancePolicy describes an instance type and resources attached to each VM created by this InstancePolicy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public InstancePolicy Policy { get; set; }
	}
	
	/// <summary>
	/// InstancePolicy describes an instance type and resources attached to each VM created by this InstancePolicy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstancePolicy
	{
		
		/// <summary>
		/// The accelerators attached to each VM instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accelerators")]
		public Accelerator[] Accelerators { get; set; }
		
		/// <summary>
		/// A new persistent disk or a local ssd. A VM can only have one local SSD setting but multiple local SSD partitions. See https://cloud.google.com/compute/docs/disks#pdspecs and https://cloud.google.com/compute/docs/disks#localssds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootDisk")]
		public Disk BootDisk { get; set; }
		
		/// <summary>
		/// Non-boot disks to be attached for each VM created by this InstancePolicy. New disks will be deleted when the VM is deleted. A non-boot disk is a disk that can be of a device with a file system or a raw storage drive that is not ready for data storage and accessing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disks")]
		public AttachedDisk[] Disks { get; set; }
		
		/// <summary>
		/// The Compute Engine machine type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineType")]
		public string MachineType { get; set; }
		
		/// <summary>
		/// The minimum CPU platform. See https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minCpuPlatform")]
		public string MinCpuPlatform { get; set; }
		
		/// <summary>
		/// The provisioning model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningModel")]
		public System.Nullable<InstancePolicyProvisioningModel> ProvisioningModel { get; set; }
		
		/// <summary>
		/// Optional. If specified, VMs will consume only the specified reservation. If not specified (default), VMs will consume any applicable reservation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservation")]
		public string Reservation { get; set; }
	}
	
	/// <summary>
	/// A new persistent disk or a local ssd. A VM can only have one local SSD setting but multiple local SSD partitions. See https://cloud.google.com/compute/docs/disks#pdspecs and https://cloud.google.com/compute/docs/disks#localssds.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Disk
	{
		
		/// <summary>
		/// Local SSDs are available through both "SCSI" and "NVMe" interfaces. If not indicated, "NVMe" will be the default one for local ssds. This field is ignored for persistent disks as the interface is chosen automatically. See https://cloud.google.com/compute/docs/disks/persistent-disks#choose_an_interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskInterface")]
		public string DiskInterface { get; set; }
		
		/// <summary>
		/// URL for a VM image to use as the data source for this disk. For example, the following are all valid URLs: * Specify the image by its family name: projects/{project}/global/images/family/{image_family} * Specify the image version: projects/{project}/global/images/{image_version} You can also use Batch customized image in short names. The following image values are supported for a boot disk: * `batch-debian`: use Batch Debian images. * `batch-centos`: use Batch CentOS images. * `batch-cos`: use Batch Container-Optimized images. * `batch-hpc-centos`: use Batch HPC CentOS images. * `batch-hpc-rocky`: use Batch HPC Rocky Linux images.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		/// <summary>
		/// Disk size in GB. **Non-Boot Disk**: If the `type` specifies a persistent disk, this field is ignored if `data_source` is set as `image` or `snapshot`. If the `type` specifies a local SSD, this field should be a multiple of 375 GB, otherwise, the final size will be the next greater multiple of 375 GB. **Boot Disk**: Batch will calculate the boot disk size based on source image and task requirements if you do not speicify the size. If both this field and the `boot_disk_mib` field in task spec's `compute_resource` are defined, Batch will only honor this field. Also, this field should be no smaller than the source disk's size when the `data_source` is set as `snapshot` or `image`. For example, if you set an image as the `data_source` field and the image's default disk size 30 GB, you can only use this field to make the disk larger or equal to 30 GB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeGb")]
		public string SizeGb { get; set; }
		
		/// <summary>
		/// Name of a snapshot used as the data source. Snapshot is not supported as boot disk now.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshot")]
		public string Snapshot { get; set; }
		
		/// <summary>
		/// Disk type as shown in `gcloud compute disk-types list`. For example, local SSD uses type "local-ssd". Persistent disks and boot disks use "pd-balanced", "pd-extreme", "pd-ssd" or "pd-standard".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A new or an existing persistent disk (PD) or a local ssd attached to a VM instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttachedDisk
	{
		
		/// <summary>
		/// Device name that the guest operating system will see. It is used by Runnable.volumes field to mount disks. So please specify the device_name if you want Batch to help mount the disk, and it should match the device_name field in volumes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceName")]
		public string DeviceName { get; set; }
		
		/// <summary>
		/// Name of an existing PD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="existingDisk")]
		public string ExistingDisk { get; set; }
		
		/// <summary>
		/// A new persistent disk or a local ssd. A VM can only have one local SSD setting but multiple local SSD partitions. See https://cloud.google.com/compute/docs/disks#pdspecs and https://cloud.google.com/compute/docs/disks#localssds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newDisk")]
		public Disk NewDisk { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InstancePolicyProvisioningModel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISIONING_MODEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPOT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREEMPTIBLE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LocationPolicy
	{
		
		/// <summary>
		/// A list of allowed location names represented by internal URLs. Each location can be a region or a zone. Only one region or multiple zones in one region is supported now. For example, ["regions/us-central1"] allow VMs in any zones in region us-central1. ["zones/us-central1-a", "zones/us-central1-c"] only allow VMs in zones us-central1-a and us-central1-c. All locations end up in different regions would cause errors. For example, ["regions/us-central1", "zones/us-central1-a", "zones/us-central1-b", "zones/us-west1-a"] contains 2 regions "us-central1" and "us-west1". An error is expected in this case.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedLocations")]
		public string[] AllowedLocations { get; set; }
	}
	
	/// <summary>
	/// NetworkPolicy describes VM instance network configurations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkPolicy
	{
		
		/// <summary>
		/// Network configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkInterfaces")]
		public NetworkInterface[] NetworkInterfaces { get; set; }
	}
	
	/// <summary>
	/// A network interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkInterface
	{
		
		/// <summary>
		/// The URL of an existing network resource. You can specify the network as a full or partial URL. For example, the following are all valid URLs: * https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network} * projects/{project}/global/networks/{network} * global/networks/{network}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="network")]
		public string Network { get; set; }
		
		/// <summary>
		/// Default is false (with an external IP address). Required if no external public IP address is attached to the VM. If no external public IP address, additional configuration is required to allow the VM to access Google Services. See https://cloud.google.com/vpc/docs/configure-private-google-access and https://cloud.google.com/nat/docs/gce-example#create-nat for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noExternalIpAddress")]
		public System.Nullable<System.Boolean> NoExternalIpAddress { get; set; }
		
		/// <summary>
		/// The URL of an existing subnetwork resource in the network. You can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs: * https://www.googleapis.com/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork} * projects/{project}/regions/{region}/subnetworks/{subnetwork} * regions/{region}/subnetworks/{subnetwork}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetwork")]
		public string Subnetwork { get; set; }
	}
	
	/// <summary>
	/// PlacementPolicy describes a group placement policy for the VMs controlled by this AllocationPolicy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlacementPolicy
	{
		
		/// <summary>
		/// UNSPECIFIED vs. COLLOCATED (default UNSPECIFIED). Use COLLOCATED when you want VMs to be located close to each other for low network latency between the VMs. No placement policy will be generated when collocation is UNSPECIFIED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collocation")]
		public string Collocation { get; set; }
		
		/// <summary>
		/// When specified, causes the job to fail if more than max_distance logical switches are required between VMs. Batch uses the most compact possible placement of VMs even when max_distance is not specified. An explicit max_distance makes that level of compactness a strict requirement. Not yet implemented
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDistance")]
		public string MaxDistance { get; set; }
	}
	
	/// <summary>
	/// Carries information about a Google Cloud service account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceAccount
	{
		
		/// <summary>
		/// Email address of the service account. If not specified, the default Compute Engine service account for the project will be used. If instance template is being used, the service account has to be specified in the instance template and it has to match the email field here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// List of scopes to be enabled for this service account on the VM, in addition to the cloud-platform API scope that will be added by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scopes")]
		public string[] Scopes { get; set; }
	}
	
	/// <summary>
	/// The request message for Operations.CancelOperation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelOperationRequest
	{
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// VM instance status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstanceStatus
	{
		
		/// <summary>
		/// A new persistent disk or a local ssd. A VM can only have one local SSD setting but multiple local SSD partitions. See https://cloud.google.com/compute/docs/disks#pdspecs and https://cloud.google.com/compute/docs/disks#localssds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootDisk")]
		public Disk BootDisk { get; set; }
		
		/// <summary>
		/// The Compute Engine machine type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineType")]
		public string MachineType { get; set; }
		
		/// <summary>
		/// The VM instance provisioning model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningModel")]
		public InstancePolicyProvisioningModel ProvisioningModel { get; set; }
		
		/// <summary>
		/// The max number of tasks can be assigned to this instance type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskPack")]
		public string TaskPack { get; set; }
	}
	
	/// <summary>
	/// The Cloud Batch Job description.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Job
	{
		
		/// <summary>
		/// A Job's resource allocation policy describes when, where, and how compute resources should be allocated for the Job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allocationPolicy")]
		public AllocationPolicy AllocationPolicy { get; set; }
		
		/// <summary>
		/// Output only. When the Job was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Labels for the Job. Labels could be user provided or system generated. For example, "labels": { "department": "finance", "environment": "test" } You can assign up to 64 labels. [Google Compute Engine label restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) apply. Label names that start with "goog-" or "google-" are reserved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// LogsPolicy describes how outputs from a Job's Tasks (stdout/stderr) will be preserved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logsPolicy")]
		public LogsPolicy LogsPolicy { get; set; }
		
		/// <summary>
		/// Output only. Job name. For example: "projects/123456/locations/us-central1/jobs/job01".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Notification configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notifications")]
		public JobNotification[] Notifications { get; set; }
		
		/// <summary>
		/// Priority of the Job. The valid value range is [0, 100). Default value is 0. Higher value indicates higher priority. A job with higher priority value is more likely to run earlier if all other requirements are satisfied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public string Priority { get; set; }
		
		/// <summary>
		/// Job status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobStatus Status { get; set; }
		
		/// <summary>
		/// Required. TaskGroups in the Job. Only one TaskGroup is supported now.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskGroups")]
		public TaskGroup[] TaskGroups { get; set; }
		
		/// <summary>
		/// Output only. A system generated unique ID (in UUID4 format) for the Job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
		
		/// <summary>
		/// Output only. The last time the Job was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// LogsPolicy describes how outputs from a Job's Tasks (stdout/stderr) will be preserved.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LogsPolicy
	{
		
		/// <summary>
		/// Where logs should be saved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public System.Nullable<LogsPolicyDestination> Destination { get; set; }
		
		/// <summary>
		/// The path to which logs are saved when the destination = PATH. This can be a local file path on the VM, or under the mount point of a Persistent Disk or Filestore, or a Cloud Storage path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logsPath")]
		public string LogsPath { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LogsPolicyDestination
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESTINATION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUD_LOGGING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PATH = 2,
	}
	
	/// <summary>
	/// Notification configurations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobNotification
	{
		
		/// <summary>
		/// Message details. Describe the conditions under which messages will be sent. If no attribute is defined, no message will be sent by default. One message should specify either the job or the task level attributes, but not both. For example, job level: JOB_STATE_CHANGED and/or a specified new_job_state; task level: TASK_STATE_CHANGED and/or a specified new_task_state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public Message Message { get; set; }
		
		/// <summary>
		/// The Pub/Sub topic where notifications like the job state changes will be published. The topic must exist in the same project as the job and billings will be charged to this project. If not specified, no Pub/Sub messages will be sent. Topic format: `projects/{project}/topics/{topic}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pubsubTopic")]
		public string PubsubTopic { get; set; }
	}
	
	/// <summary>
	/// Message details. Describe the conditions under which messages will be sent. If no attribute is defined, no message will be sent by default. One message should specify either the job or the task level attributes, but not both. For example, job level: JOB_STATE_CHANGED and/or a specified new_job_state; task level: TASK_STATE_CHANGED and/or a specified new_task_state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Message
	{
		
		/// <summary>
		/// The new job state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newJobState")]
		public System.Nullable<MessageNewJobState> NewJobState { get; set; }
		
		/// <summary>
		/// The new task state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newTaskState")]
		public TaskStatusState NewTaskState { get; set; }
		
		/// <summary>
		/// The message type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<MessageType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MessageNewJobState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETION_IN_PROGRESS = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MessageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_STATE_CHANGED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TASK_STATE_CHANGED = 2,
	}
	
	/// <summary>
	/// Job status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobStatus
	{
		
		/// <summary>
		/// The duration of time that the Job spent in status RUNNING.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runDuration")]
		public string RunDuration { get; set; }
		
		/// <summary>
		/// Job state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public MessageNewJobState State { get; set; }
		
		/// <summary>
		/// Job status events
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusEvents")]
		public StatusEvent[] StatusEvents { get; set; }
		
		/// <summary>
		/// Aggregated task status for each TaskGroup in the Job. The map key is TaskGroup ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskGroups")]
		public System.Collections.Generic.Dictionary<string, TaskGroupStatus> TaskGroups { get; set; }
	}
	
	/// <summary>
	/// Aggregated task status for a TaskGroup.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TaskGroupStatus
	{
		
		/// <summary>
		/// Count of task in each state in the TaskGroup. The map key is task state name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="counts")]
		public System.Collections.Generic.Dictionary<string, string> Counts { get; set; }
		
		/// <summary>
		/// Status of instances allocated for the TaskGroup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instances")]
		public InstanceStatus[] Instances { get; set; }
	}
	
	/// <summary>
	/// A TaskGroup defines one or more Tasks that all share the same TaskSpec.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TaskGroup
	{
		
		/// <summary>
		/// Output only. TaskGroup name. The system generates this field based on parent Job name. For example: "projects/123456/locations/us-west1/jobs/job01/taskGroups/group01".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Max number of tasks that can run in parallel. Default to min(task_count, parallel tasks per job limit). See: [Job Limits](https://cloud.google.com/batch/quotas#job_limits). Field parallelism must be 1 if the scheduling_policy is IN_ORDER.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parallelism")]
		public string Parallelism { get; set; }
		
		/// <summary>
		/// When true, Batch will configure SSH to allow passwordless login between VMs running the Batch tasks in the same TaskGroup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissiveSsh")]
		public System.Nullable<System.Boolean> PermissiveSsh { get; set; }
		
		/// <summary>
		/// When true, Batch will populate a file with a list of all VMs assigned to the TaskGroup and set the BATCH_HOSTS_FILE environment variable to the path of that file. Defaults to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requireHostsFile")]
		public System.Nullable<System.Boolean> RequireHostsFile { get; set; }
		
		/// <summary>
		/// Scheduling policy for Tasks in the TaskGroup. The default value is AS_SOON_AS_POSSIBLE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedulingPolicy")]
		public System.Nullable<TaskGroupSchedulingPolicy> SchedulingPolicy { get; set; }
		
		/// <summary>
		/// Number of Tasks in the TaskGroup. Default is 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskCount")]
		public string TaskCount { get; set; }
		
		/// <summary>
		/// Max number of tasks that can be run on a VM at the same time. If not specified, the system will decide a value based on available compute resources on a VM and task requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskCountPerNode")]
		public string TaskCountPerNode { get; set; }
		
		/// <summary>
		/// An array of environment variable mappings, which are passed to Tasks with matching indices. If task_environments is used then task_count should not be specified in the request (and will be ignored). Task count will be the length of task_environments. Tasks get a BATCH_TASK_INDEX and BATCH_TASK_COUNT environment variable, in addition to any environment variables set in task_environments, specifying the number of Tasks in the Task's parent TaskGroup, and the specific Task's index in the TaskGroup (0 through BATCH_TASK_COUNT - 1).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskEnvironments")]
		public Environment[] TaskEnvironments { get; set; }
		
		/// <summary>
		/// Spec of a task
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskSpec")]
		public TaskSpec TaskSpec { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TaskGroupSchedulingPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULING_POLICY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AS_SOON_AS_POSSIBLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_ORDER = 2,
	}
	
	/// <summary>
	/// ListJob Response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListJobsResponse
	{
		
		/// <summary>
		/// Jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobs")]
		public Job[] Jobs { get; set; }
		
		/// <summary>
		/// Next page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Locations that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// The response message for Locations.ListLocations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLocationsResponse
	{
		
		/// <summary>
		/// A list of locations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public Location[] Locations { get; set; }
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A resource that represents a Google Cloud location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Location
	{
		
		/// <summary>
		/// The friendly name for this location, typically a nearby city name. For example, "Tokyo".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The canonical id for this location. For example: `"us-east1"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		/// <summary>
		/// Service-specific metadata. For example the available capacity at the given location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The response message for Operations.ListOperations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListOperationsResponse
	{
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of operations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Operation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// ListTasks Response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTasksResponse
	{
		
		/// <summary>
		/// Next page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Tasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tasks")]
		public Task_[] Tasks { get; set; }
		
		/// <summary>
		/// Locations that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// A Cloud Batch task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Task_
	{
		
		/// <summary>
		/// Task name. The name is generated from the parent TaskGroup name and 'id' field. For example: "projects/123456/locations/us-west1/jobs/job01/taskGroups/group01/tasks/task01".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Status of a task
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public TaskStatus Status { get; set; }
	}
	
	/// <summary>
	/// Represents the metadata of the long-running operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OperationMetadata
	{
		
		/// <summary>
		/// Output only. API version used to start the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// Output only. The time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The time the operation finished running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedCancellation")]
		public System.Nullable<System.Boolean> RequestedCancellation { get; set; }
		
		/// <summary>
		/// Output only. Human-readable status of the operation, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Output only. Server-defined resource path for the target of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// Output only. Name of the verb executed by the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verb")]
		public string Verb { get; set; }
	}
	
	/// <summary>
	/// Request to report agent's state. The Request itself implies the agent is healthy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportAgentStateRequest
	{
		
		/// <summary>
		/// VM Agent Info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agentInfo")]
		public AgentInfo AgentInfo { get; set; }
		
		/// <summary>
		/// VM timing information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agentTimingInfo")]
		public AgentTimingInfo AgentTimingInfo { get; set; }
		
		/// <summary>
		/// VM Agent Metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public AgentMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// Response to ReportAgentStateRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportAgentStateResponse
	{
		
		/// <summary>
		/// Default report interval override
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultReportInterval")]
		public string DefaultReportInterval { get; set; }
		
		/// <summary>
		/// Minimum report interval override
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minReportInterval")]
		public string MinReportInterval { get; set; }
		
		/// <summary>
		/// Tasks assigned to the agent
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tasks")]
		public AgentTask[] Tasks { get; set; }
		
		/// <summary>
		/// If true, the cloud logging for batch agent will use batch.googleapis.com/Job as monitored resource for Batch job related logging.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useBatchMonitoredResource")]
		public System.Nullable<System.Boolean> UseBatchMonitoredResource { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
		/// Batch_projects_locations_operations_delete v1/{name}
		/// </summary>
		/// <param name="name">The name of the operation resource to be deleted.</param>
		/// <param name="reason">Optional. Reason for this deletion.</param>
		/// <param name="requestId">Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Batch_projects_locations_operations_deleteAsync(string name, string reason, string requestId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&reason=" + (reason==null? "" : System.Uri.EscapeDataString(reason))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
		/// Batch_projects_locations_operations_get v1/{name}
		/// </summary>
		/// <param name="name">The name of the operation resource.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Batch_projects_locations_operations_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists information about the supported locations for this service.
		/// Batch_projects_locations_list v1/{name}/locations
		/// </summary>
		/// <param name="name">The resource that owns the locations collection, if applicable.</param>
		/// <param name="filter">A filter to narrow down results to a preferred subset. The filtering language accepts strings like `"displayName=tokyo"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).</param>
		/// <param name="pageSize">The maximum number of results to return. If not set, the service selects a default.</param>
		/// <param name="pageToken">A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLocationsResponse> Batch_projects_locations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/locations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListLocationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
		/// Batch_projects_locations_operations_list v1/{name}/operations
		/// </summary>
		/// <param name="name">The name of the operation's parent resource.</param>
		/// <param name="filter">The standard list filter.</param>
		/// <param name="pageSize">The standard list page size.</param>
		/// <param name="pageToken">The standard list page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListOperationsResponse> Batch_projects_locations_operations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/operations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListOperationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// Batch_projects_locations_operations_cancel v1/{name}:cancel
		/// </summary>
		/// <param name="name">The name of the operation resource to be cancelled.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Batch_projects_locations_operations_cancelAsync(string name, CancelOperationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all Jobs for a project within a region.
		/// Batch_projects_locations_jobs_list v1/{parent}/jobs
		/// </summary>
		/// <param name="parent">Parent path.</param>
		/// <param name="filter">List filter.</param>
		/// <param name="orderBy">Optional. Sort results. Supported are "name", "name desc", "create_time", and "create_time desc".</param>
		/// <param name="pageSize">Page size.</param>
		/// <param name="pageToken">Page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListJobsResponse> Batch_projects_locations_jobs_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/jobs&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListJobsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Job.
		/// Batch_projects_locations_jobs_create v1/{parent}/jobs
		/// </summary>
		/// <param name="parent">Required. The parent resource name where the Job will be created. Pattern: "projects/{project}/locations/{location}"</param>
		/// <param name="jobId">ID used to uniquely identify the Job within its parent scope. This field should contain at most 63 characters and must start with lowercase characters. Only lowercase characters, numbers and '-' are accepted. The '-' character cannot be the first or the last one. A system generated ID will be used if the field is not set. The job.name field in the request will be ignored and the created resource name of the Job will be "{parent}/jobs/{job_id}".</param>
		/// <param name="requestId">Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).</param>
		/// <returns>Successful response</returns>
		public async Task<Job> Batch_projects_locations_jobs_createAsync(string parent, string jobId, string requestId, Job requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/jobs&jobId=" + (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Job>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Report agent's state, e.g. agent status and tasks information
		/// Batch_projects_locations_state_report v1/{parent}/state:report
		/// </summary>
		/// <param name="parent">Required. Format: projects/{project}/locations/{location} {project} should be a project number.</param>
		/// <returns>Successful response</returns>
		public async Task<ReportAgentStateResponse> Batch_projects_locations_state_reportAsync(string parent, ReportAgentStateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/state:report";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ReportAgentStateResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Tasks associated with a job.
		/// Batch_projects_locations_jobs_taskGroups_tasks_list v1/{parent}/tasks
		/// </summary>
		/// <param name="parent">Required. Name of a TaskGroup from which Tasks are being requested. Pattern: "projects/{project}/locations/{location}/jobs/{job}/taskGroups/{task_group}"</param>
		/// <param name="filter">Task filter, null filter matches all Tasks. Filter string should be of the format State=TaskStatus.State e.g. State=RUNNING</param>
		/// <param name="pageSize">Page size.</param>
		/// <param name="pageToken">Page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListTasksResponse> Batch_projects_locations_jobs_taskGroups_tasks_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/tasks&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTasksResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
