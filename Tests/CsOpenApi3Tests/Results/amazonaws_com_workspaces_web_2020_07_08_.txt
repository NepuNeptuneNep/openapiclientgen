//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateBrowserSettingsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="browserSettingsArn")]
		public string BrowserSettingsArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="portalArn")]
		public string PortalArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateIpAccessSettingsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ipAccessSettingsArn")]
		public string IpAccessSettingsArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="portalArn")]
		public string PortalArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateNetworkSettingsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkSettingsArn")]
		public string NetworkSettingsArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="portalArn")]
		public string PortalArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateTrustStoreResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="portalArn")]
		public string PortalArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trustStoreArn")]
		public string TrustStoreArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateUserAccessLoggingSettingsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="portalArn")]
		public string PortalArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userAccessLoggingSettingsArn")]
		public string UserAccessLoggingSettingsArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateUserSettingsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="portalArn")]
		public string PortalArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userSettingsArn")]
		public string UserSettingsArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateBrowserSettingsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="browserSettingsArn")]
		public string BrowserSettingsArn { get; set; }
	}
	
	/// <summary>
	/// The tag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Tag
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateIdentityProviderResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identityProviderArn")]
		public string IdentityProviderArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateIpAccessSettingsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ipAccessSettingsArn")]
		public string IpAccessSettingsArn { get; set; }
	}
	
	/// <summary>
	/// The IP rules of the IP access settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IpRule
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ipRange")]
		public string IpRange { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateNetworkSettingsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkSettingsArn")]
		public string NetworkSettingsArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreatePortalResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="portalArn")]
		public string PortalArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="portalEndpoint")]
		public string PortalEndpoint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateTrustStoreResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trustStoreArn")]
		public string TrustStoreArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateUserAccessLoggingSettingsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userAccessLoggingSettingsArn")]
		public string UserAccessLoggingSettingsArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateUserSettingsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userSettingsArn")]
		public string UserSettingsArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteBrowserSettingsResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteIdentityProviderResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteIpAccessSettingsResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteNetworkSettingsResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeletePortalResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteTrustStoreResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteUserAccessLoggingSettingsResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteUserSettingsResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateBrowserSettingsResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateIpAccessSettingsResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateNetworkSettingsResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateTrustStoreResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateUserAccessLoggingSettingsResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateUserSettingsResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBrowserSettingsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="browserSettings")]
		public BrowserSettings BrowserSettings { get; set; }
	}
	
	/// <summary>
	/// The browser settings resource that can be associated with a web portal. Once associated with a web portal, browser settings control how the browser will behave once a user starts a streaming session for the web portal. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BrowserSettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="associatedPortalArns")]
		public string[] AssociatedPortalArns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="browserPolicy")]
		public string BrowserPolicy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="browserSettingsArn")]
		public string BrowserSettingsArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetIdentityProviderResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="identityProvider")]
		public IdentityProvider IdentityProvider { get; set; }
	}
	
	/// <summary>
	/// The identity provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdentityProvider
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identityProviderArn")]
		public string IdentityProviderArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identityProviderDetails")]
		public IdentityProviderDetails IdentityProviderDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identityProviderName")]
		public string IdentityProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identityProviderType")]
		public IdentityProviderType IdentityProviderType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdentityProviderDetails
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IdentityProviderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAML = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Facebook = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Google = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoginWithAmazon = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SignInWithApple = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OIDC = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetIpAccessSettingsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="ipAccessSettings")]
		public IpAccessSettings IpAccessSettings { get; set; }
	}
	
	/// <summary>
	/// The IP access settings resource that can be associated with a web portal. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IpAccessSettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="associatedPortalArns")]
		public string[] AssociatedPortalArns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ipAccessSettingsArn")]
		public string IpAccessSettingsArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipRules")]
		public IpRule[] IpRules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetNetworkSettingsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="networkSettings")]
		public NetworkSettings NetworkSettings { get; set; }
	}
	
	/// <summary>
	/// A network settings resource that can be associated with a web portal. Once associated with a web portal, network settings define how streaming instances will connect with your specified VPC. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkSettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="associatedPortalArns")]
		public string[] AssociatedPortalArns { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkSettingsArn")]
		public string NetworkSettingsArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityGroupIds")]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subnetIds")]
		public string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpcId")]
		public string VpcId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetPortalResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="portal")]
		public Portal Portal { get; set; }
	}
	
	/// <summary>
	/// The web portal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Portal
	{
		
		[System.Runtime.Serialization.DataMember(Name="authenticationType")]
		public AuthenticationType AuthenticationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="browserSettingsArn")]
		public string BrowserSettingsArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="browserType")]
		public BrowserType BrowserType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipAccessSettingsArn")]
		public string IpAccessSettingsArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="networkSettingsArn")]
		public string NetworkSettingsArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="portalArn")]
		public string PortalArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="portalEndpoint")]
		public string PortalEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="portalStatus")]
		public PortalStatus PortalStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rendererType")]
		public RendererType RendererType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusReason")]
		public string StatusReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trustStoreArn")]
		public string TrustStoreArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userAccessLoggingSettingsArn")]
		public string UserAccessLoggingSettingsArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userSettingsArn")]
		public string UserSettingsArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AuthenticationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAM_Identity_Center = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BrowserType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Chrome = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PortalStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Incomplete = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RendererType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AppStream = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetPortalServiceProviderMetadataResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="portalArn")]
		public string PortalArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceProviderSamlMetadata")]
		public string ServiceProviderSamlMetadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetTrustStoreResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="trustStore")]
		public TrustStore TrustStore { get; set; }
	}
	
	/// <summary>
	/// A trust store that can be associated with a web portal. A trust store contains certificate authority (CA) certificates. Once associated with a web portal, the browser in a streaming session will recognize certificates that have been issued using any of the CAs in the trust store. If your organization has internal websites that use certificates issued by private CAs, you should add the private CA certificate to the trust store. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TrustStore
	{
		
		[System.Runtime.Serialization.DataMember(Name="associatedPortalArns")]
		public string[] AssociatedPortalArns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trustStoreArn")]
		public string TrustStoreArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetTrustStoreCertificateResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificate")]
		public Certificate Certificate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trustStoreArn")]
		public string TrustStoreArn { get; set; }
	}
	
	/// <summary>
	/// The certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Certificate
	{
		
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="issuer")]
		public string Issuer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notValidAfter")]
		public System.DateTimeOffset NotValidAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notValidBefore")]
		public System.DateTimeOffset NotValidBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumbprint")]
		public string Thumbprint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetUserAccessLoggingSettingsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="userAccessLoggingSettings")]
		public UserAccessLoggingSettings UserAccessLoggingSettings { get; set; }
	}
	
	/// <summary>
	/// A user access logging settings resource that can be associated with a web portal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserAccessLoggingSettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="associatedPortalArns")]
		public string[] AssociatedPortalArns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kinesisStreamArn")]
		public string KinesisStreamArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userAccessLoggingSettingsArn")]
		public string UserAccessLoggingSettingsArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetUserSettingsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="userSettings")]
		public UserSettings UserSettings { get; set; }
	}
	
	/// <summary>
	/// A user settings resource that can be associated with a web portal. Once associated with a web portal, user settings control how users can transfer data between a streaming session and the their local devices. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserSettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="associatedPortalArns")]
		public string[] AssociatedPortalArns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="copyAllowed")]
		public EnabledType CopyAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disconnectTimeoutInMinutes")]
		public System.Nullable<System.Int32> DisconnectTimeoutInMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="downloadAllowed")]
		public EnabledType DownloadAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="idleDisconnectTimeoutInMinutes")]
		public System.Nullable<System.Int32> IdleDisconnectTimeoutInMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pasteAllowed")]
		public EnabledType PasteAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="printAllowed")]
		public EnabledType PrintAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uploadAllowed")]
		public EnabledType UploadAllowed { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userSettingsArn")]
		public string UserSettingsArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnabledType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBrowserSettingsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="browserSettings")]
		public BrowserSettingsSummary[] BrowserSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The summary for browser settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BrowserSettingsSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="browserSettingsArn")]
		public string BrowserSettingsArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListIdentityProvidersResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="identityProviders")]
		public IdentityProviderSummary[] IdentityProviders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The summary of the identity provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdentityProviderSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="identityProviderArn")]
		public string IdentityProviderArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identityProviderName")]
		public string IdentityProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identityProviderType")]
		public IdentityProviderType IdentityProviderType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListIpAccessSettingsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="ipAccessSettings")]
		public IpAccessSettingsSummary[] IpAccessSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The summary of IP access settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IpAccessSettingsSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipAccessSettingsArn")]
		public string IpAccessSettingsArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListNetworkSettingsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="networkSettings")]
		public NetworkSettingsSummary[] NetworkSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The summary of network settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkSettingsSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="networkSettingsArn")]
		public string NetworkSettingsArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpcId")]
		public string VpcId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPortalsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="portals")]
		public PortalSummary[] Portals { get; set; }
	}
	
	/// <summary>
	/// The summary of the portal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PortalSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="authenticationType")]
		public AuthenticationType AuthenticationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="browserSettingsArn")]
		public string BrowserSettingsArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="browserType")]
		public BrowserType BrowserType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipAccessSettingsArn")]
		public string IpAccessSettingsArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="networkSettingsArn")]
		public string NetworkSettingsArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="portalArn")]
		public string PortalArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="portalEndpoint")]
		public string PortalEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="portalStatus")]
		public PortalStatus PortalStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rendererType")]
		public RendererType RendererType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trustStoreArn")]
		public string TrustStoreArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userAccessLoggingSettingsArn")]
		public string UserAccessLoggingSettingsArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userSettingsArn")]
		public string UserSettingsArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTrustStoreCertificatesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateList")]
		public CertificateSummary[] CertificateList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trustStoreArn")]
		public string TrustStoreArn { get; set; }
	}
	
	/// <summary>
	/// The summary of the certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CertificateSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="issuer")]
		public string Issuer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notValidAfter")]
		public System.DateTimeOffset NotValidAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notValidBefore")]
		public System.DateTimeOffset NotValidBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumbprint")]
		public string Thumbprint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTrustStoresResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trustStores")]
		public TrustStoreSummary[] TrustStores { get; set; }
	}
	
	/// <summary>
	/// The summary of the trust store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TrustStoreSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="trustStoreArn")]
		public string TrustStoreArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListUserAccessLoggingSettingsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userAccessLoggingSettings")]
		public UserAccessLoggingSettingsSummary[] UserAccessLoggingSettings { get; set; }
	}
	
	/// <summary>
	/// The summary of user access logging settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserAccessLoggingSettingsSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="kinesisStreamArn")]
		public string KinesisStreamArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userAccessLoggingSettingsArn")]
		public string UserAccessLoggingSettingsArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListUserSettingsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userSettings")]
		public UserSettingsSummary[] UserSettings { get; set; }
	}
	
	/// <summary>
	/// The summary of user settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserSettingsSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="copyAllowed")]
		public EnabledType CopyAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disconnectTimeoutInMinutes")]
		public System.Nullable<System.Int32> DisconnectTimeoutInMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="downloadAllowed")]
		public EnabledType DownloadAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="idleDisconnectTimeoutInMinutes")]
		public System.Nullable<System.Int32> IdleDisconnectTimeoutInMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pasteAllowed")]
		public EnabledType PasteAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="printAllowed")]
		public EnabledType PrintAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uploadAllowed")]
		public EnabledType UploadAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userSettingsArn")]
		public string UserSettingsArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TooManyTagsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateBrowserSettingsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="browserSettings")]
		public BrowserSettings BrowserSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateIdentityProviderResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identityProvider")]
		public IdentityProvider IdentityProvider { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateIpAccessSettingsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ipAccessSettings")]
		public IpAccessSettings IpAccessSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateNetworkSettingsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkSettings")]
		public NetworkSettings NetworkSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePortalResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="portal")]
		public Portal Portal { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateTrustStoreResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trustStoreArn")]
		public string TrustStoreArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateUserAccessLoggingSettingsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userAccessLoggingSettings")]
		public UserAccessLoggingSettings UserAccessLoggingSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateUserSettingsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userSettings")]
		public UserSettings UserSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateBrowserSettingsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateIpAccessSettingsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateNetworkSettingsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateTrustStoreRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateUserAccessLoggingSettingsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateUserSettingsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EncryptionContextMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateBrowserSettingsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalEncryptionContext")]
		public EncryptionContextMap AdditionalEncryptionContext { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="browserPolicy")]
		public string BrowserPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerManagedKey")]
		public string CustomerManagedKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateIdentityProviderRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identityProviderDetails")]
		public IdentityProviderDetails IdentityProviderDetails { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identityProviderName")]
		public string IdentityProviderName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identityProviderType")]
		public IdentityProviderType IdentityProviderType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="portalArn")]
		public string PortalArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateIpAccessSettingsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalEncryptionContext")]
		public EncryptionContextMap AdditionalEncryptionContext { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerManagedKey")]
		public string CustomerManagedKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ipRules")]
		public IpRule[] IpRules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateNetworkSettingsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="securityGroupIds")]
		public string[] SecurityGroupIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subnetIds")]
		public string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vpcId")]
		public string VpcId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreatePortalRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalEncryptionContext")]
		public EncryptionContextMap AdditionalEncryptionContext { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authenticationType")]
		public AuthenticationType AuthenticationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerManagedKey")]
		public string CustomerManagedKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateTrustStoreRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certificateList")]
		public string[] CertificateList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateUserAccessLoggingSettingsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kinesisStreamArn")]
		public string KinesisStreamArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateUserSettingsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="copyAllowed")]
		public EnabledType CopyAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disconnectTimeoutInMinutes")]
		public System.Nullable<System.Int32> DisconnectTimeoutInMinutes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="downloadAllowed")]
		public EnabledType DownloadAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="idleDisconnectTimeoutInMinutes")]
		public System.Nullable<System.Int32> IdleDisconnectTimeoutInMinutes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pasteAllowed")]
		public EnabledType PasteAllowed { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="printAllowed")]
		public EnabledType PrintAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uploadAllowed")]
		public EnabledType UploadAllowed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteBrowserSettingsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteIdentityProviderRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteIpAccessSettingsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteNetworkSettingsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeletePortalRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteTrustStoreRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteUserAccessLoggingSettingsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteUserSettingsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateBrowserSettingsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateIpAccessSettingsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateNetworkSettingsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateTrustStoreRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateUserAccessLoggingSettingsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateUserSettingsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBrowserSettingsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetIdentityProviderRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetIpAccessSettingsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetNetworkSettingsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetPortalRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetPortalServiceProviderMetadataRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetTrustStoreCertificateRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetTrustStoreRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetUserAccessLoggingSettingsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetUserSettingsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBrowserSettingsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListIdentityProvidersRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListIpAccessSettingsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListNetworkSettingsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPortalsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTrustStoreCertificatesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTrustStoresRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListUserAccessLoggingSettingsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListUserSettingsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateBrowserSettingsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="browserPolicy")]
		public string BrowserPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateIdentityProviderRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identityProviderDetails")]
		public IdentityProviderDetails IdentityProviderDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identityProviderName")]
		public string IdentityProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identityProviderType")]
		public IdentityProviderType IdentityProviderType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateIpAccessSettingsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipRules")]
		public IpRule[] IpRules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateNetworkSettingsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityGroupIds")]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subnetIds")]
		public string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpcId")]
		public string VpcId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePortalRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="authenticationType")]
		public AuthenticationType AuthenticationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateTrustStoreRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificatesToAdd")]
		public string[] CertificatesToAdd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificatesToDelete")]
		public string[] CertificatesToDelete { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateUserAccessLoggingSettingsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kinesisStreamArn")]
		public string KinesisStreamArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateUserSettingsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="copyAllowed")]
		public EnabledType CopyAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disconnectTimeoutInMinutes")]
		public System.Nullable<System.Int32> DisconnectTimeoutInMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="downloadAllowed")]
		public EnabledType DownloadAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="idleDisconnectTimeoutInMinutes")]
		public System.Nullable<System.Int32> IdleDisconnectTimeoutInMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pasteAllowed")]
		public EnabledType PasteAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="printAllowed")]
		public EnabledType PrintAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uploadAllowed")]
		public EnabledType UploadAllowed { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Associates a browser settings resource with a web portal.
		/// AssociateBrowserSettings portals/{portalArn}/browserSettings#browserSettingsArn
		/// </summary>
		/// <param name="browserSettingsArn">The ARN of the browser settings.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <param name="portalArn">The ARN of the web portal.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<AssociateBrowserSettingsResponse> AssociateBrowserSettingsAsync(string browserSettingsArn, string portalArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portals/"+ (portalArn==null? "" : System.Uri.EscapeDataString(portalArn))+"/browserSettings#browserSettingsArn?browserSettingsArn=" + (browserSettingsArn==null? "" : System.Uri.EscapeDataString(browserSettingsArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociateBrowserSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associates an IP access settings resource with a web portal.
		/// AssociateIpAccessSettings portals/{portalArn}/ipAccessSettings#ipAccessSettingsArn
		/// </summary>
		/// <param name="ipAccessSettingsArn">The ARN of the IP access settings.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <param name="portalArn">The ARN of the web portal.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<AssociateIpAccessSettingsResponse> AssociateIpAccessSettingsAsync(string ipAccessSettingsArn, string portalArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portals/"+ (portalArn==null? "" : System.Uri.EscapeDataString(portalArn))+"/ipAccessSettings#ipAccessSettingsArn?ipAccessSettingsArn=" + (ipAccessSettingsArn==null? "" : System.Uri.EscapeDataString(ipAccessSettingsArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociateIpAccessSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associates a network settings resource with a web portal.
		/// AssociateNetworkSettings portals/{portalArn}/networkSettings#networkSettingsArn
		/// </summary>
		/// <param name="networkSettingsArn">The ARN of the network settings.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <param name="portalArn">The ARN of the web portal.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<AssociateNetworkSettingsResponse> AssociateNetworkSettingsAsync(string networkSettingsArn, string portalArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portals/"+ (portalArn==null? "" : System.Uri.EscapeDataString(portalArn))+"/networkSettings#networkSettingsArn?networkSettingsArn=" + (networkSettingsArn==null? "" : System.Uri.EscapeDataString(networkSettingsArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociateNetworkSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associates a trust store with a web portal.
		/// AssociateTrustStore portals/{portalArn}/trustStores#trustStoreArn
		/// </summary>
		/// <param name="portalArn">The ARN of the web portal.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <param name="trustStoreArn">The ARN of the trust store.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<AssociateTrustStoreResponse> AssociateTrustStoreAsync(string portalArn, string trustStoreArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portals/"+ (portalArn==null? "" : System.Uri.EscapeDataString(portalArn))+"/trustStores#trustStoreArn&trustStoreArn=" + (trustStoreArn==null? "" : System.Uri.EscapeDataString(trustStoreArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociateTrustStoreResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associates a user access logging settings resource with a web portal.
		/// AssociateUserAccessLoggingSettings portals/{portalArn}/userAccessLoggingSettings#userAccessLoggingSettingsArn
		/// </summary>
		/// <param name="portalArn">The ARN of the web portal.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <param name="userAccessLoggingSettingsArn">The ARN of the user access logging settings.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<AssociateUserAccessLoggingSettingsResponse> AssociateUserAccessLoggingSettingsAsync(string portalArn, string userAccessLoggingSettingsArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portals/"+ (portalArn==null? "" : System.Uri.EscapeDataString(portalArn))+"/userAccessLoggingSettings#userAccessLoggingSettingsArn&userAccessLoggingSettingsArn=" + (userAccessLoggingSettingsArn==null? "" : System.Uri.EscapeDataString(userAccessLoggingSettingsArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociateUserAccessLoggingSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associates a user settings resource with a web portal.
		/// AssociateUserSettings portals/{portalArn}/userSettings#userSettingsArn
		/// </summary>
		/// <param name="portalArn">The ARN of the web portal.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <param name="userSettingsArn">The ARN of the user settings.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<AssociateUserSettingsResponse> AssociateUserSettingsAsync(string portalArn, string userSettingsArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portals/"+ (portalArn==null? "" : System.Uri.EscapeDataString(portalArn))+"/userSettings#userSettingsArn&userSettingsArn=" + (userSettingsArn==null? "" : System.Uri.EscapeDataString(userSettingsArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociateUserSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a browser settings resource that can be associated with a web portal. Once associated with a web portal, browser settings control how the browser will behave once a user starts a streaming session for the web portal.
		/// CreateBrowserSettings browserSettings
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateBrowserSettingsResponse> CreateBrowserSettingsAsync(CreateBrowserSettingsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "browserSettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateBrowserSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of browser settings.
		/// ListBrowserSettings browserSettings
		/// </summary>
		/// <param name="maxResults">The maximum number of results to be included in the next page.
		/// Minimum: 1
		// </param>
		/// <param name="nextToken">The pagination token used to retrieve the next page of results for this operation.
		/// Min length: 1
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<ListBrowserSettingsResponse> ListBrowserSettingsAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "browserSettings?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListBrowserSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an identity provider resource that is then associated with a web portal.
		/// CreateIdentityProvider identityProviders
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateIdentityProviderResponse> CreateIdentityProviderAsync(CreateIdentityProviderPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "identityProviders";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateIdentityProviderResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates an IP access settings resource that can be associated with a web portal.
		/// CreateIpAccessSettings ipAccessSettings
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateIpAccessSettingsResponse> CreateIpAccessSettingsAsync(CreateIpAccessSettingsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ipAccessSettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateIpAccessSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of IP access settings.
		/// ListIpAccessSettings ipAccessSettings
		/// </summary>
		/// <param name="maxResults">The maximum number of results to be included in the next page.
		/// Minimum: 1
		// </param>
		/// <param name="nextToken">The pagination token used to retrieve the next page of results for this operation.
		/// Min length: 1
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<ListIpAccessSettingsResponse> ListIpAccessSettingsAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ipAccessSettings?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListIpAccessSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a network settings resource that can be associated with a web portal. Once associated with a web portal, network settings define how streaming instances will connect with your specified VPC.
		/// CreateNetworkSettings networkSettings
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateNetworkSettingsResponse> CreateNetworkSettingsAsync(CreateNetworkSettingsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "networkSettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateNetworkSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of network settings.
		/// ListNetworkSettings networkSettings
		/// </summary>
		/// <param name="maxResults">The maximum number of results to be included in the next page.
		/// Minimum: 1
		// </param>
		/// <param name="nextToken">The pagination token used to retrieve the next page of results for this operation.
		/// Min length: 1
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<ListNetworkSettingsResponse> ListNetworkSettingsAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "networkSettings?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListNetworkSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a web portal.
		/// CreatePortal portals
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreatePortalResponse> CreatePortalAsync(CreatePortalPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portals";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreatePortalResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list or web portals.
		/// ListPortals portals
		/// </summary>
		/// <param name="maxResults">The maximum number of results to be included in the next page.
		/// Minimum: 1
		// </param>
		/// <param name="nextToken">The pagination token used to retrieve the next page of results for this operation. 
		/// Min length: 1
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<ListPortalsResponse> ListPortalsAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portals?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPortalsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a trust store that can be associated with a web portal. A trust store contains certificate authority (CA) certificates. Once associated with a web portal, the browser in a streaming session will recognize certificates that have been issued using any of the CAs in the trust store. If your organization has internal websites that use certificates issued by private CAs, you should add the private CA certificate to the trust store.
		/// CreateTrustStore trustStores
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateTrustStoreResponse> CreateTrustStoreAsync(CreateTrustStorePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "trustStores";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateTrustStoreResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of trust stores.
		/// ListTrustStores trustStores
		/// </summary>
		/// <param name="maxResults">The maximum number of results to be included in the next page.
		/// Minimum: 1
		// </param>
		/// <param name="nextToken">The pagination token used to retrieve the next page of results for this operation.
		/// Min length: 1
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTrustStoresResponse> ListTrustStoresAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "trustStores?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTrustStoresResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a user access logging settings resource that can be associated with a web portal.
		/// CreateUserAccessLoggingSettings userAccessLoggingSettings
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateUserAccessLoggingSettingsResponse> CreateUserAccessLoggingSettingsAsync(CreateUserAccessLoggingSettingsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userAccessLoggingSettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateUserAccessLoggingSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of user access logging settings.
		/// ListUserAccessLoggingSettings userAccessLoggingSettings
		/// </summary>
		/// <param name="maxResults">The maximum number of results to be included in the next page.
		/// Minimum: 1
		// </param>
		/// <param name="nextToken">The pagination token used to retrieve the next page of results for this operation.
		/// Min length: 1
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<ListUserAccessLoggingSettingsResponse> ListUserAccessLoggingSettingsAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userAccessLoggingSettings?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListUserAccessLoggingSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a user settings resource that can be associated with a web portal. Once associated with a web portal, user settings control how users can transfer data between a streaming session and the their local devices.
		/// CreateUserSettings userSettings
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateUserSettingsResponse> CreateUserSettingsAsync(CreateUserSettingsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userSettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateUserSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of user settings.
		/// ListUserSettings userSettings
		/// </summary>
		/// <param name="maxResults">The maximum number of results to be included in the next page.
		/// Minimum: 1
		// </param>
		/// <param name="nextToken">The pagination token used to retrieve the next page of results for this operation. 
		/// Min length: 1
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<ListUserSettingsResponse> ListUserSettingsAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userSettings?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListUserSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes browser settings.
		/// DeleteBrowserSettings browserSettings/{browserSettingsArn}
		/// </summary>
		/// <param name="browserSettingsArn">The ARN of the browser settings.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteBrowserSettingsResponse> DeleteBrowserSettingsAsync(string browserSettingsArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "browserSettings/"+ (browserSettingsArn==null? "" : System.Uri.EscapeDataString(browserSettingsArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteBrowserSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets browser settings.
		/// GetBrowserSettings browserSettings/{browserSettingsArn}
		/// </summary>
		/// <param name="browserSettingsArn">The ARN of the browser settings.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<GetBrowserSettingsResponse> GetBrowserSettingsAsync(string browserSettingsArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "browserSettings/"+ (browserSettingsArn==null? "" : System.Uri.EscapeDataString(browserSettingsArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetBrowserSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates browser settings.
		/// UpdateBrowserSettings browserSettings/{browserSettingsArn}
		/// </summary>
		/// <param name="browserSettingsArn">The ARN of the browser settings.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateBrowserSettingsResponse> UpdateBrowserSettingsAsync(string browserSettingsArn, UpdateBrowserSettingsPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "browserSettings/"+ (browserSettingsArn==null? "" : System.Uri.EscapeDataString(browserSettingsArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateBrowserSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the identity provider.
		/// DeleteIdentityProvider identityProviders/{identityProviderArn}
		/// </summary>
		/// <param name="identityProviderArn">The ARN of the identity provider.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteIdentityProviderResponse> DeleteIdentityProviderAsync(string identityProviderArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "identityProviders/"+ (identityProviderArn==null? "" : System.Uri.EscapeDataString(identityProviderArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteIdentityProviderResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the identity provider.
		/// GetIdentityProvider identityProviders/{identityProviderArn}
		/// </summary>
		/// <param name="identityProviderArn">The ARN of the identity provider.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<GetIdentityProviderResponse> GetIdentityProviderAsync(string identityProviderArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "identityProviders/"+ (identityProviderArn==null? "" : System.Uri.EscapeDataString(identityProviderArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetIdentityProviderResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the identity provider.
		/// UpdateIdentityProvider identityProviders/{identityProviderArn}
		/// </summary>
		/// <param name="identityProviderArn">The ARN of the identity provider.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateIdentityProviderResponse> UpdateIdentityProviderAsync(string identityProviderArn, UpdateIdentityProviderPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "identityProviders/"+ (identityProviderArn==null? "" : System.Uri.EscapeDataString(identityProviderArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateIdentityProviderResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes IP access settings.
		/// DeleteIpAccessSettings ipAccessSettings/{ipAccessSettingsArn}
		/// </summary>
		/// <param name="ipAccessSettingsArn">The ARN of the IP access settings.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteIpAccessSettingsResponse> DeleteIpAccessSettingsAsync(string ipAccessSettingsArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ipAccessSettings/"+ (ipAccessSettingsArn==null? "" : System.Uri.EscapeDataString(ipAccessSettingsArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteIpAccessSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the IP access settings.
		/// GetIpAccessSettings ipAccessSettings/{ipAccessSettingsArn}
		/// </summary>
		/// <param name="ipAccessSettingsArn">The ARN of the IP access settings.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<GetIpAccessSettingsResponse> GetIpAccessSettingsAsync(string ipAccessSettingsArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ipAccessSettings/"+ (ipAccessSettingsArn==null? "" : System.Uri.EscapeDataString(ipAccessSettingsArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetIpAccessSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates IP access settings.
		/// UpdateIpAccessSettings ipAccessSettings/{ipAccessSettingsArn}
		/// </summary>
		/// <param name="ipAccessSettingsArn">The ARN of the IP access settings.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateIpAccessSettingsResponse> UpdateIpAccessSettingsAsync(string ipAccessSettingsArn, UpdateIpAccessSettingsPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ipAccessSettings/"+ (ipAccessSettingsArn==null? "" : System.Uri.EscapeDataString(ipAccessSettingsArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateIpAccessSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes network settings.
		/// DeleteNetworkSettings networkSettings/{networkSettingsArn}
		/// </summary>
		/// <param name="networkSettingsArn">The ARN of the network settings.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteNetworkSettingsResponse> DeleteNetworkSettingsAsync(string networkSettingsArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "networkSettings/"+ (networkSettingsArn==null? "" : System.Uri.EscapeDataString(networkSettingsArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteNetworkSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the network settings.
		/// GetNetworkSettings networkSettings/{networkSettingsArn}
		/// </summary>
		/// <param name="networkSettingsArn">The ARN of the network settings.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<GetNetworkSettingsResponse> GetNetworkSettingsAsync(string networkSettingsArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "networkSettings/"+ (networkSettingsArn==null? "" : System.Uri.EscapeDataString(networkSettingsArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetNetworkSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates network settings.
		/// UpdateNetworkSettings networkSettings/{networkSettingsArn}
		/// </summary>
		/// <param name="networkSettingsArn">The ARN of the network settings.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateNetworkSettingsResponse> UpdateNetworkSettingsAsync(string networkSettingsArn, UpdateNetworkSettingsPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "networkSettings/"+ (networkSettingsArn==null? "" : System.Uri.EscapeDataString(networkSettingsArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateNetworkSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a web portal.
		/// DeletePortal portals/{portalArn}
		/// </summary>
		/// <param name="portalArn">The ARN of the web portal.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<DeletePortalResponse> DeletePortalAsync(string portalArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portals/"+ (portalArn==null? "" : System.Uri.EscapeDataString(portalArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeletePortalResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the web portal.
		/// GetPortal portals/{portalArn}
		/// </summary>
		/// <param name="portalArn">The ARN of the web portal.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<GetPortalResponse> GetPortalAsync(string portalArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portals/"+ (portalArn==null? "" : System.Uri.EscapeDataString(portalArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPortalResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a web portal.
		/// UpdatePortal portals/{portalArn}
		/// </summary>
		/// <param name="portalArn">The ARN of the web portal.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdatePortalResponse> UpdatePortalAsync(string portalArn, UpdatePortalPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portals/"+ (portalArn==null? "" : System.Uri.EscapeDataString(portalArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdatePortalResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the trust store.
		/// DeleteTrustStore trustStores/{trustStoreArn}
		/// </summary>
		/// <param name="trustStoreArn">The ARN of the trust store.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteTrustStoreResponse> DeleteTrustStoreAsync(string trustStoreArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "trustStores/"+ (trustStoreArn==null? "" : System.Uri.EscapeDataString(trustStoreArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteTrustStoreResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the trust store.
		/// GetTrustStore trustStores/{trustStoreArn}
		/// </summary>
		/// <param name="trustStoreArn">The ARN of the trust store.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<GetTrustStoreResponse> GetTrustStoreAsync(string trustStoreArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "trustStores/"+ (trustStoreArn==null? "" : System.Uri.EscapeDataString(trustStoreArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTrustStoreResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the trust store.
		/// UpdateTrustStore trustStores/{trustStoreArn}
		/// </summary>
		/// <param name="trustStoreArn">The ARN of the trust store.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateTrustStoreResponse> UpdateTrustStoreAsync(string trustStoreArn, UpdateTrustStorePatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "trustStores/"+ (trustStoreArn==null? "" : System.Uri.EscapeDataString(trustStoreArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateTrustStoreResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes user access logging settings.
		/// DeleteUserAccessLoggingSettings userAccessLoggingSettings/{userAccessLoggingSettingsArn}
		/// </summary>
		/// <param name="userAccessLoggingSettingsArn">The ARN of the user access logging settings.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteUserAccessLoggingSettingsResponse> DeleteUserAccessLoggingSettingsAsync(string userAccessLoggingSettingsArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userAccessLoggingSettings/"+ (userAccessLoggingSettingsArn==null? "" : System.Uri.EscapeDataString(userAccessLoggingSettingsArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteUserAccessLoggingSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets user access logging settings.
		/// GetUserAccessLoggingSettings userAccessLoggingSettings/{userAccessLoggingSettingsArn}
		/// </summary>
		/// <param name="userAccessLoggingSettingsArn">The ARN of the user access logging settings.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<GetUserAccessLoggingSettingsResponse> GetUserAccessLoggingSettingsAsync(string userAccessLoggingSettingsArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userAccessLoggingSettings/"+ (userAccessLoggingSettingsArn==null? "" : System.Uri.EscapeDataString(userAccessLoggingSettingsArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetUserAccessLoggingSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the user access logging settings.
		/// UpdateUserAccessLoggingSettings userAccessLoggingSettings/{userAccessLoggingSettingsArn}
		/// </summary>
		/// <param name="userAccessLoggingSettingsArn">The ARN of the user access logging settings.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateUserAccessLoggingSettingsResponse> UpdateUserAccessLoggingSettingsAsync(string userAccessLoggingSettingsArn, UpdateUserAccessLoggingSettingsPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userAccessLoggingSettings/"+ (userAccessLoggingSettingsArn==null? "" : System.Uri.EscapeDataString(userAccessLoggingSettingsArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateUserAccessLoggingSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes user settings.
		/// DeleteUserSettings userSettings/{userSettingsArn}
		/// </summary>
		/// <param name="userSettingsArn">The ARN of the user settings.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteUserSettingsResponse> DeleteUserSettingsAsync(string userSettingsArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userSettings/"+ (userSettingsArn==null? "" : System.Uri.EscapeDataString(userSettingsArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteUserSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets user settings.
		/// GetUserSettings userSettings/{userSettingsArn}
		/// </summary>
		/// <param name="userSettingsArn">The ARN of the user settings.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<GetUserSettingsResponse> GetUserSettingsAsync(string userSettingsArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userSettings/"+ (userSettingsArn==null? "" : System.Uri.EscapeDataString(userSettingsArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetUserSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the user settings.
		/// UpdateUserSettings userSettings/{userSettingsArn}
		/// </summary>
		/// <param name="userSettingsArn">The ARN of the user settings.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateUserSettingsResponse> UpdateUserSettingsAsync(string userSettingsArn, UpdateUserSettingsPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userSettings/"+ (userSettingsArn==null? "" : System.Uri.EscapeDataString(userSettingsArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateUserSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disassociates browser settings from a web portal.
		/// DisassociateBrowserSettings portals/{portalArn}/browserSettings
		/// </summary>
		/// <param name="portalArn">The ARN of the web portal.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<DisassociateBrowserSettingsResponse> DisassociateBrowserSettingsAsync(string portalArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portals/"+ (portalArn==null? "" : System.Uri.EscapeDataString(portalArn))+"/browserSettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DisassociateBrowserSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates IP access settings from a web portal.
		/// DisassociateIpAccessSettings portals/{portalArn}/ipAccessSettings
		/// </summary>
		/// <param name="portalArn">The ARN of the web portal.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<DisassociateIpAccessSettingsResponse> DisassociateIpAccessSettingsAsync(string portalArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portals/"+ (portalArn==null? "" : System.Uri.EscapeDataString(portalArn))+"/ipAccessSettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DisassociateIpAccessSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates network settings from a web portal.
		/// DisassociateNetworkSettings portals/{portalArn}/networkSettings
		/// </summary>
		/// <param name="portalArn">The ARN of the web portal.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<DisassociateNetworkSettingsResponse> DisassociateNetworkSettingsAsync(string portalArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portals/"+ (portalArn==null? "" : System.Uri.EscapeDataString(portalArn))+"/networkSettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DisassociateNetworkSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates a trust store from a web portal.
		/// DisassociateTrustStore portals/{portalArn}/trustStores
		/// </summary>
		/// <param name="portalArn">The ARN of the web portal.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<DisassociateTrustStoreResponse> DisassociateTrustStoreAsync(string portalArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portals/"+ (portalArn==null? "" : System.Uri.EscapeDataString(portalArn))+"/trustStores";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DisassociateTrustStoreResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates user access logging settings from a web portal.
		/// DisassociateUserAccessLoggingSettings portals/{portalArn}/userAccessLoggingSettings
		/// </summary>
		/// <param name="portalArn">The ARN of the web portal.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<DisassociateUserAccessLoggingSettingsResponse> DisassociateUserAccessLoggingSettingsAsync(string portalArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portals/"+ (portalArn==null? "" : System.Uri.EscapeDataString(portalArn))+"/userAccessLoggingSettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DisassociateUserAccessLoggingSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates user settings from a web portal.
		/// DisassociateUserSettings portals/{portalArn}/userSettings
		/// </summary>
		/// <param name="portalArn">The ARN of the web portal.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<DisassociateUserSettingsResponse> DisassociateUserSettingsAsync(string portalArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portals/"+ (portalArn==null? "" : System.Uri.EscapeDataString(portalArn))+"/userSettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DisassociateUserSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the service provider metadata.
		/// GetPortalServiceProviderMetadata portalIdp/{portalArn}
		/// </summary>
		/// <param name="portalArn">The ARN of the web portal.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<GetPortalServiceProviderMetadataResponse> GetPortalServiceProviderMetadataAsync(string portalArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portalIdp/"+ (portalArn==null? "" : System.Uri.EscapeDataString(portalArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPortalServiceProviderMetadataResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the trust store certificate.
		/// GetTrustStoreCertificate trustStores/{trustStoreArn}/certificate#thumbprint
		/// </summary>
		/// <param name="thumbprint">The thumbprint of the trust store certificate.
		/// Min length: 64
		/// Max length: 64
		// </param>
		/// <param name="trustStoreArn">The ARN of the trust store certificate.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<GetTrustStoreCertificateResponse> GetTrustStoreCertificateAsync(string thumbprint, string trustStoreArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "trustStores/"+ (trustStoreArn==null? "" : System.Uri.EscapeDataString(trustStoreArn))+"/certificate#thumbprint?thumbprint=" + (thumbprint==null? "" : System.Uri.EscapeDataString(thumbprint));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTrustStoreCertificateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of identity providers for a specific web portal.
		/// ListIdentityProviders portals/{portalArn}/identityProviders
		/// </summary>
		/// <param name="maxResults">The maximum number of results to be included in the next page.
		/// Minimum: 1
		// </param>
		/// <param name="nextToken">The pagination token used to retrieve the next page of results for this operation.
		/// Min length: 1
		/// Max length: 2048
		// </param>
		/// <param name="portalArn">The ARN of the web portal.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<ListIdentityProvidersResponse> ListIdentityProvidersAsync(int maxResults, string nextToken, string portalArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portals/"+ (portalArn==null? "" : System.Uri.EscapeDataString(portalArn))+"/identityProviders?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListIdentityProvidersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of tags for a resource.
		/// ListTagsForResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The ARN of the resource.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds or overwrites one or more tags for the specified resource.
		/// TagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The ARN of the resource.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of trust store certificates.
		/// ListTrustStoreCertificates trustStores/{trustStoreArn}/certificates
		/// </summary>
		/// <param name="maxResults">The maximum number of results to be included in the next page.
		/// Minimum: 1
		// </param>
		/// <param name="nextToken">The pagination token used to retrieve the next page of results for this operation.
		/// Min length: 1
		/// Max length: 2048
		// </param>
		/// <param name="trustStoreArn">The ARN of the trust store
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTrustStoreCertificatesResponse> ListTrustStoreCertificatesAsync(int maxResults, string nextToken, string trustStoreArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "trustStores/"+ (trustStoreArn==null? "" : System.Uri.EscapeDataString(trustStoreArn))+"/certificates?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTrustStoreCertificatesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes one or more tags from the specified resource.
		/// UntagResource tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">The ARN of the resource.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <param name="tagKeys">The list of tag keys to remove from the resource.
		/// Minimum items: 0
		/// Maximum items: 200
		// </param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class CreateBrowserSettingsPostBody
	{
		
		/// <summary>
		/// Additional encryption context of the browser settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalEncryptionContext")]
		public System.Collections.Generic.Dictionary<string, string> AdditionalEncryptionContext { get; set; }
		
		/// <summary>
		/// A JSON string containing Chrome Enterprise policies that will be applied to all streaming sessions.
		/// Required
		/// Min length: 2
		/// Max length: 131072
		/// Pattern: \{[\S\s]*\}\s*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="browserPolicy")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(131072)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\{[\S\s]*\}\s*")]
		public string BrowserPolicy { get; set; }
		
		/// <summary>
		/// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request.</p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK. </p>
		/// Min length: 1
		/// Max length: 512
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The custom managed key of the browser settings.
		/// Min length: 20
		/// Max length: 2048
		/// Pattern: ^arn:[\w+=\/,.@-]+:kms:[a-zA-Z0-9\-]*:[a-zA-Z0-9]{1,12}:key\/[a-zA-Z0-9-]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerManagedKey")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:[\w+=\/,.@-]+:kms:[a-zA-Z0-9\-]*:[a-zA-Z0-9]{1,12}:key\/[a-zA-Z0-9-]+$")]
		public string CustomerManagedKey { get; set; }
		
		/// <summary>
		/// The tags to add to the browser settings resource. A tag is a key-value pair.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	public class CreateIdentityProviderPostBody
	{
		
		/// <summary>
		/// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request.</p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
		/// Min length: 1
		/// Max length: 512
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// <p>The identity provider details. The following list describes the provider detail keys for each identity provider type. </p> <ul> <li> <p>For Google and Login with Amazon:</p> <ul> <li> <p> <code>client_id</code> </p> </li> <li> <p> <code>client_secret</code> </p> </li> <li> <p> <code>authorize_scopes</code> </p> </li> </ul> </li> <li> <p>For Facebook:</p> <ul> <li> <p> <code>client_id</code> </p> </li> <li> <p> <code>client_secret</code> </p> </li> <li> <p> <code>authorize_scopes</code> </p> </li> <li> <p> <code>api_version</code> </p> </li> </ul> </li> <li> <p>For Sign in with Apple:</p> <ul> <li> <p> <code>client_id</code> </p> </li> <li> <p> <code>team_id</code> </p> </li> <li> <p> <code>key_id</code> </p> </li> <li> <p> <code>private_key</code> </p> </li> <li> <p> <code>authorize_scopes</code> </p> </li> </ul> </li> <li> <p>For OIDC providers:</p> <ul> <li> <p> <code>client_id</code> </p> </li> <li> <p> <code>client_secret</code> </p> </li> <li> <p> <code>attributes_request_method</code> </p> </li> <li> <p> <code>oidc_issuer</code> </p> </li> <li> <p> <code>authorize_scopes</code> </p> </li> <li> <p> <code>authorize_url</code> <i>if not available from discovery URL specified by <code>oidc_issuer</code> key</i> </p> </li> <li> <p> <code>token_url</code> <i>if not available from discovery URL specified by <code>oidc_issuer</code> key</i> </p> </li> <li> <p> <code>attributes_url</code> <i>if not available from discovery URL specified by <code>oidc_issuer</code> key</i> </p> </li> <li> <p> <code>jwks_uri</code> <i>if not available from discovery URL specified by <code>oidc_issuer</code> key</i> </p> </li> </ul> </li> <li> <p>For SAML providers:</p> <ul> <li> <p> <code>MetadataFile</code> OR <code>MetadataURL</code> </p> </li> <li> <p> <code>IDPSignout</code> (boolean) <i>optional</i> </p> </li> </ul> </li> </ul>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identityProviderDetails")]
		public System.Collections.Generic.Dictionary<string, string> IdentityProviderDetails { get; set; }
		
		/// <summary>
		/// The identity provider name.
		/// Required
		/// Min length: 1
		/// Max length: 32
		/// Pattern: ^[^_][\p{L}\p{M}\p{S}\p{N}\p{P}][^_]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identityProviderName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[^_][\p{L}\p{M}\p{S}\p{N}\p{P}][^_]+$")]
		public string IdentityProviderName { get; set; }
		
		/// <summary>
		/// The identity provider type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identityProviderType")]
		public IdentityProviderType IdentityProviderType { get; set; }
		
		/// <summary>
		/// The ARN of the web portal.
		/// Required
		/// Min length: 20
		/// Max length: 2048
		/// Pattern: ^arn:[\w+=\/,.@-]+:[a-zA-Z0-9\-]+:[a-zA-Z0-9\-]*:[a-zA-Z0-9]{1,12}:[a-zA-Z]+(\/[a-fA-F0-9\-]{36})+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="portalArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:[\w+=\/,.@-]+:[a-zA-Z0-9\-]+:[a-zA-Z0-9\-]*:[a-zA-Z0-9]{1,12}:[a-zA-Z]+(\/[a-fA-F0-9\-]{36})+$")]
		public string PortalArn { get; set; }
	}
	
	public class CreateIpAccessSettingsPostBody
	{
		
		/// <summary>
		/// Additional encryption context of the IP access settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalEncryptionContext")]
		public System.Collections.Generic.Dictionary<string, string> AdditionalEncryptionContext { get; set; }
		
		/// <summary>
		/// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. </p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
		/// Min length: 1
		/// Max length: 512
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The custom managed key of the IP access settings.
		/// Min length: 20
		/// Max length: 2048
		/// Pattern: ^arn:[\w+=\/,.@-]+:kms:[a-zA-Z0-9\-]*:[a-zA-Z0-9]{1,12}:key\/[a-zA-Z0-9-]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerManagedKey")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:[\w+=\/,.@-]+:kms:[a-zA-Z0-9\-]*:[a-zA-Z0-9]{1,12}:key\/[a-zA-Z0-9-]+$")]
		public string CustomerManagedKey { get; set; }
		
		/// <summary>
		/// The description of the IP access settings.
		/// Min length: 1
		/// Max length: 256
		/// Pattern: ^.+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^.+$")]
		public string Description { get; set; }
		
		/// <summary>
		/// The display name of the IP access settings.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^.+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^.+$")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The IP rules of the IP access settings.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ipRules")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public IpRule[] IpRules { get; set; }
		
		/// <summary>
		/// The tags to add to the browser settings resource. A tag is a key-value pair.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	public class CreateNetworkSettingsPostBody
	{
		
		/// <summary>
		/// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. </p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
		/// Min length: 1
		/// Max length: 512
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// One or more security groups used to control access from streaming instances to your VPC.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="securityGroupIds")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string[] SecurityGroupIds { get; set; }
		
		/// <summary>
		/// The subnets in which network interfaces are created to connect streaming instances to your VPC. At least two of these subnets must be in different availability zones.
		/// Required
		/// Minimum items: 2
		/// Maximum items: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subnetIds")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string[] SubnetIds { get; set; }
		
		/// <summary>
		/// The tags to add to the network settings resource. A tag is a key-value pair.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// The VPC that streaming instances will connect to.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// Pattern: ^vpc-[0-9a-z]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vpcId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^vpc-[0-9a-z]*$")]
		public string VpcId { get; set; }
	}
	
	public class CreatePortalPostBody
	{
		
		/// <summary>
		/// The additional encryption context of the portal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalEncryptionContext")]
		public System.Collections.Generic.Dictionary<string, string> AdditionalEncryptionContext { get; set; }
		
		/// <summary>
		/// <p>The type of authentication integration points used when signing into the web portal. Defaults to <code>Standard</code>.</p> <p> <code>Standard</code> web portals are authenticated directly through your identity provider. You need to call <code>CreateIdentityProvider</code> to integrate your identity provider with your web portal. User and group access to your web portal is controlled through your identity provider.</p> <p> <code>IAM_Identity_Center</code> web portals are authenticated through AWS IAM Identity Center (successor to AWS Single Sign-On). They provide additional features, such as IdP-initiated authentication. Identity sources (including external identity provider integration), plus user and group access to your web portal, can be configured in the IAM Identity Center.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authenticationType")]
		public AuthenticationType AuthenticationType { get; set; }
		
		/// <summary>
		/// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. </p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
		/// Min length: 1
		/// Max length: 512
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The customer managed key of the web portal.
		/// Min length: 20
		/// Max length: 2048
		/// Pattern: ^arn:[\w+=\/,.@-]+:kms:[a-zA-Z0-9\-]*:[a-zA-Z0-9]{1,12}:key\/[a-zA-Z0-9-]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerManagedKey")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:[\w+=\/,.@-]+:kms:[a-zA-Z0-9\-]*:[a-zA-Z0-9]{1,12}:key\/[a-zA-Z0-9-]+$")]
		public string CustomerManagedKey { get; set; }
		
		/// <summary>
		/// The name of the web portal. This is not visible to users who log into the web portal.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^.+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^.+$")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The tags to add to the web portal. A tag is a key-value pair.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	public class CreateTrustStorePostBody
	{
		
		/// <summary>
		/// A list of CA certificates to be added to the trust store.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certificateList")]
		public string[] CertificateList { get; set; }
		
		/// <summary>
		/// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. </p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
		/// Min length: 1
		/// Max length: 512
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The tags to add to the trust store. A tag is a key-value pair.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	public class CreateUserAccessLoggingSettingsPostBody
	{
		
		/// <summary>
		/// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. </p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
		/// Min length: 1
		/// Max length: 512
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Kinesis stream ARN to which log events are published.
		/// Required
		/// Min length: 20
		/// Max length: 2048
		/// Pattern: arn:[\w+=/,.@-]+:kinesis:[a-zA-Z0-9\-]*:[a-zA-Z0-9]{1,12}:stream/.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kinesisStreamArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"arn:[\w+=/,.@-]+:kinesis:[a-zA-Z0-9\-]*:[a-zA-Z0-9]{1,12}:stream/.+")]
		public string KinesisStreamArn { get; set; }
		
		/// <summary>
		/// The tags to add to the user settings resource. A tag is a key-value pair.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	public class CreateUserSettingsPostBody
	{
		
		/// <summary>
		/// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. </p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
		/// Min length: 1
		/// Max length: 512
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Specifies whether the user can copy text from the streaming session to the local device.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="copyAllowed")]
		public EnabledType CopyAllowed { get; set; }
		
		/// <summary>
		/// The amount of time that a streaming session remains active after users disconnect.
		/// Minimum: 1
		/// Maximum: 600
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disconnectTimeoutInMinutes")]
		[System.ComponentModel.DataAnnotations.Range(1, 600)]
		public System.Nullable<System.Int32> DisconnectTimeoutInMinutes { get; set; }
		
		/// <summary>
		/// Specifies whether the user can download files from the streaming session to the local device.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="downloadAllowed")]
		public EnabledType DownloadAllowed { get; set; }
		
		/// <summary>
		/// The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect timeout interval begins.
		/// Minimum: 0
		/// Maximum: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idleDisconnectTimeoutInMinutes")]
		[System.ComponentModel.DataAnnotations.Range(0, 60)]
		public System.Nullable<System.Int32> IdleDisconnectTimeoutInMinutes { get; set; }
		
		/// <summary>
		/// Specifies whether the user can paste text from the local device to the streaming session.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pasteAllowed")]
		public EnabledType PasteAllowed { get; set; }
		
		/// <summary>
		/// Specifies whether the user can print to the local device.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="printAllowed")]
		public EnabledType PrintAllowed { get; set; }
		
		/// <summary>
		/// The tags to add to the user settings resource. A tag is a key-value pair.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Specifies whether the user can upload files from the local device to the streaming session.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uploadAllowed")]
		public EnabledType UploadAllowed { get; set; }
	}
	
	public class UpdateBrowserSettingsPatchBody
	{
		
		/// <summary>
		/// A JSON string containing Chrome Enterprise policies that will be applied to all streaming sessions. 
		/// Min length: 2
		/// Max length: 131072
		/// Pattern: \{[\S\s]*\}\s*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="browserPolicy")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(131072)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\{[\S\s]*\}\s*")]
		public string BrowserPolicy { get; set; }
		
		/// <summary>
		/// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token return the result from the original successful request. </p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
		/// Min length: 1
		/// Max length: 512
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string ClientToken { get; set; }
	}
	
	public class UpdateIdentityProviderPatchBody
	{
		
		/// <summary>
		/// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token return the result from the original successful request. </p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
		/// Min length: 1
		/// Max length: 512
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// <p>The details of the identity provider. The following list describes the provider detail keys for each identity provider type. </p> <ul> <li> <p>For Google and Login with Amazon:</p> <ul> <li> <p> <code>client_id</code> </p> </li> <li> <p> <code>client_secret</code> </p> </li> <li> <p> <code>authorize_scopes</code> </p> </li> </ul> </li> <li> <p>For Facebook:</p> <ul> <li> <p> <code>client_id</code> </p> </li> <li> <p> <code>client_secret</code> </p> </li> <li> <p> <code>authorize_scopes</code> </p> </li> <li> <p> <code>api_version</code> </p> </li> </ul> </li> <li> <p>For Sign in with Apple:</p> <ul> <li> <p> <code>client_id</code> </p> </li> <li> <p> <code>team_id</code> </p> </li> <li> <p> <code>key_id</code> </p> </li> <li> <p> <code>private_key</code> </p> </li> <li> <p> <code>authorize_scopes</code> </p> </li> </ul> </li> <li> <p>For OIDC providers:</p> <ul> <li> <p> <code>client_id</code> </p> </li> <li> <p> <code>client_secret</code> </p> </li> <li> <p> <code>attributes_request_method</code> </p> </li> <li> <p> <code>oidc_issuer</code> </p> </li> <li> <p> <code>authorize_scopes</code> </p> </li> <li> <p> <code>authorize_url</code> <i>if not available from discovery URL specified by <code>oidc_issuer</code> key</i> </p> </li> <li> <p> <code>token_url</code> <i>if not available from discovery URL specified by <code>oidc_issuer</code> key</i> </p> </li> <li> <p> <code>attributes_url</code> <i>if not available from discovery URL specified by <code>oidc_issuer</code> key</i> </p> </li> <li> <p> <code>jwks_uri</code> <i>if not available from discovery URL specified by <code>oidc_issuer</code> key</i> </p> </li> </ul> </li> <li> <p>For SAML providers:</p> <ul> <li> <p> <code>MetadataFile</code> OR <code>MetadataURL</code> </p> </li> <li> <p> <code>IDPSignout</code> (boolean) <i>optional</i> </p> </li> </ul> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identityProviderDetails")]
		public System.Collections.Generic.Dictionary<string, string> IdentityProviderDetails { get; set; }
		
		/// <summary>
		/// The name of the identity provider.
		/// Min length: 1
		/// Max length: 32
		/// Pattern: ^[^_][\p{L}\p{M}\p{S}\p{N}\p{P}][^_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identityProviderName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[^_][\p{L}\p{M}\p{S}\p{N}\p{P}][^_]+$")]
		public string IdentityProviderName { get; set; }
		
		/// <summary>
		/// The type of the identity provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identityProviderType")]
		public IdentityProviderType IdentityProviderType { get; set; }
	}
	
	public class UpdateIpAccessSettingsPatchBody
	{
		
		/// <summary>
		/// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token return the result from the original successful request. </p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
		/// Min length: 1
		/// Max length: 512
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The description of the IP access settings.
		/// Min length: 1
		/// Max length: 256
		/// Pattern: ^.+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^.+$")]
		public string Description { get; set; }
		
		/// <summary>
		/// The display name of the IP access settings.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^.+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^.+$")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The updated IP rules of the IP access settings.
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipRules")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public IpRule[] IpRules { get; set; }
	}
	
	public class UpdateNetworkSettingsPatchBody
	{
		
		/// <summary>
		/// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token return the result from the original successful request. </p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
		/// Min length: 1
		/// Max length: 512
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// One or more security groups used to control access from streaming instances to your VPC.
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityGroupIds")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string[] SecurityGroupIds { get; set; }
		
		/// <summary>
		/// The subnets in which network interfaces are created to connect streaming instances to your VPC. At least two of these subnets must be in different availability zones.
		/// Minimum items: 2
		/// Maximum items: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetIds")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string[] SubnetIds { get; set; }
		
		/// <summary>
		/// The VPC that streaming instances will connect to.
		/// Min length: 1
		/// Max length: 255
		/// Pattern: ^vpc-[0-9a-z]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vpcId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^vpc-[0-9a-z]*$")]
		public string VpcId { get; set; }
	}
	
	public class UpdatePortalPutBody
	{
		
		/// <summary>
		/// <p>The type of authentication integration points used when signing into the web portal. Defaults to <code>Standard</code>.</p> <p> <code>Standard</code> web portals are authenticated directly through your identity provider. You need to call <code>CreateIdentityProvider</code> to integrate your identity provider with your web portal. User and group access to your web portal is controlled through your identity provider.</p> <p> <code>IAM_Identity_Center</code> web portals are authenticated through AWS IAM Identity Center (successor to AWS Single Sign-On). They provide additional features, such as IdP-initiated authentication. Identity sources (including external identity provider integration), plus user and group access to your web portal, can be configured in the IAM Identity Center.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authenticationType")]
		public AuthenticationType AuthenticationType { get; set; }
		
		/// <summary>
		/// The name of the web portal. This is not visible to users who log into the web portal.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^.+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^.+$")]
		public string DisplayName { get; set; }
	}
	
	public class UpdateTrustStorePatchBody
	{
		
		/// <summary>
		/// A list of CA certificates to add to the trust store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificatesToAdd")]
		public string[] CertificatesToAdd { get; set; }
		
		/// <summary>
		/// A list of CA certificates to delete from a trust store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificatesToDelete")]
		public string[] CertificatesToDelete { get; set; }
		
		/// <summary>
		/// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token return the result from the original successful request. </p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
		/// Min length: 1
		/// Max length: 512
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string ClientToken { get; set; }
	}
	
	public class UpdateUserAccessLoggingSettingsPatchBody
	{
		
		/// <summary>
		/// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token return the result from the original successful request. </p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
		/// Min length: 1
		/// Max length: 512
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Kinesis stream ARN to which log events are published.
		/// Min length: 20
		/// Max length: 2048
		/// Pattern: arn:[\w+=/,.@-]+:kinesis:[a-zA-Z0-9\-]*:[a-zA-Z0-9]{1,12}:stream/.+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kinesisStreamArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"arn:[\w+=/,.@-]+:kinesis:[a-zA-Z0-9\-]*:[a-zA-Z0-9]{1,12}:stream/.+")]
		public string KinesisStreamArn { get; set; }
	}
	
	public class UpdateUserSettingsPatchBody
	{
		
		/// <summary>
		/// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token return the result from the original successful request. </p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
		/// Min length: 1
		/// Max length: 512
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Specifies whether the user can copy text from the streaming session to the local device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copyAllowed")]
		public EnabledType CopyAllowed { get; set; }
		
		/// <summary>
		/// The amount of time that a streaming session remains active after users disconnect.
		/// Minimum: 1
		/// Maximum: 600
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disconnectTimeoutInMinutes")]
		[System.ComponentModel.DataAnnotations.Range(1, 600)]
		public System.Nullable<System.Int32> DisconnectTimeoutInMinutes { get; set; }
		
		/// <summary>
		/// Specifies whether the user can download files from the streaming session to the local device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadAllowed")]
		public EnabledType DownloadAllowed { get; set; }
		
		/// <summary>
		/// The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect timeout interval begins.
		/// Minimum: 0
		/// Maximum: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idleDisconnectTimeoutInMinutes")]
		[System.ComponentModel.DataAnnotations.Range(0, 60)]
		public System.Nullable<System.Int32> IdleDisconnectTimeoutInMinutes { get; set; }
		
		/// <summary>
		/// Specifies whether the user can paste text from the local device to the streaming session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pasteAllowed")]
		public EnabledType PasteAllowed { get; set; }
		
		/// <summary>
		/// Specifies whether the user can print to the local device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="printAllowed")]
		public EnabledType PrintAllowed { get; set; }
		
		/// <summary>
		/// Specifies whether the user can upload files from the local device to the streaming session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploadAllowed")]
		public EnabledType UploadAllowed { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. </p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
		/// Min length: 1
		/// Max length: 512
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The tags of the resource.
		/// Required
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
