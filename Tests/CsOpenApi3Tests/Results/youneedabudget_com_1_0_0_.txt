//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Account
	{
		
		/// <summary>
		/// The current balance of the account in milliunits format
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public long Balance { get; set; }
		
		/// <summary>
		/// The current cleared balance of the account in milliunits format
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cleared_balance")]
		public long Cleared_balance { get; set; }
		
		/// <summary>
		/// Whether this account is closed or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="closed")]
		public bool Closed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="debt_escrow_amounts")]
		public LoanAccountPeriodicValue Debt_escrow_amounts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="debt_interest_rates")]
		public LoanAccountPeriodicValue Debt_interest_rates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="debt_minimum_payments")]
		public LoanAccountPeriodicValue Debt_minimum_payments { get; set; }
		
		/// <summary>
		/// The original debt/loan account balance, specified in milliunits format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debt_original_balance")]
		public System.Nullable<System.Int64> Debt_original_balance { get; set; }
		
		/// <summary>
		/// Whether or not the account has been deleted.  Deleted accounts will only be included in delta requests.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public bool Deleted { get; set; }
		
		/// <summary>
		/// If an account linked to a financial institution (direct_import_linked=true) and the linked connection is not in a healthy state, this will be true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="direct_import_in_error")]
		public System.Nullable<System.Boolean> Direct_import_in_error { get; set; }
		
		/// <summary>
		/// Whether or not the account is linked to a financial institution for automatic transaction import.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="direct_import_linked")]
		public System.Nullable<System.Boolean> Direct_import_linked { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A date/time specifying when the account was last reconciled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_reconciled_at")]
		public System.Nullable<System.DateTimeOffset> Last_reconciled_at { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// Whether this account is on budget or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="on_budget")]
		public bool On_budget { get; set; }
		
		/// <summary>
		/// The payee id which should be used when transferring to this account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_payee_id")]
		public string Transfer_payee_id { get; set; }
		
		/// <summary>
		/// The type of account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public AccountType Type { get; set; }
		
		/// <summary>
		/// The current uncleared balance of the account in milliunits format
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uncleared_balance")]
		public long Uncleared_balance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoanAccountPeriodicValue
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AccountType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="checking")]
		checking = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="savings")]
		savings = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cash")]
		cash = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="creditCard")]
		creditCard = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lineOfCredit")]
		lineOfCredit = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="otherAsset")]
		otherAsset = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="otherLiability")]
		otherLiability = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mortgage")]
		mortgage = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="autoLoan")]
		autoLoan = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="studentLoan")]
		studentLoan = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="personalLoan")]
		personalLoan = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="medicalDebt")]
		medicalDebt = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="otherDebt")]
		otherDebt = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public AccountResponseData Data { get; set; }
	}
	
	public class AccountResponseData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account")]
		public Account Account { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public AccountsResponseData Data { get; set; }
	}
	
	public class AccountsResponseData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accounts")]
		public Account[] Accounts { get; set; }
		
		/// <summary>
		/// The knowledge of the server
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="server_knowledge")]
		public long Server_knowledge { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BudgetDetail : BudgetSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="accounts")]
		public Account[] Accounts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public Category[] Categories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category_groups")]
		public CategoryGroup[] Category_groups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="months")]
		public MonthDetail[] Months { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_locations")]
		public PayeeLocation[] Payee_locations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payees")]
		public Payee[] Payees { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scheduled_subtransactions")]
		public ScheduledSubTransaction[] Scheduled_subtransactions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scheduled_transactions")]
		public ScheduledTransactionSummary[] Scheduled_transactions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtransactions")]
		public SubTransaction[] Subtransactions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transactions")]
		public TransactionSummary[] Transactions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Category
	{
		
		/// <summary>
		/// Activity amount in milliunits format
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="activity")]
		public long Activity { get; set; }
		
		/// <summary>
		/// Balance in milliunits format
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public long Balance { get; set; }
		
		/// <summary>
		/// Budgeted amount in milliunits format
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="budgeted")]
		public long Budgeted { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category_group_id")]
		public string Category_group_id { get; set; }
		
		/// <summary>
		/// Whether or not the category has been deleted.  Deleted categories will only be included in delta requests.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public bool Deleted { get; set; }
		
		/// <summary>
		/// The goal cadence
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="goal_cadence")]
		public System.Nullable<System.Int32> Goal_cadence { get; set; }
		
		/// <summary>
		/// The goal cadence frequency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="goal_cadence_frequency")]
		public System.Nullable<System.Int32> Goal_cadence_frequency { get; set; }
		
		/// <summary>
		/// The month a goal was created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="goal_creation_month")]
		public System.Nullable<System.DateOnly> Goal_creation_month { get; set; }
		
		/// <summary>
		/// The day of the goal
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="goal_day")]
		public System.Nullable<System.Int32> Goal_day { get; set; }
		
		/// <summary>
		/// The number of months, including the current month, left in the current goal period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="goal_months_to_budget")]
		public System.Nullable<System.Int32> Goal_months_to_budget { get; set; }
		
		/// <summary>
		/// The total amount funded towards the goal within the current goal period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="goal_overall_funded")]
		public System.Nullable<System.Int64> Goal_overall_funded { get; set; }
		
		/// <summary>
		/// The amount of funding still needed to complete the goal within the current goal period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="goal_overall_left")]
		public System.Nullable<System.Int64> Goal_overall_left { get; set; }
		
		/// <summary>
		/// The percentage completion of the goal
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="goal_percentage_complete")]
		public System.Nullable<System.Int32> Goal_percentage_complete { get; set; }
		
		/// <summary>
		/// The goal target amount in milliunits
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="goal_target")]
		public System.Nullable<System.Int64> Goal_target { get; set; }
		
		/// <summary>
		/// The original target month for the goal to be completed.  Only some goal types specify this date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="goal_target_month")]
		public System.Nullable<System.DateOnly> Goal_target_month { get; set; }
		
		/// <summary>
		/// The type of goal, if the category has a goal (TB='Target Category Balance', TBD='Target Category Balance by Date', MF='Monthly Funding', NEED='Plan Your Spending')
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="goal_type")]
		public System.Nullable<CategoryGoal_type> Goal_type { get; set; }
		
		/// <summary>
		/// The amount of funding still needed in the current month to stay on track towards completing the goal within the current goal period.  This amount will generally correspond to the 'Underfunded' amount in the web and mobile clients except when viewing a category with a Needed for Spending Goal in a future month.  The web and mobile clients will ignore any funding from a prior goal period when viewing category with a Needed for Spending Goal in a future month.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="goal_under_funded")]
		public System.Nullable<System.Int64> Goal_under_funded { get; set; }
		
		/// <summary>
		/// Whether or not the category is hidden
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hidden")]
		public bool Hidden { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// DEPRECATED: No longer used.  Value will always be null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="original_category_group_id")]
		public string Original_category_group_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CategoryGoal_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TB")]
		TB = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TBD")]
		TBD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MF")]
		MF = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NEED")]
		NEED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEBT")]
		DEBT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_null = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CategoryGroup
	{
		
		/// <summary>
		/// Whether or not the category group has been deleted.  Deleted category groups will only be included in delta requests.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public bool Deleted { get; set; }
		
		/// <summary>
		/// Whether or not the category group is hidden
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hidden")]
		public bool Hidden { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonthDetail : MonthSummary
	{
		
		/// <summary>
		/// The budget month categories.  Amounts (budgeted, activity, balance, etc.) are specific to the {month} parameter specified.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public Category[] Categories { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayeeLocation
	{
		
		/// <summary>
		/// Whether or not the payee location has been deleted.  Deleted payee locations will only be included in delta requests.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public bool Deleted { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public string Latitude { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public string Longitude { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payee_id")]
		public string Payee_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Payee
	{
		
		/// <summary>
		/// Whether or not the payee has been deleted.  Deleted payees will only be included in delta requests.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public bool Deleted { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// If a transfer payee, the `account_id` to which this payee transfers to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transfer_account_id")]
		public string Transfer_account_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduledSubTransaction
	{
		
		/// <summary>
		/// The scheduled subtransaction amount in milliunits format
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public long Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category_id")]
		public string Category_id { get; set; }
		
		/// <summary>
		/// Whether or not the scheduled subtransaction has been deleted.  Deleted scheduled subtransactions will only be included in delta requests.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public bool Deleted { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memo")]
		public string Memo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_id")]
		public string Payee_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scheduled_transaction_id")]
		public string Scheduled_transaction_id { get; set; }
		
		/// <summary>
		/// If a transfer, the account_id which the scheduled subtransaction transfers to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transfer_account_id")]
		public string Transfer_account_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduledTransactionSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The scheduled transaction amount in milliunits format
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public long Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category_id")]
		public string Category_id { get; set; }
		
		/// <summary>
		/// The first date for which the Scheduled Transaction was scheduled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date_first")]
		public System.DateOnly Date_first { get; set; }
		
		/// <summary>
		/// The next date for which the Scheduled Transaction is scheduled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date_next")]
		public System.DateOnly Date_next { get; set; }
		
		/// <summary>
		/// Whether or not the scheduled transaction has been deleted.  Deleted scheduled transactions will only be included in delta requests.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public bool Deleted { get; set; }
		
		/// <summary>
		/// The scheduled transaction flag
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flag_color")]
		public System.Nullable<ScheduledTransactionSummaryFlag_color> Flag_color { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public ScheduledTransactionSummaryFrequency Frequency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memo")]
		public string Memo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_id")]
		public string Payee_id { get; set; }
		
		/// <summary>
		/// If a transfer, the account_id which the scheduled transaction transfers to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transfer_account_id")]
		public string Transfer_account_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ScheduledTransactionSummaryFlag_color
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="red")]
		red = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="orange")]
		orange = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yellow")]
		yellow = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="green")]
		green = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="blue")]
		blue = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="purple")]
		purple = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_null = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ScheduledTransactionSummaryFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="never")]
		never = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="daily")]
		daily = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="weekly")]
		weekly = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="everyOtherWeek")]
		everyOtherWeek = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="twiceAMonth")]
		twiceAMonth = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="every4Weeks")]
		every4Weeks = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="monthly")]
		monthly = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="everyOtherMonth")]
		everyOtherMonth = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="every3Months")]
		every3Months = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="every4Months")]
		every4Months = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="twiceAYear")]
		twiceAYear = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yearly")]
		yearly = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="everyOtherYear")]
		everyOtherYear = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubTransaction
	{
		
		/// <summary>
		/// The subtransaction amount in milliunits format
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public long Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category_id")]
		public string Category_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category_name")]
		public string Category_name { get; set; }
		
		/// <summary>
		/// Whether or not the subtransaction has been deleted.  Deleted subtransactions will only be included in delta requests.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public bool Deleted { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memo")]
		public string Memo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_id")]
		public string Payee_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_name")]
		public string Payee_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
		
		/// <summary>
		/// If a transfer, the account_id which the subtransaction transfers to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transfer_account_id")]
		public string Transfer_account_id { get; set; }
		
		/// <summary>
		/// If a transfer, the id of transaction on the other side of the transfer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transfer_transaction_id")]
		public string Transfer_transaction_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransactionSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The transaction amount in milliunits format
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public long Amount { get; set; }
		
		/// <summary>
		/// Whether or not the transaction is approved
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approved")]
		public bool Approved { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category_id")]
		public string Category_id { get; set; }
		
		/// <summary>
		/// The cleared status of the transaction
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cleared")]
		public TransactionSummaryCleared Cleared { get; set; }
		
		/// <summary>
		/// The transaction date in ISO format (e.g. 2016-12-01)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.DateOnly Date { get; set; }
		
		/// <summary>
		/// If the transaction is a debt/loan account transaction, the type of transaction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debt_transaction_type")]
		public System.Nullable<TransactionSummaryDebt_transaction_type> Debt_transaction_type { get; set; }
		
		/// <summary>
		/// Whether or not the transaction has been deleted.  Deleted transactions will only be included in delta requests.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public bool Deleted { get; set; }
		
		/// <summary>
		/// The transaction flag
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flag_color")]
		public System.Nullable<TransactionSummaryFlag_color> Flag_color { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// If the transaction was imported, this field is a unique (by account) import identifier.  If this transaction was imported through File Based Import or Direct Import and not through the API, the import_id will have the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'.  For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="import_id")]
		public string Import_id { get; set; }
		
		/// <summary>
		/// If the transaction was imported, the payee name that was used when importing and before applying any payee rename rules
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="import_payee_name")]
		public string Import_payee_name { get; set; }
		
		/// <summary>
		/// If the transaction was imported, the original payee name as it appeared on the statement
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="import_payee_name_original")]
		public string Import_payee_name_original { get; set; }
		
		/// <summary>
		/// If transaction is matched, the id of the matched transaction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matched_transaction_id")]
		public string Matched_transaction_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memo")]
		public string Memo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_id")]
		public string Payee_id { get; set; }
		
		/// <summary>
		/// If a transfer transaction, the account to which it transfers
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transfer_account_id")]
		public string Transfer_account_id { get; set; }
		
		/// <summary>
		/// If a transfer transaction, the id of transaction on the other side of the transfer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transfer_transaction_id")]
		public string Transfer_transaction_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TransactionSummaryCleared
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cleared")]
		cleared = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="uncleared")]
		uncleared = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="reconciled")]
		reconciled = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TransactionSummaryDebt_transaction_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="payment")]
		payment = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="refund")]
		refund = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fee")]
		fee = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="interest")]
		interest = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="escrow")]
		escrow = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="balancedAdjustment")]
		balancedAdjustment = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="credit")]
		credit = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="charge")]
		charge = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_null = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TransactionSummaryFlag_color
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="red")]
		red = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="orange")]
		orange = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yellow")]
		yellow = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="green")]
		green = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="blue")]
		blue = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="purple")]
		purple = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_null = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BudgetDetailResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public BudgetDetailResponseData Data { get; set; }
	}
	
	public class BudgetDetailResponseData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="budget")]
		public BudgetDetail Budget { get; set; }
		
		/// <summary>
		/// The knowledge of the server
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="server_knowledge")]
		public long Server_knowledge { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BudgetSettings
	{
		
		/// <summary>
		/// The currency format setting for the budget.  In some cases the format will not be available and will be specified as null.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency_format")]
		public CurrencyFormat Currency_format { get; set; }
		
		/// <summary>
		/// The date format setting for the budget.  In some cases the format will not be available and will be specified as null.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date_format")]
		public DateFormat Date_format { get; set; }
	}
	
	/// <summary>
	/// The currency format setting for the budget.  In some cases the format will not be available and will be specified as null.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CurrencyFormat
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency_symbol")]
		public string Currency_symbol { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decimal_digits")]
		public int Decimal_digits { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decimal_separator")]
		public string Decimal_separator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="display_symbol")]
		public bool Display_symbol { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="example_format")]
		public string Example_format { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="group_separator")]
		public string Group_separator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="iso_code")]
		public string Iso_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="symbol_first")]
		public bool Symbol_first { get; set; }
	}
	
	/// <summary>
	/// The date format setting for the budget.  In some cases the format will not be available and will be specified as null.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DateFormat
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BudgetSettingsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public BudgetSettingsResponseData Data { get; set; }
	}
	
	public class BudgetSettingsResponseData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public BudgetSettings Settings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BudgetSummary
	{
		
		/// <summary>
		/// The budget accounts (only included if `include_accounts=true` specified as query parameter)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accounts")]
		public Account[] Accounts { get; set; }
		
		/// <summary>
		/// The currency format setting for the budget.  In some cases the format will not be available and will be specified as null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency_format")]
		public CurrencyFormat Currency_format { get; set; }
		
		/// <summary>
		/// The date format setting for the budget.  In some cases the format will not be available and will be specified as null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_format")]
		public DateFormat Date_format { get; set; }
		
		/// <summary>
		/// The earliest budget month
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_month")]
		public System.Nullable<System.DateOnly> First_month { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The last time any changes were made to the budget from either a web or mobile client
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_modified_on")]
		public System.Nullable<System.DateTimeOffset> Last_modified_on { get; set; }
		
		/// <summary>
		/// The latest budget month
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_month")]
		public System.Nullable<System.DateOnly> Last_month { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BudgetSummaryResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public BudgetSummaryResponseData Data { get; set; }
	}
	
	public class BudgetSummaryResponseData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="budgets")]
		public BudgetSummary[] Budgets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="default_budget")]
		public BudgetSummary Default_budget { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BulkResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public BulkResponseData Data { get; set; }
	}
	
	public class BulkResponseData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bulk")]
		public BulkResponseDataBulk Bulk { get; set; }
	}
	
	public class BulkResponseDataBulk
	{
		
		/// <summary>
		/// If any Transactions were not created because they had an `import_id` matching a transaction already on the same account, the specified import_id(s) will be included in this list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="duplicate_import_ids")]
		public string[] Duplicate_import_ids { get; set; }
		
		/// <summary>
		/// The list of Transaction ids that were created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_ids")]
		public string[] Transaction_ids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BulkTransactions
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactions")]
		public SaveTransaction[] Transactions { get; set; }
	}
	
	public class SaveTransaction
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CategoriesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CategoriesResponseData Data { get; set; }
	}
	
	public class CategoriesResponseData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category_groups")]
		public CategoryGroupWithCategories[] Category_groups { get; set; }
		
		/// <summary>
		/// The knowledge of the server
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="server_knowledge")]
		public long Server_knowledge { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CategoryGroupWithCategories : CategoryGroup
	{
		
		/// <summary>
		/// Category group categories.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public Category[] Categories { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CategoryResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CategoryResponseData Data { get; set; }
	}
	
	public class CategoryResponseData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public Category Category { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorDetail
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ErrorDetail Error { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HybridTransaction : TransactionSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_name")]
		public string Account_name { get; set; }
		
		/// <summary>
		/// The name of the category.  If a split transaction, this will be 'Split'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category_name")]
		public string Category_name { get; set; }
		
		/// <summary>
		/// For subtransaction types, this is the id of the parent transaction.  For transaction types, this id will be always be null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parent_transaction_id")]
		public string Parent_transaction_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_name")]
		public string Payee_name { get; set; }
		
		/// <summary>
		/// Whether the hybrid transaction represents a regular transaction or a subtransaction
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public HybridTransactionType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HybridTransactionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="transaction")]
		transaction = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="subtransaction")]
		subtransaction = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HybridTransactionsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public HybridTransactionsResponseData Data { get; set; }
	}
	
	public class HybridTransactionsResponseData
	{
		
		/// <summary>
		/// The knowledge of the server
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="server_knowledge")]
		public System.Nullable<System.Int64> Server_knowledge { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactions")]
		public HybridTransaction[] Transactions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonthDetailResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public MonthDetailResponseData Data { get; set; }
	}
	
	public class MonthDetailResponseData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="month")]
		public MonthDetail Month { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonthSummariesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public MonthSummariesResponseData Data { get; set; }
	}
	
	public class MonthSummariesResponseData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="months")]
		public MonthSummary[] Months { get; set; }
		
		/// <summary>
		/// The knowledge of the server
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="server_knowledge")]
		public long Server_knowledge { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonthSummary
	{
		
		/// <summary>
		/// The total amount of transactions in the month, excluding those categorized to 'Inflow: Ready to Assign'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="activity")]
		public long Activity { get; set; }
		
		/// <summary>
		/// The Age of Money as of the month
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="age_of_money")]
		public System.Nullable<System.Int32> Age_of_money { get; set; }
		
		/// <summary>
		/// The total amount budgeted in the month
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="budgeted")]
		public long Budgeted { get; set; }
		
		/// <summary>
		/// Whether or not the month has been deleted.  Deleted months will only be included in delta requests.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public bool Deleted { get; set; }
		
		/// <summary>
		/// The total amount of transactions categorized to 'Inflow: Ready to Assign' in the month
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="income")]
		public long Income { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.DateOnly Month { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// The available amount for 'Ready to Assign'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="to_be_budgeted")]
		public long To_be_budgeted { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PatchMonthCategoryWrapper
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public SaveMonthCategory Category { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SaveMonthCategory
	{
		
		/// <summary>
		/// Budgeted amount in milliunits format
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="budgeted")]
		public long Budgeted { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PatchTransactionsWrapper
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactions")]
		public SaveTransactionWithId[] Transactions { get; set; }
	}
	
	public class SaveTransactionWithId
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayeeLocationResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PayeeLocationResponseData Data { get; set; }
	}
	
	public class PayeeLocationResponseData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payee_location")]
		public PayeeLocation Payee_location { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayeeLocationsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PayeeLocationsResponseData Data { get; set; }
	}
	
	public class PayeeLocationsResponseData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payee_locations")]
		public PayeeLocation[] Payee_locations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayeeResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PayeeResponseData Data { get; set; }
	}
	
	public class PayeeResponseData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payee")]
		public Payee Payee { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayeesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PayeesResponseData Data { get; set; }
	}
	
	public class PayeesResponseData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payees")]
		public Payee[] Payees { get; set; }
		
		/// <summary>
		/// The knowledge of the server
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="server_knowledge")]
		public long Server_knowledge { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PostAccountWrapper
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account")]
		public SaveAccount Account { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SaveAccount
	{
		
		/// <summary>
		/// The current balance of the account in milliunits format
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public long Balance { get; set; }
		
		/// <summary>
		/// The name of the account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public AccountType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PostTransactionsWrapper
	{
		
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public SaveTransaction Transaction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transactions")]
		public SaveTransaction[] Transactions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutTransactionWrapper
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public SaveTransaction Transaction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SaveCategoryResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public SaveCategoryResponseData Data { get; set; }
	}
	
	public class SaveCategoryResponseData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public Category Category { get; set; }
		
		/// <summary>
		/// The knowledge of the server
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="server_knowledge")]
		public long Server_knowledge { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SaveSubTransaction
	{
		
		/// <summary>
		/// The subtransaction amount in milliunits format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public long Amount { get; set; }
		
		/// <summary>
		/// The category for the subtransaction.  Credit Card Payment categories are not permitted and will be ignored if supplied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category_id")]
		public string Category_id { get; set; }
		
		/// <summary>
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memo")]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Memo { get; set; }
		
		/// <summary>
		/// The payee for the subtransaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payee_id")]
		public string Payee_id { get; set; }
		
		/// <summary>
		/// The payee name.  If a `payee_name` value is provided and `payee_id` has a null value, the `payee_name` value will be used to resolve the payee by either (1) a matching payee rename rule (only if import_id is also specified on parent transaction) or (2) a payee with the same name or (3) creation of a new payee.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payee_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Payee_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SaveTransactionWithOptionalFields
	{
		
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The transaction amount in milliunits format.  Split transaction amounts cannot be changed and if a different amount is supplied it will be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int64> Amount { get; set; }
		
		/// <summary>
		/// Whether or not the transaction is approved.  If not supplied, transaction will be unapproved by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approved")]
		public System.Nullable<System.Boolean> Approved { get; set; }
		
		/// <summary>
		/// The category for the transaction.  To configure a split transaction, you can specify null for `category_id` and provide a `subtransactions` array as part of the transaction object.  If an existing transaction is a split, the `category_id` cannot be changed.  Credit Card Payment categories are not permitted and will be ignored if supplied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category_id")]
		public string Category_id { get; set; }
		
		/// <summary>
		/// The cleared status of the transaction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cleared")]
		public TransactionSummaryCleared Cleared { get; set; }
		
		/// <summary>
		/// The transaction date in ISO format (e.g. 2016-12-01).  Future dates (scheduled transactions) are not permitted.  Split transaction dates cannot be changed and if a different date is supplied it will be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		/// <summary>
		/// The transaction flag
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flag_color")]
		public System.Nullable<SaveTransactionWithOptionalFieldsFlag_color> Flag_color { get; set; }
		
		/// <summary>
		/// If specified, the new transaction will be assigned this `import_id` and considered "imported".  We will also attempt to match this imported transaction to an existing "user-entered" transation on the same account, with the same amount, and with a date +/-10 days from the imported transaction date.<br><br>Transactions imported through File Based Import or Direct Import (not through the API) are assigned an import_id in the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'. For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.  Using a consistent format will prevent duplicates through Direct Import and File Based Import.<br><br>If import_id is omitted or specified as null, the transaction will be treated as a "user-entered" transaction. As such, it will be eligible to be matched against transactions later being imported (via DI, FBI, or API).
		/// Max length: 36
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="import_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string Import_id { get; set; }
		
		/// <summary>
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memo")]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Memo { get; set; }
		
		/// <summary>
		/// The payee for the transaction.  To create a transfer between two accounts, use the account transfer payee pointing to the target account.  Account transfer payees are specified as `tranfer_payee_id` on the account resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payee_id")]
		public string Payee_id { get; set; }
		
		/// <summary>
		/// The payee name.  If a `payee_name` value is provided and `payee_id` has a null value, the `payee_name` value will be used to resolve the payee by either (1) a matching payee rename rule (only if `import_id` is also specified) or (2) a payee with the same name or (3) creation of a new payee.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payee_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Payee_name { get; set; }
		
		/// <summary>
		/// An array of subtransactions to configure a transaction as a split.  Updating `subtransactions` on an existing split transaction is not supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subtransactions")]
		public SaveSubTransaction[] Subtransactions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SaveTransactionWithOptionalFieldsFlag_color
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="red")]
		red = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="orange")]
		orange = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yellow")]
		yellow = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="green")]
		green = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="blue")]
		blue = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="purple")]
		purple = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_null = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SaveTransactionsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public SaveTransactionsResponseData Data { get; set; }
	}
	
	public class SaveTransactionsResponseData
	{
		
		/// <summary>
		/// If multiple transactions were specified, a list of import_ids that were not created because of an existing `import_id` found on the same account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duplicate_import_ids")]
		public string[] Duplicate_import_ids { get; set; }
		
		/// <summary>
		/// The knowledge of the server
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="server_knowledge")]
		public long Server_knowledge { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public TransactionDetail Transaction { get; set; }
		
		/// <summary>
		/// The transaction ids that were saved
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_ids")]
		public string[] Transaction_ids { get; set; }
		
		/// <summary>
		/// If multiple transactions were specified, the transactions that were saved
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactions")]
		public TransactionDetail[] Transactions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransactionDetail : TransactionSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_name")]
		public string Account_name { get; set; }
		
		/// <summary>
		/// The name of the category.  If a split transaction, this will be 'Split'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category_name")]
		public string Category_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_name")]
		public string Payee_name { get; set; }
		
		/// <summary>
		/// If a split transaction, the subtransactions.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subtransactions")]
		public SubTransaction[] Subtransactions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduledTransactionDetail : ScheduledTransactionSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_name")]
		public string Account_name { get; set; }
		
		/// <summary>
		/// The name of the category.  If a split scheduled transaction, this will be 'Split'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category_name")]
		public string Category_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_name")]
		public string Payee_name { get; set; }
		
		/// <summary>
		/// If a split scheduled transaction, the subtransactions.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subtransactions")]
		public ScheduledSubTransaction[] Subtransactions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduledTransactionResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ScheduledTransactionResponseData Data { get; set; }
	}
	
	public class ScheduledTransactionResponseData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scheduled_transaction")]
		public ScheduledTransactionDetail Scheduled_transaction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduledTransactionsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ScheduledTransactionsResponseData Data { get; set; }
	}
	
	public class ScheduledTransactionsResponseData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scheduled_transactions")]
		public ScheduledTransactionDetail[] Scheduled_transactions { get; set; }
		
		/// <summary>
		/// The knowledge of the server
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="server_knowledge")]
		public long Server_knowledge { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransactionResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TransactionResponseData Data { get; set; }
	}
	
	public class TransactionResponseData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public TransactionDetail Transaction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransactionsImportResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TransactionsImportResponseData Data { get; set; }
	}
	
	public class TransactionsImportResponseData
	{
		
		/// <summary>
		/// The list of transaction ids that were imported.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_ids")]
		public string[] Transaction_ids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransactionsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TransactionsResponseData Data { get; set; }
	}
	
	public class TransactionsResponseData
	{
		
		/// <summary>
		/// The knowledge of the server
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="server_knowledge")]
		public long Server_knowledge { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactions")]
		public TransactionDetail[] Transactions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class User
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UserResponseData Data { get; set; }
	}
	
	public class UserResponseData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List budgets
		/// Returns budgets list with summary information
		/// GetBudgets budgets
		/// </summary>
		/// <param name="include_accounts">Whether to include the list of budget accounts</param>
		/// <returns>The list of budgets</returns>
		public async Task<BudgetSummaryResponse> GetBudgetsAsync(bool include_accounts, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "budgets?include_accounts="+include_accounts;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BudgetSummaryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Single budget
		/// Returns a single budget with all related entities.  This resource is effectively a full budget export.
		/// GetBudgetById budgets/{budget_id}
		/// </summary>
		/// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
		/// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
		/// <returns>The requested budget</returns>
		public async Task<BudgetDetailResponse> GetBudgetByIdAsync(string budget_id, long last_knowledge_of_server, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "budgets/"+ (budget_id==null? "" : System.Uri.EscapeDataString(budget_id))+"&last_knowledge_of_server="+last_knowledge_of_server;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BudgetDetailResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Account list
		/// Returns all accounts
		/// GetAccounts budgets/{budget_id}/accounts
		/// </summary>
		/// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
		/// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
		/// <returns>The list of requested accounts</returns>
		public async Task<AccountsResponse> GetAccountsAsync(string budget_id, long last_knowledge_of_server, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "budgets/"+ (budget_id==null? "" : System.Uri.EscapeDataString(budget_id))+"/accounts&last_knowledge_of_server="+last_knowledge_of_server;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccountsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new account
		/// Creates a new account
		/// CreateAccount budgets/{budget_id}/accounts
		/// </summary>
		/// <param name="budget_id">The id of the budget ("last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget)</param>
		/// <param name="requestBody">The account to create.</param>
		public async Task CreateAccountAsync(string budget_id, PostAccountWrapper requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "budgets/"+ (budget_id==null? "" : System.Uri.EscapeDataString(budget_id))+"/accounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Single account
		/// Returns a single account
		/// GetAccountById budgets/{budget_id}/accounts/{account_id}
		/// </summary>
		/// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
		/// <param name="account_id">The id of the account</param>
		/// <returns>The requested account</returns>
		public async Task<AccountResponse> GetAccountByIdAsync(string budget_id, string account_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "budgets/"+ (budget_id==null? "" : System.Uri.EscapeDataString(budget_id))+"/accounts/"+ (account_id==null? "" : System.Uri.EscapeDataString(account_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List account transactions
		/// Returns all transactions for a specified account
		/// GetTransactionsByAccount budgets/{budget_id}/accounts/{account_id}/transactions
		/// </summary>
		/// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
		/// <param name="account_id">The id of the account</param>
		/// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
		/// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
		/// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
		/// <returns>The list of requested transactions</returns>
		public async Task<TransactionsResponse> GetTransactionsByAccountAsync(string budget_id, string account_id, System.DateOnly since_date, GetTransactionsByAccountType type, long last_knowledge_of_server, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "budgets/"+ (budget_id==null? "" : System.Uri.EscapeDataString(budget_id))+"/accounts/"+ (account_id==null? "" : System.Uri.EscapeDataString(account_id))+"/transactions&since_date="+since_date+"&type=" + type+"&last_knowledge_of_server="+last_knowledge_of_server;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TransactionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List categories
		/// Returns all categories grouped by category group.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
		/// GetCategories budgets/{budget_id}/categories
		/// </summary>
		/// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
		/// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
		/// <returns>The categories grouped by category group</returns>
		public async Task<CategoriesResponse> GetCategoriesAsync(string budget_id, long last_knowledge_of_server, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "budgets/"+ (budget_id==null? "" : System.Uri.EscapeDataString(budget_id))+"/categories&last_knowledge_of_server="+last_knowledge_of_server;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CategoriesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Single category
		/// Returns a single category.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
		/// GetCategoryById budgets/{budget_id}/categories/{category_id}
		/// </summary>
		/// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
		/// <param name="category_id">The id of the category</param>
		/// <returns>The requested category</returns>
		public async Task<CategoryResponse> GetCategoryByIdAsync(string budget_id, string category_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "budgets/"+ (budget_id==null? "" : System.Uri.EscapeDataString(budget_id))+"/categories/"+ (category_id==null? "" : System.Uri.EscapeDataString(category_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CategoryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List category transactions
		/// Returns all transactions for a specified category
		/// GetTransactionsByCategory budgets/{budget_id}/categories/{category_id}/transactions
		/// </summary>
		/// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
		/// <param name="category_id">The id of the category</param>
		/// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
		/// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
		/// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
		/// <returns>The list of requested transactions</returns>
		public async Task<HybridTransactionsResponse> GetTransactionsByCategoryAsync(string budget_id, string category_id, System.DateOnly since_date, GetTransactionsByAccountType type, long last_knowledge_of_server, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "budgets/"+ (budget_id==null? "" : System.Uri.EscapeDataString(budget_id))+"/categories/"+ (category_id==null? "" : System.Uri.EscapeDataString(category_id))+"/transactions&since_date="+since_date+"&type=" + type+"&last_knowledge_of_server="+last_knowledge_of_server;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HybridTransactionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List budget months
		/// Returns all budget months
		/// GetBudgetMonths budgets/{budget_id}/months
		/// </summary>
		/// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
		/// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
		/// <returns>The list of budget months</returns>
		public async Task<MonthSummariesResponse> GetBudgetMonthsAsync(string budget_id, long last_knowledge_of_server, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "budgets/"+ (budget_id==null? "" : System.Uri.EscapeDataString(budget_id))+"/months&last_knowledge_of_server="+last_knowledge_of_server;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MonthSummariesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Single budget month
		/// Returns a single budget month
		/// GetBudgetMonth budgets/{budget_id}/months/{month}
		/// </summary>
		/// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
		/// <param name="month">The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC))</param>
		/// <returns>The budget month detail</returns>
		public async Task<MonthDetailResponse> GetBudgetMonthAsync(string budget_id, System.DateOnly month, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "budgets/"+ (budget_id==null? "" : System.Uri.EscapeDataString(budget_id))+"/months/"+month;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MonthDetailResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Single category for a specific budget month
		/// Returns a single category for a specific budget month.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
		/// GetMonthCategoryById budgets/{budget_id}/months/{month}/categories/{category_id}
		/// </summary>
		/// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
		/// <param name="month">The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC))</param>
		/// <param name="category_id">The id of the category</param>
		/// <returns>The requested month category</returns>
		public async Task<CategoryResponse> GetMonthCategoryByIdAsync(string budget_id, System.DateOnly month, string category_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "budgets/"+ (budget_id==null? "" : System.Uri.EscapeDataString(budget_id))+"/months/"+month+"/categories/"+ (category_id==null? "" : System.Uri.EscapeDataString(category_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CategoryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a category for a specific month
		/// Update a category for a specific month.  Only `budgeted` amount can be updated.
		/// UpdateMonthCategory budgets/{budget_id}/months/{month}/categories/{category_id}
		/// </summary>
		/// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
		/// <param name="month">The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC))</param>
		/// <param name="category_id">The id of the category</param>
		/// <param name="requestBody">The category to update.  Only `budgeted` amount can be updated and any other fields specified will be ignored.</param>
		/// <returns>The month category was successfully updated</returns>
		public async Task<SaveCategoryResponse> UpdateMonthCategoryAsync(string budget_id, System.DateOnly month, string category_id, PatchMonthCategoryWrapper requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "budgets/"+ (budget_id==null? "" : System.Uri.EscapeDataString(budget_id))+"/months/"+month+"/categories/"+ (category_id==null? "" : System.Uri.EscapeDataString(category_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SaveCategoryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List payee locations
		/// Returns all payee locations
		/// GetPayeeLocations budgets/{budget_id}/payee_locations
		/// </summary>
		/// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
		/// <returns>The list of payee locations</returns>
		public async Task<PayeeLocationsResponse> GetPayeeLocationsAsync(string budget_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "budgets/"+ (budget_id==null? "" : System.Uri.EscapeDataString(budget_id))+"/payee_locations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayeeLocationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Single payee location
		/// Returns a single payee location
		/// GetPayeeLocationById budgets/{budget_id}/payee_locations/{payee_location_id}
		/// </summary>
		/// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
		/// <param name="payee_location_id">id of payee location</param>
		/// <returns>The payee location</returns>
		public async Task<PayeeLocationResponse> GetPayeeLocationByIdAsync(string budget_id, string payee_location_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "budgets/"+ (budget_id==null? "" : System.Uri.EscapeDataString(budget_id))+"/payee_locations/"+ (payee_location_id==null? "" : System.Uri.EscapeDataString(payee_location_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayeeLocationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List payees
		/// Returns all payees
		/// GetPayees budgets/{budget_id}/payees
		/// </summary>
		/// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
		/// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
		/// <returns>The requested list of payees</returns>
		public async Task<PayeesResponse> GetPayeesAsync(string budget_id, long last_knowledge_of_server, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "budgets/"+ (budget_id==null? "" : System.Uri.EscapeDataString(budget_id))+"/payees&last_knowledge_of_server="+last_knowledge_of_server;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayeesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Single payee
		/// Returns a single payee
		/// GetPayeeById budgets/{budget_id}/payees/{payee_id}
		/// </summary>
		/// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
		/// <param name="payee_id">The id of the payee</param>
		/// <returns>The requested payee</returns>
		public async Task<PayeeResponse> GetPayeeByIdAsync(string budget_id, string payee_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "budgets/"+ (budget_id==null? "" : System.Uri.EscapeDataString(budget_id))+"/payees/"+ (payee_id==null? "" : System.Uri.EscapeDataString(payee_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayeeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List locations for a payee
		/// Returns all payee locations for a specified payee
		/// GetPayeeLocationsByPayee budgets/{budget_id}/payees/{payee_id}/payee_locations
		/// </summary>
		/// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
		/// <param name="payee_id">id of payee</param>
		/// <returns>The list of requested payee locations</returns>
		public async Task<PayeeLocationsResponse> GetPayeeLocationsByPayeeAsync(string budget_id, string payee_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "budgets/"+ (budget_id==null? "" : System.Uri.EscapeDataString(budget_id))+"/payees/"+ (payee_id==null? "" : System.Uri.EscapeDataString(payee_id))+"/payee_locations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayeeLocationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List payee transactions
		/// Returns all transactions for a specified payee
		/// GetTransactionsByPayee budgets/{budget_id}/payees/{payee_id}/transactions
		/// </summary>
		/// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
		/// <param name="payee_id">The id of the payee</param>
		/// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
		/// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
		/// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
		/// <returns>The list of requested transactions</returns>
		public async Task<HybridTransactionsResponse> GetTransactionsByPayeeAsync(string budget_id, string payee_id, System.DateOnly since_date, GetTransactionsByAccountType type, long last_knowledge_of_server, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "budgets/"+ (budget_id==null? "" : System.Uri.EscapeDataString(budget_id))+"/payees/"+ (payee_id==null? "" : System.Uri.EscapeDataString(payee_id))+"/transactions&since_date="+since_date+"&type=" + type+"&last_knowledge_of_server="+last_knowledge_of_server;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HybridTransactionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List scheduled transactions
		/// Returns all scheduled transactions
		/// GetScheduledTransactions budgets/{budget_id}/scheduled_transactions
		/// </summary>
		/// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
		/// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
		/// <returns>The list of requested scheduled transactions</returns>
		public async Task<ScheduledTransactionsResponse> GetScheduledTransactionsAsync(string budget_id, long last_knowledge_of_server, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "budgets/"+ (budget_id==null? "" : System.Uri.EscapeDataString(budget_id))+"/scheduled_transactions&last_knowledge_of_server="+last_knowledge_of_server;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScheduledTransactionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Single scheduled transaction
		/// Returns a single scheduled transaction
		/// GetScheduledTransactionById budgets/{budget_id}/scheduled_transactions/{scheduled_transaction_id}
		/// </summary>
		/// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
		/// <param name="scheduled_transaction_id">The id of the scheduled transaction</param>
		/// <returns>The requested Scheduled Transaction</returns>
		public async Task<ScheduledTransactionResponse> GetScheduledTransactionByIdAsync(string budget_id, string scheduled_transaction_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "budgets/"+ (budget_id==null? "" : System.Uri.EscapeDataString(budget_id))+"/scheduled_transactions/"+ (scheduled_transaction_id==null? "" : System.Uri.EscapeDataString(scheduled_transaction_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScheduledTransactionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Budget Settings
		/// Returns settings for a budget
		/// GetBudgetSettingsById budgets/{budget_id}/settings
		/// </summary>
		/// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
		/// <returns>The requested budget settings</returns>
		public async Task<BudgetSettingsResponse> GetBudgetSettingsByIdAsync(string budget_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "budgets/"+ (budget_id==null? "" : System.Uri.EscapeDataString(budget_id))+"/settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BudgetSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List transactions
		/// Returns budget transactions
		/// GetTransactions budgets/{budget_id}/transactions
		/// </summary>
		/// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
		/// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
		/// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
		/// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
		/// <returns>The list of requested transactions</returns>
		public async Task<TransactionsResponse> GetTransactionsAsync(string budget_id, System.DateOnly since_date, GetTransactionsByAccountType type, long last_knowledge_of_server, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "budgets/"+ (budget_id==null? "" : System.Uri.EscapeDataString(budget_id))+"/transactions&since_date="+since_date+"&type=" + type+"&last_knowledge_of_server="+last_knowledge_of_server;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TransactionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update multiple transactions
		/// Updates multiple transactions, by `id` or `import_id`.
		/// UpdateTransactions budgets/{budget_id}/transactions
		/// </summary>
		/// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
		/// <param name="requestBody">The transactions to update. Each transaction must have either an `id` or `import_id` specified. If `id` is specified as null an `import_id` value can be provided which will allow transaction(s) to be updated by their `import_id`. If an `id` is specified, it will always be used for lookup.</param>
		public async Task UpdateTransactionsAsync(string budget_id, PatchTransactionsWrapper requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "budgets/"+ (budget_id==null? "" : System.Uri.EscapeDataString(budget_id))+"/transactions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a single transaction or multiple transactions
		/// Creates a single transaction or multiple transactions.  If you provide a body containing a `transaction` object, a single transaction will be created and if you provide a body containing a `transactions` array, multiple transactions will be created.  Scheduled transactions cannot be created on this endpoint.
		/// CreateTransaction budgets/{budget_id}/transactions
		/// </summary>
		/// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
		/// <param name="requestBody">The transaction or transactions to create.  To create a single transaction you can specify a value for the `transaction` object and to create multiple transactions you can specify an array of `transactions`.  It is expected that you will only provide a value for one of these objects.</param>
		public async Task CreateTransactionAsync(string budget_id, PostTransactionsWrapper requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "budgets/"+ (budget_id==null? "" : System.Uri.EscapeDataString(budget_id))+"/transactions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Bulk create transactions
		/// Creates multiple transactions.  Although this endpoint is still supported, it is recommended to use 'POST /budgets/{budget_id}/transactions' to create multiple transactions.
		/// BulkCreateTransactions budgets/{budget_id}/transactions/bulk
		/// </summary>
		/// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
		/// <param name="requestBody">The list of transactions to create</param>
		public async Task BulkCreateTransactionsAsync(string budget_id, BulkTransactions requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "budgets/"+ (budget_id==null? "" : System.Uri.EscapeDataString(budget_id))+"/transactions/bulk";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Import transactions
		/// Imports available transactions on all linked accounts for the given budget.  Linked accounts allow transactions to be imported directly from a specified financial institution and this endpoint initiates that import.  Sending a request to this endpoint is the equivalent of clicking "Import" on each account in the web application or tapping the "New Transactions" banner in the mobile applications.  The response for this endpoint contains the transaction ids that have been imported.
		/// ImportTransactions budgets/{budget_id}/transactions/import
		/// </summary>
		/// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
		/// <returns>The request was successful but there were no transactions to import</returns>
		public async Task<TransactionsImportResponse> ImportTransactionsAsync(string budget_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "budgets/"+ (budget_id==null? "" : System.Uri.EscapeDataString(budget_id))+"/transactions/import";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TransactionsImportResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing transaction
		/// Deletes a transaction
		/// DeleteTransaction budgets/{budget_id}/transactions/{transaction_id}
		/// </summary>
		/// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
		/// <param name="transaction_id">The id of the transaction</param>
		/// <returns>The transaction was successfully deleted</returns>
		public async Task<TransactionResponse> DeleteTransactionAsync(string budget_id, string transaction_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "budgets/"+ (budget_id==null? "" : System.Uri.EscapeDataString(budget_id))+"/transactions/"+ (transaction_id==null? "" : System.Uri.EscapeDataString(transaction_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TransactionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Single transaction
		/// Returns a single transaction
		/// GetTransactionById budgets/{budget_id}/transactions/{transaction_id}
		/// </summary>
		/// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
		/// <param name="transaction_id">The id of the transaction</param>
		/// <returns>The requested transaction</returns>
		public async Task<TransactionResponse> GetTransactionByIdAsync(string budget_id, string transaction_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "budgets/"+ (budget_id==null? "" : System.Uri.EscapeDataString(budget_id))+"/transactions/"+ (transaction_id==null? "" : System.Uri.EscapeDataString(transaction_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TransactionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing transaction
		/// Updates a single transaction
		/// UpdateTransaction budgets/{budget_id}/transactions/{transaction_id}
		/// </summary>
		/// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).</param>
		/// <param name="transaction_id">The id of the transaction</param>
		/// <param name="requestBody">The transaction to update</param>
		/// <returns>The transaction was successfully updated</returns>
		public async Task<TransactionResponse> UpdateTransactionAsync(string budget_id, string transaction_id, PutTransactionWrapper requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "budgets/"+ (budget_id==null? "" : System.Uri.EscapeDataString(budget_id))+"/transactions/"+ (transaction_id==null? "" : System.Uri.EscapeDataString(transaction_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TransactionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// User info
		/// Returns authenticated user information
		/// GetUser user
		/// </summary>
		/// <returns>The user info</returns>
		public async Task<UserResponse> GetUserAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum GetTransactionsByAccountType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="uncategorized")]
		uncategorized = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unapproved")]
		unapproved = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
