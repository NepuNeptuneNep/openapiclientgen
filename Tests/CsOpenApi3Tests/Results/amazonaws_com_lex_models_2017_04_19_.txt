//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateBotVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intents")]
		public Intent[] Intents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clarificationPrompt")]
		public Prompt ClarificationPrompt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="abortStatement")]
		public Statement AbortStatement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureReason")]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDate")]
		public System.DateTimeOffset LastUpdatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="idleSessionTTLInSeconds")]
		public System.Nullable<System.Int32> IdleSessionTTLInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="voiceId")]
		public string VoiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="checksum")]
		public string Checksum { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public Locale Locale { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="childDirected")]
		public System.Nullable<System.Boolean> ChildDirected { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableModelImprovements")]
		public System.Nullable<System.Boolean> EnableModelImprovements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="detectSentiment")]
		public System.Nullable<System.Boolean> DetectSentiment { get; set; }
	}
	
	/// <summary>
	/// Identifies the specific version of an intent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Intent
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="intentName")]
		public string IntentName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="intentVersion")]
		public string IntentVersion { get; set; }
	}
	
	/// <summary>
	/// Obtains information from the user. To define a prompt, provide one or more messages and specify the number of attempts to get information from the user. If you provide more than one message, Amazon Lex chooses one of the messages to use to prompt the user. For more information, see <a>how-it-works</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Prompt
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="maxAttempts")]
		public int MaxAttempts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responseCard")]
		public string ResponseCard { get; set; }
	}
	
	/// <summary>
	/// The message object that provides the message text and its type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Message
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public ContentType ContentType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupNumber")]
		public System.Nullable<System.Int32> GroupNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ContentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PlainText = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSML = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CustomPayload = 2,
	}
	
	/// <summary>
	/// A collection of messages that convey information to the user. At runtime, Amazon Lex selects the message to convey. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Statement
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responseCard")]
		public string ResponseCard { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY_BASIC_TESTING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_BUILT = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Locale
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de-DE")]
		deMinusDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-AU")]
		enMinusAU = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-GB")]
		enMinusGB = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-IN")]
		enMinusIN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-US")]
		enMinusUS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-419")]
		esMinus419 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-ES")]
		esMinusES = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-US")]
		esMinusUS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-FR")]
		frMinusFR = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-CA")]
		frMinusCA = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="it-IT")]
		itMinusIT = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ja-JP")]
		jaMinusJP = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ko-KR")]
		koMinusKR = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalFailureException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BadRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PreconditionFailedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateIntentVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slots")]
		public Slot[] Slots { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sampleUtterances")]
		public string[] SampleUtterances { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="confirmationPrompt")]
		public Prompt ConfirmationPrompt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rejectionStatement")]
		public Statement RejectionStatement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="followUpPrompt")]
		public FollowUpPrompt FollowUpPrompt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conclusionStatement")]
		public Statement ConclusionStatement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dialogCodeHook")]
		public CodeHook DialogCodeHook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fulfillmentActivity")]
		public FulfillmentActivity FulfillmentActivity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentIntentSignature")]
		public string ParentIntentSignature { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDate")]
		public System.DateTimeOffset LastUpdatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="checksum")]
		public string Checksum { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kendraConfiguration")]
		public KendraConfiguration KendraConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inputContexts")]
		public InputContext[] InputContexts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outputContexts")]
		public OutputContext[] OutputContexts { get; set; }
	}
	
	/// <summary>
	/// Identifies the version of a specific slot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Slot
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slotConstraint")]
		public SlotConstraint SlotConstraint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotType")]
		public string SlotType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotTypeVersion")]
		public string SlotTypeVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="valueElicitationPrompt")]
		public Prompt ValueElicitationPrompt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sampleUtterances")]
		public string[] SampleUtterances { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responseCard")]
		public string ResponseCard { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="obfuscationSetting")]
		public ObfuscationSetting ObfuscationSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultValueSpec")]
		public SlotDefaultValueSpec DefaultValueSpec { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SlotConstraint
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Required = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Optional = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ObfuscationSetting
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_OBFUSCATION = 1,
	}
	
	/// <summary>
	/// Contains the default values for a slot. Default values are used when Amazon Lex hasn't determined a value for a slot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlotDefaultValueSpec
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defaultValueList")]
		public SlotDefaultValue[] DefaultValueList { get; set; }
	}
	
	/// <summary>
	/// A default value for a slot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlotDefaultValue
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public string DefaultValue { get; set; }
	}
	
	/// <summary>
	/// A prompt for additional activity after an intent is fulfilled. For example, after the <code>OrderPizza</code> intent is fulfilled, you might prompt the user to find out whether the user wants to order drinks.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FollowUpPrompt
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="prompt")]
		public Prompt Prompt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rejectionStatement")]
		public Statement RejectionStatement { get; set; }
	}
	
	/// <summary>
	/// Specifies a Lambda function that verifies requests to a bot or fulfills the user's request to a bot..
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CodeHook
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageVersion")]
		public string MessageVersion { get; set; }
	}
	
	/// <summary>
	/// <p> Describes how the intent is fulfilled after the user provides all of the information required for the intent. You can provide a Lambda function to process the intent, or you can return the intent information to the client application. We recommend that you use a Lambda function so that the relevant logic lives in the Cloud and limit the client-side code primarily to presentation. If you need to update the logic, you only update the Lambda function; you don't need to upgrade your client application. </p> <p>Consider the following examples:</p> <ul> <li> <p>In a pizza ordering application, after the user provides all of the information for placing an order, you use a Lambda function to place an order with a pizzeria. </p> </li> <li> <p>In a gaming application, when a user says "pick up a rock," this information must go back to the client application so that it can perform the operation and update the graphics. In this case, you want Amazon Lex to return the intent data to the client. </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FulfillmentActivity
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public FulfillmentActivityType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="codeHook")]
		public CodeHook CodeHook { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FulfillmentActivityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReturnIntent = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CodeHook = 1,
	}
	
	/// <summary>
	/// Provides configuration information for the AMAZON.KendraSearchIntent intent. When you use this intent, Amazon Lex searches the specified Amazon Kendra index and returns documents from the index that match the user's utterance. For more information, see <a href="http://docs.aws.amazon.com/lex/latest/dg/built-in-intent-kendra-search.html"> AMAZON.KendraSearchIntent</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KendraConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kendraIndex")]
		public string KendraIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryFilterString")]
		public string QueryFilterString { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
	}
	
	/// <summary>
	/// The name of a context that must be active for an intent to be selected by Amazon Lex.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputContext
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The specification of an output context that is set when an intent is fulfilled.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OutputContext
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeToLiveInSeconds")]
		public int TimeToLiveInSeconds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="turnsToLive")]
		public int TurnsToLive { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSlotTypeVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enumerationValues")]
		public EnumerationValue[] EnumerationValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDate")]
		public System.DateTimeOffset LastUpdatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="checksum")]
		public string Checksum { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="valueSelectionStrategy")]
		public SlotValueSelectionStrategy ValueSelectionStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentSlotTypeSignature")]
		public string ParentSlotTypeSignature { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotTypeConfigurations")]
		public SlotTypeConfiguration[] SlotTypeConfigurations { get; set; }
	}
	
	/// <summary>
	/// <p>Each slot type can have a set of values. Each enumeration value represents a value the slot type can take. </p> <p>For example, a pizza ordering bot could have a slot type that specifies the type of crust that the pizza should have. The slot type could include the values </p> <ul> <li> <p>thick</p> </li> <li> <p>thin</p> </li> <li> <p>stuffed</p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnumerationValue
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="synonyms")]
		public string[] Synonyms { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SlotValueSelectionStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORIGINAL_VALUE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOP_RESOLUTION = 1,
	}
	
	/// <summary>
	/// Provides configuration information for a slot type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlotTypeConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="regexConfiguration")]
		public SlotTypeRegexConfiguration RegexConfiguration { get; set; }
	}
	
	/// <summary>
	/// Provides a regular expression used to validate the value of a slot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlotTypeRegexConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pattern")]
		public string Pattern { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceInUseException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBotResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intents")]
		public Intent[] Intents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableModelImprovements")]
		public System.Nullable<System.Boolean> EnableModelImprovements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nluIntentConfidenceThreshold")]
		public System.Nullable<System.Double> NluIntentConfidenceThreshold { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clarificationPrompt")]
		public Prompt ClarificationPrompt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="abortStatement")]
		public Statement AbortStatement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureReason")]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDate")]
		public System.DateTimeOffset LastUpdatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="idleSessionTTLInSeconds")]
		public System.Nullable<System.Int32> IdleSessionTTLInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="voiceId")]
		public string VoiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="checksum")]
		public string Checksum { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public Locale Locale { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="childDirected")]
		public System.Nullable<System.Boolean> ChildDirected { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="detectSentiment")]
		public System.Nullable<System.Boolean> DetectSentiment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBotAliasResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botName")]
		public string BotName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDate")]
		public System.DateTimeOffset LastUpdatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="checksum")]
		public string Checksum { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversationLogs")]
		public ConversationLogsResponse ConversationLogs { get; set; }
	}
	
	/// <summary>
	/// Contains information about conversation log settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConversationLogsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="logSettings")]
		public LogSettingsResponse[] LogSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iamRoleArn")]
		public string IamRoleArn { get; set; }
	}
	
	/// <summary>
	/// The settings for conversation logs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LogSettingsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="logType")]
		public LogType LogType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public Destination Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyArn")]
		public string KmsKeyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourcePrefix")]
		public string ResourcePrefix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LogType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUDIO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Destination
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUDWATCH_LOGS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBotAliasesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BotAliasMetadata[] BotAliases { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Provides information about a bot alias.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BotAliasMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botName")]
		public string BotName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDate")]
		public System.DateTimeOffset LastUpdatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="checksum")]
		public string Checksum { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversationLogs")]
		public ConversationLogsResponse ConversationLogs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBotChannelAssociationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botAlias")]
		public string BotAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botName")]
		public string BotName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ChannelType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botConfiguration")]
		public ChannelConfigurationMap BotConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ChannelStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureReason")]
		public string FailureReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ChannelType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Facebook = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Slack = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Twilio-Sms")]
		TwilioMinusSms = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kik = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChannelConfigurationMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ChannelStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBotChannelAssociationsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botChannelAssociations")]
		public BotChannelAssociation[] BotChannelAssociations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents an association between an Amazon Lex bot and an external messaging platform.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BotChannelAssociation
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botAlias")]
		public string BotAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botName")]
		public string BotName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ChannelType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botConfiguration")]
		public ChannelConfigurationMap BotConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ChannelStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureReason")]
		public string FailureReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBotVersionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="bots")]
		public BotMetadata[] Bots { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Provides information about a bot. .
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BotMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDate")]
		public System.DateTimeOffset LastUpdatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBotsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="bots")]
		public BotMetadata[] Bots { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBuiltinIntentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="signature")]
		public string Signature { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportedLocales")]
		public Locale[] SupportedLocales { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slots")]
		public BuiltinIntentSlot[] Slots { get; set; }
	}
	
	/// <summary>
	/// Provides information about a slot used in a built-in intent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuiltinIntentSlot
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBuiltinIntentsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="intents")]
		public BuiltinIntentMetadata[] Intents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Provides metadata for a built-in intent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuiltinIntentMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="signature")]
		public string Signature { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportedLocales")]
		public Locale[] SupportedLocales { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBuiltinSlotTypesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="slotTypes")]
		public BuiltinSlotTypeMetadata[] SlotTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Provides information about a built in slot type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuiltinSlotTypeMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="signature")]
		public string Signature { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportedLocales")]
		public Locale[] SupportedLocales { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetExportResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exportType")]
		public ExportType ExportType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exportStatus")]
		public ExportStatus ExportStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureReason")]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SLOT_TYPE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExportType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALEXA_SKILLS_KIT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEX = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExportStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetImportResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mergeStrategy")]
		public MergeStrategy MergeStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="importId")]
		public string ImportId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="importStatus")]
		public ImportStatus ImportStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureReason")]
		public string[] FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.DateTimeOffset CreatedDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MergeStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OVERWRITE_LATEST = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAIL_ON_CONFLICT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ImportStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetIntentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slots")]
		public Slot[] Slots { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sampleUtterances")]
		public string[] SampleUtterances { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="confirmationPrompt")]
		public Prompt ConfirmationPrompt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rejectionStatement")]
		public Statement RejectionStatement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="followUpPrompt")]
		public FollowUpPrompt FollowUpPrompt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conclusionStatement")]
		public Statement ConclusionStatement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dialogCodeHook")]
		public CodeHook DialogCodeHook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fulfillmentActivity")]
		public FulfillmentActivity FulfillmentActivity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentIntentSignature")]
		public string ParentIntentSignature { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDate")]
		public System.DateTimeOffset LastUpdatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="checksum")]
		public string Checksum { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kendraConfiguration")]
		public KendraConfiguration KendraConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inputContexts")]
		public InputContext[] InputContexts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outputContexts")]
		public OutputContext[] OutputContexts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetIntentVersionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="intents")]
		public IntentMetadata[] Intents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Provides information about an intent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntentMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDate")]
		public System.DateTimeOffset LastUpdatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetIntentsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="intents")]
		public IntentMetadata[] Intents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetMigrationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="migrationId")]
		public string MigrationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="v1BotName")]
		public string V1BotName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="v1BotVersion")]
		public string V1BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="v1BotLocale")]
		public Locale V1BotLocale { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="v2BotId")]
		public string V2BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="v2BotRole")]
		public string V2BotRole { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="migrationStatus")]
		public MigrationStatus MigrationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="migrationStrategy")]
		public MigrationStrategy MigrationStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="migrationTimestamp")]
		public System.DateTimeOffset MigrationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alerts")]
		public MigrationAlert[] Alerts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MigrationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MigrationStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_NEW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_EXISTING = 1,
	}
	
	/// <summary>
	/// Provides information about alerts and warnings that Amazon Lex sends during a migration. The alerts include information about how to resolve the issue.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MigrationAlert
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public MigrationAlertType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referenceURLs")]
		public string[] ReferenceURLs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MigrationAlertType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARN = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetMigrationsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="migrationSummaries")]
		public MigrationSummary[] MigrationSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Provides information about migrating a bot from Amazon Lex V1 to Amazon Lex V2.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MigrationSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="migrationId")]
		public string MigrationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="v1BotName")]
		public string V1BotName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="v1BotVersion")]
		public string V1BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="v1BotLocale")]
		public Locale V1BotLocale { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="v2BotId")]
		public string V2BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="v2BotRole")]
		public string V2BotRole { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="migrationStatus")]
		public MigrationStatus MigrationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="migrationStrategy")]
		public MigrationStrategy MigrationStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="migrationTimestamp")]
		public System.DateTimeOffset MigrationTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSlotTypeResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enumerationValues")]
		public EnumerationValue[] EnumerationValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDate")]
		public System.DateTimeOffset LastUpdatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="checksum")]
		public string Checksum { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="valueSelectionStrategy")]
		public SlotValueSelectionStrategy ValueSelectionStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentSlotTypeSignature")]
		public string ParentSlotTypeSignature { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotTypeConfigurations")]
		public SlotTypeConfiguration[] SlotTypeConfigurations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSlotTypeVersionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="slotTypes")]
		public SlotTypeMetadata[] SlotTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Provides information about a slot type..
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlotTypeMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDate")]
		public System.DateTimeOffset LastUpdatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSlotTypesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="slotTypes")]
		public SlotTypeMetadata[] SlotTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetUtterancesViewResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botName")]
		public string BotName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="utterances")]
		public UtteranceList[] Utterances { get; set; }
	}
	
	/// <summary>
	/// Provides a list of utterances that have been made to a specific version of your bot. The list contains a maximum of 100 utterances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UtteranceList
	{
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="utterances")]
		public UtteranceData[] Utterances { get; set; }
	}
	
	/// <summary>
	/// Provides information about a single utterance that was made to your bot. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UtteranceData
	{
		
		[System.Runtime.Serialization.DataMember(Name="utteranceString")]
		public string UtteranceString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="distinctUsers")]
		public System.Nullable<System.Int32> DistinctUsers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstUtteredDate")]
		public System.DateTimeOffset FirstUtteredDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUtteredDate")]
		public System.DateTimeOffset LastUtteredDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// A list of key/value pairs that identify a bot, bot alias, or bot channel. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + - @. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Tag
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutBotResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intents")]
		public Intent[] Intents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableModelImprovements")]
		public System.Nullable<System.Boolean> EnableModelImprovements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nluIntentConfidenceThreshold")]
		public System.Nullable<System.Double> NluIntentConfidenceThreshold { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clarificationPrompt")]
		public Prompt ClarificationPrompt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="abortStatement")]
		public Statement AbortStatement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureReason")]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDate")]
		public System.DateTimeOffset LastUpdatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="idleSessionTTLInSeconds")]
		public System.Nullable<System.Int32> IdleSessionTTLInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="voiceId")]
		public string VoiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="checksum")]
		public string Checksum { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public Locale Locale { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="childDirected")]
		public System.Nullable<System.Boolean> ChildDirected { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createVersion")]
		public System.Nullable<System.Boolean> CreateVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="detectSentiment")]
		public System.Nullable<System.Boolean> DetectSentiment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutBotAliasResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botName")]
		public string BotName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDate")]
		public System.DateTimeOffset LastUpdatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="checksum")]
		public string Checksum { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversationLogs")]
		public ConversationLogsResponse ConversationLogs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Settings used to configure delivery mode and destination for conversation logs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LogSettingsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="logType")]
		public LogType LogType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public Destination Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyArn")]
		public string KmsKeyArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutIntentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slots")]
		public Slot[] Slots { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sampleUtterances")]
		public string[] SampleUtterances { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="confirmationPrompt")]
		public Prompt ConfirmationPrompt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rejectionStatement")]
		public Statement RejectionStatement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="followUpPrompt")]
		public FollowUpPrompt FollowUpPrompt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conclusionStatement")]
		public Statement ConclusionStatement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dialogCodeHook")]
		public CodeHook DialogCodeHook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fulfillmentActivity")]
		public FulfillmentActivity FulfillmentActivity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentIntentSignature")]
		public string ParentIntentSignature { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDate")]
		public System.DateTimeOffset LastUpdatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="checksum")]
		public string Checksum { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createVersion")]
		public System.Nullable<System.Boolean> CreateVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kendraConfiguration")]
		public KendraConfiguration KendraConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inputContexts")]
		public InputContext[] InputContexts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outputContexts")]
		public OutputContext[] OutputContexts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutSlotTypeResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enumerationValues")]
		public EnumerationValue[] EnumerationValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDate")]
		public System.DateTimeOffset LastUpdatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="checksum")]
		public string Checksum { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="valueSelectionStrategy")]
		public SlotValueSelectionStrategy ValueSelectionStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createVersion")]
		public System.Nullable<System.Boolean> CreateVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentSlotTypeSignature")]
		public string ParentSlotTypeSignature { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotTypeConfigurations")]
		public SlotTypeConfiguration[] SlotTypeConfigurations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartImportResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mergeStrategy")]
		public MergeStrategy MergeStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="importId")]
		public string ImportId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="importStatus")]
		public ImportStatus ImportStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.DateTimeOffset CreatedDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartMigrationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="v1BotName")]
		public string V1BotName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="v1BotVersion")]
		public string V1BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="v1BotLocale")]
		public Locale V1BotLocale { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="v2BotId")]
		public string V2BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="v2BotRole")]
		public string V2BotRole { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="migrationId")]
		public string MigrationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="migrationStrategy")]
		public MigrationStrategy MigrationStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="migrationTimestamp")]
		public System.DateTimeOffset MigrationTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceResponse
	{
	}
	
	/// <summary>
	/// Provides the settings needed for conversation logs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConversationLogsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="logSettings")]
		public LogSettingsRequest[] LogSettings { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="iamRoleArn")]
		public string IamRoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateBotVersionRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="checksum")]
		public string Checksum { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateIntentVersionRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="checksum")]
		public string Checksum { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSlotTypeVersionRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="checksum")]
		public string Checksum { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteBotAliasRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteBotChannelAssociationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteBotRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteBotVersionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteIntentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteIntentVersionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSlotTypeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSlotTypeVersionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteUtterancesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBotAliasRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBotAliasesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBotChannelAssociationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBotChannelAssociationsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBotRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBotVersionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBotsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBuiltinIntentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBuiltinIntentsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBuiltinSlotTypesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetExportRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetImportRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetIntentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetIntentVersionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetIntentsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetMigrationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MigrationSortAttribute
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		V1_BOT_NAME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIGRATION_DATE_TIME = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASCENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCENDING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetMigrationsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSlotTypeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSlotTypeVersionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSlotTypesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StatusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Detected = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Missed = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetUtterancesViewRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProcessBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILD = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutBotAliasRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="checksum")]
		public string Checksum { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversationLogs")]
		public ConversationLogsRequest ConversationLogs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutBotRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intents")]
		public Intent[] Intents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableModelImprovements")]
		public System.Nullable<System.Boolean> EnableModelImprovements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nluIntentConfidenceThreshold")]
		public System.Nullable<System.Double> NluIntentConfidenceThreshold { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clarificationPrompt")]
		public Prompt ClarificationPrompt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="abortStatement")]
		public Statement AbortStatement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="idleSessionTTLInSeconds")]
		public System.Nullable<System.Int32> IdleSessionTTLInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="voiceId")]
		public string VoiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="checksum")]
		public string Checksum { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="processBehavior")]
		public ProcessBehavior ProcessBehavior { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public Locale Locale { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="childDirected")]
		public bool ChildDirected { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="detectSentiment")]
		public System.Nullable<System.Boolean> DetectSentiment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createVersion")]
		public System.Nullable<System.Boolean> CreateVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutIntentRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slots")]
		public Slot[] Slots { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sampleUtterances")]
		public string[] SampleUtterances { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="confirmationPrompt")]
		public Prompt ConfirmationPrompt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rejectionStatement")]
		public Statement RejectionStatement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="followUpPrompt")]
		public FollowUpPrompt FollowUpPrompt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conclusionStatement")]
		public Statement ConclusionStatement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dialogCodeHook")]
		public CodeHook DialogCodeHook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fulfillmentActivity")]
		public FulfillmentActivity FulfillmentActivity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentIntentSignature")]
		public string ParentIntentSignature { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="checksum")]
		public string Checksum { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createVersion")]
		public System.Nullable<System.Boolean> CreateVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kendraConfiguration")]
		public KendraConfiguration KendraConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inputContexts")]
		public InputContext[] InputContexts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outputContexts")]
		public OutputContext[] OutputContexts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutSlotTypeRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enumerationValues")]
		public EnumerationValue[] EnumerationValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="checksum")]
		public string Checksum { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="valueSelectionStrategy")]
		public SlotValueSelectionStrategy ValueSelectionStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createVersion")]
		public System.Nullable<System.Boolean> CreateVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentSlotTypeSignature")]
		public string ParentSlotTypeSignature { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotTypeConfigurations")]
		public SlotTypeConfiguration[] SlotTypeConfigurations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartImportRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public string Payload { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mergeStrategy")]
		public MergeStrategy MergeStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartMigrationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="v1BotName")]
		public string V1BotName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="v1BotVersion")]
		public string V1BotVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="v2BotName")]
		public string V2BotName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="v2BotRole")]
		public string V2BotRole { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="migrationStrategy")]
		public MigrationStrategy MigrationStrategy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceRequest
	{
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Creates a new version of the bot based on the <code>$LATEST</code> version. If the <code>$LATEST</code> version of this resource hasn't changed since you created the last version, Amazon Lex doesn't create a new version. It returns the last created version.</p> <note> <p>You can update only the <code>$LATEST</code> version of the bot. You can't update the numbered versions that you create with the <code>CreateBotVersion</code> operation.</p> </note> <p> When you create the first version of a bot, Amazon Lex sets the version to 1. Subsequent versions increment by 1. For more information, see <a>versioning-intro</a>. </p> <p> This operation requires permission for the <code>lex:CreateBotVersion</code> action. </p>
		/// CreateBotVersion bots/{name}/versions
		/// </summary>
		/// <param name="name">The name of the bot that you want to create a new version of. The name is case sensitive. 
		/// Min length: 2
		/// Max length: 50
		// </param>
		public async Task CreateBotVersionAsync(string name, CreateBotVersionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/versions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new version of an intent based on the <code>$LATEST</code> version of the intent. If the <code>$LATEST</code> version of this intent hasn't changed since you last updated it, Amazon Lex doesn't create a new version. It returns the last version you created.</p> <note> <p>You can update only the <code>$LATEST</code> version of the intent. You can't update the numbered versions that you create with the <code>CreateIntentVersion</code> operation.</p> </note> <p> When you create a version of an intent, Amazon Lex sets the version to 1. Subsequent versions increment by 1. For more information, see <a>versioning-intro</a>. </p> <p>This operation requires permissions to perform the <code>lex:CreateIntentVersion</code> action. </p>
		/// CreateIntentVersion intents/{name}/versions
		/// </summary>
		/// <param name="name">The name of the intent that you want to create a new version of. The name is case sensitive. 
		/// Min length: 1
		/// Max length: 100
		// </param>
		public async Task CreateIntentVersionAsync(string name, CreateIntentVersionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "intents/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/versions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new version of a slot type based on the <code>$LATEST</code> version of the specified slot type. If the <code>$LATEST</code> version of this resource has not changed since the last version that you created, Amazon Lex doesn't create a new version. It returns the last version that you created. </p> <note> <p>You can update only the <code>$LATEST</code> version of a slot type. You can't update the numbered versions that you create with the <code>CreateSlotTypeVersion</code> operation.</p> </note> <p>When you create a version of a slot type, Amazon Lex sets the version to 1. Subsequent versions increment by 1. For more information, see <a>versioning-intro</a>. </p> <p>This operation requires permissions for the <code>lex:CreateSlotTypeVersion</code> action.</p>
		/// CreateSlotTypeVersion slottypes/{name}/versions
		/// </summary>
		/// <param name="name">The name of the slot type that you want to create a new version for. The name is case sensitive. 
		/// Min length: 1
		/// Max length: 100
		// </param>
		public async Task CreateSlotTypeVersionAsync(string name, CreateSlotTypeVersionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "slottypes/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/versions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes all versions of the bot, including the <code>$LATEST</code> version. To delete a specific version of the bot, use the <a>DeleteBotVersion</a> operation. The <code>DeleteBot</code> operation doesn't immediately remove the bot schema. Instead, it is marked for deletion and removed later.</p> <p>Amazon Lex stores utterances indefinitely for improving the ability of your bot to respond to user inputs. These utterances are not removed when the bot is deleted. To remove the utterances, use the <a>DeleteUtterances</a> operation.</p> <p>If a bot has an alias, you can't delete it. Instead, the <code>DeleteBot</code> operation returns a <code>ResourceInUseException</code> exception that includes a reference to the alias that refers to the bot. To remove the reference to the bot, delete the alias. If you get the same exception again, delete the referring alias until the <code>DeleteBot</code> operation is successful.</p> <p>This operation requires permissions for the <code>lex:DeleteBot</code> action.</p>
		/// DeleteBot bots/{name}
		/// </summary>
		/// <param name="name">The name of the bot. The name is case sensitive. 
		/// Min length: 2
		/// Max length: 50
		// </param>
		public async Task DeleteBotAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an alias for the specified bot. </p> <p>You can't delete an alias that is used in the association between a bot and a messaging channel. If an alias is used in a channel association, the <code>DeleteBot</code> operation returns a <code>ResourceInUseException</code> exception that includes a reference to the channel association that refers to the bot. You can remove the reference to the alias by deleting the channel association. If you get the same exception again, delete the referring association until the <code>DeleteBotAlias</code> operation is successful.</p>
		/// DeleteBotAlias bots/{botName}/aliases/{name}
		/// </summary>
		/// <param name="name">The name of the alias to delete. The name is case sensitive. 
		/// Min length: 1
		/// Max length: 100
		// </param>
		/// <param name="botName">The name of the bot that the alias points to.
		/// Min length: 2
		/// Max length: 50
		// </param>
		public async Task DeleteBotAliasAsync(string name, string botName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botName==null? "" : System.Uri.EscapeDataString(botName))+"/aliases/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about an Amazon Lex bot alias. For more information about aliases, see <a>versioning-aliases</a>.</p> <p>This operation requires permissions for the <code>lex:GetBotAlias</code> action.</p>
		/// GetBotAlias bots/{botName}/aliases/{name}
		/// </summary>
		/// <param name="name">The name of the bot alias. The name is case sensitive.
		/// Min length: 1
		/// Max length: 100
		// </param>
		/// <param name="botName">The name of the bot.
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<GetBotAliasResponse> GetBotAliasAsync(string name, string botName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botName==null? "" : System.Uri.EscapeDataString(botName))+"/aliases/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetBotAliasResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an alias for the specified version of the bot or replaces an alias for the specified bot. To change the version of the bot that the alias points to, replace the alias. For more information about aliases, see <a>versioning-aliases</a>.</p> <p>This operation requires permissions for the <code>lex:PutBotAlias</code> action. </p>
		/// PutBotAlias bots/{botName}/aliases/{name}
		/// </summary>
		/// <param name="name">The name of the alias. The name is <i>not</i> case sensitive.
		/// Min length: 1
		/// Max length: 100
		// </param>
		/// <param name="botName">The name of the bot.
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<PutBotAliasResponse> PutBotAliasAsync(string name, string botName, PutBotAliasPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botName==null? "" : System.Uri.EscapeDataString(botName))+"/aliases/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PutBotAliasResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the association between an Amazon Lex bot and a messaging platform.</p> <p>This operation requires permission for the <code>lex:DeleteBotChannelAssociation</code> action.</p>
		/// DeleteBotChannelAssociation bots/{botName}/aliases/{aliasName}/channels/{name}
		/// </summary>
		/// <param name="name">The name of the association. The name is case sensitive. 
		/// Min length: 1
		/// Max length: 100
		// </param>
		/// <param name="botName">The name of the Amazon Lex bot.
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="aliasName">An alias that points to the specific version of the Amazon Lex bot to which this association is being made.
		/// Min length: 1
		/// Max length: 100
		// </param>
		public async Task DeleteBotChannelAssociationAsync(string name, string botName, string aliasName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botName==null? "" : System.Uri.EscapeDataString(botName))+"/aliases/"+ (aliasName==null? "" : System.Uri.EscapeDataString(aliasName))+"/channels/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about the association between an Amazon Lex bot and a messaging platform.</p> <p>This operation requires permissions for the <code>lex:GetBotChannelAssociation</code> action.</p>
		/// GetBotChannelAssociation bots/{botName}/aliases/{aliasName}/channels/{name}
		/// </summary>
		/// <param name="name">The name of the association between the bot and the channel. The name is case sensitive. 
		/// Min length: 1
		/// Max length: 100
		// </param>
		/// <param name="botName">The name of the Amazon Lex bot.
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="aliasName">An alias pointing to the specific version of the Amazon Lex bot to which this association is being made.
		/// Min length: 1
		/// Max length: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<GetBotChannelAssociationResponse> GetBotChannelAssociationAsync(string name, string botName, string aliasName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botName==null? "" : System.Uri.EscapeDataString(botName))+"/aliases/"+ (aliasName==null? "" : System.Uri.EscapeDataString(aliasName))+"/channels/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetBotChannelAssociationResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a specific version of a bot. To delete all versions of a bot, use the <a>DeleteBot</a> operation. </p> <p>This operation requires permissions for the <code>lex:DeleteBotVersion</code> action.</p>
		/// DeleteBotVersion bots/{name}/versions/{version}
		/// </summary>
		/// <param name="name">The name of the bot.
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="version">The version of the bot to delete. You cannot delete the <code>$LATEST</code> version of the bot. To delete the <code>$LATEST</code> version, use the <a>DeleteBot</a> operation.
		/// Min length: 1
		/// Max length: 64
		// </param>
		public async Task DeleteBotVersionAsync(string name, string version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/versions/"+ (version==null? "" : System.Uri.EscapeDataString(version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes all versions of the intent, including the <code>$LATEST</code> version. To delete a specific version of the intent, use the <a>DeleteIntentVersion</a> operation.</p> <p> You can delete a version of an intent only if it is not referenced. To delete an intent that is referred to in one or more bots (see <a>how-it-works</a>), you must remove those references first. </p> <note> <p> If you get the <code>ResourceInUseException</code> exception, it provides an example reference that shows where the intent is referenced. To remove the reference to the intent, either update the bot or delete it. If you get the same exception when you attempt to delete the intent again, repeat until the intent has no references and the call to <code>DeleteIntent</code> is successful. </p> </note> <p> This operation requires permission for the <code>lex:DeleteIntent</code> action. </p>
		/// DeleteIntent intents/{name}
		/// </summary>
		/// <param name="name">The name of the intent. The name is case sensitive. 
		/// Min length: 1
		/// Max length: 100
		// </param>
		public async Task DeleteIntentAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "intents/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a specific version of an intent. To delete all versions of a intent, use the <a>DeleteIntent</a> operation. </p> <p>This operation requires permissions for the <code>lex:DeleteIntentVersion</code> action.</p>
		/// DeleteIntentVersion intents/{name}/versions/{version}
		/// </summary>
		/// <param name="name">The name of the intent.
		/// Min length: 1
		/// Max length: 100
		// </param>
		/// <param name="version">The version of the intent to delete. You cannot delete the <code>$LATEST</code> version of the intent. To delete the <code>$LATEST</code> version, use the <a>DeleteIntent</a> operation.
		/// Min length: 1
		/// Max length: 64
		// </param>
		public async Task DeleteIntentVersionAsync(string name, string version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "intents/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/versions/"+ (version==null? "" : System.Uri.EscapeDataString(version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Returns information about an intent. In addition to the intent name, you must specify the intent version. </p> <p> This operation requires permissions to perform the <code>lex:GetIntent</code> action. </p>
		/// GetIntent intents/{name}/versions/{version}
		/// </summary>
		/// <param name="name">The name of the intent. The name is case sensitive. 
		/// Min length: 1
		/// Max length: 100
		// </param>
		/// <param name="version">The version of the intent.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<GetIntentResponse> GetIntentAsync(string name, string version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "intents/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/versions/"+ (version==null? "" : System.Uri.EscapeDataString(version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetIntentResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes all versions of the slot type, including the <code>$LATEST</code> version. To delete a specific version of the slot type, use the <a>DeleteSlotTypeVersion</a> operation.</p> <p> You can delete a version of a slot type only if it is not referenced. To delete a slot type that is referred to in one or more intents, you must remove those references first. </p> <note> <p> If you get the <code>ResourceInUseException</code> exception, the exception provides an example reference that shows the intent where the slot type is referenced. To remove the reference to the slot type, either update the intent or delete it. If you get the same exception when you attempt to delete the slot type again, repeat until the slot type has no references and the <code>DeleteSlotType</code> call is successful. </p> </note> <p>This operation requires permission for the <code>lex:DeleteSlotType</code> action.</p>
		/// DeleteSlotType slottypes/{name}
		/// </summary>
		/// <param name="name">The name of the slot type. The name is case sensitive. 
		/// Min length: 1
		/// Max length: 100
		// </param>
		public async Task DeleteSlotTypeAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "slottypes/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a specific version of a slot type. To delete all versions of a slot type, use the <a>DeleteSlotType</a> operation. </p> <p>This operation requires permissions for the <code>lex:DeleteSlotTypeVersion</code> action.</p>
		/// DeleteSlotTypeVersion slottypes/{name}/version/{version}
		/// </summary>
		/// <param name="name">The name of the slot type.
		/// Min length: 1
		/// Max length: 100
		// </param>
		/// <param name="version">The version of the slot type to delete. You cannot delete the <code>$LATEST</code> version of the slot type. To delete the <code>$LATEST</code> version, use the <a>DeleteSlotType</a> operation.
		/// Min length: 1
		/// Max length: 64
		// </param>
		public async Task DeleteSlotTypeVersionAsync(string name, string version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "slottypes/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/version/"+ (version==null? "" : System.Uri.EscapeDataString(version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes stored utterances.</p> <p>Amazon Lex stores the utterances that users send to your bot. Utterances are stored for 15 days for use with the <a>GetUtterancesView</a> operation, and then stored indefinitely for use in improving the ability of your bot to respond to user input.</p> <p>Use the <code>DeleteUtterances</code> operation to manually delete stored utterances for a specific user. When you use the <code>DeleteUtterances</code> operation, utterances stored for improving your bot's ability to respond to user input are deleted immediately. Utterances stored for use with the <code>GetUtterancesView</code> operation are deleted after 15 days.</p> <p>This operation requires permissions for the <code>lex:DeleteUtterances</code> action.</p>
		/// DeleteUtterances bots/{botName}/utterances/{userId}
		/// </summary>
		/// <param name="botName">The name of the bot that stored the utterances.
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="userId"> The unique identifier for the user that made the utterances. This is the user ID that was sent in the <a href="http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostContent.html">PostContent</a> or <a href="http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html">PostText</a> operation request that contained the utterance.
		/// Min length: 2
		/// Max length: 100
		// </param>
		public async Task DeleteUtterancesAsync(string botName, string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botName==null? "" : System.Uri.EscapeDataString(botName))+"/utterances/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns metadata information for a specific bot. You must provide the bot name and the bot version or alias. </p> <p> This operation requires permissions for the <code>lex:GetBot</code> action. </p>
		/// GetBot bots/{name}/versions/{versionoralias}
		/// </summary>
		/// <param name="name">The name of the bot. The name is case sensitive. 
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="versionoralias">The version or alias of the bot.</param>
		/// <returns>Success</returns>
		public async Task<GetBotResponse> GetBotAsync(string name, string versionoralias, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/versions/"+ (versionoralias==null? "" : System.Uri.EscapeDataString(versionoralias));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetBotResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of aliases for a specified Amazon Lex bot.</p> <p>This operation requires permissions for the <code>lex:GetBotAliases</code> action.</p>
		/// GetBotAliases bots/{botName}/aliases/
		/// </summary>
		/// <param name="botName">The name of the bot.
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="nextToken">A pagination token for fetching the next page of aliases. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of aliases, specify the pagination token in the next request. </param>
		/// <param name="maxResults">The maximum number of aliases to return in the response. The default is 50. . 
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="nameContains">Substring to match in bot alias names. An alias will be returned if any part of its name matches the substring. For example, "xyz" matches both "xyzabc" and "abcxyz."
		/// Min length: 1
		/// Max length: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<GetBotAliasesResponse> GetBotAliasesAsync(string botName, string nextToken, int maxResults, string nameContains, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botName==null? "" : System.Uri.EscapeDataString(botName))+"/aliases/&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&nameContains=" + (nameContains==null? "" : System.Uri.EscapeDataString(nameContains));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetBotAliasesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Returns a list of all of the channels associated with the specified bot. </p> <p>The <code>GetBotChannelAssociations</code> operation requires permissions for the <code>lex:GetBotChannelAssociations</code> action.</p>
		/// GetBotChannelAssociations bots/{botName}/aliases/{aliasName}/channels/
		/// </summary>
		/// <param name="botName">The name of the Amazon Lex bot in the association.
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="aliasName">An alias pointing to the specific version of the Amazon Lex bot to which this association is being made.
		/// Min length: 1
		/// Max length: 100
		// </param>
		/// <param name="nextToken">A pagination token for fetching the next page of associations. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of associations, specify the pagination token in the next request. </param>
		/// <param name="maxResults">The maximum number of associations to return in the response. The default is 50. 
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="nameContains">Substring to match in channel association names. An association will be returned if any part of its name matches the substring. For example, "xyz" matches both "xyzabc" and "abcxyz." To return all bot channel associations, use a hyphen ("-") as the <code>nameContains</code> parameter.
		/// Min length: 1
		/// Max length: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<GetBotChannelAssociationsResponse> GetBotChannelAssociationsAsync(string botName, string aliasName, string nextToken, int maxResults, string nameContains, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botName==null? "" : System.Uri.EscapeDataString(botName))+"/aliases/"+ (aliasName==null? "" : System.Uri.EscapeDataString(aliasName))+"/channels/&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&nameContains=" + (nameContains==null? "" : System.Uri.EscapeDataString(nameContains));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetBotChannelAssociationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about all of the versions of a bot.</p> <p>The <code>GetBotVersions</code> operation returns a <code>BotMetadata</code> object for each version of a bot. For example, if a bot has three numbered versions, the <code>GetBotVersions</code> operation returns four <code>BotMetadata</code> objects in the response, one for each numbered version and one for the <code>$LATEST</code> version. </p> <p>The <code>GetBotVersions</code> operation always returns at least one version, the <code>$LATEST</code> version.</p> <p>This operation requires permissions for the <code>lex:GetBotVersions</code> action.</p>
		/// GetBotVersions bots/{name}/versions/
		/// </summary>
		/// <param name="name">The name of the bot for which versions should be returned.
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="nextToken">A pagination token for fetching the next page of bot versions. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of versions, specify the pagination token in the next request. </param>
		/// <param name="maxResults">The maximum number of bot versions to return in the response. The default is 10.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<GetBotVersionsResponse> GetBotVersionsAsync(string name, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/versions/&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetBotVersionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns bot information as follows: </p> <ul> <li> <p>If you provide the <code>nameContains</code> field, the response includes information for the <code>$LATEST</code> version of all bots whose name contains the specified string.</p> </li> <li> <p>If you don't specify the <code>nameContains</code> field, the operation returns information about the <code>$LATEST</code> version of all of your bots.</p> </li> </ul> <p>This operation requires permission for the <code>lex:GetBots</code> action.</p>
		/// GetBots bots/
		/// </summary>
		/// <param name="nextToken">A pagination token that fetches the next page of bots. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of bots, specify the pagination token in the next request. </param>
		/// <param name="maxResults">The maximum number of bots to return in the response that the request will return. The default is 10.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="nameContains">Substring to match in bot names. A bot will be returned if any part of its name matches the substring. For example, "xyz" matches both "xyzabc" and "abcxyz."
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<GetBotsResponse> GetBotsAsync(string nextToken, int maxResults, string nameContains, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&nameContains=" + (nameContains==null? "" : System.Uri.EscapeDataString(nameContains));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetBotsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about a built-in intent.</p> <p>This operation requires permission for the <code>lex:GetBuiltinIntent</code> action.</p>
		/// GetBuiltinIntent builtins/intents/{signature}
		/// </summary>
		/// <param name="signature">The unique identifier for a built-in intent. To find the signature for an intent, see <a href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents">Standard Built-in Intents</a> in the <i>Alexa Skills Kit</i>.</param>
		/// <returns>Success</returns>
		public async Task<GetBuiltinIntentResponse> GetBuiltinIntentAsync(string signature, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "builtins/intents/"+ (signature==null? "" : System.Uri.EscapeDataString(signature));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetBuiltinIntentResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets a list of built-in intents that meet the specified criteria.</p> <p>This operation requires permission for the <code>lex:GetBuiltinIntents</code> action.</p>
		/// GetBuiltinIntents builtins/intents/
		/// </summary>
		/// <param name="locale">A list of locales that the intent supports.</param>
		/// <param name="signatureContains">Substring to match in built-in intent signatures. An intent will be returned if any part of its signature matches the substring. For example, "xyz" matches both "xyzabc" and "abcxyz." To find the signature for an intent, see <a href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents">Standard Built-in Intents</a> in the <i>Alexa Skills Kit</i>.</param>
		/// <param name="nextToken">A pagination token that fetches the next page of intents. If this API call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of intents, use the pagination token in the next request.</param>
		/// <param name="maxResults">The maximum number of intents to return in the response. The default is 10.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<GetBuiltinIntentsResponse> GetBuiltinIntentsAsync(GetBuiltinIntentsLocale locale, string signatureContains, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "builtins/intents/?locale=" + locale+"&signatureContains=" + (signatureContains==null? "" : System.Uri.EscapeDataString(signatureContains))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetBuiltinIntentsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets a list of built-in slot types that meet the specified criteria.</p> <p>For a list of built-in slot types, see <a href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/slot-type-reference">Slot Type Reference</a> in the <i>Alexa Skills Kit</i>.</p> <p>This operation requires permission for the <code>lex:GetBuiltInSlotTypes</code> action.</p>
		/// GetBuiltinSlotTypes builtins/slottypes/
		/// </summary>
		/// <param name="locale">A list of locales that the slot type supports.</param>
		/// <param name="signatureContains">Substring to match in built-in slot type signatures. A slot type will be returned if any part of its signature matches the substring. For example, "xyz" matches both "xyzabc" and "abcxyz."</param>
		/// <param name="nextToken">A pagination token that fetches the next page of slot types. If the response to this API call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of slot types, specify the pagination token in the next request.</param>
		/// <param name="maxResults">The maximum number of slot types to return in the response. The default is 10.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<GetBuiltinSlotTypesResponse> GetBuiltinSlotTypesAsync(GetBuiltinSlotTypesLocale locale, string signatureContains, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "builtins/slottypes/?locale=" + locale+"&signatureContains=" + (signatureContains==null? "" : System.Uri.EscapeDataString(signatureContains))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetBuiltinSlotTypesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Exports the contents of a Amazon Lex resource in a specified format.
		/// GetExport exports/#name&version&resourceType&exportType
		/// </summary>
		/// <param name="name">The name of the bot to export.
		/// Min length: 1
		/// Max length: 100
		// </param>
		/// <param name="version">The version of the bot to export.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="resourceType">The type of resource to export. </param>
		/// <param name="exportType">The format of the exported data.</param>
		/// <returns>Success</returns>
		public async Task<GetExportResponse> GetExportAsync(string name, string version, ResourceType resourceType, ExportType exportType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "exports/#name&version&resourceType&exportType?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&version=" + (version==null? "" : System.Uri.EscapeDataString(version))+"&resourceType=" + resourceType+"&exportType=" + exportType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetExportResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about an import job started with the <code>StartImport</code> operation.
		/// GetImport imports/{importId}
		/// </summary>
		/// <param name="importId">The identifier of the import job information to return.</param>
		/// <returns>Success</returns>
		public async Task<GetImportResponse> GetImportAsync(string importId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "imports/"+ (importId==null? "" : System.Uri.EscapeDataString(importId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetImportResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about all of the versions of an intent.</p> <p>The <code>GetIntentVersions</code> operation returns an <code>IntentMetadata</code> object for each version of an intent. For example, if an intent has three numbered versions, the <code>GetIntentVersions</code> operation returns four <code>IntentMetadata</code> objects in the response, one for each numbered version and one for the <code>$LATEST</code> version. </p> <p>The <code>GetIntentVersions</code> operation always returns at least one version, the <code>$LATEST</code> version.</p> <p>This operation requires permissions for the <code>lex:GetIntentVersions</code> action.</p>
		/// GetIntentVersions intents/{name}/versions/
		/// </summary>
		/// <param name="name">The name of the intent for which versions should be returned.
		/// Min length: 1
		/// Max length: 100
		// </param>
		/// <param name="nextToken">A pagination token for fetching the next page of intent versions. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of versions, specify the pagination token in the next request. </param>
		/// <param name="maxResults">The maximum number of intent versions to return in the response. The default is 10.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<GetIntentVersionsResponse> GetIntentVersionsAsync(string name, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "intents/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/versions/&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetIntentVersionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns intent information as follows: </p> <ul> <li> <p>If you specify the <code>nameContains</code> field, returns the <code>$LATEST</code> version of all intents that contain the specified string.</p> </li> <li> <p> If you don't specify the <code>nameContains</code> field, returns information about the <code>$LATEST</code> version of all intents. </p> </li> </ul> <p> The operation requires permission for the <code>lex:GetIntents</code> action. </p>
		/// GetIntents intents/
		/// </summary>
		/// <param name="nextToken">A pagination token that fetches the next page of intents. If the response to this API call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of intents, specify the pagination token in the next request. </param>
		/// <param name="maxResults">The maximum number of intents to return in the response. The default is 10.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="nameContains">Substring to match in intent names. An intent will be returned if any part of its name matches the substring. For example, "xyz" matches both "xyzabc" and "abcxyz."
		/// Min length: 1
		/// Max length: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<GetIntentsResponse> GetIntentsAsync(string nextToken, int maxResults, string nameContains, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "intents/?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&nameContains=" + (nameContains==null? "" : System.Uri.EscapeDataString(nameContains));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetIntentsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides details about an ongoing or complete migration from an Amazon Lex V1 bot to an Amazon Lex V2 bot. Use this operation to view the migration alerts and warnings related to the migration.
		/// GetMigration migrations/{migrationId}
		/// </summary>
		/// <param name="migrationId">The unique identifier of the migration to view. The <code>migrationID</code> is returned by the operation.
		/// Min length: 10
		/// Max length: 10
		// </param>
		/// <returns>Success</returns>
		public async Task<GetMigrationResponse> GetMigrationAsync(string migrationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "migrations/"+ (migrationId==null? "" : System.Uri.EscapeDataString(migrationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetMigrationResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of migrations between Amazon Lex V1 and Amazon Lex V2.
		/// GetMigrations migrations
		/// </summary>
		/// <param name="sortByAttribute">The field to sort the list of migrations by. You can sort by the Amazon Lex V1 bot name or the date and time that the migration was started.</param>
		/// <param name="sortByOrder">The order so sort the list.</param>
		/// <param name="v1BotNameContains">Filters the list to contain only bots whose name contains the specified string. The string is matched anywhere in bot name.
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="migrationStatusEquals">Filters the list to contain only migrations in the specified state.</param>
		/// <param name="maxResults">The maximum number of migrations to return in the response. The default is 10.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="nextToken">A pagination token that fetches the next page of migrations. If the response to this operation is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of migrations, specify the pagination token in the request.</param>
		/// <returns>Success</returns>
		public async Task<GetMigrationsResponse> GetMigrationsAsync(MigrationSortAttribute sortByAttribute, SortOrder sortByOrder, string v1BotNameContains, MigrationStatus migrationStatusEquals, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "migrations?sortByAttribute=" + sortByAttribute+"&sortByOrder=" + sortByOrder+"&v1BotNameContains=" + (v1BotNameContains==null? "" : System.Uri.EscapeDataString(v1BotNameContains))+"&migrationStatusEquals=" + migrationStatusEquals+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetMigrationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Starts migrating a bot from Amazon Lex V1 to Amazon Lex V2. Migrate your bot when you want to take advantage of the new features of Amazon Lex V2.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/migrate.html">Migrating a bot</a> in the <i>Amazon Lex developer guide</i>.</p>
		/// StartMigration migrations
		/// </summary>
		public async Task StartMigrationAsync(StartMigrationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "migrations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about a specific version of a slot type. In addition to specifying the slot type name, you must specify the slot type version.</p> <p>This operation requires permissions for the <code>lex:GetSlotType</code> action.</p>
		/// GetSlotType slottypes/{name}/versions/{version}
		/// </summary>
		/// <param name="name">The name of the slot type. The name is case sensitive. 
		/// Min length: 1
		/// Max length: 100
		// </param>
		/// <param name="version">The version of the slot type. 
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<GetSlotTypeResponse> GetSlotTypeAsync(string name, string version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "slottypes/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/versions/"+ (version==null? "" : System.Uri.EscapeDataString(version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetSlotTypeResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about all versions of a slot type.</p> <p>The <code>GetSlotTypeVersions</code> operation returns a <code>SlotTypeMetadata</code> object for each version of a slot type. For example, if a slot type has three numbered versions, the <code>GetSlotTypeVersions</code> operation returns four <code>SlotTypeMetadata</code> objects in the response, one for each numbered version and one for the <code>$LATEST</code> version. </p> <p>The <code>GetSlotTypeVersions</code> operation always returns at least one version, the <code>$LATEST</code> version.</p> <p>This operation requires permissions for the <code>lex:GetSlotTypeVersions</code> action.</p>
		/// GetSlotTypeVersions slottypes/{name}/versions/
		/// </summary>
		/// <param name="name">The name of the slot type for which versions should be returned.
		/// Min length: 1
		/// Max length: 100
		// </param>
		/// <param name="nextToken">A pagination token for fetching the next page of slot type versions. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of versions, specify the pagination token in the next request. </param>
		/// <param name="maxResults">The maximum number of slot type versions to return in the response. The default is 10.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<GetSlotTypeVersionsResponse> GetSlotTypeVersionsAsync(string name, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "slottypes/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/versions/&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetSlotTypeVersionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns slot type information as follows: </p> <ul> <li> <p>If you specify the <code>nameContains</code> field, returns the <code>$LATEST</code> version of all slot types that contain the specified string.</p> </li> <li> <p> If you don't specify the <code>nameContains</code> field, returns information about the <code>$LATEST</code> version of all slot types. </p> </li> </ul> <p> The operation requires permission for the <code>lex:GetSlotTypes</code> action. </p>
		/// GetSlotTypes slottypes/
		/// </summary>
		/// <param name="nextToken">A pagination token that fetches the next page of slot types. If the response to this API call is truncated, Amazon Lex returns a pagination token in the response. To fetch next page of slot types, specify the pagination token in the next request.</param>
		/// <param name="maxResults">The maximum number of slot types to return in the response. The default is 10.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="nameContains">Substring to match in slot type names. A slot type will be returned if any part of its name matches the substring. For example, "xyz" matches both "xyzabc" and "abcxyz."
		/// Min length: 1
		/// Max length: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<GetSlotTypesResponse> GetSlotTypesAsync(string nextToken, int maxResults, string nameContains, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "slottypes/?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&nameContains=" + (nameContains==null? "" : System.Uri.EscapeDataString(nameContains));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetSlotTypesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Use the <code>GetUtterancesView</code> operation to get information about the utterances that your users have made to your bot. You can use this list to tune the utterances that your bot responds to.</p> <p>For example, say that you have created a bot to order flowers. After your users have used your bot for a while, use the <code>GetUtterancesView</code> operation to see the requests that they have made and whether they have been successful. You might find that the utterance "I want flowers" is not being recognized. You could add this utterance to the <code>OrderFlowers</code> intent so that your bot recognizes that utterance.</p> <p>After you publish a new version of a bot, you can get information about the old version and the new so that you can compare the performance across the two versions. </p> <p>Utterance statistics are generated once a day. Data is available for the last 15 days. You can request information for up to 5 versions of your bot in each request. Amazon Lex returns the most frequent utterances received by the bot in the last 15 days. The response contains information about a maximum of 100 utterances for each version.</p> <p>If you set <code>childDirected</code> field to true when you created your bot, if you are using slot obfuscation with one or more slots, or if you opted out of participating in improving Amazon Lex, utterances are not available.</p> <p>This operation requires permissions for the <code>lex:GetUtterancesView</code> action.</p>
		/// GetUtterancesView bots/{botname}/utterances#view=aggregation&bot_versions&status_type
		/// </summary>
		/// <param name="botname">The name of the bot for which utterance information should be returned.
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="bot_versions">An array of bot versions for which utterance information should be returned. The limit is 5 versions per request.
		/// Minimum items: 1
		/// Maximum items: 5
		// </param>
		/// <param name="status_type">To return utterances that were recognized and handled, use <code>Detected</code>. To return utterances that were not recognized, use <code>Missed</code>.</param>
		/// <returns>Success</returns>
		public async Task<GetUtterancesViewResponse> GetUtterancesViewAsync(string botname, string[] bot_versions, StatusType status_type, GetUtterancesViewView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botname==null? "" : System.Uri.EscapeDataString(botname))+"/utterances#view=aggregation&bot_versions&status_type&"+string.Join("&", bot_versions.Select(z => $"bot_versions={System.Uri.EscapeDataString(z.ToString())}"))+"&status_type=" + status_type+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetUtterancesViewResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of tags associated with the specified resource. Only bots, bot aliases, and bot channels can have tags associated with them.
		/// ListTagsForResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource to get a list of tags for.
		/// Min length: 1
		/// Max length: 1011
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTagsForResourceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds the specified tags to the specified resource. If a tag key already exists, the existing value is replaced with the new value.
		/// TagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the bot, bot alias, or bot channel to tag.
		/// Min length: 1
		/// Max length: 1011
		// </param>
		public async Task TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an Amazon Lex conversational bot or replaces an existing bot. When you create or update a bot you are only required to specify a name, a locale, and whether the bot is directed toward children under age 13. You can use this to add intents later, or to remove intents from an existing bot. When you create a bot with the minimum information, the bot is created or updated but Amazon Lex returns the <code/> response <code>FAILED</code>. You can build the bot after you add one or more intents. For more information about Amazon Lex bots, see <a>how-it-works</a>. </p> <p>If you specify the name of an existing bot, the fields in the request replace the existing values in the <code>$LATEST</code> version of the bot. Amazon Lex removes any fields that you don't provide values for in the request, except for the <code>idleTTLInSeconds</code> and <code>privacySettings</code> fields, which are set to their default values. If you don't specify values for required fields, Amazon Lex throws an exception.</p> <p>This operation requires permissions for the <code>lex:PutBot</code> action. For more information, see <a>security-iam</a>.</p>
		/// PutBot bots/{name}/versions/$LATEST
		/// </summary>
		/// <param name="name">The name of the bot. The name is <i>not</i> case sensitive. 
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<PutBotResponse> PutBotAsync(string name, PutBotPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/versions/$LATEST";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PutBotResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an intent or replaces an existing intent.</p> <p>To define the interaction between the user and your bot, you use one or more intents. For a pizza ordering bot, for example, you would create an <code>OrderPizza</code> intent. </p> <p>To create an intent or replace an existing intent, you must provide the following:</p> <ul> <li> <p>Intent name. For example, <code>OrderPizza</code>.</p> </li> <li> <p>Sample utterances. For example, "Can I order a pizza, please." and "I want to order a pizza."</p> </li> <li> <p>Information to be gathered. You specify slot types for the information that your bot will request from the user. You can specify standard slot types, such as a date or a time, or custom slot types such as the size and crust of a pizza.</p> </li> <li> <p>How the intent will be fulfilled. You can provide a Lambda function or configure the intent to return the intent information to the client application. If you use a Lambda function, when all of the intent information is available, Amazon Lex invokes your Lambda function. If you configure your intent to return the intent information to the client application. </p> </li> </ul> <p>You can specify other optional information in the request, such as:</p> <ul> <li> <p>A confirmation prompt to ask the user to confirm an intent. For example, "Shall I order your pizza?"</p> </li> <li> <p>A conclusion statement to send to the user after the intent has been fulfilled. For example, "I placed your pizza order."</p> </li> <li> <p>A follow-up prompt that asks the user for additional activity. For example, asking "Do you want to order a drink with your pizza?"</p> </li> </ul> <p>If you specify an existing intent name to update the intent, Amazon Lex replaces the values in the <code>$LATEST</code> version of the intent with the values in the request. Amazon Lex removes fields that you don't provide in the request. If you don't specify the required fields, Amazon Lex throws an exception. When you update the <code>$LATEST</code> version of an intent, the <code>status</code> field of any bot that uses the <code>$LATEST</code> version of the intent is set to <code>NOT_BUILT</code>.</p> <p>For more information, see <a>how-it-works</a>.</p> <p>This operation requires permissions for the <code>lex:PutIntent</code> action.</p>
		/// PutIntent intents/{name}/versions/$LATEST
		/// </summary>
		/// <param name="name"><p>The name of the intent. The name is <i>not</i> case sensitive. </p> <p>The name can't match a built-in intent name, or a built-in intent name with "AMAZON." removed. For example, because there is a built-in intent called <code>AMAZON.HelpIntent</code>, you can't create a custom intent called <code>HelpIntent</code>.</p> <p>For a list of built-in intents, see <a href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents">Standard Built-in Intents</a> in the <i>Alexa Skills Kit</i>.</p>
		/// Min length: 1
		/// Max length: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<PutIntentResponse> PutIntentAsync(string name, PutIntentPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "intents/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/versions/$LATEST";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PutIntentResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a custom slot type or replaces an existing custom slot type.</p> <p>To create a custom slot type, specify a name for the slot type and a set of enumeration values, which are the values that a slot of this type can assume. For more information, see <a>how-it-works</a>.</p> <p>If you specify the name of an existing slot type, the fields in the request replace the existing values in the <code>$LATEST</code> version of the slot type. Amazon Lex removes the fields that you don't provide in the request. If you don't specify required fields, Amazon Lex throws an exception. When you update the <code>$LATEST</code> version of a slot type, if a bot uses the <code>$LATEST</code> version of an intent that contains the slot type, the bot's <code>status</code> field is set to <code>NOT_BUILT</code>.</p> <p>This operation requires permissions for the <code>lex:PutSlotType</code> action.</p>
		/// PutSlotType slottypes/{name}/versions/$LATEST
		/// </summary>
		/// <param name="name"><p>The name of the slot type. The name is <i>not</i> case sensitive. </p> <p>The name can't match a built-in slot type name, or a built-in slot type name with "AMAZON." removed. For example, because there is a built-in slot type called <code>AMAZON.DATE</code>, you can't create a custom slot type called <code>DATE</code>.</p> <p>For a list of built-in slot types, see <a href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/slot-type-reference">Slot Type Reference</a> in the <i>Alexa Skills Kit</i>.</p>
		/// Min length: 1
		/// Max length: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<PutSlotTypeResponse> PutSlotTypeAsync(string name, PutSlotTypePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "slottypes/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/versions/$LATEST";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PutSlotTypeResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts a job to import a resource to Amazon Lex.
		/// StartImport imports/
		/// </summary>
		public async Task StartImportAsync(StartImportPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "imports/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes tags from a bot, bot alias or bot channel.
		/// UntagResource tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource to remove the tags from.
		/// Min length: 1
		/// Max length: 1011
		// </param>
		/// <param name="tagKeys">A list of tag keys to remove from the resource. If a tag key does not exist on the resource, it is ignored.
		/// Minimum items: 0
		/// Maximum items: 200
		// </param>
		public async Task UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class CreateBotVersionPostBody
	{
		
		/// <summary>
		/// Identifies a specific revision of the <code>$LATEST</code> version of the bot. If you specify a checksum and the <code>$LATEST</code> version of the bot has a different checksum, a <code>PreconditionFailedException</code> exception is returned and Amazon Lex doesn't publish a new version. If you don't specify a checksum, Amazon Lex publishes the <code>$LATEST</code> version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checksum")]
		public string Checksum { get; set; }
	}
	
	public class CreateIntentVersionPostBody
	{
		
		/// <summary>
		/// Checksum of the <code>$LATEST</code> version of the intent that should be used to create the new version. If you specify a checksum and the <code>$LATEST</code> version of the intent has a different checksum, Amazon Lex returns a <code>PreconditionFailedException</code> exception and doesn't publish a new version. If you don't specify a checksum, Amazon Lex publishes the <code>$LATEST</code> version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checksum")]
		public string Checksum { get; set; }
	}
	
	public class CreateSlotTypeVersionPostBody
	{
		
		/// <summary>
		/// Checksum for the <code>$LATEST</code> version of the slot type that you want to publish. If you specify a checksum and the <code>$LATEST</code> version of the slot type has a different checksum, Amazon Lex returns a <code>PreconditionFailedException</code> exception and doesn't publish the new version. If you don't specify a checksum, Amazon Lex publishes the <code>$LATEST</code> version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checksum")]
		public string Checksum { get; set; }
	}
	
	public class PutBotAliasPutBody
	{
		
		/// <summary>
		/// A description of the alias.
		/// Min length: 0
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// The version of the bot.
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// Pattern: \$LATEST|[0-9]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\$LATEST|[0-9]+")]
		public string BotVersion { get; set; }
		
		/// <summary>
		/// <p>Identifies a specific revision of the <code>$LATEST</code> version.</p> <p>When you create a new bot alias, leave the <code>checksum</code> field blank. If you specify a checksum you get a <code>BadRequestException</code> exception.</p> <p>When you want to update a bot alias, set the <code>checksum</code> field to the checksum of the most recent revision of the <code>$LATEST</code> version. If you don't specify the <code> checksum</code> field, or if the checksum does not match the <code>$LATEST</code> version, you get a <code>PreconditionFailedException</code> exception.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checksum")]
		public string Checksum { get; set; }
		
		/// <summary>
		/// Provides the settings needed for conversation logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conversationLogs")]
		public PutBotAliasPutBodyConversationLogs ConversationLogs { get; set; }
		
		/// <summary>
		/// A list of tags to add to the bot alias. You can only add tags when you create an alias, you can't use the <code>PutBotAlias</code> operation to update the tags on a bot alias. To update tags, use the <code>TagResource</code> operation.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	public class PutBotAliasPutBodyConversationLogs
	{
		
		[System.Runtime.Serialization.DataMember(Name="logSettings")]
		public LogSettingsRequest[] LogSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iamRoleArn")]
		public string IamRoleArn { get; set; }
	}
	
	public enum GetBuiltinIntentsLocale
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de-DE")]
		deMinusDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-AU")]
		enMinusAU = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-GB")]
		enMinusGB = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-IN")]
		enMinusIN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-US")]
		enMinusUS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-419")]
		esMinus419 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-ES")]
		esMinusES = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-US")]
		esMinusUS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-FR")]
		frMinusFR = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-CA")]
		frMinusCA = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="it-IT")]
		itMinusIT = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ja-JP")]
		jaMinusJP = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ko-KR")]
		koMinusKR = 12,
	}
	
	public enum GetBuiltinSlotTypesLocale
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de-DE")]
		deMinusDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-AU")]
		enMinusAU = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-GB")]
		enMinusGB = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-IN")]
		enMinusIN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-US")]
		enMinusUS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-419")]
		esMinus419 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-ES")]
		esMinusES = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-US")]
		esMinusUS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-FR")]
		frMinusFR = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-CA")]
		frMinusCA = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="it-IT")]
		itMinusIT = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ja-JP")]
		jaMinusJP = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ko-KR")]
		koMinusKR = 12,
	}
	
	public class StartMigrationPostBody
	{
		
		/// <summary>
		/// The name of the Amazon Lex V1 bot that you are migrating to Amazon Lex V2.
		/// Required
		/// Min length: 2
		/// Max length: 50
		/// Pattern: ^([A-Za-z]_?)+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="v1BotName")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([A-Za-z]_?)+$")]
		public string V1BotName { get; set; }
		
		/// <summary>
		/// The version of the bot to migrate to Amazon Lex V2. You can migrate the <code>$LATEST</code> version as well as any numbered version.
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// Pattern: \$LATEST|[0-9]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="v1BotVersion")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\$LATEST|[0-9]+")]
		public string V1BotVersion { get; set; }
		
		/// <summary>
		/// <p>The name of the Amazon Lex V2 bot that you are migrating the Amazon Lex V1 bot to. </p> <ul> <li> <p>If the Amazon Lex V2 bot doesn't exist, you must use the <code>CREATE_NEW</code> migration strategy.</p> </li> <li> <p>If the Amazon Lex V2 bot exists, you must use the <code>UPDATE_EXISTING</code> migration strategy to change the contents of the Amazon Lex V2 bot.</p> </li> </ul>
		/// Required
		/// Min length: 1
		/// Max length: 100
		/// Pattern: ^([0-9a-zA-Z][_-]?)+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="v2BotName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([0-9a-zA-Z][_-]?)+$")]
		public string V2BotName { get; set; }
		
		/// <summary>
		/// The IAM role that Amazon Lex uses to run the Amazon Lex V2 bot.
		/// Required
		/// Min length: 20
		/// Max length: 2048
		/// Pattern: ^arn:[\w\-]+:iam::[\d]{12}:role/.+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="v2BotRole")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:[\w\-]+:iam::[\d]{12}:role/.+$")]
		public string V2BotRole { get; set; }
		
		/// <summary>
		/// <p>The strategy used to conduct the migration.</p> <ul> <li> <p> <code>CREATE_NEW</code> - Creates a new Amazon Lex V2 bot and migrates the Amazon Lex V1 bot to the new bot.</p> </li> <li> <p> <code>UPDATE_EXISTING</code> - Overwrites the existing Amazon Lex V2 bot metadata and the locale being migrated. It doesn't change any other locales in the Amazon Lex V2 bot. If the locale doesn't exist, a new locale is created in the Amazon Lex V2 bot.</p> </li> </ul>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="migrationStrategy")]
		public MigrationStrategy MigrationStrategy { get; set; }
	}
	
	public enum GetUtterancesViewView
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		aggregation = 0,
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// A list of tag keys to add to the resource. If a tag key already exists, the existing value is replaced with the new value.
		/// Required
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	public class PutBotPutBody
	{
		
		/// <summary>
		/// A description of the bot.
		/// Min length: 0
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// An array of <code>Intent</code> objects. Each intent represents a command that a user can express. For example, a pizza ordering bot might support an OrderPizza intent. For more information, see <a>how-it-works</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intents")]
		public Intent[] Intents { get; set; }
		
		/// <summary>
		/// <p>Set to <code>true</code> to enable access to natural language understanding improvements. </p> <p>When you set the <code>enableModelImprovements</code> parameter to <code>true</code> you can use the <code>nluIntentConfidenceThreshold</code> parameter to configure confidence scores. For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/confidence-scores.html">Confidence Scores</a>.</p> <p>You can only set the <code>enableModelImprovements</code> parameter in certain Regions. If you set the parameter to <code>true</code>, your bot has access to accuracy improvements.</p> <p>The Regions where you can set the <code>enableModelImprovements</code> parameter to <code>true</code> are:</p> <ul> <li> <p>US East (N. Virginia) (us-east-1)</p> </li> <li> <p>US West (Oregon) (us-west-2)</p> </li> <li> <p>Asia Pacific (Sydney) (ap-southeast-2)</p> </li> <li> <p>EU (Ireland) (eu-west-1)</p> </li> </ul> <p>In other Regions, the <code>enableModelImprovements</code> parameter is set to <code>true</code> by default. In these Regions setting the parameter to <code>false</code> throws a <code>ValidationException</code> exception.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableModelImprovements")]
		public System.Nullable<System.Boolean> EnableModelImprovements { get; set; }
		
		/// <summary>
		/// <p>Determines the threshold where Amazon Lex will insert the <code>AMAZON.FallbackIntent</code>, <code>AMAZON.KendraSearchIntent</code>, or both when returning alternative intents in a <a href="https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostContent.html">PostContent</a> or <a href="https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html">PostText</a> response. <code>AMAZON.FallbackIntent</code> and <code>AMAZON.KendraSearchIntent</code> are only inserted if they are configured for the bot.</p> <p>You must set the <code>enableModelImprovements</code> parameter to <code>true</code> to use confidence scores in the following regions.</p> <ul> <li> <p>US East (N. Virginia) (us-east-1)</p> </li> <li> <p>US West (Oregon) (us-west-2)</p> </li> <li> <p>Asia Pacific (Sydney) (ap-southeast-2)</p> </li> <li> <p>EU (Ireland) (eu-west-1)</p> </li> </ul> <p>In other Regions, the <code>enableModelImprovements</code> parameter is set to <code>true</code> by default.</p> <p>For example, suppose a bot is configured with the confidence threshold of 0.80 and the <code>AMAZON.FallbackIntent</code>. Amazon Lex returns three alternative intents with the following confidence scores: IntentA (0.70), IntentB (0.60), IntentC (0.50). The response from the <code>PostText</code> operation would be:</p> <ul> <li> <p>AMAZON.FallbackIntent</p> </li> <li> <p>IntentA</p> </li> <li> <p>IntentB</p> </li> <li> <p>IntentC</p> </li> </ul>
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nluIntentConfidenceThreshold")]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public System.Nullable<System.Double> NluIntentConfidenceThreshold { get; set; }
		
		/// <summary>
		/// Obtains information from the user. To define a prompt, provide one or more messages and specify the number of attempts to get information from the user. If you provide more than one message, Amazon Lex chooses one of the messages to use to prompt the user. For more information, see <a>how-it-works</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clarificationPrompt")]
		public PutBotPutBodyClarificationPrompt ClarificationPrompt { get; set; }
		
		/// <summary>
		/// A collection of messages that convey information to the user. At runtime, Amazon Lex selects the message to convey. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="abortStatement")]
		public PutBotPutBodyAbortStatement AbortStatement { get; set; }
		
		/// <summary>
		/// <p>The maximum time in seconds that Amazon Lex retains the data gathered in a conversation.</p> <p>A user interaction session remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.</p> <p>For example, suppose that a user chooses the OrderPizza intent, but gets sidetracked halfway through placing an order. If the user doesn't complete the order within the specified time, Amazon Lex discards the slot information that it gathered, and the user must start over.</p> <p>If you don't include the <code>idleSessionTTLInSeconds</code> element in a <code>PutBot</code> operation request, Amazon Lex uses the default value. This is also true if the request replaces an existing bot.</p> <p>The default is 300 seconds (5 minutes).</p>
		/// Minimum: 60
		/// Maximum: 86400
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idleSessionTTLInSeconds")]
		[System.ComponentModel.DataAnnotations.Range(60, 86400)]
		public System.Nullable<System.Int32> IdleSessionTTLInSeconds { get; set; }
		
		/// <summary>
		/// The Amazon Polly voice ID that you want Amazon Lex to use for voice interactions with the user. The locale configured for the voice must match the locale of the bot. For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/voicelist.html">Voices in Amazon Polly</a> in the <i>Amazon Polly Developer Guide</i>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="voiceId")]
		public string VoiceId { get; set; }
		
		/// <summary>
		/// <p>Identifies a specific revision of the <code>$LATEST</code> version.</p> <p>When you create a new bot, leave the <code>checksum</code> field blank. If you specify a checksum you get a <code>BadRequestException</code> exception.</p> <p>When you want to update a bot, set the <code>checksum</code> field to the checksum of the most recent revision of the <code>$LATEST</code> version. If you don't specify the <code> checksum</code> field, or if the checksum does not match the <code>$LATEST</code> version, you get a <code>PreconditionFailedException</code> exception.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checksum")]
		public string Checksum { get; set; }
		
		/// <summary>
		/// <p>If you set the <code>processBehavior</code> element to <code>BUILD</code>, Amazon Lex builds the bot so that it can be run. If you set the element to <code>SAVE</code> Amazon Lex saves the bot, but doesn't build it. </p> <p>If you don't specify this value, the default value is <code>BUILD</code>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processBehavior")]
		public ProcessBehavior ProcessBehavior { get; set; }
		
		/// <summary>
		/// <p> Specifies the target locale for the bot. Any intent used in the bot must be compatible with the locale of the bot. </p> <p>The default is <code>en-US</code>.</p>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public PutBotPutBodyLocale Locale { get; set; }
		
		/// <summary>
		/// <p>For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying <code>true</code> or <code>false</code> in the <code>childDirected</code> field. By specifying <code>true</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying <code>false</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is not</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the <code>childDirected</code> field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA.</p> <p>If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the <a href="https://aws.amazon.com/lex/faqs#data-security">Amazon Lex FAQ.</a> </p>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="childDirected")]
		public bool ChildDirected { get; set; }
		
		/// <summary>
		/// When set to <code>true</code> user utterances are sent to Amazon Comprehend for sentiment analysis. If you don't specify <code>detectSentiment</code>, the default is <code>false</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectSentiment")]
		public System.Nullable<System.Boolean> DetectSentiment { get; set; }
		
		/// <summary>
		/// When set to <code>true</code> a new numbered version of the bot is created. This is the same as calling the <code>CreateBotVersion</code> operation. If you don't specify <code>createVersion</code>, the default is <code>false</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createVersion")]
		public System.Nullable<System.Boolean> CreateVersion { get; set; }
		
		/// <summary>
		/// A list of tags to add to the bot. You can only add tags when you create a bot, you can't use the <code>PutBot</code> operation to update the tags on a bot. To update tags, use the <code>TagResource</code> operation.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	public class PutBotPutBodyClarificationPrompt
	{
		
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxAttempts")]
		public System.Nullable<System.Int32> MaxAttempts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responseCard")]
		public string ResponseCard { get; set; }
	}
	
	public class PutBotPutBodyAbortStatement
	{
		
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responseCard")]
		public string ResponseCard { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PutBotPutBodyLocale
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de-DE")]
		deMinusDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-AU")]
		enMinusAU = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-GB")]
		enMinusGB = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-IN")]
		enMinusIN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-US")]
		enMinusUS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-419")]
		esMinus419 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-ES")]
		esMinusES = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-US")]
		esMinusUS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-FR")]
		frMinusFR = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-CA")]
		frMinusCA = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="it-IT")]
		itMinusIT = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ja-JP")]
		jaMinusJP = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ko-KR")]
		koMinusKR = 12,
	}
	
	public class PutIntentPutBody
	{
		
		/// <summary>
		/// A description of the intent.
		/// Min length: 0
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// An array of intent slots. At runtime, Amazon Lex elicits required slot values from the user using prompts defined in the slots. For more information, see <a>how-it-works</a>. 
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slots")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public Slot[] Slots { get; set; }
		
		/// <summary>
		/// <p>An array of utterances (strings) that a user might say to signal the intent. For example, "I want {PizzaSize} pizza", "Order {Quantity} {PizzaSize} pizzas". </p> <p>In each utterance, a slot name is enclosed in curly braces. </p>
		/// Minimum items: 0
		/// Maximum items: 1500
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sampleUtterances")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1500)]
		public string[] SampleUtterances { get; set; }
		
		/// <summary>
		/// Obtains information from the user. To define a prompt, provide one or more messages and specify the number of attempts to get information from the user. If you provide more than one message, Amazon Lex chooses one of the messages to use to prompt the user. For more information, see <a>how-it-works</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confirmationPrompt")]
		public PutIntentPutBodyConfirmationPrompt ConfirmationPrompt { get; set; }
		
		/// <summary>
		/// A collection of messages that convey information to the user. At runtime, Amazon Lex selects the message to convey. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rejectionStatement")]
		public PutIntentPutBodyRejectionStatement RejectionStatement { get; set; }
		
		/// <summary>
		/// A prompt for additional activity after an intent is fulfilled. For example, after the <code>OrderPizza</code> intent is fulfilled, you might prompt the user to find out whether the user wants to order drinks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="followUpPrompt")]
		public PutIntentPutBodyFollowUpPrompt FollowUpPrompt { get; set; }
		
		/// <summary>
		/// A collection of messages that convey information to the user. At runtime, Amazon Lex selects the message to convey. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conclusionStatement")]
		public PutIntentPutBodyConclusionStatement ConclusionStatement { get; set; }
		
		/// <summary>
		/// Specifies a Lambda function that verifies requests to a bot or fulfills the user's request to a bot..
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dialogCodeHook")]
		public PutIntentPutBodyDialogCodeHook DialogCodeHook { get; set; }
		
		/// <summary>
		/// <p> Describes how the intent is fulfilled after the user provides all of the information required for the intent. You can provide a Lambda function to process the intent, or you can return the intent information to the client application. We recommend that you use a Lambda function so that the relevant logic lives in the Cloud and limit the client-side code primarily to presentation. If you need to update the logic, you only update the Lambda function; you don't need to upgrade your client application. </p> <p>Consider the following examples:</p> <ul> <li> <p>In a pizza ordering application, after the user provides all of the information for placing an order, you use a Lambda function to place an order with a pizzeria. </p> </li> <li> <p>In a gaming application, when a user says "pick up a rock," this information must go back to the client application so that it can perform the operation and update the graphics. In this case, you want Amazon Lex to return the intent data to the client. </p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fulfillmentActivity")]
		public PutIntentPutBodyFulfillmentActivity FulfillmentActivity { get; set; }
		
		/// <summary>
		/// A unique identifier for the built-in intent to base this intent on. To find the signature for an intent, see <a href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents">Standard Built-in Intents</a> in the <i>Alexa Skills Kit</i>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentIntentSignature")]
		public string ParentIntentSignature { get; set; }
		
		/// <summary>
		/// <p>Identifies a specific revision of the <code>$LATEST</code> version.</p> <p>When you create a new intent, leave the <code>checksum</code> field blank. If you specify a checksum you get a <code>BadRequestException</code> exception.</p> <p>When you want to update a intent, set the <code>checksum</code> field to the checksum of the most recent revision of the <code>$LATEST</code> version. If you don't specify the <code> checksum</code> field, or if the checksum does not match the <code>$LATEST</code> version, you get a <code>PreconditionFailedException</code> exception.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checksum")]
		public string Checksum { get; set; }
		
		/// <summary>
		/// When set to <code>true</code> a new numbered version of the intent is created. This is the same as calling the <code>CreateIntentVersion</code> operation. If you do not specify <code>createVersion</code>, the default is <code>false</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createVersion")]
		public System.Nullable<System.Boolean> CreateVersion { get; set; }
		
		/// <summary>
		/// Provides configuration information for the AMAZON.KendraSearchIntent intent. When you use this intent, Amazon Lex searches the specified Amazon Kendra index and returns documents from the index that match the user's utterance. For more information, see <a href="http://docs.aws.amazon.com/lex/latest/dg/built-in-intent-kendra-search.html"> AMAZON.KendraSearchIntent</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kendraConfiguration")]
		public PutIntentPutBodyKendraConfiguration KendraConfiguration { get; set; }
		
		/// <summary>
		/// An array of <code>InputContext</code> objects that lists the contexts that must be active for Amazon Lex to choose the intent in a conversation with the user.
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputContexts")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public InputContext[] InputContexts { get; set; }
		
		/// <summary>
		/// An array of <code>OutputContext</code> objects that lists the contexts that the intent activates when the intent is fulfilled.
		/// Minimum items: 0
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputContexts")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public OutputContext[] OutputContexts { get; set; }
	}
	
	public class PutIntentPutBodyConfirmationPrompt
	{
		
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxAttempts")]
		public System.Nullable<System.Int32> MaxAttempts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responseCard")]
		public string ResponseCard { get; set; }
	}
	
	public class PutIntentPutBodyRejectionStatement
	{
		
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responseCard")]
		public string ResponseCard { get; set; }
	}
	
	public class PutIntentPutBodyFollowUpPrompt
	{
		
		[System.Runtime.Serialization.DataMember(Name="prompt")]
		public Prompt Prompt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rejectionStatement")]
		public Statement RejectionStatement { get; set; }
	}
	
	public class PutIntentPutBodyConclusionStatement
	{
		
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responseCard")]
		public string ResponseCard { get; set; }
	}
	
	public class PutIntentPutBodyDialogCodeHook
	{
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messageVersion")]
		public string MessageVersion { get; set; }
	}
	
	public class PutIntentPutBodyFulfillmentActivity
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public FulfillmentActivityType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="codeHook")]
		public CodeHook CodeHook { get; set; }
	}
	
	public class PutIntentPutBodyKendraConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="kendraIndex")]
		public string KendraIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryFilterString")]
		public string QueryFilterString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
	}
	
	public class PutSlotTypePutBody
	{
		
		/// <summary>
		/// A description of the slot type.
		/// Min length: 0
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// <p>A list of <code>EnumerationValue</code> objects that defines the values that the slot type can take. Each value can have a list of <code>synonyms</code>, which are additional values that help train the machine learning model about the values that it resolves for a slot. </p> <p>A regular expression slot type doesn't require enumeration values. All other slot types require a list of enumeration values.</p> <p>When Amazon Lex resolves a slot value, it generates a resolution list that contains up to five possible values for the slot. If you are using a Lambda function, this resolution list is passed to the function. If you are not using a Lambda function you can choose to return the value that the user entered or the first value in the resolution list as the slot value. The <code>valueSelectionStrategy</code> field indicates the option to use. </p>
		/// Minimum items: 0
		/// Maximum items: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enumerationValues")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public EnumerationValue[] EnumerationValues { get; set; }
		
		/// <summary>
		/// <p>Identifies a specific revision of the <code>$LATEST</code> version.</p> <p>When you create a new slot type, leave the <code>checksum</code> field blank. If you specify a checksum you get a <code>BadRequestException</code> exception.</p> <p>When you want to update a slot type, set the <code>checksum</code> field to the checksum of the most recent revision of the <code>$LATEST</code> version. If you don't specify the <code> checksum</code> field, or if the checksum does not match the <code>$LATEST</code> version, you get a <code>PreconditionFailedException</code> exception.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checksum")]
		public string Checksum { get; set; }
		
		/// <summary>
		/// <p>Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values:</p> <ul> <li> <p> <code>ORIGINAL_VALUE</code> - Returns the value entered by the user, if the user value is similar to the slot value.</p> </li> <li> <p> <code>TOP_RESOLUTION</code> - If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned.</p> </li> </ul> <p>If you don't specify the <code>valueSelectionStrategy</code>, the default is <code>ORIGINAL_VALUE</code>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueSelectionStrategy")]
		public SlotValueSelectionStrategy ValueSelectionStrategy { get; set; }
		
		/// <summary>
		/// When set to <code>true</code> a new numbered version of the slot type is created. This is the same as calling the <code>CreateSlotTypeVersion</code> operation. If you do not specify <code>createVersion</code>, the default is <code>false</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createVersion")]
		public System.Nullable<System.Boolean> CreateVersion { get; set; }
		
		/// <summary>
		/// <p>The built-in slot type used as the parent of the slot type. When you define a parent slot type, the new slot type has all of the same configuration as the parent.</p> <p>Only <code>AMAZON.AlphaNumeric</code> is supported.</p>
		/// Min length: 1
		/// Max length: 100
		/// Pattern: ^((AMAZON\.)_?|[A-Za-z]_?)+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentSlotTypeSignature")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^((AMAZON\.)_?|[A-Za-z]_?)+")]
		public string ParentSlotTypeSignature { get; set; }
		
		/// <summary>
		/// Configuration information that extends the parent built-in slot type. The configuration is added to the settings for the parent slot type.
		/// Minimum items: 0
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slotTypeConfigurations")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public SlotTypeConfiguration[] SlotTypeConfigurations { get; set; }
	}
	
	public class StartImportPostBody
	{
		
		/// <summary>
		/// A zip archive in binary format. The archive should contain one file, a JSON file containing the resource to import. The resource should match the type specified in the <code>resourceType</code> field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public string Payload { get; set; }
		
		/// <summary>
		/// <p>Specifies the type of resource to export. Each resource also exports any resources that it depends on. </p> <ul> <li> <p>A bot exports dependent intents.</p> </li> <li> <p>An intent exports dependent slot types.</p> </li> </ul>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		/// <summary>
		/// <p>Specifies the action that the <code>StartImport</code> operation should take when there is an existing resource with the same name.</p> <ul> <li> <p>FAIL_ON_CONFLICT - The import operation is stopped on the first conflict between a resource in the import file and an existing resource. The name of the resource causing the conflict is in the <code>failureReason</code> field of the response to the <code>GetImport</code> operation.</p> <p>OVERWRITE_LATEST - The import operation proceeds even if there is a conflict with an existing resource. The $LASTEST version of the existing resource is overwritten with the data from the import file.</p> </li> </ul>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mergeStrategy")]
		public MergeStrategy MergeStrategy { get; set; }
		
		/// <summary>
		/// A list of tags to add to the imported bot. You can only add tags when you import a bot, you can't add tags to an intent or slot type.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
