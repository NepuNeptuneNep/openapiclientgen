//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// **This API version number**.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class About
	{
		
		/// <summary>
		/// **The release date of this API, ISO 8601 format.**
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiReleaseDateIso8601")]
		public string ApiReleaseDateIso8601 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public AboutApiVersion ApiVersion { get; set; }
		
		/// <summary>
		/// **The list of available languages.**
		///
		///Each language is identified by its ISO 639-1, two-letter code.
		///
		///The list elements are comma-separated and sorted in ascending order.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableLanguagesIso639_1")]
		public string AvailableLanguagesIso639_1 { get; set; }
	}
	
	public class AboutApiVersion
	{
		
		/// <summary>
		/// This API version major number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="majorNumber")]
		public System.Nullable<System.Int32> MajorNumber { get; set; }
		
		/// <summary>
		/// This API version minor number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minorNumber")]
		public System.Nullable<System.Int32> MinorNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Ec
	{
		
		/// <summary>
		/// **The penalty applied to each character that has been found to be part of an alphabet sequence.**
		///
		///The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alphabetSequence")]
		public EcAlphabetSequence[] EcAlphabetSequence { get; set; }
		
		/// <summary>
		/// **This API version number.**
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// **The detected keyboard, QWERTY or Dvorak.**
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectedKeyboard")]
		public string DetectedKeyboard { get; set; }
		
		/// <summary>
		/// **The ratio entropy / idealEntropy.**
		///
		///It is a float number in the range [0, 1].
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="efficiency")]
		public System.Nullable<System.Double> Efficiency { get; set; }
		
		/// <summary>
		/// **The entropy calculated for the input password.**
		///
		///It is measured in bits.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entropy")]
		public System.Nullable<System.Double> Entropy { get; set; }
		
		/// <summary>
		/// **The distribution of the calculated entropy among the password characters.**
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entropyDistribution")]
		public EcEntropyDistribution[] EcEntropyDistribution { get; set; }
		
		/// <summary>
		/// **The Shannon entropy.**
		///
		///The Shannon entropy is the entropy calculated if no penalizations - words, number sequence, alphabet sequence, etc - were found in the password.
		///
		///It is measured in bits.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idealEntropy")]
		public System.Nullable<System.Double> IdealEntropy { get; set; }
		
		/// <summary>
		/// **The penalty applied to each character that has been found to be part of a keyboard sequence.**
		///
		///The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyboardSequence")]
		public EcKeyboardSequence[] EcKeyboardSequence { get; set; }
		
		/// <summary>
		/// The analyzed password after the l33t substitution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="l33tPassword")]
		public string L33tPassword { get; set; }
		
		/// <summary>
		/// **The penalty applied to the whole password because of irregular entropy distribution.**
		///
		///This penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonUniformEntropyDistributionPenalty")]
		public System.Nullable<System.Double> NonUniformEntropyDistributionPenalty { get; set; }
		
		/// <summary>
		/// **The penalty applied to each character that has been found to be part of a number sequence.**
		///
		///The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberSequence")]
		public EcNumberSequence[] EcNumberSequence { get; set; }
		
		/// <summary>
		/// The analyzed password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// The number of characters the password has.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordLength")]
		public System.Nullable<System.Int32> PasswordLength { get; set; }
		
		/// <summary>
		/// **The penalty applied to each character that has been found to be part of a word, number sequence, alphabet sequence, etc.**
		///
		///The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
		///
		///Its value is equal to the value of the input parameter *penalty*.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="penalty")]
		public System.Nullable<System.Double> Penalty { get; set; }
		
		/// <summary>
		/// **The penalty applied to each character that are repeated**
		///
		///The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.          
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repeatedChars")]
		public EcRepeatedChars[] EcRepeatedChars { get; set; }
		
		/// <summary>
		/// **The identifier of the request that corresponds to this response.**
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// **The timestamp for this response.**
		///
		///Milliseconds from the epoch of 1970-01-01T00:00:00Z.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestTimestamp")]
		public System.Nullable<System.Double> RequestTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string[] Summary { get; set; }
		
		/// <summary>
		/// **The total penalty applied to each character.**
		///
		///The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public EcTotal[] EcTotal { get; set; }
		
		/// <summary>
		/// **The penalty applied to each character that has been found to be part of a word.**
		///
		///The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="words")]
		public EcWords[] EcWords { get; set; }
	}
	
	public class EcAlphabetSequence
	{
		
		/// <summary>
		/// The n-th character.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="char")]
		public string Char { get; set; }
		
		/// <summary>
		/// The n-th character after the l33t transformation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="l33tchar")]
		public string L33tchar { get; set; }
		
		/// <summary>
		/// The penalty applied to this character if it is part of an alphabet sequence.
		///
		///The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="penalty")]
		public System.Nullable<System.Double> Penalty { get; set; }
	}
	
	public class EcEntropyDistribution
	{
		
		/// <summary>
		/// The n-th character.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="char")]
		public string Char { get; set; }
		
		/// <summary>
		/// The n-th character after the l33t transformation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="l33tchar")]
		public string L33tchar { get; set; }
		
		/// <summary>
		/// The amount of entropy contributed by this character, expressed as percentage of the total.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public System.Nullable<System.Double> Percentage { get; set; }
	}
	
	public class EcKeyboardSequence
	{
		
		/// <summary>
		/// The n-th character.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="char")]
		public string Char { get; set; }
		
		/// <summary>
		/// The n-th character after the l33t transformation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="l33tchar")]
		public string L33tchar { get; set; }
		
		/// <summary>
		/// The penalty applied to this character if it is part of a keyboard sequence.
		///
		///The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="penalty")]
		public System.Nullable<System.Double> Penalty { get; set; }
	}
	
	public class EcNumberSequence
	{
		
		/// <summary>
		/// The n-th character.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="char")]
		public string Char { get; set; }
		
		/// <summary>
		/// The n-th character after the l33t transformation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="l33tchar")]
		public string L33tchar { get; set; }
		
		/// <summary>
		/// The penalty applied to this character if it is part of a number sequence.
		///
		///The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="penalty")]
		public System.Nullable<System.Double> Penalty { get; set; }
	}
	
	public class EcRepeatedChars
	{
		
		/// <summary>
		/// The n-th character.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="char")]
		public string Char { get; set; }
		
		/// <summary>
		/// The n-th character after the l33t transformation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="l33tchar")]
		public string L33tchar { get; set; }
		
		/// <summary>
		/// The penalty applied to this character if it is repeated.
		///
		///The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="penalty")]
		public System.Nullable<System.Double> Penalty { get; set; }
	}
	
	public class EcTotal
	{
		
		/// <summary>
		/// The n-th character.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="char")]
		public string Char { get; set; }
		
		/// <summary>
		/// The n-th character after the l33t transformation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="l33tchar")]
		public string L33tchar { get; set; }
		
		/// <summary>
		/// The total penalty applied to each character.
		///
		///The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.                
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="penalty")]
		public System.Nullable<System.Double> Penalty { get; set; }
	}
	
	public class EcWords
	{
		
		/// <summary>
		/// The n-th character.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="char")]
		public string Char { get; set; }
		
		/// <summary>
		/// The n-th character after the l33t transformation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="l33tchar")]
		public string L33tchar { get; set; }
		
		/// <summary>
		/// The penalty applied to this character if it is part of a word.
		///
		///The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.                
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="penalty")]
		public System.Nullable<System.Double> Penalty { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Metadata about this API&#58; version number, release date and available languages.
		/// 
		/// Metadata requests are NOT billed.
		/// 
		/// AboutGetByOutputFormat about
		/// </summary>
		/// <param name="outputFormat">**The format of the returned metadata.**
		///
		///Allowed values are *json*, *xml* and *yaml*.
		///
		///The default value is *xml*.
		///</param>
		/// <returns>**The metadata about this API&#58; version number, release date and available languages.**
		///</returns>
		public async Task<About> AboutGetByOutputFormatAsync(string outputFormat, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "about?outputFormat=" + (outputFormat==null? "" : System.Uri.EscapeDataString(outputFormat));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<About>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The entropy calculator - alias ec -, analyzes a password and calculates its entropy.
		/// 
		/// Entropy calculator requests are billed.
		/// 
		/// EcGetByPasswordAndOutputFormatAndPenaltyAndReqId ec
		/// </summary>
		/// <param name="password">**The password to be analyzed.**
		///
		///Minimum length is 4 characters; maximum length is 128 characters.
		///
		///Beware that certain characters like '&#35;', '&#61;' or '&#63;' must be properly encoded.
		///
		///For more information about this issue, please refer to RFC 3986 ("*Uniform Resource Identifier (URI): Generic Syntax*"), sections 2.1, 2.2 and 2.4.
		///</param>
		/// <param name="outputFormat">**The format of the returned analysis.**
		///
		///Allowed values are *json*, *xml* and *yaml*.
		///
		///The default value is *xml*.
		///</param>
		/// <param name="penalty">**The penalty applied to each character that is part of a word, number sequence, alphabet sequence, etc.**
		///
		///The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
		///
		///The character used as decimal separator is always '&#46;'. Hence, a parameter value like *0,33* would be illegal.
		///
		///The default value is *0.25*.
		///</param>
		/// <param name="reqId">**An identifier for this request.**
		///
		///The request identifier is a string that must match the regular expression */(?i)^[a-z0-9]{8,16}$/*.
		///
		///This identifier is echoed in the returned response. Its value has no effect on the password analysis.
		///
		///If this parameter is unset, a randomly generated identifier will be automatically assigned to this request.
		///</param>
		/// <returns>The password analysis, including the calculated entropy.</returns>
		public async Task<Ec> EcGetByPasswordAndOutputFormatAndPenaltyAndReqIdAsync(string password, string outputFormat, double penalty, string reqId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ec?password=" + (password==null? "" : System.Uri.EscapeDataString(password))+"&outputFormat=" + (outputFormat==null? "" : System.Uri.EscapeDataString(outputFormat))+"&penalty="+penalty+"&reqId=" + (reqId==null? "" : System.Uri.EscapeDataString(reqId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ec>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
