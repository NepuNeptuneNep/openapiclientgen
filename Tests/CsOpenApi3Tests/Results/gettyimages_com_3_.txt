//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AcquireAssetLicensesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="extended_licenses")]
		public ExtendedLicenses[] Extended_licenses { get; set; }
		
		/// <summary>
		/// Defaults to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="use_team_credits")]
		public System.Nullable<System.Boolean> Use_team_credits { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ExtendedLicenses
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="multiseat")]
		multiseat = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unlimited")]
		unlimited = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="resale")]
		resale = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="indemnification")]
		indemnification = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddBoardAssetsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="assets_added")]
		public BoardAsset[] Assets_added { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assets_not_added")]
		public string[] Assets_not_added { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BoardAsset
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="asset_id")]
		public string Asset_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AffiliateImage
	{
		
		[System.Runtime.Serialization.DataMember(Name="caption")]
		public string Caption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination_url")]
		public string Destination_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preview_urls")]
		public AffiliateImageUrls Preview_urls { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AffiliateImageUrls
	{
		
		[System.Runtime.Serialization.DataMember(Name="large")]
		public string Large { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="large_height")]
		public System.Nullable<System.Int32> Large_height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="large_width")]
		public System.Nullable<System.Int32> Large_width { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="medium")]
		public string Medium { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="medium_height")]
		public System.Nullable<System.Int32> Medium_height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="medium_width")]
		public System.Nullable<System.Int32> Medium_width { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="small")]
		public string Small { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="small_height")]
		public System.Nullable<System.Int32> Small_height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="small_width")]
		public System.Nullable<System.Int32> Small_width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AffiliateImageSearchResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="auto_corrections")]
		public AutoCorrections Auto_corrections { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="images")]
		public AffiliateImage[] Images { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoCorrections
	{
		
		[System.Runtime.Serialization.DataMember(Name="phrase")]
		public string Phrase { get; set; }
	}
	
	/// <summary>
	/// Specifies the graphical style of images desired.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AffiliateSearchStyle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="photography")]
		photography = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vector")]
		vector = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AffiliateVideo
	{
		
		[System.Runtime.Serialization.DataMember(Name="caption")]
		public string Caption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clip_length")]
		public string Clip_length { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination_url")]
		public string Destination_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preview_urls")]
		public AffiliateVideoUrls Preview_urls { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AffiliateVideoUrls
	{
		
		[System.Runtime.Serialization.DataMember(Name="large_motion")]
		public string Large_motion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="large_still")]
		public string Large_still { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="medium_still")]
		public string Medium_still { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="small_motion")]
		public string Small_motion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="small_still")]
		public string Small_still { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AffiliateVideoSearchResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="auto_corrections")]
		public AutoCorrections Auto_corrections { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="videos")]
		public AffiliateVideo[] Videos { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AgeOfPeopleFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="newborn")]
		newborn = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="baby")]
		baby = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="child")]
		child = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="teenager")]
		teenager = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="young_adult")]
		young_adult = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="adult")]
		adult = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="adults_only")]
		adults_only = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mature_adult")]
		mature_adult = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="senior_adult")]
		senior_adult = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0-1_months")]
		_0Minus1_months = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2-5_months")]
		_2Minus5_months = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6-11_months")]
		_6Minus11_months = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12-17_months")]
		_12Minus17_months = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="18-23_months")]
		_18Minus23_months = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2-3_years")]
		_2Minus3_years = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4-5_years")]
		_4Minus5_years = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6-7_years")]
		_6Minus7_years = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8-9_years")]
		_8Minus9_years = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10-11_years")]
		_10Minus11_years = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12-13_years")]
		_12Minus13_years = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="14-15_years")]
		_14Minus15_years = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16-17_years")]
		_16Minus17_years = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="18-19_years")]
		_18Minus19_years = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="20-24_years")]
		_20Minus24_years = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="20-29_years")]
		_20Minus29_years = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="25-29_years")]
		_25Minus29_years = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30-34_years")]
		_30Minus34_years = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30-39_years")]
		_30Minus39_years = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="35-39_years")]
		_35Minus39_years = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="40-44_years")]
		_40Minus44_years = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="40-49_years")]
		_40Minus49_years = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="45-49_years")]
		_45Minus49_years = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="50-54_years")]
		_50Minus54_years = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="50-59_years")]
		_50Minus59_years = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="55-59_years")]
		_55Minus59_years = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="60-64_years")]
		_60Minus64_years = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="60-69_years")]
		_60Minus69_years = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="65-69_years")]
		_65Minus69_years = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="70-79_years")]
		_70Minus79_years = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="80-89_years")]
		_80Minus89_years = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="90_plus_years")]
		_90_plus_years = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="100_over")]
		_100_over = 41,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AllowedUse
	{
		
		/// <summary>
		/// Indicates how the asset can be used
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="how_can_i_use_it")]
		public string How_can_i_use_it { get; set; }
		
		/// <summary>
		/// Indicates release status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="release_info")]
		public string Release_info { get; set; }
		
		/// <summary>
		/// Indicates asset usage restriction, if any
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usage_restrictions")]
		public string[] Usage_restrictions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Artist
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ArtistsImageSearchFieldValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="id")]
		id = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="allowed_use")]
		allowed_use = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="alternative_ids")]
		alternative_ids = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="artist")]
		artist = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="asset_family")]
		asset_family = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="asset_type")]
		asset_type = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="call_for_image")]
		call_for_image = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="caption")]
		caption = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collection_id")]
		collection_id = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collection_code")]
		collection_code = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collection_name")]
		collection_name = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="comp")]
		comp = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="copyright")]
		copyright = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date_created")]
		date_created = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date_submitted")]
		date_submitted = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="detail_set")]
		detail_set = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="display_set")]
		display_set = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="editorial_segments")]
		editorial_segments = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="event_ids")]
		event_ids = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="graphical_style")]
		graphical_style = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="keywords")]
		keywords = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="license_model")]
		license_model = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="max_dimensions")]
		max_dimensions = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="orientation")]
		orientation = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="preview")]
		preview = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="product_types")]
		product_types = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="quality_rank")]
		quality_rank = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="referral_destinations")]
		referral_destinations = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="summary_set")]
		summary_set = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="thumb")]
		thumb = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="title")]
		title = 30,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ArtistsVideoSearchFieldValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="id")]
		id = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="allowed_use")]
		allowed_use = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="alternative_ids")]
		alternative_ids = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="artist")]
		artist = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="asset_family")]
		asset_family = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="asset_type")]
		asset_type = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="call_for_image")]
		call_for_image = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="caption")]
		caption = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="clip_length")]
		clip_length = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collection_id")]
		collection_id = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collection_code")]
		collection_code = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collection_name")]
		collection_name = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="comp")]
		comp = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="copyright")]
		copyright = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date_created")]
		date_created = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date_submitted")]
		date_submitted = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="detail_set")]
		detail_set = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="display_set")]
		display_set = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="editorial_segments")]
		editorial_segments = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="event_ids")]
		event_ids = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="graphical_style")]
		graphical_style = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="keywords")]
		keywords = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="license_model")]
		license_model = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="max_dimensions")]
		max_dimensions = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="orientation")]
		orientation = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="preview")]
		preview = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="product_types")]
		product_types = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="quality_rank")]
		quality_rank = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="referral_destinations")]
		referral_destinations = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="summary_set")]
		summary_set = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="thumb")]
		thumb = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="title")]
		title = 31,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Asset
	{
		
		[System.Runtime.Serialization.DataMember(Name="asset_type")]
		public string Asset_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date_added")]
		public System.Nullable<System.DateTimeOffset> Date_added { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="display_sizes")]
		public DisplaySize[] Display_sizes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisplaySize
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssetChanges
	{
		
		/// <summary>
		/// Contains the identifier for the change-set resource. Passed into ConfirmAssetChanges requests to confirm receipt of the asset changes in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="change_set_id")]
		public string Change_set_id { get; set; }
		
		/// <summary>
		/// Contains a list of ChangedAssetList results for the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changed_assets")]
		public ChangedAssetDetail[] Changed_assets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChangedAssetDetail
	{
		
		/// <summary>
		/// Contains the date of the asset change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="asset_changed_utc_datetime")]
		public System.Nullable<System.DateTimeOffset> Asset_changed_utc_datetime { get; set; }
		
		/// <summary>
		/// Contains the type of change this asset change is. (i.e. "New," "Updated" or "Deleted")
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="asset_lifecycle")]
		public string Asset_lifecycle { get; set; }
		
		/// <summary>
		/// Contains the type of asset this asset change is (i.e. "Image").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="asset_type")]
		public string Asset_type { get; set; }
		
		/// <summary>
		/// Contains the Id for the asset change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Contains the asset download URL for assets with an AssetLifecycle of "New."
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssetDownloadHistoryResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="downloads")]
		public object Downloads { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssetEvent
	{
		
		[System.Runtime.Serialization.DataMember(Name="asset_id")]
		public string Asset_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email_address")]
		public string Email_address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AssetFamily
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NotSet")]
		NotSet = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Editorial")]
		Editorial = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Creative")]
		Creative = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Both")]
		Both = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssetIdFromOrder
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AssetLicenseName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Standard")]
		Standard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Multiseat")]
		Multiseat = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unlimited")]
		Unlimited = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Resale")]
		Resale = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Indemnification")]
		Indemnification = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssetLicensingResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="acquired_licenses")]
		public ExtendedLicenses[] Acquired_licenses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="credits_used")]
		public System.Nullable<System.Int32> Credits_used { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AssetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NotSet")]
		NotSet = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Image")]
		Image = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Film")]
		Film = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Music")]
		Music = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AssociatedVideoDetailFieldValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="allowed_use")]
		allowed_use = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="artist")]
		artist = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="aspect_ratio")]
		aspect_ratio = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="asset_family")]
		asset_family = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="call_for_image")]
		call_for_image = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="caption")]
		caption = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="clip_length")]
		clip_length = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collection_code")]
		collection_code = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collection_id")]
		collection_id = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collection_name")]
		collection_name = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="color_type")]
		color_type = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="comp")]
		comp = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="copyright")]
		copyright = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date_created")]
		date_created = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date_submitted")]
		date_submitted = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="detail_set")]
		detail_set = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="display_set")]
		display_set = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="download_product")]
		download_product = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="download_sizes")]
		download_sizes = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="editorial_segments")]
		editorial_segments = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="entity_details")]
		entity_details = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="era")]
		era = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="event_ids")]
		event_ids = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="id")]
		id = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="istock_collection")]
		istock_collection = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="keywords")]
		keywords = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="largest_downloads")]
		largest_downloads = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="license_model")]
		license_model = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mastered_to")]
		mastered_to = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="orientation")]
		orientation = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="originally_shot_on")]
		originally_shot_on = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="preview")]
		preview = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="product_types")]
		product_types = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="quality_rank")]
		quality_rank = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="referral_destinations")]
		referral_destinations = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="shot_speed")]
		shot_speed = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="source")]
		source = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="summary_set")]
		summary_set = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="thumb")]
		thumb = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="title")]
		title = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="istock_licenses")]
		istock_licenses = 40,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BlendedImageSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="best_match")]
		best_match = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="most_popular")]
		most_popular = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="newest")]
		newest = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="random")]
		random = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BlendedVideoSearchItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="allowed_use")]
		public AllowedUse Allowed_use { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artist")]
		public string Artist { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="asset_family")]
		public string Asset_family { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="caption")]
		public string Caption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clip_length")]
		public string Clip_length { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collection_code")]
		public string Collection_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collection_id")]
		public System.Nullable<System.Int32> Collection_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collection_name")]
		public string Collection_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="color_type")]
		public string Color_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="copyright")]
		public string Copyright { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="display_sizes")]
		public VideoSearchItemDisplaySize[] Display_sizes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="download_product")]
		public string Download_product { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="era")]
		public string Era { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="event_ids")]
		public int[] Event_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="istock_licenses")]
		public IStockLicense[] Istock_licenses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public Keyword[] Keywords { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="largest_downloads")]
		public Download[] Largest_downloads { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="license_model")]
		public string License_model { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mastered_to")]
		public string Mastered_to { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originally_shot_on")]
		public string Originally_shot_on { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product_types")]
		public string[] Product_types { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referral_destinations")]
		public ReferralDestination[] Referral_destinations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shot_speed")]
		public string Shot_speed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoSearchItemDisplaySize
	{
		
		[System.Runtime.Serialization.DataMember(Name="aspect_ratio")]
		public string Aspect_ratio { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_watermarked")]
		public System.Nullable<System.Boolean> Is_watermarked { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IStockLicense
	{
		
		[System.Runtime.Serialization.DataMember(Name="credits")]
		public System.Nullable<System.Int32> Credits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="license_type")]
		public AssetLicenseName License_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Keyword
	{
		
		[System.Runtime.Serialization.DataMember(Name="entity_types")]
		public string[] Entity_types { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entity_uris")]
		public string[] Entity_uris { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyword_id")]
		public string Keyword_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relevance")]
		public System.Nullable<System.Int32> Relevance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Download
	{
		
		[System.Runtime.Serialization.DataMember(Name="agreement_name")]
		public string Agreement_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product_id")]
		public string Product_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product_type")]
		public string Product_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReferralDestination
	{
		
		[System.Runtime.Serialization.DataMember(Name="site_name")]
		public string Site_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BlendedVideoSearchResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="facets")]
		public SearchFacetsResponse Facets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="related_searches")]
		public RelatedSearch[] Related_searches { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="videos")]
		public BlendedVideoSearchItem[] Videos { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchFacetsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="artists")]
		public Artist[] Artists { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entertainment")]
		public Entertainment[] Entertainment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="events")]
		public FacetEvent[] Events { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public Location[] Locations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="specific_people")]
		public SpecificPeople[] Specific_people { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Entertainment
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FacetEvent
	{
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Location
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SpecificPeople
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RelatedSearch
	{
		
		[System.Runtime.Serialization.DataMember(Name="phrase")]
		public string Phrase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BlendedVideosFieldValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="allowed_use")]
		allowed_use = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="artist")]
		artist = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="aspect_ratio")]
		aspect_ratio = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="asset_family")]
		asset_family = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="call_for_image")]
		call_for_image = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="caption")]
		caption = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="clip_length")]
		clip_length = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collection_code")]
		collection_code = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collection_id")]
		collection_id = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collection_name")]
		collection_name = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="color_type")]
		color_type = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="comp")]
		comp = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="copyright")]
		copyright = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date_created")]
		date_created = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date_submitted")]
		date_submitted = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="detail_set")]
		detail_set = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="display_set")]
		display_set = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="download_product")]
		download_product = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="download_sizes")]
		download_sizes = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="editorial_segments")]
		editorial_segments = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="entity_details")]
		entity_details = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="era")]
		era = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="event_ids")]
		event_ids = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="id")]
		id = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="istock_collection")]
		istock_collection = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="keywords")]
		keywords = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="largest_downloads")]
		largest_downloads = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="license_model")]
		license_model = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mastered_to")]
		mastered_to = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="object_name")]
		object_name = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="orientation")]
		orientation = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="originally_shot_on")]
		originally_shot_on = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="preview")]
		preview = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="product_types")]
		product_types = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="quality_rank")]
		quality_rank = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="referral_destinations")]
		referral_destinations = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="shot_speed")]
		shot_speed = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="source")]
		source = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="summary_set")]
		summary_set = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="thumb")]
		thumb = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="title")]
		title = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="istock_licenses")]
		istock_licenses = 41,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BoardCommentPermissions
	{
		
		[System.Runtime.Serialization.DataMember(Name="can_add_comment")]
		public System.Nullable<System.Boolean> Can_add_comment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BoardCreated
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BoardDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="asset_count")]
		public System.Nullable<System.Int32> Asset_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assets")]
		public Asset[] Assets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comment_count")]
		public System.Nullable<System.Int32> Comment_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date_last_updated")]
		public System.Nullable<System.DateTimeOffset> Date_last_updated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public BoardPermissions Permissions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Links
	{
		
		[System.Runtime.Serialization.DataMember(Name="invitation")]
		public string Invitation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="share")]
		public string Share { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BoardPermissions
	{
		
		[System.Runtime.Serialization.DataMember(Name="can_add_assets")]
		public System.Nullable<System.Boolean> Can_add_assets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="can_delete_board")]
		public System.Nullable<System.Boolean> Can_delete_board { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="can_invite_to_board")]
		public System.Nullable<System.Boolean> Can_invite_to_board { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="can_remove_assets")]
		public System.Nullable<System.Boolean> Can_remove_assets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="can_update_description")]
		public System.Nullable<System.Boolean> Can_update_description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="can_update_name")]
		public System.Nullable<System.Boolean> Can_update_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BoardInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BoardList
	{
		
		[System.Runtime.Serialization.DataMember(Name="board_count")]
		public System.Nullable<System.Int32> Board_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="boards")]
		public BoardListBoard[] Boards { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BoardListBoard
	{
		
		[System.Runtime.Serialization.DataMember(Name="asset_count")]
		public System.Nullable<System.Int32> Asset_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="board_relationship")]
		public string Board_relationship { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date_last_updated")]
		public System.Nullable<System.DateTimeOffset> Date_last_updated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hero_asset")]
		public Asset Hero_asset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BoardRelationship
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="owned")]
		owned = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="invited")]
		invited = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BoardSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date_last_updated_descending")]
		date_last_updated_descending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date_last_updated_ascending")]
		date_last_updated_ascending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="name_ascending")]
		name_ascending = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="name_decending")]
		name_decending = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Channel
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AssetChangeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AssetFamily AssetFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AssetType AssetType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ChannelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreateDateUtc { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NotificationCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> OldestChangeNotificationDateUtc { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Collaborator
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Collection
	{
		
		[System.Runtime.Serialization.DataMember(Name="asset_family")]
		public string Asset_family { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="license_model")]
		public string License_model { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product_types")]
		public string[] Product_types { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CollectionsFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="include")]
		include = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="exclude")]
		exclude = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CollectionsList
	{
		
		[System.Runtime.Serialization.DataMember(Name="collections")]
		public Collection[] Collections { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Comment
	{
		
		[System.Runtime.Serialization.DataMember(Name="created_by")]
		public Collaborator Created_by { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public CommentPermissions Permissions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommentPermissions
	{
		
		[System.Runtime.Serialization.DataMember(Name="can_delete_comment")]
		public System.Nullable<System.Boolean> Can_delete_comment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommentCreated
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommentRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommentsList
	{
		
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public Comment[] Comments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public BoardCommentPermissions Permissions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CompositionsFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="abstract")]
		_abstract = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="candid")]
		candid = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="close_up")]
		close_up = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="copy_space")]
		copy_space = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cut_out")]
		cut_out = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="full_frame")]
		full_frame = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="full_length")]
		full_length = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="headshot")]
		headshot = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="looking_at_camera")]
		looking_at_camera = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="macro")]
		macro = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="portrait")]
		portrait = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sparse")]
		sparse = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="still_life")]
		still_life = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="three_quarter_length")]
		three_quarter_length = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="waist_up")]
		waist_up = 14,
	}
	
	/// <summary>
	/// Contributor information for an image or video
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Contributor
	{
		
		/// <summary>
		/// The contributor's display name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_name")]
		public string Display_name { get; set; }
		
		/// <summary>
		/// The contributor's member name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="member_name")]
		public string Member_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CountriesList
	{
		
		[System.Runtime.Serialization.DataMember(Name="countries")]
		public Country[] Countries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Country
	{
		
		[System.Runtime.Serialization.DataMember(Name="iso_alpha_2")]
		public string Iso_alpha_2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iso_alpha_3")]
		public string Iso_alpha_3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CreateImageSearchFacetsFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="artists")]
		artists = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="locations")]
		locations = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CreateVideoSearchFacetsFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="artists")]
		artists = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="locations")]
		locations = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreativeImageSearchResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="auto_corrections")]
		public AutoCorrections Auto_corrections { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="images")]
		public ImageSearchItemCreative[] Images { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="related_searches")]
		public RelatedSearch[] Related_searches { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImageSearchItemCreative
	{
		
		[System.Runtime.Serialization.DataMember(Name="allowed_use")]
		public AllowedUse Allowed_use { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alternative_ids")]
		public System.Collections.Generic.Dictionary<string, string> Alternative_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artist")]
		public string Artist { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="asset_family")]
		public string Asset_family { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="call_for_image")]
		public System.Nullable<System.Boolean> Call_for_image { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="caption")]
		public string Caption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collection_code")]
		public string Collection_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collection_id")]
		public System.Nullable<System.Int32> Collection_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collection_name")]
		public string Collection_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="color_type")]
		public string Color_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="copyright")]
		public string Copyright { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date_camera_shot")]
		public System.Nullable<System.DateTimeOffset> Date_camera_shot { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="display_sizes")]
		public ImageSearchItemDisplaySize[] Display_sizes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="download_product")]
		public string Download_product { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="graphical_style")]
		public string Graphical_style { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public Keyword[] Keywords { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="largest_downloads")]
		public Download[] Largest_downloads { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="license_model")]
		public string License_model { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="max_dimensions")]
		public MaxDimensions Max_dimensions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orientation")]
		public string Orientation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quality_rank")]
		public System.Nullable<System.Int32> Quality_rank { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referral_destinations")]
		public ReferralDestination[] Referral_destinations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri_oembed")]
		public string Uri_oembed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImageSearchItemDisplaySize
	{
		
		[System.Runtime.Serialization.DataMember(Name="is_watermarked")]
		public System.Nullable<System.Boolean> Is_watermarked { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MaxDimensions
	{
		
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CreativeImageSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="best_match")]
		best_match = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="most_popular")]
		most_popular = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="newest")]
		newest = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="random")]
		random = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CreativeImagesFieldValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="allowed_use")]
		allowed_use = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="alternative_ids")]
		alternative_ids = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="artist")]
		artist = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="asset_family")]
		asset_family = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="call_for_image")]
		call_for_image = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="caption")]
		caption = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collection_code")]
		collection_code = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collection_id")]
		collection_id = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collection_name")]
		collection_name = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="color_type")]
		color_type = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="comp")]
		comp = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="copyright")]
		copyright = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date_camera_shot")]
		date_camera_shot = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date_created")]
		date_created = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date_submitted")]
		date_submitted = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="detail_set")]
		detail_set = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="display_set")]
		display_set = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="download_product")]
		download_product = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="download_sizes")]
		download_sizes = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="graphical_style")]
		graphical_style = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="id")]
		id = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="istock_collection")]
		istock_collection = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="keywords")]
		keywords = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="largest_downloads")]
		largest_downloads = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="license_model")]
		license_model = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="max_dimensions")]
		max_dimensions = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="orientation")]
		orientation = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="preview")]
		preview = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="product_types")]
		product_types = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="quality_rank")]
		quality_rank = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="referral_destinations")]
		referral_destinations = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="summary_set")]
		summary_set = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="thumb")]
		thumb = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="title")]
		title = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="uri_oembed")]
		uri_oembed = 34,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreativeVideoSearchItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="allowed_use")]
		public AllowedUse Allowed_use { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artist")]
		public string Artist { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="asset_family")]
		public string Asset_family { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="caption")]
		public string Caption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clip_length")]
		public string Clip_length { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collection_code")]
		public string Collection_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collection_id")]
		public System.Nullable<System.Int32> Collection_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collection_name")]
		public string Collection_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="color_type")]
		public string Color_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="copyright")]
		public string Copyright { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="display_sizes")]
		public VideoSearchItemDisplaySize[] Display_sizes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="download_product")]
		public string Download_product { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="era")]
		public string Era { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="event_ids")]
		public int[] Event_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="istock_licenses")]
		public IStockLicense[] Istock_licenses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public Keyword[] Keywords { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="largest_downloads")]
		public Download[] Largest_downloads { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="license_model")]
		public string License_model { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mastered_to")]
		public string Mastered_to { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originally_shot_on")]
		public string Originally_shot_on { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product_types")]
		public string[] Product_types { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referral_destinations")]
		public ReferralDestination[] Referral_destinations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shot_speed")]
		public string Shot_speed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreativeVideoSearchResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="auto_corrections")]
		public AutoCorrections Auto_corrections { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="facets")]
		public SearchFacetsResponse Facets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="related_searches")]
		public RelatedSearch[] Related_searches { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="videos")]
		public CreativeVideoSearchItem[] Videos { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CreativeVideoSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="best_match")]
		best_match = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="most_popular")]
		most_popular = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="newest")]
		newest = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="random")]
		random = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CreativeVideosFieldValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="allowed_use")]
		allowed_use = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="artist")]
		artist = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="aspect_ratio")]
		aspect_ratio = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="asset_family")]
		asset_family = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="call_for_image")]
		call_for_image = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="caption")]
		caption = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="clip_length")]
		clip_length = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collection_code")]
		collection_code = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collection_id")]
		collection_id = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collection_name")]
		collection_name = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="color_type")]
		color_type = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="comp")]
		comp = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="copyright")]
		copyright = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date_created")]
		date_created = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date_submitted")]
		date_submitted = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="detail_set")]
		detail_set = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="display_set")]
		display_set = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="download_product")]
		download_product = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="download_sizes")]
		download_sizes = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="era")]
		era = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="id")]
		id = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="istock_collection")]
		istock_collection = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="keywords")]
		keywords = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="largest_downloads")]
		largest_downloads = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="license_model")]
		license_model = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mastered_to")]
		mastered_to = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="object_name")]
		object_name = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="orientation")]
		orientation = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="originally_shot_on")]
		originally_shot_on = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="preview")]
		preview = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="product_types")]
		product_types = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="quality_rank")]
		quality_rank = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="referral_destinations")]
		referral_destinations = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="shot_speed")]
		shot_speed = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="summary_set")]
		summary_set = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="thumb")]
		thumb = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="title")]
		title = 36,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CuratedSet
	{
		
		[System.Runtime.Serialization.DataMember(Name="assets")]
		public string[] Assets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date_last_updated")]
		public System.Nullable<System.DateTimeOffset> Date_last_updated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hero_image_uri")]
		public string Hero_image_uri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public string[] Keywords { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="set_id")]
		public string Set_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerInfoResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="middle_name")]
		public string Middle_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Dimensions
	{
		
		[System.Runtime.Serialization.DataMember(Name="dpi")]
		public System.Nullable<System.Int32> Dpi { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DownloadDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="download_notes")]
		public string Download_notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project_code")]
		public string Project_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DownloadFileType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eps")]
		eps = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="jpg")]
		jpg = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DownloadRequirements
	{
		
		[System.Runtime.Serialization.DataMember(Name="is_note_required")]
		public System.Nullable<System.Boolean> Is_note_required { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_project_code_required")]
		public System.Nullable<System.Boolean> Is_project_code_required { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project_codes")]
		public string[] Project_codes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EditorialGraphicalStyle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="photography")]
		photography = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="illustration")]
		illustration = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vector")]
		vector = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EditorialImageSearchFacetsFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="artists")]
		artists = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="events")]
		events = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="locations")]
		locations = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="specific_people")]
		specific_people = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EditorialImageSearchResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="images")]
		public ImageSearchItemEditorial[] Images { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="related_searches")]
		public RelatedSearch[] Related_searches { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImageSearchItemEditorial
	{
		
		[System.Runtime.Serialization.DataMember(Name="allowed_use")]
		public AllowedUse Allowed_use { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alternative_ids")]
		public System.Collections.Generic.Dictionary<string, string> Alternative_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artist")]
		public string Artist { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="asset_family")]
		public string Asset_family { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="call_for_image")]
		public System.Nullable<System.Boolean> Call_for_image { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="caption")]
		public string Caption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collection_code")]
		public string Collection_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collection_id")]
		public System.Nullable<System.Int32> Collection_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collection_name")]
		public string Collection_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="color_type")]
		public string Color_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="copyright")]
		public string Copyright { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date_camera_shot")]
		public System.Nullable<System.DateTimeOffset> Date_camera_shot { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="display_sizes")]
		public ImageSearchItemDisplaySize[] Display_sizes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="download_product")]
		public string Download_product { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="editorial_segments")]
		public string[] Editorial_segments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="editorial_source")]
		public EditorialSource Editorial_source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="event_ids")]
		public int[] Event_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="graphical_style")]
		public string Graphical_style { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public Keyword[] Keywords { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="largest_downloads")]
		public Download[] Largest_downloads { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="license_model")]
		public string License_model { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="max_dimensions")]
		public MaxDimensions Max_dimensions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orientation")]
		public string Orientation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="people")]
		public string[] People { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product_types")]
		public string[] Product_types { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quality_rank")]
		public System.Nullable<System.Int32> Quality_rank { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referral_destinations")]
		public ReferralDestination[] Referral_destinations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri_oembed")]
		public string Uri_oembed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EditorialSource
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EditorialImagesFieldValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="allowed_use")]
		allowed_use = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="alternative_ids")]
		alternative_ids = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="artist")]
		artist = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="asset_family")]
		asset_family = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="call_for_image")]
		call_for_image = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="caption")]
		caption = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collection_code")]
		collection_code = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collection_id")]
		collection_id = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collection_name")]
		collection_name = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="color_type")]
		color_type = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="comp")]
		comp = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="copyright")]
		copyright = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date_camera_shot")]
		date_camera_shot = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date_created")]
		date_created = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date_submitted")]
		date_submitted = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="detail_set")]
		detail_set = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="display_set")]
		display_set = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="download_product")]
		download_product = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="download_sizes")]
		download_sizes = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="editorial_segments")]
		editorial_segments = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="editorial_source")]
		editorial_source = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="event_ids")]
		event_ids = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="graphical_style")]
		graphical_style = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="id")]
		id = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="keywords")]
		keywords = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="largest_downloads")]
		largest_downloads = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="license_model")]
		license_model = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="max_dimensions")]
		max_dimensions = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="orientation")]
		orientation = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="people")]
		people = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="preview")]
		preview = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="product_types")]
		product_types = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="quality_rank")]
		quality_rank = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="referral_destinations")]
		referral_destinations = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="summary_set")]
		summary_set = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="thumb")]
		thumb = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="title")]
		title = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="uri_oembed")]
		uri_oembed = 37,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EditorialSegmentContract
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="archival")]
		archival = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="entertainment")]
		entertainment = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="news")]
		news = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="publicity")]
		publicity = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="royalty")]
		royalty = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sport")]
		sport = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EditorialVideoSearchFacetsFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="artists")]
		artists = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="events")]
		events = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="locations")]
		locations = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="specific_people")]
		specific_people = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EditorialVideoSearchItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="allowed_use")]
		public AllowedUse Allowed_use { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artist")]
		public string Artist { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="asset_family")]
		public string Asset_family { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="caption")]
		public string Caption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clip_length")]
		public string Clip_length { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collection_code")]
		public string Collection_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collection_id")]
		public System.Nullable<System.Int32> Collection_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collection_name")]
		public string Collection_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="color_type")]
		public string Color_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="copyright")]
		public string Copyright { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="display_sizes")]
		public VideoSearchItemDisplaySize[] Display_sizes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="download_product")]
		public string Download_product { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="era")]
		public string Era { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="event_ids")]
		public int[] Event_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="istock_licenses")]
		public IStockLicense[] Istock_licenses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public Keyword[] Keywords { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="largest_downloads")]
		public Download[] Largest_downloads { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="license_model")]
		public string License_model { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mastered_to")]
		public string Mastered_to { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originally_shot_on")]
		public string Originally_shot_on { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product_types")]
		public string[] Product_types { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referral_destinations")]
		public ReferralDestination[] Referral_destinations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shot_speed")]
		public string Shot_speed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EditorialVideoSearchResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="facets")]
		public SearchFacetsResponse Facets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="related_searches")]
		public RelatedSearch[] Related_searches { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="videos")]
		public EditorialVideoSearchItem[] Videos { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EditorialVideoType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="raw")]
		raw = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="produced")]
		produced = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EditorialVideosFieldValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="allowed_use")]
		allowed_use = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="artist")]
		artist = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="aspect_ratio")]
		aspect_ratio = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="asset_family")]
		asset_family = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="call_for_image")]
		call_for_image = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="caption")]
		caption = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="clip_length")]
		clip_length = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collection_code")]
		collection_code = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collection_id")]
		collection_id = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collection_name")]
		collection_name = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="color_type")]
		color_type = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="comp")]
		comp = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="copyright")]
		copyright = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date_created")]
		date_created = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date_submitted")]
		date_submitted = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="detail_set")]
		detail_set = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="display_set")]
		display_set = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="download_product")]
		download_product = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="download_sizes")]
		download_sizes = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="editorial_segments")]
		editorial_segments = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="era")]
		era = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="event_ids")]
		event_ids = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="id")]
		id = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="istock_collection")]
		istock_collection = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="keywords")]
		keywords = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="largest_downloads")]
		largest_downloads = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="license_model")]
		license_model = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mastered_to")]
		mastered_to = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="object_name")]
		object_name = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="orientation")]
		orientation = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="originally_shot_on")]
		originally_shot_on = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="preview")]
		preview = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="product_types")]
		product_types = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="quality_rank")]
		quality_rank = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="referral_destinations")]
		referral_destinations = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="shot_speed")]
		shot_speed = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="source")]
		source = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="summary_set")]
		summary_set = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="thumb")]
		thumb = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="title")]
		title = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="istock_licenses")]
		istock_licenses = 40,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EthnicityFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="black")]
		black = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="caucasian")]
		caucasian = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="east_asian")]
		east_asian = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hispanic_latino")]
		hispanic_latino = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="japanese")]
		japanese = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="middle_eastern")]
		middle_eastern = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mixed_race_person")]
		mixed_race_person = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="multiethnic_group")]
		multiethnic_group = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="native_american_first_nations")]
		native_american_first_nations = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pacific_islander")]
		pacific_islander = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="south_asian")]
		south_asian = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="southeast_asian")]
		southeast_asian = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Event
	{
		
		[System.Runtime.Serialization.DataMember(Name="child_event_count")]
		public System.Nullable<System.Int32> Child_event_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="editorial_segments")]
		public string[] Editorial_segments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hero_image")]
		public HeroImage Hero_image { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image_count")]
		public System.Nullable<System.Int32> Image_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public LocationEvent Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start_date")]
		public System.Nullable<System.DateTimeOffset> Start_date { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HeroImage
	{
		
		[System.Runtime.Serialization.DataMember(Name="display_sizes")]
		public HeroImageDisplaySize[] Display_sizes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HeroImageDisplaySize
	{
		
		[System.Runtime.Serialization.DataMember(Name="is_watermarked")]
		public System.Nullable<System.Boolean> Is_watermarked { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocationEvent
	{
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state_province")]
		public string State_province { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="venue")]
		public string Venue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EventDetailFieldValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="id")]
		id = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="child_event_count")]
		child_event_count = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="editorial_segments")]
		editorial_segments = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hero_image")]
		hero_image = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="image_count")]
		image_count = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="location")]
		location = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="name")]
		name = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="start_date")]
		start_date = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="type")]
		type = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EventFieldValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="id")]
		id = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="child_event_count")]
		child_event_count = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="editorial_segments")]
		editorial_segments = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hero_image")]
		hero_image = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="image_count")]
		image_count = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="keywords")]
		keywords = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="location")]
		location = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="name")]
		name = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="start_date")]
		start_date = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="type")]
		type = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EventSearchSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="newest")]
		newest = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="oldest")]
		oldest = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventsSearchResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="events")]
		public Event[] Events { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDownloadsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="downloads")]
		public HistoricalDownload[] Downloads { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HistoricalDownload
	{
		
		[System.Runtime.Serialization.DataMember(Name="agreement_name")]
		public string Agreement_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="asset_type")]
		public string Asset_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date_downloaded")]
		public System.Nullable<System.DateTimeOffset> Date_downloaded { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public Dimensions Dimensions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="download_details")]
		public DownloadDetails Download_details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="download_source")]
		public string Download_source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product_id")]
		public System.Nullable<System.Int32> Product_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product_type")]
		public string Product_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="size_name")]
		public string Size_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumb_uri")]
		public string Thumb_uri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class User
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="middle_name")]
		public string Middle_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSendEventsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="asset_send_events")]
		public AssetEvent[] Asset_send_events { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_offset")]
		public System.Nullable<System.DateTimeOffset> Last_offset { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GraphicalStyle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fine_art")]
		fine_art = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="illustration")]
		illustration = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="photography")]
		photography = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vector")]
		vector = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GraphicalStylesFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="include")]
		include = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="exclude")]
		exclude = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ImageDetailFieldValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="allowed_use")]
		allowed_use = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="alternative_ids")]
		alternative_ids = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="artist")]
		artist = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="artist_title")]
		artist_title = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="asset_family")]
		asset_family = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="call_for_image")]
		call_for_image = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="caption")]
		caption = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="city")]
		city = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collection_code")]
		collection_code = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collection_id")]
		collection_id = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collection_name")]
		collection_name = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="color_type")]
		color_type = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="comp")]
		comp = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="copyright")]
		copyright = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="country")]
		country = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="credit_line")]
		credit_line = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date_camera_shot")]
		date_camera_shot = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date_created")]
		date_created = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date_submitted")]
		date_submitted = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="detail_set")]
		detail_set = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="display_set")]
		display_set = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="download_sizes")]
		download_sizes = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="download_product")]
		download_product = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="downloads")]
		downloads = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="editorial_segments")]
		editorial_segments = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="editorial_source")]
		editorial_source = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="entity_details")]
		entity_details = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="event_ids")]
		event_ids = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="graphical_style")]
		graphical_style = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="id")]
		id = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="istock_collection")]
		istock_collection = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="istock_licenses")]
		istock_licenses = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="keywords")]
		keywords = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="largest_downloads")]
		largest_downloads = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="license_model")]
		license_model = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="links")]
		links = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="max_dimensions")]
		max_dimensions = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="object_name")]
		object_name = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="orientation")]
		orientation = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="people")]
		people = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="preview")]
		preview = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="product_types")]
		product_types = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="quality_rank")]
		quality_rank = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="referral_destinations")]
		referral_destinations = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="state_province")]
		state_province = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="summary_set")]
		summary_set = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="thumb")]
		thumb = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="title")]
		title = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="uri_oembed")]
		uri_oembed = 48,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ImageOrientationRequest
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="horizontal")]
		horizontal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vertical")]
		vertical = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="square")]
		square = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="panoramic_horizontal")]
		panoramic_horizontal = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="panoramic_vertical")]
		panoramic_vertical = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImageSearchItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="allowed_use")]
		public AllowedUse Allowed_use { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alternative_ids")]
		public System.Collections.Generic.Dictionary<string, string> Alternative_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artist")]
		public string Artist { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="asset_family")]
		public string Asset_family { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="call_for_image")]
		public System.Nullable<System.Boolean> Call_for_image { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="caption")]
		public string Caption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collection_code")]
		public string Collection_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collection_id")]
		public System.Nullable<System.Int32> Collection_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collection_name")]
		public string Collection_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="color_type")]
		public string Color_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="copyright")]
		public string Copyright { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date_camera_shot")]
		public System.Nullable<System.DateTimeOffset> Date_camera_shot { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="display_sizes")]
		public ImageSearchItemDisplaySize[] Display_sizes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="download_product")]
		public string Download_product { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="editorial_segments")]
		public string[] Editorial_segments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="event_ids")]
		public int[] Event_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="graphical_style")]
		public string Graphical_style { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="istock_licenses")]
		public IStockLicense[] Istock_licenses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public Keyword[] Keywords { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="largest_downloads")]
		public Download[] Largest_downloads { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="license_model")]
		public string License_model { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="max_dimensions")]
		public MaxDimensions Max_dimensions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orientation")]
		public string Orientation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="people")]
		public string[] People { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product_types")]
		public string[] Product_types { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quality_rank")]
		public System.Nullable<System.Int32> Quality_rank { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referral_destinations")]
		public ReferralDestination[] Referral_destinations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri_oembed")]
		public string Uri_oembed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImageSearchItemSearchResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="images")]
		public ImageSearchItem[] Images { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="related_searches")]
		public RelatedSearch[] Related_searches { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ImageTechniquesFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="realtime")]
		realtime = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="time_lapse")]
		time_lapse = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="slow_motion")]
		slow_motion = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="color")]
		color = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="black_and_white")]
		black_and_white = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="animation")]
		animation = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="selective_focus")]
		selective_focus = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImagesDetailResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="images")]
		public object Images { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="images_not_found")]
		public string[] Images_not_found { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ImagesFieldValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="accessrestriction")]
		accessrestriction = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="allowed_use")]
		allowed_use = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="alternative_ids")]
		alternative_ids = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="artist")]
		artist = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="asset_family")]
		asset_family = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="call_for_image")]
		call_for_image = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="caption")]
		caption = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collection_code")]
		collection_code = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collection_id")]
		collection_id = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collection_name")]
		collection_name = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="color_type")]
		color_type = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="comp")]
		comp = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="copyright")]
		copyright = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date_camera_shot")]
		date_camera_shot = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date_created")]
		date_created = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date_submitted")]
		date_submitted = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="detail_set")]
		detail_set = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="display_set")]
		display_set = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="download_product")]
		download_product = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="download_sizes")]
		download_sizes = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="editorial_segments")]
		editorial_segments = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="editorial_source")]
		editorial_source = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="entity_details")]
		entity_details = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="event_ids")]
		event_ids = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="graphical_style")]
		graphical_style = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="id")]
		id = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="istock_collection")]
		istock_collection = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="keywords")]
		keywords = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="largest_downloads")]
		largest_downloads = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="license_model")]
		license_model = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="max_dimensions")]
		max_dimensions = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="orientation")]
		orientation = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="people")]
		people = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="preview")]
		preview = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="product_types")]
		product_types = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="quality_rank")]
		quality_rank = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="referral_destinations")]
		referral_destinations = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="summary_set")]
		summary_set = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="thumb")]
		thumb = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="title")]
		title = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="uri_oembed")]
		uri_oembed = 40,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LicenseModelImageRequest
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rightsmanaged")]
		rightsmanaged = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="royaltyfree")]
		royaltyfree = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LicenseModelVideoRequest
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rightsready")]
		rightsready = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="royaltyfree")]
		royaltyfree = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LogLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Trace")]
		Trace = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Debug")]
		Debug = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Information")]
		Information = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Warning")]
		Warning = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Error")]
		Error = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Critical")]
		Critical = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MemcachedLogEntry
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ExceptionMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LogLevel LogLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NumberOfPeopleFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="none")]
		none = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="one")]
		one = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="two")]
		two = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group")]
		group = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="assets")]
		public AssetIdFromOrder[] Assets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end_client")]
		public string End_client { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoice_number")]
		public string Invoice_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public OrderNotes Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order_date")]
		public System.Nullable<System.DateTimeOffset> Order_date { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderNotes
	{
		
		[System.Runtime.Serialization.DataMember(Name="licensee_name")]
		public string Licensee_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ordered_by")]
		public string Ordered_by { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project_title")]
		public string Project_title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="purchase_order_number")]
		public string Purchase_order_number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OverageDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overages_reached")]
		public System.Nullable<System.Boolean> Overages_reached { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remaining")]
		public System.Nullable<System.Int32> Remaining { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PremiumAccessDownloadData
	{
		
		[System.Runtime.Serialization.DataMember(Name="download_notes")]
		public string Download_notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project_code")]
		public string Project_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PreviousAssetPurchase
	{
		
		[System.Runtime.Serialization.DataMember(Name="asset_id")]
		public string Asset_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="asset_type")]
		public string Asset_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date_purchased")]
		public System.Nullable<System.DateTimeOffset> Date_purchased { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="download_uri")]
		public string Download_uri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="file_size_in_bytes")]
		public string File_size_in_bytes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="license_model")]
		public string License_model { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order_id")]
		public string Order_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="purchased_by")]
		public string Purchased_by { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="size_name")]
		public string Size_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumb_uri")]
		public string Thumb_uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PreviousAssetPurchases
	{
		
		[System.Runtime.Serialization.DataMember(Name="previous_purchases")]
		public PreviousAssetPurchase[] Previous_purchases { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PreviousPurchase
	{
		
		[System.Runtime.Serialization.DataMember(Name="date_purchased")]
		public System.Nullable<System.DateTimeOffset> Date_purchased { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image_id")]
		public string Image_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="license_model")]
		public string License_model { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order_id")]
		public string Order_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumb_uri")]
		public string Thumb_uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PreviousPurchases
	{
		
		[System.Runtime.Serialization.DataMember(Name="previous_purchases")]
		public PreviousPurchase[] Previous_purchases { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Product
	{
		
		[System.Runtime.Serialization.DataMember(Name="agreement_name")]
		public string Agreement_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="application_website")]
		public string Application_website { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="credits_remaining")]
		public System.Nullable<System.Int32> Credits_remaining { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="download_limit")]
		public System.Nullable<System.Int32> Download_limit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="download_limit_duration")]
		public string Download_limit_duration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="download_limit_reset_utc_date")]
		public System.Nullable<System.DateTimeOffset> Download_limit_reset_utc_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="download_requirements")]
		public DownloadRequirements Download_requirements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="downloads_remaining")]
		public System.Nullable<System.Int32> Downloads_remaining { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expiration_utc_date")]
		public System.Nullable<System.DateTimeOffset> Expiration_utc_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imagepack_resolution")]
		public string Imagepack_resolution { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overage")]
		public OverageDetails Overage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<ProductStatus> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="team_credits")]
		public System.Nullable<System.Int32> Team_credits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ProductType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProductStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="active")]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inactive")]
		inactive = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProductType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="easyaccess")]
		easyaccess = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="editorialsubscription")]
		editorialsubscription = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="imagepack")]
		imagepack = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="premiumaccess")]
		premiumaccess = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="royaltyfreesubscription")]
		royaltyfreesubscription = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="creditpack")]
		creditpack = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProductFieldValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="download_requirements")]
		download_requirements = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProductStatusRequest
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all")]
		all = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="active")]
		active = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inactive")]
		inactive = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProductTypeForDownloads
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="easyaccess")]
		easyaccess = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="editorialsubscription")]
		editorialsubscription = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="imagepack")]
		imagepack = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="premiumaccess")]
		premiumaccess = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="royaltyfreesubscription")]
		royaltyfreesubscription = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="creditpack")]
		creditpack = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProductTypeResponse
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="easyaccess")]
		easyaccess = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="editorialsubscription")]
		editorialsubscription = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="imagepack")]
		imagepack = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="premiumaccess")]
		premiumaccess = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="royaltyfreesubscription")]
		royaltyfreesubscription = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="creditpack")]
		creditpack = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="products")]
		public Product[] Products { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReleaseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="release_not_important")]
		release_not_important = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fully_released")]
		fully_released = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchByImageResourceResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="auto_corrections")]
		public AutoCorrections Auto_corrections { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="facets")]
		public SearchFacetsResponse Facets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image_fingerprint")]
		public string Image_fingerprint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="images")]
		public object Images { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="related_searches")]
		public RelatedSearch[] Related_searches { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SearchFileType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eps")]
		eps = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="jpg")]
		jpg = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SelfResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="best_match")]
		best_match = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="most_popular")]
		most_popular = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="newest")]
		newest = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="oldest")]
		oldest = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="random")]
		random = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TeeShirtSize
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="x_small")]
		x_small = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="small")]
		small = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="medium")]
		medium = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="large")]
		large = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="x_large")]
		x_large = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="xx_large")]
		xx_large = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vector")]
		vector = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TerritoryRestriction
	{
		
		[System.Runtime.Serialization.DataMember(Name="country_code")]
		public string Country_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VideoAspectRatioFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16:9")]
		_169 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9:16")]
		_916 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3:4")]
		_34 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4:3")]
		_43 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4:5")]
		_45 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2:1")]
		_21 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="17:9")]
		_179 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9:17")]
		_917 = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VideoDetailFieldValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="id")]
		id = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="allowed_use")]
		allowed_use = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="artist")]
		artist = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="asset_family")]
		asset_family = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="call_for_image")]
		call_for_image = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="caption")]
		caption = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="city")]
		city = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="clip_length")]
		clip_length = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collection_code")]
		collection_code = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collection_id")]
		collection_id = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collection_name")]
		collection_name = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="color_type")]
		color_type = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="comp")]
		comp = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="copyright")]
		copyright = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="country")]
		country = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date_created")]
		date_created = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date_submitted")]
		date_submitted = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="detail_set")]
		detail_set = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="display_set")]
		display_set = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="download_sizes")]
		download_sizes = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="download_product")]
		download_product = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="downloads")]
		downloads = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="editorial_segments")]
		editorial_segments = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="entity_details")]
		entity_details = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="era")]
		era = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="event_ids")]
		event_ids = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="istock_collection")]
		istock_collection = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="istock_licenses")]
		istock_licenses = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="key_frames")]
		key_frames = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="keywords")]
		keywords = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="license_model")]
		license_model = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mastered_to")]
		mastered_to = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="object_name")]
		object_name = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="orientation")]
		orientation = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="originally_shot_on")]
		originally_shot_on = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="preview")]
		preview = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="product_types")]
		product_types = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="quality_rank")]
		quality_rank = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="referral_destinations")]
		referral_destinations = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="shot_speed")]
		shot_speed = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="source")]
		source = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="state_province")]
		state_province = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="summary_set")]
		summary_set = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="thumb")]
		thumb = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="title")]
		title = 44,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VideoFormatsRequest
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sd")]
		sd = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hd")]
		hd = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4k")]
		_4k = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hd_web")]
		hd_web = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VideoFrameRates
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="23.98")]
		_23_98 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="24")]
		_24 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="25")]
		_25 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="29.97")]
		_29_97 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30")]
		_30 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="50")]
		_50 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="59.94")]
		_59_94 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="60")]
		_60 = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VideoOrientationRequest
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="horizontal")]
		horizontal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vertical")]
		vertical = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ViewpointsFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lockdown")]
		lockdown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="panning")]
		panning = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tracking_shot")]
		tracking_shot = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="aerial_view")]
		aerial_view = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="high_angle_view")]
		high_angle_view = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="low_angle_view")]
		low_angle_view = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tilt")]
		tilt = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="point_of_view")]
		point_of_view = 7,
	}
	
	/// <summary>
	/// Specifies the id, usage Quantity, and date of when an asset was used.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Asset_usage
	{
		
		/// <summary>
		/// Specifies the Id of the asset that was used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="asset_id")]
		public string Asset_id { get; set; }
		
		/// <summary>
		/// Specifies the number of times the asset was used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// Identifies the date the asset was used, in ISO 8601 format (e.g., YYYY-MM-DD), time is not needed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usage_date")]
		public System.Nullable<System.DateTimeOffset> Usage_date { get; set; }
	}
	
	/// <summary>
	/// Specifies the request information for the Batch Usages endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Report_usage_batch_request
	{
		
		/// <summary>
		/// Identifies the list of asset id, usage count and date of usage combinations to record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="asset_usages")]
		public Asset_usage[] Asset_usages { get; set; }
	}
	
	/// <summary>
	/// Specifies the response from the Batch Usages endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Report_usage_batch_response
	{
		
		/// <summary>
		/// Identifies a list of asset ids submitted that did not match known Getty asset ids.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invalid_assets")]
		public string[] Invalid_assets { get; set; }
		
		/// <summary>
		/// Specifies the number of asset usage records that were successfully recorded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_asset_usages_processed")]
		public System.Nullable<System.Int32> Total_asset_usages_processed { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// V3AffiliatesSearchImagesGetByPhraseAndStyle v3/affiliates/search/images
		/// </summary>
		/// <param name="phrase">Search images using a search phrase.</param>
		/// <param name="style">Filter based on graphical style of the image.</param>
		/// <returns>Success</returns>
		public async Task<AffiliateImageSearchResponse> V3AffiliatesSearchImagesGetByPhraseAndStyleAsync(string phrase, AffiliateSearchStyle style, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/affiliates/search/images?phrase=" + (phrase==null? "" : System.Uri.EscapeDataString(phrase))+"&style=" + style;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AffiliateImageSearchResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// V3AffiliatesSearchVideosGetByPhrase v3/affiliates/search/videos
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AffiliateVideoSearchResponse> V3AffiliatesSearchVideosGetByPhraseAsync(string phrase, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/affiliates/search/videos?phrase=" + (phrase==null? "" : System.Uri.EscapeDataString(phrase));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AffiliateVideoSearchResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search for images by a photographer
		/// V3ArtistsImagesGetByArtist_nameAndFieldsAndPageAndPage_size v3/artists/images
		/// </summary>
		/// <param name="artist_name">Name of artist for desired images</param>
		/// <param name="fields">Comma separated list of fields. Allows restricting which fields are returned. If no fields are selected, the summary_set of fields are returned.</param>
		/// <param name="page">Identifies page to return. Default page is 1.</param>
		/// <param name="page_size">Specifies page size. Default page_size is 10, maximum page_size is 100.</param>
		/// <returns>OK</returns>
		public async Task V3ArtistsImagesGetByArtist_nameAndFieldsAndPageAndPage_sizeAsync(string artist_name, ArtistsImageSearchFieldValues[] fields, int page, int page_size, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/artists/images?artist_name=" + (artist_name==null? "" : System.Uri.EscapeDataString(artist_name))+"&"+string.Join("&", fields.Select(z => $"fields={z}"))+"&page="+page+"&page_size="+page_size;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search for videos by a photographer
		/// V3ArtistsVideosGetByArtist_nameAndFieldsAndPageAndPage_size v3/artists/videos
		/// </summary>
		/// <param name="artist_name">Name of artist for desired images</param>
		/// <param name="fields">Comma separated list of fields. Allows restricting which fields are returned. If no fields are selected, the summary_set of fields are returned.</param>
		/// <param name="page">Identifies page to return. Default page is 1.</param>
		/// <param name="page_size">Specifies page size. Default page_size is 10, maximum page_size is 100.</param>
		/// <returns>OK</returns>
		public async Task V3ArtistsVideosGetByArtist_nameAndFieldsAndPageAndPage_sizeAsync(string artist_name, ArtistsVideoSearchFieldValues[] fields, int page, int page_size, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/artists/videos?artist_name=" + (artist_name==null? "" : System.Uri.EscapeDataString(artist_name))+"&"+string.Join("&", fields.Select(z => $"fields={z}"))+"&page="+page+"&page_size="+page_size;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get asset change notifications.
		/// # Asset Changes
		/// 
		/// Get notifications about new, updated or deleted assets for a specific channel.
		/// 
		/// ##  Quickstart
		/// 
		/// You'll need an API key and an access token to use this resource.
		/// 
		/// Maximum batch size is 2200.
		/// 
		/// Change-sets must be confirmed before a new batch of notifications can be retrieved from this endpoint. Use the DELETE asset-changes/change-sets/{change-set-id} endpoint to confirm reciept of these notifications.
		/// 
		/// Values returned for asset_type include Image, Film, and null. Values returned for asset_lifecycle include New, Update, and Delete.
		/// 
		/// Delete notifications may be provided for asset ids that have not previously been received as New or Update notifications. Delete notifications may return null for the asset_type.
		/// 
		/// If there are no notifications in the channel an empty response body will be returned.
		/// 
		/// Notifications older than 60 days will be removed from partner channels.
		/// 
		/// V3Asset_changesChange_setsPutByChannel_idAndBatch_size v3/asset-changes/change-sets
		/// </summary>
		/// <param name="channel_id">Specifies the id of the channel for the asset data. Valid channel ids can be found in the results of the Get Partner Channel query.</param>
		/// <param name="batch_size">Specifies the number of assets to return. The default is 2200; maximum is 2200.</param>
		/// <returns>Success - Channel contains unconfirmed asset change notifications</returns>
		public async Task<AssetChanges> V3Asset_changesChange_setsPutByChannel_idAndBatch_sizeAsync(int channel_id, int batch_size, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/asset-changes/change-sets?channel_id="+channel_id+"&batch_size="+batch_size;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssetChanges>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Confirm asset change notifications.
		/// # Delete Asset Changes
		/// 
		/// Confirm asset changes acknowledges receipt of asset changes (from the PUT asset-changes endpoint).
		/// 
		/// ##  Quickstart
		/// 
		/// You'll need an API key and an access token to use this resource.
		/// 
		/// Use the change_set_id from the PUT asset-changes/change-sets endpoint to confirm receipt of notifications.
		/// 
		/// V3Asset_changesChange_sets_change_set_idDelete v3/asset-changes/change-sets/{change_set_id}
		/// </summary>
		/// <param name="change_set_id">Specify the change-set-id associated with a transaction resource whose receipt you want to confirm.</param>
		/// <returns>Success</returns>
		public async Task V3Asset_changesChange_sets_change_set_idDeleteAsync(long change_set_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/asset-changes/change-sets/{change_set_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of asset change notification channels.
		/// # Get Partner Channels
		/// 
		/// Retrieves the channel data for the partner. This data can be used to populate the channel_id parameter in the Put Asset Changes query.
		/// 
		/// ##  Quickstart
		/// 
		/// You'll need an API key and an access token to use this resource.
		/// 
		/// Partners who have a channel that has been removed should contact their sales representative to be set up again.
		/// 
		/// 
		/// V3Asset_changesChannelsGet v3/asset-changes/channels
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Channel[]> V3Asset_changesChannelsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/asset-changes/channels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Channel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Endpoint for acquiring extended licenses with iStock credits for an asset.
		/// V3Asset_licensing_assetIdPost v3/asset-licensing/{assetId}
		/// </summary>
		/// <param name="assetId">Getty Images assetId - examples 520621493, 112301284</param>
		/// <param name="requestBody">Structure that specifies an array of LicenseTypes (multiseat, unlimited, resale, indemnification) to acquire,
		///            and whether or not to use Team Credits. Authenticated User must have access to Team Credits if UseTeamCredits is set to "true".</param>
		/// <returns>Success</returns>
		public async Task<AssetLicensingResponse> V3Asset_licensing_assetIdPostAsync(string assetId, AcquireAssetLicensesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/asset-licensing/"+ (assetId==null? "" : System.Uri.EscapeDataString(assetId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssetLicensingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// V3Asset_managementAssetsSend_eventsGetByLast_offsetAndEvent_count v3/asset-management/assets/send-events
		/// </summary>
		/// <param name="last_offset">Specifies a date/time (with timezone information) for continuing retrieval of events.
		///Events occuring _after_ the `last_offset` value provided will be returned.</param>
		/// <param name="event_count">Specifies the number of events to return. Default is 50, maximum value is 100.</param>
		/// <returns>Success</returns>
		public async Task<GetSendEventsResponse> V3Asset_managementAssetsSend_eventsGetByLast_offsetAndEvent_countAsync(System.DateTimeOffset last_offset, int event_count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/asset-management/assets/send-events?last_offset=" + last_offset.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&event_count="+event_count;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSendEventsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all boards that the user participates in
		/// V3BoardsGetByPageAndBoard_relationshipAndSort_orderAndPageSize v3/boards
		/// </summary>
		/// <param name="page">Request results starting at a page number (default is 1).</param>
		/// <param name="board_relationship">Search for boards the user owns or has been invited to as an editor.</param>
		/// <param name="sort_order">Sort the list of boards by last update date or name. Defaults to date_last_updated_descending.</param>
		/// <param name="pageSize">Request number of boards to return in each page. (default is 30).</param>
		/// <returns>Success</returns>
		public async Task<BoardList> V3BoardsGetByPageAndBoard_relationshipAndSort_orderAndPageSizeAsync(int page, BoardRelationship board_relationship, BoardSortOrder sort_order, int pageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/boards?page="+page+"&board_relationship=" + board_relationship+"&sort_order=" + sort_order+"&pageSize="+pageSize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new board
		/// V3BoardsPost v3/boards
		/// </summary>
		/// <param name="requestBody">Specify a name and description of the board to create (name is required).</param>
		public async Task V3BoardsPostAsync(BoardInfo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/boards";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a board
		/// V3Boards_board_idDelete v3/boards/{board_id}
		/// </summary>
		/// <param name="board_id">Specify the board to delete.</param>
		/// <returns>Success</returns>
		public async Task V3Boards_board_idDeleteAsync(string board_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/boards/"+ (board_id==null? "" : System.Uri.EscapeDataString(board_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get assets and metadata for a specific board
		/// V3Boards_board_idGet v3/boards/{board_id}
		/// </summary>
		/// <param name="board_id">Retrieve details for a specific board.</param>
		/// <returns>Success</returns>
		public async Task<BoardDetail> V3Boards_board_idGetAsync(string board_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/boards/"+ (board_id==null? "" : System.Uri.EscapeDataString(board_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BoardDetail>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a board
		/// V3Boards_board_idPut v3/boards/{board_id}
		/// </summary>
		/// <param name="board_id">Specify the board to update.</param>
		/// <param name="requestBody">Specify a new name and description for the board (name is required).</param>
		/// <returns>Success</returns>
		public async Task V3Boards_board_idPutAsync(string board_id, BoardInfo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/boards/"+ (board_id==null? "" : System.Uri.EscapeDataString(board_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove assets from a board
		/// V3Boards_board_idAssetsDeleteByAsset_ids v3/boards/{board_id}/assets
		/// </summary>
		/// <param name="board_id">Specify the board to remove assets from.</param>
		/// <param name="asset_ids">List the assets to be removed from the board.</param>
		/// <returns>Success</returns>
		public async Task V3Boards_board_idAssetsDeleteByAsset_idsAsync(string board_id, string[] asset_ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/boards/"+ (board_id==null? "" : System.Uri.EscapeDataString(board_id))+"/assets&"+string.Join("&", asset_ids.Select(z => $"asset_ids={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add assets to a board
		/// V3Boards_board_idAssetsPut v3/boards/{board_id}/assets
		/// </summary>
		/// <param name="board_id">Specify the board to add assets to.</param>
		/// <param name="requestBody">List assets to add to the board.</param>
		public async Task V3Boards_board_idAssetsPutAsync(string board_id, BoardAsset[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/boards/"+ (board_id==null? "" : System.Uri.EscapeDataString(board_id))+"/assets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove an asset from a board
		/// V3Boards_board_idAssets_asset_idDelete v3/boards/{board_id}/assets/{asset_id}
		/// </summary>
		/// <param name="board_id">Specify the board to remove an asset from.</param>
		/// <param name="asset_id">Specify the asset to remove from the board.</param>
		/// <returns>Success</returns>
		public async Task V3Boards_board_idAssets_asset_idDeleteAsync(string board_id, string asset_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/boards/"+ (board_id==null? "" : System.Uri.EscapeDataString(board_id))+"/assets/"+ (asset_id==null? "" : System.Uri.EscapeDataString(asset_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add an asset to a board
		/// V3Boards_board_idAssets_asset_idPut v3/boards/{board_id}/assets/{asset_id}
		/// </summary>
		/// <param name="board_id">Specify the board to add an asset to.</param>
		/// <param name="asset_id">Specify the asset to add to the board. If it is already in the board's asset collection, no action is taken.</param>
		public async Task V3Boards_board_idAssets_asset_idPutAsync(string board_id, string asset_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/boards/"+ (board_id==null? "" : System.Uri.EscapeDataString(board_id))+"/assets/"+ (asset_id==null? "" : System.Uri.EscapeDataString(asset_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get comments from a board
		/// V3Boards_board_idCommentsGet v3/boards/{board_id}/comments
		/// </summary>
		/// <param name="board_id">Specify the board to retrieve comments from.</param>
		/// <returns>Success</returns>
		public async Task<CommentsList> V3Boards_board_idCommentsGetAsync(string board_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/boards/"+ (board_id==null? "" : System.Uri.EscapeDataString(board_id))+"/comments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentsList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a comment to a board
		/// V3Boards_board_idCommentsPost v3/boards/{board_id}/comments
		/// </summary>
		/// <param name="board_id">Specify the board to add a comment to.</param>
		/// <param name="requestBody">Comment to be added to the board.</param>
		public async Task V3Boards_board_idCommentsPostAsync(string board_id, CommentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/boards/"+ (board_id==null? "" : System.Uri.EscapeDataString(board_id))+"/comments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a comment from a board
		/// V3Boards_board_idComments_comment_idDelete v3/boards/{board_id}/comments/{comment_id}
		/// </summary>
		/// <param name="board_id">Specify the board containing the comment to delete.</param>
		/// <param name="comment_id">Specify the comment to delete.</param>
		/// <returns>Success</returns>
		public async Task V3Boards_board_idComments_comment_idDeleteAsync(string board_id, string comment_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/boards/"+ (board_id==null? "" : System.Uri.EscapeDataString(board_id))+"/comments/"+ (comment_id==null? "" : System.Uri.EscapeDataString(comment_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets collections applicable for the customer.
		/// Use this endpoint to retrieve collections associated with your Getty Images account. To browse available collections see our [Image collections page]( http://www.gettyimages.com/creative-images/collections).
		/// 
		/// You'll need an API key and access token to use this resource.
		/// 
		/// V3CollectionsGet v3/collections
		/// </summary>
		/// <returns>OK</returns>
		public async Task<CollectionsList> V3CollectionsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/collections";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CollectionsList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets countries codes and names.
		/// Returns a list of country objects that contains country name, two letter ISO abbreviation and three letter ISO abbreviation.
		/// 
		/// You'll need an API key and access token to use this resource.
		/// 
		/// V3CountriesGet v3/countries
		/// </summary>
		/// <returns>OK</returns>
		public async Task<CountriesList> V3CountriesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/countries";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CountriesList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about the current user.
		/// Returns the first, middle and last name of the authenticated user.
		/// 
		/// You'll need an API key and access token to use this resource.
		/// 
		/// Please consult our [Authorization FAQ](http://developers.gettyimages.com/en/authorization-faq.html) for more information on authorization tokens.
		/// 
		/// V3CustomersCurrentGet v3/customers/current
		/// </summary>
		/// <returns>OK</returns>
		public async Task<CustomerInfoResponse> V3CustomersCurrentGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/customers/current";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerInfoResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a customer's downloaded assets.
		/// Returns information about a customer's previously downloaded assets.
		/// 
		/// You'll need an API key and access token to use this resource.
		/// 
		/// 
		/// This endpoint requires being a Getty Images customer to limit your results to only assets that you have a license to use,
		/// you need to also include an authorization token in the header of your request.
		/// Please consult our [Authorization FAQ](http://developers.gettyimages.com/en/authorization-faq.html) for more information on authorization tokens.
		/// 
		/// V3DownloadsGetByDate_fromAndDate_toAndUse_timeAndPageAndPage_sizeAndProduct_typeAndCompany_downloads v3/downloads
		/// </summary>
		/// <param name="date_from">If specified, selects assets downloaded on or after this date. Dates should be submitted in ISO 8601 format (i.e., YYYY-MM-DD). 
		///Any hour, minute, second values in the request are not used, unless useTimePart parameter is included.
		///Date/times in the response are UTC. Default is 30 days prior to date_to</param>
		/// <param name="date_to">If specified, selects assets downloaded on or before this date. Dates should be submitted in ISO 8601 format (i.e., YYYY-MM-DD)
		///Any hour, minute, second values in the request are not used, unless useTimePart parameter is included.
		///Date/times in the response are UTC. Default is current date or 30 days after specified start date, whichever one is earlier.</param>
		/// <param name="use_time">If specified, time values provided with date_to or date_from will be used. Time values should be appended to the date value in ISO 8601 format
		///i.e.: 2019-09-19T19:30:37 or 2019-09-19 19:30:37.  Time zone can be specified as optional.
		///Default value is false</param>
		/// <param name="page">Identifies page to return. Default is 1.</param>
		/// <param name="page_size">Specifies page size. Default is 30, maximum page_size is 100.</param>
		/// <param name="product_type">Specifies product type to be included in the previous download results. Product types easyaccess, editorialsubscription, imagepack, and premiumaccess are for GettyImages API keys. Product types royaltyfreesubscription and creditpack are for iStock API keys. To get previous iStockPhoto credit downloads, creditpack must be selected.</param>
		/// <param name="company_downloads">If specified, returns the list of previously downloaded images for all users in your company. Your account must be enabled for this functionality. Contact your Getty Images account rep for more information. Default is false.</param>
		/// <returns>OK</returns>
		public async Task<GetDownloadsResponse> V3DownloadsGetByDate_fromAndDate_toAndUse_timeAndPageAndPage_sizeAndProduct_typeAndCompany_downloadsAsync(System.DateTimeOffset date_from, System.DateTimeOffset date_to, bool use_time, int page, int page_size, ProductType product_type, bool company_downloads, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/downloads?date_from=" + date_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&date_to=" + date_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&use_time="+use_time+"&page="+page+"&page_size="+page_size+"&product_type=" + product_type+"&company_downloads="+company_downloads;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDownloadsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download an image
		/// Use this endpoint to generate download URLs and related data for images you are authorized to download.
		/// 
		/// Most product offerings have enforced periodic download limits such as monthly, weekly, and daily. When this operation executes, the count of allowed downloads is decremented by one for the product offering. Once the download limit is reached for a given product offering, no further downloads may be requested for that product offering until the next download period.
		/// 
		/// The download limit for a given download period is covered in your product agreement established with Getty Images.
		/// 
		/// You'll need an API key and a [Resource Owner Grant or Implicit Grant](http://developers.gettyimages.com/en/authorization-faq.html) access token to use this resource.
		/// 
		/// ## Auto Downloads
		/// The `auto_download` request query parameter specifies whether to automatically download the image.
		/// 
		/// If the `auto_download` request query parameter is set to _true_, the API will return an HTTP status code 303 *See Other*. Your client code will need to process this response and redirect to the URI specified in the *Location* header to enable you to automatically download the file. The redirection workflow follows the [HTTP 1.1 protocol](https://tools.ietf.org/html/rfc7231#section-6.4.4).
		/// 
		/// Client Request:
		/// 
		/// ```
		/// https://api.gettyimages.com/v3/downloads/images/[asset_id]?auto_download=true
		/// ```
		/// 
		/// Server Response:
		/// 
		/// Your client code should follow redirect (3xx) status codes returned from the URI in the response Location header. More information here: [HTTP 1.1 protocol](https://tools.ietf.org/html/rfc7231#section-6.4).
		/// 
		/// ```
		/// HTTP/1.1 303 See Other
		/// Location: https://delivery.gettyimages.com/...
		/// ```
		/// 
		/// If the `auto_download` request query parameter is set to false, the API will return a HTTP status code 200, along with the URI in the response body which can be used to download the image.
		/// 
		/// Client Request:
		/// 
		/// ```
		/// https://api.gettyimages.com/v3/downloads/images/[asset_id]?auto_download=false
		/// ```
		/// 
		/// Server Response:
		/// 
		/// ```
		/// HTTP/1.1 200 OK
		/// {
		/// "uri": "https://delivery.gettyimages.com/..."
		/// }
		/// ```
		/// ## Downloading Via the Returned URI
		/// 
		/// Your client code should follow redirect (3xx) status codes returned from the URI in the response. More information here: [HTTP 1.1 protocol](https://tools.ietf.org/html/rfc7231#section-6.4).
		/// 
		/// The URI returned by this call should be considered opaque and the format could change at any time.
		/// In order to get the filename, length or file type, the response headers must be inspected. An example
		/// response follows:
		/// 
		/// ```
		/// content-length: 33959979
		/// content-type: image/jpeg
		/// content-disposition: attachment; filename=GettyImages-1167612765.jpg
		/// ```
		/// 
		/// The `content-disposition` header must be parsed to get a usable filename.
		/// 
		/// ## Download URI expiration
		/// 
		/// Download URIs are _**only valid for 24 hours**_, starting from the moment they are returned from this call.
		/// 
		/// V3DownloadsImages_idPostByAuto_downloadAndFile_typeAndHeightAndProduct_idAndProduct_typeAndUse_team_credits v3/downloads/images/{id}
		/// </summary>
		/// <param name="id"><remarks>
		///                    Id of image to download.
		///                </remarks></param>
		/// <param name="auto_download"><remarks>
		///                    Specifies whether to auto-download the image. If true is specified, a 303 SeeOther status is returned with a
		///                    Location header set to the location of the image.
		///                    If false is specified, the download URI will be returned in the response message. Default is true.
		///                </remarks></param>
		/// <param name="file_type"><remarks>
		///                    File Type expressed with three character file extension.
		///                </remarks></param>
		/// <param name="height"><remarks>
		///                    Specifies the pixel height of the particular image to download.
		///                    Available heights can be found in the images/{ids} response for the specific image.
		///                    If left blank, it will return the largest available size.
		///                </remarks></param>
		/// <param name="product_id"><remarks>
		///                    Identifier of the instance for the selected product offering type.
		///                </remarks></param>
		/// <param name="product_type"><remarks>
		///                    Product types easyaccess, editorialsubscription, imagepack, and premiumaccess are for GettyImages API keys. Product types royaltyfreesubscription and creditpack are for iStock API keys. Default product type for iStock API keys is creditpack.
		///                </remarks></param>
		/// <param name="use_team_credits">Specifies whether to download the image with iStock Team Credits. Only applicable to iStock API keys authenticated with a user that has Team Credits. Blank is the same as False.</param>
		/// <param name="requestBody"><remarks>
		///                    Additional information required from specific customers when downloading. 
		///                    Only users who have been set up with a project code by Getty Images Sales need to use this field.
		///                </remarks></param>
		/// <returns>OK</returns>
		public async Task V3DownloadsImages_idPostByAuto_downloadAndFile_typeAndHeightAndProduct_idAndProduct_typeAndUse_team_creditsAsync(string id, bool auto_download, DownloadFileType file_type, string height, int product_id, ProductType product_type, bool use_team_credits, PremiumAccessDownloadData requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/downloads/images/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&auto_download="+auto_download+"&file_type=" + file_type+"&height=" + (height==null? "" : System.Uri.EscapeDataString(height))+"&product_id="+product_id+"&product_type=" + product_type+"&use_team_credits="+use_team_credits;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Download a video
		/// Use this endpoint to generate download URLs and related data for videos you are authorized to download.
		/// 
		/// Most product offerings have enforced periodic download limits such as monthly, weekly, and daily. When this operation executes, the count of allowed downloads is decremented by one for the product offering. Once the download limit is reached for a given product offering, no further downloads may be requested for that product offering until the next download period.
		/// 
		/// The download limit for a given download period is covered in your product agreement established with Getty Images.
		/// 
		/// You'll need an API key and a [Resource Owner Grant or Implicit Grant](http://developers.gettyimages.com/en/authorization-faq.html) access token to use this resource.
		/// 
		/// ## Auto Downloads
		/// The `auto_download` request query parameter specifies whether to automatically download the video.
		/// 
		/// If the `auto_download` request query parameter is set to _true_, the API will return an HTTP status code 303 *See Other*. Your client code will need to process this response and redirect to the URI specified in the *Location* header to enable you to automatically download the file. The redirection workflow follows the [HTTP 1.1 protocol](https://tools.ietf.org/html/rfc7231#section-6.4.4).
		/// 
		/// Client Request:
		/// 
		/// ```
		/// https://api.gettyimages.com/v3/downloads/videos/[asset_id]?auto_download=true
		/// ```
		/// 
		/// Server Response:
		/// 
		/// Your client code should follow redirect (3xx) status codes returned from the URI in the response Location header. More information here: [HTTP 1.1 protocol](https://tools.ietf.org/html/rfc7231#section-6.4).
		/// 
		/// ```
		/// HTTP/1.1 303 See Other
		/// Location: https://delivery.gettyimages.com/...
		/// ```
		/// 
		/// If the `auto_download` request query parameter is set to false, the API will return a HTTP status code 200, along with the URI in the response body which can be used to download the video.
		/// 
		/// Client Request:
		/// 
		/// ```
		/// https://api.gettyimages.com/v3/downloads/videos/[asset_id]?auto_download=false
		/// ```
		/// 
		/// Server Response:
		/// 
		/// ```
		/// HTTP/1.1 200 OK
		/// {
		/// "uri": "https://delivery.gettyimages.com/..."
		/// }
		/// ```
		/// 
		/// ## Downloading Via the Returned URI
		/// 
		/// Your client code should follow redirect (3xx) status codes returned from the URI in the response. More information here: [HTTP 1.1 protocol](https://tools.ietf.org/html/rfc7231#section-6.4).
		/// 
		/// The URI returned by this call should be considered opaque and the format could change at any time.
		/// In order to get the filename, length or file type, the response headers must be inspected. An example
		/// response follows:
		/// 
		/// ```
		/// content-length: 283925783
		/// content-type: video/quicktime
		/// content-disposition: attachment; filename=GettyImages-690773579.mov
		/// ```
		/// 
		/// The `content-disposition` header must be parsed to get a usable filename.
		/// 
		/// ## Download URI expiration
		/// 
		/// Download URIs are _**only valid for 24 hours**_, starting from the moment they are returned from this call.
		/// 
		/// V3DownloadsVideos_idPostByAuto_downloadAndSizeAndProduct_idAndProduct_typeAndUse_team_credits v3/downloads/videos/{id}
		/// </summary>
		/// <param name="id"><remarks>
		///                    Id of video to download.
		///                </remarks></param>
		/// <param name="auto_download"><remarks>
		///                    Specifies whether to auto-download the video. If true is specified, a 303 SeeOther status is returned with a
		///                    Location header set to the location of the video.
		///                    If false is specified, the download URI will be returned in the response message. Default is false.
		///                </remarks></param>
		/// <param name="size">Specifies the size to be downloaded.</param>
		/// <param name="product_id"><remarks>
		///                    Identifier of the instance for the selected product offering type.
		///                </remarks></param>
		/// <param name="product_type"><remarks>
		///                    Product types easyaccess, editorialsubscription, imagepack, and premiumaccess are for GettyImages API keys. Product types royaltyfreesubscription and creditpack are for iStock API keys. Default product type for iStock API keys is creditpack.
		///                </remarks></param>
		/// <param name="use_team_credits">Specifies whether to download the image with iStock Team Credits. Only applicable to iStock API keys authenticated with a user that has Team Credits. Blank is the same as False.</param>
		/// <param name="requestBody"><remarks>
		///                    Additional information required from specific customers when downloading. 
		///                    Only users who have been set up with a project code by Getty Images Sales need to use this field.
		///                </remarks></param>
		/// <returns>OK</returns>
		public async Task V3DownloadsVideos_idPostByAuto_downloadAndSizeAndProduct_idAndProduct_typeAndUse_team_creditsAsync(string id, bool auto_download, string size, int product_id, ProductType product_type, bool use_team_credits, PremiumAccessDownloadData requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/downloads/videos/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&auto_download="+auto_download+"&size=" + (size==null? "" : System.Uri.EscapeDataString(size))+"&product_id="+product_id+"&product_type=" + product_type+"&use_team_credits="+use_team_credits;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get metadata for multiple events
		/// This endpoint returns the detailed event metadata for all specified events. Getty Images news, sports and entertainment photographers and
		/// videographers cover editorially relevant events occurring around the world.  All images or video clips produced in association with
		/// an event, are assigned the same EventID. EventIDs are part of the meta-data returned in SearchForImages Results. Only content
		/// produced under a Getty Images brand name (Getty Images News, Getty Images Sports, Getty Images Entertainment, Film Magic, Wire Image)
		/// will be consistently assigned an EventID. The Event framework may also be used to group similar content, such as
		/// "Hats from the Royal Wedding" or "Odd-ballOffbeat images of the week".
		/// 
		/// You'll need an API key and access token to use this resource.
		/// 
		/// V3EventsGetByIdsAndFields v3/events
		/// </summary>
		/// <param name="ids">A comma separated list of event ids.</param>
		/// <param name="fields">A comma separated list of fields to return in the response.</param>
		/// <returns>OK</returns>
		public async Task V3EventsGetByIdsAndFieldsAsync(int[] ids, EventDetailFieldValues[] fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/events?"+string.Join("&", ids.Select(z => $"ids={z}"))+"&"+string.Join("&", fields.Select(z => $"fields={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get metadata for a single event
		/// This endpoint returns the detailed event metadata for a specified event. Getty Images news, sports and entertainment
		/// photographers and videographers cover editorially relevant events occurring around the world.
		/// All images or video clips produced in association with an event, are assigned the same EventID.
		/// EventIDs are part of the meta-data returned in SearchForImages Results. Only content produced under a Getty Images
		/// brand name (Getty Images News, Getty Images Sports, Getty Images Entertainment, Film Magic, Wire Image) will be
		/// consistently assigned an EventID. The Event framework may also be used to group similar content, such as
		/// "Hats from the Royal Wedding" or "Odd-ballOffbeat images of the week".
		/// 
		/// You'll need an API key and access token to use this resource.
		/// 
		/// V3Events_idGetByFields v3/events/{id}
		/// </summary>
		/// <param name="id">An event id.</param>
		/// <param name="fields">A comma separated list of fields to return in the response.</param>
		/// <returns>OK</returns>
		public async Task V3Events_idGetByFieldsAsync(int id, EventDetailFieldValues[] fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/events/"+id+"?"+string.Join("&", fields.Select(z => $"fields={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get metadata for multiple images by supplying multiple image ids
		/// This endpoint returns the detailed image metadata for all specified images.
		/// 
		/// You'll need an API key and access token to use this resource.
		/// 
		/// ## Working with Fields Sets
		/// 
		/// Fields sets are used in the **fields** request parameter to receive a suite of metadata fields. The following fields sets are available:
		/// 
		/// #### Summary Fields Set
		/// 
		/// The **summary_set** query string parameter fields value represents a small batch of metadata fields that are often used to build
		/// search response results. The following fields are provided for every image in your result set when you include **summary_set** in your request.
		/// 
		/// ```
		/// {
		/// "images":
		/// [
		/// "artist",
		/// "asset_family",
		/// "caption",
		/// "collection_code",
		/// "collection_id",
		/// "collection_name",
		/// "license_model",
		/// "max_dimensions",
		/// "title"
		/// ]
		/// }
		/// ```
		/// 
		/// #### Detail Fields Set
		/// 
		/// The **detail_set** query string parameter fields value represents a large batch of metadata fields that are often used to build a
		/// detailed view of images. The following fields are provided for every image in your result set when you include **detail_set** in your request.
		/// 
		/// ```
		/// {
		/// "images":
		/// [
		/// "allowed_use",
		/// "artist",
		/// "artist_title",
		/// "asset_family",
		/// "call_for_image",
		/// "caption",
		/// "city",
		/// "collection_code",
		/// "collection_id",
		/// "collection_name",
		/// "color_type",
		/// "copyright",
		/// "country",
		/// "credit_line",
		/// "date_created",
		/// "date_submitted",
		/// "download_sizes",
		/// "editorial_segments",
		/// "event_ids",
		/// "graphical_style",
		/// "license_model",
		/// "max_dimensions",
		/// "orientation",
		/// "product_types",
		/// "quality_rank",
		/// "referral_destinations",
		/// "state_province",
		/// "title"
		/// ]
		/// }
		/// ```
		/// 
		/// #### Display Fields Set
		/// 
		/// The **display_set** query string parameter fields value represents the fields that provide you with URLs for the low resolution
		/// files that are most frequently used to build a UI displaying search results. The following fields are provided for every image
		/// in your result set when you include **display_set** in your request.
		/// 
		/// The URI provided is subject to change at any time and must be used as-is with no modification.
		/// 
		/// ```
		/// {
		/// "images":
		/// [
		/// "display_sizes":
		/// [
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "comp",
		/// "uri": "<link>"
		/// },
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "preview",
		/// "uri": "<link>"
		/// },
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "thumb",
		/// "uri": "<link>"
		/// }
		/// ]
		/// ]
		/// }
		/// ```
		/// 
		/// ## Request Usage Considerations
		/// 
		/// - Specifying the "entity_details" response field can have significant performance implications. The field should be used only when necessary.
		/// 
		/// V3ImagesGetByIdsAndFields v3/images
		/// </summary>
		/// <param name="ids">Specifies one or more image ids to return. Use comma delimiter when requesting multiple ids.  Maximum of 100 ids.</param>
		/// <param name="fields">Specifies fields to return. Defaults to 'summary_set'. NOTE: Bytes, height, and width returned by 'download_sizes' field are estimates.</param>
		/// <returns>OK</returns>
		public async Task<ImagesDetailResults> V3ImagesGetByIdsAndFieldsAsync(string[] ids, ImageDetailFieldValues[] fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/images?"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", fields.Select(z => $"fields={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImagesDetailResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get metadata for a single image by supplying one image id
		/// This endpoint returns the detailed image metadata for a specified image.
		/// 
		/// You'll need an API key and access token to use this resource.
		/// 
		/// ## Working with Fields Sets
		/// 
		/// Fields sets are used in the **fields** request parameter to receive a suite of metadata fields. The following fields sets are available:
		/// 
		/// #### Summary Fields Set
		/// 
		/// The **summary_set** query string parameter fields value represents a small batch of metadata fields that
		/// are often used to build search response results. The following fields are provided for every image in your
		/// result set when you include **summary_set** in your request.
		/// 
		/// ```
		/// {
		/// "images":
		/// [
		/// "artist",
		/// "asset_family",
		/// "caption",
		/// "collection_code",
		/// "collection_id",
		/// "collection_name",
		/// "license_model",
		/// "max_dimensions",
		/// "title"
		/// ]
		/// }
		/// ```
		/// 
		/// #### Detail Fields Set
		/// 
		/// The **detail_set** query string parameter fields value represents a large batch of metadata fields that are
		/// often used to build a detailed view of images. The following fields are provided for every image in your
		/// result set when you include **detail_set** in your request.
		/// 
		/// ```
		/// {
		/// "images":
		/// [
		/// "allowed_use",
		/// "artist",
		/// "artist_title",
		/// "asset_family",
		/// "call_for_image",
		/// "caption",
		/// "city",
		/// "collection_code",
		/// "collection_id",
		/// "collection_name",
		/// "color_type",
		/// "copyright",
		/// "country",
		/// "credit_line",
		/// "date_created",
		/// "date_submitted",
		/// "download_sizes",
		/// "editorial_segments",
		/// "event_ids",
		/// "graphical_style",
		/// "license_model",
		/// "max_dimensions",
		/// "orientation",
		/// "product_types",
		/// "quality_rank",
		/// "referral_destinations",
		/// "state_province",
		/// "title"
		/// ]
		/// }
		/// ```
		/// 
		/// #### Display Fields Set
		/// 
		/// The **display_set** query string parameter fields value represents the fields that provide you with URLs for the low
		/// resolution files that are most frequently used to build a UI displaying search results. The following fields are provided
		/// for every image in your result set when you include **display_set** in your request.
		/// 
		/// The URI provided is subject to change at any time and must be used as-is with no modification.
		/// 
		/// ```
		/// {
		/// "images":
		/// [
		/// "display_sizes":
		/// [
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "comp",
		/// "uri": "<link>"
		/// },
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "preview",
		/// "uri": "<link>"
		/// },
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "thumb",
		/// "uri": "<link>"
		/// }
		/// ]
		/// ]
		/// }
		/// ```
		/// 
		/// ## Request Usage Considerations
		/// 
		/// - Specifying the "entity_details" response field can have significant performance implications. The field should be used only when necessary.
		/// 
		/// 
		/// 
		/// "name": "string",
		/// "uri": "string"
		/// V3Images_idGetByFields v3/images/{id}
		/// </summary>
		/// <param name="id">An image id. For more than one image please use the /v3/images endpoint.</param>
		/// <param name="fields">Specifies fields to return. Defaults to 'summary_set'. NOTE: Bytes, height, and width returned by 'download_sizes' field are estimates.</param>
		/// <returns>OK</returns>
		public async Task<ImagesDetailResults> V3Images_idGetByFieldsAsync(string id, ImageDetailFieldValues[] fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/images/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&"+string.Join("&", fields.Select(z => $"fields={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImagesDetailResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a customer's download history for a specific asset
		/// V3Images_idDownloadhistoryGetByCompany_downloads v3/images/{id}/downloadhistory
		/// </summary>
		/// <param name="id">An image id.</param>
		/// <param name="company_downloads">If specified, returns the list of previously downloaded images for all users in your company.
		///            Your account must be enabled for this functionality. Contact your Getty Images account rep for more information. Default is false.</param>
		/// <returns>OK</returns>
		public async Task<AssetDownloadHistoryResults> V3Images_idDownloadhistoryGetByCompany_downloadsAsync(string id, bool company_downloads, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/images/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/downloadhistory&company_downloads="+company_downloads;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssetDownloadHistoryResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve creative images from the same series
		/// This endpoint will provide the list of images, if any exist, from the same series as the specified creative asset id. These images are typically from the same photo shoot. This functionality will not work for editorial assets.
		/// 
		/// You'll need an API key and access token to use this resource.
		/// 
		/// ## Working with Fields Sets
		/// 
		/// Fields sets are used in the **fields** request parameter to receive a suite of metadata fields. The following fields sets are available:
		/// 
		/// #### Summary Fields Set
		/// 
		/// The **summary_set** query string parameter fields value represents a small batch of metadata fields that are often used to build
		/// search response results. The following fields are provided for every image in your result set when you include **summary_set** in your request.
		/// 
		/// ```
		/// {
		/// "images":
		/// [
		/// "asset_family",
		/// "caption",
		/// "collection_code",
		/// "collection_id",
		/// "collection_name",
		/// "display_sizes":
		/// [
		/// {
		/// "name": "thumb"
		/// }
		/// ]
		/// "license_model",
		/// "max_dimensions",
		/// "title"
		/// ]
		/// }
		/// ```
		/// 
		/// #### Detail Fields Set
		/// 
		/// The **detail_set** query string parameter fields value represents a large batch of metadata fields that are often used to build a
		/// detailed view of images. The following fields are provided for every image in your result set when you include **detail_set** in your request.
		/// 
		/// ```
		/// {
		/// "images":
		/// [
		/// "allowed_use",
		/// "artist",
		/// "asset_family",
		/// "call_for_image",
		/// "caption",
		/// "collection_code",
		/// "collection_id",
		/// "collection_name",
		/// "copyright",
		/// "date_created",
		/// "display_sizes":
		/// [
		/// {
		/// "name": "comp"
		/// },
		/// {
		/// "name": "preview"
		/// },
		/// {
		/// "name": "thumb"
		/// }
		/// ],
		/// "editorial_segments",
		/// "event_ids",
		/// "graphical_style",
		/// "license_model",
		/// "max_dimensions",
		/// "orientation",
		/// "product_types",
		/// "quality_rank",
		/// "referral_destinations",
		/// "title"
		/// ]
		/// }
		/// ```
		/// 
		/// #### Display Fields Set
		/// 
		/// The **display_set** query string parameter fields value represents the fields that provide you with URLs for the low resolution files
		/// that are most frequently used to build a UI displaying search results. The following fields are provided for every image in your result
		/// set when you include **display_set** in your request.
		/// 
		/// The URI provided is subject to change at any time and must be used as-is with no modification.
		/// 
		/// ```
		/// {
		/// "images":
		/// [
		/// "display_sizes":
		/// [
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "comp",
		/// "uri": "<link>"
		/// },
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "preview",
		/// "uri": "<link>"
		/// },
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "thumb",
		/// "uri": "<link>"
		/// }
		/// ]
		/// ]
		/// }
		/// ```
		/// 
		/// V3Images_idSame_seriesGetByFieldsAndPageAndPage_size v3/images/{id}/same-series
		/// </summary>
		/// <param name="id">Identifies an existing image</param>
		/// <param name="fields">Specifies fields to return. Defaults to 'summary_set'. NOTE: Bytes, height, and width returned by 'download_sizes' field are estimates.</param>
		/// <param name="page">Identifies page to return. Default is 1.</param>
		/// <param name="page_size">Specifies page size. Default is 30, maximum page_size is 100.</param>
		/// <returns>OK</returns>
		public async Task<ImageSearchItemSearchResults> V3Images_idSame_seriesGetByFieldsAndPageAndPage_sizeAsync(string id, ImagesFieldValues[] fields, int page, int page_size, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/images/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/same-series&"+string.Join("&", fields.Select(z => $"fields={z}"))+"&page="+page+"&page_size="+page_size;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImageSearchItemSearchResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve similar images
		/// This endpoint will provide a list of images that are similar to the specified asset id.
		/// 
		/// You'll need an API key and access token to use this resource.
		/// 
		/// ## Working with Fields Sets
		/// 
		/// Fields sets are used in the **fields** request parameter to receive a suite of metadata fields. The following fields sets are available:
		/// 
		/// #### Summary Fields Set
		/// 
		/// The **summary_set** query string parameter fields value represents a small batch of metadata fields that are often used to build
		/// search response results. The following fields are provided for every image in your result set when you include **summary_set** in your request.
		/// 
		/// ```
		/// {
		/// "images":
		/// [
		/// "asset_family",
		/// "caption",
		/// "collection_code",
		/// "collection_id",
		/// "collection_name",
		/// "display_sizes":
		/// [
		/// {
		/// "name": "thumb"
		/// }
		/// ]
		/// "license_model",
		/// "max_dimensions",
		/// "title"
		/// ]
		/// }
		/// ```
		/// 
		/// #### Detail Fields Set
		/// 
		/// The **detail_set** query string parameter fields value represents a large batch of metadata fields that are often used to build a
		/// detailed view of images. The following fields are provided for every image in your result set when you include **detail_set** in your request.
		/// 
		/// ```
		/// {
		/// "images":
		/// [
		/// "allowed_use",
		/// "artist",
		/// "asset_family",
		/// "call_for_image",
		/// "caption",
		/// "collection_code",
		/// "collection_id",
		/// "collection_name",
		/// "copyright",
		/// "date_created",
		/// "display_sizes":
		/// [
		/// {
		/// "name": "comp"
		/// },
		/// {
		/// "name": "preview"
		/// },
		/// {
		/// "name": "thumb"
		/// }
		/// ],
		/// "editorial_segments",
		/// "event_ids",
		/// "graphical_style",
		/// "license_model",
		/// "max_dimensions",
		/// "orientation",
		/// "product_types",
		/// "quality_rank",
		/// "referral_destinations",
		/// "title"
		/// ]
		/// }
		/// ```
		/// 
		/// #### Display Fields Set
		/// 
		/// The **display_set** query string parameter fields value represents the fields that provide you with URLs for the low resolution files
		/// that are most frequently used to build a UI displaying search results. The following fields are provided for every image in your result
		/// set when you include **display_set** in your request.
		/// 
		/// 
		/// The URI provided is subject to change at any time and must be used as-is with no modification.
		/// 
		/// ```
		/// {
		/// "images":
		/// [
		/// "display_sizes":
		/// [
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "comp",
		/// "uri": "<link>"
		/// },
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "preview",
		/// "uri": "<link>"
		/// },
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "thumb",
		/// "uri": "<link>"
		/// }
		/// ]
		/// ]
		/// }
		/// ```
		/// 
		/// V3Images_idSimilarGetByFieldsAndPageAndPage_size v3/images/{id}/similar
		/// </summary>
		/// <param name="id">Identifies an existing image</param>
		/// <param name="fields">Specifies fields to return. Defaults to 'summary_set'. NOTE: Bytes, height, and width returned by 'download_sizes' field are estimates.</param>
		/// <param name="page">Identifies page to return. Default is 1.</param>
		/// <param name="page_size">Specifies page size. Default is 30, maximum page_size is 100.</param>
		/// <returns>OK</returns>
		public async Task<ImageSearchItemSearchResults> V3Images_idSimilarGetByFieldsAndPageAndPage_sizeAsync(string id, ImagesFieldValues[] fields, int page, int page_size, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/images/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/similar&"+string.Join("&", fields.Select(z => $"fields={z}"))+"&page="+page+"&page_size="+page_size;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImageSearchItemSearchResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get order metadata
		/// This endpoint returns detailed order metadata for a specified order.
		/// Use of this endpoint requires configuration changes to your API key.
		/// 
		/// You'll need an API key and access token to use this resource.
		/// V3Orders_idGet v3/orders/{id}
		/// </summary>
		/// <param name="id">An order id.</param>
		/// <returns>OK</returns>
		public async Task<OrderDetail> V3Orders_idGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/orders/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OrderDetail>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Products
		/// This endpoint returns all products available to the username used during authentication. As such, this endpoint requires the use of
		/// a fully authorized access_token. The product data can then be used as search filters, restricting results to images from a specific product.
		/// 
		/// You'll need an API key and access token to use this resource.
		/// 
		/// V3ProductsGetByFields v3/products
		/// </summary>
		/// <param name="fields">Comma separated list of fields. Allows product download requirements to be returned.</param>
		/// <returns>OK</returns>
		public async Task<ProductsResult> V3ProductsGetByFieldsAsync(ProductFieldValues[] fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/products?"+string.Join("&", fields.Select(z => $"fields={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Previously Purchased Images and Video
		/// This endpoint returns a list of all assets purchased on gettyimages.com by the username used for authentication.
		/// Use of this endpoint requires configuration changes to your API key. Please contact your sales representative
		/// to learn more.
		/// 
		/// You'll need an API key and access token to use this resource.
		/// 
		/// V3Purchased_assetsGetByDate_toAndPageAndPage_sizeAndDate_fromAndCompany_purchases v3/purchased-assets
		/// </summary>
		/// <param name="date_to">If specified, retrieves previous purchases on or before this date. Dates should be submitted in ISO 8601 format (i.e., YYYY-MM-DD).</param>
		/// <param name="page">Identifies page to return. Default is 1.</param>
		/// <param name="page_size">Specifies page size. Default is 75, maximum page_size is 100.</param>
		/// <param name="date_from">If specified, retrieves previous purchases on or after this date. Dates should be submitted in ISO 8601 format (i.e., YYYY-MM-DD).</param>
		/// <param name="company_purchases">If specified, returns the list of previously purchased assets for all users in your company. Your account must be enabled for this functionality. Contact your Getty Images account rep for more information. Default is false.</param>
		/// <returns>OK</returns>
		public async Task<PreviousAssetPurchases> V3Purchased_assetsGetByDate_toAndPageAndPage_sizeAndDate_fromAndCompany_purchasesAsync(System.DateTimeOffset date_to, int page, int page_size, System.DateTimeOffset date_from, bool company_purchases, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/purchased-assets?date_to=" + date_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&page="+page+"&page_size="+page_size+"&date_from=" + date_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&company_purchases="+company_purchases;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PreviousAssetPurchases>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search for events
		/// Use this endpoint to search Getty Images news, sports and entertainment events. Getty Images photographers and videographers cover editorially relevant events occurring around the world.  All images or video clips produced in association with an event, are assigned the same EventID. EventIDs are part of the meta-data returned in Search Results. Only content produced under a Getty Images brand name (Getty Images News, Getty Images Sports, Getty Images Entertainment, Film Magic, Wire Image) will be consistently assigned an EventID. The Event framework may also be used to group similar content, such as "Hats from the Royal Wedding" or "Odd-ballOffbeat images of the week".
		/// 
		/// You'll need an API key and access token to use this resource.
		/// 
		/// 
		/// You can show different information in the response by specifying values on the "fields" parameter (see details below).
		/// You can search with only an API key, and that will give you search results that are equivalent to doing a search on the GettyImages.com site without being logged in (anonymous search).  If you are a Getty Images API customer and would like to ensure that your API searches return only assets that you have a license to use, you need to also include an authorization token in the header of your request.  Please consult our [Authorization FAQ](http://developers.gettyimages.com/en/authorization-faq.html) for more information on authorization tokens, and our [Authorization Workflows](https://github.com/gettyimages/gettyimages-api/blob/master/OAuth2Workflow.md) for code examples of getting a token.
		/// 
		/// V3SearchEventsGetByEditorial_segmentAndDate_fromAndDate_toAndFieldsAndPageAndPage_sizeAndPhraseAndSort_order v3/search/events
		/// </summary>
		/// <param name="editorial_segment">Filters to events with a matching editorial segment.</param>
		/// <param name="date_from">Filters to events that start on or after this date. Use ISO 8601 format (e.g., 1999-12-31). Defaults to UTC unless otherwise specified.</param>
		/// <param name="date_to">Filters to events that start on or before this date. Use ISO 8601 format (e.g., 1999-12-31). Defaults to UTC unless otherwise specified.</param>
		/// <param name="fields">Specifies fields to return. Default set is 'id','name','start_date'.</param>
		/// <param name="page">Request results starting at a page number (default is 1, maximum is 50).</param>
		/// <param name="page_size">Request number of events to return in each page. Default is 30, maximum page_size is 100.</param>
		/// <param name="phrase">Filters to events related to this phrase</param>
		/// <param name="sort_order">Specifies the order in which to sort the results. Default is `newest`.</param>
		/// <returns>OK</returns>
		public async Task<EventsSearchResult> V3SearchEventsGetByEditorial_segmentAndDate_fromAndDate_toAndFieldsAndPageAndPage_sizeAndPhraseAndSort_orderAsync(EditorialSegmentContract editorial_segment, System.DateTimeOffset date_from, System.DateTimeOffset date_to, EventFieldValues[] fields, int page, int page_size, string phrase, EventSearchSortOrder sort_order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/search/events?editorial_segment=" + editorial_segment+"&date_from=" + date_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&date_to=" + date_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", fields.Select(z => $"fields={z}"))+"&page="+page+"&page_size="+page_size+"&phrase=" + (phrase==null? "" : System.Uri.EscapeDataString(phrase))+"&sort_order=" + sort_order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventsSearchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search for both creative and editorial images - *** DEPRECATED ***
		/// ## _This endpoint draws from such a large diversity of content, the results will not be as relevant as when the more specific Creative or Editorial endpoints are used. Additionally, the response time for this endpoint is slower compared to that for Creative and Editorial-specific endpoints. For these reasons,_ _**it is highly recommended that those endpoints are used instead of this blended endpoint.**_
		/// 
		/// 
		/// 
		/// You'll need an API key and access token to use this resource.
		/// 
		/// You can show different information in the response by specifying values on the "fields" parameter (see details below).
		/// You can search with only an API key, and that will give you search results that are equivalent to doing a search on the GettyImages.com site without being logged in (anonymous search).  If you are a Getty Images API customer and would like to ensure that your API searches return only assets that you have a license to use, you need to also include an authorization token in the header of your request.  Please consult our [Authorization FAQ](http://developers.gettyimages.com/en/authorization-faq.html) for more information on authorization tokens, and our [Authorization Workflows](https://github.com/gettyimages/gettyimages-api/blob/master/OAuth2Workflow.md) for code examples of getting a token.<br>
		/// To include your API token in the search request, add it to the headers as a Bearer token (example in curl):
		/// 
		/// -H "Authorization: Bearer <your-token>"
		/// 
		/// Search requests without a phrase parameter are not supported and may not always work.
		/// 
		/// ## Working with Fields Sets
		/// 
		/// Fields sets are used in the **fields** request parameter to receive a suite of metadata fields. The following fields sets are available:
		/// 
		/// #### Summary Fields Set
		/// 
		/// The **summary_set** query string parameter fields value represents a small batch of metadata fields that are often used to build search response results. The following fields are provided for every image in your result set when you include **summary_set** in your request.
		/// 
		/// ```
		/// {
		/// "images":
		/// [
		/// "asset_family",
		/// "caption",
		/// "collection_code",
		/// "collection_id",
		/// "collection_name",
		/// "display_sizes":
		/// [
		/// {
		/// "name": "thumb"
		/// }
		/// ],
		/// "license_model",
		/// "max_dimensions",
		/// "title"
		/// ]
		/// }
		/// ```
		/// 
		/// #### Detail Fields Set
		/// 
		/// The **detail_set** query string parameter fields value represents a large batch of metadata fields that are often used to build a detailed view of images.
		/// The following fields are provided for every image in your result set when you include **detail_set** in your request.
		/// 
		/// ```
		/// {
		/// "images":
		/// [
		/// "allowed_use",
		/// "artist",
		/// "asset_family",
		/// "call_for_image",
		/// "caption",
		/// "collection_code",
		/// "collection_id",
		/// "collection_name",
		/// "copyright",
		/// "date_created",
		/// "display_sizes":
		/// [
		/// {
		/// "name": "comp"
		/// },
		/// {
		/// "name": "preview"
		/// },
		/// {
		/// "name": "thumb"
		/// }
		/// ],
		/// "editorial_segments",
		/// "event_ids",
		/// "graphical_style",
		/// "license_model",
		/// "max_dimensions",
		/// "orientation",
		/// "product_types",
		/// "quality_rank",
		/// "referral_destinations",
		/// "title"
		/// ]
		/// ]
		/// ```
		/// 
		/// #### Display Fields Set
		/// 
		/// The **display_set** query string parameter fields value represents the fields that provide you with URLs for the low resolution files that are most
		/// frequently used to build a UI displaying search results. The following fields are provided for every image in your result set when you include **display_set**
		/// in your request.
		/// 
		/// The URI provided is subject to change at any time and must be used as-is with no modification.
		/// 
		/// ```
		/// {
		/// "images":
		/// [
		/// "display_sizes":
		/// [
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "comp",
		/// "uri": "<link>"
		/// },
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "preview",
		/// "uri": "<link>"
		/// },
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "thumb",
		/// "uri": "<link>"
		/// }
		/// ]
		/// ]
		/// }
		/// ```
		/// 
		/// ## Request Usage Considerations
		/// 
		/// - Specifying the "entity_details" response field can have significant performance implications. The field should be used only when necessary.
		/// 
		/// V3SearchImagesGetByAge_of_peopleAndArtistsAndCollection_codesAndCollections_filter_typeAndColorAndCompositionsAndDownload_productAndEmbed_content_onlyAndEvent_idsAndEthnicityAndExclude_nudityAndFieldsAndFile_typesAndGraphical_stylesAndGraphical_styles_filter_typeAndInclude_related_searchesAndKeyword_idsAndMinimum_sizeAndNumber_of_peopleAndOrientationsAndPageAndPage_sizeAndPhraseAndSort_orderAndSpecific_people v3/search/images
		/// </summary>
		/// <param name="age_of_people">Filter based on the age of individuals in an image.</param>
		/// <param name="artists">Search for images by specific artists (free-text, comma-separated list of artists).</param>
		/// <param name="collection_codes">Filter by collection codes (comma-separated list). Include or exclude based on collections_filter_type.</param>
		/// <param name="collections_filter_type">Provides searching based on specified collection(s). The default is Include</param>
		/// <param name="color">Filter based on predominant color in an image. Use 6 character hexidecimal format (e.g., #002244). Note: when specified, results will not contain editorial images.</param>
		/// <param name="compositions">Filter based on image composition.</param>
		/// <param name="download_product">Filters based on which product the asset will download against.
		///                    Allowed values are easyaccess, editorialsubscription, imagepack, premiumaccess and royaltyfreesubscription.
		///                    If you have more than one instance of a product, you may also include the ID of the product instance you wish to filter on. 
		///                    For example, some users may have more than one premiumaccess product, so the download_product value would be premiumaccess:1234. 
		///                    Product ID can be obtained from the GET /products response.</param>
		/// <param name="embed_content_only">Restrict search results to embeddable images. The default is false.</param>
		/// <param name="event_ids">Filter based on specific events</param>
		/// <param name="ethnicity">Filter search results based on the ethnicity of individuals in an image.</param>
		/// <param name="exclude_nudity">Excludes images containing nudity. The default is false.</param>
		/// <param name="fields">Specifies fields to return. Defaults to 'summary_set'.</param>
		/// <param name="file_types">Return only images having a specific file type.</param>
		/// <param name="graphical_styles">Filter based on graphical style of the image.</param>
		/// <param name="graphical_styles_filter_type">Provides searching based on specified graphical style(s). The default is Include</param>
		/// <param name="include_related_searches">Specifies whether or not to include related searches in the response. The default is false.</param>
		/// <param name="keyword_ids">Return only images tagged with specific keyword(s). Specify using a comma-separated list of keyword Ids. If keyword Ids and phrase are both specified, only those images matching the query phrase which also contain the requested keyword(s) are returned.</param>
		/// <param name="minimum_size">Filter based on minimum size requested. The default is x-small</param>
		/// <param name="number_of_people">Filter based on the number of people in the image.</param>
		/// <param name="orientations">Return only images with selected aspect ratios.</param>
		/// <param name="page">Request results starting at a page number (default is 1).</param>
		/// <param name="page_size">Request number of images to return in each page. Default is 30, maximum page_size is 100.</param>
		/// <param name="phrase">Search images using a search phrase.</param>
		/// <param name="sort_order">Select sort order of results.  The default is best_match</param>
		/// <param name="specific_people">Return only images associated with specific people (using a comma-delimited list).</param>
		/// <returns>OK</returns>
		public async Task<ImageSearchItemSearchResults> V3SearchImagesGetByAge_of_peopleAndArtistsAndCollection_codesAndCollections_filter_typeAndColorAndCompositionsAndDownload_productAndEmbed_content_onlyAndEvent_idsAndEthnicityAndExclude_nudityAndFieldsAndFile_typesAndGraphical_stylesAndGraphical_styles_filter_typeAndInclude_related_searchesAndKeyword_idsAndMinimum_sizeAndNumber_of_peopleAndOrientationsAndPageAndPage_sizeAndPhraseAndSort_orderAndSpecific_peopleAsync(
					AgeOfPeopleFilterType[] age_of_people, 
					string artists, 
					string[] collection_codes, 
					CollectionsFilterType collections_filter_type, 
					string color, 
					CompositionsFilterType[] compositions, 
					string download_product, 
					bool embed_content_only, 
					int[] event_ids, 
					EthnicityFilterType[] ethnicity, 
					bool exclude_nudity, 
					ImagesFieldValues[] fields, 
					SearchFileType[] file_types, 
					GraphicalStyle[] graphical_styles, 
					CollectionsFilterType graphical_styles_filter_type, 
					bool include_related_searches, 
					int[] keyword_ids, 
					TeeShirtSize minimum_size, 
					NumberOfPeopleFilterType[] number_of_people, 
					ImageOrientationRequest[] orientations, 
					int page, 
					int page_size, 
					string phrase, 
					BlendedImageSortOrder sort_order, 
					string[] specific_people, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/search/images?"+string.Join("&", age_of_people.Select(z => $"age_of_people={z}"))+"&artists=" + (artists==null? "" : System.Uri.EscapeDataString(artists))+"&"+string.Join("&", collection_codes.Select(z => $"collection_codes={System.Uri.EscapeDataString(z.ToString())}"))+"&collections_filter_type=" + collections_filter_type+"&color=" + (color==null? "" : System.Uri.EscapeDataString(color))+"&"+string.Join("&", compositions.Select(z => $"compositions={z}"))+"&download_product=" + (download_product==null? "" : System.Uri.EscapeDataString(download_product))+"&embed_content_only="+embed_content_only+"&"+string.Join("&", event_ids.Select(z => $"event_ids={z}"))+"&"+string.Join("&", ethnicity.Select(z => $"ethnicity={z}"))+"&exclude_nudity="+exclude_nudity+"&"+string.Join("&", fields.Select(z => $"fields={z}"))+"&"+string.Join("&", file_types.Select(z => $"file_types={z}"))+"&"+string.Join("&", graphical_styles.Select(z => $"graphical_styles={z}"))+"&graphical_styles_filter_type=" + graphical_styles_filter_type+"&include_related_searches="+include_related_searches+"&"+string.Join("&", keyword_ids.Select(z => $"keyword_ids={z}"))+"&minimum_size=" + minimum_size+"&"+string.Join("&", number_of_people.Select(z => $"number_of_people={z}"))+"&"+string.Join("&", orientations.Select(z => $"orientations={z}"))+"&page="+page+"&page_size="+page_size+"&phrase=" + (phrase==null? "" : System.Uri.EscapeDataString(phrase))+"&sort_order=" + sort_order+"&"+string.Join("&", specific_people.Select(z => $"specific_people={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImageSearchItemSearchResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search for creative images only
		/// Use this endpoint to search our contemporary stock photos, illustrations and archival images.
		/// 
		/// You'll need an API key and access token to use this resource.
		/// 
		/// You can show different information in the response by specifying values on the "fields" parameter (see details below).
		/// You can search with only an API key, and that will give you search results that are equivalent to doing a search on the GettyImages.com site without being logged in (anonymous search).  If you are a Getty Images API customer and would like to ensure that your API searches return only assets that you have a license to use, you need to also include an authorization token in the header of your request.  Please consult our [Authorization FAQ](http://developers.gettyimages.com/en/authorization-faq.html) for more information on authorization tokens, and our [Authorization Workflows](https://github.com/gettyimages/gettyimages-api/blob/master/OAuth2Workflow.md) for code examples of getting a token.
		/// 
		/// Search requests without a phrase parameter are not supported and may not always work.
		/// 
		/// ## Working with Fields Sets
		/// 
		/// Fields sets are used in the **fields** request parameter to receive a suite of metadata fields. The following fields sets are available:
		/// 
		/// #### Summary Fields Set
		/// 
		/// The **summary_set** query string parameter fields value represents a small batch of metadata fields that are often used to
		/// build search response results. The following fields are provided for every image in your result set when you include **summary_set** in your request.
		/// 
		/// ```
		/// {
		/// "images":
		/// [
		/// "asset_family",
		/// "caption",
		/// "collection_code",
		/// "collection_id",
		/// "collection_name",
		/// "display_sizes":
		/// [
		/// {
		/// "name": "thumb"
		/// }
		/// ],
		/// "license_model",
		/// "max_dimensions",
		/// "title"
		/// ]
		/// }
		/// ```
		/// 
		/// #### Detail Fields Set
		/// 
		/// The **detail_set** query string parameter fields value represents a large batch of metadata fields that are often used to
		/// build a detailed view of images. The following fields are provided for every image in your result set when you include **detail_set** in your request.
		/// 
		/// ```
		/// {
		/// "images":
		/// [
		/// "allowed_use",
		/// "artist",
		/// "asset_family",
		/// "call_for_image",
		/// "caption",
		/// "collection_code",
		/// "collection_id",
		/// "collection_name",
		/// "copyright",
		/// "date_created",
		/// "display_sizes":
		/// [
		/// {
		/// "name": "comp"
		/// },
		/// {
		/// "name": "preview"
		/// },
		/// {
		/// "name": "thumb"
		/// }
		/// ],
		/// "editorial_segments",
		/// "event_ids",
		/// "graphical_style",
		/// "license_model",
		/// "max_dimensions",
		/// "orientation",
		/// "product_types",
		/// "quality_rank",
		/// "referral_destinations",
		/// "title"
		/// ]
		/// ]
		/// ```
		/// 
		/// #### Display Fields Set
		/// 
		/// The **display_set** query string parameter fields value represents the fields that provide you with URLs for the low resolution
		/// files that are most frequently used to build a UI displaying search results. The following fields are provided for every image
		/// in your result set when you include **display_set** in your request.
		/// 
		/// The URI provided is subject to change at any time and must be used as-is with no modification.
		/// 
		/// ```
		/// {
		/// "images":
		/// [
		/// "display_sizes":
		/// [
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "comp",
		/// "uri": "<link>"
		/// },
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "preview",
		/// "uri": "<link>"
		/// },
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "thumb",
		/// "uri": "<link>"
		/// }
		/// ]
		/// ]
		/// }
		/// ```
		/// V3SearchImagesCreativeGetByAge_of_peopleAndArtistsAndCollection_codesAndCollections_filter_typeAndColorAndCompositionsAndDownload_productAndEmbed_content_onlyAndEthnicityAndExclude_keyword_idsAndExclude_nudityAndExclude_editorial_use_onlyAndFieldsAndFile_typesAndGraphical_stylesAndGraphical_styles_filter_typeAndInclude_related_searchesAndKeyword_idsAndMinimum_sizeAndNumber_of_peopleAndOrientationsAndPageAndPage_sizeAndPhraseAndSafe_searchAndSort_orderAndFacet_fieldsAndInclude_facetsAndFacet_max_count v3/search/images/creative
		/// </summary>
		/// <param name="age_of_people">Filter based on the age of individuals in an image.</param>
		/// <param name="artists">Search for images by specific artists (free-text, comma-separated list of artists).</param>
		/// <param name="collection_codes">Filter by collection codes (comma-separated list). Include or exclude based on collections_filter_type.</param>
		/// <param name="collections_filter_type">Use to include or exclude collections from search. The default is include</param>
		/// <param name="color">Filter based on predominant color in an image. Use 6 character hexadecimal format (e.g., #002244).</param>
		/// <param name="compositions">Filter based on image composition.</param>
		/// <param name="download_product">Filters based on which product the asset will download against.
		///                    Allowed values are easyaccess, editorialsubscription, imagepack, premiumaccess and royaltyfreesubscription.
		///                    If you have more than one instance of a product, you may also include the ID of the product instance you wish to filter on. 
		///                    For example, some users may have more than one premiumaccess product, so the download_product value would be premiumaccess:1234. 
		///                    Product ID can be obtained from the GET /products response.</param>
		/// <param name="embed_content_only">Restrict search results to embeddable images. The default is false.</param>
		/// <param name="ethnicity">Filter search results based on the ethnicity of individuals in an image.</param>
		/// <param name="exclude_keyword_ids">Return only images not tagged with specific keyword(s). Specify using a comma-separated list of keyword Ids. If keyword Ids and phrase are both specified, only those images matching the query phrase which also do not contain the requested keyword(s) are returned.</param>
		/// <param name="exclude_nudity">Excludes images containing nudity. The default is false.</param>
		/// <param name="exclude_editorial_use_only">Exclude images that are only available for editorial (non-commercial) use. Default value is false.</param>
		/// <param name="fields">Specifies fields to return. Defaults to 'summary_set'. NOTE: Bytes, height, and width returned by 'download_sizes' field are estimates.</param>
		/// <param name="file_types">Return only images having a specific file type.</param>
		/// <param name="graphical_styles">Filter based on graphical style of the image.</param>
		/// <param name="graphical_styles_filter_type">Provides searching based on specified graphical style(s). The default is include.</param>
		/// <param name="include_related_searches">Specifies whether or not to include related searches in the response. The default is false.</param>
		/// <param name="keyword_ids">Return only images tagged with specific keyword(s). Specify using a comma-separated list of keyword Ids. If keyword Ids and phrase are both specified, only those images matching the query phrase which also contain the requested keyword(s) are returned.</param>
		/// <param name="minimum_size">Filter based on minimum size requested. The default is x-small.</param>
		/// <param name="number_of_people">Filter based on the number of people in the image.</param>
		/// <param name="orientations">Return only images with selected aspect ratios.</param>
		/// <param name="page">Request results starting at a page number (default is 1).</param>
		/// <param name="page_size">Request number of images to return in each page. Default is 30, maximum page_size is 100.</param>
		/// <param name="phrase">Search images using a search phrase.</param>
		/// <param name="safe_search">Setting safe_search to "true" excludes images containing nudity, death, profanity, drugs and alcohol, suggestive content, and graphic content from the result set. The default is false. Because this is a keyword-based filter, it's possible that a small number of unsafe images may not be caught by the filter. Please direct feedback to your Getty Images Account or API support representative.</param>
		/// <param name="sort_order">Select sort order of results.  The default is best_match</param>
		/// <param name="facet_fields">Specifies the facets to return in the response. Facets provide additional search parameters to refine your results.
		///                   The include_facets parameter must be set to "true" for facets to be returned.</param>
		/// <param name="include_facets">Specifies whether or not to include facets in the result set. Default is "false".</param>
		/// <param name="facet_max_count">Specifies the maximum number of facets to return per type. Default is 300.</param>
		/// <returns>OK</returns>
		public async Task<CreativeImageSearchResults> V3SearchImagesCreativeGetByAge_of_peopleAndArtistsAndCollection_codesAndCollections_filter_typeAndColorAndCompositionsAndDownload_productAndEmbed_content_onlyAndEthnicityAndExclude_keyword_idsAndExclude_nudityAndExclude_editorial_use_onlyAndFieldsAndFile_typesAndGraphical_stylesAndGraphical_styles_filter_typeAndInclude_related_searchesAndKeyword_idsAndMinimum_sizeAndNumber_of_peopleAndOrientationsAndPageAndPage_sizeAndPhraseAndSafe_searchAndSort_orderAndFacet_fieldsAndInclude_facetsAndFacet_max_countAsync(
					AgeOfPeopleFilterType[] age_of_people, 
					string artists, 
					string[] collection_codes, 
					CollectionsFilterType collections_filter_type, 
					string color, 
					CompositionsFilterType[] compositions, 
					string download_product, 
					bool embed_content_only, 
					EthnicityFilterType[] ethnicity, 
					int[] exclude_keyword_ids, 
					bool exclude_nudity, 
					bool exclude_editorial_use_only, 
					CreativeImagesFieldValues[] fields, 
					SearchFileType[] file_types, 
					GraphicalStyle[] graphical_styles, 
					CollectionsFilterType graphical_styles_filter_type, 
					bool include_related_searches, 
					int[] keyword_ids, 
					TeeShirtSize minimum_size, 
					NumberOfPeopleFilterType[] number_of_people, 
					ImageOrientationRequest[] orientations, 
					int page, 
					int page_size, 
					string phrase, 
					bool safe_search, 
					BlendedImageSortOrder sort_order, 
					CreateImageSearchFacetsFields[] facet_fields, 
					bool include_facets, 
					int facet_max_count, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/search/images/creative?"+string.Join("&", age_of_people.Select(z => $"age_of_people={z}"))+"&artists=" + (artists==null? "" : System.Uri.EscapeDataString(artists))+"&"+string.Join("&", collection_codes.Select(z => $"collection_codes={System.Uri.EscapeDataString(z.ToString())}"))+"&collections_filter_type=" + collections_filter_type+"&color=" + (color==null? "" : System.Uri.EscapeDataString(color))+"&"+string.Join("&", compositions.Select(z => $"compositions={z}"))+"&download_product=" + (download_product==null? "" : System.Uri.EscapeDataString(download_product))+"&embed_content_only="+embed_content_only+"&"+string.Join("&", ethnicity.Select(z => $"ethnicity={z}"))+"&"+string.Join("&", exclude_keyword_ids.Select(z => $"exclude_keyword_ids={z}"))+"&exclude_nudity="+exclude_nudity+"&exclude_editorial_use_only="+exclude_editorial_use_only+"&"+string.Join("&", fields.Select(z => $"fields={z}"))+"&"+string.Join("&", file_types.Select(z => $"file_types={z}"))+"&"+string.Join("&", graphical_styles.Select(z => $"graphical_styles={z}"))+"&graphical_styles_filter_type=" + graphical_styles_filter_type+"&include_related_searches="+include_related_searches+"&"+string.Join("&", keyword_ids.Select(z => $"keyword_ids={z}"))+"&minimum_size=" + minimum_size+"&"+string.Join("&", number_of_people.Select(z => $"number_of_people={z}"))+"&"+string.Join("&", orientations.Select(z => $"orientations={z}"))+"&page="+page+"&page_size="+page_size+"&phrase=" + (phrase==null? "" : System.Uri.EscapeDataString(phrase))+"&safe_search="+safe_search+"&sort_order=" + sort_order+"&"+string.Join("&", facet_fields.Select(z => $"facet_fields={z}"))+"&include_facets="+include_facets+"&facet_max_count="+facet_max_count;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreativeImageSearchResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search for creative images based on url
		/// Search for **similar creative images** by passing an `image_url` to an uploaded image OR an `asset_id` of an asset in our catalog.  All responses will have the `exclude_nudity` filter automatically applied.
		/// 
		/// ## Searching by URL
		/// 
		/// Before calling the search by image endpoint, an image in JPEG format must be uploaded to `https://api.gettyimages.com/v3/search/by-image/uploads/{CLIENT_IMAGE.jpg}`, where the client defines the `{CLIENT_IMAGE.jpg}` portion of the URL.
		/// 
		/// For example, using cURL:
		/// 
		/// ``` sh
		/// curl -i -X PUT https://api.gettyimages.com/v3/search/by-image/uploads/my-test-image.jpg -H 'Content-Type: image/jpeg' -H 'Api-Key: API_KEY' --data-binary "@testimage.jpg"
		/// ```
		/// 
		/// Once the image has been uploaded, use the full URL in the `image_url` parameter, e.g. `image_url=https://api.gettyimages.com/v3/search/by-image/uploads/my-test-image.jpg`.
		/// 
		/// - Uploaded files must be 10MB or smaller.
		/// - Uploads to the same URL will overwrite each other, so ensure that the client application is handling naming uniqueness appropriately.
		/// - Uploads expire after 24 hours.
		/// - Uploads and searches must be performed using the _same_ API Key.
		/// 
		/// ## Searching by asset id
		/// 
		/// When searching by `asset_id`, any image or video asset id in the Getty/iStock catalog can be used as the source for similar images.
		/// 
		/// V3SearchImagesCreativeBy_imageGetByAsset_idAndExclude_editorial_use_onlyAndFacet_fieldsAndFacet_max_countAndFieldsAndImage_urlAndInclude_facetsAndPageAndPage_sizeAndProduct_types v3/search/images/creative/by-image
		/// </summary>
		/// <param name="asset_id">Specifies the Getty image id to use in the search.</param>
		/// <param name="exclude_editorial_use_only">Exclude images that are only available for editorial (non-commercial) use. Default value is false.</param>
		/// <param name="facet_fields">Specifies the facets to return in the response. Facets provide additional search parameters to refine your results.
		///                    The include_facets parameter must be set to "true" for facets to be returned.</param>
		/// <param name="facet_max_count">Specifies the maximum number of facets to return per type. Default is 300.</param>
		/// <param name="fields">Specifies fields to return. Defaults to 'summary_set'. NOTE: Bytes, height, and width returned by 'download_sizes' field are estimates.</param>
		/// <param name="image_url">Specifies the location of the image to use in the search.</param>
		/// <param name="include_facets">Specifies whether or not to include facets in the result set. Default is "false".</param>
		/// <param name="page">Request results starting at a page number (default is 1).</param>
		/// <param name="page_size">Request number of images to return in each page. Default is 30, maximum page_size is 100.</param>
		/// <param name="product_types">Filter images to those from one of your product types. 
		///                    Allowed values are easyaccess, imagepack, premiumaccess and royaltyfreesubscription. 
		///                    If you have more than one instance of a product, you may also include the ID of the product instance you wish to filter on. 
		///                    For example, some users may have more than one premiumaccess product, so the product_types value would be premiumaccess:1234. 
		///                    Product ID can be obtained from the GET /products response.</param>
		/// <returns>Success</returns>
		public async Task<SearchByImageResourceResults> V3SearchImagesCreativeBy_imageGetByAsset_idAndExclude_editorial_use_onlyAndFacet_fieldsAndFacet_max_countAndFieldsAndImage_urlAndInclude_facetsAndPageAndPage_sizeAndProduct_typesAsync(string asset_id, bool exclude_editorial_use_only, CreateImageSearchFacetsFields[] facet_fields, int facet_max_count, CreativeImagesFieldValues[] fields, string image_url, bool include_facets, int page, int page_size, string[] product_types, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/search/images/creative/by-image?asset_id=" + (asset_id==null? "" : System.Uri.EscapeDataString(asset_id))+"&exclude_editorial_use_only="+exclude_editorial_use_only+"&"+string.Join("&", facet_fields.Select(z => $"facet_fields={z}"))+"&facet_max_count="+facet_max_count+"&"+string.Join("&", fields.Select(z => $"fields={z}"))+"&image_url=" + (image_url==null? "" : System.Uri.EscapeDataString(image_url))+"&include_facets="+include_facets+"&page="+page+"&page_size="+page_size+"&"+string.Join("&", product_types.Select(z => $"product_types={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchByImageResourceResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search for editorial images only
		/// Use this endpoint to search our editorial stock photos, illustrations and archival images.  Editorial images represent newsworthy events or illustrate matters of general interest, such as news, sport and entertainment and are generally intended for editorial use.
		/// 
		/// You'll need an API key and access token to use this resource.
		/// 
		/// You can show different information in the response by specifying values on the "fields" parameter (see details below).
		/// You can search with only an API key, and that will give you search results that are equivalent to doing a search on the GettyImages.com site without being logged in (anonymous search).  If you are a Getty Images API customer and would like to ensure that your API searches return only assets that you have a license to use, you need to also include an authorization token in the header of your request.  Please consult our [Authorization FAQ](http://developers.gettyimages.com/en/authorization-faq.html) for more information on authorization tokens, and our [Authorization Workflows](https://github.com/gettyimages/gettyimages-api/blob/master/OAuth2Workflow.md) for code examples of getting a token.
		/// To include your API token in the search request, add it to the headers as a Bearer token (example in curl):
		/// 
		/// -H "Authorization: Bearer <your-token>"
		/// 
		/// Search requests without a phrase parameter are not supported and may not always work.
		/// 
		/// ## Working with Fields Sets
		/// 
		/// Fields sets are used in the **fields** request parameter to receive a suite of metadata fields. The following fields sets are available:
		/// 
		/// #### Summary Fields Set
		/// 
		/// The **summary_set** query string parameter fields value represents a small batch of metadata fields that are often used to build search response results. The following fields are provided for every image in your result set when you include **summary_set** in your request.
		/// 
		/// ```
		/// {
		/// "images":
		/// [
		/// "asset_family",
		/// "caption",
		/// "collection_code",
		/// "collection_id",
		/// "collection_name",
		/// "display_sizes":
		/// [
		/// {
		/// "name": "thumb"
		/// }
		/// ],
		/// "license_model",
		/// "max_dimensions",
		/// "title"
		/// ]
		/// }
		/// ```
		/// 
		/// #### Detail Fields Set
		/// 
		/// The **detail_set** query string parameter fields value represents a large batch of metadata fields that are often used to build a detailed view of images. The following fields are provided for every image in your result set when you include **detail_set** in your request.
		/// 
		/// ```
		/// {
		/// "images":
		/// [
		/// "allowed_use",
		/// "artist",
		/// "asset_family",
		/// "call_for_image",
		/// "caption",
		/// "collection_code",
		/// "collection_id",
		/// "collection_name",
		/// "copyright",
		/// "date_created",
		/// "display_sizes":
		/// [
		/// {
		/// "name": "comp"
		/// },
		/// {
		/// "name": "preview"
		/// },
		/// {
		/// "name": "thumb"
		/// }
		/// ],
		/// "editorial_segments",
		/// "event_ids",
		/// "graphical_style",
		/// "license_model",
		/// "max_dimensions",
		/// "orientation",
		/// "product_types",
		/// "quality_rank",
		/// "referral_destinations",
		/// "title"
		/// ]
		/// ]
		/// ```
		/// 
		/// #### Display Fields Set
		/// 
		/// The **display_set** query string parameter fields value represents the fields that provide you with URLs for the low resolution files that are most frequently used to build a UI displaying search results. The following fields are provided for every image in your result set when you include **display_set** in your request.
		/// 
		/// The URI provided is subject to change at any time and must be used as-is with no modification.
		/// 
		/// ```
		/// {
		/// "images":
		/// [
		/// "display_sizes":
		/// [
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "comp",
		/// "uri": "<link>"
		/// },
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "preview",
		/// "uri": "<link>"
		/// },
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "thumb",
		/// "uri": "<link>"
		/// }
		/// ]
		/// ]
		/// }
		/// ```
		/// V3SearchImagesEditorialGetByAge_of_peopleAndArtistsAndCollection_codesAndCollections_filter_typeAndCompositionsAndDate_fromAndDate_toAndDownload_productAndEditorial_segmentsAndEmbed_content_onlyAndEthnicityAndEvent_idsAndExclude_keyword_idsAndFieldsAndFile_typesAndGraphical_stylesAndGraphical_styles_filter_typeAndInclude_related_searchesAndKeyword_idsAndMinimum_sizeAndNumber_of_peopleAndOrientationsAndPageAndPage_sizeAndPhraseAndSort_orderAndSpecific_peopleAndMinimum_quality_rankAndFacet_fieldsAndInclude_facetsAndFacet_max_count v3/search/images/editorial
		/// </summary>
		/// <param name="age_of_people">Filter based on the age of individuals in an image.</param>
		/// <param name="artists">Search for images by specific artists (free-text, comma-separated list of artists).</param>
		/// <param name="collection_codes">Filter by collections (comma-separated list of collection codes). Include or exclude based on collections_filter_type.</param>
		/// <param name="collections_filter_type">Use to include or exclude collections from search. The default is include</param>
		/// <param name="compositions">Filter based on image composition.</param>
		/// <param name="date_from">Return only images that are created on or after this date. Use ISO 8601 format (e.g., 1999-12-31).</param>
		/// <param name="date_to">Return only images that are created on or before this date. Use ISO 8601 format (e.g., 1999-12-31).</param>
		/// <param name="download_product">Filters based on which product the asset will download against.
		///                    Allowed values are easyaccess, editorialsubscription, imagepack, premiumaccess and royaltyfreesubscription.
		///                    If you have more than one instance of a product, you may also include the ID of the product instance you wish to filter on. 
		///                    For example, some users may have more than one premiumaccess product, so the download_product value would be premiumaccess:1234. 
		///                    Product ID can be obtained from the GET /products response.</param>
		/// <param name="editorial_segments">Return only events with a matching editorial segment.</param>
		/// <param name="embed_content_only">Restrict search results to embeddable images. The default is false.</param>
		/// <param name="ethnicity">Filter search results based on the ethnicity of individuals in an image.</param>
		/// <param name="event_ids">Filter based on specific events</param>
		/// <param name="exclude_keyword_ids">Return only images not tagged with specific keyword(s). Specify using a comma-separated list of keyword Ids. If keyword Ids and phrase are both specified, only those images matching the query phrase which also do not contain the requested keyword(s) are returned.</param>
		/// <param name="fields">Specifies fields to return. Defaults to 'summary_set'. NOTE: Bytes, height, and width returned by 'download_sizes' field are estimates.</param>
		/// <param name="file_types">Return only images having a specific file type.</param>
		/// <param name="graphical_styles">Filter based on graphical style of the image.</param>
		/// <param name="graphical_styles_filter_type">Provides searching based on specified graphical style(s). The default is include.</param>
		/// <param name="include_related_searches">Specifies whether or not to include related searches in the response. The default is false.</param>
		/// <param name="keyword_ids">Return only images tagged with specific keyword(s). Specify using a comma-separated list of keyword Ids. If keyword Ids and phrase are both specified, only those images matching the query phrase which also contain the requested keyword(s) are returned.</param>
		/// <param name="minimum_size">Filter based on minimum size requested. The default is x-small.</param>
		/// <param name="number_of_people">Filter based on the number of people in the image.</param>
		/// <param name="orientations">Return only images with selected aspect ratios.</param>
		/// <param name="page">Request results starting at a page number (default is 1).</param>
		/// <param name="page_size">Request number of images to return in each page. Default is 30, maximum page_size is 100.</param>
		/// <param name="phrase">Search images using a search phrase.</param>
		/// <param name="sort_order">Select sort order of results.  The default is best_match</param>
		/// <param name="specific_people">Return only images associated with specific people (using a comma-delimited list).</param>
		/// <param name="minimum_quality_rank">Filter search results based on minimum quality ranking. Possible values 1, 2, 3 with 1 being best.</param>
		/// <param name="facet_fields">Specifies the facets to return in the response. Facets provide additional search parameters to refine your results.
		///                   The include_facets parameter must be set to "true" for facets to be returned.</param>
		/// <param name="include_facets">Specifies whether or not to include facets in the result set. Default is "false".</param>
		/// <param name="facet_max_count">Specifies the maximum number of facets to return per type. Default is 300.</param>
		/// <returns>OK</returns>
		public async Task<EditorialImageSearchResults> V3SearchImagesEditorialGetByAge_of_peopleAndArtistsAndCollection_codesAndCollections_filter_typeAndCompositionsAndDate_fromAndDate_toAndDownload_productAndEditorial_segmentsAndEmbed_content_onlyAndEthnicityAndEvent_idsAndExclude_keyword_idsAndFieldsAndFile_typesAndGraphical_stylesAndGraphical_styles_filter_typeAndInclude_related_searchesAndKeyword_idsAndMinimum_sizeAndNumber_of_peopleAndOrientationsAndPageAndPage_sizeAndPhraseAndSort_orderAndSpecific_peopleAndMinimum_quality_rankAndFacet_fieldsAndInclude_facetsAndFacet_max_countAsync(
					AgeOfPeopleFilterType[] age_of_people, 
					string artists, 
					string[] collection_codes, 
					CollectionsFilterType collections_filter_type, 
					CompositionsFilterType[] compositions, 
					System.DateTimeOffset date_from, 
					System.DateTimeOffset date_to, 
					string download_product, 
					EditorialSegmentContract[] editorial_segments, 
					bool embed_content_only, 
					EthnicityFilterType[] ethnicity, 
					int[] event_ids, 
					int[] exclude_keyword_ids, 
					EditorialImagesFieldValues[] fields, 
					SearchFileType[] file_types, 
					EditorialGraphicalStyle[] graphical_styles, 
					CollectionsFilterType graphical_styles_filter_type, 
					bool include_related_searches, 
					int[] keyword_ids, 
					TeeShirtSize minimum_size, 
					NumberOfPeopleFilterType[] number_of_people, 
					ImageOrientationRequest[] orientations, 
					int page, 
					int page_size, 
					string phrase, 
					SortOrder sort_order, 
					string[] specific_people, 
					int minimum_quality_rank, 
					EditorialImageSearchFacetsFields[] facet_fields, 
					bool include_facets, 
					int facet_max_count, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/search/images/editorial?"+string.Join("&", age_of_people.Select(z => $"age_of_people={z}"))+"&artists=" + (artists==null? "" : System.Uri.EscapeDataString(artists))+"&"+string.Join("&", collection_codes.Select(z => $"collection_codes={System.Uri.EscapeDataString(z.ToString())}"))+"&collections_filter_type=" + collections_filter_type+"&"+string.Join("&", compositions.Select(z => $"compositions={z}"))+"&date_from=" + date_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&date_to=" + date_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&download_product=" + (download_product==null? "" : System.Uri.EscapeDataString(download_product))+"&"+string.Join("&", editorial_segments.Select(z => $"editorial_segments={z}"))+"&embed_content_only="+embed_content_only+"&"+string.Join("&", ethnicity.Select(z => $"ethnicity={z}"))+"&"+string.Join("&", event_ids.Select(z => $"event_ids={z}"))+"&"+string.Join("&", exclude_keyword_ids.Select(z => $"exclude_keyword_ids={z}"))+"&"+string.Join("&", fields.Select(z => $"fields={z}"))+"&"+string.Join("&", file_types.Select(z => $"file_types={z}"))+"&"+string.Join("&", graphical_styles.Select(z => $"graphical_styles={z}"))+"&graphical_styles_filter_type=" + graphical_styles_filter_type+"&include_related_searches="+include_related_searches+"&"+string.Join("&", keyword_ids.Select(z => $"keyword_ids={z}"))+"&minimum_size=" + minimum_size+"&"+string.Join("&", number_of_people.Select(z => $"number_of_people={z}"))+"&"+string.Join("&", orientations.Select(z => $"orientations={z}"))+"&page="+page+"&page_size="+page_size+"&phrase=" + (phrase==null? "" : System.Uri.EscapeDataString(phrase))+"&sort_order=" + sort_order+"&"+string.Join("&", specific_people.Select(z => $"specific_people={System.Uri.EscapeDataString(z.ToString())}"))+"&minimum_quality_rank="+minimum_quality_rank+"&"+string.Join("&", facet_fields.Select(z => $"facet_fields={z}"))+"&include_facets="+include_facets+"&facet_max_count="+facet_max_count;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EditorialImageSearchResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search for creative videos
		/// Use this endpoint to search premium stock video, from archival film to contemporary 4K and HD footage.
		/// 
		/// You'll need an API key and access token to use this resource.
		/// 
		/// You can show different information in the response by specifying values on the "fields" parameter (see details below).
		/// You can search with only an API key, and that will give you search results that are equivalent to doing a search on the GettyImages.com site without
		/// being logged in (anonymous search).  If you are a Getty Images API customer and would like to ensure that your API searches return only
		/// assets that you have a license to use, you need to also include an authorization token in the header of your request.
		/// Please consult our [Authorization FAQ](http://developers.gettyimages.com/en/authorization-faq.html) for more information on authorization tokens.
		/// 
		/// Search requests without a phrase parameter are not supported and may not always work.
		/// 
		/// ## Working with Fields Sets
		/// 
		/// Fields sets are used in the **fields** request parameter to receive a suite of metadata fields. The following fields sets are available:
		/// 
		/// #### Summary Fields Set
		/// 
		/// The **summary_set** query string parameter fields value represents a small batch of metadata fields that are often used to build search
		/// response results. The following fields are provided for every video in your result set when you include **summary_set** in your request.
		/// 
		/// ```
		/// {
		/// "videos":
		/// [
		/// "asset_family",
		/// "caption",
		/// "collection_code",
		/// "collection_name",
		/// "display_sizes":
		/// [
		/// {
		/// "name": "comp"
		/// },
		/// {
		/// "name": "preview"
		/// },
		/// {
		/// "name": "thumb"
		/// }
		/// ],
		/// "license_model",
		/// "title"
		/// ]
		/// }
		/// ```
		/// 
		/// #### Detail Fields Set
		/// 
		/// The **detail_set** query string parameter fields value represents a large batch of metadata fields that are often used to build a
		/// detailed view of videos. The following fields are provided for every video in your result set when you include **detail_set** in your request.
		/// 
		/// ```
		/// {
		/// "videos":
		/// [
		/// "allowed_use",
		/// "artist",
		/// "asset_family",
		/// "call_for_image",
		/// "caption",
		/// "clip_length",
		/// "collection_code",
		/// "collection_id",
		/// "collection_name",
		/// "color_type",
		/// "copyright",
		/// "date_created",
		/// "display_sizes":
		/// [
		/// {
		/// "name": "comp"
		/// },
		/// {
		/// "name": "preview"
		/// },
		/// {
		/// "name": "thumb"
		/// }
		/// ],
		/// "era",
		/// "license_model",
		/// "mastered_to",
		/// "originally_shot_on",
		/// "product_types",
		/// "quality_rank",
		/// "shot_speed",
		/// "source",
		/// "title"
		/// ]
		/// }
		/// ```
		/// 
		/// #### Display Fields Set
		/// 
		/// The **display_set** query string parameter fields value represents the fields that provide you with URLs for the low resolution files
		/// that are most frequently used to build a UI displaying search results. The following fields are provided for every video in your result
		/// set when you include **display_set** in your request.
		/// 
		/// The URI provided is subject to change at any time and must be used as-is with no modification.
		/// 
		/// ```
		/// {
		/// "videos":
		/// [
		/// "display_sizes":
		/// [
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "comp",
		/// "uri": "<link>"
		/// },
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "preview",
		/// "uri": "<link>"
		/// },
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "thumb",
		/// "uri": "<link>"
		/// }
		/// ]
		/// ]
		/// }
		/// ```
		/// V3SearchVideosCreativeGetByAge_of_peopleAndArtistsAndAspect_ratiosAndCollection_codesAndCollections_filter_typeAndCompositionsAndDownload_productAndExclude_nudityAndExclude_editorial_use_onlyAndExclude_keyword_idsAndFieldsAndFormat_availableAndFrame_ratesAndImage_techniquesAndInclude_related_searchesAndKeyword_idsAndLicense_modelsAndOrientationsAndMin_clip_lengthAndMax_clip_lengthAndPageAndPage_sizeAndPhraseAndSafe_searchAndSort_orderAndRelease_statusAndFacet_fieldsAndFacet_max_countAndInclude_facetsAndViewpoints v3/search/videos/creative
		/// </summary>
		/// <param name="age_of_people">Provides filtering according to the age of individuals in a video.</param>
		/// <param name="artists">Search for videos by specific artists (free-text, comma-separated list of artists).</param>
		/// <param name="aspect_ratios">Search for videos by specific aspect ratios.</param>
		/// <param name="collection_codes">Provides filtering by collection code.</param>
		/// <param name="collections_filter_type">Use to include or exclude collections from search. The default is include</param>
		/// <param name="compositions">Filter based on video composition.</param>
		/// <param name="download_product">Filters based on which product the asset will download against.
		///                    Allowed values are easyaccess, editorialsubscription, imagepack, premiumaccess and royaltyfreesubscription.
		///                    If you have more than one instance of a product, you may also include the ID of the product instance you wish to filter on. 
		///                    For example, some users may have more than one premiumaccess product, so the download_product value would be premiumaccess:1234. 
		///                    Product ID can be obtained from the GET /products response.</param>
		/// <param name="exclude_nudity">Excludes videos containing nudity. The default is false.</param>
		/// <param name="exclude_editorial_use_only">Exclude videos that are only available for editorial (non-commercial) use. Default value is false.</param>
		/// <param name="exclude_keyword_ids">Return only videos not tagged with specific keyword(s). Specify using a comma-separated list of keyword Ids. If keyword Ids and phrase are both specified, only those videos matching the query phrase which also do not contain the requested keyword(s) are returned.</param>
		/// <param name="fields">Specifies fields to return. Defaults to 'summary_set'. NOTE: Bytes returned by 'download_sizes' field is an estimate.</param>
		/// <param name="format_available">Filters according to the digital video format available on a film asset.</param>
		/// <param name="frame_rates">Provides filtering by video frame rate (frames/second).</param>
		/// <param name="image_techniques">Filter based on image technique.</param>
		/// <param name="include_related_searches">Specifies whether or not to include related searches in the response. The default is false.</param>
		/// <param name="keyword_ids">Return only videos tagged with specific keyword(s). Specify using a comma-separated list of keyword Ids. If keyword Ids and phrase are both specified, only those videos matching the query phrase which also contain the requested keyword(s) are returned.</param>
		/// <param name="license_models">Specifies the video licensing model(s).</param>
		/// <param name="orientations">Return only videos with selected orientations.</param>
		/// <param name="min_clip_length">Provides filtering by minimum length of video clip, in seconds</param>
		/// <param name="max_clip_length">Provides filtering by maximum length of video, in seconds</param>
		/// <param name="page">Identifies page to return. Default is 1.</param>
		/// <param name="page_size">Specifies page size. Default is 30, maximum page_size is 100.</param>
		/// <param name="phrase">Free-text search query.</param>
		/// <param name="safe_search">Setting safe_search to "true" excludes images containing nudity, death, profanity, drugs and alcohol, suggestive content, and graphic content from the result set. The default is false. Because this is a keyword-based filter, it's possible that a small number of unsafe images may not be caught by the filter. Please direct feedback to your Getty Images Account or API support representative.</param>
		/// <param name="sort_order">Select sort order of results.  The default is best_match</param>
		/// <param name="release_status">Allows filtering by type of model release.</param>
		/// <param name="facet_fields">Specifies the facets to return in the response. Facets provide additional search parameters to refine your results.
		///                   The include_facets parameter must be set to "true" for facets to be returned.</param>
		/// <param name="facet_max_count">Specifies the maximum number of facets to return per type. Default is 300.</param>
		/// <param name="include_facets">Specifies whether or not to include facets in the result set. Default is "false".</param>
		/// <param name="viewpoints">Filter based on viewpoint.</param>
		/// <returns>OK</returns>
		public async Task<CreativeVideoSearchResults> V3SearchVideosCreativeGetByAge_of_peopleAndArtistsAndAspect_ratiosAndCollection_codesAndCollections_filter_typeAndCompositionsAndDownload_productAndExclude_nudityAndExclude_editorial_use_onlyAndExclude_keyword_idsAndFieldsAndFormat_availableAndFrame_ratesAndImage_techniquesAndInclude_related_searchesAndKeyword_idsAndLicense_modelsAndOrientationsAndMin_clip_lengthAndMax_clip_lengthAndPageAndPage_sizeAndPhraseAndSafe_searchAndSort_orderAndRelease_statusAndFacet_fieldsAndFacet_max_countAndInclude_facetsAndViewpointsAsync(
					AgeOfPeopleFilterType[] age_of_people, 
					string artists, 
					VideoAspectRatioFilterType[] aspect_ratios, 
					string[] collection_codes, 
					CollectionsFilterType collections_filter_type, 
					CompositionsFilterType[] compositions, 
					string download_product, 
					bool exclude_nudity, 
					bool exclude_editorial_use_only, 
					int[] exclude_keyword_ids, 
					CreativeVideosFieldValues[] fields, 
					VideoFormatsRequest format_available, 
					VideoFrameRates[] frame_rates, 
					ImageTechniquesFilterType[] image_techniques, 
					bool include_related_searches, 
					int[] keyword_ids, 
					LicenseModelVideoRequest[] license_models, 
					VideoOrientationRequest[] orientations, 
					int min_clip_length, 
					int max_clip_length, 
					int page, 
					int page_size, 
					string phrase, 
					bool safe_search, 
					BlendedImageSortOrder sort_order, 
					ReleaseStatus release_status, 
					CreateVideoSearchFacetsFields[] facet_fields, 
					int facet_max_count, 
					bool include_facets, 
					ViewpointsFilterType[] viewpoints, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/search/videos/creative?"+string.Join("&", age_of_people.Select(z => $"age_of_people={z}"))+"&artists=" + (artists==null? "" : System.Uri.EscapeDataString(artists))+"&"+string.Join("&", aspect_ratios.Select(z => $"aspect_ratios={z}"))+"&"+string.Join("&", collection_codes.Select(z => $"collection_codes={System.Uri.EscapeDataString(z.ToString())}"))+"&collections_filter_type=" + collections_filter_type+"&"+string.Join("&", compositions.Select(z => $"compositions={z}"))+"&download_product=" + (download_product==null? "" : System.Uri.EscapeDataString(download_product))+"&exclude_nudity="+exclude_nudity+"&exclude_editorial_use_only="+exclude_editorial_use_only+"&"+string.Join("&", exclude_keyword_ids.Select(z => $"exclude_keyword_ids={z}"))+"&"+string.Join("&", fields.Select(z => $"fields={z}"))+"&format_available=" + format_available+"&"+string.Join("&", frame_rates.Select(z => $"frame_rates={z}"))+"&"+string.Join("&", image_techniques.Select(z => $"image_techniques={z}"))+"&include_related_searches="+include_related_searches+"&"+string.Join("&", keyword_ids.Select(z => $"keyword_ids={z}"))+"&"+string.Join("&", license_models.Select(z => $"license_models={z}"))+"&"+string.Join("&", orientations.Select(z => $"orientations={z}"))+"&min_clip_length="+min_clip_length+"&max_clip_length="+max_clip_length+"&page="+page+"&page_size="+page_size+"&phrase=" + (phrase==null? "" : System.Uri.EscapeDataString(phrase))+"&safe_search="+safe_search+"&sort_order=" + sort_order+"&release_status=" + release_status+"&"+string.Join("&", facet_fields.Select(z => $"facet_fields={z}"))+"&facet_max_count="+facet_max_count+"&include_facets="+include_facets+"&"+string.Join("&", viewpoints.Select(z => $"viewpoints={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreativeVideoSearchResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search for creative videos based on url
		/// Search for **similar creative videos** by passing an `image_url` to an uploaded image/frame grab from a video OR an `asset_id` of an asset in our catalog.  All responses will have the `exclude_nudity` filter automatically applied.
		/// 
		/// ## Searching by URL
		/// 
		/// Before calling the search by image endpoint, an image or frame grab in JPEG format must be uploaded to `https://api.gettyimages.com/v3/search/by-image/uploads/{CLIENT_IMAGE.jpg}`, where the client defines the `{CLIENT_IMAGE.jpg}` portion of the URL.
		/// 
		/// For example, using cURL:
		/// 
		/// ``` sh
		/// curl -i -X PUT https://api.gettyimages.com/v3/search/by-image/uploads/my-test-image.jpg -H 'Content-Type: image/jpeg' -H 'Api-Key: API_KEY' --data-binary "@testimage.jpg"
		/// ```
		/// 
		/// Once the image has been uploaded, use the full URL in the `image_url` parameter, e.g. `image_url=https://api.gettyimages.com/v3/search/by-image/uploads/my-test-image.jpg`.
		/// 
		/// - Uploaded files must be 10MB or smaller
		/// - Uploads to the same URL will overwrite each other, so ensure that the client application is handling naming uniqueness appropriately.
		/// - Uploads expire after 24 hours.
		/// - Uploads and searches must be performed using the _same_ API Key.
		/// 
		/// ## Searching by asset id
		/// 
		/// When searching by `asset_id`, any image or video asset id in the Getty/iStock catalog can be used as the source for similar videos.
		/// 
		/// V3SearchVideosCreativeBy_imageGetByAsset_idAndExclude_editorial_use_onlyAndFacet_fieldsAndFacet_max_countAndFieldsAndImage_urlAndInclude_facetsAndPageAndPage_sizeAndProduct_types v3/search/videos/creative/by-image
		/// </summary>
		/// <param name="asset_id">Specifies the Getty video id to use in the search.</param>
		/// <param name="exclude_editorial_use_only">Exclude videos that are only available for editorial (non-commercial) use. Default value is false.</param>
		/// <param name="facet_fields">Specifies the facets to return in the response. Facets provide additional search parameters to refine your results.
		///                    The include_facets parameter must be set to "true" for facets to be returned.</param>
		/// <param name="facet_max_count">Specifies the maximum number of facets to return per type. Default is 300.</param>
		/// <param name="fields">Specifies fields to return. Defaults to 'summary_set'. NOTE: Bytes returned by 'download_sizes' field is an estimate.</param>
		/// <param name="image_url">Specifies the location of the image to use in the search.</param>
		/// <param name="include_facets">Specifies whether or not to include facets in the result set. Default is "false".</param>
		/// <param name="page">Request results starting at a page number (default is 1).</param>
		/// <param name="page_size">Request number of images to return in each page. Default is 30, maximum page_size is 100.</param>
		/// <param name="product_types">Filter images to those from one of your product types. 
		///                    Allowed values are easyaccess, imagepack, premiumaccess and royaltyfreesubscription. 
		///                    If you have more than one instance of a product, you may also include the ID of the product instance you wish to filter on. 
		///                    For example, some users may have more than one premiumaccess product, so the product_types value would be premiumaccess:1234. 
		///                    Product ID can be obtained from the GET /products response.</param>
		/// <returns>Success</returns>
		public async Task<CreativeVideoSearchResults> V3SearchVideosCreativeBy_imageGetByAsset_idAndExclude_editorial_use_onlyAndFacet_fieldsAndFacet_max_countAndFieldsAndImage_urlAndInclude_facetsAndPageAndPage_sizeAndProduct_typesAsync(string asset_id, bool exclude_editorial_use_only, CreateVideoSearchFacetsFields[] facet_fields, int facet_max_count, CreativeVideosFieldValues[] fields, string image_url, bool include_facets, int page, int page_size, string[] product_types, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/search/videos/creative/by-image?asset_id=" + (asset_id==null? "" : System.Uri.EscapeDataString(asset_id))+"&exclude_editorial_use_only="+exclude_editorial_use_only+"&"+string.Join("&", facet_fields.Select(z => $"facet_fields={z}"))+"&facet_max_count="+facet_max_count+"&"+string.Join("&", fields.Select(z => $"fields={z}"))+"&image_url=" + (image_url==null? "" : System.Uri.EscapeDataString(image_url))+"&include_facets="+include_facets+"&page="+page+"&page_size="+page_size+"&"+string.Join("&", product_types.Select(z => $"product_types={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreativeVideoSearchResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search for editorial videos
		/// Use this endpoint to search current and archival video clips of celebrities, newsmakers, and events.
		/// 
		/// You'll need an API key and access token to use this resource.
		/// 
		/// You can show different information in the response by specifying values on the "fields" parameter (see details below).
		/// You can search with only an API key, and that will give you search results that are equivalent to doing a search on the GettyImages.com site without being logged in (anonymous search).  If you are a Getty Images API customer and would like to ensure that your API searches return only assets that you have a license to use, you need to also include an authorization token in the header of your request.  Please consult our [Authorization FAQ](http://developers.gettyimages.com/en/authorization-faq.html) for more information on authorization tokens, and our [Authorization Workflows](https://github.com/gettyimages/gettyimages-api/blob/master/OAuth2Workflow.md) for code examples of getting a token.
		/// 
		/// Search requests without a phrase parameter are not supported and may not always work.
		/// 
		/// ## Working with Fields Sets
		/// 
		/// Fields sets are used in the **fields** request parameter to receive a suite of metadata fields. The following fields sets are available:
		/// 
		/// #### Summary Fields Set
		/// 
		/// The **summary_set** query string parameter fields value represents a small batch of metadata fields that are often used to build search response results. The following fields are provided for every video in your result set when you include **summary_set** in your request.
		/// 
		/// ```
		/// {
		/// "videos":
		/// [
		/// "asset_family",
		/// "caption",
		/// "collection_code",
		/// "collection_name",
		/// "display_sizes":
		/// [
		/// {
		/// "name": "comp"
		/// },
		/// {
		/// "name": "preview"
		/// },
		/// {
		/// "name": "thumb"
		/// }
		/// ],
		/// "license_model",
		/// "title"
		/// ]
		/// }
		/// ```
		/// 
		/// #### Detail Fields Set
		/// 
		/// The **detail_set** query string parameter fields value represents a large batch of metadata fields that are often used to build a detailed view of videos. The following fields are provided for every video in your result set when you include **detail_set** in your request.
		/// 
		/// ```
		/// {
		/// "videos":
		/// [
		/// "allowed_use",
		/// "artist",
		/// "asset_family",
		/// "call_for_image",
		/// "caption",
		/// "clip_length",
		/// "collection_code",
		/// "collection_id",
		/// "collection_name",
		/// "color_type",
		/// "copyright",
		/// "date_created",
		/// "display_sizes":
		/// [
		/// {
		/// "name": "comp"
		/// },
		/// {
		/// "name": "preview"
		/// },
		/// {
		/// "name": "thumb"
		/// }
		/// ],
		/// "era",
		/// "event_ids",
		/// "license_model",
		/// "mastered_to",
		/// "originally_shot_on",
		/// "product_types",
		/// "quality_rank",
		/// "shot_speed",
		/// "source",
		/// "title"
		/// ]
		/// }
		/// ```
		/// 
		/// #### Display Fields Set
		/// 
		/// The **display_set** query string parameter fields value represents the fields that provide you with URLs for the low resolution files that are most frequently used to build a UI displaying search results. The following fields are provided for every video in your result set when you include **display_set** in your request.
		/// 
		/// The URI provided is subject to change at any time and must be used as-is with no modification.
		/// 
		/// ```
		/// {
		/// "videos":
		/// [
		/// "display_sizes":
		/// [
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "comp",
		/// "uri": "<link>"
		/// },
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "preview",
		/// "uri": "<link>"
		/// },
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "thumb",
		/// "uri": "<link>"
		/// }
		/// ]
		/// ]
		/// }
		/// ```
		/// V3SearchVideosEditorialGetByAge_of_peopleAndArtistsAndAspect_ratiosAndCollection_codesAndCollections_filter_typeAndCompositionsAndDate_fromAndDate_toAndDownload_productAndEditorial_video_typesAndFieldsAndFormat_availableAndFrame_ratesAndImage_techniquesAndInclude_related_searchesAndKeyword_idsAndMin_clip_lengthAndMax_clip_lengthAndOrientationsAndPageAndPage_sizeAndPhraseAndSort_orderAndSpecific_peopleAndRelease_statusAndFacet_fieldsAndInclude_facetsAndFacet_max_countAndViewpoints v3/search/videos/editorial
		/// </summary>
		/// <param name="age_of_people">Provides filtering according to the age of individuals in a video.</param>
		/// <param name="artists">Search for videos by specific artists (free-text, comma-separated list of artists).</param>
		/// <param name="aspect_ratios">Search for videos by specific aspect ratios.</param>
		/// <param name="collection_codes">Provides filtering by collection code.</param>
		/// <param name="collections_filter_type">Use to include or exclude collections from search. The default is include</param>
		/// <param name="compositions">Filter based on video composition.</param>
		/// <param name="date_from">Return only images that are created on or after this date. Use ISO 8601 format (e.g., 1999-12-31).</param>
		/// <param name="date_to">Return only images that are created on or before this date. Use ISO 8601 format (e.g., 1999-12-31).</param>
		/// <param name="download_product">Filters based on which product the asset will download against.
		///                    Allowed values are easyaccess, editorialsubscription, imagepack, premiumaccess and royaltyfreesubscription.
		///                    If you have more than one instance of a product, you may also include the ID of the product instance you wish to filter on. 
		///                    For example, some users may have more than one premiumaccess product, so the download_product value would be premiumaccess:1234. 
		///                    Product ID can be obtained from the GET /products response.</param>
		/// <param name="editorial_video_types">Allows filtering by types of video.</param>
		/// <param name="fields">Specifies fields to return. Defaults to 'summary_set'. NOTE: Bytes returned by 'download_sizes' field is an estimate.</param>
		/// <param name="format_available">Filters according to the digital video format available on a film asset.</param>
		/// <param name="frame_rates">Provides filtering by video frame rate (frames/second).</param>
		/// <param name="image_techniques">Filter based on image technique.</param>
		/// <param name="include_related_searches">Specifies whether or not to include related searches in the response. The default is false.</param>
		/// <param name="keyword_ids">Return only videos tagged with specific keyword(s). Specify using a comma-separated list of keyword Ids. If keyword Ids and phrase are both specified, only those videos matching the query phrase which also contain the requested keyword(s) are returned.</param>
		/// <param name="min_clip_length">Provides filtering by minimum length of video clip, in seconds</param>
		/// <param name="max_clip_length">Provides filtering by maximum length of video clip, in seconds</param>
		/// <param name="orientations">Return only videos with selected orientations.</param>
		/// <param name="page">Identifies page to return. Default is 1.</param>
		/// <param name="page_size">Specifies page size. Default is 30, maximum page_size is 100.</param>
		/// <param name="phrase">Free-text search query.</param>
		/// <param name="sort_order">Select sort order of results.  The default is best_match</param>
		/// <param name="specific_people">Allows filtering by specific peoples' names.</param>
		/// <param name="release_status">Allows filtering by type of model release.</param>
		/// <param name="facet_fields">Specifies the facets to return in the response. Facets provide additional search parameters to refine your results.
		///                   The include_facets parameter must be set to "true" for facets to be returned.</param>
		/// <param name="include_facets">Specifies whether or not to include facets in the result set. Default is "false".</param>
		/// <param name="facet_max_count">Specifies the maximum number of facets to return per type. Default is 300.</param>
		/// <param name="viewpoints">Filter based on viewpoint.</param>
		/// <returns>OK</returns>
		public async Task<EditorialVideoSearchResults> V3SearchVideosEditorialGetByAge_of_peopleAndArtistsAndAspect_ratiosAndCollection_codesAndCollections_filter_typeAndCompositionsAndDate_fromAndDate_toAndDownload_productAndEditorial_video_typesAndFieldsAndFormat_availableAndFrame_ratesAndImage_techniquesAndInclude_related_searchesAndKeyword_idsAndMin_clip_lengthAndMax_clip_lengthAndOrientationsAndPageAndPage_sizeAndPhraseAndSort_orderAndSpecific_peopleAndRelease_statusAndFacet_fieldsAndInclude_facetsAndFacet_max_countAndViewpointsAsync(
					AgeOfPeopleFilterType[] age_of_people, 
					string artists, 
					VideoAspectRatioFilterType[] aspect_ratios, 
					string[] collection_codes, 
					CollectionsFilterType collections_filter_type, 
					CompositionsFilterType[] compositions, 
					System.DateTimeOffset date_from, 
					System.DateTimeOffset date_to, 
					string download_product, 
					EditorialVideoType[] editorial_video_types, 
					EditorialVideosFieldValues[] fields, 
					VideoFormatsRequest format_available, 
					VideoFrameRates[] frame_rates, 
					ImageTechniquesFilterType[] image_techniques, 
					bool include_related_searches, 
					int[] keyword_ids, 
					int min_clip_length, 
					int max_clip_length, 
					VideoOrientationRequest[] orientations, 
					int page, 
					int page_size, 
					string phrase, 
					SortOrder sort_order, 
					string[] specific_people, 
					ReleaseStatus release_status, 
					EditorialVideoSearchFacetsFields[] facet_fields, 
					bool include_facets, 
					int facet_max_count, 
					ViewpointsFilterType[] viewpoints, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/search/videos/editorial?"+string.Join("&", age_of_people.Select(z => $"age_of_people={z}"))+"&artists=" + (artists==null? "" : System.Uri.EscapeDataString(artists))+"&"+string.Join("&", aspect_ratios.Select(z => $"aspect_ratios={z}"))+"&"+string.Join("&", collection_codes.Select(z => $"collection_codes={System.Uri.EscapeDataString(z.ToString())}"))+"&collections_filter_type=" + collections_filter_type+"&"+string.Join("&", compositions.Select(z => $"compositions={z}"))+"&date_from=" + date_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&date_to=" + date_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&download_product=" + (download_product==null? "" : System.Uri.EscapeDataString(download_product))+"&"+string.Join("&", editorial_video_types.Select(z => $"editorial_video_types={z}"))+"&"+string.Join("&", fields.Select(z => $"fields={z}"))+"&format_available=" + format_available+"&"+string.Join("&", frame_rates.Select(z => $"frame_rates={z}"))+"&"+string.Join("&", image_techniques.Select(z => $"image_techniques={z}"))+"&include_related_searches="+include_related_searches+"&"+string.Join("&", keyword_ids.Select(z => $"keyword_ids={z}"))+"&min_clip_length="+min_clip_length+"&max_clip_length="+max_clip_length+"&"+string.Join("&", orientations.Select(z => $"orientations={z}"))+"&page="+page+"&page_size="+page_size+"&phrase=" + (phrase==null? "" : System.Uri.EscapeDataString(phrase))+"&sort_order=" + sort_order+"&"+string.Join("&", specific_people.Select(z => $"specific_people={System.Uri.EscapeDataString(z.ToString())}"))+"&release_status=" + release_status+"&"+string.Join("&", facet_fields.Select(z => $"facet_fields={z}"))+"&include_facets="+include_facets+"&facet_max_count="+facet_max_count+"&"+string.Join("&", viewpoints.Select(z => $"viewpoints={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EditorialVideoSearchResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Report usage of assets via a batch format.
		/// # Report Usage
		/// 
		/// Use this endpoint to report the usages of a set of assets. The count of assets submitted in a single batch to this endpoint is limited to 1000. Note that all asset Ids specified must be valid or the operation will fail causing no usages to be recorded. In this case, you will need to remove the invalid asset Ids from the query request and re-submit the query.
		/// 
		/// ##  Quickstart
		/// 
		/// You'll need an API key and a [Resource Owner Grant](http://developers.gettyimages.com/en/authorization-faq.html) access token to use this resource.
		/// Please see our [Getting Started](http://developers.gettyimages.com/en/getting-started.html) page for more information on how to sign up for an API key.
		/// 
		/// _Note_: Date of use can be in any unambiguous date format.
		/// 
		/// V3Usage_batches_idPut v3/usage-batches/{id}
		/// </summary>
		/// <param name="id">Specifies a unique batch transaction id to identify the report.</param>
		/// <param name="requestBody">Specifies up to 1000 sets of asset Id, usage count, and date of use to submit usages for. 
		///            Note that all asset Ids specified must be valid or the operation will fail causing no usages to be recorded. 
		///            All dates must be on or before this date and the format should be ISO 8601 (ex: YYYY-MM-DD), time is not needed.</param>
		public async Task V3Usage_batches_idPutAsync(string id, Report_usage_batch_request requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/usage-batches/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get metadata for multiple videos by supplying multiple video ids
		/// Use this endpoint to return detailed video metadata for all the specified video ids.
		/// 
		/// You'll need an API key and access token to use this resource.
		/// 
		/// You can show different information in the response by specifying values on the "fields" parameter (see details below).
		/// You can search with only an API key, and that will give you search results that are equivalent to doing a search on the GettyImages.com site without being logged in (anonymous search).  If you are a Getty Images API customer and would like to ensure that your API searches return only assets that you have a license to use, you need to also include an authorization token in the header of your request.  Please consult our [Authorization FAQ](http://developers.gettyimages.com/en/authorization-faq.html) for more information on authorization tokens, and our [Authorization Workflows](https://github.com/gettyimages/gettyimages-api/blob/master/OAuth2Workflow.md) for code examples of getting a token.
		/// 
		/// ## Working with Fields Sets
		/// 
		/// Fields sets are used in the **fields** request parameter to receive a suite of metadata fields. The following fields sets are available:
		/// 
		/// #### Summary Fields Set
		/// 
		/// The **summary_set** query string parameter fields value represents a small batch of metadata fields that are often used to build search response results. The following fields are provided for every video in your result set when you include **summary_set** in your request.
		/// 
		/// ```
		/// {
		/// "videos":
		/// [
		/// "asset_family",
		/// "caption",
		/// "collection_code",
		/// "collection_name",
		/// "display_sizes":
		/// [
		/// {
		/// "name": "comp"
		/// },
		/// {
		/// "name": "preview"
		/// },
		/// {
		/// "name": "thumb"
		/// }
		/// ],
		/// "license_model",
		/// "title"
		/// ]
		/// }
		/// ```
		/// 
		/// #### Detail Fields Set
		/// 
		/// The **detail_set** query string parameter fields value represents a large batch of metadata fields that are often used to build a detailed view of videos. The following fields are provided for every video in your result set when you include **detail_set** in your request.
		/// 
		/// ```
		/// {
		/// "videos":
		/// [
		/// "allowed_use",
		/// "artist",
		/// "asset_family",
		/// "call_for_image",
		/// "caption",
		/// "clip_length",
		/// "collection_code",
		/// "collection_id",
		/// "collection_name",
		/// "color_type",
		/// "copyright",
		/// "date_created",
		/// "display_sizes":
		/// [
		/// {
		/// "name": "comp"
		/// },
		/// {
		/// "name": "preview"
		/// },
		/// {
		/// "name": "thumb"
		/// }
		/// ],
		/// "download_sizes",
		/// "era",
		/// "event_ids",
		/// "license_model",
		/// "mastered_to",
		/// "originally_shot_on",
		/// "product_types",
		/// "quality_rank",
		/// "shot_speed",
		/// "source",
		/// "title"
		/// ]
		/// }
		/// ```
		/// 
		/// #### Display Fields Set
		/// 
		/// The **display_set** query string parameter fields value represents the fields that provide you with URLs for the low resolution files that are most frequently used to build a UI displaying search results. The following fields are provided for every video in your result set when you include **display_set** in your request.
		/// 
		/// The URI provided is subject to change at any time and must be used as-is with no modification.
		/// 
		/// ```
		/// {
		/// "videos":
		/// [
		/// {
		/// "display_sizes":
		/// [
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "comp",
		/// "uri": "<link>"
		/// },
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "preview",
		/// "uri": "<link>"
		/// },
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "thumb",
		/// "uri": "<link>"
		/// }
		/// ],
		/// "key_frames": [
		/// {
		/// "uri": "<link>"
		/// },
		/// {
		/// "uri": "<link>"
		/// },
		/// {
		/// "uri": "<link>"
		/// },
		/// {
		/// "uri": "<link>"
		/// },
		/// {
		/// "uri": "<link>"
		/// }
		/// ]
		/// }
		/// ]
		/// }
		/// ```
		/// 
		/// ## Request Usage Considerations
		/// 
		/// - Specifying the "entity_details" response field can have significant performance implications. The field should be used only when necessary.
		/// 
		/// V3VideosGetByIdsAndFields v3/videos
		/// </summary>
		/// <param name="ids">Specifies one or more video ids to return. Use comma delimiter when requesting multiple ids.  Maximum of 100 ids.</param>
		/// <param name="fields">Specifies fields to return. Defaults to 'summary_set'. NOTE: Bytes returned by 'download_sizes' field is an estimate.</param>
		/// <returns>OK</returns>
		public async Task V3VideosGetByIdsAndFieldsAsync(string[] ids, VideoDetailFieldValues[] fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/videos?"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", fields.Select(z => $"fields={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get metadata for a single video by supplying one video id
		/// Use this endpoint to return detailed video metadata for the specified video id.
		/// 
		/// You'll need an API key and access token to use this resource.
		/// 
		/// You can show different information in the response by specifying values on the "fields" parameter (see details below).
		/// You can search with only an API key, and that will give you search results that are equivalent to doing a search on the GettyImages.com site without being logged in (anonymous search).  If you are a Getty Images API customer and would like to ensure that your API searches return only assets that you have a license to use, you need to also include an authorization token in the header of your request.  Please consult our [Authorization FAQ](http://developers.gettyimages.com/en/authorization-faq.html) for more information on authorization tokens, and our [Authorization Workflows](https://github.com/gettyimages/gettyimages-api/blob/master/OAuth2Workflow.md) for code examples of getting a token.
		/// 
		/// ## Working with Fields Sets
		/// 
		/// Fields sets are used in the **fields** request parameter to receive a suite of metadata fields. The following fields sets are available:
		/// 
		/// #### Summary Fields Set
		/// 
		/// The **summary_set** query string parameter fields value represents a small batch of metadata fields that are often used to build search response results. The following fields are provided for every video in your result set when you include **summary_set** in your request.
		/// 
		/// ```
		/// {
		/// "videos":
		/// [
		/// "asset_family",
		/// "caption",
		/// "collection_code",
		/// "collection_name",
		/// "display_sizes":
		/// [
		/// {
		/// "name": "comp"
		/// },
		/// {
		/// "name": "preview"
		/// },
		/// {
		/// "name": "thumb"
		/// }
		/// ],
		/// "license_model",
		/// "title"
		/// ]
		/// }
		/// ```
		/// 
		/// #### Detail Fields Set
		/// 
		/// The **detail_set** query string parameter fields value represents a large batch of metadata fields that are often used to build a detailed view of videos. The following fields are provided for every video in your result set when you include **detail_set** in your request.
		/// 
		/// ```
		/// {
		/// "videos":
		/// [
		/// "allowed_use",
		/// "artist",
		/// "asset_family",
		/// "call_for_image",
		/// "caption",
		/// "clip_length",
		/// "collection_code",
		/// "collection_id",
		/// "collection_name",
		/// "color_type",
		/// "copyright",
		/// "date_created",
		/// "display_sizes":
		/// [
		/// {
		/// "name": "comp"
		/// },
		/// {
		/// "name": "preview"
		/// },
		/// {
		/// "name": "thumb"
		/// }
		/// ],
		/// "download_sizes",
		/// "era",
		/// "event_ids",
		/// "license_model",
		/// "mastered_to",
		/// "originally_shot_on",
		/// "product_types",
		/// "quality_rank",
		/// "shot_speed",
		/// "source",
		/// "title"
		/// ]
		/// }
		/// ```
		/// 
		/// #### Display Fields Set
		/// 
		/// The **display_set** query string parameter fields value represents the fields that provide you with URLs for the low resolution files that are most frequently used to build a UI displaying search results. The following fields are provided for every video in your result set when you include **display_set** in your request.
		/// 
		/// The URI provided is subject to change at any time and must be used as-is with no modification.
		/// 
		/// ```
		/// {
		/// "display_sizes": [
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "comp",
		/// "uri": "<link>"
		/// },
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "preview",
		/// "uri": "<link>"
		/// },
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "thumb",
		/// "uri": "<link>"
		/// }
		/// ],
		/// "key_frames": [
		/// {
		/// "uri": "<link>"
		/// },
		/// {
		/// "uri": "<link>"
		/// },
		/// {
		/// "uri": "<link>"
		/// },
		/// {
		/// "uri": "<link>"
		/// },
		/// {
		/// "uri": "<link>"
		/// }
		/// ]
		/// }
		/// ```
		/// 
		/// ## Request Usage Considerations
		/// 
		/// - Specifying the "entity_details" response field can have significant performance implications. The field should be used only when necessary.
		/// 
		/// V3Videos_idGetByFields v3/videos/{id}
		/// </summary>
		/// <param name="id">A video id. For more than one video please use the /v3/video endpoint.</param>
		/// <param name="fields">Specifies fields to return. Defaults to 'summary_set'. NOTE: Bytes returned by 'download_sizes' field is an estimate.</param>
		/// <returns>OK</returns>
		public async Task V3Videos_idGetByFieldsAsync(string id, VideoDetailFieldValues[] fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/videos/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&"+string.Join("&", fields.Select(z => $"fields={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a customer's download history for a specific asset
		/// V3Videos_idDownloadhistoryGetByCompany_downloads v3/videos/{id}/downloadhistory
		/// </summary>
		/// <param name="id">A video id.</param>
		/// <param name="company_downloads">If specified, returns the list of previously downloaded videos for all users in your company.
		///            Your account must be enabled for this functionality. Contact your Getty Images account rep for more information. Default is false.</param>
		/// <returns>OK</returns>
		public async Task<AssetDownloadHistoryResults> V3Videos_idDownloadhistoryGetByCompany_downloadsAsync(string id, bool company_downloads, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/videos/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/downloadhistory&company_downloads="+company_downloads;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssetDownloadHistoryResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve creative videos from the same series
		/// This endpoint will provide the list of videos, if any exist, from the same series as the specified creative asset id. These images are typically from the same photo shoot. This functionality will not work for editorial assets.
		/// 
		/// You'll need an API key and access token to use this resource.
		/// 
		/// ## Working with Fields Sets
		/// 
		/// Fields sets are used in the **fields** request parameter to receive a suite of metadata fields. The following fields sets are available:
		/// 
		/// #### Summary Fields Set
		/// 
		/// The **summary_set** query string parameter fields value represents a small batch of metadata fields that are often used to build search response results. The following fields are provided for every video in your result set when you include **summary_set** in your request.
		/// 
		/// ```
		/// {
		/// "videos":
		/// [
		/// "asset_family",
		/// "caption",
		/// "collection_code",
		/// "collection_name",
		/// "display_sizes":
		/// [
		/// {
		/// "name": "comp"
		/// },
		/// {
		/// "name": "preview"
		/// },
		/// {
		/// "name": "thumb"
		/// }
		/// ],
		/// "license_model",
		/// "title"
		/// ]
		/// }
		/// ```
		/// 
		/// #### Detail Fields Set
		/// 
		/// The **detail_set** query string parameter fields value represents a large batch of metadata fields that are often used to build a detailed view of videos. The following fields are provided for every video in your result set when you include **detail_set** in your request.
		/// 
		/// ```
		/// {
		/// "videos":
		/// [
		/// "allowed_use",
		/// "artist",
		/// "asset_family",
		/// "call_for_image",
		/// "caption",
		/// "clip_length",
		/// "collection_code",
		/// "collection_id",
		/// "collection_name",
		/// "color_type",
		/// "copyright",
		/// "date_created",
		/// "display_sizes":
		/// [
		/// {
		/// "name": "comp"
		/// },
		/// {
		/// "name": "preview"
		/// },
		/// {
		/// "name": "thumb"
		/// }
		/// ],
		/// "download_sizes",
		/// "era",
		/// "license_model",
		/// "mastered_to",
		/// "originally_shot_on",
		/// "product_types",
		/// "quality_rank",
		/// "shot_speed",
		/// "source",
		/// "title"
		/// ]
		/// }
		/// ```
		/// 
		/// #### Display Fields Set
		/// 
		/// The **display_set** query string parameter fields value represents the fields that provide you with URLs for the low resolution files that are most frequently used to build a UI displaying search results. The following fields are provided for every video in your result set when you include **display_set** in your request.
		/// 
		/// The URI provided is subject to change at any time and must be used as-is with no modification.
		/// 
		/// ```
		/// {
		/// "videos":
		/// [
		/// "display_sizes":
		/// [
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "comp",
		/// "uri": "<link>"
		/// },
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "preview",
		/// "uri": "<link>"
		/// },
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "thumb",
		/// "uri": "<link>"
		/// }
		/// ]
		/// ]
		/// }
		/// ```
		/// 
		/// V3Videos_idSame_seriesGetByFieldsAndPageAndPage_size v3/videos/{id}/same-series
		/// </summary>
		/// <param name="id">Identifies an existing video</param>
		/// <param name="fields">Specifies fields to return. Defaults to 'summary_set'. NOTE: Bytes returned by 'download_sizes' field is an estimate.</param>
		/// <param name="page">Identifies page to return. Default is 1.</param>
		/// <param name="page_size">Specifies page size. Default is 30, maximum page_size is 100.</param>
		/// <returns>OK</returns>
		public async Task V3Videos_idSame_seriesGetByFieldsAndPageAndPage_sizeAsync(string id, AssociatedVideoDetailFieldValues[] fields, int page, int page_size, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/videos/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/same-series&"+string.Join("&", fields.Select(z => $"fields={z}"))+"&page="+page+"&page_size="+page_size;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve similar videos
		/// This endpoint will provide a list of videos that are similar to the specified asset id.
		/// 
		/// You'll need an API key and access token to use this resource.
		/// 
		/// ## Working with Fields Sets
		/// 
		/// Fields sets are used in the **fields** request parameter to receive a suite of metadata fields. The following fields sets are available:
		/// 
		/// #### Summary Fields Set
		/// 
		/// The **summary_set** query string parameter fields value represents a small batch of metadata fields that are often used to build search response results. The following fields are provided for every video in your result set when you include **summary_set** in your request.
		/// 
		/// ```
		/// {
		/// "videos":
		/// [
		/// "asset_family",
		/// "caption",
		/// "collection_code",
		/// "collection_name",
		/// "display_sizes":
		/// [
		/// {
		/// "name": "comp"
		/// },
		/// {
		/// "name": "preview"
		/// },
		/// {
		/// "name": "thumb"
		/// }
		/// ],
		/// "license_model",
		/// "title"
		/// ]
		/// }
		/// ```
		/// 
		/// #### Detail Fields Set
		/// 
		/// The **detail_set** query string parameter fields value represents a large batch of metadata fields that are often used to build a detailed view of videos. The following fields are provided for every video in your result set when you include **detail_set** in your request.
		/// 
		/// ```
		/// {
		/// "videos":
		/// [
		/// "allowed_use",
		/// "artist",
		/// "asset_family",
		/// "call_for_image",
		/// "caption",
		/// "clip_length",
		/// "collection_code",
		/// "collection_id",
		/// "collection_name",
		/// "color_type",
		/// "copyright",
		/// "date_created",
		/// "display_sizes":
		/// [
		/// {
		/// "name": "comp"
		/// },
		/// {
		/// "name": "preview"
		/// },
		/// {
		/// "name": "thumb"
		/// }
		/// ],
		/// "download_sizes",
		/// "era",
		/// "event_ids",
		/// "license_model",
		/// "mastered_to",
		/// "originally_shot_on",
		/// "product_types",
		/// "quality_rank",
		/// "shot_speed",
		/// "source",
		/// "title"
		/// ]
		/// }
		/// ```
		/// 
		/// #### Display Fields Set
		/// 
		/// The **display_set** query string parameter fields value represents the fields that provide you with URLs for the low resolution files that are most frequently used to build a UI displaying search results. The following fields are provided for every video in your result set when you include **display_set** in your request.
		/// 
		/// The URI provided is subject to change at any time and must be used as-is with no modification.
		/// 
		/// ```
		/// {
		/// "videos":
		/// [
		/// "display_sizes":
		/// [
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "comp",
		/// "uri": "<link>"
		/// },
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "preview",
		/// "uri": "<link>"
		/// },
		/// {
		/// "is_watermarked": <boolean>,
		/// "name": "thumb",
		/// "uri": "<link>"
		/// }
		/// ]
		/// ]
		/// }
		/// ```
		/// V3Videos_idSimilarGetByFieldsAndPageAndPage_size v3/videos/{id}/similar
		/// </summary>
		/// <param name="id">A video id.</param>
		/// <param name="fields">Specifies fields to return. Defaults to 'summary_set'. NOTE: Bytes returned by 'download_sizes' field is an estimate.</param>
		/// <param name="page">Identifies page to return. Default is 1.</param>
		/// <param name="page_size">Specifies page size. Default is 30, maximum page_size is 100.</param>
		/// <returns>OK</returns>
		public async Task V3Videos_idSimilarGetByFieldsAndPageAndPage_sizeAsync(string id, AssociatedVideoDetailFieldValues[] fields, int page, int page_size, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/videos/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/similar&"+string.Join("&", fields.Select(z => $"fields={z}"))+"&page="+page+"&page_size="+page_size;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
