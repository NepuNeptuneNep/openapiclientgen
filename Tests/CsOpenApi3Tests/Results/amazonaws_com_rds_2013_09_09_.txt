//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddSourceIdentifierToSubscriptionResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EventSubscription EventSubscription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventSubscription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerAwsId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustSubscriptionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnsTopicArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionCreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SourceIdsList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] EventCategoriesList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tag
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBInstanceNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBSnapshotNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthorizeDBSecurityGroupIngressResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DBSecurityGroup DBSecurityGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBSecurityGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSecurityGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSecurityGroupDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] EC2SecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] IPRanges { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBSecurityGroupNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidDBSecurityGroupStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthorizationAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthorizationQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CopyDBSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DBSnapshot DBSnapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBSnapshot
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> SnapshotCreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AllocatedStorage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> InstanceCreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MasterUsername { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LicenseModel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Iops { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptionGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PercentProgress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceRegion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBSnapshotAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidDBSnapshotStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SnapshotQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDBInstanceResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DBInstance DBInstance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBInstance
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MasterUsername { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Endpoint Endpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AllocatedStorage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> InstanceCreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredBackupWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BackupRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DBSecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] VpcSecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DBParameterGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DBSubnetGroup DBSubnetGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PendingModifiedValues PendingModifiedValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LatestRestorableTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> MultiAZ { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoMinorVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReadReplicaSourceDBInstanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ReadReplicaDBInstanceIdentifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LicenseModel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Iops { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] OptionGroupMemberships { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CharacterSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SecondaryAvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] StatusInfos { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Endpoint
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBSubnetGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetGroupStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Subnets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PendingModifiedValues
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AllocatedStorage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MasterUserPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BackupRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> MultiAZ { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Iops { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBInstanceAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InsufficientDBInstanceCapacityFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBParameterGroupNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StorageQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBSubnetGroupNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBSubnetGroupDoesNotCoverEnoughAZs
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidSubnet
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidVPCNetworkStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProvisionedIopsNotAvailableInAZFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OptionGroupNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDBInstanceReadReplicaResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DBInstance DBInstance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidDBInstanceStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBSubnetGroupNotAllowedFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidDBSubnetGroupFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDBParameterGroupResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DBParameterGroup DBParameterGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBParameterGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBParameterGroupQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBParameterGroupAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDBSecurityGroupResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DBSecurityGroup DBSecurityGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBSecurityGroupAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBSecurityGroupQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBSecurityGroupNotSupportedFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDBSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DBSnapshot DBSnapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDBSubnetGroupResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DBSubnetGroup DBSubnetGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBSubnetGroupAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBSubnetGroupQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBSubnetQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateEventSubscriptionResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EventSubscription EventSubscription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventSubscriptionQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionAlreadyExistFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SNSInvalidTopicFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SNSNoAuthorizationFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SNSTopicArnNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionCategoryNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateOptionGroupResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OptionGroup OptionGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OptionGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OptionGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptionGroupDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MajorEngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Options { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowsVpcAndNonVpcInstanceMemberships { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OptionGroupAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OptionGroupQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDBInstanceResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DBInstance DBInstance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidDBParameterGroupStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDBSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DBSnapshot DBSnapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidDBSubnetGroupStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidDBSubnetStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteEventSubscriptionResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EventSubscription EventSubscription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidEventSubscriptionStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidOptionGroupStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBEngineVersionMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DBEngineVersions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Filter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBInstanceMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DBInstances { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDBLogFilesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DescribeDBLogFiles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBParameterGroupsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DBParameterGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBParameterGroupDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBSecurityGroupMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DBSecurityGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBSnapshotMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DBSnapshots { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBSubnetGroupMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DBSubnetGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeEngineDefaultParametersResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EngineDefaults EngineDefaults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EngineDefaults
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventCategoriesMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] EventCategoriesMapList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventSubscriptionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] EventSubscriptionsList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Events { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OptionGroupOptionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] OptionGroupOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OptionGroups
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] OptionGroupsList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderableDBInstanceOptionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] OrderableDBInstanceOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReservedDBInstanceMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ReservedDBInstances { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReservedDBInstanceNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReservedDBInstancesOfferingMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ReservedDBInstancesOfferings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReservedDBInstancesOfferingNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DownloadDBLogFilePortionDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LogFileData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AdditionalDataPending { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBLogFileNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagListMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TagList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyDBInstanceResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DBInstance DBInstance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBUpgradeDependencyFailureFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBParameterGroupNameMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Parameter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApplyType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AllowedValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsModifiable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MinimumEngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<ParameterApplyMethod> ApplyMethod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ParameterApplyMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="immediate")]
		immediate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending-reboot")]
		pendingMinusreboot = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyDBSubnetGroupResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DBSubnetGroup DBSubnetGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubnetAlreadyInUse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyEventSubscriptionResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EventSubscription EventSubscription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyOptionGroupResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OptionGroup OptionGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OptionConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OptionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DBSecurityGroupMemberships { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] VpcSecurityGroupMemberships { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] OptionSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PromoteReadReplicaResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DBInstance DBInstance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PurchaseReservedDBInstancesOfferingResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ReservedDBInstance ReservedDBInstance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReservedDBInstance
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedDBInstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedDBInstancesOfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FixedPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> UsagePrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DBInstanceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OfferingType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> MultiAZ { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] RecurringCharges { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReservedDBInstanceAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReservedDBInstanceQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RebootDBInstanceResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DBInstance DBInstance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveSourceIdentifierFromSubscriptionResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EventSubscription EventSubscription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RestoreDBInstanceFromDBSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DBInstance DBInstance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidRestoreFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RestoreDBInstanceToPointInTimeResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DBInstance DBInstance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PointInTimeRestoreNotEnabledFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RevokeDBSecurityGroupIngressResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DBSecurityGroup DBSecurityGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthorizationNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddSourceIdentifierToSubscriptionMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddTagsToResourceMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ApplyMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="immediate")]
		immediate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending-reboot")]
		pendingMinusreboot = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthorizeDBSecurityGroupIngressMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBSecurityGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CIDRIP { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EC2SecurityGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EC2SecurityGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EC2SecurityGroupOwnerId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AvailabilityZone
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ProvisionedIopsCapable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CharacterSet
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CharacterSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CharacterSetDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CopyDBSnapshotMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceDBSnapshotIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetDBSnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDBInstanceMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int AllocatedStorage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceClass { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MasterUsername { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MasterUserPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DBSecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] VpcSecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BackupRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredBackupWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> MultiAZ { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoMinorVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LicenseModel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Iops { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptionGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CharacterSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDBInstanceReadReplicaMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceDBInstanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoMinorVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Iops { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptionGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDBParameterGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupFamily { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDBSecurityGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBSecurityGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBSecurityGroupDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDBSnapshotMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBSnapshotIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDBSubnetGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateEventSubscriptionMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnsTopicArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] EventCategories { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SourceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateOptionGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OptionGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EngineName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MajorEngineVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OptionGroupDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBEngineVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBEngineDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBEngineVersionDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CharacterSet DefaultCharacterSet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SupportedCharacterSets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBInstanceStatusInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Normal { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBParameterGroupStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterApplyStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBSecurityGroupMembership
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSecurityGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDBInstanceMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SkipFinalSnapshot { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FinalDBSnapshotIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDBParameterGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDBSecurityGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBSecurityGroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDBSnapshotMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBSnapshotIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDBSubnetGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteEventSubscriptionMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteOptionGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OptionGroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDBEngineVersionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DefaultOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ListSupportedCharacterSets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDBInstancesMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDBLogFilesDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LogFileName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LastWritten { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Size { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDBLogFilesMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FilenameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FileLastWritten { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FileSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDBParameterGroupsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDBParametersMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDBSecurityGroupsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSecurityGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDBSnapshotsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDBSubnetGroupsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeEngineDefaultParametersMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeEventCategoriesMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Filters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeEventSubscriptionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="db-instance")]
		dbMinusinstance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="db-parameter-group")]
		dbMinusparameterMinusgroup = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="db-security-group")]
		dbMinussecurityMinusgroup = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="db-snapshot")]
		dbMinussnapshot = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeEventsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<DescribeEventsMessageSourceType> SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] EventCategories { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DescribeEventsMessageSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="db-instance")]
		dbMinusinstance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="db-parameter-group")]
		dbMinusparameterMinusgroup = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="db-security-group")]
		dbMinussecurityMinusgroup = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="db-snapshot")]
		dbMinussnapshot = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeOptionGroupOptionsMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EngineName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MajorEngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeOptionGroupsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OptionGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MajorEngineVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeOrderableDBInstanceOptionsMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LicenseModel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Vpc { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeReservedDBInstancesMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedDBInstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedDBInstancesOfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OfferingType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> MultiAZ { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeReservedDBInstancesOfferingsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedDBInstancesOfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OfferingType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> MultiAZ { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DownloadDBLogFilePortionMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LogFileName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfLines { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EC2SecurityGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EC2SecurityGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EC2SecurityGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EC2SecurityGroupOwnerId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Event
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<EventSourceType> SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] EventCategories { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EventSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="db-instance")]
		dbMinusinstance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="db-parameter-group")]
		dbMinusparameterMinusgroup = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="db-security-group")]
		dbMinussecurityMinusgroup = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="db-snapshot")]
		dbMinussnapshot = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventCategoriesMap
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] EventCategories { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IPRange
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CIDRIP { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Filters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyDBInstanceMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AllocatedStorage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DBSecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] VpcSecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApplyImmediately { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MasterUserPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BackupRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredBackupWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> MultiAZ { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowMajorVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoMinorVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Iops { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptionGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NewDBInstanceIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyDBParameterGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyDBSubnetGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyEventSubscriptionMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnsTopicArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] EventCategories { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyOptionGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OptionGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] OptionsToInclude { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] OptionsToRemove { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApplyImmediately { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Option
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OptionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptionDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Persistent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Permanent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] OptionSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DBSecurityGroupMemberships { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] VpcSecurityGroupMemberships { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OptionGroupMembership
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OptionGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OptionGroupOption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MajorEngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MinimumRequiredMinorEngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PortRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DefaultPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] OptionsDependedOn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Persistent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Permanent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] OptionGroupOptionSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OptionGroupOptionSetting
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SettingName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SettingDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApplyType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AllowedValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsModifiable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OptionSetting
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApplyType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AllowedValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsModifiable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsCollection { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderableDBInstanceOption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LicenseModel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> MultiAZCapable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReadReplicaCapable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Vpc { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PromoteReadReplicaMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BackupRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredBackupWindow { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PurchaseReservedDBInstancesOfferingMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReservedDBInstancesOfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedDBInstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DBInstanceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RebootDBInstanceMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ForceFailover { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecurringCharge
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> RecurringChargeAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecurringChargeFrequency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveSourceIdentifierFromSubscriptionMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveTagsFromResourceMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReservedDBInstancesOffering
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedDBInstancesOfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FixedPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> UsagePrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OfferingType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> MultiAZ { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] RecurringCharges { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResetDBParameterGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ResetAllParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RestoreDBInstanceFromDBSnapshotMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBSnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> MultiAZ { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoMinorVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LicenseModel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Iops { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptionGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RestoreDBInstanceToPointInTimeMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceDBInstanceIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetDBInstanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RestoreTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UseLatestRestorableTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> MultiAZ { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoMinorVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LicenseModel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Iops { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptionGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RevokeDBSecurityGroupIngressMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBSecurityGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CIDRIP { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EC2SecurityGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EC2SecurityGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EC2SecurityGroupOwnerId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Subnet
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AvailabilityZone SubnetAvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VpcSecurityGroupMembership
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcSecurityGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// GET_AddSourceIdentifierToSubscription #Action=AddSourceIdentifierToSubscription
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_AddSourceIdentifierToSubscriptionAsync(string SubscriptionName, string SourceIdentifier, GET_AddSourceIdentifierToSubscriptionAction Action, GET_AddSourceIdentifierToSubscriptionVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AddSourceIdentifierToSubscription?SubscriptionName=" + (SubscriptionName==null? "" : System.Uri.EscapeDataString(SubscriptionName))+"&SourceIdentifier=" + (SourceIdentifier==null? "" : System.Uri.EscapeDataString(SourceIdentifier))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_AddTagsToResource #Action=AddTagsToResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_AddTagsToResourceAsync(string ResourceName, string[] Tags, GET_AddTagsToResourceAction Action, GET_AddTagsToResourceVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AddTagsToResource?ResourceName=" + (ResourceName==null? "" : System.Uri.EscapeDataString(ResourceName))+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_AuthorizeDBSecurityGroupIngress #Action=AuthorizeDBSecurityGroupIngress
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_AuthorizeDBSecurityGroupIngressAsync(string DBSecurityGroupName, string CIDRIP, string EC2SecurityGroupName, string EC2SecurityGroupId, string EC2SecurityGroupOwnerId, GET_AuthorizeDBSecurityGroupIngressAction Action, GET_AuthorizeDBSecurityGroupIngressVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AuthorizeDBSecurityGroupIngress?DBSecurityGroupName=" + (DBSecurityGroupName==null? "" : System.Uri.EscapeDataString(DBSecurityGroupName))+"&CIDRIP=" + (CIDRIP==null? "" : System.Uri.EscapeDataString(CIDRIP))+"&EC2SecurityGroupName=" + (EC2SecurityGroupName==null? "" : System.Uri.EscapeDataString(EC2SecurityGroupName))+"&EC2SecurityGroupId=" + (EC2SecurityGroupId==null? "" : System.Uri.EscapeDataString(EC2SecurityGroupId))+"&EC2SecurityGroupOwnerId=" + (EC2SecurityGroupOwnerId==null? "" : System.Uri.EscapeDataString(EC2SecurityGroupOwnerId))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_CopyDBSnapshot #Action=CopyDBSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_CopyDBSnapshotAsync(string SourceDBSnapshotIdentifier, string TargetDBSnapshotIdentifier, string[] Tags, GET_CopyDBSnapshotAction Action, GET_CopyDBSnapshotVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CopyDBSnapshot?SourceDBSnapshotIdentifier=" + (SourceDBSnapshotIdentifier==null? "" : System.Uri.EscapeDataString(SourceDBSnapshotIdentifier))+"&TargetDBSnapshotIdentifier=" + (TargetDBSnapshotIdentifier==null? "" : System.Uri.EscapeDataString(TargetDBSnapshotIdentifier))+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_CreateDBInstance #Action=CreateDBInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_CreateDBInstanceAsync(
					string DBName, 
					string DBInstanceIdentifier, 
					int AllocatedStorage, 
					string DBInstanceClass, 
					string Engine, 
					string MasterUsername, 
					string MasterUserPassword, 
					string[] DBSecurityGroups, 
					string[] VpcSecurityGroupIds, 
					string AvailabilityZone, 
					string DBSubnetGroupName, 
					string PreferredMaintenanceWindow, 
					string DBParameterGroupName, 
					int BackupRetentionPeriod, 
					string PreferredBackupWindow, 
					int Port, 
					bool MultiAZ, 
					string EngineVersion, 
					bool AutoMinorVersionUpgrade, 
					string LicenseModel, 
					int Iops, 
					string OptionGroupName, 
					string CharacterSetName, 
					bool PubliclyAccessible, 
					string[] Tags, 
					GET_CreateDBInstanceAction Action, 
					GET_CreateDBInstanceVersion Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateDBInstance?DBName=" + (DBName==null? "" : System.Uri.EscapeDataString(DBName))+"&DBInstanceIdentifier=" + (DBInstanceIdentifier==null? "" : System.Uri.EscapeDataString(DBInstanceIdentifier))+"&AllocatedStorage="+AllocatedStorage+"&DBInstanceClass=" + (DBInstanceClass==null? "" : System.Uri.EscapeDataString(DBInstanceClass))+"&Engine=" + (Engine==null? "" : System.Uri.EscapeDataString(Engine))+"&MasterUsername=" + (MasterUsername==null? "" : System.Uri.EscapeDataString(MasterUsername))+"&MasterUserPassword=" + (MasterUserPassword==null? "" : System.Uri.EscapeDataString(MasterUserPassword))+"&"+string.Join("&", DBSecurityGroups.Select(z => $"DBSecurityGroups={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", VpcSecurityGroupIds.Select(z => $"VpcSecurityGroupIds={System.Uri.EscapeDataString(z.ToString())}"))+"&AvailabilityZone=" + (AvailabilityZone==null? "" : System.Uri.EscapeDataString(AvailabilityZone))+"&DBSubnetGroupName=" + (DBSubnetGroupName==null? "" : System.Uri.EscapeDataString(DBSubnetGroupName))+"&PreferredMaintenanceWindow=" + (PreferredMaintenanceWindow==null? "" : System.Uri.EscapeDataString(PreferredMaintenanceWindow))+"&DBParameterGroupName=" + (DBParameterGroupName==null? "" : System.Uri.EscapeDataString(DBParameterGroupName))+"&BackupRetentionPeriod="+BackupRetentionPeriod+"&PreferredBackupWindow=" + (PreferredBackupWindow==null? "" : System.Uri.EscapeDataString(PreferredBackupWindow))+"&Port="+Port+"&MultiAZ="+MultiAZ+"&EngineVersion=" + (EngineVersion==null? "" : System.Uri.EscapeDataString(EngineVersion))+"&AutoMinorVersionUpgrade="+AutoMinorVersionUpgrade+"&LicenseModel=" + (LicenseModel==null? "" : System.Uri.EscapeDataString(LicenseModel))+"&Iops="+Iops+"&OptionGroupName=" + (OptionGroupName==null? "" : System.Uri.EscapeDataString(OptionGroupName))+"&CharacterSetName=" + (CharacterSetName==null? "" : System.Uri.EscapeDataString(CharacterSetName))+"&PubliclyAccessible="+PubliclyAccessible+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_CreateDBInstanceReadReplica #Action=CreateDBInstanceReadReplica
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_CreateDBInstanceReadReplicaAsync(string DBInstanceIdentifier, string SourceDBInstanceIdentifier, string DBInstanceClass, string AvailabilityZone, int Port, bool AutoMinorVersionUpgrade, int Iops, string OptionGroupName, bool PubliclyAccessible, string[] Tags, string DBSubnetGroupName, GET_CreateDBInstanceReadReplicaAction Action, GET_CreateDBInstanceReadReplicaVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateDBInstanceReadReplica?DBInstanceIdentifier=" + (DBInstanceIdentifier==null? "" : System.Uri.EscapeDataString(DBInstanceIdentifier))+"&SourceDBInstanceIdentifier=" + (SourceDBInstanceIdentifier==null? "" : System.Uri.EscapeDataString(SourceDBInstanceIdentifier))+"&DBInstanceClass=" + (DBInstanceClass==null? "" : System.Uri.EscapeDataString(DBInstanceClass))+"&AvailabilityZone=" + (AvailabilityZone==null? "" : System.Uri.EscapeDataString(AvailabilityZone))+"&Port="+Port+"&AutoMinorVersionUpgrade="+AutoMinorVersionUpgrade+"&Iops="+Iops+"&OptionGroupName=" + (OptionGroupName==null? "" : System.Uri.EscapeDataString(OptionGroupName))+"&PubliclyAccessible="+PubliclyAccessible+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&DBSubnetGroupName=" + (DBSubnetGroupName==null? "" : System.Uri.EscapeDataString(DBSubnetGroupName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_CreateDBParameterGroup #Action=CreateDBParameterGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_CreateDBParameterGroupAsync(string DBParameterGroupName, string DBParameterGroupFamily, string Description, string[] Tags, GET_CreateDBParameterGroupAction Action, GET_CreateDBParameterGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateDBParameterGroup?DBParameterGroupName=" + (DBParameterGroupName==null? "" : System.Uri.EscapeDataString(DBParameterGroupName))+"&DBParameterGroupFamily=" + (DBParameterGroupFamily==null? "" : System.Uri.EscapeDataString(DBParameterGroupFamily))+"&Description=" + (Description==null? "" : System.Uri.EscapeDataString(Description))+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_CreateDBSecurityGroup #Action=CreateDBSecurityGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_CreateDBSecurityGroupAsync(string DBSecurityGroupName, string DBSecurityGroupDescription, string[] Tags, GET_CreateDBSecurityGroupAction Action, GET_CreateDBSecurityGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateDBSecurityGroup?DBSecurityGroupName=" + (DBSecurityGroupName==null? "" : System.Uri.EscapeDataString(DBSecurityGroupName))+"&DBSecurityGroupDescription=" + (DBSecurityGroupDescription==null? "" : System.Uri.EscapeDataString(DBSecurityGroupDescription))+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_CreateDBSnapshot #Action=CreateDBSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_CreateDBSnapshotAsync(string DBSnapshotIdentifier, string DBInstanceIdentifier, string[] Tags, GET_CreateDBSnapshotAction Action, GET_CreateDBSnapshotVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateDBSnapshot?DBSnapshotIdentifier=" + (DBSnapshotIdentifier==null? "" : System.Uri.EscapeDataString(DBSnapshotIdentifier))+"&DBInstanceIdentifier=" + (DBInstanceIdentifier==null? "" : System.Uri.EscapeDataString(DBInstanceIdentifier))+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_CreateDBSubnetGroup #Action=CreateDBSubnetGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_CreateDBSubnetGroupAsync(string DBSubnetGroupName, string DBSubnetGroupDescription, string[] SubnetIds, string[] Tags, GET_CreateDBSubnetGroupAction Action, GET_CreateDBSubnetGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateDBSubnetGroup?DBSubnetGroupName=" + (DBSubnetGroupName==null? "" : System.Uri.EscapeDataString(DBSubnetGroupName))+"&DBSubnetGroupDescription=" + (DBSubnetGroupDescription==null? "" : System.Uri.EscapeDataString(DBSubnetGroupDescription))+"&"+string.Join("&", SubnetIds.Select(z => $"SubnetIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_CreateEventSubscription #Action=CreateEventSubscription
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_CreateEventSubscriptionAsync(string SubscriptionName, string SnsTopicArn, string SourceType, string[] EventCategories, string[] SourceIds, bool Enabled, string[] Tags, GET_CreateEventSubscriptionAction Action, GET_CreateEventSubscriptionVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateEventSubscription?SubscriptionName=" + (SubscriptionName==null? "" : System.Uri.EscapeDataString(SubscriptionName))+"&SnsTopicArn=" + (SnsTopicArn==null? "" : System.Uri.EscapeDataString(SnsTopicArn))+"&SourceType=" + (SourceType==null? "" : System.Uri.EscapeDataString(SourceType))+"&"+string.Join("&", EventCategories.Select(z => $"EventCategories={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", SourceIds.Select(z => $"SourceIds={System.Uri.EscapeDataString(z.ToString())}"))+"&Enabled="+Enabled+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_CreateOptionGroup #Action=CreateOptionGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_CreateOptionGroupAsync(string OptionGroupName, string EngineName, string MajorEngineVersion, string OptionGroupDescription, string[] Tags, GET_CreateOptionGroupAction Action, GET_CreateOptionGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateOptionGroup?OptionGroupName=" + (OptionGroupName==null? "" : System.Uri.EscapeDataString(OptionGroupName))+"&EngineName=" + (EngineName==null? "" : System.Uri.EscapeDataString(EngineName))+"&MajorEngineVersion=" + (MajorEngineVersion==null? "" : System.Uri.EscapeDataString(MajorEngineVersion))+"&OptionGroupDescription=" + (OptionGroupDescription==null? "" : System.Uri.EscapeDataString(OptionGroupDescription))+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_DeleteDBInstance #Action=DeleteDBInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DeleteDBInstanceAsync(string DBInstanceIdentifier, bool SkipFinalSnapshot, string FinalDBSnapshotIdentifier, GET_DeleteDBInstanceAction Action, GET_DeleteDBInstanceVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteDBInstance?DBInstanceIdentifier=" + (DBInstanceIdentifier==null? "" : System.Uri.EscapeDataString(DBInstanceIdentifier))+"&SkipFinalSnapshot="+SkipFinalSnapshot+"&FinalDBSnapshotIdentifier=" + (FinalDBSnapshotIdentifier==null? "" : System.Uri.EscapeDataString(FinalDBSnapshotIdentifier))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_DeleteDBParameterGroup #Action=DeleteDBParameterGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DeleteDBParameterGroupAsync(string DBParameterGroupName, GET_DeleteDBParameterGroupAction Action, GET_DeleteDBParameterGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteDBParameterGroup?DBParameterGroupName=" + (DBParameterGroupName==null? "" : System.Uri.EscapeDataString(DBParameterGroupName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_DeleteDBSecurityGroup #Action=DeleteDBSecurityGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DeleteDBSecurityGroupAsync(string DBSecurityGroupName, GET_DeleteDBSecurityGroupAction Action, GET_DeleteDBSecurityGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteDBSecurityGroup?DBSecurityGroupName=" + (DBSecurityGroupName==null? "" : System.Uri.EscapeDataString(DBSecurityGroupName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_DeleteDBSnapshot #Action=DeleteDBSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DeleteDBSnapshotAsync(string DBSnapshotIdentifier, GET_DeleteDBSnapshotAction Action, GET_DeleteDBSnapshotVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteDBSnapshot?DBSnapshotIdentifier=" + (DBSnapshotIdentifier==null? "" : System.Uri.EscapeDataString(DBSnapshotIdentifier))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_DeleteDBSubnetGroup #Action=DeleteDBSubnetGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DeleteDBSubnetGroupAsync(string DBSubnetGroupName, GET_DeleteDBSubnetGroupAction Action, GET_DeleteDBSubnetGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteDBSubnetGroup?DBSubnetGroupName=" + (DBSubnetGroupName==null? "" : System.Uri.EscapeDataString(DBSubnetGroupName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_DeleteEventSubscription #Action=DeleteEventSubscription
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DeleteEventSubscriptionAsync(string SubscriptionName, GET_DeleteEventSubscriptionAction Action, GET_DeleteEventSubscriptionVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteEventSubscription?SubscriptionName=" + (SubscriptionName==null? "" : System.Uri.EscapeDataString(SubscriptionName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_DeleteOptionGroup #Action=DeleteOptionGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DeleteOptionGroupAsync(string OptionGroupName, GET_DeleteOptionGroupAction Action, GET_DeleteOptionGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteOptionGroup?OptionGroupName=" + (OptionGroupName==null? "" : System.Uri.EscapeDataString(OptionGroupName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_DescribeDBEngineVersions #Action=DescribeDBEngineVersions
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DescribeDBEngineVersionsAsync(string Engine, string EngineVersion, string DBParameterGroupFamily, string[] Filters, int MaxRecords, string Marker, bool DefaultOnly, bool ListSupportedCharacterSets, GET_DescribeDBEngineVersionsAction Action, GET_DescribeDBEngineVersionsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeDBEngineVersions?Engine=" + (Engine==null? "" : System.Uri.EscapeDataString(Engine))+"&EngineVersion=" + (EngineVersion==null? "" : System.Uri.EscapeDataString(EngineVersion))+"&DBParameterGroupFamily=" + (DBParameterGroupFamily==null? "" : System.Uri.EscapeDataString(DBParameterGroupFamily))+"&"+string.Join("&", Filters.Select(z => $"Filters={System.Uri.EscapeDataString(z.ToString())}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&DefaultOnly="+DefaultOnly+"&ListSupportedCharacterSets="+ListSupportedCharacterSets+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_DescribeDBInstances #Action=DescribeDBInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DescribeDBInstancesAsync(string DBInstanceIdentifier, string[] Filters, int MaxRecords, string Marker, GET_DescribeDBInstancesAction Action, GET_DescribeDBInstancesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeDBInstances?DBInstanceIdentifier=" + (DBInstanceIdentifier==null? "" : System.Uri.EscapeDataString(DBInstanceIdentifier))+"&"+string.Join("&", Filters.Select(z => $"Filters={System.Uri.EscapeDataString(z.ToString())}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_DescribeDBLogFiles #Action=DescribeDBLogFiles
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DescribeDBLogFilesAsync(string DBInstanceIdentifier, string FilenameContains, int FileLastWritten, int FileSize, string[] Filters, int MaxRecords, string Marker, GET_DescribeDBLogFilesAction Action, GET_DescribeDBLogFilesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeDBLogFiles?DBInstanceIdentifier=" + (DBInstanceIdentifier==null? "" : System.Uri.EscapeDataString(DBInstanceIdentifier))+"&FilenameContains=" + (FilenameContains==null? "" : System.Uri.EscapeDataString(FilenameContains))+"&FileLastWritten="+FileLastWritten+"&FileSize="+FileSize+"&"+string.Join("&", Filters.Select(z => $"Filters={System.Uri.EscapeDataString(z.ToString())}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_DescribeDBParameterGroups #Action=DescribeDBParameterGroups
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DescribeDBParameterGroupsAsync(string DBParameterGroupName, string[] Filters, int MaxRecords, string Marker, GET_DescribeDBParameterGroupsAction Action, GET_DescribeDBParameterGroupsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeDBParameterGroups?DBParameterGroupName=" + (DBParameterGroupName==null? "" : System.Uri.EscapeDataString(DBParameterGroupName))+"&"+string.Join("&", Filters.Select(z => $"Filters={System.Uri.EscapeDataString(z.ToString())}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_DescribeDBParameters #Action=DescribeDBParameters
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DescribeDBParametersAsync(string DBParameterGroupName, string Source, string[] Filters, int MaxRecords, string Marker, GET_DescribeDBParametersAction Action, GET_DescribeDBParametersVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeDBParameters?DBParameterGroupName=" + (DBParameterGroupName==null? "" : System.Uri.EscapeDataString(DBParameterGroupName))+"&Source=" + (Source==null? "" : System.Uri.EscapeDataString(Source))+"&"+string.Join("&", Filters.Select(z => $"Filters={System.Uri.EscapeDataString(z.ToString())}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_DescribeDBSecurityGroups #Action=DescribeDBSecurityGroups
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DescribeDBSecurityGroupsAsync(string DBSecurityGroupName, string[] Filters, int MaxRecords, string Marker, GET_DescribeDBSecurityGroupsAction Action, GET_DescribeDBSecurityGroupsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeDBSecurityGroups?DBSecurityGroupName=" + (DBSecurityGroupName==null? "" : System.Uri.EscapeDataString(DBSecurityGroupName))+"&"+string.Join("&", Filters.Select(z => $"Filters={System.Uri.EscapeDataString(z.ToString())}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_DescribeDBSnapshots #Action=DescribeDBSnapshots
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DescribeDBSnapshotsAsync(string DBInstanceIdentifier, string DBSnapshotIdentifier, string SnapshotType, string[] Filters, int MaxRecords, string Marker, GET_DescribeDBSnapshotsAction Action, GET_DescribeDBSnapshotsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeDBSnapshots?DBInstanceIdentifier=" + (DBInstanceIdentifier==null? "" : System.Uri.EscapeDataString(DBInstanceIdentifier))+"&DBSnapshotIdentifier=" + (DBSnapshotIdentifier==null? "" : System.Uri.EscapeDataString(DBSnapshotIdentifier))+"&SnapshotType=" + (SnapshotType==null? "" : System.Uri.EscapeDataString(SnapshotType))+"&"+string.Join("&", Filters.Select(z => $"Filters={System.Uri.EscapeDataString(z.ToString())}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_DescribeDBSubnetGroups #Action=DescribeDBSubnetGroups
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DescribeDBSubnetGroupsAsync(string DBSubnetGroupName, string[] Filters, int MaxRecords, string Marker, GET_DescribeDBSubnetGroupsAction Action, GET_DescribeDBSubnetGroupsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeDBSubnetGroups?DBSubnetGroupName=" + (DBSubnetGroupName==null? "" : System.Uri.EscapeDataString(DBSubnetGroupName))+"&"+string.Join("&", Filters.Select(z => $"Filters={System.Uri.EscapeDataString(z.ToString())}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_DescribeEngineDefaultParameters #Action=DescribeEngineDefaultParameters
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DescribeEngineDefaultParametersAsync(string DBParameterGroupFamily, string[] Filters, int MaxRecords, string Marker, GET_DescribeEngineDefaultParametersAction Action, GET_DescribeEngineDefaultParametersVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeEngineDefaultParameters?DBParameterGroupFamily=" + (DBParameterGroupFamily==null? "" : System.Uri.EscapeDataString(DBParameterGroupFamily))+"&"+string.Join("&", Filters.Select(z => $"Filters={System.Uri.EscapeDataString(z.ToString())}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_DescribeEventCategories #Action=DescribeEventCategories
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DescribeEventCategoriesAsync(string SourceType, string[] Filters, GET_DescribeEventCategoriesAction Action, GET_DescribeEventCategoriesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeEventCategories?SourceType=" + (SourceType==null? "" : System.Uri.EscapeDataString(SourceType))+"&"+string.Join("&", Filters.Select(z => $"Filters={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_DescribeEventSubscriptions #Action=DescribeEventSubscriptions
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DescribeEventSubscriptionsAsync(string SubscriptionName, string[] Filters, int MaxRecords, string Marker, GET_DescribeEventSubscriptionsAction Action, GET_DescribeEventSubscriptionsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeEventSubscriptions?SubscriptionName=" + (SubscriptionName==null? "" : System.Uri.EscapeDataString(SubscriptionName))+"&"+string.Join("&", Filters.Select(z => $"Filters={System.Uri.EscapeDataString(z.ToString())}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_DescribeEvents #Action=DescribeEvents
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DescribeEventsAsync(string SourceIdentifier, GET_DescribeEventsSourceType SourceType, System.DateTimeOffset StartTime, System.DateTimeOffset EndTime, int Duration, string[] EventCategories, string[] Filters, int MaxRecords, string Marker, GET_DescribeEventsAction Action, GET_DescribeEventsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeEvents?SourceIdentifier=" + (SourceIdentifier==null? "" : System.Uri.EscapeDataString(SourceIdentifier))+"&SourceType=" + SourceType+"&StartTime=" + StartTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndTime=" + EndTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Duration="+Duration+"&"+string.Join("&", EventCategories.Select(z => $"EventCategories={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", Filters.Select(z => $"Filters={System.Uri.EscapeDataString(z.ToString())}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_DescribeOptionGroupOptions #Action=DescribeOptionGroupOptions
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DescribeOptionGroupOptionsAsync(string EngineName, string MajorEngineVersion, string[] Filters, int MaxRecords, string Marker, GET_DescribeOptionGroupOptionsAction Action, GET_DescribeOptionGroupOptionsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeOptionGroupOptions?EngineName=" + (EngineName==null? "" : System.Uri.EscapeDataString(EngineName))+"&MajorEngineVersion=" + (MajorEngineVersion==null? "" : System.Uri.EscapeDataString(MajorEngineVersion))+"&"+string.Join("&", Filters.Select(z => $"Filters={System.Uri.EscapeDataString(z.ToString())}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_DescribeOptionGroups #Action=DescribeOptionGroups
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DescribeOptionGroupsAsync(string OptionGroupName, string[] Filters, string Marker, int MaxRecords, string EngineName, string MajorEngineVersion, GET_DescribeOptionGroupsAction Action, GET_DescribeOptionGroupsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeOptionGroups?OptionGroupName=" + (OptionGroupName==null? "" : System.Uri.EscapeDataString(OptionGroupName))+"&"+string.Join("&", Filters.Select(z => $"Filters={System.Uri.EscapeDataString(z.ToString())}"))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxRecords="+MaxRecords+"&EngineName=" + (EngineName==null? "" : System.Uri.EscapeDataString(EngineName))+"&MajorEngineVersion=" + (MajorEngineVersion==null? "" : System.Uri.EscapeDataString(MajorEngineVersion))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_DescribeOrderableDBInstanceOptions #Action=DescribeOrderableDBInstanceOptions
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DescribeOrderableDBInstanceOptionsAsync(string Engine, string EngineVersion, string DBInstanceClass, string LicenseModel, bool Vpc, string[] Filters, int MaxRecords, string Marker, GET_DescribeOrderableDBInstanceOptionsAction Action, GET_DescribeOrderableDBInstanceOptionsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeOrderableDBInstanceOptions?Engine=" + (Engine==null? "" : System.Uri.EscapeDataString(Engine))+"&EngineVersion=" + (EngineVersion==null? "" : System.Uri.EscapeDataString(EngineVersion))+"&DBInstanceClass=" + (DBInstanceClass==null? "" : System.Uri.EscapeDataString(DBInstanceClass))+"&LicenseModel=" + (LicenseModel==null? "" : System.Uri.EscapeDataString(LicenseModel))+"&Vpc="+Vpc+"&"+string.Join("&", Filters.Select(z => $"Filters={System.Uri.EscapeDataString(z.ToString())}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_DescribeReservedDBInstances #Action=DescribeReservedDBInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DescribeReservedDBInstancesAsync(string ReservedDBInstanceId, string ReservedDBInstancesOfferingId, string DBInstanceClass, string Duration, string ProductDescription, string OfferingType, bool MultiAZ, string[] Filters, int MaxRecords, string Marker, GET_DescribeReservedDBInstancesAction Action, GET_DescribeReservedDBInstancesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeReservedDBInstances?ReservedDBInstanceId=" + (ReservedDBInstanceId==null? "" : System.Uri.EscapeDataString(ReservedDBInstanceId))+"&ReservedDBInstancesOfferingId=" + (ReservedDBInstancesOfferingId==null? "" : System.Uri.EscapeDataString(ReservedDBInstancesOfferingId))+"&DBInstanceClass=" + (DBInstanceClass==null? "" : System.Uri.EscapeDataString(DBInstanceClass))+"&Duration=" + (Duration==null? "" : System.Uri.EscapeDataString(Duration))+"&ProductDescription=" + (ProductDescription==null? "" : System.Uri.EscapeDataString(ProductDescription))+"&OfferingType=" + (OfferingType==null? "" : System.Uri.EscapeDataString(OfferingType))+"&MultiAZ="+MultiAZ+"&"+string.Join("&", Filters.Select(z => $"Filters={System.Uri.EscapeDataString(z.ToString())}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_DescribeReservedDBInstancesOfferings #Action=DescribeReservedDBInstancesOfferings
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DescribeReservedDBInstancesOfferingsAsync(string ReservedDBInstancesOfferingId, string DBInstanceClass, string Duration, string ProductDescription, string OfferingType, bool MultiAZ, string[] Filters, int MaxRecords, string Marker, GET_DescribeReservedDBInstancesOfferingsAction Action, GET_DescribeReservedDBInstancesOfferingsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeReservedDBInstancesOfferings?ReservedDBInstancesOfferingId=" + (ReservedDBInstancesOfferingId==null? "" : System.Uri.EscapeDataString(ReservedDBInstancesOfferingId))+"&DBInstanceClass=" + (DBInstanceClass==null? "" : System.Uri.EscapeDataString(DBInstanceClass))+"&Duration=" + (Duration==null? "" : System.Uri.EscapeDataString(Duration))+"&ProductDescription=" + (ProductDescription==null? "" : System.Uri.EscapeDataString(ProductDescription))+"&OfferingType=" + (OfferingType==null? "" : System.Uri.EscapeDataString(OfferingType))+"&MultiAZ="+MultiAZ+"&"+string.Join("&", Filters.Select(z => $"Filters={System.Uri.EscapeDataString(z.ToString())}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_DownloadDBLogFilePortion #Action=DownloadDBLogFilePortion
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DownloadDBLogFilePortionAsync(string DBInstanceIdentifier, string LogFileName, string Marker, int NumberOfLines, GET_DownloadDBLogFilePortionAction Action, GET_DownloadDBLogFilePortionVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DownloadDBLogFilePortion?DBInstanceIdentifier=" + (DBInstanceIdentifier==null? "" : System.Uri.EscapeDataString(DBInstanceIdentifier))+"&LogFileName=" + (LogFileName==null? "" : System.Uri.EscapeDataString(LogFileName))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&NumberOfLines="+NumberOfLines+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_ListTagsForResource #Action=ListTagsForResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_ListTagsForResourceAsync(string ResourceName, string[] Filters, GET_ListTagsForResourceAction Action, GET_ListTagsForResourceVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListTagsForResource?ResourceName=" + (ResourceName==null? "" : System.Uri.EscapeDataString(ResourceName))+"&"+string.Join("&", Filters.Select(z => $"Filters={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_ModifyDBInstance #Action=ModifyDBInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_ModifyDBInstanceAsync(
					string DBInstanceIdentifier, 
					int AllocatedStorage, 
					string DBInstanceClass, 
					string[] DBSecurityGroups, 
					string[] VpcSecurityGroupIds, 
					bool ApplyImmediately, 
					string MasterUserPassword, 
					string DBParameterGroupName, 
					int BackupRetentionPeriod, 
					string PreferredBackupWindow, 
					string PreferredMaintenanceWindow, 
					bool MultiAZ, 
					string EngineVersion, 
					bool AllowMajorVersionUpgrade, 
					bool AutoMinorVersionUpgrade, 
					int Iops, 
					string OptionGroupName, 
					string NewDBInstanceIdentifier, 
					GET_ModifyDBInstanceAction Action, 
					GET_ModifyDBInstanceVersion Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyDBInstance?DBInstanceIdentifier=" + (DBInstanceIdentifier==null? "" : System.Uri.EscapeDataString(DBInstanceIdentifier))+"&AllocatedStorage="+AllocatedStorage+"&DBInstanceClass=" + (DBInstanceClass==null? "" : System.Uri.EscapeDataString(DBInstanceClass))+"&"+string.Join("&", DBSecurityGroups.Select(z => $"DBSecurityGroups={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", VpcSecurityGroupIds.Select(z => $"VpcSecurityGroupIds={System.Uri.EscapeDataString(z.ToString())}"))+"&ApplyImmediately="+ApplyImmediately+"&MasterUserPassword=" + (MasterUserPassword==null? "" : System.Uri.EscapeDataString(MasterUserPassword))+"&DBParameterGroupName=" + (DBParameterGroupName==null? "" : System.Uri.EscapeDataString(DBParameterGroupName))+"&BackupRetentionPeriod="+BackupRetentionPeriod+"&PreferredBackupWindow=" + (PreferredBackupWindow==null? "" : System.Uri.EscapeDataString(PreferredBackupWindow))+"&PreferredMaintenanceWindow=" + (PreferredMaintenanceWindow==null? "" : System.Uri.EscapeDataString(PreferredMaintenanceWindow))+"&MultiAZ="+MultiAZ+"&EngineVersion=" + (EngineVersion==null? "" : System.Uri.EscapeDataString(EngineVersion))+"&AllowMajorVersionUpgrade="+AllowMajorVersionUpgrade+"&AutoMinorVersionUpgrade="+AutoMinorVersionUpgrade+"&Iops="+Iops+"&OptionGroupName=" + (OptionGroupName==null? "" : System.Uri.EscapeDataString(OptionGroupName))+"&NewDBInstanceIdentifier=" + (NewDBInstanceIdentifier==null? "" : System.Uri.EscapeDataString(NewDBInstanceIdentifier))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_ModifyDBParameterGroup #Action=ModifyDBParameterGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_ModifyDBParameterGroupAsync(string DBParameterGroupName, string[] Parameters, GET_ModifyDBParameterGroupAction Action, GET_ModifyDBParameterGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyDBParameterGroup?DBParameterGroupName=" + (DBParameterGroupName==null? "" : System.Uri.EscapeDataString(DBParameterGroupName))+"&"+string.Join("&", Parameters.Select(z => $"Parameters={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_ModifyDBSubnetGroup #Action=ModifyDBSubnetGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_ModifyDBSubnetGroupAsync(string DBSubnetGroupName, string DBSubnetGroupDescription, string[] SubnetIds, GET_ModifyDBSubnetGroupAction Action, GET_ModifyDBSubnetGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyDBSubnetGroup?DBSubnetGroupName=" + (DBSubnetGroupName==null? "" : System.Uri.EscapeDataString(DBSubnetGroupName))+"&DBSubnetGroupDescription=" + (DBSubnetGroupDescription==null? "" : System.Uri.EscapeDataString(DBSubnetGroupDescription))+"&"+string.Join("&", SubnetIds.Select(z => $"SubnetIds={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_ModifyEventSubscription #Action=ModifyEventSubscription
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_ModifyEventSubscriptionAsync(string SubscriptionName, string SnsTopicArn, string SourceType, string[] EventCategories, bool Enabled, GET_ModifyEventSubscriptionAction Action, GET_ModifyEventSubscriptionVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyEventSubscription?SubscriptionName=" + (SubscriptionName==null? "" : System.Uri.EscapeDataString(SubscriptionName))+"&SnsTopicArn=" + (SnsTopicArn==null? "" : System.Uri.EscapeDataString(SnsTopicArn))+"&SourceType=" + (SourceType==null? "" : System.Uri.EscapeDataString(SourceType))+"&"+string.Join("&", EventCategories.Select(z => $"EventCategories={System.Uri.EscapeDataString(z.ToString())}"))+"&Enabled="+Enabled+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_ModifyOptionGroup #Action=ModifyOptionGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_ModifyOptionGroupAsync(string OptionGroupName, string[] OptionsToInclude, string[] OptionsToRemove, bool ApplyImmediately, GET_ModifyOptionGroupAction Action, GET_ModifyOptionGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyOptionGroup?OptionGroupName=" + (OptionGroupName==null? "" : System.Uri.EscapeDataString(OptionGroupName))+"&"+string.Join("&", OptionsToInclude.Select(z => $"OptionsToInclude={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", OptionsToRemove.Select(z => $"OptionsToRemove={System.Uri.EscapeDataString(z.ToString())}"))+"&ApplyImmediately="+ApplyImmediately+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_PromoteReadReplica #Action=PromoteReadReplica
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_PromoteReadReplicaAsync(string DBInstanceIdentifier, int BackupRetentionPeriod, string PreferredBackupWindow, GET_PromoteReadReplicaAction Action, GET_PromoteReadReplicaVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=PromoteReadReplica?DBInstanceIdentifier=" + (DBInstanceIdentifier==null? "" : System.Uri.EscapeDataString(DBInstanceIdentifier))+"&BackupRetentionPeriod="+BackupRetentionPeriod+"&PreferredBackupWindow=" + (PreferredBackupWindow==null? "" : System.Uri.EscapeDataString(PreferredBackupWindow))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_PurchaseReservedDBInstancesOffering #Action=PurchaseReservedDBInstancesOffering
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_PurchaseReservedDBInstancesOfferingAsync(string ReservedDBInstancesOfferingId, string ReservedDBInstanceId, int DBInstanceCount, string[] Tags, GET_PurchaseReservedDBInstancesOfferingAction Action, GET_PurchaseReservedDBInstancesOfferingVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=PurchaseReservedDBInstancesOffering?ReservedDBInstancesOfferingId=" + (ReservedDBInstancesOfferingId==null? "" : System.Uri.EscapeDataString(ReservedDBInstancesOfferingId))+"&ReservedDBInstanceId=" + (ReservedDBInstanceId==null? "" : System.Uri.EscapeDataString(ReservedDBInstanceId))+"&DBInstanceCount="+DBInstanceCount+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_RebootDBInstance #Action=RebootDBInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_RebootDBInstanceAsync(string DBInstanceIdentifier, bool ForceFailover, GET_RebootDBInstanceAction Action, GET_RebootDBInstanceVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RebootDBInstance?DBInstanceIdentifier=" + (DBInstanceIdentifier==null? "" : System.Uri.EscapeDataString(DBInstanceIdentifier))+"&ForceFailover="+ForceFailover+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_RemoveSourceIdentifierFromSubscription #Action=RemoveSourceIdentifierFromSubscription
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_RemoveSourceIdentifierFromSubscriptionAsync(string SubscriptionName, string SourceIdentifier, GET_RemoveSourceIdentifierFromSubscriptionAction Action, GET_RemoveSourceIdentifierFromSubscriptionVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RemoveSourceIdentifierFromSubscription?SubscriptionName=" + (SubscriptionName==null? "" : System.Uri.EscapeDataString(SubscriptionName))+"&SourceIdentifier=" + (SourceIdentifier==null? "" : System.Uri.EscapeDataString(SourceIdentifier))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_RemoveTagsFromResource #Action=RemoveTagsFromResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_RemoveTagsFromResourceAsync(string ResourceName, string[] TagKeys, GET_RemoveTagsFromResourceAction Action, GET_RemoveTagsFromResourceVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RemoveTagsFromResource?ResourceName=" + (ResourceName==null? "" : System.Uri.EscapeDataString(ResourceName))+"&"+string.Join("&", TagKeys.Select(z => $"TagKeys={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_ResetDBParameterGroup #Action=ResetDBParameterGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_ResetDBParameterGroupAsync(string DBParameterGroupName, bool ResetAllParameters, string[] Parameters, GET_ResetDBParameterGroupAction Action, GET_ResetDBParameterGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ResetDBParameterGroup?DBParameterGroupName=" + (DBParameterGroupName==null? "" : System.Uri.EscapeDataString(DBParameterGroupName))+"&ResetAllParameters="+ResetAllParameters+"&"+string.Join("&", Parameters.Select(z => $"Parameters={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_RestoreDBInstanceFromDBSnapshot #Action=RestoreDBInstanceFromDBSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_RestoreDBInstanceFromDBSnapshotAsync(
					string DBInstanceIdentifier, 
					string DBSnapshotIdentifier, 
					string DBInstanceClass, 
					int Port, 
					string AvailabilityZone, 
					string DBSubnetGroupName, 
					bool MultiAZ, 
					bool PubliclyAccessible, 
					bool AutoMinorVersionUpgrade, 
					string LicenseModel, 
					string DBName, 
					string Engine, 
					int Iops, 
					string OptionGroupName, 
					string[] Tags, 
					GET_RestoreDBInstanceFromDBSnapshotAction Action, 
					GET_RestoreDBInstanceFromDBSnapshotVersion Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RestoreDBInstanceFromDBSnapshot?DBInstanceIdentifier=" + (DBInstanceIdentifier==null? "" : System.Uri.EscapeDataString(DBInstanceIdentifier))+"&DBSnapshotIdentifier=" + (DBSnapshotIdentifier==null? "" : System.Uri.EscapeDataString(DBSnapshotIdentifier))+"&DBInstanceClass=" + (DBInstanceClass==null? "" : System.Uri.EscapeDataString(DBInstanceClass))+"&Port="+Port+"&AvailabilityZone=" + (AvailabilityZone==null? "" : System.Uri.EscapeDataString(AvailabilityZone))+"&DBSubnetGroupName=" + (DBSubnetGroupName==null? "" : System.Uri.EscapeDataString(DBSubnetGroupName))+"&MultiAZ="+MultiAZ+"&PubliclyAccessible="+PubliclyAccessible+"&AutoMinorVersionUpgrade="+AutoMinorVersionUpgrade+"&LicenseModel=" + (LicenseModel==null? "" : System.Uri.EscapeDataString(LicenseModel))+"&DBName=" + (DBName==null? "" : System.Uri.EscapeDataString(DBName))+"&Engine=" + (Engine==null? "" : System.Uri.EscapeDataString(Engine))+"&Iops="+Iops+"&OptionGroupName=" + (OptionGroupName==null? "" : System.Uri.EscapeDataString(OptionGroupName))+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_RestoreDBInstanceToPointInTime #Action=RestoreDBInstanceToPointInTime
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_RestoreDBInstanceToPointInTimeAsync(
					string SourceDBInstanceIdentifier, 
					string TargetDBInstanceIdentifier, 
					System.DateTimeOffset RestoreTime, 
					bool UseLatestRestorableTime, 
					string DBInstanceClass, 
					int Port, 
					string AvailabilityZone, 
					string DBSubnetGroupName, 
					bool MultiAZ, 
					bool PubliclyAccessible, 
					bool AutoMinorVersionUpgrade, 
					string LicenseModel, 
					string DBName, 
					string Engine, 
					int Iops, 
					string OptionGroupName, 
					string[] Tags, 
					GET_RestoreDBInstanceToPointInTimeAction Action, 
					GET_RestoreDBInstanceToPointInTimeVersion Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RestoreDBInstanceToPointInTime?SourceDBInstanceIdentifier=" + (SourceDBInstanceIdentifier==null? "" : System.Uri.EscapeDataString(SourceDBInstanceIdentifier))+"&TargetDBInstanceIdentifier=" + (TargetDBInstanceIdentifier==null? "" : System.Uri.EscapeDataString(TargetDBInstanceIdentifier))+"&RestoreTime=" + RestoreTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&UseLatestRestorableTime="+UseLatestRestorableTime+"&DBInstanceClass=" + (DBInstanceClass==null? "" : System.Uri.EscapeDataString(DBInstanceClass))+"&Port="+Port+"&AvailabilityZone=" + (AvailabilityZone==null? "" : System.Uri.EscapeDataString(AvailabilityZone))+"&DBSubnetGroupName=" + (DBSubnetGroupName==null? "" : System.Uri.EscapeDataString(DBSubnetGroupName))+"&MultiAZ="+MultiAZ+"&PubliclyAccessible="+PubliclyAccessible+"&AutoMinorVersionUpgrade="+AutoMinorVersionUpgrade+"&LicenseModel=" + (LicenseModel==null? "" : System.Uri.EscapeDataString(LicenseModel))+"&DBName=" + (DBName==null? "" : System.Uri.EscapeDataString(DBName))+"&Engine=" + (Engine==null? "" : System.Uri.EscapeDataString(Engine))+"&Iops="+Iops+"&OptionGroupName=" + (OptionGroupName==null? "" : System.Uri.EscapeDataString(OptionGroupName))+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET_RevokeDBSecurityGroupIngress #Action=RevokeDBSecurityGroupIngress
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_RevokeDBSecurityGroupIngressAsync(string DBSecurityGroupName, string CIDRIP, string EC2SecurityGroupName, string EC2SecurityGroupId, string EC2SecurityGroupOwnerId, GET_RevokeDBSecurityGroupIngressAction Action, GET_RevokeDBSecurityGroupIngressVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RevokeDBSecurityGroupIngress?DBSecurityGroupName=" + (DBSecurityGroupName==null? "" : System.Uri.EscapeDataString(DBSecurityGroupName))+"&CIDRIP=" + (CIDRIP==null? "" : System.Uri.EscapeDataString(CIDRIP))+"&EC2SecurityGroupName=" + (EC2SecurityGroupName==null? "" : System.Uri.EscapeDataString(EC2SecurityGroupName))+"&EC2SecurityGroupId=" + (EC2SecurityGroupId==null? "" : System.Uri.EscapeDataString(EC2SecurityGroupId))+"&EC2SecurityGroupOwnerId=" + (EC2SecurityGroupOwnerId==null? "" : System.Uri.EscapeDataString(EC2SecurityGroupOwnerId))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum GET_AddSourceIdentifierToSubscriptionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AddSourceIdentifierToSubscription")]
		AddSourceIdentifierToSubscription = 0,
	}
	
	public enum GET_AddSourceIdentifierToSubscriptionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_AddSourceIdentifierToSubscriptionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_AddTagsToResourceAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AddTagsToResource")]
		AddTagsToResource = 0,
	}
	
	public enum GET_AddTagsToResourceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_AddTagsToResourceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_AuthorizeDBSecurityGroupIngressAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AuthorizeDBSecurityGroupIngress")]
		AuthorizeDBSecurityGroupIngress = 0,
	}
	
	public enum GET_AuthorizeDBSecurityGroupIngressVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_AuthorizeDBSecurityGroupIngressVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_CopyDBSnapshotAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CopyDBSnapshot")]
		CopyDBSnapshot = 0,
	}
	
	public enum GET_CopyDBSnapshotVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_CopyDBSnapshotVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_CreateDBInstanceAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateDBInstance")]
		CreateDBInstance = 0,
	}
	
	public enum GET_CreateDBInstanceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_CreateDBInstanceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_CreateDBInstanceReadReplicaAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateDBInstanceReadReplica")]
		CreateDBInstanceReadReplica = 0,
	}
	
	public enum GET_CreateDBInstanceReadReplicaVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_CreateDBInstanceReadReplicaVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_CreateDBParameterGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateDBParameterGroup")]
		CreateDBParameterGroup = 0,
	}
	
	public enum GET_CreateDBParameterGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_CreateDBParameterGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_CreateDBSecurityGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateDBSecurityGroup")]
		CreateDBSecurityGroup = 0,
	}
	
	public enum GET_CreateDBSecurityGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_CreateDBSecurityGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_CreateDBSnapshotAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateDBSnapshot")]
		CreateDBSnapshot = 0,
	}
	
	public enum GET_CreateDBSnapshotVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_CreateDBSnapshotVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_CreateDBSubnetGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateDBSubnetGroup")]
		CreateDBSubnetGroup = 0,
	}
	
	public enum GET_CreateDBSubnetGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_CreateDBSubnetGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_CreateEventSubscriptionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateEventSubscription")]
		CreateEventSubscription = 0,
	}
	
	public enum GET_CreateEventSubscriptionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_CreateEventSubscriptionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_CreateOptionGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateOptionGroup")]
		CreateOptionGroup = 0,
	}
	
	public enum GET_CreateOptionGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_CreateOptionGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_DeleteDBInstanceAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteDBInstance")]
		DeleteDBInstance = 0,
	}
	
	public enum GET_DeleteDBInstanceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_DeleteDBInstanceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_DeleteDBParameterGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteDBParameterGroup")]
		DeleteDBParameterGroup = 0,
	}
	
	public enum GET_DeleteDBParameterGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_DeleteDBParameterGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_DeleteDBSecurityGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteDBSecurityGroup")]
		DeleteDBSecurityGroup = 0,
	}
	
	public enum GET_DeleteDBSecurityGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_DeleteDBSecurityGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_DeleteDBSnapshotAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteDBSnapshot")]
		DeleteDBSnapshot = 0,
	}
	
	public enum GET_DeleteDBSnapshotVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_DeleteDBSnapshotVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_DeleteDBSubnetGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteDBSubnetGroup")]
		DeleteDBSubnetGroup = 0,
	}
	
	public enum GET_DeleteDBSubnetGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_DeleteDBSubnetGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_DeleteEventSubscriptionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteEventSubscription")]
		DeleteEventSubscription = 0,
	}
	
	public enum GET_DeleteEventSubscriptionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_DeleteEventSubscriptionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_DeleteOptionGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteOptionGroup")]
		DeleteOptionGroup = 0,
	}
	
	public enum GET_DeleteOptionGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_DeleteOptionGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_DescribeDBEngineVersionsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeDBEngineVersions")]
		DescribeDBEngineVersions = 0,
	}
	
	public enum GET_DescribeDBEngineVersionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_DescribeDBEngineVersionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_DescribeDBInstancesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeDBInstances")]
		DescribeDBInstances = 0,
	}
	
	public enum GET_DescribeDBInstancesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_DescribeDBInstancesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_DescribeDBLogFilesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeDBLogFiles")]
		DescribeDBLogFiles = 0,
	}
	
	public enum GET_DescribeDBLogFilesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_DescribeDBLogFilesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_DescribeDBParameterGroupsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeDBParameterGroups")]
		DescribeDBParameterGroups = 0,
	}
	
	public enum GET_DescribeDBParameterGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_DescribeDBParameterGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_DescribeDBParametersAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeDBParameters")]
		DescribeDBParameters = 0,
	}
	
	public enum GET_DescribeDBParametersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_DescribeDBParametersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_DescribeDBSecurityGroupsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeDBSecurityGroups")]
		DescribeDBSecurityGroups = 0,
	}
	
	public enum GET_DescribeDBSecurityGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_DescribeDBSecurityGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_DescribeDBSnapshotsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeDBSnapshots")]
		DescribeDBSnapshots = 0,
	}
	
	public enum GET_DescribeDBSnapshotsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_DescribeDBSnapshotsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_DescribeDBSubnetGroupsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeDBSubnetGroups")]
		DescribeDBSubnetGroups = 0,
	}
	
	public enum GET_DescribeDBSubnetGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_DescribeDBSubnetGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_DescribeEngineDefaultParametersAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeEngineDefaultParameters")]
		DescribeEngineDefaultParameters = 0,
	}
	
	public enum GET_DescribeEngineDefaultParametersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_DescribeEngineDefaultParametersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_DescribeEventCategoriesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeEventCategories")]
		DescribeEventCategories = 0,
	}
	
	public enum GET_DescribeEventCategoriesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_DescribeEventCategoriesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_DescribeEventSubscriptionsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeEventSubscriptions")]
		DescribeEventSubscriptions = 0,
	}
	
	public enum GET_DescribeEventSubscriptionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_DescribeEventSubscriptionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_DescribeEventsSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="db-instance")]
		dbMinusinstance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="db-parameter-group")]
		dbMinusparameterMinusgroup = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="db-security-group")]
		dbMinussecurityMinusgroup = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="db-snapshot")]
		dbMinussnapshot = 3,
	}
	
	public enum GET_DescribeEventsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeEvents")]
		DescribeEvents = 0,
	}
	
	public enum GET_DescribeEventsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_DescribeEventsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_DescribeOptionGroupOptionsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeOptionGroupOptions")]
		DescribeOptionGroupOptions = 0,
	}
	
	public enum GET_DescribeOptionGroupOptionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_DescribeOptionGroupOptionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_DescribeOptionGroupsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeOptionGroups")]
		DescribeOptionGroups = 0,
	}
	
	public enum GET_DescribeOptionGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_DescribeOptionGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_DescribeOrderableDBInstanceOptionsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeOrderableDBInstanceOptions")]
		DescribeOrderableDBInstanceOptions = 0,
	}
	
	public enum GET_DescribeOrderableDBInstanceOptionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_DescribeOrderableDBInstanceOptionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_DescribeReservedDBInstancesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeReservedDBInstances")]
		DescribeReservedDBInstances = 0,
	}
	
	public enum GET_DescribeReservedDBInstancesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_DescribeReservedDBInstancesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_DescribeReservedDBInstancesOfferingsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeReservedDBInstancesOfferings")]
		DescribeReservedDBInstancesOfferings = 0,
	}
	
	public enum GET_DescribeReservedDBInstancesOfferingsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_DescribeReservedDBInstancesOfferingsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_DownloadDBLogFilePortionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DownloadDBLogFilePortion")]
		DownloadDBLogFilePortion = 0,
	}
	
	public enum GET_DownloadDBLogFilePortionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_DownloadDBLogFilePortionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_ListTagsForResourceAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ListTagsForResource")]
		ListTagsForResource = 0,
	}
	
	public enum GET_ListTagsForResourceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_ListTagsForResourceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_ModifyDBInstanceAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ModifyDBInstance")]
		ModifyDBInstance = 0,
	}
	
	public enum GET_ModifyDBInstanceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_ModifyDBInstanceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_ModifyDBParameterGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ModifyDBParameterGroup")]
		ModifyDBParameterGroup = 0,
	}
	
	public enum GET_ModifyDBParameterGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_ModifyDBParameterGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_ModifyDBSubnetGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ModifyDBSubnetGroup")]
		ModifyDBSubnetGroup = 0,
	}
	
	public enum GET_ModifyDBSubnetGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_ModifyDBSubnetGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_ModifyEventSubscriptionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ModifyEventSubscription")]
		ModifyEventSubscription = 0,
	}
	
	public enum GET_ModifyEventSubscriptionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_ModifyEventSubscriptionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_ModifyOptionGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ModifyOptionGroup")]
		ModifyOptionGroup = 0,
	}
	
	public enum GET_ModifyOptionGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_ModifyOptionGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_PromoteReadReplicaAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PromoteReadReplica")]
		PromoteReadReplica = 0,
	}
	
	public enum GET_PromoteReadReplicaVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_PromoteReadReplicaVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_PurchaseReservedDBInstancesOfferingAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PurchaseReservedDBInstancesOffering")]
		PurchaseReservedDBInstancesOffering = 0,
	}
	
	public enum GET_PurchaseReservedDBInstancesOfferingVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_PurchaseReservedDBInstancesOfferingVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_RebootDBInstanceAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RebootDBInstance")]
		RebootDBInstance = 0,
	}
	
	public enum GET_RebootDBInstanceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_RebootDBInstanceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_RemoveSourceIdentifierFromSubscriptionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RemoveSourceIdentifierFromSubscription")]
		RemoveSourceIdentifierFromSubscription = 0,
	}
	
	public enum GET_RemoveSourceIdentifierFromSubscriptionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_RemoveSourceIdentifierFromSubscriptionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_RemoveTagsFromResourceAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RemoveTagsFromResource")]
		RemoveTagsFromResource = 0,
	}
	
	public enum GET_RemoveTagsFromResourceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_RemoveTagsFromResourceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_ResetDBParameterGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ResetDBParameterGroup")]
		ResetDBParameterGroup = 0,
	}
	
	public enum GET_ResetDBParameterGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_ResetDBParameterGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_RestoreDBInstanceFromDBSnapshotAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RestoreDBInstanceFromDBSnapshot")]
		RestoreDBInstanceFromDBSnapshot = 0,
	}
	
	public enum GET_RestoreDBInstanceFromDBSnapshotVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_RestoreDBInstanceFromDBSnapshotVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_RestoreDBInstanceToPointInTimeAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RestoreDBInstanceToPointInTime")]
		RestoreDBInstanceToPointInTime = 0,
	}
	
	public enum GET_RestoreDBInstanceToPointInTimeVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_RestoreDBInstanceToPointInTimeVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum GET_RevokeDBSecurityGroupIngressAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RevokeDBSecurityGroupIngress")]
		RevokeDBSecurityGroupIngress = 0,
	}
	
	public enum GET_RevokeDBSecurityGroupIngressVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
	
	public enum POST_RevokeDBSecurityGroupIngressVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013-09-09")]
		_2013Minus09Minus09 = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
