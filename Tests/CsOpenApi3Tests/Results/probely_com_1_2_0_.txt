//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// API Key object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class APIKey
	{
		
		/// <summary>
		/// Object id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Authentication token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Custom name for the resource
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; } = "";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Account
	{
		
		/// <summary>
		/// Collection for the next billing period is autommatic/manual
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auto_collection")]
		public System.Nullable<AccountAuto_collection> Auto_collection { get; set; }
		
		/// <summary>
		/// Account balance in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public System.Nullable<System.Int32> Balance { get; set; }
		
		/// <summary>
		/// 3 letter currency code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="balance_currency_code")]
		public string Balance_currency_code { get; set; }
		
		/// <summary>
		/// Number of free targets
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="free_target_quantity")]
		public System.Nullable<System.Int32> Free_target_quantity { get; set; }
		
		/// <summary>
		/// Has account used up it's trial
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="has_used_trial")]
		public System.Nullable<System.Boolean> Has_used_trial { get; set; }
		
		/// <summary>
		/// Heroku accounts (for future use)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heroku")]
		public System.Nullable<System.Boolean> Heroku { get; set; }
		
		/// <summary>
		/// Date of next billing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next_billing_at")]
		public System.Nullable<System.DateOnly> Next_billing_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plan")]
		public Plan Plan { get; set; }
		
		/// <summary>
		/// Number of subscribed targets
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plan_target_quantity")]
		public System.Nullable<System.Int32> Plan_target_quantity { get; set; }
		
		/// <summary>
		/// Maximum number of subscribed target for pool plans
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pool_size")]
		public System.Nullable<System.Int32> Pool_size { get; set; }
		
		/// <summary>
		/// * active - active subscription, either trial or paying
		///* trial_ended - trial ended and subscription was discontinued
		///* canceled - subscription canceled
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<AccountStatus> Status { get; set; }
		
		/// <summary>
		/// Trial termination date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trialEnd")]
		public System.Nullable<System.DateTimeOffset> TrialEnd { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AccountAuto_collection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="on")]
		on = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="off")]
		off = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Plan
	{
		
		/// <summary>
		/// List of scan profiles allowed by the plan
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowed_scan_profiles")]
		public string[] Allowed_scan_profiles { get; set; }
		
		/// <summary>
		/// * per_unit - each target is paid independently
		///* flat_fee - targets are paid as a pool
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="charge_model")]
		public System.Nullable<PlanCharge_model> Charge_model { get; set; }
		
		/// <summary>
		/// 3 letter currency code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// Custom description for the resource
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; } = "";
		
		/// <summary>
		/// Object id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Is this a trial plan
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_trial")]
		public System.Nullable<System.Boolean> Is_trial { get; set; }
		
		/// <summary>
		/// Custom name for the resource
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; } = "";
		
		/// <summary>
		/// Number of of period unit between charges
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="period")]
		public string Period { get; set; }
		
		/// <summary>
		/// Unit of billing period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="period_unit")]
		public System.Nullable<PlanPeriod_unit> Period_unit { get; set; }
		
		/// <summary>
		/// Price in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PlanCharge_model
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="per_unit")]
		per_unit = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="flat_fee")]
		flat_fee = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PlanPeriod_unit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="month")]
		month = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="year")]
		year = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AccountStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="active")]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="trial_ended")]
		trial_ended = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="canceled")]
		canceled = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Action
	{
		
		/// <summary>
		/// Action to enable targets:
		///* null - no action required
		///* trial - start a trial
		///* plan - select a plan to subscribe
		///* subscribe - add target to subscribed plan
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public System.Nullable<ActionAction1> Action1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ActionAction1
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_null = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="trial")]
		trial = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="plan")]
		plan = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="subscribe")]
		subscribe = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionsElement
	{
		
		/// <summary>
		/// Actions are:
		///* edit - edit target
		///* delete - delete target
		///* trial - start a trial with this target
		///* plan - select a subscipition plan with this target
		///* subscribe - add target to subscribed plan
		///* unsubscribe - remove target from subscription
		///* archive - archive target
		///* activate - unarchive target
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public System.Nullable<ActionsElementAction> Action { get; set; }
		
		/// <summary>
		/// Label or the action
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ActionsElementAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="edit")]
		edit = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="delete")]
		_delete = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="trial")]
		trial = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="plan")]
		plan = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="subscribe")]
		subscribe = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unsubscribe")]
		unsubscribe = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="archive")]
		archive = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="activate")]
		activate = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Activity
	{
		
		/// <summary>
		/// Type of change:
		///  * created - First time the issue is found
		///  * comment - User left a comment in the timeline
		///  * found - Found again in a later scan
		///  * changed - One of the parameters of the finding was changed
		///   (e.g. severity)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="change")]
		public System.Nullable<ActivityChange> Change { get; set; }
		
		/// <summary>
		/// Date time of the last change
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changed")]
		public System.Nullable<System.DateTimeOffset> Changed { get; set; }
		
		/// <summary>
		/// User that last modified the object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changed_by")]
		public ChangedBy Changed_by { get; set; }
		
		/// <summary>
		/// Field that was changed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		/// <summary>
		/// Previous value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="old_value")]
		public string Old_value { get; set; }
		
		/// <summary>
		/// New value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ActivityChange
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="created")]
		created = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="comment")]
		comment = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="found")]
		found = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="changed")]
		changed = 3,
	}
	
	/// <summary>
	/// User that last modified the object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChangedBy
	{
		
		/// <summary>
		/// User's email (changing this resets the user's password and revokes existing tokens)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// User's id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// User's name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Secondary domain of a target
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Asset
	{
		
		/// <summary>
		/// Date time of the last change
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changed")]
		public System.Nullable<System.DateTimeOffset> Changed { get; set; }
		
		/// <summary>
		/// User that last modified the object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changed_by")]
		public ChangedBy Changed_by { get; set; }
		
		/// <summary>
		/// Custom cookies name/value pairs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookies")]
		public AssetCookies[] AssetCookies { get; set; }
		
		/// <summary>
		/// Custom description for the resource
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="desc")]
		public string Desc { get; set; } = "";
		
		/// <summary>
		/// Custom headers name value pairs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public AssetHeaders[] AssetHeaders { get; set; }
		
		/// <summary>
		/// Fully qualified hostname
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="host")]
		public string Host { get; set; }
		
		/// <summary>
		/// Object id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Use this asset in scans.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="include")]
		public System.Nullable<System.Boolean> Include { get; set; }
		
		/// <summary>
		/// Custom name for the resource
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; } = "";
		
		/// <summary>
		/// List of frameworks detected on this resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stack")]
		public string[] Stack { get; set; }
		
		/// <summary>
		/// Verification date time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verification_date")]
		public System.Nullable<System.DateTimeOffset> Verification_date { get; set; }
		
		/// <summary>
		/// Reason for last verification failure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verification_last_error")]
		public string Verification_last_error { get; set; }
		
		/// <summary>
		/// Type of verification:
		///* dns - we look or a TXT record on the host you registered containing
		///`Probely=<verification_token>`
		///* file - on the root of the path you registered we look for a file
		///named `<verification token>` containing `Probely`.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verification_method")]
		public System.Nullable<AssetVerification_method> Verification_method { get; set; }
		
		/// <summary>
		/// Token used to verify
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verification_token")]
		public string Verification_token { get; set; }
		
		/// <summary>
		/// Has resource ownership been verified
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verified")]
		public System.Nullable<System.Boolean> Verified { get; set; }
	}
	
	public class AssetCookies
	{
		
		/// <summary>
		/// Cookie name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Cookie value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class AssetHeaders
	{
		
		/// <summary>
		/// Header name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Header value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AssetVerification_method
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dns")]
		dns = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="file")]
		file = 1,
	}
	
	/// <summary>
	/// Assigned user
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Assignee
	{
		
		/// <summary>
		/// User's email (changing this resets the user's password and revokes existing tokens)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// User's id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// User's name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Basic authentication credentials
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BasicAuth
	{
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Username
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Billing
	{
		
		/// <summary>
		/// Address
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// City
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// ISO 3166 alpha-2 country code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Contact email
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// First name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		/// <summary>
		/// Last name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		/// <summary>
		/// Extra data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="other")]
		public string Other { get; set; }
		
		/// <summary>
		/// Company registration number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reg_number")]
		public string Reg_number { get; set; }
		
		/// <summary>
		/// Company VAT registration number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vat_number")]
		public string Vat_number { get; set; }
		
		/// <summary>
		/// Address ZIP code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zip")]
		public string Zip { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CookiesElement
	{
		
		/// <summary>
		/// Cookie name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Cookie value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// User that created the object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatedBy
	{
		
		/// <summary>
		/// User's email (changing this resets the user's password and revokes existing tokens)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// User's id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// User's name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Definition
	{
		
		/// <summary>
		/// Vulnerability definition description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desc")]
		public string Desc { get; set; }
		
		/// <summary>
		/// Vulnerability definition id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Vulnerability definition name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Event
	{
		
		/// <summary>
		/// Event object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public EventContent Content { get; set; }
		
		/// <summary>
		/// Event type:
		///- `user_created` new user added to account
		///- `user_deleted` user deleted from account
		///- `target_created` new target added to account
		///- `target_deleted` target deleted from account
		///- `target_verified` target ownership verified
		///- `target_verification_failed` target ownership verification failed
		///- `scan_started` scan started on target
		///- `scan_canceled` scan on target canceled
		///- `scan_completed` scan finished with successfuly
		///- `scan_failed` scan finished unsuccessfuly
		///- `finding_detected` new finding detected (not found before)
		///- `finding_fixed` finding was fixed
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event_type")]
		public System.Nullable<EventEvent_type> Event_type { get; set; }
		
		/// <summary>
		/// Object id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Type of object in the event content.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="object_type")]
		public System.Nullable<EventObject_type> Object_type { get; set; }
		
		/// <summary>
		/// Date time of when the event occurred
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ocurred_at")]
		public System.Nullable<System.DateTimeOffset> Ocurred_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webhooks")]
		public Webhook[] Webhooks { get; set; }
	}
	
	/// <summary>
	/// Event object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventContent
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EventEvent_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="user_created")]
		user_created = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="user_deleted")]
		user_deleted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="target_created")]
		target_created = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="target_deleted")]
		target_deleted = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="target_verified")]
		target_verified = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="target_verification_failed")]
		target_verification_failed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="scan_started")]
		scan_started = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="scan_canceled")]
		scan_canceled = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="scan_completed")]
		scan_completed = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="scan_failed")]
		scan_failed = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="finding_detected")]
		finding_detected = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="finding_fixed")]
		finding_fixed = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EventObject_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="user")]
		user = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="target")]
		target = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="scan")]
		scan = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="finding")]
		finding = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Webhook
	{
		
		/// <summary>
		/// API version for the webhook
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="api_version")]
		public System.Nullable<WebhookApi_version> Api_version { get; set; }
		
		/// <summary>
		/// Date time of the last change
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changed")]
		public System.Nullable<System.DateTimeOffset> Changed { get; set; }
		
		/// <summary>
		/// User that last modified the object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changed_by")]
		public ChangedBy Changed_by { get; set; }
		
		/// <summary>
		/// Verify webhook URL HTTPS certificate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="check_cert")]
		public System.Nullable<System.Boolean> Check_cert { get; set; }
		
		/// <summary>
		/// Date time of the last change
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// User that last modified the object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_by")]
		public ChangedBy Created_by { get; set; }
		
		/// <summary>
		/// Object id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Custom name for the resource
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; } = "";
		
		/// <summary>
		/// URL to post events to (must be https)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WebhookApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="v1")]
		v1 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Finding
	{
		
		/// <summary>
		/// Assigned user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignee")]
		public Assignee Assignee { get; set; }
		
		/// <summary>
		/// Date time of the last change
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changed")]
		public System.Nullable<System.DateTimeOffset> Changed { get; set; }
		
		/// <summary>
		/// User that last modified the object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changed_by")]
		public ChangedBy Changed_by { get; set; }
		
		/// <summary>
		/// User comment left on the finding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		/// <summary>
		/// CVSS score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cvss_score")]
		public System.Nullable<System.Single> Cvss_score { get; set; }
		
		/// <summary>
		/// CVSS vector
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cvss_vector")]
		public string Cvss_vector { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="definition")]
		public Definition Definition { get; set; }
		
		/// <summary>
		/// Evidence for the finding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evidence")]
		public string Evidence { get; set; }
		
		/// <summary>
		/// Extra data for the finding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extra")]
		public string Extra { get; set; }
		
		/// <summary>
		/// Fix sugestion for the vulnerability and framework
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fix")]
		public string Fix { get; set; }
		
		/// <summary>
		/// Object id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// An insertion point is the place in the HTTP request where the
		///malicious payload is injected to exploit the vulnerability.
		///  * cookie - Payload injected into the value of an HTTP cookie
		///  * header - Payload injected into the header of an HTTP request
		///  * parameter - Payload injected into the value of a query string
		///  parameter
		///  * arbitrary_url_param - Payload injected into the value of an
		///  arbitrarily added query string parameter
		///  * url_filename - Payload injected into the URL filename part
		///  * url_folder - Payload injected into the URL folder part
		///  * multipart_parameter - Payload is inserted into the value of a
		///  parameter attribute within a multi-part message body (such as
		///  the name of an uploaded file).
		///  * <empty> - No payload to inject.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertion_point")]
		public System.Nullable<FindingInsertion_point> Insertion_point { get; set; }
		
		/// <summary>
		/// User labels for the finding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string[] Labels { get; set; }
		
		/// <summary>
		/// Date time of the last time the vulnerability was found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_found")]
		public System.Nullable<System.DateTimeOffset> Last_found { get; set; }
		
		/// <summary>
		/// HTTP method
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public System.Nullable<FindingMethod> Method { get; set; }
		
		/// <summary>
		/// Vulnerable paramenter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameter")]
		public string Parameter { get; set; }
		
		/// <summary>
		/// Request parameters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="params")]
		public string Params { get; set; }
		
		/// <summary>
		/// Finding path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Reporting user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reporter")]
		public Reporter Reporter { get; set; }
		
		/// <summary>
		/// Request response pairs that produced the finding
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public FindingRequests[] FindingRequests { get; set; }
		
		/// <summary>
		/// Scan ids where this finding was present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scans")]
		public string[] Scans { get; set; }
		
		/// <summary>
		/// Severity, how serious the issue is considered:
		///  * 10 - low
		///  * 20 - medium
		///  * 30 - high
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<FindingSeverity> Severity { get; set; }
		
		/// <summary>
		/// Finding state:
		///  * notfixed - Issue can still be exploited
		///  * invalid - Issue determined to be a false positive
		///  * accepted - Issue will not be solved and the risk was accepted
		///  * fixed - No problem here anymore
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<FindingState> State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target")]
		public TargetSimple Target { get; set; }
		
		/// <summary>
		/// Full finding URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Value for parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FindingInsertion_point
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cookie")]
		cookie = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="header")]
		header = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="parameter")]
		parameter = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="arbitrary_url_param_name")]
		arbitrary_url_param_name = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="url_path_folder")]
		url_path_folder = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="")]
		_ = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FindingMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GET")]
		GET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPTIONS")]
		OPTIONS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POST")]
		POST = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PUT")]
		PUT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PATCH")]
		PATCH = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETE")]
		DELETE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HEAD")]
		HEAD = 6,
	}
	
	/// <summary>
	/// Reporting user
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Reporter
	{
		
		/// <summary>
		/// User's email (changing this resets the user's password and revokes existing tokens)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// User's id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// User's name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class FindingRequests
	{
		
		[System.Runtime.Serialization.DataMember(Name="request")]
		public string Request { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="response")]
		public string Response { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FindingSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="20")]
		_20 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30")]
		_30 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FindingState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="notfixed")]
		notfixed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="invalid")]
		invalid = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="accepted")]
		accepted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fixed")]
		_fixed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TargetSimple
	{
		
		/// <summary>
		/// Custom description for the resource
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="desc")]
		public string Desc { get; set; } = "";
		
		/// <summary>
		/// Object id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Custom name for the resource
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; } = "";
		
		/// <summary>
		/// List of frameworks detected on this resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stack")]
		public string[] Stack { get; set; }
		
		/// <summary>
		/// Target's site URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FindingBulkIds
	{
		
		/// <summary>
		/// Array of finding ids
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public string[] Ids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FindingBulkRetest : FindingBulkIds
	{
		
		/// <summary>
		/// * lightning - fast simple scan
		///* normal - default profile
		///* full - does everything the default profile does and adds boolean based
		///SQL injection tests
		///* safe - doesn't use any content changing methods (no POST, DELETE, etc)
		///and tries fewer payloads for SQL injection tests
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scan_profile")]
		public System.Nullable<FindingBulkRetestScan_profile> Scan_profile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FindingBulkRetestScan_profile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="safe")]
		safe = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="normal")]
		normal = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="full")]
		full = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lightning")]
		lightning = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FindingBulkUpdate : FindingBulkIds
	{
		
		/// <summary>
		/// Assigned user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignee")]
		public Assignee Assignee { get; set; }
		
		/// <summary>
		/// Date time of the last change
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changed")]
		public System.Nullable<System.DateTimeOffset> Changed { get; set; }
		
		/// <summary>
		/// User that last modified the object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changed_by")]
		public ChangedBy Changed_by { get; set; }
		
		/// <summary>
		/// User comment left on the finding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		/// <summary>
		/// CVSS score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cvss_score")]
		public System.Nullable<System.Single> Cvss_score { get; set; }
		
		/// <summary>
		/// CVSS vector
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cvss_vector")]
		public string Cvss_vector { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="definition")]
		public Definition Definition { get; set; }
		
		/// <summary>
		/// Evidence for the finding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evidence")]
		public string Evidence { get; set; }
		
		/// <summary>
		/// Extra data for the finding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extra")]
		public string Extra { get; set; }
		
		/// <summary>
		/// Fix sugestion for the vulnerability and framework
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fix")]
		public string Fix { get; set; }
		
		/// <summary>
		/// Object id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// An insertion point is the place in the HTTP request where the
		///malicious payload is injected to exploit the vulnerability.
		///  * cookie - Payload injected into the value of an HTTP cookie
		///  * header - Payload injected into the header of an HTTP request
		///  * parameter - Payload injected into the value of a query string
		///  parameter
		///  * arbitrary_url_param - Payload injected into the value of an
		///  arbitrarily added query string parameter
		///  * url_filename - Payload injected into the URL filename part
		///  * url_folder - Payload injected into the URL folder part
		///  * multipart_parameter - Payload is inserted into the value of a
		///  parameter attribute within a multi-part message body (such as
		///  the name of an uploaded file).
		///  * <empty> - No payload to inject.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertion_point")]
		public System.Nullable<FindingBulkUpdateInsertion_point> Insertion_point { get; set; }
		
		/// <summary>
		/// User labels for the finding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string[] Labels { get; set; }
		
		/// <summary>
		/// Date time of the last time the vulnerability was found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_found")]
		public System.Nullable<System.DateTimeOffset> Last_found { get; set; }
		
		/// <summary>
		/// HTTP method
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public FindingMethod Method { get; set; }
		
		/// <summary>
		/// Vulnerable paramenter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameter")]
		public string Parameter { get; set; }
		
		/// <summary>
		/// Request parameters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="params")]
		public string Params { get; set; }
		
		/// <summary>
		/// Finding path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Reporting user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reporter")]
		public Reporter Reporter { get; set; }
		
		/// <summary>
		/// Request response pairs that produced the finding
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public FindingBulkUpdateRequests[] FindingBulkUpdateRequests { get; set; }
		
		/// <summary>
		/// Scan ids where this finding was present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scans")]
		public string[] Scans { get; set; }
		
		/// <summary>
		/// Severity, how serious the issue is considered:
		///  * 10 - low
		///  * 20 - medium
		///  * 30 - high
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<FindingBulkUpdateSeverity> Severity { get; set; }
		
		/// <summary>
		/// Finding state:
		///  * notfixed - Issue can still be exploited
		///  * invalid - Issue determined to be a false positive
		///  * accepted - Issue will not be solved and the risk was accepted
		///  * fixed - No problem here anymore
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<FindingBulkUpdateState> State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target")]
		public TargetSimple Target { get; set; }
		
		/// <summary>
		/// Full finding URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Value for parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FindingBulkUpdateInsertion_point
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cookie")]
		cookie = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="header")]
		header = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="parameter")]
		parameter = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="arbitrary_url_param_name")]
		arbitrary_url_param_name = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="url_path_folder")]
		url_path_folder = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="")]
		_ = 5,
	}
	
	public class FindingBulkUpdateRequests
	{
		
		[System.Runtime.Serialization.DataMember(Name="request")]
		public string Request { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="response")]
		public string Response { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FindingBulkUpdateSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="20")]
		_20 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30")]
		_30 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FindingBulkUpdateState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="notfixed")]
		notfixed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="invalid")]
		invalid = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="accepted")]
		accepted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fixed")]
		_fixed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FindingUpdate
	{
		
		/// <summary>
		/// Assigned user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignee")]
		public Assignee Assignee { get; set; }
		
		/// <summary>
		/// Date time of the last change
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changed")]
		public System.Nullable<System.DateTimeOffset> Changed { get; set; }
		
		/// <summary>
		/// User that last modified the object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changed_by")]
		public ChangedBy Changed_by { get; set; }
		
		/// <summary>
		/// User comment left on the finding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		/// <summary>
		/// CVSS score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cvss_score")]
		public System.Nullable<System.Single> Cvss_score { get; set; }
		
		/// <summary>
		/// CVSS vector
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cvss_vector")]
		public string Cvss_vector { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="definition")]
		public Definition Definition { get; set; }
		
		/// <summary>
		/// Evidence for the finding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evidence")]
		public string Evidence { get; set; }
		
		/// <summary>
		/// Extra data for the finding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extra")]
		public string Extra { get; set; }
		
		/// <summary>
		/// Fix sugestion for the vulnerability and framework
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fix")]
		public string Fix { get; set; }
		
		/// <summary>
		/// Object id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// An insertion point is the place in the HTTP request where the
		///malicious payload is injected to exploit the vulnerability.
		///  * cookie - Payload injected into the value of an HTTP cookie
		///  * header - Payload injected into the header of an HTTP request
		///  * parameter - Payload injected into the value of a query string
		///  parameter
		///  * arbitrary_url_param - Payload injected into the value of an
		///  arbitrarily added query string parameter
		///  * url_filename - Payload injected into the URL filename part
		///  * url_folder - Payload injected into the URL folder part
		///  * multipart_parameter - Payload is inserted into the value of a
		///  parameter attribute within a multi-part message body (such as
		///  the name of an uploaded file).
		///  * <empty> - No payload to inject.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertion_point")]
		public System.Nullable<FindingUpdateInsertion_point> Insertion_point { get; set; }
		
		/// <summary>
		/// User labels for the finding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string[] Labels { get; set; }
		
		/// <summary>
		/// Date time of the last time the vulnerability was found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_found")]
		public System.Nullable<System.DateTimeOffset> Last_found { get; set; }
		
		/// <summary>
		/// HTTP method
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public FindingMethod Method { get; set; }
		
		/// <summary>
		/// Vulnerable paramenter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameter")]
		public string Parameter { get; set; }
		
		/// <summary>
		/// Request parameters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="params")]
		public string Params { get; set; }
		
		/// <summary>
		/// Finding path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Reporting user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reporter")]
		public Reporter Reporter { get; set; }
		
		/// <summary>
		/// Request response pairs that produced the finding
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public FindingUpdateRequests[] FindingUpdateRequests { get; set; }
		
		/// <summary>
		/// Scan ids where this finding was present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scans")]
		public string[] Scans { get; set; }
		
		/// <summary>
		/// Severity, how serious the issue is considered:
		///  * 10 - low
		///  * 20 - medium
		///  * 30 - high
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<FindingUpdateSeverity> Severity { get; set; }
		
		/// <summary>
		/// Finding state:
		///  * notfixed - Issue can still be exploited
		///  * invalid - Issue determined to be a false positive
		///  * accepted - Issue will not be solved and the risk was accepted
		///  * fixed - No problem here anymore
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<FindingUpdateState> State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target")]
		public TargetSimple Target { get; set; }
		
		/// <summary>
		/// Full finding URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Value for parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FindingUpdateInsertion_point
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cookie")]
		cookie = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="header")]
		header = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="parameter")]
		parameter = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="arbitrary_url_param_name")]
		arbitrary_url_param_name = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="url_path_folder")]
		url_path_folder = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="")]
		_ = 5,
	}
	
	public class FindingUpdateRequests
	{
		
		[System.Runtime.Serialization.DataMember(Name="request")]
		public string Request { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="response")]
		public string Response { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FindingUpdateSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="20")]
		_20 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30")]
		_30 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FindingUpdateState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="notfixed")]
		notfixed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="invalid")]
		invalid = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="accepted")]
		accepted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fixed")]
		_fixed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FormLoginElement
	{
		
		/// <summary>
		/// Field name/id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Field input
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Framework
	{
		
		/// <summary>
		/// Framework description
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desc")]
		public string Desc { get; set; }
		
		/// <summary>
		/// Object id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Object id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HeadersElement
	{
		
		/// <summary>
		/// Header name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Header value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IntegrationFields
	{
		
		[System.Runtime.Serialization.DataMember(Name="heroku")]
		public System.Nullable<System.Boolean> Heroku { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jira_cloud")]
		public System.Nullable<System.Boolean> Jira_cloud { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jira_server")]
		public System.Nullable<System.Boolean> Jira_server { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slack")]
		public System.Nullable<System.Boolean> Slack { get; set; }
	}
	
	/// <summary>
	/// Available and installed integrations
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Integrations
	{
		
		[System.Runtime.Serialization.DataMember(Name="available")]
		public IntegrationFields Available { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="installed")]
		public IntegrationFields Installed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Invoice
	{
		
		/// <summary>
		/// Amount remaining to pay in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount_due")]
		public System.Nullable<System.Int32> Amount_due { get; set; }
		
		/// <summary>
		/// Amount already paid in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount_paid")]
		public System.Nullable<System.Int32> Amount_paid { get; set; }
		
		/// <summary>
		/// 3 letter currency code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discounts")]
		public InvoiceDiscounts[] InvoiceDiscounts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="line_items")]
		public InvoiceLine_items[] InvoiceLine_items { get; set; }
		
		/// <summary>
		/// Plan name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plan")]
		public string Plan { get; set; }
		
		/// <summary>
		/// Current plan id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plan_id")]
		public string Plan_id { get; set; }
		
		/// <summary>
		/// Price before taxes in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sub_total")]
		public System.Nullable<System.Int32> Sub_total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxes")]
		public InvoiceTaxes[] InvoiceTaxes { get; set; }
		
		/// <summary>
		/// Price after taxes in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	public class InvoiceDiscounts
	{
		
		/// <summary>
		/// Discounted amount in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		/// <summary>
		/// Discount description
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	public class InvoiceLine_items
	{
		
		/// <summary>
		/// Total amount in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		/// <summary>
		/// Charge description
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Discount amount in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discount_amount")]
		public System.Nullable<System.Int32> Discount_amount { get; set; }
		
		/// <summary>
		/// Units charged
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// Tax amount in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_amount")]
		public System.Nullable<System.Int32> Tax_amount { get; set; }
		
		/// <summary>
		/// Price per unit in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit_amount")]
		public System.Nullable<System.Int32> Unit_amount { get; set; }
	}
	
	public class InvoiceTaxes
	{
		
		/// <summary>
		/// Amount of tax in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_amount")]
		public System.Nullable<System.Int32> Tax_amount { get; set; }
		
		/// <summary>
		/// Name of applied tax
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_name")]
		public string Tax_name { get; set; }
		
		/// <summary>
		/// Tax rate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_rate")]
		public System.Nullable<System.Single> Tax_rate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JiraFinding
	{
		
		/// <summary>
		/// Jira issue id connected to this finding
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issue_id")]
		public string Issue_id { get; set; }
		
		/// <summary>
		/// Selective sync active for this finding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selective_sync")]
		public System.Nullable<System.Boolean> Selective_sync { get; set; }
	}
	
	/// <summary>
	/// Jira issue priority.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JiraIssuePriority
	{
		
		/// <summary>
		/// Jira issue priority id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Jira issue priority name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Jira issue status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JiraIssueStatus
	{
		
		/// <summary>
		/// Jira issue status id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Jira issue status name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Jira issue type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JiraIssueType
	{
		
		/// <summary>
		/// Jira issue type id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Jira issue type name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Jira project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JiraProject
	{
		
		/// <summary>
		/// Jira project id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Jira project name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JiraScope
	{
		
		/// <summary>
		/// Is this target allowed Jira integration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allow_jira")]
		public System.Nullable<System.Boolean> Allow_jira { get; set; }
		
		/// <summary>
		/// Automatically synchronise all findings to Jira issues.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auto_sync")]
		public System.Nullable<System.Boolean> Auto_sync { get; set; }
		
		/// <summary>
		/// Id of the issue type to be created in Jira.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issue_type_id")]
		public string Issue_type_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priority_mapping")]
		public Jira_priority_mapping Priority_mapping { get; set; }
		
		/// <summary>
		/// Id of the Jira project where issues for this target will be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="project_id")]
		public string Project_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status_mapping")]
		public Jira_status_mapping Status_mapping { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Jira_priority_mapping
	{
		
		/// <summary>
		/// Id of the Jira priority that low severity findings should be mapped to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="10")]
		public string _10 { get; set; }
		
		/// <summary>
		/// Id of the Jira priority that medium severity findings should be mapped to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="20")]
		public string _20 { get; set; }
		
		/// <summary>
		/// Id of the Jira status that high severity findings should be mapped to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="30")]
		public string _30 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Jira_status_mapping
	{
		
		/// <summary>
		/// Id of the Jira status that `accepted` findings should be mapped to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accepted")]
		public string Accepted { get; set; }
		
		/// <summary>
		/// Id of the Jira status that `fixed` findings should be mapped to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixed")]
		public string Fixed { get; set; }
		
		/// <summary>
		/// Id of the Jira status that `invalid` findings should be mapped to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invalid")]
		public string Invalid { get; set; }
		
		/// <summary>
		/// Id of the Jira status that `notfixed` findings should be mapped to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notfixed")]
		public string Notfixed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Key
	{
		
		/// <summary>
		/// Object id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Authentication token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key1 { get; set; }
		
		/// <summary>
		/// Object id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Label
	{
		
		/// <summary>
		/// Object id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Custom name for the resource
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; } = "";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Login
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RequestsElement
	{
		
		[System.Runtime.Serialization.DataMember(Name="request")]
		public string Request { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="response")]
		public string Response { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Scan
	{
		
		/// <summary>
		/// Date time of the last change
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changed")]
		public System.Nullable<System.DateTimeOffset> Changed { get; set; }
		
		/// <summary>
		/// User that last modified the object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changed_by")]
		public ChangedBy Changed_by { get; set; }
		
		/// <summary>
		/// Date time of scan completion
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completed")]
		public System.Nullable<System.DateTimeOffset> Completed { get; set; }
		
		/// <summary>
		/// Information on the status of the crawling step of the scanning process
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crawler")]
		public ScanCrawler Crawler { get; set; }
		
		/// <summary>
		/// Date time of creation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// User that created the object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_by")]
		public CreatedBy Created_by { get; set; }
		
		/// <summary>
		/// Information on the status of the crawling step of the scanning process
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fingerprinter")]
		public ScanFingerprinter Fingerprinter { get; set; }
		
		/// <summary>
		/// Number of high severity findings in this scan
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="highs")]
		public System.Nullable<System.Int32> Highs { get; set; }
		
		/// <summary>
		/// Object id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Number of low severity findings in this scan
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lows")]
		public System.Nullable<System.Int32> Lows { get; set; }
		
		/// <summary>
		/// Number of medium severity findings in this scan
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediums")]
		public System.Nullable<System.Int32> Mediums { get; set; }
		
		/// <summary>
		/// * lightning - fast simple scan
		///* normal - default profile
		///* full - does everything the default profile does and adds boolean based
		///SQL injection tests
		///* safe - doesn't use any content changing methods (no POST, DELETE, etc)
		///and tries fewer payloads for SQL injection tests
		///
		/// </summary>
		[System.ComponentModel.DefaultValue(FindingBulkRetestScan_profile.normal)]
		[System.Runtime.Serialization.DataMember(Name="scan_profile")]
		public FindingBulkRetestScan_profile Scan_profile { get; set; } = FindingBulkRetestScan_profile.normal;
		
		/// <summary>
		/// Information on the status of the search for vulnerabilities of the scanning process
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scanner")]
		public ScanScanner Scanner { get; set; }
		
		/// <summary>
		/// Date time of scan start
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="started")]
		public System.Nullable<System.DateTimeOffset> Started { get; set; }
		
		/// <summary>
		/// Current scan status:
		///  * queued - Scan queued to start
		///  * started - Scan currently running
		///  * under_review - Scan is complete but we need to verify some findings
		///  * completed - Scan complete
		///  * completed_with_errors - Scan complete with error(s) in non essential modules
		///  * failed - Something went seriously wrong during the scan
		///  * canceled - Scan was canceled
		///  * canceling - Stopping scan
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<ScanStatus> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target")]
		public TargetSimple Target { get; set; }
	}
	
	public class ScanCrawler
	{
		
		/// <summary>
		/// List of possible errors from the crawler
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string[] Error { get; set; }
		
		/// <summary>
		/// The current state of the crawler
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ScanCrawlerState> State { get; set; }
		
		/// <summary>
		/// The number of crawled URLs and total number of URLs in the queue
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ScanCrawlerStatus Status { get; set; }
		
		/// <summary>
		/// List of possible warnings from the crawler
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warning")]
		public string[] Warning { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ScanCrawlerState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="started")]
		started = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ended")]
		ended = 1,
	}
	
	public class ScanCrawlerStatus
	{
		
		/// <summary>
		/// Number of crawled URLs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="0")]
		public System.Nullable<System.Int32> _0 { get; set; }
		
		/// <summary>
		/// Total number of URLs in the queue
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="1")]
		public System.Nullable<System.Int32> _1 { get; set; }
	}
	
	public class ScanFingerprinter
	{
		
		/// <summary>
		/// The number of detected frameworks/software on the target
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// List of possible errors from the fingerprinter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string[] Error { get; set; }
		
		/// <summary>
		/// The current state of the fingerprinter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public ScanCrawlerState State { get; set; }
		
		/// <summary>
		/// List of possible warnings from the fingerprinter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warning")]
		public string[] Warning { get; set; }
	}
	
	public class ScanScanner
	{
		
		/// <summary>
		/// List of possible errors from the scanner
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string[] Error { get; set; }
		
		/// <summary>
		/// The current state of the scanner
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public ScanCrawlerState State { get; set; }
		
		/// <summary>
		/// The number of scanner tasks completed and total number of tasks in the queue
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ScanScannerStatus Status { get; set; }
		
		/// <summary>
		/// List of possible warnings from the scanner
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warning")]
		public string[] Warning { get; set; }
	}
	
	public class ScanScannerStatus
	{
		
		/// <summary>
		/// Number of completed tasks
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="0")]
		public System.Nullable<System.Int32> _0 { get; set; }
		
		/// <summary>
		/// Total number of tasks in the queue
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="1")]
		public System.Nullable<System.Int32> _1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ScanStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="queued")]
		queued = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="started")]
		started = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="under_review")]
		under_review = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="completed")]
		completed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="completed_with_errors")]
		completed_with_errors = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="canceled")]
		canceled = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="canceling")]
		canceling = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Scheduled
	{
		
		/// <summary>
		/// Date time of the last change
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changed")]
		public System.Nullable<System.DateTimeOffset> Changed { get; set; }
		
		/// <summary>
		/// User that last modified the object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changed_by")]
		public ChangedBy Changed_by { get; set; }
		
		/// <summary>
		/// Date time of next scan
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_time")]
		public System.Nullable<System.DateTimeOffset> Date_time { get; set; }
		
		/// <summary>
		/// Scheduled object id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Scan recurrence:
		///  * d - daily
		///  * w - weekly
		///  * m - monthly
		///  * q - quarterly
		///  * '' - no recurrence
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recurrence")]
		public System.Nullable<ScheduledRecurrence> Recurrence { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target")]
		public TargetSimple Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ScheduledRecurrence
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="d")]
		d = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="w")]
		w = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="m")]
		m = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="q")]
		q = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="")]
		_ = 4,
	}
	
	/// <summary>
	/// Main resource associated with a target
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Site
	{
		
		/// <summary>
		/// Basic authentication credentials
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basic_auth")]
		public BasicAuth Basic_auth { get; set; }
		
		/// <summary>
		/// Date time of the last change
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changed")]
		public System.Nullable<System.DateTimeOffset> Changed { get; set; }
		
		/// <summary>
		/// User that last modified the object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changed_by")]
		public ChangedBy Changed_by { get; set; }
		
		/// <summary>
		/// Custom cookies name/value pairs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookies")]
		public CookiesElement[] Cookies { get; set; }
		
		/// <summary>
		/// Custom description for the resource
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="desc")]
		public string Desc { get; set; } = "";
		
		/// <summary>
		/// Form login field name, field input pairs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="form_login")]
		public FormLoginElement[] Form_login { get; set; }
		
		/// <summary>
		/// Pattern to check successful authentication (not used)
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="form_login_check_pattern")]
		public string Form_login_check_pattern { get; set; } = "";
		
		/// <summary>
		/// URL for the form login
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="form_login_url")]
		public string Form_login_url { get; set; } = "";
		
		/// <summary>
		/// Use basic authentication in scan
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="has_basic_auth")]
		public System.Nullable<System.Boolean> Has_basic_auth { get; set; }
		
		/// <summary>
		/// Does the resource use form login
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="has_form_login")]
		public System.Nullable<System.Boolean> Has_form_login { get; set; }
		
		/// <summary>
		/// Custom headers name value pairs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public HeadersElement[] Headers { get; set; }
		
		/// <summary>
		/// Site host
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="host")]
		public string Host { get; set; } = "";
		
		/// <summary>
		/// Object id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Custom name for the resource
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; } = "";
		
		/// <summary>
		/// List of frameworks detected on this resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stack")]
		public string[] Stack { get; set; }
		
		/// <summary>
		/// Site URL, it should include the path if the site is not located at the root. This URL can only be set once.
		///
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; } = "";
		
		/// <summary>
		/// Verification date time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verification_date")]
		public System.Nullable<System.DateTimeOffset> Verification_date { get; set; }
		
		/// <summary>
		/// Reason for last verification failure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verification_last_error")]
		public string Verification_last_error { get; set; }
		
		/// <summary>
		/// Type of verification:
		///* dns - we look or a TXT record on the host you registered containing
		///`Probely=<verification_token>`
		///* file - on the root of the path you registered we look for a file
		///named `<verification token>` containing `Probely`.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verification_method")]
		public AssetVerification_method Verification_method { get; set; }
		
		/// <summary>
		/// Token used to verify
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verification_token")]
		public string Verification_token { get; set; }
		
		/// <summary>
		/// Has resource ownership been verified
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verified")]
		public System.Nullable<System.Boolean> Verified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="whitelist")]
		public string[] Whitelist { get; set; }
	}
	
	/// <summary>
	/// Options for slack notifications
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Slack
	{
		
		/// <summary>
		/// Notify of fixed findings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notify_finding_fixed")]
		public System.Nullable<System.Boolean> Notify_finding_fixed { get; set; }
		
		/// <summary>
		/// Notify of new high severity findings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notify_high_findings")]
		public System.Nullable<System.Boolean> Notify_high_findings { get; set; }
		
		/// <summary>
		/// Notify of new low severity findings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notify_low_findings")]
		public System.Nullable<System.Boolean> Notify_low_findings { get; set; }
		
		/// <summary>
		/// Notify of new medium severity findings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notify_medium_findings")]
		public System.Nullable<System.Boolean> Notify_medium_findings { get; set; }
		
		/// <summary>
		/// Notify of completed scans.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notify_scan_completed")]
		public System.Nullable<System.Boolean> Notify_scan_completed { get; set; }
		
		/// <summary>
		/// Notify of started scans.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notify_scan_started")]
		public System.Nullable<System.Boolean> Notify_scan_started { get; set; }
		
		/// <summary>
		/// Slack notification webhook url.
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="webhook_url")]
		public string Webhook_url { get; set; } = "";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Subscription
	{
		
		/// <summary>
		/// Coupon ids
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coupon_ids")]
		public string[] Coupon_ids { get; set; }
		
		/// <summary>
		/// Current plan id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plan_id")]
		public string Plan_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_ids")]
		public string[] Target_ids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Target
	{
		
		/// <summary>
		/// Valid scan profiles for the target.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowed_scan_profiles")]
		public TargetAllowed_scan_profiles[] TargetAllowed_scan_profiles { get; set; }
		
		/// <summary>
		/// Secondary domains that should be scanned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assets")]
		public Asset[] Assets { get; set; }
		
		/// <summary>
		/// Date time of the last change
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changed")]
		public System.Nullable<System.DateTimeOffset> Changed { get; set; }
		
		/// <summary>
		/// User that last modified the object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changed_by")]
		public ChangedBy Changed_by { get; set; }
		
		/// <summary>
		/// Id of the connected target in a multi-environment targets.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connected_target")]
		public string Connected_target { get; set; }
		
		/// <summary>
		/// Certain operations (e.g. changing a target's `type`) may require going through billing. Until the change is reverted or the billing is settled.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Multi-environment targets can identify environments using this property.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public System.Nullable<TargetEnvironment> Environment { get; set; }
		
		/// <summary>
		/// Object id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// User labels for the scope. (This feature is currently only available for certain accounts,
		///please contact our support if you are interested in using it)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string[] Labels { get; set; }
		
		/// <summary>
		/// Custom name for the resource
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; } = "";
		
		/// <summary>
		/// * default - default report, no extra information added
		///* owasp - adds table on OWASP Top 10 most critical web application risks
		///* pci - adds table on PCI requirements
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report_type")]
		public System.Nullable<TargetReport_type> Report_type { get; set; }
		
		/// <summary>
		/// * lightning - fast simple scan
		///* normal - default profile
		///* full - does everything the default profile does and adds boolean based
		///SQL injection tests
		///* safe - doesn't use any content changing methods (no POST, DELETE, etc)
		///and tries fewer payloads for SQL injection tests
		///
		/// </summary>
		[System.ComponentModel.DefaultValue(FindingBulkRetestScan_profile.normal)]
		[System.Runtime.Serialization.DataMember(Name="scan_profile")]
		public FindingBulkRetestScan_profile Scan_profile { get; set; } = FindingBulkRetestScan_profile.normal;
		
		/// <summary>
		/// Main resource associated with a target
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="site")]
		public Site Site { get; set; }
		
		/// <summary>
		/// The type of a target determines what the limitations imposed on a
		///target.
		///* free - Every account is allowed to have 5 free targets, these targets
		///do not need to be verified but can only perform lightning
		///scans.
		///* single - Single environment targets need to be verified but are
		///allowed to run any type of scan allowed by the plan.
		///* multi - Multi environment targets are used when you want
		///to scan the same application in different environments.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<TargetType> Type { get; set; }
	}
	
	public class TargetAllowed_scan_profiles
	{
		
		/// <summary>
		/// * lightning - fast simple scan
		///* normal - default profile
		///* full - does everything the default profile does and adds boolean based
		///SQL injection tests
		///* safe - doesn't use any content changing methods (no POST, DELETE, etc)
		///and tries fewer payloads for SQL injection tests
		///
		/// </summary>
		[System.ComponentModel.DefaultValue(FindingBulkRetestScan_profile.normal)]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public FindingBulkRetestScan_profile Id { get; set; } = FindingBulkRetestScan_profile.normal;
		
		/// <summary>
		/// Name of the scan profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TargetEnvironment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="testing")]
		testing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="production")]
		production = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TargetReport_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="owasp")]
		owasp = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pci")]
		pci = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TargetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="free")]
		free = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="single")]
		single = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="multi")]
		multi = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class User
	{
		
		/// <summary>
		/// Date time of the last change
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changed")]
		public System.Nullable<System.DateTimeOffset> Changed { get; set; }
		
		/// <summary>
		/// User that last modified the object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changed_by")]
		public ChangedBy Changed_by { get; set; }
		
		/// <summary>
		/// User's email (changing this resets the user's password and revokes existing tokens)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Object id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Deleted users are marked as not active
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_active")]
		public System.Nullable<System.Boolean> Is_active { get; set; }
		
		/// <summary>
		/// Account admin
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_admin")]
		public System.Nullable<System.Boolean> Is_admin { get; set; }
		
		/// <summary>
		/// Billing contact for the account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_billing_admin")]
		public System.Nullable<System.Boolean> Is_billing_admin { get; set; }
		
		/// <summary>
		/// User's name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public System.Nullable<UserTitle> Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UserTitle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ceo")]
		ceo = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cto")]
		cto = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cso")]
		cso = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="seceng")]
		seceng = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dev")]
		dev = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="devop")]
		devop = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="manager")]
		manager = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other")]
		other = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VulnerabilityDefinition
	{
		
		/// <summary>
		/// Date time of the last change
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changed")]
		public System.Nullable<System.DateTimeOffset> Changed { get; set; }
		
		/// <summary>
		/// Custom description for the resource
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="desc")]
		public string Desc { get; set; } = "";
		
		/// <summary>
		/// Object id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Custom name for the resource
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; } = "";
	}
	
	/// <summary>
	/// Collection for the next billing period is autommatic/manual
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AccountAutoCollection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="on")]
		on = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="off")]
		off = 1,
	}
	
	/// <summary>
	/// Unit of billing period
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BillingPeriodUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="month")]
		month = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="year")]
		year = 1,
	}
	
	/// <summary>
	/// Multi-environment targets can identify environments using this property.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Environment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="testing")]
		testing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="production")]
		production = 1,
	}
	
	/// <summary>
	/// Type of object in the event content.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EventObjectType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="user")]
		user = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="target")]
		target = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="scan")]
		scan = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="finding")]
		finding = 3,
	}
	
	/// <summary>
	/// Event type:
	///- `user_created` new user added to account
	///- `user_deleted` user deleted from account
	///- `target_created` new target added to account
	///- `target_deleted` target deleted from account
	///- `target_verified` target ownership verified
	///- `target_verification_failed` target ownership verification failed
	///- `scan_started` scan started on target
	///- `scan_canceled` scan on target canceled
	///- `scan_completed` scan finished with successfuly
	///- `scan_failed` scan finished unsuccessfuly
	///- `finding_detected` new finding detected (not found before)
	///- `finding_fixed` finding was fixed
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="user_created")]
		user_created = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="user_deleted")]
		user_deleted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="target_created")]
		target_created = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="target_deleted")]
		target_deleted = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="target_verified")]
		target_verified = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="target_verification_failed")]
		target_verification_failed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="scan_started")]
		scan_started = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="scan_canceled")]
		scan_canceled = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="scan_completed")]
		scan_completed = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="scan_failed")]
		scan_failed = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="finding_detected")]
		finding_detected = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="finding_fixed")]
		finding_fixed = 11,
	}
	
	/// <summary>
	/// An insertion point is the place in the HTTP request where the
	///malicious payload is injected to exploit the vulnerability.
	///  * cookie - Payload injected into the value of an HTTP cookie
	///  * header - Payload injected into the header of an HTTP request
	///  * parameter - Payload injected into the value of a query string
	///  parameter
	///  * arbitrary_url_param - Payload injected into the value of an
	///  arbitrarily added query string parameter
	///  * url_filename - Payload injected into the URL filename part
	///  * url_folder - Payload injected into the URL folder part
	///  * multipart_parameter - Payload is inserted into the value of a
	///  parameter attribute within a multi-part message body (such as
	///  the name of an uploaded file).
	///  * <empty> - No payload to inject.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FindingInsertionPoint
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cookie")]
		cookie = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="header")]
		header = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="parameter")]
		parameter = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="arbitrary_url_param_name")]
		arbitrary_url_param_name = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="url_path_folder")]
		url_path_folder = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="")]
		_ = 5,
	}
	
	/// <summary>
	/// HTTP method
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Method
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GET")]
		GET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPTIONS")]
		OPTIONS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POST")]
		POST = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PUT")]
		PUT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PATCH")]
		PATCH = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETE")]
		DELETE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HEAD")]
		HEAD = 6,
	}
	
	/// <summary>
	/// * per_unit - each target is paid independently
	///* flat_fee - targets are paid as a pool
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PlanChargeModel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="per_unit")]
		per_unit = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="flat_fee")]
		flat_fee = 1,
	}
	
	/// <summary>
	/// Scan recurrence:
	///  * d - daily
	///  * w - weekly
	///  * m - monthly
	///  * q - quarterly
	///  * '' - no recurrence
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Recurrence
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="d")]
		d = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="w")]
		w = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="m")]
		m = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="q")]
		q = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="")]
		_ = 4,
	}
	
	/// <summary>
	/// * default - default report, no extra information added
	///* owasp - adds table on OWASP Top 10 most critical web application risks
	///* pci - adds table on PCI requirements
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReportType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="owasp")]
		owasp = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pci")]
		pci = 2,
	}
	
	/// <summary>
	/// * lightning - fast simple scan
	///* normal - default profile
	///* full - does everything the default profile does and adds boolean based
	///SQL injection tests
	///* safe - doesn't use any content changing methods (no POST, DELETE, etc)
	///and tries fewer payloads for SQL injection tests
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ScanProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="safe")]
		safe = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="normal")]
		normal = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="full")]
		full = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lightning")]
		lightning = 3,
	}
	
	/// <summary>
	/// Type of verification:
	///* dns - we look or a TXT record on the host you registered containing
	///`Probely=<verification_token>`
	///* file - on the root of the path you registered we look for a file
	///named `<verification token>` containing `Probely`.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VerificationMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dns")]
		dns = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="file")]
		file = 1,
	}
	
	/// <summary>
	/// Type of verification:
	///* dns - we look or a TXT record on the host you registered containing
	///`Probely=<verification_token>`
	///* file - on the root of the path you registered we look for a file
	///named `<verification token>` containing `Probely`.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VerificationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dns")]
		dns = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="file")]
		file = 1,
	}
	
	/// <summary>
	/// API version for the webhook
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WebhookApiVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="v1")]
		v1 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Email
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EmailToken
	{
		
		/// <summary>
		/// Reset token received in the user email
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JiraCloudFinding
	{
		
		/// <summary>
		/// Jira issue id connected to this finding
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issue_id")]
		public string Issue_id { get; set; }
		
		/// <summary>
		/// Selective sync active for this finding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selective_sync")]
		public System.Nullable<System.Boolean> Selective_sync { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JiraCloudScope
	{
		
		/// <summary>
		/// Is this target allowed Jira integration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allow_jira")]
		public System.Nullable<System.Boolean> Allow_jira { get; set; }
		
		/// <summary>
		/// Automatically synchronise all findings to Jira issues.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auto_sync")]
		public System.Nullable<System.Boolean> Auto_sync { get; set; }
		
		/// <summary>
		/// Id of the issue type to be created in Jira.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issue_type_id")]
		public string Issue_type_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priority_mapping")]
		public Jira_priority_mapping Priority_mapping { get; set; }
		
		/// <summary>
		/// Id of the Jira project where issues for this target will be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="project_id")]
		public string Project_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status_mapping")]
		public Jira_status_mapping Status_mapping { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JiraServerFinding
	{
		
		/// <summary>
		/// Jira issue id connected to this finding
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issue_id")]
		public string Issue_id { get; set; }
		
		/// <summary>
		/// Selective sync active for this finding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selective_sync")]
		public System.Nullable<System.Boolean> Selective_sync { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JiraServerScope
	{
		
		/// <summary>
		/// Is this target allowed Jira integration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allow_jira")]
		public System.Nullable<System.Boolean> Allow_jira { get; set; }
		
		/// <summary>
		/// Automatically synchronise all findings to Jira issues.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auto_sync")]
		public System.Nullable<System.Boolean> Auto_sync { get; set; }
		
		/// <summary>
		/// Id of the issue type to be created in Jira.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issue_type_id")]
		public string Issue_type_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priority_mapping")]
		public Jira_priority_mapping Priority_mapping { get; set; }
		
		/// <summary>
		/// Id of the Jira project where issues for this target will be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="project_id")]
		public string Project_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status_mapping")]
		public Jira_status_mapping Status_mapping { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PasswordChange
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="confpassword")]
		public object Confpassword { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="current_password")]
		public object Current_password { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public object Password { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PasswordSet
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="confpassword")]
		public object Confpassword { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public object Password { get; set; }
		
		/// <summary>
		/// Reset token received in the user email
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScanOptions
	{
		
		/// <summary>
		/// Override the target's `scan_profile`.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scan_profile")]
		public FindingBulkRetestScan_profile Scan_profile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SiteVerify
	{
		
		/// <summary>
		/// Type of verification:
		///* dns - we look or a TXT record on the host you registered containing
		///`Probely=<verification_token>`
		///* file - on the root of the path you registered we look for a file
		///named `<verification token>` containing `Probely`.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public AssetVerification_method Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Token
	{
		
		/// <summary>
		/// Authentication token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token1 { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieve account information
		/// AccountGet account/
		/// </summary>
		/// <returns>Account data</returns>
		public async Task<Account> AccountGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Authenticate user
		/// The received token should be used for authenticated requests by including in the Authorization header as `Authorization: JWT <token>`.
		/// 
		/// AuthObtainPost auth/obtain/
		/// </summary>
		/// <returns>Token and respective time to live</returns>
		public async Task<AuthObtainPostReturn> AuthObtainPostAsync(Login requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "auth/obtain/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AuthObtainPostReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Replace token with a new one
		/// AuthRefreshPost auth/refresh/
		/// </summary>
		/// <returns>Token and respective time to live</returns>
		public async Task<AuthRefreshPostReturn> AuthRefreshPostAsync(Token requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "auth/refresh/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AuthRefreshPostReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Revoke a token
		/// AuthRevokePost auth/revoke/
		/// </summary>
		/// <returns>Token and respective time to live</returns>
		public async Task<AuthRevokePostReturn> AuthRevokePostAsync(Token requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "auth/revoke/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AuthRevokePostReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Verify a token
		/// Check for the validity of a user token.
		/// 
		/// AuthVerifyPost auth/verify/
		/// </summary>
		/// <returns>Token and respective time to live</returns>
		public async Task<AuthVerifyPostReturn> AuthVerifyPostAsync(Token requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "auth/verify/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AuthVerifyPostReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve billing information
		/// BillingGet billing/
		/// </summary>
		/// <returns>Billing information</returns>
		public async Task<Billing> BillingGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "billing/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Billing>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Partial update billing information
		/// BillingPatch billing/
		/// </summary>
		/// <returns>Billing information</returns>
		public async Task<Billing> BillingPatchAsync(Billing requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "billing/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Billing>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update billing information
		/// BillingPut billing/
		/// </summary>
		/// <returns>Billing information</returns>
		public async Task<Billing> BillingPutAsync(Billing requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "billing/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Billing>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Action that should be taken to enable the selected targets
		/// BillingActionsPost billing/actions/
		/// </summary>
		/// <returns>Required action to enable targets</returns>
		public async Task<Action> BillingActionsPostAsync(string[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "billing/actions/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Action>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Estimate costs of updating a subscription
		/// BillingEstimatePost billing/estimate/
		/// </summary>
		/// <returns>Charges</returns>
		public async Task<Invoice> BillingEstimatePostAsync(Subscription requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "billing/estimate/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Invoice>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a subscription
		/// BillingSubscribePost billing/subscribe/
		/// </summary>
		/// <returns>Charges</returns>
		public async Task<Invoice> BillingSubscribePostAsync(Subscription requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "billing/subscribe/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Invoice>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Check validity of password reset token
		/// CheckPost check/
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CheckPostReturn> CheckPostAsync(EmailToken requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "check/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CheckPostReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Enterprise user authentication
		/// The received token should be used for authenticated requests by including in the Authorization header as `Authorization: JWT <token>`.
		/// 
		/// EnterpriseAuthObtainPost enterprise/auth/obtain/
		/// </summary>
		/// <returns>Token and respective time to live</returns>
		public async Task<EnterpriseAuthObtainPostReturn> EnterpriseAuthObtainPostAsync(Login requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "enterprise/auth/obtain/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EnterpriseAuthObtainPostReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Enterprise token refresh
		/// EnterpriseAuthRefreshPost enterprise/auth/refresh/
		/// </summary>
		/// <returns>Token and respective time to live</returns>
		public async Task<EnterpriseAuthRefreshPostReturn> EnterpriseAuthRefreshPostAsync(Token requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "enterprise/auth/refresh/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EnterpriseAuthRefreshPostReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Enterprise token revokation
		/// EnterpriseAuthRevokePost enterprise/auth/revoke/
		/// </summary>
		/// <returns>Token and respective time to live</returns>
		public async Task<EnterpriseAuthRevokePostReturn> EnterpriseAuthRevokePostAsync(Token requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "enterprise/auth/revoke/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EnterpriseAuthRevokePostReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Enterprise token verification
		/// Check for the validity of a user token.
		/// 
		/// EnterpriseAuthVerifyPost enterprise/auth/verify/
		/// </summary>
		/// <returns>Token and respective time to live</returns>
		public async Task<EnterpriseAuthVerifyPostReturn> EnterpriseAuthVerifyPostAsync(Token requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "enterprise/auth/verify/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EnterpriseAuthVerifyPostReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List account events
		/// EventsGet events/
		/// </summary>
		/// <returns>Event list</returns>
		public async Task<EventsGetReturn> EventsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "events/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventsGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve account event
		/// Events_idGet events/{id}/
		/// </summary>
		/// <param name="id">Object Id</param>
		/// <returns>A Probely event</returns>
		public async Task<Event> Events_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "events/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Event>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List frameworks
		/// FrameworksGetByPageAndLengthAndOrderingAndSearch frameworks/
		/// </summary>
		/// <param name="page">Page number within the paginated result set</param>
		/// <param name="length">Number of results to return per page</param>
		/// <param name="ordering">Which field to use when ordering the results, prefix with `-` to invert ordering.
		///</param>
		/// <param name="search">Search term</param>
		/// <returns>Framework list</returns>
		public async Task<FrameworksGetByPageAndLengthAndOrderingAndSearchReturn> FrameworksGetByPageAndLengthAndOrderingAndSearchAsync(int page, int length, string ordering, string search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "frameworks/?page="+page+"&length="+length+"&ordering=" + (ordering==null? "" : System.Uri.EscapeDataString(ordering))+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FrameworksGetByPageAndLengthAndOrderingAndSearchReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve framework
		/// Frameworks_idGet frameworks/{id}/
		/// </summary>
		/// <param name="id">Object Id</param>
		/// <returns>Framework object</returns>
		public async Task<Framework> Frameworks_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "frameworks/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Framework>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Integrations available and installed in the account
		/// IntegrationsGet integrations/
		/// </summary>
		/// <returns>Available and installed integrations in the account</returns>
		public async Task<Integrations> IntegrationsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "integrations/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Integrations>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Jira Projects
		/// IntegrationsJira_cloudProjectsGet integrations/jira-cloud/projects/
		/// </summary>
		/// <returns>Jira projects</returns>
		public async Task<JiraProject[]> IntegrationsJira_cloudProjectsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "integrations/jira-cloud/projects/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JiraProject[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve project issue types
		/// IntegrationsJira_cloudProjects_project_idIssue_typesGet integrations/jira-cloud/projects/{project_id}/issue_types/
		/// </summary>
		/// <param name="project_id">Jira Project Id</param>
		/// <returns>Jira issue types available in project</returns>
		public async Task<JiraIssueType[]> IntegrationsJira_cloudProjects_project_idIssue_typesGetAsync(string project_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "integrations/jira-cloud/projects/"+ (project_id==null? "" : System.Uri.EscapeDataString(project_id))+"/issue_types/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JiraIssueType[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve issue priorities
		/// IntegrationsJira_cloudProjects_project_idIssue_types_issue_type_idPrioritiesGet integrations/jira-cloud/projects/{project_id}/issue_types/{issue_type_id}/priorities/
		/// </summary>
		/// <param name="project_id">Jira Project Id</param>
		/// <param name="issue_type_id">Jira issue type id</param>
		/// <returns>Jira issue priorities</returns>
		public async Task<JiraIssuePriority[]> IntegrationsJira_cloudProjects_project_idIssue_types_issue_type_idPrioritiesGetAsync(string project_id, string issue_type_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "integrations/jira-cloud/projects/"+ (project_id==null? "" : System.Uri.EscapeDataString(project_id))+"/issue_types/"+ (issue_type_id==null? "" : System.Uri.EscapeDataString(issue_type_id))+"/priorities/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JiraIssuePriority[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve issue statuses
		/// IntegrationsJira_cloudProjects_project_idIssue_types_issue_type_idStatusGet integrations/jira-cloud/projects/{project_id}/issue_types/{issue_type_id}/status/
		/// </summary>
		/// <param name="project_id">Jira Project Id</param>
		/// <param name="issue_type_id">Jira issue type id</param>
		/// <returns>Jira issue statuses</returns>
		public async Task<JiraIssueStatus[]> IntegrationsJira_cloudProjects_project_idIssue_types_issue_type_idStatusGetAsync(string project_id, string issue_type_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "integrations/jira-cloud/projects/"+ (project_id==null? "" : System.Uri.EscapeDataString(project_id))+"/issue_types/"+ (issue_type_id==null? "" : System.Uri.EscapeDataString(issue_type_id))+"/status/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JiraIssueStatus[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Jira Projects
		/// IntegrationsJira_serverProjectsGet integrations/jira-server/projects/
		/// </summary>
		/// <returns>Jira projects</returns>
		public async Task<JiraProject[]> IntegrationsJira_serverProjectsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "integrations/jira-server/projects/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JiraProject[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve project issue types
		/// IntegrationsJira_serverProjects_project_idIssue_typesGet integrations/jira-server/projects/{project_id}/issue_types/
		/// </summary>
		/// <param name="project_id">Jira Project Id</param>
		/// <returns>Jira issue types available in project</returns>
		public async Task<JiraIssueType[]> IntegrationsJira_serverProjects_project_idIssue_typesGetAsync(string project_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "integrations/jira-server/projects/"+ (project_id==null? "" : System.Uri.EscapeDataString(project_id))+"/issue_types/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JiraIssueType[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve issue priorities
		/// IntegrationsJira_serverProjects_project_idIssue_types_issue_type_idPrioritiesGet integrations/jira-server/projects/{project_id}/issue_types/{issue_type_id}/priorities/
		/// </summary>
		/// <param name="project_id">Jira Project Id</param>
		/// <param name="issue_type_id">Jira issue type id</param>
		/// <returns>Jira issue priorities</returns>
		public async Task<JiraIssuePriority[]> IntegrationsJira_serverProjects_project_idIssue_types_issue_type_idPrioritiesGetAsync(string project_id, string issue_type_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "integrations/jira-server/projects/"+ (project_id==null? "" : System.Uri.EscapeDataString(project_id))+"/issue_types/"+ (issue_type_id==null? "" : System.Uri.EscapeDataString(issue_type_id))+"/priorities/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JiraIssuePriority[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve issue statuses
		/// IntegrationsJira_serverProjects_project_idIssue_types_issue_type_idStatusGet integrations/jira-server/projects/{project_id}/issue_types/{issue_type_id}/status/
		/// </summary>
		/// <param name="project_id">Jira Project Id</param>
		/// <param name="issue_type_id">Jira issue type id</param>
		/// <returns>Jira issue statuses</returns>
		public async Task<JiraIssueStatus[]> IntegrationsJira_serverProjects_project_idIssue_types_issue_type_idStatusGetAsync(string project_id, string issue_type_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "integrations/jira-server/projects/"+ (project_id==null? "" : System.Uri.EscapeDataString(project_id))+"/issue_types/"+ (issue_type_id==null? "" : System.Uri.EscapeDataString(issue_type_id))+"/status/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JiraIssueStatus[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List API keys allowed to operate on account
		/// KeysGetByPageAndLengthAndOrderingAndSearch keys/
		/// </summary>
		/// <param name="page">Page number within the paginated result set</param>
		/// <param name="length">Number of results to return per page</param>
		/// <param name="ordering">Which field to use when ordering the results, prefix with `-` to invert ordering.
		///</param>
		/// <param name="search">Search term</param>
		/// <returns>API Key list</returns>
		public async Task<KeysGetByPageAndLengthAndOrderingAndSearchReturn> KeysGetByPageAndLengthAndOrderingAndSearchAsync(int page, int length, string ordering, string search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "keys/?page="+page+"&length="+length+"&ordering=" + (ordering==null? "" : System.Uri.EscapeDataString(ordering))+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<KeysGetByPageAndLengthAndOrderingAndSearchReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create account API key
		/// KeysPost keys/
		/// </summary>
		public async Task KeysPostAsync(APIKey requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "keys/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete account API key
		/// Keys_idDelete keys/{id}/
		/// </summary>
		/// <param name="id">Object Id</param>
		public async Task Keys_idDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "keys/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve account API key
		/// Keys_idGet keys/{id}/
		/// </summary>
		/// <param name="id">Object Id</param>
		/// <returns>API Key object</returns>
		public async Task<APIKey> Keys_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "keys/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIKey>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List labels
		/// LabelsGetByPageAndLengthAndOrderingAndSearch labels/
		/// </summary>
		/// <param name="page">Page number within the paginated result set</param>
		/// <param name="length">Number of results to return per page</param>
		/// <param name="ordering">Which field to use when ordering the results, prefix with `-` to invert ordering.
		///</param>
		/// <param name="search">Search term</param>
		/// <returns>Label list</returns>
		public async Task<LabelsGetByPageAndLengthAndOrderingAndSearchReturn> LabelsGetByPageAndLengthAndOrderingAndSearchAsync(int page, int length, string ordering, string search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "labels/?page="+page+"&length="+length+"&ordering=" + (ordering==null? "" : System.Uri.EscapeDataString(ordering))+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LabelsGetByPageAndLengthAndOrderingAndSearchReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create label
		/// LabelsPost labels/
		/// </summary>
		public async Task LabelsPostAsync(Label requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "labels/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete label
		/// Labels_idDelete labels/{id}/
		/// </summary>
		/// <param name="id">Object Id</param>
		public async Task Labels_idDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "labels/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve framework
		/// Labels_idGet labels/{id}/
		/// </summary>
		/// <param name="id">Object Id</param>
		/// <returns>Label object</returns>
		public async Task<Label> Labels_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "labels/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Label>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Partial update
		/// Labels_idPatch labels/{id}/
		/// </summary>
		/// <param name="id">Object Id</param>
		/// <returns>Label object</returns>
		public async Task<Label> Labels_idPatchAsync(string id, Label requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "labels/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Label>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update label
		/// Labels_idPut labels/{id}/
		/// </summary>
		/// <param name="id">Object Id</param>
		/// <returns>Label object</returns>
		public async Task<Label> Labels_idPutAsync(string id, Label requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "labels/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Label>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Subscription plans
		/// PlansGet plans/
		/// </summary>
		/// <returns>Plan list</returns>
		public async Task<Plan[]> PlansGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "plans/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Plan[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// User data
		/// ProfileGetByPageAndLengthAndOrderingAndSearch profile/
		/// </summary>
		/// <param name="page">Page number within the paginated result set</param>
		/// <param name="length">Number of results to return per page</param>
		/// <param name="ordering">Which field to use when ordering the results, prefix with `-` to invert ordering.
		///</param>
		/// <param name="search">Search term</param>
		/// <returns>User object</returns>
		public async Task<User> ProfileGetByPageAndLengthAndOrderingAndSearchAsync(int page, int length, string ordering, string search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "profile/?page="+page+"&length="+length+"&ordering=" + (ordering==null? "" : System.Uri.EscapeDataString(ordering))+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Change user password
		/// Our password policy requires a minimum password length of 10 chars with
		/// at least one symbol or number.
		/// 
		/// ProfileChange_passwordPost profile/change_password/
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ProfileChange_passwordPostReturn> ProfileChange_passwordPostAsync(PasswordChange requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "profile/change_password/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProfileChange_passwordPostReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Send reset password email
		/// ResetPost reset/
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ResetPostReturn> ResetPostAsync(Email requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reset/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResetPostReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Reset password after asking for a reset (with the token sent by email).
		/// 
		/// SetpasswordPost setpassword/
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SetpasswordPostReturn> SetpasswordPostAsync(PasswordSet requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setpassword/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SetpasswordPostReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Available actions for the selected targets
		/// Target_actionsPost target-actions/
		/// </summary>
		/// <returns>Available actions for targets</returns>
		public async Task<Target_actionsPostReturn[]> Target_actionsPostAsync(string[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "target-actions/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Target_actionsPostReturn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List targets
		/// TargetsGetByPageAndLengthAndOrderingAndSearch targets/
		/// </summary>
		/// <param name="page">Page number within the paginated result set</param>
		/// <param name="length">Number of results to return per page</param>
		/// <param name="ordering">Which field to use when ordering the results, prefix with `-` to invert ordering.
		///</param>
		/// <param name="search">Search term</param>
		/// <returns>List of targets</returns>
		public async Task<TargetsGetByPageAndLengthAndOrderingAndSearchReturn> TargetsGetByPageAndLengthAndOrderingAndSearchAsync(int page, int length, string ordering, string search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/?page="+page+"&length="+length+"&ordering=" + (ordering==null? "" : System.Uri.EscapeDataString(ordering))+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TargetsGetByPageAndLengthAndOrderingAndSearchReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create target
		/// TargetsPost targets/
		/// </summary>
		public async Task TargetsPostAsync(Target requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Activate targets
		/// TargetsActivatePost targets/activate/
		/// </summary>
		/// <returns>Target id list</returns>
		public async Task<string[]> TargetsActivatePostAsync(string[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/activate/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Average fix time graph data (all targets)
		/// TargetsAllAverage_fix_timeGet targets/all/average_fix_time/
		/// </summary>
		/// <returns>Average fix time plot data</returns>
		public async Task<TargetsAllAverage_fix_timeGetReturn> TargetsAllAverage_fix_timeGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/all/average_fix_time/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TargetsAllAverage_fix_timeGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Targets with open vulnerabilities pie chart data
		/// TargetsAllNeeds_attention_pieGet targets/all/needs_attention_pie/
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TargetsAllNeeds_attention_pieGetReturn> TargetsAllNeeds_attention_pieGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/all/needs_attention_pie/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TargetsAllNeeds_attention_pieGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Targets with open vulnerabilities
		/// TargetsAllNeeds_attention_topGet targets/all/needs_attention_top/
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TargetsAllNeeds_attention_topGetReturn[]> TargetsAllNeeds_attention_topGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/all/needs_attention_top/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TargetsAllNeeds_attention_topGetReturn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Risk trend graph data (all targets)
		/// TargetsAllRisk_trendGet targets/all/risk_trend/
		/// </summary>
		/// <returns>Risk trend plot data</returns>
		public async Task<TargetsAllRisk_trendGetReturn[]> TargetsAllRisk_trendGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/all/risk_trend/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TargetsAllRisk_trendGetReturn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List scans for all targets
		/// TargetsAllScansGetByPageAndLengthAndOrderingAndSearchAndStartedAndStatus targets/all/scans/
		/// </summary>
		/// <param name="page">Page number within the paginated result set</param>
		/// <param name="length">Number of results to return per page</param>
		/// <param name="ordering">Which field to use when ordering the results, prefix with `-` to invert ordering.
		///</param>
		/// <param name="search">Search term</param>
		/// <param name="started">Filter by scan start dates</param>
		/// <param name="status">Filter by scan statuses</param>
		/// <returns>Scan list</returns>
		public async Task<TargetsAllScansGetByPageAndLengthAndOrderingAndSearchAndStartedAndStatusReturn> TargetsAllScansGetByPageAndLengthAndOrderingAndSearchAndStartedAndStatusAsync(int page, int length, string ordering, string search, string[] started, ScanStatus status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/all/scans/?page="+page+"&length="+length+"&ordering=" + (ordering==null? "" : System.Uri.EscapeDataString(ordering))+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&"+string.Join("&", started.Select(z => $"started={System.Uri.EscapeDataString(z.ToString())}"))+"&status=" + status;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TargetsAllScansGetByPageAndLengthAndOrderingAndSearchAndStartedAndStatusReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List scheduled scans for all targets expanding recurrence
		/// TargetsAllScheduledscansExpandedGetByLength targets/all/scheduledscans/expanded/
		/// </summary>
		/// <param name="length">Number of results to return per page</param>
		/// <returns>Next scheduled scans</returns>
		public async Task<TargetsAllScheduledscansExpandedGetByLengthReturn> TargetsAllScheduledscansExpandedGetByLengthAsync(int length, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/all/scheduledscans/expanded/?length="+length;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TargetsAllScheduledscansExpandedGetByLengthReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Severity trend graph data (all targets)
		/// TargetsAllSeverity_trendGet targets/all/severity_trend/
		/// </summary>
		/// <returns>Severity trend plot data</returns>
		public async Task<TargetsAllSeverity_trendGetReturn> TargetsAllSeverity_trendGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/all/severity_trend/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TargetsAllSeverity_trendGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Top 5 vulnerabilities (all targets).
		/// TargetsAllTop_vulnsGet targets/all/top_vulns/
		/// </summary>
		/// <returns>Top vulnerabilities plot data</returns>
		public async Task<TargetsAllTop_vulnsGetReturn[]> TargetsAllTop_vulnsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/all/top_vulns/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TargetsAllTop_vulnsGetReturn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Archive targets
		/// TargetsArchivePost targets/archive/
		/// </summary>
		/// <returns>Target id list</returns>
		public async Task<string[]> TargetsArchivePostAsync(string[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/archive/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List archived targets
		/// TargetsArchivedPost targets/archived/
		/// </summary>
		/// <returns>List of targets</returns>
		public async Task<TargetsArchivedPostReturn> TargetsArchivedPostAsync(string[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/archived/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TargetsArchivedPostReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete target
		/// Targets_idDelete targets/{id}/
		/// </summary>
		/// <param name="id">Object Id</param>
		public async Task Targets_idDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve target
		/// Targets_idGet targets/{id}/
		/// </summary>
		/// <param name="id">Object Id</param>
		/// <returns>Target object</returns>
		public async Task<Target> Targets_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Target>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Partial update target
		/// Targets_idPatch targets/{id}/
		/// </summary>
		/// <param name="id">Object Id</param>
		/// <returns>Target object</returns>
		public async Task<Target> Targets_idPatchAsync(string id, Target requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Target>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update target
		/// Targets_idPut targets/{id}/
		/// </summary>
		/// <param name="id">Object Id</param>
		/// <returns>Target object</returns>
		public async Task<Target> Targets_idPutAsync(string id, Target requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Target>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List target's assets
		/// Targets_target_idAssetsGetByPageAndLengthAndOrderingAndSearch targets/{target_id}/assets/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="page">Page number within the paginated result set</param>
		/// <param name="length">Number of results to return per page</param>
		/// <param name="ordering">Which field to use when ordering the results, prefix with `-` to invert ordering.
		///</param>
		/// <param name="search">Search term</param>
		/// <returns>Asset list</returns>
		public async Task<Targets_target_idAssetsGetByPageAndLengthAndOrderingAndSearchReturn> Targets_target_idAssetsGetByPageAndLengthAndOrderingAndSearchAsync(string target_id, int page, int length, string ordering, string search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/assets/&page="+page+"&length="+length+"&ordering=" + (ordering==null? "" : System.Uri.EscapeDataString(ordering))+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Targets_target_idAssetsGetByPageAndLengthAndOrderingAndSearchReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create new asset
		/// Targets_target_idAssetsPost targets/{target_id}/assets/
		/// </summary>
		/// <param name="target_id">Target id</param>
		public async Task Targets_target_idAssetsPostAsync(string target_id, Asset requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/assets/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete asset
		/// Targets_target_idAssets_idDelete targets/{target_id}/assets/{id}/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		public async Task Targets_target_idAssets_idDeleteAsync(string target_id, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/assets/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve asset
		/// Targets_target_idAssets_idGet targets/{target_id}/assets/{id}/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		/// <returns>Asset object</returns>
		public async Task<Asset> Targets_target_idAssets_idGetAsync(string target_id, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/assets/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Asset>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Partial update assets
		/// Targets_target_idAssets_idPatch targets/{target_id}/assets/{id}/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		/// <returns>Asset object</returns>
		public async Task<Asset> Targets_target_idAssets_idPatchAsync(string target_id, string id, Asset requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/assets/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Asset>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update asset
		/// Targets_target_idAssets_idPut targets/{target_id}/assets/{id}/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		/// <returns>Asset object</returns>
		public async Task<Asset> Targets_target_idAssets_idPutAsync(string target_id, string id, Asset requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/assets/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Asset>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Verify asset ownership
		/// Targets_target_idAssets_idVerifyPost targets/{target_id}/assets/{id}/verify/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		/// <returns>Success</returns>
		public async Task<Targets_target_idAssets_idVerifyPostReturn> Targets_target_idAssets_idVerifyPostAsync(string target_id, string id, SiteVerify requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/assets/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/verify/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Targets_target_idAssets_idVerifyPostReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Average vulnerability trend graph data
		/// Targets_target_idAverage_fix_timeGet targets/{target_id}/average_fix_time/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <returns>Average fix time plot data</returns>
		public async Task<Targets_target_idAverage_fix_timeGetReturn> Targets_target_idAverage_fix_timeGetAsync(string target_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/average_fix_time/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Targets_target_idAverage_fix_timeGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List target events
		/// Targets_target_idEventsGet targets/{target_id}/events/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <returns>Event list</returns>
		public async Task<Targets_target_idEventsGetReturn> Targets_target_idEventsGetAsync(string target_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/events/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Targets_target_idEventsGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve target event
		/// Targets_target_idEvents_idGet targets/{target_id}/events/{id}/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		/// <returns>A Probely event</returns>
		public async Task<Event> Targets_target_idEvents_idGetAsync(string target_id, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/events/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Event>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List target findings
		/// Targets_target_idFindingsGetByScanAndSeverityAndStateAndAssigneeAndLabelAndPageAndLengthAndOrderingAndSearch targets/{target_id}/findings/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="scan">Filter by scan ids</param>
		/// <param name="severity">Filter by finding severity</param>
		/// <param name="state">Filter by finding states</param>
		/// <param name="assignee">Filter by assignee ids</param>
		/// <param name="label">Filter by finding labels</param>
		/// <param name="page">Page number within the paginated result set</param>
		/// <param name="length">Number of results to return per page</param>
		/// <param name="ordering">Which field to use when ordering the results, prefix with `-` to invert ordering.
		///</param>
		/// <param name="search">Search term</param>
		/// <returns>Finding list</returns>
		public async Task<Targets_target_idFindingsGetByScanAndSeverityAndStateAndAssigneeAndLabelAndPageAndLengthAndOrderingAndSearchReturn> Targets_target_idFindingsGetByScanAndSeverityAndStateAndAssigneeAndLabelAndPageAndLengthAndOrderingAndSearchAsync(string target_id, string[] scan, FindingSeverity severity, FindingState state, string[] assignee, string[] label, int page, int length, string ordering, string search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/findings/&"+string.Join("&", scan.Select(z => $"scan={System.Uri.EscapeDataString(z.ToString())}"))+"&severity=" + severity+"&state=" + state+"&"+string.Join("&", assignee.Select(z => $"assignee={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", label.Select(z => $"label={System.Uri.EscapeDataString(z.ToString())}"))+"&page="+page+"&length="+length+"&ordering=" + (ordering==null? "" : System.Uri.EscapeDataString(ordering))+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Targets_target_idFindingsGetByScanAndSeverityAndStateAndAssigneeAndLabelAndPageAndLengthAndOrderingAndSearchReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Finding report
		/// Targets_target_idFindingsBulkReportPost targets/{target_id}/findings/bulk/report/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <returns>Token to retrieve report.
		///</returns>
		public async Task Targets_target_idFindingsBulkReportPostAsync(string target_id, FindingBulkIds requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/findings/bulk/report/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Bulk retest findings
		/// Targets_target_idFindingsBulkRetestPost targets/{target_id}/findings/bulk/retest/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <returns>List of assessment IDs.
		///</returns>
		public async Task Targets_target_idFindingsBulkRetestPostAsync(string target_id, FindingBulkRetest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/findings/bulk/retest/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Bulk update findings
		/// Targets_target_idFindingsBulkUpdatePatch targets/{target_id}/findings/bulk/update/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <returns>Success</returns>
		public async Task Targets_target_idFindingsBulkUpdatePatchAsync(string target_id, FindingBulkUpdate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/findings/bulk/update/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve finding report PDF format
		/// Targets_target_idFindingsReportGetByToken targets/{target_id}/findings/report/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="token">Token received from the finding report endpoint.</param>
		/// <returns>Scan report PDF</returns>
		public async Task Targets_target_idFindingsReportGetByTokenAsync(string target_id, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/findings/report/&token=" + (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve finding
		/// Targets_target_idFindings_idGet targets/{target_id}/findings/{id}/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		/// <returns>Finding object</returns>
		public async Task<Finding> Targets_target_idFindings_idGetAsync(string target_id, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/findings/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Finding>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Partial update finding
		/// Targets_target_idFindings_idPatch targets/{target_id}/findings/{id}/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		/// <returns>Finding object</returns>
		public async Task<Finding> Targets_target_idFindings_idPatchAsync(string target_id, string id, Finding requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/findings/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Finding>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update finding
		/// Targets_target_idFindings_idPut targets/{target_id}/findings/{id}/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		/// <returns>Finding object</returns>
		public async Task<Finding> Targets_target_idFindings_idPutAsync(string target_id, string id, Finding requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/findings/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Finding>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve Jira Cloud finding configuration
		/// Targets_target_idFindings_idIntegrationsJira_cloudGet targets/{target_id}/findings/{id}/integrations/jira-cloud/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		/// <returns>Jira Cloud Finding configuration</returns>
		public async Task<JiraFinding> Targets_target_idFindings_idIntegrationsJira_cloudGetAsync(string target_id, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/findings/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/integrations/jira-cloud/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JiraFinding>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Jira Cloud finding configuration
		/// Targets_target_idFindings_idIntegrationsJira_cloudPatch targets/{target_id}/findings/{id}/integrations/jira-cloud/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		/// <returns>Jira Cloud Finding configuration</returns>
		public async Task<JiraFinding> Targets_target_idFindings_idIntegrationsJira_cloudPatchAsync(string target_id, string id, JiraCloudFinding requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/findings/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/integrations/jira-cloud/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JiraFinding>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update Jira Cloud finding configuration
		/// Targets_target_idFindings_idIntegrationsJira_cloudPut targets/{target_id}/findings/{id}/integrations/jira-cloud/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		/// <returns>Jira Cloud Finding configuration</returns>
		public async Task<JiraFinding> Targets_target_idFindings_idIntegrationsJira_cloudPutAsync(string target_id, string id, JiraCloudFinding requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/findings/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/integrations/jira-cloud/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JiraFinding>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve Jira Server finding configuration
		/// Targets_target_idFindings_idIntegrationsJira_serverGet targets/{target_id}/findings/{id}/integrations/jira-server/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		/// <returns>Jira Server finding configuration</returns>
		public async Task<JiraFinding> Targets_target_idFindings_idIntegrationsJira_serverGetAsync(string target_id, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/findings/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/integrations/jira-server/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JiraFinding>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Jira Server finding configuration
		/// Targets_target_idFindings_idIntegrationsJira_serverPatch targets/{target_id}/findings/{id}/integrations/jira-server/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		/// <returns>Jira Server finding configuration</returns>
		public async Task<JiraFinding> Targets_target_idFindings_idIntegrationsJira_serverPatchAsync(string target_id, string id, JiraServerFinding requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/findings/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/integrations/jira-server/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JiraFinding>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update Jira Server finding configuration
		/// Targets_target_idFindings_idIntegrationsJira_serverPut targets/{target_id}/findings/{id}/integrations/jira-server/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		/// <returns>Jira Server finding configuration</returns>
		public async Task<JiraFinding> Targets_target_idFindings_idIntegrationsJira_serverPutAsync(string target_id, string id, JiraServerFinding requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/findings/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/integrations/jira-server/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JiraFinding>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Finding activity log.
		/// Finding activity log.
		/// Targets_target_idFindings_idLogGet targets/{target_id}/findings/{id}/log/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		/// <returns>Finding activity log</returns>
		public async Task<Activity[]> Targets_target_idFindings_idLogGetAsync(string target_id, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/findings/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/log/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Activity[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retest finding
		/// Targets_target_idFindings_idRetestPost targets/{target_id}/findings/{id}/retest/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		public async Task Targets_target_idFindings_idRetestPostAsync(string target_id, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/findings/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/retest/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Integrations available and installed for the target
		/// Targets_target_idIntegrationsGet targets/{target_id}/integrations/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <returns>Available and installed integrations for the target</returns>
		public async Task<Integrations> Targets_target_idIntegrationsGetAsync(string target_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/integrations/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Integrations>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve Jira Cloud Target configuration
		/// Targets_target_idIntegrationsJira_cloudGet targets/{target_id}/integrations/jira-cloud/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <returns>Jira Cloud Target configuration</returns>
		public async Task<JiraScope> Targets_target_idIntegrationsJira_cloudGetAsync(string target_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/integrations/jira-cloud/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JiraScope>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Jira Cloud target configuration
		/// Targets_target_idIntegrationsJira_cloudPatch targets/{target_id}/integrations/jira-cloud/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <returns>Jira Cloud Target configuration</returns>
		public async Task<JiraScope> Targets_target_idIntegrationsJira_cloudPatchAsync(string target_id, JiraCloudScope requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/integrations/jira-cloud/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JiraScope>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update Jira Cloud target configuration
		/// Targets_target_idIntegrationsJira_cloudPut targets/{target_id}/integrations/jira-cloud/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <returns>Jira Cloud Target configuration</returns>
		public async Task<JiraScope> Targets_target_idIntegrationsJira_cloudPutAsync(string target_id, JiraCloudScope requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/integrations/jira-cloud/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JiraScope>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve Jira Server Target configuration
		/// Targets_target_idIntegrationsJira_serverGet targets/{target_id}/integrations/jira-server/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <returns>Jira Server target configuration</returns>
		public async Task<JiraScope> Targets_target_idIntegrationsJira_serverGetAsync(string target_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/integrations/jira-server/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JiraScope>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Jira Server target configuration
		/// Targets_target_idIntegrationsJira_serverPatch targets/{target_id}/integrations/jira-server/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <returns>Jira Server target configuration</returns>
		public async Task<JiraScope> Targets_target_idIntegrationsJira_serverPatchAsync(string target_id, JiraServerScope requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/integrations/jira-server/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JiraScope>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update Jira Server target configuration
		/// Targets_target_idIntegrationsJira_serverPut targets/{target_id}/integrations/jira-server/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <returns>Jira Server target configuration</returns>
		public async Task<JiraScope> Targets_target_idIntegrationsJira_serverPutAsync(string target_id, JiraServerScope requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/integrations/jira-server/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JiraScope>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve slack integration data
		/// Targets_target_idIntegrationsSlackGet targets/{target_id}/integrations/slack/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <returns>Slack integration</returns>
		public async Task<Slack> Targets_target_idIntegrationsSlackGetAsync(string target_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/integrations/slack/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Slack>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update slack integration data
		/// Targets_target_idIntegrationsSlackPatch targets/{target_id}/integrations/slack/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <returns>Slack integration</returns>
		public async Task<Slack> Targets_target_idIntegrationsSlackPatchAsync(string target_id, Slack requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/integrations/slack/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Slack>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update slack integration data
		/// Targets_target_idIntegrationsSlackPut targets/{target_id}/integrations/slack/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <returns>Slack integration</returns>
		public async Task<Slack> Targets_target_idIntegrationsSlackPutAsync(string target_id, Slack requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/integrations/slack/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Slack>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List target specific API keys
		/// Targets_target_idKeysGetByPageAndLengthAndOrderingAndSearch targets/{target_id}/keys/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="page">Page number within the paginated result set</param>
		/// <param name="length">Number of results to return per page</param>
		/// <param name="ordering">Which field to use when ordering the results, prefix with `-` to invert ordering.
		///</param>
		/// <param name="search">Search term</param>
		/// <returns>API Key list</returns>
		public async Task<Targets_target_idKeysGetByPageAndLengthAndOrderingAndSearchReturn> Targets_target_idKeysGetByPageAndLengthAndOrderingAndSearchAsync(string target_id, int page, int length, string ordering, string search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/keys/&page="+page+"&length="+length+"&ordering=" + (ordering==null? "" : System.Uri.EscapeDataString(ordering))+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Targets_target_idKeysGetByPageAndLengthAndOrderingAndSearchReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create target API key
		/// Targets_target_idKeysPost targets/{target_id}/keys/
		/// </summary>
		/// <param name="target_id">Target id</param>
		public async Task Targets_target_idKeysPostAsync(string target_id, APIKey requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/keys/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete target API key
		/// Targets_target_idKeys_idDelete targets/{target_id}/keys/{id}/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		public async Task Targets_target_idKeys_idDeleteAsync(string target_id, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/keys/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve target API key
		/// Targets_target_idKeys_idGet targets/{target_id}/keys/{id}/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		/// <returns>API Key object</returns>
		public async Task<APIKey> Targets_target_idKeys_idGetAsync(string target_id, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/keys/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIKey>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Risk trend graph data
		/// Targets_target_idRisk_trendGet targets/{target_id}/risk_trend/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <returns>Risk trend plot data</returns>
		public async Task<Targets_target_idRisk_trendGetReturn[]> Targets_target_idRisk_trendGetAsync(string target_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/risk_trend/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Targets_target_idRisk_trendGetReturn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start a scan on the target
		/// Targets_target_idScan_nowPost targets/{target_id}/scan_now/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <returns>Scan object</returns>
		public async Task<Scan> Targets_target_idScan_nowPostAsync(string target_id, ScanOptions requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/scan_now/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Scan>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List scans
		/// Targets_target_idScansGetByPageAndLengthAndOrderingAndSearchAndStartedAndStatus targets/{target_id}/scans/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="page">Page number within the paginated result set</param>
		/// <param name="length">Number of results to return per page</param>
		/// <param name="ordering">Which field to use when ordering the results, prefix with `-` to invert ordering.
		///</param>
		/// <param name="search">Search term</param>
		/// <param name="started">Filter by scan start dates</param>
		/// <param name="status">Filter by scan statuses</param>
		/// <returns>Scan list</returns>
		public async Task<Targets_target_idScansGetByPageAndLengthAndOrderingAndSearchAndStartedAndStatusReturn> Targets_target_idScansGetByPageAndLengthAndOrderingAndSearchAndStartedAndStatusAsync(string target_id, int page, int length, string ordering, string search, string[] started, ScanStatus status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/scans/&page="+page+"&length="+length+"&ordering=" + (ordering==null? "" : System.Uri.EscapeDataString(ordering))+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&"+string.Join("&", started.Select(z => $"started={System.Uri.EscapeDataString(z.ToString())}"))+"&status=" + status;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Targets_target_idScansGetByPageAndLengthAndOrderingAndSearchAndStartedAndStatusReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Dates where scans have ocurred
		/// Targets_target_idScansDatesGet targets/{target_id}/scans/dates/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <returns>Dates for which there are scans</returns>
		public async Task<string[]> Targets_target_idScansDatesGetAsync(string target_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/scans/dates/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Scan page
		/// Given a date return the page number
		/// Targets_target_idScansRetrieve_pageGetByLengthAndDate targets/{target_id}/scans/retrieve_page/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="length">Number of results to return per page</param>
		/// <param name="date">Date</param>
		/// <returns>Page number for supplied date</returns>
		public async Task<Targets_target_idScansRetrieve_pageGetByLengthAndDateReturn> Targets_target_idScansRetrieve_pageGetByLengthAndDateAsync(string target_id, int length, System.DateOnly date, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/scans/retrieve_page/&length="+length+"&date="+date;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Targets_target_idScansRetrieve_pageGetByLengthAndDateReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve scan
		/// Targets_target_idScans_idGet targets/{target_id}/scans/{id}/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		/// <returns>Scan object</returns>
		public async Task<Scan> Targets_target_idScans_idGetAsync(string target_id, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/scans/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Scan>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancel running scan
		/// Targets_target_idScans_idCancelPost targets/{target_id}/scans/{id}/cancel/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		/// <returns>Scan object</returns>
		public async Task<Scan> Targets_target_idScans_idCancelPostAsync(string target_id, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/scans/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/cancel/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Scan>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Scan endpoints file
		/// Targets_target_idScans_idEndpointsGet targets/{target_id}/scans/{id}/endpoints/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		/// <returns>Endpoint list CSV file</returns>
		public async Task Targets_target_idScans_idEndpointsGetAsync(string target_id, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/scans/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/endpoints/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Scan report PDF, using the report type specified for the target
		/// Targets_target_idScans_idReportGet targets/{target_id}/scans/{id}/report/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		/// <returns>Scan report PDF</returns>
		public async Task Targets_target_idScans_idReportGetAsync(string target_id, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/scans/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/report/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Scan report PDF, using the default report type
		/// Targets_target_idScans_idReportDefaultGet targets/{target_id}/scans/{id}/report/default/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		/// <returns>Scan report PDF</returns>
		public async Task Targets_target_idScans_idReportDefaultGetAsync(string target_id, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/scans/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/report/default/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Scan report PDF, using the OWASP report type
		/// Targets_target_idScans_idReportOwaspGet targets/{target_id}/scans/{id}/report/owasp/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		/// <returns>Scan report PDF</returns>
		public async Task Targets_target_idScans_idReportOwaspGetAsync(string target_id, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/scans/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/report/owasp/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Scan report PDF, using the PCI report type
		/// Targets_target_idScans_idReportPciGet targets/{target_id}/scans/{id}/report/pci/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		/// <returns>Scan report PDF</returns>
		public async Task Targets_target_idScans_idReportPciGetAsync(string target_id, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/scans/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/report/pci/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List scheduled scans
		/// Targets_target_idScheduledscansGetByPageAndLengthAndOrderingAndSearch targets/{target_id}/scheduledscans/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="page">Page number within the paginated result set</param>
		/// <param name="length">Number of results to return per page</param>
		/// <param name="ordering">Which field to use when ordering the results, prefix with `-` to invert ordering.
		///</param>
		/// <param name="search">Search term</param>
		/// <returns>Scheduled scan list</returns>
		public async Task<Targets_target_idScheduledscansGetByPageAndLengthAndOrderingAndSearchReturn> Targets_target_idScheduledscansGetByPageAndLengthAndOrderingAndSearchAsync(string target_id, int page, int length, string ordering, string search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/scheduledscans/&page="+page+"&length="+length+"&ordering=" + (ordering==null? "" : System.Uri.EscapeDataString(ordering))+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Targets_target_idScheduledscansGetByPageAndLengthAndOrderingAndSearchReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create new scheduled scan
		/// Targets_target_idScheduledscansPost targets/{target_id}/scheduledscans/
		/// </summary>
		/// <param name="target_id">Target id</param>
		public async Task Targets_target_idScheduledscansPostAsync(string target_id, Scheduled requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/scheduledscans/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List scheduled scans expanding recurrence
		/// Targets_target_idScheduledscansExpandedGetByLength targets/{target_id}/scheduledscans/expanded/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="length">Number of results to return per page</param>
		/// <returns>Next scheduled scans</returns>
		public async Task<Targets_target_idScheduledscansExpandedGetByLengthReturn> Targets_target_idScheduledscansExpandedGetByLengthAsync(string target_id, int length, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/scheduledscans/expanded/&length="+length;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Targets_target_idScheduledscansExpandedGetByLengthReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete
		/// Targets_target_idScheduledscans_idDelete targets/{target_id}/scheduledscans/{id}/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		public async Task Targets_target_idScheduledscans_idDeleteAsync(string target_id, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/scheduledscans/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a scheduled scan
		/// Targets_target_idScheduledscans_idGet targets/{target_id}/scheduledscans/{id}/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		/// <returns>Scheduled scan object</returns>
		public async Task<Scheduled> Targets_target_idScheduledscans_idGetAsync(string target_id, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/scheduledscans/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Scheduled>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Partial update
		/// Targets_target_idScheduledscans_idPatch targets/{target_id}/scheduledscans/{id}/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		/// <returns>Scheduled scan object</returns>
		public async Task<Scheduled> Targets_target_idScheduledscans_idPatchAsync(string target_id, string id, Scheduled requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/scheduledscans/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Scheduled>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a scheduled scan
		/// Targets_target_idScheduledscans_idPut targets/{target_id}/scheduledscans/{id}/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		/// <returns>Scheduled scan object</returns>
		public async Task<Scheduled> Targets_target_idScheduledscans_idPutAsync(string target_id, string id, Scheduled requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/scheduledscans/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Scheduled>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Severity trend graph data.
		/// Targets_target_idSeverity_trendGet targets/{target_id}/severity_trend/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <returns>Severity trend plot data</returns>
		public async Task<Targets_target_idSeverity_trendGetReturn> Targets_target_idSeverity_trendGetAsync(string target_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/severity_trend/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Targets_target_idSeverity_trendGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve target's site
		/// Targets_target_idSiteGet targets/{target_id}/site/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <returns>Site object</returns>
		public async Task<Site> Targets_target_idSiteGetAsync(string target_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/site/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Site>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Partial update target's site
		/// Note that the URL can only be set once.
		/// Targets_target_idSitePatch targets/{target_id}/site/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <returns>Site object</returns>
		public async Task<Site> Targets_target_idSitePatchAsync(string target_id, Site requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/site/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Site>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update target's site
		/// Note that the URL can only be set once.
		/// Targets_target_idSitePut targets/{target_id}/site/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <returns>Site object</returns>
		public async Task<Site> Targets_target_idSitePutAsync(string target_id, Site requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/site/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Site>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Verify site ownership
		/// Targets_target_idSiteVerifyPost targets/{target_id}/site/verify/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <returns>Success</returns>
		public async Task<Targets_target_idSiteVerifyPostReturn> Targets_target_idSiteVerifyPostAsync(string target_id, SiteVerify requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/site/verify/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Targets_target_idSiteVerifyPostReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Top 5 vulnerabilities
		/// Targets_target_idTop_vulnsGet targets/{target_id}/top_vulns/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <returns>Top vulnerabilities plot data</returns>
		public async Task<Targets_target_idTop_vulnsGetReturn[]> Targets_target_idTop_vulnsGetAsync(string target_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/top_vulns/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Targets_target_idTop_vulnsGetReturn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List target webhooks
		/// Targets_target_idWebhooksGet targets/{target_id}/webhooks/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <returns>Webhook list</returns>
		public async Task<Targets_target_idWebhooksGetReturn> Targets_target_idWebhooksGetAsync(string target_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/webhooks/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Targets_target_idWebhooksGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create new target webhook
		/// Targets_target_idWebhooksPost targets/{target_id}/webhooks/
		/// </summary>
		/// <param name="target_id">Target id</param>
		public async Task Targets_target_idWebhooksPostAsync(string target_id, Webhook requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/webhooks/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete target webhook
		/// Targets_target_idWebhooks_idDelete targets/{target_id}/webhooks/{id}/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		public async Task Targets_target_idWebhooks_idDeleteAsync(string target_id, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/webhooks/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve target webhook
		/// Targets_target_idWebhooks_idGet targets/{target_id}/webhooks/{id}/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		/// <returns>Webhooks</returns>
		public async Task<Webhook> Targets_target_idWebhooks_idGetAsync(string target_id, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/webhooks/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Webhook>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Partial update target webhook
		/// Targets_target_idWebhooks_idPatch targets/{target_id}/webhooks/{id}/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		/// <returns>Webhooks</returns>
		public async Task<Webhook> Targets_target_idWebhooks_idPatchAsync(string target_id, string id, Webhook requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/webhooks/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Webhook>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update target webhook
		/// Targets_target_idWebhooks_idPut targets/{target_id}/webhooks/{id}/
		/// </summary>
		/// <param name="target_id">Target id</param>
		/// <param name="id">Object Id</param>
		/// <returns>Webhooks</returns>
		public async Task<Webhook> Targets_target_idWebhooks_idPutAsync(string target_id, string id, Webhook requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targets/"+ (target_id==null? "" : System.Uri.EscapeDataString(target_id))+"/webhooks/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Webhook>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List users
		/// UsersGetByPageAndLengthAndOrderingAndSearch users/
		/// </summary>
		/// <param name="page">Page number within the paginated result set</param>
		/// <param name="length">Number of results to return per page</param>
		/// <param name="ordering">Which field to use when ordering the results, prefix with `-` to invert ordering.
		///</param>
		/// <param name="search">Search term</param>
		/// <returns>User list</returns>
		public async Task<UsersGetByPageAndLengthAndOrderingAndSearchReturn> UsersGetByPageAndLengthAndOrderingAndSearchAsync(int page, int length, string ordering, string search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/?page="+page+"&length="+length+"&ordering=" + (ordering==null? "" : System.Uri.EscapeDataString(ordering))+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UsersGetByPageAndLengthAndOrderingAndSearchReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create/Reactivate a user.
		/// UsersPost users/
		/// </summary>
		public async Task UsersPostAsync(User requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deactivate a user
		/// Users_idDelete users/{id}/
		/// </summary>
		/// <param name="id">Object Id</param>
		public async Task Users_idDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve user
		/// Users_idGet users/{id}/
		/// </summary>
		/// <param name="id">Object Id</param>
		/// <returns>User object</returns>
		public async Task<User> Users_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Partial update user
		/// Users_idPatch users/{id}/
		/// </summary>
		/// <param name="id">Object Id</param>
		/// <returns>User object</returns>
		public async Task<User> Users_idPatchAsync(string id, User requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update user
		/// Users_idPut users/{id}/
		/// </summary>
		/// <param name="id">Object Id</param>
		/// <returns>User object</returns>
		public async Task<User> Users_idPutAsync(string id, User requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List vulnerability definitions
		/// Vulnerability_definitionsGetByPageAndLengthAndOrderingAndSearch vulnerability_definitions/
		/// </summary>
		/// <param name="page">Page number within the paginated result set</param>
		/// <param name="length">Number of results to return per page</param>
		/// <param name="ordering">Which field to use when ordering the results, prefix with `-` to invert ordering.
		///</param>
		/// <param name="search">Search term</param>
		/// <returns>Vulnerability defitions list</returns>
		public async Task<Vulnerability_definitionsGetByPageAndLengthAndOrderingAndSearchReturn> Vulnerability_definitionsGetByPageAndLengthAndOrderingAndSearchAsync(int page, int length, string ordering, string search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vulnerability_definitions/?page="+page+"&length="+length+"&ordering=" + (ordering==null? "" : System.Uri.EscapeDataString(ordering))+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Vulnerability_definitionsGetByPageAndLengthAndOrderingAndSearchReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve vulnerability definition
		/// Vulnerability_definitions_idGet vulnerability_definitions/{id}/
		/// </summary>
		/// <param name="id">Object Id</param>
		/// <returns>Vulnerability definition object</returns>
		public async Task<VulnerabilityDefinition> Vulnerability_definitions_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vulnerability_definitions/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VulnerabilityDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List account webhooks
		/// WebhooksGet webhooks/
		/// </summary>
		/// <returns>Webhook list</returns>
		public async Task<WebhooksGetReturn> WebhooksGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WebhooksGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create new account webhook
		/// WebhooksPost webhooks/
		/// </summary>
		public async Task WebhooksPostAsync(Webhook requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete account webhook
		/// Webhooks_idDelete webhooks/{id}/
		/// </summary>
		/// <param name="id">Object Id</param>
		public async Task Webhooks_idDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve account webhook
		/// Webhooks_idGet webhooks/{id}/
		/// </summary>
		/// <param name="id">Object Id</param>
		/// <returns>Webhooks</returns>
		public async Task<Webhook> Webhooks_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Webhook>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Partial update account webhook
		/// Webhooks_idPatch webhooks/{id}/
		/// </summary>
		/// <param name="id">Object Id</param>
		/// <returns>Webhooks</returns>
		public async Task<Webhook> Webhooks_idPatchAsync(string id, Webhook requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Webhook>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update account webhook
		/// Webhooks_idPut webhooks/{id}/
		/// </summary>
		/// <param name="id">Object Id</param>
		/// <returns>Webhooks</returns>
		public async Task<Webhook> Webhooks_idPutAsync(string id, Webhook requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Webhook>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public class AuthObtainPostReturn
	{
		
		/// <summary>
		/// Authentication token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// Token time to live in seconds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		public System.Nullable<System.Int32> Ttl { get; set; }
	}
	
	public class AuthRefreshPostReturn
	{
		
		/// <summary>
		/// Authentication token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// Token time to live in seconds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		public System.Nullable<System.Int32> Ttl { get; set; }
	}
	
	public class AuthRevokePostReturn
	{
		
		/// <summary>
		/// Authentication token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// Token time to live in seconds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		public System.Nullable<System.Int32> Ttl { get; set; }
	}
	
	public class AuthVerifyPostReturn
	{
		
		/// <summary>
		/// Authentication token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// Token time to live in seconds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		public System.Nullable<System.Int32> Ttl { get; set; }
	}
	
	public class CheckPostReturn
	{
		
		/// <summary>
		/// Message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class EnterpriseAuthObtainPostReturn
	{
		
		/// <summary>
		/// Authentication token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// Token time to live in seconds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		public System.Nullable<System.Int32> Ttl { get; set; }
	}
	
	public class EnterpriseAuthRefreshPostReturn
	{
		
		/// <summary>
		/// Authentication token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// Token time to live in seconds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		public System.Nullable<System.Int32> Ttl { get; set; }
	}
	
	public class EnterpriseAuthRevokePostReturn
	{
		
		/// <summary>
		/// Authentication token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// Token time to live in seconds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		public System.Nullable<System.Int32> Ttl { get; set; }
	}
	
	public class EnterpriseAuthVerifyPostReturn
	{
		
		/// <summary>
		/// Authentication token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// Token time to live in seconds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		public System.Nullable<System.Int32> Ttl { get; set; }
	}
	
	public class EventsGetReturn
	{
		
		/// <summary>
		/// Number of objects in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Number of objects per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int32> Length { get; set; }
		
		/// <summary>
		/// Current page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page_total")]
		public System.Nullable<System.Int32> Page_total { get; set; }
		
		/// <summary>
		/// Event objects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Event[] Results { get; set; }
	}
	
	public class FrameworksGetByPageAndLengthAndOrderingAndSearchReturn
	{
		
		/// <summary>
		/// Number of objects in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Number of objects per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int32> Length { get; set; }
		
		/// <summary>
		/// Current page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page_total")]
		public System.Nullable<System.Int32> Page_total { get; set; }
		
		/// <summary>
		/// Framework objects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Framework[] Results { get; set; }
	}
	
	public class KeysGetByPageAndLengthAndOrderingAndSearchReturn
	{
		
		/// <summary>
		/// Number of objects in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Number of objects per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int32> Length { get; set; }
		
		/// <summary>
		/// Current page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page_total")]
		public System.Nullable<System.Int32> Page_total { get; set; }
		
		/// <summary>
		/// API key objects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Key[] Results { get; set; }
	}
	
	public class LabelsGetByPageAndLengthAndOrderingAndSearchReturn
	{
		
		/// <summary>
		/// Number of objects in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Number of objects per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int32> Length { get; set; }
		
		/// <summary>
		/// Current page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page_total")]
		public System.Nullable<System.Int32> Page_total { get; set; }
		
		/// <summary>
		/// label objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Label[] Results { get; set; }
	}
	
	public class ProfileChange_passwordPostReturn
	{
		
		/// <summary>
		/// Message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class ResetPostReturn
	{
		
		/// <summary>
		/// Message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class SetpasswordPostReturn
	{
		
		/// <summary>
		/// Message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class Target_actionsPostReturn
	{
		
		/// <summary>
		/// Actions are:
		///* edit - edit target
		///* delete - delete target
		///* trial - start a trial with this target
		///* plan - select a subscipition plan with this target
		///* subscribe - add target to subscribed plan
		///* unsubscribe - remove target from subscription
		///* archive - archive target
		///* activate - unarchive target
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public System.Nullable<Target_actionsPostReturnAction> Action { get; set; }
		
		/// <summary>
		/// Label or the action
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Target_actionsPostReturnAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="edit")]
		edit = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="delete")]
		_delete = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="trial")]
		trial = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="plan")]
		plan = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="subscribe")]
		subscribe = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unsubscribe")]
		unsubscribe = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="archive")]
		archive = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="activate")]
		activate = 7,
	}
	
	public class TargetsGetByPageAndLengthAndOrderingAndSearchReturn
	{
		
		/// <summary>
		/// Number of objects per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int32> Length { get; set; }
		
		/// <summary>
		/// Current page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page_total")]
		public System.Nullable<System.Int32> Page_total { get; set; }
		
		/// <summary>
		/// Number of objects in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagination_count")]
		public System.Nullable<System.Int32> Pagination_count { get; set; }
		
		/// <summary>
		/// Target objects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Target[] Results { get; set; }
	}
	
	public class TargetsAllAverage_fix_timeGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public TargetsAllAverage_fix_timeGetReturnResults Results { get; set; }
	}
	
	public class TargetsAllAverage_fix_timeGetReturnResults
	{
		
		/// <summary>
		/// Average fix time in seconds for high severity findings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="high")]
		public System.Nullable<System.Int32> High { get; set; }
		
		/// <summary>
		/// Average fix time in seconds for low severity findings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="low")]
		public System.Nullable<System.Int32> Low { get; set; }
		
		/// <summary>
		/// Average fix time in seconds for medium severity findings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="medium")]
		public System.Nullable<System.Int32> Medium { get; set; }
	}
	
	public class TargetsAllNeeds_attention_pieGetReturn
	{
		
		/// <summary>
		/// These are arrays, they are being displayed as objects with numerical indexes due to limitations of the framework.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="0")]
		public TargetsAllNeeds_attention_pieGetReturn_0 _0 { get; set; }
		
		/// <summary>
		/// These are arrays, they are being displayed as objects with numerical indexes due to limitations of the framework.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="1")]
		public TargetsAllNeeds_attention_pieGetReturn_1 _1 { get; set; }
	}
	
	public class TargetsAllNeeds_attention_pieGetReturn_0
	{
		
		/// <summary>
		/// needing attention
		/// </summary>
		[System.ComponentModel.DefaultValue("needing attention")]
		[System.Runtime.Serialization.DataMember(Name="0")]
		public string _0 { get; set; } = "needing attention";
		
		/// <summary>
		/// Number of targets
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="1")]
		public System.Nullable<System.Int32> _1 { get; set; }
		
		/// <summary>
		/// needs_atention
		/// </summary>
		[System.ComponentModel.DefaultValue("needs_atention")]
		[System.Runtime.Serialization.DataMember(Name="2")]
		public string _2 { get; set; } = "needs_atention";
	}
	
	public class TargetsAllNeeds_attention_pieGetReturn_1
	{
		
		/// <summary>
		/// no issues found
		/// </summary>
		[System.ComponentModel.DefaultValue("no issues found")]
		[System.Runtime.Serialization.DataMember(Name="0")]
		public string _0 { get; set; } = "no issues found";
		
		/// <summary>
		/// Number of targets
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="1")]
		public System.Nullable<System.Int32> _1 { get; set; }
		
		/// <summary>
		/// no_issues_found
		/// </summary>
		[System.ComponentModel.DefaultValue("no_issues_found")]
		[System.Runtime.Serialization.DataMember(Name="2")]
		public string _2 { get; set; } = "no_issues_found";
	}
	
	public class TargetsAllNeeds_attention_topGetReturn
	{
		
		/// <summary>
		/// Number of high severity findings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="highs")]
		public System.Nullable<System.Int32> Highs { get; set; }
		
		/// <summary>
		/// Target id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Number of low severity findings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lows")]
		public System.Nullable<System.Int32> Lows { get; set; }
		
		/// <summary>
		/// Number of medium severity findings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediums")]
		public System.Nullable<System.Int32> Mediums { get; set; }
		
		/// <summary>
		/// Name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Target's site URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class TargetsAllRisk_trendGetReturn
	{
		
		/// <summary>
		/// Date time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="0")]
		public System.Nullable<System.DateTimeOffset> _0 { get; set; }
		
		/// <summary>
		/// Risk score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="1")]
		public System.Nullable<System.Int32> _1 { get; set; }
	}
	
	public class TargetsAllScansGetByPageAndLengthAndOrderingAndSearchAndStartedAndStatusReturn
	{
		
		/// <summary>
		/// Number of objects in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Number of objects per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int32> Length { get; set; }
		
		/// <summary>
		/// Current page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page_total")]
		public System.Nullable<System.Int32> Page_total { get; set; }
		
		/// <summary>
		/// Scan objects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Scan[] Results { get; set; }
	}
	
	public class TargetsAllScheduledscansExpandedGetByLengthReturn
	{
		
		/// <summary>
		/// Scheduled scan objects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Scheduled[] Results { get; set; }
	}
	
	public class TargetsAllSeverity_trendGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public TargetsAllSeverity_trendGetReturnResults Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="step")]
		public System.Nullable<System.Single> Step { get; set; }
	}
	
	public class TargetsAllSeverity_trendGetReturnResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="high")]
		public TargetsAllSeverity_trendGetReturnResultsHigh[] TargetsAllSeverity_trendGetReturnResultsHigh { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="low")]
		public TargetsAllSeverity_trendGetReturnResultsLow[] TargetsAllSeverity_trendGetReturnResultsLow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="medium")]
		public TargetsAllSeverity_trendGetReturnResultsMedium[] TargetsAllSeverity_trendGetReturnResultsMedium { get; set; }
	}
	
	public class TargetsAllSeverity_trendGetReturnResultsHigh
	{
		
		/// <summary>
		/// Date time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="0")]
		public System.Nullable<System.DateTimeOffset> _0 { get; set; }
		
		/// <summary>
		/// Risk score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="1")]
		public System.Nullable<System.Int32> _1 { get; set; }
	}
	
	public class TargetsAllSeverity_trendGetReturnResultsLow
	{
		
		/// <summary>
		/// Date time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="0")]
		public System.Nullable<System.DateTimeOffset> _0 { get; set; }
		
		/// <summary>
		/// Risk score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="1")]
		public System.Nullable<System.Int32> _1 { get; set; }
	}
	
	public class TargetsAllSeverity_trendGetReturnResultsMedium
	{
		
		/// <summary>
		/// Date time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="0")]
		public System.Nullable<System.DateTimeOffset> _0 { get; set; }
		
		/// <summary>
		/// Risk score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="1")]
		public System.Nullable<System.Int32> _1 { get; set; }
	}
	
	public class TargetsAllTop_vulnsGetReturn
	{
		
		/// <summary>
		/// Vulnerability name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="0")]
		public string _0 { get; set; }
		
		/// <summary>
		/// Vulnerability count
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="1")]
		public string _1 { get; set; }
	}
	
	public class TargetsArchivedPostReturn
	{
		
		/// <summary>
		/// Number of objects per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int32> Length { get; set; }
		
		/// <summary>
		/// Current page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page_total")]
		public System.Nullable<System.Int32> Page_total { get; set; }
		
		/// <summary>
		/// Number of objects in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagination_count")]
		public System.Nullable<System.Int32> Pagination_count { get; set; }
		
		/// <summary>
		/// Target objects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Target[] Results { get; set; }
	}
	
	public class Targets_target_idAssetsGetByPageAndLengthAndOrderingAndSearchReturn
	{
		
		/// <summary>
		/// Number of objects in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Number of objects per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int32> Length { get; set; }
		
		/// <summary>
		/// Current page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page_total")]
		public System.Nullable<System.Int32> Page_total { get; set; }
		
		/// <summary>
		/// Asset objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Asset[] Results { get; set; }
	}
	
	public class Targets_target_idAssets_idVerifyPostReturn
	{
		
		/// <summary>
		/// Message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class Targets_target_idAverage_fix_timeGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Targets_target_idAverage_fix_timeGetReturnResults Results { get; set; }
	}
	
	public class Targets_target_idAverage_fix_timeGetReturnResults
	{
		
		/// <summary>
		/// Average fix time in seconds for high severity findings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="high")]
		public System.Nullable<System.Int32> High { get; set; }
		
		/// <summary>
		/// Average fix time in seconds for low severity findings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="low")]
		public System.Nullable<System.Int32> Low { get; set; }
		
		/// <summary>
		/// Average fix time in seconds for medium severity findings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="medium")]
		public System.Nullable<System.Int32> Medium { get; set; }
	}
	
	public class Targets_target_idEventsGetReturn
	{
		
		/// <summary>
		/// Number of objects in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Number of objects per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int32> Length { get; set; }
		
		/// <summary>
		/// Current page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page_total")]
		public System.Nullable<System.Int32> Page_total { get; set; }
		
		/// <summary>
		/// Event objects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Event[] Results { get; set; }
	}
	
	public class Targets_target_idFindingsGetByScanAndSeverityAndStateAndAssigneeAndLabelAndPageAndLengthAndOrderingAndSearchReturn
	{
		
		/// <summary>
		/// Number of objects in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Number of objects per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int32> Length { get; set; }
		
		/// <summary>
		/// Current page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page_total")]
		public System.Nullable<System.Int32> Page_total { get; set; }
		
		/// <summary>
		/// Finding objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Finding[] Results { get; set; }
	}
	
	public class Targets_target_idKeysGetByPageAndLengthAndOrderingAndSearchReturn
	{
		
		/// <summary>
		/// Number of objects in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Number of objects per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int32> Length { get; set; }
		
		/// <summary>
		/// Current page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page_total")]
		public System.Nullable<System.Int32> Page_total { get; set; }
		
		/// <summary>
		/// API key objects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Key[] Results { get; set; }
	}
	
	public class Targets_target_idRisk_trendGetReturn
	{
		
		/// <summary>
		/// Date time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="0")]
		public System.Nullable<System.DateTimeOffset> _0 { get; set; }
		
		/// <summary>
		/// Risk score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="1")]
		public System.Nullable<System.Int32> _1 { get; set; }
	}
	
	public class Targets_target_idScansGetByPageAndLengthAndOrderingAndSearchAndStartedAndStatusReturn
	{
		
		/// <summary>
		/// Number of objects in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Number of objects per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int32> Length { get; set; }
		
		/// <summary>
		/// Current page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page_total")]
		public System.Nullable<System.Int32> Page_total { get; set; }
		
		/// <summary>
		/// Scan objects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Scan[] Results { get; set; }
	}
	
	public class Targets_target_idScansRetrieve_pageGetByLengthAndDateReturn
	{
		
		/// <summary>
		/// Page number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
	}
	
	public class Targets_target_idScheduledscansGetByPageAndLengthAndOrderingAndSearchReturn
	{
		
		/// <summary>
		/// Number of objects in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Number of objects per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int32> Length { get; set; }
		
		/// <summary>
		/// Current page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page_total")]
		public System.Nullable<System.Int32> Page_total { get; set; }
		
		/// <summary>
		/// Scheduled scan objects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Scheduled[] Results { get; set; }
	}
	
	public class Targets_target_idScheduledscansExpandedGetByLengthReturn
	{
		
		/// <summary>
		/// Scheduled scan objects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Scheduled[] Results { get; set; }
	}
	
	public class Targets_target_idSeverity_trendGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Targets_target_idSeverity_trendGetReturnResults Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="step")]
		public System.Nullable<System.Single> Step { get; set; }
	}
	
	public class Targets_target_idSeverity_trendGetReturnResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="high")]
		public Targets_target_idSeverity_trendGetReturnResultsHigh[] Targets_target_idSeverity_trendGetReturnResultsHigh { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="low")]
		public Targets_target_idSeverity_trendGetReturnResultsLow[] Targets_target_idSeverity_trendGetReturnResultsLow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="medium")]
		public Targets_target_idSeverity_trendGetReturnResultsMedium[] Targets_target_idSeverity_trendGetReturnResultsMedium { get; set; }
	}
	
	public class Targets_target_idSeverity_trendGetReturnResultsHigh
	{
		
		/// <summary>
		/// Date time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="0")]
		public System.Nullable<System.DateTimeOffset> _0 { get; set; }
		
		/// <summary>
		/// Risk score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="1")]
		public System.Nullable<System.Int32> _1 { get; set; }
	}
	
	public class Targets_target_idSeverity_trendGetReturnResultsLow
	{
		
		/// <summary>
		/// Date time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="0")]
		public System.Nullable<System.DateTimeOffset> _0 { get; set; }
		
		/// <summary>
		/// Risk score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="1")]
		public System.Nullable<System.Int32> _1 { get; set; }
	}
	
	public class Targets_target_idSeverity_trendGetReturnResultsMedium
	{
		
		/// <summary>
		/// Date time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="0")]
		public System.Nullable<System.DateTimeOffset> _0 { get; set; }
		
		/// <summary>
		/// Risk score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="1")]
		public System.Nullable<System.Int32> _1 { get; set; }
	}
	
	public class Targets_target_idSiteVerifyPostReturn
	{
		
		/// <summary>
		/// Message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class Targets_target_idTop_vulnsGetReturn
	{
		
		/// <summary>
		/// Vulnerability name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="0")]
		public string _0 { get; set; }
		
		/// <summary>
		/// Vulnerability count
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="1")]
		public string _1 { get; set; }
	}
	
	public class Targets_target_idWebhooksGetReturn
	{
		
		/// <summary>
		/// Number of objects in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Number of objects per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int32> Length { get; set; }
		
		/// <summary>
		/// Current page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page_total")]
		public System.Nullable<System.Int32> Page_total { get; set; }
		
		/// <summary>
		/// Webhook objects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Webhook[] Results { get; set; }
	}
	
	public class UsersGetByPageAndLengthAndOrderingAndSearchReturn
	{
		
		/// <summary>
		/// Number of objects in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Number of objects per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int32> Length { get; set; }
		
		/// <summary>
		/// Current page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page_total")]
		public System.Nullable<System.Int32> Page_total { get; set; }
		
		/// <summary>
		/// User objects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public User[] Results { get; set; }
	}
	
	public class Vulnerability_definitionsGetByPageAndLengthAndOrderingAndSearchReturn
	{
		
		/// <summary>
		/// Number of objects in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Number of objects per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int32> Length { get; set; }
		
		/// <summary>
		/// Current page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page_total")]
		public System.Nullable<System.Int32> Page_total { get; set; }
		
		/// <summary>
		/// Vulnerability definition objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public VulnerabilityDefinition[] Results { get; set; }
	}
	
	public class WebhooksGetReturn
	{
		
		/// <summary>
		/// Number of objects in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Number of objects per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int32> Length { get; set; }
		
		/// <summary>
		/// Current page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page_total")]
		public System.Nullable<System.Int32> Page_total { get; set; }
		
		/// <summary>
		/// Webhook objects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Webhook[] Results { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
