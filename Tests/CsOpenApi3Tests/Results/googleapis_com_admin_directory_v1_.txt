//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// JSON template for Alias object in Directory API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Alias
	{
		
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.ComponentModel.DefaultValue("admin#directory#alias")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#alias";
		
		[System.Runtime.Serialization.DataMember(Name="primaryEmail")]
		public string PrimaryEmail { get; set; }
	}
	
	/// <summary>
	/// JSON response template to list aliases in Directory API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Aliases
	{
		
		[System.Runtime.Serialization.DataMember(Name="aliases")]
		public string[] Aliases1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		[System.ComponentModel.DefaultValue("admin#directory#aliases")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#aliases";
	}
	
	/// <summary>
	/// An application-specific password (ASP) is used with applications that do not accept a verification code when logging into the application on certain devices. The ASP access code is used instead of the login and password you commonly use when accessing an application through a browser. For more information about ASPs and how to create one, see the [help center](https://support.google.com/a/answer/2537800#asp).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Asp
	{
		
		/// <summary>
		/// The unique ID of the ASP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="codeId")]
		public System.Nullable<System.Int32> CodeId { get; set; }
		
		/// <summary>
		/// The time when the ASP was created. Expressed in [Unix time](https://en.wikipedia.org/wiki/Epoch_time) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public string CreationTime { get; set; }
		
		/// <summary>
		/// ETag of the ASP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The type of the API resource. This is always `admin#directory#asp`.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#asp")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#asp";
		
		/// <summary>
		/// The time when the ASP was last used. Expressed in [Unix time](https://en.wikipedia.org/wiki/Epoch_time) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastTimeUsed")]
		public string LastTimeUsed { get; set; }
		
		/// <summary>
		/// The name of the application that the user, represented by their `userId`, entered when the ASP was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The unique ID of the user who issued the ASP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userKey")]
		public string UserKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Asps
	{
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// A list of ASP resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Asp[] Items { get; set; }
		
		/// <summary>
		/// The type of the API resource. This is always `admin#directory#aspList`.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#aspList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#aspList";
	}
	
	/// <summary>
	/// Auxiliary message about issues with printers or settings. Example: {message_type:AUXILIARY_MESSAGE_WARNING, field_mask:make_and_model, message:"Given printer is invalid or no longer supported."}
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuxiliaryMessage
	{
		
		/// <summary>
		/// Human readable message in English. Example: "Given printer is invalid or no longer supported."
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auxiliaryMessage")]
		public string AuxiliaryMessage1 { get; set; }
		
		/// <summary>
		/// Field that this message concerns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldMask")]
		public string FieldMask { get; set; }
		
		/// <summary>
		/// Message severity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<AuxiliaryMessageSeverity> Severity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AuxiliaryMessageSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SEVERITY_UNSPECIFIED")]
		SEVERITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SEVERITY_INFO")]
		SEVERITY_INFO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SEVERITY_WARNING")]
		SEVERITY_WARNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SEVERITY_ERROR")]
		SEVERITY_ERROR = 3,
	}
	
	/// <summary>
	/// A request for changing the status of a batch of ChromeOS devices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchChangeChromeOsDeviceStatusRequest
	{
		
		/// <summary>
		/// Required. The action to take on the ChromeOS device in order to change its status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeChromeOsDeviceStatusAction")]
		public System.Nullable<BatchChangeChromeOsDeviceStatusRequestChangeChromeOsDeviceStatusAction> ChangeChromeOsDeviceStatusAction { get; set; }
		
		/// <summary>
		/// Optional. The reason behind a device deprovision. Must be provided if 'changeChromeOsDeviceStatusAction' is set to 'CHANGE_CHROME_OS_DEVICE_STATUS_ACTION_DEPROVISION'. Otherwise, omit this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deprovisionReason")]
		public System.Nullable<BatchChangeChromeOsDeviceStatusRequestDeprovisionReason> DeprovisionReason { get; set; }
		
		/// <summary>
		/// Required. List of the IDs of the ChromeOS devices to change. Maximum 50.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceIds")]
		public string[] DeviceIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BatchChangeChromeOsDeviceStatusRequestChangeChromeOsDeviceStatusAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHANGE_CHROME_OS_DEVICE_STATUS_ACTION_UNSPECIFIED")]
		CHANGE_CHROME_OS_DEVICE_STATUS_ACTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHANGE_CHROME_OS_DEVICE_STATUS_ACTION_DEPROVISION")]
		CHANGE_CHROME_OS_DEVICE_STATUS_ACTION_DEPROVISION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHANGE_CHROME_OS_DEVICE_STATUS_ACTION_DISABLE")]
		CHANGE_CHROME_OS_DEVICE_STATUS_ACTION_DISABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHANGE_CHROME_OS_DEVICE_STATUS_ACTION_REENABLE")]
		CHANGE_CHROME_OS_DEVICE_STATUS_ACTION_REENABLE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BatchChangeChromeOsDeviceStatusRequestDeprovisionReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEPROVISION_REASON_UNSPECIFIED")]
		DEPROVISION_REASON_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEPROVISION_REASON_SAME_MODEL_REPLACEMENT")]
		DEPROVISION_REASON_SAME_MODEL_REPLACEMENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEPROVISION_REASON_UPGRADE")]
		DEPROVISION_REASON_UPGRADE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEPROVISION_REASON_DOMAIN_MOVE")]
		DEPROVISION_REASON_DOMAIN_MOVE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEPROVISION_REASON_SERVICE_EXPIRATION")]
		DEPROVISION_REASON_SERVICE_EXPIRATION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEPROVISION_REASON_OTHER")]
		DEPROVISION_REASON_OTHER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEPROVISION_REASON_DIFFERENT_MODEL_REPLACEMENT")]
		DEPROVISION_REASON_DIFFERENT_MODEL_REPLACEMENT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEPROVISION_REASON_RETIRING_DEVICE")]
		DEPROVISION_REASON_RETIRING_DEVICE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEPROVISION_REASON_UPGRADE_TRANSFER")]
		DEPROVISION_REASON_UPGRADE_TRANSFER = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEPROVISION_REASON_NOT_REQUIRED")]
		DEPROVISION_REASON_NOT_REQUIRED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEPROVISION_REASON_REPAIR_CENTER")]
		DEPROVISION_REASON_REPAIR_CENTER = 10,
	}
	
	/// <summary>
	/// The response of changing the status of a batch of ChromeOS devices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchChangeChromeOsDeviceStatusResponse
	{
		
		/// <summary>
		/// The results for each of the ChromeOS devices provided in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeChromeOsDeviceStatusResults")]
		public ChangeChromeOsDeviceStatusResult[] ChangeChromeOsDeviceStatusResults { get; set; }
	}
	
	/// <summary>
	/// The result of a single ChromeOS device for a Change state operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChangeChromeOsDeviceStatusResult
	{
		
		/// <summary>
		/// The unique ID of the ChromeOS device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Response for a successful ChromeOS device status change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public ChangeChromeOsDeviceStatusSucceeded Response { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Response for a successful ChromeOS device status change.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChangeChromeOsDeviceStatusSucceeded
	{
	}
	
	/// <summary>
	/// Request to add multiple new print servers in a batch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchCreatePrintServersRequest
	{
		
		/// <summary>
		/// Required. A list of `PrintServer` resources to be created (max `50` per batch).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public CreatePrintServerRequest[] Requests { get; set; }
	}
	
	/// <summary>
	/// Request for adding a new print server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePrintServerRequest
	{
		
		/// <summary>
		/// Required. The [unique ID](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers) of the customer's Google Workspace account. Format: `customers/{id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public string Parent { get; set; }
		
		/// <summary>
		/// Configuration for a print server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="printServer")]
		public PrintServer PrintServer { get; set; }
	}
	
	/// <summary>
	/// Configuration for a print server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PrintServer
	{
		
		/// <summary>
		/// Output only. Time when the print server was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Editable. Description of the print server (as shown in the Admin console).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Editable. Display name of the print server (as shown in the Admin console).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Immutable. ID of the print server. Leave empty when creating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Immutable. Resource name of the print server. Leave empty when creating. Format: `customers/{customer.id}/printServers/{print_server.id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// ID of the organization unit (OU) that owns this print server. This value can only be set when the print server is initially created. If it's not populated, the print server is placed under the root OU. The `org_unit_id` can be retrieved using the [Directory API](/admin-sdk/directory/reference/rest/v1/orgunits).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orgUnitId")]
		public string OrgUnitId { get; set; }
		
		/// <summary>
		/// Editable. Print server URI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchCreatePrintServersResponse
	{
		
		/// <summary>
		/// A list of create failures. `PrintServer` IDs are not populated, as print servers were not created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failures")]
		public PrintServerFailureInfo[] Failures { get; set; }
		
		/// <summary>
		/// A list of successfully created print servers with their IDs populated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="printServers")]
		public PrintServer[] PrintServers { get; set; }
	}
	
	/// <summary>
	/// Info about failures
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PrintServerFailureInfo
	{
		
		/// <summary>
		/// Canonical code for why the update failed to apply.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public System.Nullable<PrintServerFailureInfoErrorCode> ErrorCode { get; set; }
		
		/// <summary>
		/// Failure reason message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// Configuration for a print server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="printServer")]
		public PrintServer PrintServer { get; set; }
		
		/// <summary>
		/// ID of a failed print server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="printServerId")]
		public string PrintServerId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PrintServerFailureInfoErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OK")]
		OK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELLED")]
		CANCELLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN")]
		UNKNOWN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_ARGUMENT")]
		INVALID_ARGUMENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEADLINE_EXCEEDED")]
		DEADLINE_EXCEEDED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_FOUND")]
		NOT_FOUND = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALREADY_EXISTS")]
		ALREADY_EXISTS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PERMISSION_DENIED")]
		PERMISSION_DENIED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNAUTHENTICATED")]
		UNAUTHENTICATED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RESOURCE_EXHAUSTED")]
		RESOURCE_EXHAUSTED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED_PRECONDITION")]
		FAILED_PRECONDITION = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ABORTED")]
		ABORTED = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OUT_OF_RANGE")]
		OUT_OF_RANGE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNIMPLEMENTED")]
		UNIMPLEMENTED = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INTERNAL")]
		INTERNAL = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNAVAILABLE")]
		UNAVAILABLE = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DATA_LOSS")]
		DATA_LOSS = 16,
	}
	
	/// <summary>
	/// Request for adding new printers in batch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchCreatePrintersRequest
	{
		
		/// <summary>
		/// A list of Printers to be created. Max 50 at a time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public CreatePrinterRequest[] Requests { get; set; }
	}
	
	/// <summary>
	/// Request for adding a new printer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePrinterRequest
	{
		
		/// <summary>
		/// Required. The name of the customer. Format: customers/{customer_id}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public string Parent { get; set; }
		
		/// <summary>
		/// Printer configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="printer")]
		public Printer Printer { get; set; }
	}
	
	/// <summary>
	/// Printer configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Printer
	{
		
		/// <summary>
		/// Output only. Auxiliary messages about issues with the printer configuration if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auxiliaryMessages")]
		public AuxiliaryMessage[] AuxiliaryMessages { get; set; }
		
		/// <summary>
		/// Output only. Time when printer was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Editable. Description of printer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Editable. Name of printer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Id of the printer. (During printer creation leave empty)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Editable. Make and model of printer. e.g. Lexmark MS610de Value must be in format as seen in ListPrinterModels response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="makeAndModel")]
		public string MakeAndModel { get; set; }
		
		/// <summary>
		/// The resource name of the Printer object, in the format customers/{customer-id}/printers/{printer-id} (During printer creation leave empty)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Organization Unit that owns this printer (Only can be set during Printer creation)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orgUnitId")]
		public string OrgUnitId { get; set; }
		
		/// <summary>
		/// Editable. Printer URI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
		
		/// <summary>
		/// Editable. flag to use driverless configuration or not. If it's set to be true, make_and_model can be ignored
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useDriverlessConfig")]
		public System.Nullable<System.Boolean> UseDriverlessConfig { get; set; }
	}
	
	/// <summary>
	/// Response for adding new printers in batch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchCreatePrintersResponse
	{
		
		/// <summary>
		/// A list of create failures. Printer IDs are not populated, as printer were not created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failures")]
		public FailureInfo[] Failures { get; set; }
		
		/// <summary>
		/// A list of successfully created printers with their IDs populated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="printers")]
		public Printer[] Printers { get; set; }
	}
	
	/// <summary>
	/// Info about failures
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FailureInfo
	{
		
		/// <summary>
		/// Canonical code for why the update failed to apply.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public PrintServerFailureInfoErrorCode ErrorCode { get; set; }
		
		/// <summary>
		/// Failure reason message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// Printer configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="printer")]
		public Printer Printer { get; set; }
		
		/// <summary>
		/// Id of a failed printer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="printerId")]
		public string PrinterId { get; set; }
	}
	
	/// <summary>
	/// Request to delete multiple existing print servers in a batch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDeletePrintServersRequest
	{
		
		/// <summary>
		/// A list of print server IDs that should be deleted (max `100` per batch).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="printServerIds")]
		public string[] PrintServerIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDeletePrintServersResponse
	{
		
		/// <summary>
		/// A list of update failures.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failedPrintServers")]
		public PrintServerFailureInfo[] FailedPrintServers { get; set; }
		
		/// <summary>
		/// A list of print server IDs that were successfully deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="printServerIds")]
		public string[] PrintServerIds { get; set; }
	}
	
	/// <summary>
	/// Request for deleting existing printers in batch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDeletePrintersRequest
	{
		
		/// <summary>
		/// A list of Printer.id that should be deleted. Max 100 at a time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="printerIds")]
		public string[] PrinterIds { get; set; }
	}
	
	/// <summary>
	/// Response for deleting existing printers in batch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDeletePrintersResponse
	{
		
		/// <summary>
		/// A list of update failures.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failedPrinters")]
		public FailureInfo[] FailedPrinters { get; set; }
		
		/// <summary>
		/// A list of Printer.id that were successfully deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="printerIds")]
		public string[] PrinterIds { get; set; }
	}
	
	/// <summary>
	/// Public API: Resources.buildings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Building
	{
		
		/// <summary>
		/// Public API: Resources.buildings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public BuildingAddress Address { get; set; }
		
		/// <summary>
		/// Unique identifier for the building. The maximum length is 100 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildingId")]
		public string BuildingId { get; set; }
		
		/// <summary>
		/// The building name as seen by users in Calendar. Must be unique for the customer. For example, "NYC-CHEL". The maximum length is 100 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildingName")]
		public string BuildingName { get; set; }
		
		/// <summary>
		/// Public API: Resources.buildings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coordinates")]
		public BuildingCoordinates Coordinates { get; set; }
		
		/// <summary>
		/// A brief description of the building. For example, "Chelsea Market".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etags")]
		public string Etags { get; set; }
		
		/// <summary>
		/// The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, ["B2", "B1", "L", "1", "2", "2M", "3", "PH"] Must contain at least one entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floorNames")]
		public string[] FloorNames { get; set; }
		
		/// <summary>
		/// Kind of resource this is.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#resources#buildings#Building")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#resources#buildings#Building";
	}
	
	/// <summary>
	/// Public API: Resources.buildings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BuildingAddress
	{
		
		/// <summary>
		/// Unstructured address lines describing the lower levels of an address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressLines")]
		public string[] AddressLines { get; set; }
		
		/// <summary>
		/// Optional. Highest administrative subdivision which is used for postal addresses of a country or region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="administrativeArea")]
		public string AdministrativeArea { get; set; }
		
		/// <summary>
		/// Optional. BCP-47 language code of the contents of this address (if known).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public string Locality { get; set; }
		
		/// <summary>
		/// Optional. Postal code of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Required. CLDR region code of the country/region of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionCode")]
		public string RegionCode { get; set; }
		
		/// <summary>
		/// Optional. Sublocality of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sublocality")]
		public string Sublocality { get; set; }
	}
	
	/// <summary>
	/// Public API: Resources.buildings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BuildingCoordinates
	{
		
		/// <summary>
		/// Latitude in decimal degrees.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// Longitude in decimal degrees.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
	}
	
	/// <summary>
	/// Public API: Resources.buildings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Buildings
	{
		
		/// <summary>
		/// The Buildings in this page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildings")]
		public Building[] Buildings1 { get; set; }
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Kind of resource this is.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#resources#buildings#buildingsList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#resources#buildings#buildingsList";
		
		/// <summary>
		/// The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Public API: Resources.calendars
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CalendarResource
	{
		
		/// <summary>
		/// Unique ID for the building a resource is located in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildingId")]
		public string BuildingId { get; set; }
		
		/// <summary>
		/// Capacity of a resource, number of seats in a room.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public System.Nullable<System.Int32> Capacity { get; set; }
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etags")]
		public string Etags { get; set; }
		
		/// <summary>
		/// Instances of features for the calendar resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="featureInstances")]
		public object FeatureInstances { get; set; }
		
		/// <summary>
		/// Name of the floor a resource is located on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floorName")]
		public string FloorName { get; set; }
		
		/// <summary>
		/// Name of the section within a floor a resource is located in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floorSection")]
		public string FloorSection { get; set; }
		
		/// <summary>
		/// The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, "NYC-2-Training Room 1A (16)".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generatedResourceName")]
		public string GeneratedResourceName { get; set; }
		
		/// <summary>
		/// The type of the resource. For calendar resources, the value is `admin#directory#resources#calendars#CalendarResource`.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#resources#calendars#CalendarResource")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#resources#calendars#CalendarResource";
		
		/// <summary>
		/// The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceCategory")]
		public string ResourceCategory { get; set; }
		
		/// <summary>
		/// Description of the resource, visible only to admins.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceDescription")]
		public string ResourceDescription { get; set; }
		
		/// <summary>
		/// The read-only email for the calendar resource. Generated as part of creating a new calendar resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceEmail")]
		public string ResourceEmail { get; set; }
		
		/// <summary>
		/// The unique ID for the calendar resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// The name of the calendar resource. For example, "Training Room 1A".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// The type of the calendar resource, intended for non-room resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// Description of the resource, visible to users and admins.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userVisibleDescription")]
		public string UserVisibleDescription { get; set; }
	}
	
	/// <summary>
	/// Public API: Resources.calendars
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CalendarResources
	{
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The CalendarResources in this page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public CalendarResource[] Items { get; set; }
		
		/// <summary>
		/// Identifies this as a collection of CalendarResources. This is always `admin#directory#resources#calendars#calendarResourcesList`.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#resources#calendars#calendarResourcesList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#resources#calendars#calendarResourcesList";
		
		/// <summary>
		/// The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// An notification channel used to watch for resource changes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Channel
	{
		
		/// <summary>
		/// The address where notifications are delivered for this channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration")]
		public string Expiration { get; set; }
		
		/// <summary>
		/// A UUID or similar unique string that identifies this channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies this as a notification channel used to watch for changes to a resource, which is `api#channel`.
		/// </summary>
		[System.ComponentModel.DefaultValue("api#channel")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "api#channel";
		
		/// <summary>
		/// Additional parameters controlling delivery channel behavior. Optional. For example, `params.ttl` specifies the time-to-live in seconds for the notification channel, where the default is 2 hours and the maximum TTL is 2 days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="params")]
		public System.Collections.Generic.Dictionary<string, string> Params { get; set; }
		
		/// <summary>
		/// A Boolean value to indicate whether payload is wanted. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public System.Nullable<System.Boolean> Payload { get; set; }
		
		/// <summary>
		/// An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// A version-specific identifier for the watched resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceUri")]
		public string ResourceUri { get; set; }
		
		/// <summary>
		/// An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// The type of delivery mechanism used for this channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Google Chrome devices run on the [Chrome OS](https://support.google.com/chromeos). For more information about common API tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-chrome-devices).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChromeOsDevice
	{
		
		/// <summary>
		/// A list of active time ranges (Read-only).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeTimeRanges")]
		public ChromeOsDeviceActiveTimeRanges[] ChromeOsDeviceActiveTimeRanges { get; set; }
		
		/// <summary>
		/// The asset identifier as noted by an administrator or specified during enrollment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotatedAssetId")]
		public string AnnotatedAssetId { get; set; }
		
		/// <summary>
		/// The address or location of the device as noted by the administrator. Maximum length is `200` characters. Empty values are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotatedLocation")]
		public string AnnotatedLocation { get; set; }
		
		/// <summary>
		/// The user of the device as noted by the administrator. Maximum length is 100 characters. Empty values are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotatedUser")]
		public string AnnotatedUser { get; set; }
		
		/// <summary>
		/// (Read-only) The timestamp after which the device will stop receiving Chrome updates or support
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoUpdateExpiration")]
		public string AutoUpdateExpiration { get; set; }
		
		/// <summary>
		/// The boot mode for the device. The possible values are: * `Verified`: The device is running a valid version of the Chrome OS. * `Dev`: The devices's developer hardware switch is enabled. When booted, the device has a command line shell. For an example of a developer switch, see the [Chromebook developer information](https://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices/samsung-series-5-chromebook#TOC-Developer-switch).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootMode")]
		public string BootMode { get; set; }
		
		/// <summary>
		/// Information regarding CPU specs in the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpuInfo")]
		public ChromeOsDeviceCpuInfo[] ChromeOsDeviceCpuInfo { get; set; }
		
		/// <summary>
		/// Reports of CPU utilization and temperature (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpuStatusReports")]
		public ChromeOsDeviceCpuStatusReports[] ChromeOsDeviceCpuStatusReports { get; set; }
		
		/// <summary>
		/// (Read-only) Deprovision reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deprovisionReason")]
		public BatchChangeChromeOsDeviceStatusRequestDeprovisionReason DeprovisionReason { get; set; }
		
		/// <summary>
		/// A list of device files to download (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceFiles")]
		public ChromeOsDeviceDeviceFiles[] ChromeOsDeviceDeviceFiles { get; set; }
		
		/// <summary>
		/// The unique ID of the Chrome device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// Output only. Device license type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceLicenseType")]
		public System.Nullable<ChromeOsDeviceDeviceLicenseType> DeviceLicenseType { get; set; }
		
		/// <summary>
		/// Reports of disk space and other info about mounted/connected volumes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskVolumeReports")]
		public ChromeOsDeviceDiskVolumeReports[] ChromeOsDeviceDiskVolumeReports { get; set; }
		
		/// <summary>
		/// (Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dockMacAddress")]
		public string DockMacAddress { get; set; }
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The device's MAC address on the ethernet network interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ethernetMacAddress")]
		public string EthernetMacAddress { get; set; }
		
		/// <summary>
		/// (Read-only) MAC address used by the Chromebook’s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ethernetMacAddress0")]
		public string EthernetMacAddress0 { get; set; }
		
		/// <summary>
		/// The Chrome device's firmware version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firmwareVersion")]
		public string FirmwareVersion { get; set; }
		
		/// <summary>
		/// Date and time for the first time the device was enrolled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstEnrollmentTime")]
		public string FirstEnrollmentTime { get; set; }
		
		/// <summary>
		/// The type of resource. For the Chromeosdevices resource, the value is `admin#directory#chromeosdevice`.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#chromeosdevice")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#chromeosdevice";
		
		/// <summary>
		/// (Read-only) Date and time for the last deprovision of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastDeprovisionTimestamp")]
		public string LastDeprovisionTimestamp { get; set; }
		
		/// <summary>
		/// Date and time the device was last enrolled (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastEnrollmentTime")]
		public System.Nullable<System.DateTimeOffset> LastEnrollmentTime { get; set; }
		
		/// <summary>
		/// Contains last known network (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastKnownNetwork")]
		public ChromeOsDeviceLastKnownNetwork[] ChromeOsDeviceLastKnownNetwork { get; set; }
		
		/// <summary>
		/// Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastSync")]
		public System.Nullable<System.DateTimeOffset> LastSync { get; set; }
		
		/// <summary>
		/// The device's wireless MAC address. If the device does not have this information, it is not included in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="macAddress")]
		public string MacAddress { get; set; }
		
		/// <summary>
		/// (Read-only) The date the device was manufactured in yyyy-mm-dd format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manufactureDate")]
		public string ManufactureDate { get; set; }
		
		/// <summary>
		/// The Mobile Equipment Identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in a mobile device. A MEID/IMEI is typically used when adding a device to a wireless carrier's post-pay service plan. If the device does not have this information, this property is not included in the response. For more information on how to export a MEID/IMEI list, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-chrome-devices.html#export_meid).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meid")]
		public string Meid { get; set; }
		
		/// <summary>
		/// The device's model information. If the device does not have this information, this property is not included in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		/// <summary>
		/// Notes about this device added by the administrator. This property can be [searched](https://support.google.com/chrome/a/answer/1698333) with the [list](/admin-sdk/directory/v1/reference/chromeosdevices/list) method's `query` parameter. Maximum length is 500 characters. Empty values are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// The device's order number. Only devices directly purchased from Google have an order number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderNumber")]
		public string OrderNumber { get; set; }
		
		/// <summary>
		/// The unique ID of the organizational unit. orgUnitPath is the human readable version of orgUnitId. While orgUnitPath may change by renaming an organizational unit within the path, orgUnitId is unchangeable for one organizational unit. This property can be [updated](/admin-sdk/directory/v1/guides/manage-chrome-devices#move_chrome_devices_to_ou) using the API. For more information about how to create an organizational structure for your device, see the [administration help center](https://support.google.com/a/answer/182433).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orgUnitId")]
		public string OrgUnitId { get; set; }
		
		/// <summary>
		/// The full parent path with the organizational unit's name associated with the device. Path names are case insensitive. If the parent organizational unit is the top-level organization, it is represented as a forward slash, `/`. This property can be [updated](/admin-sdk/directory/v1/guides/manage-chrome-devices#move_chrome_devices_to_ou) using the API. For more information about how to create an organizational structure for your device, see the [administration help center](https://support.google.com/a/answer/182433).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orgUnitPath")]
		public string OrgUnitPath { get; set; }
		
		/// <summary>
		/// Contains information regarding the current OS update status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osUpdateStatus")]
		public OsUpdateStatus OsUpdateStatus { get; set; }
		
		/// <summary>
		/// The Chrome device's operating system version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osVersion")]
		public string OsVersion { get; set; }
		
		/// <summary>
		/// The Chrome device's platform version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platformVersion")]
		public string PlatformVersion { get; set; }
		
		/// <summary>
		/// A list of recent device users, in descending order, by last login time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recentUsers")]
		public ChromeOsDeviceRecentUsers[] ChromeOsDeviceRecentUsers { get; set; }
		
		/// <summary>
		/// A list of screenshot files to download. Type is always "SCREENSHOT_FILE". (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenshotFiles")]
		public ChromeOsDeviceScreenshotFiles[] ChromeOsDeviceScreenshotFiles { get; set; }
		
		/// <summary>
		/// The Chrome device serial number entered when the device was enabled. This value is the same as the Admin console's *Serial Number* in the *Chrome OS Devices* tab.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serialNumber")]
		public string SerialNumber { get; set; }
		
		/// <summary>
		/// The status of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Final date the device will be supported (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportEndDate")]
		public System.Nullable<System.DateTimeOffset> SupportEndDate { get; set; }
		
		/// <summary>
		/// Reports of amounts of available RAM memory (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemRamFreeReports")]
		public ChromeOsDeviceSystemRamFreeReports[] ChromeOsDeviceSystemRamFreeReports { get; set; }
		
		/// <summary>
		/// Total RAM on the device [in bytes] (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemRamTotal")]
		public string SystemRamTotal { get; set; }
		
		/// <summary>
		/// Trusted Platform Module (TPM) (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tpmVersionInfo")]
		public ChromeOsDeviceTpmVersionInfo TpmVersionInfo { get; set; }
		
		/// <summary>
		/// Determines if the device will auto renew its support after the support end date. This is a read-only property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="willAutoRenew")]
		public System.Nullable<System.Boolean> WillAutoRenew { get; set; }
	}
	
	public class ChromeOsDeviceActiveTimeRanges
	{
		
		/// <summary>
		/// Duration of usage in milliseconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeTime")]
		public System.Nullable<System.Int32> ActiveTime { get; set; }
		
		/// <summary>
		/// Date of usage
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateOnly> Date { get; set; }
	}
	
	public class ChromeOsDeviceCpuInfo
	{
		
		/// <summary>
		/// The CPU architecture.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="architecture")]
		public string Architecture { get; set; }
		
		/// <summary>
		/// Information for the Logical CPUs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logicalCpus")]
		public ChromeOsDeviceCpuInfoLogicalCpus[] ChromeOsDeviceCpuInfoLogicalCpus { get; set; }
		
		/// <summary>
		/// The max CPU clock speed in kHz.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxClockSpeedKhz")]
		public System.Nullable<System.Int32> MaxClockSpeedKhz { get; set; }
		
		/// <summary>
		/// The CPU model name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
	}
	
	public class ChromeOsDeviceCpuInfoLogicalCpus
	{
		
		/// <summary>
		/// C-States indicate the power consumption state of the CPU. For more information look at documentation published by the CPU maker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cStates")]
		public ChromeOsDeviceCpuInfoLogicalCpusCStates[] ChromeOsDeviceCpuInfoLogicalCpusCStates { get; set; }
		
		/// <summary>
		/// Current frequency the CPU is running at.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentScalingFrequencyKhz")]
		public System.Nullable<System.Int32> CurrentScalingFrequencyKhz { get; set; }
		
		/// <summary>
		/// Idle time since last boot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idleDuration")]
		public string IdleDuration { get; set; }
		
		/// <summary>
		/// Maximum frequency the CPU is allowed to run at, by policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxScalingFrequencyKhz")]
		public System.Nullable<System.Int32> MaxScalingFrequencyKhz { get; set; }
	}
	
	public class ChromeOsDeviceCpuInfoLogicalCpusCStates
	{
		
		/// <summary>
		/// Name of the state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Time spent in the state since the last reboot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionDuration")]
		public string SessionDuration { get; set; }
	}
	
	public class ChromeOsDeviceCpuStatusReports
	{
		
		/// <summary>
		/// A list of CPU temperature samples.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpuTemperatureInfo")]
		public ChromeOsDeviceCpuStatusReportsCpuTemperatureInfo[] ChromeOsDeviceCpuStatusReportsCpuTemperatureInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cpuUtilizationPercentageInfo")]
		public int[] CpuUtilizationPercentageInfo { get; set; }
		
		/// <summary>
		/// Date and time the report was received.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportTime")]
		public System.Nullable<System.DateTimeOffset> ReportTime { get; set; }
	}
	
	public class ChromeOsDeviceCpuStatusReportsCpuTemperatureInfo
	{
		
		/// <summary>
		/// CPU label
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Temperature in Celsius degrees.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="temperature")]
		public System.Nullable<System.Int32> Temperature { get; set; }
	}
	
	public class ChromeOsDeviceDeviceFiles
	{
		
		/// <summary>
		/// Date and time the file was created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public System.Nullable<System.DateTimeOffset> CreateTime { get; set; }
		
		/// <summary>
		/// File download URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadUrl")]
		public string DownloadUrl { get; set; }
		
		/// <summary>
		/// File name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// File type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ChromeOsDeviceDeviceLicenseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deviceLicenseTypeUnspecified")]
		deviceLicenseTypeUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="enterprise")]
		enterprise = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="enterpriseUpgrade")]
		enterpriseUpgrade = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="educationUpgrade")]
		educationUpgrade = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="education")]
		education = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kioskUpgrade")]
		kioskUpgrade = 5,
	}
	
	public class ChromeOsDeviceDiskVolumeReports
	{
		
		/// <summary>
		/// Disk volumes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumeInfo")]
		public ChromeOsDeviceDiskVolumeReportsVolumeInfo[] ChromeOsDeviceDiskVolumeReportsVolumeInfo { get; set; }
	}
	
	public class ChromeOsDeviceDiskVolumeReportsVolumeInfo
	{
		
		/// <summary>
		/// Free disk space [in bytes]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageFree")]
		public string StorageFree { get; set; }
		
		/// <summary>
		/// Total disk space [in bytes]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageTotal")]
		public string StorageTotal { get; set; }
		
		/// <summary>
		/// Volume id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumeId")]
		public string VolumeId { get; set; }
	}
	
	public class ChromeOsDeviceLastKnownNetwork
	{
		
		/// <summary>
		/// The IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// The WAN IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wanIpAddress")]
		public string WanIpAddress { get; set; }
	}
	
	/// <summary>
	/// Contains information regarding the current OS update status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OsUpdateStatus
	{
		
		/// <summary>
		/// Date and time of the last reboot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rebootTime")]
		public string RebootTime { get; set; }
		
		/// <summary>
		/// The update state of an OS update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<OsUpdateStatusState> State { get; set; }
		
		/// <summary>
		/// New required platform version from the pending updated kiosk app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetKioskAppVersion")]
		public string TargetKioskAppVersion { get; set; }
		
		/// <summary>
		/// New platform version of the OS image being downloaded and applied. It is only set when update status is UPDATE_STATUS_DOWNLOAD_IN_PROGRESS or UPDATE_STATUS_NEED_REBOOT. Note this could be a dummy "0.0.0.0" for UPDATE_STATUS_NEED_REBOOT for some edge cases, e.g. update engine is restarted without a reboot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetOsVersion")]
		public string TargetOsVersion { get; set; }
		
		/// <summary>
		/// Date and time of the last update check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateCheckTime")]
		public string UpdateCheckTime { get; set; }
		
		/// <summary>
		/// Date and time of the last successful OS update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OsUpdateStatusState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="updateStateUnspecified")]
		updateStateUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="updateStateNotStarted")]
		updateStateNotStarted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="updateStateDownloadInProgress")]
		updateStateDownloadInProgress = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="updateStateNeedReboot")]
		updateStateNeedReboot = 3,
	}
	
	public class ChromeOsDeviceRecentUsers
	{
		
		/// <summary>
		/// The user's email address. This is only present if the user type is `USER_TYPE_MANAGED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The type of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class ChromeOsDeviceScreenshotFiles
	{
		
		/// <summary>
		/// Date and time the file was created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public System.Nullable<System.DateTimeOffset> CreateTime { get; set; }
		
		/// <summary>
		/// File download URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadUrl")]
		public string DownloadUrl { get; set; }
		
		/// <summary>
		/// File name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// File type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class ChromeOsDeviceSystemRamFreeReports
	{
		
		/// <summary>
		/// Date and time the report was received.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportTime")]
		public System.Nullable<System.DateTimeOffset> ReportTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="systemRamFreeInfo")]
		public string[] SystemRamFreeInfo { get; set; }
	}
	
	public class ChromeOsDeviceTpmVersionInfo
	{
		
		/// <summary>
		/// TPM family. We use the TPM 2.0 style encoding, e.g.: TPM 1.2: "1.2" -> 312e3200 TPM 2.0: "2.0" -> 322e3000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family")]
		public string Family { get; set; }
		
		/// <summary>
		/// TPM firmware version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firmwareVersion")]
		public string FirmwareVersion { get; set; }
		
		/// <summary>
		/// TPM manufacturer code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manufacturer")]
		public string Manufacturer { get; set; }
		
		/// <summary>
		/// TPM specification level. See Library Specification for TPM 2.0 and Main Specification for TPM 1.2.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="specLevel")]
		public string SpecLevel { get; set; }
		
		/// <summary>
		/// TPM model number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tpmModel")]
		public string TpmModel { get; set; }
		
		/// <summary>
		/// Vendor-specific information such as Vendor ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorSpecific")]
		public string VendorSpecific { get; set; }
	}
	
	/// <summary>
	/// Data about an update to the status of a Chrome OS device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChromeOsDeviceAction
	{
		
		/// <summary>
		/// Action to be taken on the Chrome OS device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// Only used when the action is `deprovision`. With the `deprovision` action, this field is required. *Note*: The deprovision reason is audited because it might have implications on licenses for perpetual subscription customers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deprovisionReason")]
		public string DeprovisionReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChromeOsDevices
	{
		
		/// <summary>
		/// A list of Chrome OS Device objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chromeosdevices")]
		public ChromeOsDevice[] Chromeosdevices { get; set; }
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Kind of resource this is.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#chromeosdevices")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#chromeosdevices";
		
		/// <summary>
		/// Token used to access the next page of this result. To access the next page, use this token's value in the `pageToken` query string of this request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChromeOsMoveDevicesToOu
	{
		
		/// <summary>
		/// Chrome OS devices to be moved to OU
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceIds")]
		public string[] DeviceIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Customer
	{
		
		/// <summary>
		/// The customer's secondary contact email address. This email address cannot be on the same domain as the `customerDomain`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternateEmail")]
		public string AlternateEmail { get; set; }
		
		/// <summary>
		/// The customer's creation time (Readonly)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerCreationTime")]
		public System.Nullable<System.DateTimeOffset> CustomerCreationTime { get; set; }
		
		/// <summary>
		/// The customer's primary domain name string. Do not include the `www` prefix when creating a new customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerDomain")]
		public string CustomerDomain { get; set; }
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The unique ID for the customer's Google Workspace account. (Readonly)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies the resource as a customer. Value: `admin#directory#customer`
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#customer")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#customer";
		
		/// <summary>
		/// The customer's ISO 639-2 language code. See the [Language Codes](/admin-sdk/directory/v1/languages) page for the list of supported codes. Valid language codes outside the supported set will be accepted by the API but may lead to unexpected behavior. The default value is `en`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// The customer's contact phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalAddress")]
		public CustomerPostalAddress PostalAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerPostalAddress
	{
		
		/// <summary>
		/// A customer's physical address. The address can be composed of one to three lines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressLine1")]
		public string AddressLine1 { get; set; }
		
		/// <summary>
		/// Address line 2 of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressLine2")]
		public string AddressLine2 { get; set; }
		
		/// <summary>
		/// Address line 3 of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressLine3")]
		public string AddressLine3 { get; set; }
		
		/// <summary>
		/// The customer contact's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactName")]
		public string ContactName { get; set; }
		
		/// <summary>
		/// This is a required property. For `countryCode` information see the [ISO 3166 country code elements](https://www.iso.org/iso/country_codes.htm).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// Name of the locality. An example of a locality value is the city of `San Francisco`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public string Locality { get; set; }
		
		/// <summary>
		/// The company or company division name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organizationName")]
		public string OrganizationName { get; set; }
		
		/// <summary>
		/// The postal code. A postalCode example is a postal zip code such as `10009`. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Name of the region. An example of a region value is `NY` for the state of New York.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
	}
	
	/// <summary>
	/// Information regarding a command that was issued to a device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DirectoryChromeosdevicesCommand
	{
		
		/// <summary>
		/// The time at which the command will expire. If the device doesn't execute the command within this time the command will become expired.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commandExpireTime")]
		public string CommandExpireTime { get; set; }
		
		/// <summary>
		/// Unique ID of a device command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commandId")]
		public string CommandId { get; set; }
		
		/// <summary>
		/// The result of executing a command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commandResult")]
		public DirectoryChromeosdevicesCommandResult CommandResult { get; set; }
		
		/// <summary>
		/// The timestamp when the command was issued by the admin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issueTime")]
		public string IssueTime { get; set; }
		
		/// <summary>
		/// The payload that the command specified, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public string Payload { get; set; }
		
		/// <summary>
		/// Indicates the command state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<DirectoryChromeosdevicesCommandState> State { get; set; }
		
		/// <summary>
		/// The type of the command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<DirectoryChromeosdevicesCommandType> Type { get; set; }
	}
	
	/// <summary>
	/// The result of executing a command.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DirectoryChromeosdevicesCommandResult
	{
		
		/// <summary>
		/// The payload for the command result. The following commands respond with a payload: * `DEVICE_START_CRD_SESSION`: Payload is a stringified JSON object in the form: { "url": url }. The URL provides a link to the Chrome Remote Desktop session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commandResultPayload")]
		public string CommandResultPayload { get; set; }
		
		/// <summary>
		/// The error message with a short explanation as to why the command failed. Only present if the command failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// The time at which the command was executed or failed to execute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executeTime")]
		public string ExecuteTime { get; set; }
		
		/// <summary>
		/// The result of the command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public System.Nullable<DirectoryChromeosdevicesCommandResultResult> Result { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DirectoryChromeosdevicesCommandResultResult
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMMAND_RESULT_TYPE_UNSPECIFIED")]
		COMMAND_RESULT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IGNORED")]
		IGNORED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILURE")]
		FAILURE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCESS")]
		SUCCESS = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DirectoryChromeosdevicesCommandState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STATE_UNSPECIFIED")]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPIRED")]
		EXPIRED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELLED")]
		CANCELLED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SENT_TO_CLIENT")]
		SENT_TO_CLIENT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACKED_BY_CLIENT")]
		ACKED_BY_CLIENT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXECUTED_BY_CLIENT")]
		EXECUTED_BY_CLIENT = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DirectoryChromeosdevicesCommandType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMMAND_TYPE_UNSPECIFIED")]
		COMMAND_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REBOOT")]
		REBOOT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TAKE_A_SCREENSHOT")]
		TAKE_A_SCREENSHOT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SET_VOLUME")]
		SET_VOLUME = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WIPE_USERS")]
		WIPE_USERS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REMOTE_POWERWASH")]
		REMOTE_POWERWASH = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEVICE_START_CRD_SESSION")]
		DEVICE_START_CRD_SESSION = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CAPTURE_LOGS")]
		CAPTURE_LOGS = 7,
	}
	
	/// <summary>
	/// A request for issuing a command.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DirectoryChromeosdevicesIssueCommandRequest
	{
		
		/// <summary>
		/// The type of command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commandType")]
		public DirectoryChromeosdevicesCommandType CommandType { get; set; }
		
		/// <summary>
		/// The payload for the command, provide it only if command supports it. The following commands support adding payload: * `SET_VOLUME`: Payload is a stringified JSON object in the form: { "volume": 50 }. The volume has to be an integer in the range [0,100]. * `DEVICE_START_CRD_SESSION`: Payload is optionally a stringified JSON object in the form: { "ackedUserPresence": true }. `ackedUserPresence` is a boolean. By default, `ackedUserPresence` is set to `false`. To start a Chrome Remote Desktop session for an active device, set `ackedUserPresence` to `true`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public string Payload { get; set; }
	}
	
	/// <summary>
	/// A response for issuing a command.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DirectoryChromeosdevicesIssueCommandResponse
	{
		
		/// <summary>
		/// The unique ID of the issued command, used to retrieve the command status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commandId")]
		public string CommandId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DomainAlias
	{
		
		/// <summary>
		/// The creation time of the domain alias. (Read-only).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public string CreationTime { get; set; }
		
		/// <summary>
		/// The domain alias name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainAliasName")]
		public string DomainAliasName { get; set; }
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Kind of resource this is.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#domainAlias")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#domainAlias";
		
		/// <summary>
		/// The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentDomainName")]
		public string ParentDomainName { get; set; }
		
		/// <summary>
		/// Indicates the verification state of a domain alias. (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verified")]
		public System.Nullable<System.Boolean> Verified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DomainAliases
	{
		
		/// <summary>
		/// A list of domain alias objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainAliases")]
		public DomainAlias[] DomainAliases1 { get; set; }
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Kind of resource this is.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#domainAliases")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#domainAliases";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Domains
	{
		
		/// <summary>
		/// Creation time of the domain. Expressed in [Unix time](https://en.wikipedia.org/wiki/Epoch_time) format. (Read-only).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public string CreationTime { get; set; }
		
		/// <summary>
		/// A list of domain alias objects. (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainAliases")]
		public DomainAlias[] DomainAliases { get; set; }
		
		/// <summary>
		/// The domain name of the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Indicates if the domain is a primary domain (Read-only).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPrimary")]
		public System.Nullable<System.Boolean> IsPrimary { get; set; }
		
		/// <summary>
		/// Kind of resource this is.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#domain")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#domain";
		
		/// <summary>
		/// Indicates the verification state of a domain. (Read-only).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verified")]
		public System.Nullable<System.Boolean> Verified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Domains2
	{
		
		/// <summary>
		/// A list of domain objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domains")]
		public Domains[] Domains { get; set; }
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Kind of resource this is.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#domains")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#domains";
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Empty
	{
	}
	
	/// <summary>
	/// JSON template for Feature object in Directory API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Feature
	{
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etags")]
		public string Etags { get; set; }
		
		/// <summary>
		/// Kind of resource this is.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#resources#features#Feature")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#resources#features#Feature";
		
		/// <summary>
		/// The name of the feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// JSON template for a feature instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FeatureInstance
	{
		
		/// <summary>
		/// JSON template for Feature object in Directory API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feature")]
		public Feature Feature { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FeatureRename
	{
		
		/// <summary>
		/// New name of the feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newName")]
		public string NewName { get; set; }
	}
	
	/// <summary>
	/// Public API: Resources.features
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Features
	{
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The Features in this page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="features")]
		public Feature[] Features1 { get; set; }
		
		/// <summary>
		/// Kind of resource this is.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#resources#features#featuresList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#resources#features#featuresList";
		
		/// <summary>
		/// The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Google Groups provide your users the ability to send messages to groups of people using the group's email address. For more information about common tasks, see the [Developer's Guide](https://developers.google.com/admin-sdk/directory/v1/guides/manage-groups). For information about other types of groups, see the [Cloud Identity Groups API documentation](https://cloud.google.com/identity/docs/groups). Note: The user calling the API (or being impersonated by a service account) must have an assigned [role](https://developers.google.com/admin-sdk/directory/v1/guides/manage-roles) that includes Admin API Groups permissions, such as Super Admin or Groups Admin.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Group
	{
		
		/// <summary>
		/// Read-only. Value is `true` if this group was created by an administrator rather than a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminCreated")]
		public System.Nullable<System.Boolean> AdminCreated { get; set; }
		
		/// <summary>
		/// Read-only. The list of a group's alias email addresses. To add, update, or remove a group's aliases, use the `groups.aliases` methods. If edited in a group's POST or PUT request, the edit is ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aliases")]
		public string[] Aliases { get; set; }
		
		/// <summary>
		/// An extended description to help users determine the purpose of a group. For example, you can include information about who should join the group, the types of messages to send to the group, links to FAQs about the group, or related groups. Maximum length is `4,096` characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The number of users that are direct members of the group. If a group is a member (child) of this group (the parent), members of the child group are not counted in the `directMembersCount` property of the parent group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directMembersCount")]
		public string DirectMembersCount { get; set; }
		
		/// <summary>
		/// The group's email address. If your account has multiple domains, select the appropriate domain for the email address. The `email` must be unique. This property is required when creating a group. Group email addresses are subject to the same character usage rules as usernames, see the [help center](https://support.google.com/a/answer/9193374) for details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Read-only. The unique ID of a group. A group `id` can be used as a group request URI's `groupKey`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The type of the API resource. For Groups resources, the value is `admin#directory#group`.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#group")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#group";
		
		/// <summary>
		/// The group's display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Read-only. The list of the group's non-editable alias email addresses that are outside of the account's primary domain or subdomains. These are functioning email addresses used by the group. This is a read-only property returned in the API's response for a group. If edited in a group's POST or PUT request, the edit is ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonEditableAliases")]
		public string[] NonEditableAliases { get; set; }
	}
	
	/// <summary>
	/// The Directory API manages aliases, which are alternative email addresses.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupAlias
	{
		
		/// <summary>
		/// The alias email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The unique ID of the group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The type of the API resource. For Alias resources, the value is `admin#directory#alias`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The primary email address of the group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryEmail")]
		public string PrimaryEmail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Groups
	{
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// A list of group objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public Group[] Groups1 { get; set; }
		
		/// <summary>
		/// Kind of resource this is.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#groups")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#groups";
		
		/// <summary>
		/// Token used to access next page of this result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPrintServersResponse
	{
		
		/// <summary>
		/// A token that can be sent as `page_token` in a request to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// List of print servers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="printServers")]
		public PrintServer[] PrintServers { get; set; }
	}
	
	/// <summary>
	/// Response for listing allowed printer models.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPrinterModelsResponse
	{
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Printer models that are currently allowed to be configured for ChromeOs. Some printers may be added or removed over time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="printerModels")]
		public PrinterModel[] PrinterModels { get; set; }
	}
	
	/// <summary>
	/// Printer manufacturer and model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PrinterModel
	{
		
		/// <summary>
		/// Display name. eq. "Brother MFC-8840D"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Make and model as represented in "make_and_model" field in Printer object. eq. "brother mfc-8840d"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="makeAndModel")]
		public string MakeAndModel { get; set; }
		
		/// <summary>
		/// Manufacturer. eq. "Brother"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manufacturer")]
		public string Manufacturer { get; set; }
	}
	
	/// <summary>
	/// Response for listing printers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPrintersResponse
	{
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// List of printers. If `org_unit_id` was given in the request, then only printers visible for this OU will be returned. If `org_unit_id` was not given in the request, then all printers will be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="printers")]
		public Printer[] Printers { get; set; }
	}
	
	/// <summary>
	/// A Google Groups member can be a user or another group. This member can be inside or outside of your account's domains. For more information about common group member tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-group-members).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Member
	{
		
		/// <summary>
		/// Defines mail delivery preferences of member. This field is only supported by `insert`, `update`, and `get` methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delivery_settings")]
		public string Delivery_settings { get; set; }
		
		/// <summary>
		/// The member's email address. A member can be a user or another group. This property is required when adding a member to a group. The `email` must be unique and cannot be an alias of another group. If the email address is changed, the API automatically reflects the email address changes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The unique ID of the group member. A member `id` can be used as a member request URI's `memberKey`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The type of the API resource. For Members resources, the value is `admin#directory#member`.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#member")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#member";
		
		/// <summary>
		/// The member's role in a group. The API returns an error for cycles in group memberships. For example, if `group1` is a member of `group2`, `group2` cannot be a member of `group1`. For more information about a member's role, see the [administration help center](https://support.google.com/a/answer/167094).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
		
		/// <summary>
		/// Status of member (Immutable)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The type of group member.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Members
	{
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Kind of resource this is.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#members")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#members";
		
		/// <summary>
		/// A list of member objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public Member[] Members1 { get; set; }
		
		/// <summary>
		/// Token used to access next page of this result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// JSON template for Has Member response in Directory API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MembersHasMember
	{
		
		/// <summary>
		/// Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isMember")]
		public System.Nullable<System.Boolean> IsMember { get; set; }
	}
	
	/// <summary>
	/// Google Workspace Mobile Management includes Android, [Google Sync](https://support.google.com/a/answer/135937), and iOS devices. For more information about common group mobile device API tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices.html).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MobileDevice
	{
		
		/// <summary>
		/// Adb (USB debugging) enabled or disabled on device (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adbStatus")]
		public System.Nullable<System.Boolean> AdbStatus { get; set; }
		
		/// <summary>
		/// The list of applications installed on an Android mobile device. It is not applicable to Google Sync and iOS devices. The list includes any Android applications that access Google Workspace data. When updating an applications list, it is important to note that updates replace the existing list. If the Android device has two existing applications and the API updates the list with five applications, the is now the updated list of five applications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applications")]
		public MobileDeviceApplications[] MobileDeviceApplications { get; set; }
		
		/// <summary>
		/// The device's baseband version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basebandVersion")]
		public string BasebandVersion { get; set; }
		
		/// <summary>
		/// Mobile Device Bootloader version (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootloaderVersion")]
		public string BootloaderVersion { get; set; }
		
		/// <summary>
		/// Mobile Device Brand (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brand")]
		public string Brand { get; set; }
		
		/// <summary>
		/// The device's operating system build number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildNumber")]
		public string BuildNumber { get; set; }
		
		/// <summary>
		/// The default locale used on the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultLanguage")]
		public string DefaultLanguage { get; set; }
		
		/// <summary>
		/// Developer options enabled or disabled on device (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="developerOptionsStatus")]
		public System.Nullable<System.Boolean> DeveloperOptionsStatus { get; set; }
		
		/// <summary>
		/// The compromised device status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceCompromisedStatus")]
		public string DeviceCompromisedStatus { get; set; }
		
		/// <summary>
		/// The serial number for a Google Sync mobile device. For Android and iOS devices, this is a software generated unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// DevicePasswordStatus (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="devicePasswordStatus")]
		public string DevicePasswordStatus { get; set; }
		
		/// <summary>
		/// The list of the owner's email addresses. If your application needs the current list of user emails, use the [get](/admin-sdk/directory/v1/reference/mobiledevices/get.html) method. For additional information, see the [retrieve a user](/admin-sdk/directory/v1/guides/manage-users#get_user) method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string[] Email { get; set; }
		
		/// <summary>
		/// Mobile Device Encryption Status (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionStatus")]
		public string EncryptionStatus { get; set; }
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstSync")]
		public System.Nullable<System.DateTimeOffset> FirstSync { get; set; }
		
		/// <summary>
		/// Mobile Device Hardware (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hardware")]
		public string Hardware { get; set; }
		
		/// <summary>
		/// The IMEI/MEID unique identifier for Android hardware. It is not applicable to Google Sync devices. When adding an Android mobile device, this is an optional property. When updating one of these devices, this is a read-only property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hardwareId")]
		public string HardwareId { get; set; }
		
		/// <summary>
		/// The device's IMEI number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imei")]
		public string Imei { get; set; }
		
		/// <summary>
		/// The device's kernel version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kernelVersion")]
		public string KernelVersion { get; set; }
		
		/// <summary>
		/// The type of the API resource. For Mobiledevices resources, the value is `admin#directory#mobiledevice`.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#mobiledevice")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#mobiledevice";
		
		/// <summary>
		/// Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastSync")]
		public System.Nullable<System.DateTimeOffset> LastSync { get; set; }
		
		/// <summary>
		/// Boolean indicating if this account is on owner/primary profile or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedAccountIsOnOwnerProfile")]
		public System.Nullable<System.Boolean> ManagedAccountIsOnOwnerProfile { get; set; }
		
		/// <summary>
		/// Mobile Device manufacturer (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manufacturer")]
		public string Manufacturer { get; set; }
		
		/// <summary>
		/// The device's MEID number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meid")]
		public string Meid { get; set; }
		
		/// <summary>
		/// The mobile device's model name, for example Nexus S. This property can be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For more information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile=devices#update_mobile_device).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		/// <summary>
		/// The list of the owner's user names. If your application needs the current list of device owner names, use the [get](/admin-sdk/directory/v1/reference/mobiledevices/get.html) method. For more information about retrieving mobile device user information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-users#get_user).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string[] Name { get; set; }
		
		/// <summary>
		/// Mobile Device mobile or network operator (if available) (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkOperator")]
		public string NetworkOperator { get; set; }
		
		/// <summary>
		/// The mobile device's operating system, for example IOS 4.3 or Android 2.3.5. This property can be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For more information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices#update_mobile_device).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="os")]
		public string Os { get; set; }
		
		/// <summary>
		/// The list of accounts added on device (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otherAccountsInfo")]
		public string[] OtherAccountsInfo { get; set; }
		
		/// <summary>
		/// DMAgentPermission (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privilege")]
		public string Privilege { get; set; }
		
		/// <summary>
		/// Mobile Device release version version (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="releaseVersion")]
		public string ReleaseVersion { get; set; }
		
		/// <summary>
		/// The unique ID the API service uses to identify the mobile device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// Mobile Device Security patch level (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityPatchLevel")]
		public string SecurityPatchLevel { get; set; }
		
		/// <summary>
		/// The device's serial number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serialNumber")]
		public string SerialNumber { get; set; }
		
		/// <summary>
		/// The device's status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Work profile supported on device (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportsWorkProfile")]
		public System.Nullable<System.Boolean> SupportsWorkProfile { get; set; }
		
		/// <summary>
		/// The type of mobile device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Unknown sources enabled or disabled on device (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unknownSourcesStatus")]
		public System.Nullable<System.Boolean> UnknownSourcesStatus { get; set; }
		
		/// <summary>
		/// Gives information about the device such as `os` version. This property can be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For more information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices#update_mobile_device).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAgent")]
		public string UserAgent { get; set; }
		
		/// <summary>
		/// The device's MAC address on Wi-Fi networks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wifiMacAddress")]
		public string WifiMacAddress { get; set; }
	}
	
	public class MobileDeviceApplications
	{
		
		/// <summary>
		/// The application's display name. An example is `Browser`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The application's package name. An example is `com.android.browser`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		/// <summary>
		/// The list of permissions of this application. These can be either a standard Android permission or one defined by the application, and are found in an application's [Android manifest](https://developer.android.com/guide/topics/manifest/uses-permission-element.html). Examples of a Calendar application's permissions are `READ_CALENDAR`, or `MANAGE_ACCOUNTS`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permission")]
		public string[] Permission { get; set; }
		
		/// <summary>
		/// The application's version code. An example is `13`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionCode")]
		public System.Nullable<System.Int32> VersionCode { get; set; }
		
		/// <summary>
		/// The application's version name. An example is `3.2-140714`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionName")]
		public string VersionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MobileDeviceAction
	{
		
		/// <summary>
		/// The action to be performed on the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MobileDevices
	{
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Kind of resource this is.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#mobiledevices")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#mobiledevices";
		
		/// <summary>
		/// A list of Mobile Device objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobiledevices")]
		public MobileDevice[] Mobiledevices { get; set; }
		
		/// <summary>
		/// Token used to access next page of this result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Managing your account's organizational units allows you to configure your users' access to services and custom settings. For more information about common organizational unit tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-org-units.html). The customer's organizational unit hierarchy is limited to 35 levels of depth.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrgUnit
	{
		
		/// <summary>
		/// Determines if a sub-organizational unit can inherit the settings of the parent organization. The default value is `false`, meaning a sub-organizational unit inherits the settings of the nearest parent organizational unit. This field is deprecated. Setting it to `true` is no longer supported and can have _unintended consequences_. For more information about inheritance and users in an organization structure, see the [administration help center](https://support.google.com/a/answer/4352075).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blockInheritance")]
		public System.Nullable<System.Boolean> BlockInheritance { get; set; }
		
		/// <summary>
		/// Description of the organizational unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The type of the API resource. For Orgunits resources, the value is `admin#directory#orgUnit`.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#orgUnit")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#orgUnit";
		
		/// <summary>
		/// The organizational unit's path name. For example, an organizational unit's name within the /corp/support/sales_support parent path is sales_support. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The unique ID of the organizational unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orgUnitId")]
		public string OrgUnitId { get; set; }
		
		/// <summary>
		/// The full path to the organizational unit. The `orgUnitPath` is a derived property. When listed, it is derived from `parentOrgunitPath` and organizational unit's `name`. For example, for an organizational unit named 'apps' under parent organization '/engineering', the orgUnitPath is '/engineering/apps'. In order to edit an `orgUnitPath`, either update the name of the organization or the `parentOrgunitPath`. A user's organizational unit determines which Google Workspace services the user has access to. If the user is moved to a new organization, the user's access changes. For more information about organization structures, see the [administration help center](https://support.google.com/a/answer/4352075). For more information about moving a user to a different organization, see [Update a user](/admin-sdk/directory/v1/guides/manage-users.html#update_user).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orgUnitPath")]
		public string OrgUnitPath { get; set; }
		
		/// <summary>
		/// The unique ID of the parent organizational unit. Required, unless `parentOrgUnitPath` is set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentOrgUnitId")]
		public string ParentOrgUnitId { get; set; }
		
		/// <summary>
		/// The organizational unit's parent path. For example, /corp/sales is the parent path for /corp/sales/sales_support organizational unit. Required, unless `parentOrgUnitId` is set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentOrgUnitPath")]
		public string ParentOrgUnitPath { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrgUnits
	{
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The type of the API resource. For Org Unit resources, the type is `admin#directory#orgUnits`.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#orgUnits")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#orgUnits";
		
		/// <summary>
		/// A list of organizational unit objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organizationUnits")]
		public OrgUnit[] OrganizationUnits { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Privilege
	{
		
		/// <summary>
		/// A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="childPrivileges")]
		public Privilege[] ChildPrivileges { get; set; }
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// If the privilege can be restricted to an organization unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isOuScopable")]
		public System.Nullable<System.Boolean> IsOuScopable { get; set; }
		
		/// <summary>
		/// The type of the API resource. This is always `admin#directory#privilege`.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#privilege")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#privilege";
		
		/// <summary>
		/// The name of the privilege.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privilegeName")]
		public string PrivilegeName { get; set; }
		
		/// <summary>
		/// The obfuscated ID of the service this privilege is for. This value is returned with [`Privileges.list()`](/admin-sdk/directory/v1/reference/privileges/list).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public string ServiceId { get; set; }
		
		/// <summary>
		/// The name of the service this privilege is for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Privileges
	{
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// A list of Privilege resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Privilege[] Items { get; set; }
		
		/// <summary>
		/// The type of the API resource. This is always `admin#directory#privileges`.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#privileges")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#privileges";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Role
	{
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Returns `true` if the role is a super admin role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSuperAdminRole")]
		public System.Nullable<System.Boolean> IsSuperAdminRole { get; set; }
		
		/// <summary>
		/// Returns `true` if this is a pre-defined system role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSystemRole")]
		public System.Nullable<System.Boolean> IsSystemRole { get; set; }
		
		/// <summary>
		/// The type of the API resource. This is always `admin#directory#role`.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#role")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#role";
		
		/// <summary>
		/// A short description of the role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roleDescription")]
		public string RoleDescription { get; set; }
		
		/// <summary>
		/// ID of the role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roleId")]
		public string RoleId { get; set; }
		
		/// <summary>
		/// Name of the role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roleName")]
		public string RoleName { get; set; }
		
		/// <summary>
		/// The set of privileges that are granted to this role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rolePrivileges")]
		public RoleRolePrivileges[] RoleRolePrivileges { get; set; }
	}
	
	public class RoleRolePrivileges
	{
		
		/// <summary>
		/// The name of the privilege.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privilegeName")]
		public string PrivilegeName { get; set; }
		
		/// <summary>
		/// The obfuscated ID of the service this privilege is for. This value is returned with [`Privileges.list()`](/admin-sdk/directory/v1/reference/privileges/list).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public string ServiceId { get; set; }
	}
	
	/// <summary>
	/// Defines an assignment of a role.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RoleAssignment
	{
		
		/// <summary>
		/// The unique ID of the entity this role is assigned to—either the `user_id` of a user, the `group_id` of a group, or the `uniqueId` of a service account as defined in [Identity and Access Management (IAM)](https://cloud.google.com/iam/docs/reference/rest/v1/projects.serviceAccounts).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignedTo")]
		public string AssignedTo { get; set; }
		
		/// <summary>
		/// Output only. The type of the assignee (`USER` or `GROUP`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assigneeType")]
		public System.Nullable<RoleAssignmentAssigneeType> AssigneeType { get; set; }
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The type of the API resource. This is always `admin#directory#roleAssignment`.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#roleAssignment")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#roleAssignment";
		
		/// <summary>
		/// If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orgUnitId")]
		public string OrgUnitId { get; set; }
		
		/// <summary>
		/// ID of this roleAssignment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roleAssignmentId")]
		public string RoleAssignmentId { get; set; }
		
		/// <summary>
		/// The ID of the role that is assigned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roleId")]
		public string RoleId { get; set; }
		
		/// <summary>
		/// The scope in which this role is assigned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scopeType")]
		public string ScopeType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RoleAssignmentAssigneeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="user")]
		user = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group")]
		group = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RoleAssignments
	{
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// A list of RoleAssignment resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public RoleAssignment[] Items { get; set; }
		
		/// <summary>
		/// The type of the API resource. This is always `admin#directory#roleAssignments`.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#roleAssignments")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#roleAssignments";
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Roles
	{
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// A list of Role resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Role[] Items { get; set; }
		
		/// <summary>
		/// The type of the API resource. This is always `admin#directory#roles`.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#roles")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#roles";
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The type of API resource. For Schema resources, this is always `admin#directory#schema`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Schema
	{
		
		/// <summary>
		/// Display name for the schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// A list of fields in the schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public SchemaFieldSpec[] Fields { get; set; }
		
		/// <summary>
		/// Kind of resource this is.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#schema")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#schema";
		
		/// <summary>
		/// The unique identifier of the schema (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemaId")]
		public string SchemaId { get; set; }
		
		/// <summary>
		/// The schema's name. Each `schema_name` must be unique within a customer. Reusing a name results in a `409: Entity already exists` error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemaName")]
		public string SchemaName { get; set; }
	}
	
	/// <summary>
	/// You can use schemas to add custom fields to user profiles. You can use these fields to store information such as the projects your users work on, their physical locations, their hire dates, or whatever else fits your business needs. For more information, see [Custom User Fields](/admin-sdk/directory/v1/guides/manage-schemas).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SchemaFieldSpec
	{
		
		/// <summary>
		/// Display Name of the field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The ETag of the field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The unique identifier of the field (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldId")]
		public string FieldId { get; set; }
		
		/// <summary>
		/// The name of the field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldName")]
		public string FieldName { get; set; }
		
		/// <summary>
		/// The type of the field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldType")]
		public string FieldType { get; set; }
		
		/// <summary>
		/// Boolean specifying whether the field is indexed or not. Default: `true`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexed")]
		public System.Nullable<System.Boolean> Indexed { get; set; }
		
		/// <summary>
		/// The kind of resource this is. For schema fields this is always `admin#directory#schema#fieldspec`.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#schema#fieldspec")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#schema#fieldspec";
		
		/// <summary>
		/// A boolean specifying whether this is a multi-valued field or not. Default: `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiValued")]
		public System.Nullable<System.Boolean> MultiValued { get; set; }
		
		/// <summary>
		/// Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the `numericIndexingSpec` allows range queries to be supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numericIndexingSpec")]
		public SchemaFieldSpecNumericIndexingSpec NumericIndexingSpec { get; set; }
		
		/// <summary>
		/// Specifies who can view values of this field. See [Retrieve users as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin) for more information. Note: It may take up to 24 hours for changes to this field to be reflected.
		/// </summary>
		[System.ComponentModel.DefaultValue("ALL_DOMAIN_USERS")]
		[System.Runtime.Serialization.DataMember(Name="readAccessType")]
		public string ReadAccessType { get; set; } = "ALL_DOMAIN_USERS";
	}
	
	public class SchemaFieldSpecNumericIndexingSpec
	{
		
		/// <summary>
		/// Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxValue")]
		public System.Nullable<System.Double> MaxValue { get; set; }
		
		/// <summary>
		/// Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minValue")]
		public System.Nullable<System.Double> MinValue { get; set; }
	}
	
	/// <summary>
	/// JSON response template for List Schema operation in Directory API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Schemas
	{
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Kind of resource this is.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#schemas")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#schemas";
		
		/// <summary>
		/// A list of UserSchema objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemas")]
		public Schema[] Schemas1 { get; set; }
	}
	
	/// <summary>
	/// JSON template for token resource in Directory API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Token
	{
		
		/// <summary>
		/// Whether the application is registered with Google. The value is `true` if the application has an anonymous Client ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="anonymous")]
		public System.Nullable<System.Boolean> Anonymous { get; set; }
		
		/// <summary>
		/// The Client ID of the application the token is issued to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// The displayable name of the application the token is issued to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayText")]
		public string DisplayText { get; set; }
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The type of the API resource. This is always `admin#directory#token`.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#token")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#token";
		
		/// <summary>
		/// Whether the token is issued to an installed application. The value is `true` if the application is installed to a desktop or mobile device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nativeApp")]
		public System.Nullable<System.Boolean> NativeApp { get; set; }
		
		/// <summary>
		/// A list of authorization scopes the application is granted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scopes")]
		public string[] Scopes { get; set; }
		
		/// <summary>
		/// The unique ID of the user that issued the token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userKey")]
		public string UserKey { get; set; }
	}
	
	/// <summary>
	/// JSON response template for List tokens operation in Directory API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tokens
	{
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// A list of Token resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Token[] Items { get; set; }
		
		/// <summary>
		/// The type of the API resource. This is always `admin#directory#tokenList`.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#tokenList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#tokenList";
	}
	
	/// <summary>
	/// The Directory API allows you to create and manage your account's users, user aliases, and user Google profile photos. For more information about common tasks, see the [User Accounts Developer's Guide](/admin-sdk/directory/v1/guides/manage-users.html) and the [User Aliases Developer's Guide](/admin-sdk/directory/v1/guides/manage-user-aliases.html).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class User
	{
		
		/// <summary>
		/// The list of the user's addresses. The maximum allowed data size for this field is 10KB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addresses")]
		public object Addresses { get; set; }
		
		/// <summary>
		/// Output only. This property is `true` if the user has completed an initial login and accepted the Terms of Service agreement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agreedToTerms")]
		public System.Nullable<System.Boolean> AgreedToTerms { get; set; }
		
		/// <summary>
		/// Output only. The list of the user's alias email addresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aliases")]
		public string[] Aliases { get; set; }
		
		/// <summary>
		/// Indicates if user is archived.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="archived")]
		public System.Nullable<System.Boolean> Archived { get; set; }
		
		/// <summary>
		/// Indicates if the user is forced to change their password at next login. This setting doesn't apply when [the user signs in via a third-party identity provider](https://support.google.com/a/answer/60224).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changePasswordAtNextLogin")]
		public System.Nullable<System.Boolean> ChangePasswordAtNextLogin { get; set; }
		
		/// <summary>
		/// User's G Suite account creation time. (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		/// <summary>
		/// Custom fields of the user. The key is a `schema_name` and its values are `'field_name': 'field_value'`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customSchemas")]
		public System.Collections.Generic.Dictionary<string, UserCustomProperties> CustomSchemas { get; set; }
		
		/// <summary>
		/// Output only. The customer ID to [retrieve all account users](/admin-sdk/directory/v1/guides/manage-users.html#get_all_users). You can use the alias `my_customer` to represent your account's `customerId`. As a reseller administrator, you can use the resold customer account's `customerId`. To get a `customerId`, use the account's primary domain in the `domain` parameter of a [users.list](/admin-sdk/directory/v1/reference/users/list) request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerId")]
		public string CustomerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletionTime")]
		public System.Nullable<System.DateTimeOffset> DeletionTime { get; set; }
		
		/// <summary>
		/// The list of the user's email addresses. The maximum allowed data size for this field is 10KB. This excludes `publicKeyEncryptionCertificates`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emails")]
		public object Emails { get; set; }
		
		/// <summary>
		/// Output only. ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The list of external IDs for the user, such as an employee or network ID. The maximum allowed data size for this field is 2KB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalIds")]
		public object ExternalIds { get; set; }
		
		/// <summary>
		/// The user's gender. The maximum allowed data size for this field is 1KB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public object Gender { get; set; }
		
		/// <summary>
		/// Stores the hash format of the `password` property. The following `hashFunction` values are allowed: * `MD5` - Accepts simple hex-encoded values. * `SHA-1` - Accepts simple hex-encoded values. * `crypt` - Compliant with the [C crypt library](https://en.wikipedia.org/wiki/Crypt_%28C%29). Supports the DES, MD5 (hash prefix `$1$`), SHA-256 (hash prefix `$5$`), and SHA-512 (hash prefix `$6$`) hash algorithms. If rounds are specified as part of the prefix, they must be 10,000 or fewer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hashFunction")]
		public string HashFunction { get; set; }
		
		/// <summary>
		/// The unique ID for the user. A user `id` can be used as a user request URI's `userKey`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The list of the user's Instant Messenger (IM) accounts. A user account can have multiple ims properties. But, only one of these ims properties can be the primary IM contact. The maximum allowed data size for this field is 2KB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ims")]
		public object Ims { get; set; }
		
		/// <summary>
		/// Indicates if the user's profile is visible in the Google Workspace global address list when the contact sharing feature is enabled for the domain. For more information about excluding user profiles, see the [administration help center](https://support.google.com/a/answer/1285988).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeInGlobalAddressList")]
		public System.Nullable<System.Boolean> IncludeInGlobalAddressList { get; set; }
		
		/// <summary>
		/// If `true`, the user's IP address is subject to a deprecated IP address [`allowlist`](https://support.google.com/a/answer/60752) configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipWhitelisted")]
		public System.Nullable<System.Boolean> IpWhitelisted { get; set; }
		
		/// <summary>
		/// Output only. Indicates a user with super admininistrator privileges. The `isAdmin` property can only be edited in the [Make a user an administrator](/admin-sdk/directory/v1/guides/manage-users.html#make_admin) operation ( [makeAdmin](/admin-sdk/directory/v1/reference/users/makeAdmin.html) method). If edited in the user [insert](/admin-sdk/directory/v1/reference/users/insert.html) or [update](/admin-sdk/directory/v1/reference/users/update.html) methods, the edit is ignored by the API service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAdmin")]
		public System.Nullable<System.Boolean> IsAdmin { get; set; }
		
		/// <summary>
		/// Output only. Indicates if the user is a delegated administrator. Delegated administrators are supported by the API but cannot create or undelete users, or make users administrators. These requests are ignored by the API service. Roles and privileges for administrators are assigned using the [Admin console](https://support.google.com/a/answer/33325).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDelegatedAdmin")]
		public System.Nullable<System.Boolean> IsDelegatedAdmin { get; set; }
		
		/// <summary>
		/// Output only. Is 2-step verification enforced (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isEnforcedIn2Sv")]
		public System.Nullable<System.Boolean> IsEnforcedIn2Sv { get; set; }
		
		/// <summary>
		/// Output only. Is enrolled in 2-step verification (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isEnrolledIn2Sv")]
		public System.Nullable<System.Boolean> IsEnrolledIn2Sv { get; set; }
		
		/// <summary>
		/// Output only. Indicates if the user's Google mailbox is created. This property is only applicable if the user has been assigned a Gmail license.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isMailboxSetup")]
		public System.Nullable<System.Boolean> IsMailboxSetup { get; set; }
		
		/// <summary>
		/// The list of the user's keywords. The maximum allowed data size for this field is 1KB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public object Keywords { get; set; }
		
		/// <summary>
		/// Output only. The type of the API resource. For Users resources, the value is `admin#directory#user`.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#user")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#user";
		
		/// <summary>
		/// The user's languages. The maximum allowed data size for this field is 1KB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public object Languages { get; set; }
		
		/// <summary>
		/// User's last login time. (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastLoginTime")]
		public System.Nullable<System.DateTimeOffset> LastLoginTime { get; set; }
		
		/// <summary>
		/// The user's locations. The maximum allowed data size for this field is 10KB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public object Locations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public UserName Name { get; set; }
		
		/// <summary>
		/// Output only. The list of the user's non-editable alias email addresses. These are typically outside the account's primary domain or sub-domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonEditableAliases")]
		public string[] NonEditableAliases { get; set; }
		
		/// <summary>
		/// Notes for the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public object Notes { get; set; }
		
		/// <summary>
		/// The full path of the parent organization associated with the user. If the parent organization is the top-level, it is represented as a forward slash (`/`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orgUnitPath")]
		public string OrgUnitPath { get; set; }
		
		/// <summary>
		/// The list of organizations the user belongs to. The maximum allowed data size for this field is 10KB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organizations")]
		public object Organizations { get; set; }
		
		/// <summary>
		/// User's password
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// The list of the user's phone numbers. The maximum allowed data size for this field is 1KB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phones")]
		public object Phones { get; set; }
		
		/// <summary>
		/// The list of [POSIX](https://www.opengroup.org/austin/papers/posix_faq.html) account information for the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="posixAccounts")]
		public object PosixAccounts { get; set; }
		
		/// <summary>
		/// The user's primary email address. This property is required in a request to create a user account. The `primaryEmail` must be unique and cannot be an alias of another user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryEmail")]
		public string PrimaryEmail { get; set; }
		
		/// <summary>
		/// Recovery email of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recoveryEmail")]
		public string RecoveryEmail { get; set; }
		
		/// <summary>
		/// Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recoveryPhone")]
		public string RecoveryPhone { get; set; }
		
		/// <summary>
		/// The list of the user's relationships to other users. The maximum allowed data size for this field is 2KB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relations")]
		public object Relations { get; set; }
		
		/// <summary>
		/// A list of SSH public keys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sshPublicKeys")]
		public object SshPublicKeys { get; set; }
		
		/// <summary>
		/// Indicates if user is suspended.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suspended")]
		public System.Nullable<System.Boolean> Suspended { get; set; }
		
		/// <summary>
		/// Output only. Has the reason a user account is suspended either by the administrator or by Google at the time of suspension. The property is returned only if the `suspended` property is `true`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suspensionReason")]
		public string SuspensionReason { get; set; }
		
		/// <summary>
		/// Output only. ETag of the user's photo (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnailPhotoEtag")]
		public string ThumbnailPhotoEtag { get; set; }
		
		/// <summary>
		/// Output only. The URL of the user's profile photo. The URL might be temporary or private.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnailPhotoUrl")]
		public string ThumbnailPhotoUrl { get; set; }
		
		/// <summary>
		/// The user's websites. The maximum allowed data size for this field is 2KB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="websites")]
		public object Websites { get; set; }
	}
	
	/// <summary>
	/// JSON template for a set of custom properties (i.e. all fields in a particular schema)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserCustomProperties
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserName
	{
		
		/// <summary>
		/// The user's display name. Limit: 256 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The user's last name. Required when creating a user account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="familyName")]
		public string FamilyName { get; set; }
		
		/// <summary>
		/// The user's full name formed by concatenating the first and last name values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullName")]
		public string FullName { get; set; }
		
		/// <summary>
		/// The user's first name. Required when creating a user account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="givenName")]
		public string GivenName { get; set; }
	}
	
	/// <summary>
	/// JSON template for About (notes) of a user in Directory API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserAbout
	{
		
		/// <summary>
		/// About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		/// <summary>
		/// Actual value of notes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// JSON template for address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserAddress
	{
		
		/// <summary>
		/// Country.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// Custom type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customType")]
		public string CustomType { get; set; }
		
		/// <summary>
		/// Extended Address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extendedAddress")]
		public string ExtendedAddress { get; set; }
		
		/// <summary>
		/// Formatted address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formatted")]
		public string Formatted { get; set; }
		
		/// <summary>
		/// Locality.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public string Locality { get; set; }
		
		/// <summary>
		/// Other parts of address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="poBox")]
		public string PoBox { get; set; }
		
		/// <summary>
		/// Postal code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// If this is user's primary address. Only one entry could be marked as primary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primary")]
		public System.Nullable<System.Boolean> Primary { get; set; }
		
		/// <summary>
		/// Region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be clobbered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceIsStructured")]
		public System.Nullable<System.Boolean> SourceIsStructured { get; set; }
		
		/// <summary>
		/// Street.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streetAddress")]
		public string StreetAddress { get; set; }
		
		/// <summary>
		/// Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The Directory API manages aliases, which are alternative email addresses.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserAlias
	{
		
		/// <summary>
		/// The alias email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The unique ID for the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The type of the API resource. For Alias resources, the value is `admin#directory#alias`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The user's primary email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryEmail")]
		public string PrimaryEmail { get; set; }
	}
	
	/// <summary>
	/// JSON template for an email.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserEmail
	{
		
		/// <summary>
		/// Email id of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Custom Type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customType")]
		public string CustomType { get; set; }
		
		/// <summary>
		/// If this is user's primary email. Only one entry could be marked as primary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primary")]
		public System.Nullable<System.Boolean> Primary { get; set; }
		
		/// <summary>
		/// Public Key Encryption Certificates. Current limit: 1 per email address, and 5 per user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public_key_encryption_certificates")]
		public UserEmailPublic_key_encryption_certificates Public_key_encryption_certificates { get; set; }
		
		/// <summary>
		/// Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class UserEmailPublic_key_encryption_certificates
	{
		
		/// <summary>
		/// X.509 encryption certificate in `PEM` format. Must only be an end-entity (leaf) certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificate")]
		public string Certificate { get; set; }
		
		/// <summary>
		/// Whether this is the default certificate for the given email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_default")]
		public System.Nullable<System.Boolean> Is_default { get; set; }
		
		/// <summary>
		/// Denotes the certificate's state in its lifecycle. Possible values are `not_yet_validated`, `valid`, `invalid`, `expired`, and `revoked`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	/// <summary>
	/// JSON template for an externalId entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserExternalId
	{
		
		/// <summary>
		/// Custom type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customType")]
		public string CustomType { get; set; }
		
		/// <summary>
		/// The type of the Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The value of the id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserGender
	{
		
		/// <summary>
		/// AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressMeAs")]
		public string AddressMeAs { get; set; }
		
		/// <summary>
		/// Custom gender.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customGender")]
		public string CustomGender { get; set; }
		
		/// <summary>
		/// Gender.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// JSON template for instant messenger of an user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserIm
	{
		
		/// <summary>
		/// Custom protocol.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customProtocol")]
		public string CustomProtocol { get; set; }
		
		/// <summary>
		/// Custom type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customType")]
		public string CustomType { get; set; }
		
		/// <summary>
		/// Instant messenger id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="im")]
		public string Im { get; set; }
		
		/// <summary>
		/// If this is user's primary im. Only one entry could be marked as primary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primary")]
		public System.Nullable<System.Boolean> Primary { get; set; }
		
		/// <summary>
		/// Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in customProtocol field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public string Protocol { get; set; }
		
		/// <summary>
		/// Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// JSON template for a keyword entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserKeyword
	{
		
		/// <summary>
		/// Custom Type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customType")]
		public string CustomType { get; set; }
		
		/// <summary>
		/// Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Keyword.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// JSON template for a language entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserLanguage
	{
		
		/// <summary>
		/// Other language. User can provide their own language name if there is no corresponding ISO 639 language code. If this is set, `languageCode` can't be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customLanguage")]
		public string CustomLanguage { get; set; }
		
		/// <summary>
		/// ISO 639 string representation of a language. See [Language Codes](/admin-sdk/directory/v1/languages) for the list of supported codes. Valid language codes outside the supported set will be accepted by the API but may lead to unexpected behavior. Illegal values cause `SchemaException`. If this is set, `customLanguage` can't be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Optional. If present, controls whether the specified `languageCode` is the user's preferred language. If `customLanguage` is set, this can't be set. Allowed values are `preferred` and `not_preferred`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preference")]
		public string Preference { get; set; }
	}
	
	/// <summary>
	/// JSON template for a location entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserLocation
	{
		
		/// <summary>
		/// Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.''
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="area")]
		public string Area { get; set; }
		
		/// <summary>
		/// Building Identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildingId")]
		public string BuildingId { get; set; }
		
		/// <summary>
		/// Custom Type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customType")]
		public string CustomType { get; set; }
		
		/// <summary>
		/// Most specific textual code of individual desk location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deskCode")]
		public string DeskCode { get; set; }
		
		/// <summary>
		/// Floor name/number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floorName")]
		public string FloorName { get; set; }
		
		/// <summary>
		/// Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floorSection")]
		public string FloorSection { get; set; }
		
		/// <summary>
		/// Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a custom type and can give it any name. Such types should have 'custom' as type and also have a customType value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserMakeAdmin
	{
		
		/// <summary>
		/// Indicates the administrator status of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Boolean> Status { get; set; }
	}
	
	/// <summary>
	/// JSON template for an organization entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserOrganization
	{
		
		/// <summary>
		/// The cost center of the users department.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costCenter")]
		public string CostCenter { get; set; }
		
		/// <summary>
		/// Custom type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customType")]
		public string CustomType { get; set; }
		
		/// <summary>
		/// Department within the organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="department")]
		public string Department { get; set; }
		
		/// <summary>
		/// Description of the organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The domain to which the organization belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// The full-time equivalent millipercent within the organization (100000 = 100%).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullTimeEquivalent")]
		public System.Nullable<System.Int32> FullTimeEquivalent { get; set; }
		
		/// <summary>
		/// Location of the organization. This need not be fully qualified address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Name of the organization
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// If it user's primary organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primary")]
		public System.Nullable<System.Boolean> Primary { get; set; }
		
		/// <summary>
		/// Symbol of the organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
		
		/// <summary>
		/// Title (designation) of the user in the organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// JSON template for a phone entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserPhone
	{
		
		/// <summary>
		/// Custom Type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customType")]
		public string CustomType { get; set; }
		
		/// <summary>
		/// If this is user's primary phone or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primary")]
		public System.Nullable<System.Boolean> Primary { get; set; }
		
		/// <summary>
		/// Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserPhoto
	{
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Height of the photo in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// The ID the API uses to uniquely identify the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The type of the API resource. For Photo resources, this is `admin#directory#user#photo`.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#user#photo")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#user#photo";
		
		/// <summary>
		/// The MIME type of the photo. Allowed values are `JPEG`, `PNG`, `GIF`, `BMP`, `TIFF`, and web-safe base64 encoding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
		
		/// <summary>
		/// The user photo's upload data in [web-safe Base64](https://en.wikipedia.org/wiki/Base64#URL_applications) format in bytes. This means: * The slash (/) character is replaced with the underscore (_) character. * The plus sign (+) character is replaced with the hyphen (-) character. * The equals sign (=) character is replaced with the asterisk (*). * For padding, the period (.) character is used instead of the RFC-4648 baseURL definition which uses the equals sign (=) for padding. This is done to simplify URL-parsing. * Whatever the size of the photo being uploaded, the API downsizes it to 96x96 pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photoData")]
		public string PhotoData { get; set; }
		
		/// <summary>
		/// The user's primary email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryEmail")]
		public string PrimaryEmail { get; set; }
		
		/// <summary>
		/// Width of the photo in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	/// <summary>
	/// JSON template for a POSIX account entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserPosixAccount
	{
		
		/// <summary>
		/// A POSIX account field identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// The GECOS (user information) for this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gecos")]
		public string Gecos { get; set; }
		
		/// <summary>
		/// The default group ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gid")]
		public string Gid { get; set; }
		
		/// <summary>
		/// The path to the home directory for this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homeDirectory")]
		public string HomeDirectory { get; set; }
		
		/// <summary>
		/// The operating system type for this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatingSystemType")]
		public string OperatingSystemType { get; set; }
		
		/// <summary>
		/// If this is user's primary account within the SystemId.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primary")]
		public System.Nullable<System.Boolean> Primary { get; set; }
		
		/// <summary>
		/// The path to the login shell for this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shell")]
		public string Shell { get; set; }
		
		/// <summary>
		/// System identifier for which account Username or Uid apply to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemId")]
		public string SystemId { get; set; }
		
		/// <summary>
		/// The POSIX compliant user ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
		
		/// <summary>
		/// The username of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// JSON template for a relation entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserRelation
	{
		
		/// <summary>
		/// Custom Type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customType")]
		public string CustomType { get; set; }
		
		/// <summary>
		/// The relation of the user. Some of the possible values are mother father sister brother manager assistant partner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The name of the relation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// JSON template for a POSIX account entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserSshPublicKey
	{
		
		/// <summary>
		/// An expiration time in microseconds since epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationTimeUsec")]
		public string ExpirationTimeUsec { get; set; }
		
		/// <summary>
		/// A SHA-256 fingerprint of the SSH public key. (Read-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fingerprint")]
		public string Fingerprint { get; set; }
		
		/// <summary>
		/// An SSH public key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserUndelete
	{
		
		/// <summary>
		/// OrgUnit of User
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orgUnitPath")]
		public string OrgUnitPath { get; set; }
	}
	
	/// <summary>
	/// JSON template for a website entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserWebsite
	{
		
		/// <summary>
		/// Custom Type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customType")]
		public string CustomType { get; set; }
		
		/// <summary>
		/// If this is user's primary website or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primary")]
		public System.Nullable<System.Boolean> Primary { get; set; }
		
		/// <summary>
		/// Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Website.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Users
	{
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Kind of resource this is.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#users")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#users";
		
		/// <summary>
		/// Token used to access next page of this result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Event that triggered this response (only used in case of Push Response)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trigger_event")]
		public string Trigger_event { get; set; }
		
		/// <summary>
		/// A list of user objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="users")]
		public User[] Users1 { get; set; }
	}
	
	/// <summary>
	/// The Directory API allows you to view, generate, and invalidate backup verification codes for a user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VerificationCode
	{
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The type of the resource. This is always `admin#directory#verificationCode`.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#verificationCode")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#verificationCode";
		
		/// <summary>
		/// The obfuscated unique ID of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
		
		/// <summary>
		/// A current verification code for the user. Invalidated or used verification codes are not returned as part of the result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verificationCode")]
		public string VerificationCode1 { get; set; }
	}
	
	/// <summary>
	/// JSON response template for list verification codes operation in Directory API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VerificationCodes
	{
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// A list of verification code resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public VerificationCode[] Items { get; set; }
		
		/// <summary>
		/// The type of the resource. This is always `admin#directory#verificationCodesList`.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#directory#verificationCodesList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#directory#verificationCodesList";
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieves a paginated list of Chrome OS devices within an account.
		/// Directory_chromeosdevices_list admin/directory/v1/customer/{customerId}/devices/chromeos
		/// </summary>
		/// <param name="customerId">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).</param>
		/// <param name="includeChildOrgunits">Return devices from all child orgunits, as well as the specified org unit. If this is set to true, 'orgUnitPath' must be provided.</param>
		/// <param name="maxResults">Maximum number of results to return.
		/// Minimum: 1
		// </param>
		/// <param name="orderBy">Device property to use for sorting results.</param>
		/// <param name="orgUnitPath">The full path of the organizational unit (minus the leading `/`) or its unique ID.</param>
		/// <param name="pageToken">The `pageToken` query parameter is used to request the next page of query results. The follow-on request's `pageToken` query parameter is the `nextPageToken` from your previous response.</param>
		/// <param name="projection">Restrict information returned to a set of selected fields.</param>
		/// <param name="query">Search string in the format given at https://developers.google.com/admin-sdk/directory/v1/list-query-operators</param>
		/// <param name="sortOrder">Whether to return results in ascending or descending order. Must be used with the `orderBy` parameter.</param>
		/// <returns>Successful response</returns>
		public async Task<ChromeOsDevices> Directory_chromeosdevices_listAsync(string customerId, bool includeChildOrgunits, int maxResults, Directory_chromeosdevices_listOrderBy orderBy, string orgUnitPath, string pageToken, Directory_chromeosdevices_listProjection projection, string query, Directory_chromeosdevices_listSortOrder sortOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"/devices/chromeos&includeChildOrgunits="+includeChildOrgunits+"&maxResults="+maxResults+"&orderBy=" + orderBy+"&orgUnitPath=" + (orgUnitPath==null? "" : System.Uri.EscapeDataString(orgUnitPath))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&projection=" + projection+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sortOrder=" + sortOrder;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChromeOsDevices>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Moves or inserts multiple Chrome OS devices to an organizational unit. You can move up to 50 devices at once.
		/// Directory_chromeosdevices_moveDevicesToOu admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu
		/// </summary>
		/// <param name="customerId">Immutable. ID of the Google Workspace account</param>
		/// <param name="orgUnitPath">Full path of the target organizational unit or its ID</param>
		/// <returns>Successful response</returns>
		public async Task Directory_chromeosdevices_moveDevicesToOuAsync(string customerId, string orgUnitPath, ChromeOsMoveDevicesToOu requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"/devices/chromeos/moveDevicesToOu&orgUnitPath=" + (orgUnitPath==null? "" : System.Uri.EscapeDataString(orgUnitPath));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a Chrome OS device's properties.
		/// Directory_chromeosdevices_get admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}
		/// </summary>
		/// <param name="customerId">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).</param>
		/// <param name="deviceId">The unique ID of the device. The `deviceId`s are returned in the response from the [chromeosdevices.list](/admin-sdk/directory/v1/reference/chromeosdevices/list) method.</param>
		/// <param name="projection">Determines whether the response contains the full list of properties or only a subset.</param>
		/// <returns>Successful response</returns>
		public async Task<ChromeOsDevice> Directory_chromeosdevices_getAsync(string customerId, string deviceId, Directory_chromeosdevices_listProjection projection, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"/devices/chromeos/"+ (deviceId==null? "" : System.Uri.EscapeDataString(deviceId))+"&projection=" + projection;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChromeOsDevice>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a device's updatable properties, such as `annotatedUser`, `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).
		/// Directory_chromeosdevices_patch admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}
		/// </summary>
		/// <param name="customerId">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).</param>
		/// <param name="deviceId">The unique ID of the device. The `deviceId`s are returned in the response from the [chromeosdevices.list](/admin-sdk/v1/reference/chromeosdevices/list) method.</param>
		/// <param name="projection">Restrict information returned to a set of selected fields.</param>
		/// <returns>Successful response</returns>
		public async Task<ChromeOsDevice> Directory_chromeosdevices_patchAsync(string customerId, string deviceId, Directory_chromeosdevices_listProjection projection, ChromeOsDevice requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"/devices/chromeos/"+ (deviceId==null? "" : System.Uri.EscapeDataString(deviceId))+"&projection=" + projection;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChromeOsDevice>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a device's updatable properties, such as `annotatedUser`, `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`.
		/// Directory_chromeosdevices_update admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}
		/// </summary>
		/// <param name="customerId">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).</param>
		/// <param name="deviceId">The unique ID of the device. The `deviceId`s are returned in the response from the [chromeosdevices.list](/admin-sdk/v1/reference/chromeosdevices/list) method.</param>
		/// <param name="projection">Restrict information returned to a set of selected fields.</param>
		/// <returns>Successful response</returns>
		public async Task<ChromeOsDevice> Directory_chromeosdevices_updateAsync(string customerId, string deviceId, Directory_chromeosdevices_listProjection projection, ChromeOsDevice requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"/devices/chromeos/"+ (deviceId==null? "" : System.Uri.EscapeDataString(deviceId))+"&projection=" + projection;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChromeOsDevice>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets command data a specific command issued to the device.
		/// Admin_customer_devices_chromeos_commands_get admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}
		/// </summary>
		/// <param name="customerId">Immutable. ID of the Google Workspace account.</param>
		/// <param name="deviceId">Immutable. ID of Chrome OS Device.</param>
		/// <param name="commandId">Immutable. ID of Chrome OS Device Command.</param>
		/// <returns>Successful response</returns>
		public async Task<DirectoryChromeosdevicesCommand> Admin_customer_devices_chromeos_commands_getAsync(string customerId, string deviceId, string commandId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"/devices/chromeos/"+ (deviceId==null? "" : System.Uri.EscapeDataString(deviceId))+"/commands/"+ (commandId==null? "" : System.Uri.EscapeDataString(commandId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DirectoryChromeosdevicesCommand>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Issues a command for the device to execute.
		/// Admin_customer_devices_chromeos_issueCommand admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand
		/// </summary>
		/// <param name="customerId">Immutable. ID of the Google Workspace account.</param>
		/// <param name="deviceId">Immutable. ID of Chrome OS Device.</param>
		/// <returns>Successful response</returns>
		public async Task<DirectoryChromeosdevicesIssueCommandResponse> Admin_customer_devices_chromeos_issueCommandAsync(string customerId, string deviceId, DirectoryChromeosdevicesIssueCommandRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"/devices/chromeos/"+ (deviceId==null? "" : System.Uri.EscapeDataString(deviceId))+":issueCommand";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DirectoryChromeosdevicesIssueCommandResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Use [BatchChangeChromeOsDeviceStatus](/admin-sdk/directory/reference/rest/v1/customer.devices.chromeos/batchChangeStatus) instead. Takes an action that affects a Chrome OS Device. This includes deprovisioning, disabling, and re-enabling devices. *Warning:* * Deprovisioning a device will stop device policy syncing and remove device-level printers. After a device is deprovisioned, it must be wiped before it can be re-enrolled. * Lost or stolen devices should use the disable action. * Re-enabling a disabled device will consume a device license. If you do not have sufficient licenses available when completing the re-enable action, you will receive an error. For more information about deprovisioning and disabling devices, visit the [help center](https://support.google.com/chrome/a/answer/3523633).
		/// Directory_chromeosdevices_action admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action
		/// </summary>
		/// <param name="customerId">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).</param>
		/// <param name="resourceId">The unique ID of the device. The `resourceId`s are returned in the response from the [chromeosdevices.list](/admin-sdk/directory/v1/reference/chromeosdevices/list) method.</param>
		/// <returns>Successful response</returns>
		public async Task Directory_chromeosdevices_actionAsync(string customerId, string resourceId, ChromeOsDeviceAction requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"/devices/chromeos/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"/action";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Changes the status of a batch of ChromeOS devices. For more information about changing a ChromeOS device state [Repair, repurpose, or retire ChromeOS devices](https://support.google.com/chrome/a/answer/3523633).
		/// Admin_customer_devices_chromeos_batchChangeStatus admin/directory/v1/customer/{customerId}/devices/chromeos:batchChangeStatus
		/// </summary>
		/// <param name="customerId">Required. Immutable ID of the Google Workspace account.</param>
		/// <returns>Successful response</returns>
		public async Task<BatchChangeChromeOsDeviceStatusResponse> Admin_customer_devices_chromeos_batchChangeStatusAsync(string customerId, BatchChangeChromeOsDeviceStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"/devices/chromeos:batchChangeStatus";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchChangeChromeOsDeviceStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a paginated list of all user-owned mobile devices for an account. To retrieve a list that includes company-owned devices, use the Cloud Identity [Devices API](https://cloud.google.com/identity/docs/concepts/overview-devices) instead. This method times out after 60 minutes. For more information, see [Troubleshoot error codes](https://developers.google.com/admin-sdk/directory/v1/guides/troubleshoot-error-codes).
		/// Directory_mobiledevices_list admin/directory/v1/customer/{customerId}/devices/mobile
		/// </summary>
		/// <param name="customerId">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).</param>
		/// <param name="maxResults">Maximum number of results to return. Max allowed value is 100.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="orderBy">Device property to use for sorting results.</param>
		/// <param name="pageToken">Token to specify next page in the list</param>
		/// <param name="projection">Restrict information returned to a set of selected fields.</param>
		/// <param name="query">Search string in the format given at https://developers.google.com/admin-sdk/directory/v1/search-operators</param>
		/// <param name="sortOrder">Whether to return results in ascending or descending order. Must be used with the `orderBy` parameter.</param>
		/// <returns>Successful response</returns>
		public async Task<MobileDevices> Directory_mobiledevices_listAsync(string customerId, int maxResults, Directory_mobiledevices_listOrderBy orderBy, string pageToken, Directory_chromeosdevices_listProjection projection, string query, Directory_chromeosdevices_listSortOrder sortOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"/devices/mobile&maxResults="+maxResults+"&orderBy=" + orderBy+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&projection=" + projection+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sortOrder=" + sortOrder;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MobileDevices>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a mobile device.
		/// Directory_mobiledevices_delete admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}
		/// </summary>
		/// <param name="customerId">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).</param>
		/// <param name="resourceId">The unique ID the API service uses to identify the mobile device.</param>
		/// <returns>Successful response</returns>
		public async Task Directory_mobiledevices_deleteAsync(string customerId, string resourceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"/devices/mobile/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a mobile device's properties.
		/// Directory_mobiledevices_get admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}
		/// </summary>
		/// <param name="customerId">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).</param>
		/// <param name="resourceId">The unique ID the API service uses to identify the mobile device.</param>
		/// <param name="projection">Restrict information returned to a set of selected fields.</param>
		/// <returns>Successful response</returns>
		public async Task<MobileDevice> Directory_mobiledevices_getAsync(string customerId, string resourceId, Directory_chromeosdevices_listProjection projection, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"/devices/mobile/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"&projection=" + projection;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MobileDevice>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Takes an action that affects a mobile device. For example, remotely wiping a device.
		/// Directory_mobiledevices_action admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action
		/// </summary>
		/// <param name="customerId">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).</param>
		/// <param name="resourceId">The unique ID the API service uses to identify the mobile device.</param>
		/// <returns>Successful response</returns>
		public async Task Directory_mobiledevices_actionAsync(string customerId, string resourceId, MobileDeviceAction requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"/devices/mobile/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"/action";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of all organizational units for an account.
		/// Directory_orgunits_list admin/directory/v1/customer/{customerId}/orgunits
		/// </summary>
		/// <param name="customerId">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).</param>
		/// <param name="orgUnitPath">The full path to the organizational unit or its unique ID. Returns the children of the specified organizational unit.</param>
		/// <param name="type">Whether to return all sub-organizations or just immediate children.</param>
		/// <returns>Successful response</returns>
		public async Task<OrgUnits> Directory_orgunits_listAsync(string customerId, string orgUnitPath, Directory_orgunits_listType type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"/orgunits&orgUnitPath=" + (orgUnitPath==null? "" : System.Uri.EscapeDataString(orgUnitPath))+"&type=" + type;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OrgUnits>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds an organizational unit.
		/// Directory_orgunits_insert admin/directory/v1/customer/{customerId}/orgunits
		/// </summary>
		/// <param name="customerId">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).</param>
		/// <returns>Successful response</returns>
		public async Task<OrgUnit> Directory_orgunits_insertAsync(string customerId, OrgUnit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"/orgunits";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OrgUnit>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes an organizational unit.
		/// Directory_orgunits_delete admin/directory/v1/customer/{customerId}/orgunits/{orgUnitPath}
		/// </summary>
		/// <param name="customerId">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).</param>
		/// <param name="orgUnitPath">The full path of the organizational unit (minus the leading `/`) or its unique ID.</param>
		/// <returns>Successful response</returns>
		public async Task Directory_orgunits_deleteAsync(string customerId, string orgUnitPath, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"/orgunits/"+ (orgUnitPath==null? "" : System.Uri.EscapeDataString(orgUnitPath));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves an organizational unit.
		/// Directory_orgunits_get admin/directory/v1/customer/{customerId}/orgunits/{orgUnitPath}
		/// </summary>
		/// <param name="customerId">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).</param>
		/// <param name="orgUnitPath">The full path of the organizational unit (minus the leading `/`) or its unique ID.</param>
		/// <returns>Successful response</returns>
		public async Task<OrgUnit> Directory_orgunits_getAsync(string customerId, string orgUnitPath, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"/orgunits/"+ (orgUnitPath==null? "" : System.Uri.EscapeDataString(orgUnitPath));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OrgUnit>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an organizational unit. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch)
		/// Directory_orgunits_patch admin/directory/v1/customer/{customerId}/orgunits/{orgUnitPath}
		/// </summary>
		/// <param name="customerId">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).</param>
		/// <param name="orgUnitPath">The full path of the organizational unit (minus the leading `/`) or its unique ID.</param>
		/// <returns>Successful response</returns>
		public async Task<OrgUnit> Directory_orgunits_patchAsync(string customerId, string orgUnitPath, OrgUnit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"/orgunits/"+ (orgUnitPath==null? "" : System.Uri.EscapeDataString(orgUnitPath));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OrgUnit>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an organizational unit.
		/// Directory_orgunits_update admin/directory/v1/customer/{customerId}/orgunits/{orgUnitPath}
		/// </summary>
		/// <param name="customerId">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).</param>
		/// <param name="orgUnitPath">The full path of the organizational unit (minus the leading `/`) or its unique ID.</param>
		/// <returns>Successful response</returns>
		public async Task<OrgUnit> Directory_orgunits_updateAsync(string customerId, string orgUnitPath, OrgUnit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"/orgunits/"+ (orgUnitPath==null? "" : System.Uri.EscapeDataString(orgUnitPath));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OrgUnit>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves all schemas for a customer.
		/// Directory_schemas_list admin/directory/v1/customer/{customerId}/schemas
		/// </summary>
		/// <param name="customerId">The unique ID for the customer's Google Workspace account. In case of a multi-domain account, to fetch all groups for a customer, use this field instead of `domain`. You can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users](/admin-sdk/directory/v1/reference/users) resource. You must provide either the `customer` or the `domain` parameter.</param>
		/// <returns>Successful response</returns>
		public async Task<Schemas> Directory_schemas_listAsync(string customerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"/schemas";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Schemas>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a schema.
		/// Directory_schemas_insert admin/directory/v1/customer/{customerId}/schemas
		/// </summary>
		/// <param name="customerId">Immutable ID of the Google Workspace account.</param>
		/// <returns>Successful response</returns>
		public async Task<Schema> Directory_schemas_insertAsync(string customerId, Schema requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"/schemas";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Schema>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a schema.
		/// Directory_schemas_delete admin/directory/v1/customer/{customerId}/schemas/{schemaKey}
		/// </summary>
		/// <param name="customerId">Immutable ID of the Google Workspace account.</param>
		/// <param name="schemaKey">Name or immutable ID of the schema.</param>
		/// <returns>Successful response</returns>
		public async Task Directory_schemas_deleteAsync(string customerId, string schemaKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"/schemas/"+ (schemaKey==null? "" : System.Uri.EscapeDataString(schemaKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a schema.
		/// Directory_schemas_get admin/directory/v1/customer/{customerId}/schemas/{schemaKey}
		/// </summary>
		/// <param name="customerId">The unique ID for the customer's Google Workspace account. In case of a multi-domain account, to fetch all groups for a customer, use this field instead of `domain`. You can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users](/admin-sdk/directory/v1/reference/users) resource. You must provide either the `customer` or the `domain` parameter.</param>
		/// <param name="schemaKey">Name or immutable ID of the schema.</param>
		/// <returns>Successful response</returns>
		public async Task<Schema> Directory_schemas_getAsync(string customerId, string schemaKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"/schemas/"+ (schemaKey==null? "" : System.Uri.EscapeDataString(schemaKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Schema>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patches a schema.
		/// Directory_schemas_patch admin/directory/v1/customer/{customerId}/schemas/{schemaKey}
		/// </summary>
		/// <param name="customerId">Immutable ID of the Google Workspace account.</param>
		/// <param name="schemaKey">Name or immutable ID of the schema.</param>
		/// <returns>Successful response</returns>
		public async Task<Schema> Directory_schemas_patchAsync(string customerId, string schemaKey, Schema requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"/schemas/"+ (schemaKey==null? "" : System.Uri.EscapeDataString(schemaKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Schema>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a schema.
		/// Directory_schemas_update admin/directory/v1/customer/{customerId}/schemas/{schemaKey}
		/// </summary>
		/// <param name="customerId">Immutable ID of the Google Workspace account.</param>
		/// <param name="schemaKey">Name or immutable ID of the schema.</param>
		/// <returns>Successful response</returns>
		public async Task<Schema> Directory_schemas_updateAsync(string customerId, string schemaKey, Schema requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"/schemas/"+ (schemaKey==null? "" : System.Uri.EscapeDataString(schemaKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Schema>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the domain aliases of the customer.
		/// Directory_domainAliases_list admin/directory/v1/customer/{customer}/domainaliases
		/// </summary>
		/// <param name="customer">The unique ID for the customer's Google Workspace account. In case of a multi-domain account, to fetch all groups for a customer, use this field instead of `domain`. You can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users](/admin-sdk/directory/v1/reference/users) resource. You must provide either the `customer` or the `domain` parameter.</param>
		/// <param name="parentDomainName">Name of the parent domain for which domain aliases are to be fetched.</param>
		/// <returns>Successful response</returns>
		public async Task<DomainAliases> Directory_domainAliases_listAsync(string customer, string parentDomainName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/domainaliases&parentDomainName=" + (parentDomainName==null? "" : System.Uri.EscapeDataString(parentDomainName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DomainAliases>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a domain alias of the customer.
		/// Directory_domainAliases_insert admin/directory/v1/customer/{customer}/domainaliases
		/// </summary>
		/// <param name="customer">Immutable ID of the Google Workspace account.</param>
		/// <returns>Successful response</returns>
		public async Task<DomainAlias> Directory_domainAliases_insertAsync(string customer, DomainAlias requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/domainaliases";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DomainAlias>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a domain Alias of the customer.
		/// Directory_domainAliases_delete admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}
		/// </summary>
		/// <param name="customer">Immutable ID of the Google Workspace account.</param>
		/// <param name="domainAliasName">Name of domain alias to be retrieved.</param>
		/// <returns>Successful response</returns>
		public async Task Directory_domainAliases_deleteAsync(string customer, string domainAliasName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/domainaliases/"+ (domainAliasName==null? "" : System.Uri.EscapeDataString(domainAliasName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a domain alias of the customer.
		/// Directory_domainAliases_get admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}
		/// </summary>
		/// <param name="customer">The unique ID for the customer's Google Workspace account. In case of a multi-domain account, to fetch all groups for a customer, use this field instead of `domain`. You can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users](/admin-sdk/directory/v1/reference/users) resource. You must provide either the `customer` or the `domain` parameter.</param>
		/// <param name="domainAliasName">Name of domain alias to be retrieved.</param>
		/// <returns>Successful response</returns>
		public async Task<DomainAlias> Directory_domainAliases_getAsync(string customer, string domainAliasName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/domainaliases/"+ (domainAliasName==null? "" : System.Uri.EscapeDataString(domainAliasName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DomainAlias>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the domains of the customer.
		/// Directory_domains_list admin/directory/v1/customer/{customer}/domains
		/// </summary>
		/// <param name="customer">The unique ID for the customer's Google Workspace account. In case of a multi-domain account, to fetch all groups for a customer, use this field instead of `domain`. You can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users](/admin-sdk/directory/v1/reference/users) resource. You must provide either the `customer` or the `domain` parameter.</param>
		/// <returns>Successful response</returns>
		public async Task<Domains2> Directory_domains_listAsync(string customer, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/domains";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Domains2>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a domain of the customer.
		/// Directory_domains_insert admin/directory/v1/customer/{customer}/domains
		/// </summary>
		/// <param name="customer">Immutable ID of the Google Workspace account.</param>
		/// <returns>Successful response</returns>
		public async Task<Domains> Directory_domains_insertAsync(string customer, Domains requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/domains";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Domains>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a domain of the customer.
		/// Directory_domains_delete admin/directory/v1/customer/{customer}/domains/{domainName}
		/// </summary>
		/// <param name="customer">Immutable ID of the Google Workspace account.</param>
		/// <param name="domainName">Name of domain to be deleted</param>
		/// <returns>Successful response</returns>
		public async Task Directory_domains_deleteAsync(string customer, string domainName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/domains/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a domain of the customer.
		/// Directory_domains_get admin/directory/v1/customer/{customer}/domains/{domainName}
		/// </summary>
		/// <param name="customer">The unique ID for the customer's Google Workspace account. In case of a multi-domain account, to fetch all groups for a customer, use this field instead of `domain`. You can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users](/admin-sdk/directory/v1/reference/users) resource. You must provide either the `customer` or the `domain` parameter.</param>
		/// <param name="domainName">Name of domain to be retrieved</param>
		/// <returns>Successful response</returns>
		public async Task<Domains> Directory_domains_getAsync(string customer, string domainName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/domains/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Domains>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of buildings for an account.
		/// Directory_resources_buildings_list admin/directory/v1/customer/{customer}/resources/buildings
		/// </summary>
		/// <param name="customer">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.</param>
		/// <param name="maxResults">Maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="pageToken">Token to specify the next page in the list.</param>
		/// <returns>Successful response</returns>
		public async Task<Buildings> Directory_resources_buildings_listAsync(string customer, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/resources/buildings&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Buildings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a building.
		/// Directory_resources_buildings_insert admin/directory/v1/customer/{customer}/resources/buildings
		/// </summary>
		/// <param name="customer">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.</param>
		/// <param name="coordinatesSource">Source from which Building.coordinates are derived.</param>
		/// <returns>Successful response</returns>
		public async Task<Building> Directory_resources_buildings_insertAsync(string customer, Directory_resources_buildings_insertCoordinatesSource coordinatesSource, Building requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/resources/buildings&coordinatesSource=" + coordinatesSource;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Building>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a building.
		/// Directory_resources_buildings_delete admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}
		/// </summary>
		/// <param name="customer">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.</param>
		/// <param name="buildingId">The id of the building to delete.</param>
		/// <returns>Successful response</returns>
		public async Task Directory_resources_buildings_deleteAsync(string customer, string buildingId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/resources/buildings/"+ (buildingId==null? "" : System.Uri.EscapeDataString(buildingId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a building.
		/// Directory_resources_buildings_get admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}
		/// </summary>
		/// <param name="customer">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.</param>
		/// <param name="buildingId">The unique ID of the building to retrieve.</param>
		/// <returns>Successful response</returns>
		public async Task<Building> Directory_resources_buildings_getAsync(string customer, string buildingId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/resources/buildings/"+ (buildingId==null? "" : System.Uri.EscapeDataString(buildingId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Building>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patches a building.
		/// Directory_resources_buildings_patch admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}
		/// </summary>
		/// <param name="customer">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.</param>
		/// <param name="buildingId">The id of the building to update.</param>
		/// <param name="coordinatesSource">Source from which Building.coordinates are derived.</param>
		/// <returns>Successful response</returns>
		public async Task<Building> Directory_resources_buildings_patchAsync(string customer, string buildingId, Directory_resources_buildings_insertCoordinatesSource coordinatesSource, Building requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/resources/buildings/"+ (buildingId==null? "" : System.Uri.EscapeDataString(buildingId))+"&coordinatesSource=" + coordinatesSource;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Building>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a building.
		/// Directory_resources_buildings_update admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}
		/// </summary>
		/// <param name="customer">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.</param>
		/// <param name="buildingId">The id of the building to update.</param>
		/// <param name="coordinatesSource">Source from which Building.coordinates are derived.</param>
		/// <returns>Successful response</returns>
		public async Task<Building> Directory_resources_buildings_updateAsync(string customer, string buildingId, Directory_resources_buildings_insertCoordinatesSource coordinatesSource, Building requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/resources/buildings/"+ (buildingId==null? "" : System.Uri.EscapeDataString(buildingId))+"&coordinatesSource=" + coordinatesSource;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Building>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of calendar resources for an account.
		/// Directory_resources_calendars_list admin/directory/v1/customer/{customer}/resources/calendars
		/// </summary>
		/// <param name="customer">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.</param>
		/// <param name="maxResults">Maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="orderBy">Field(s) to sort results by in either ascending or descending order. Supported fields include `resourceId`, `resourceName`, `capacity`, `buildingId`, and `floorName`. If no order is specified, defaults to ascending. Should be of the form "field [asc|desc], field [asc|desc], ...". For example `buildingId, capacity desc` would return results sorted first by `buildingId` in ascending order then by `capacity` in descending order.</param>
		/// <param name="pageToken">Token to specify the next page in the list.</param>
		/// <param name="query">String query used to filter results. Should be of the form "field operator value" where field can be any of supported fields and operators can be any of supported operations. Operators include '=' for exact match, '!=' for mismatch and ':' for prefix match or HAS match where applicable. For prefix match, the value should always be followed by a *. Logical operators NOT and AND are supported (in this order of precedence). Supported fields include `generatedResourceName`, `name`, `buildingId`, `floor_name`, `capacity`, `featureInstances.feature.name`, `resourceEmail`, `resourceCategory`. For example `buildingId=US-NYC-9TH AND featureInstances.feature.name:Phone`.</param>
		/// <returns>Successful response</returns>
		public async Task<CalendarResources> Directory_resources_calendars_listAsync(string customer, int maxResults, string orderBy, string pageToken, string query, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/resources/calendars&maxResults="+maxResults+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CalendarResources>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a calendar resource.
		/// Directory_resources_calendars_insert admin/directory/v1/customer/{customer}/resources/calendars
		/// </summary>
		/// <param name="customer">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.</param>
		/// <returns>Successful response</returns>
		public async Task<CalendarResource> Directory_resources_calendars_insertAsync(string customer, CalendarResource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/resources/calendars";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CalendarResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a calendar resource.
		/// Directory_resources_calendars_delete admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}
		/// </summary>
		/// <param name="customer">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.</param>
		/// <param name="calendarResourceId">The unique ID of the calendar resource to delete.</param>
		/// <returns>Successful response</returns>
		public async Task Directory_resources_calendars_deleteAsync(string customer, string calendarResourceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/resources/calendars/"+ (calendarResourceId==null? "" : System.Uri.EscapeDataString(calendarResourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a calendar resource.
		/// Directory_resources_calendars_get admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}
		/// </summary>
		/// <param name="customer">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.</param>
		/// <param name="calendarResourceId">The unique ID of the calendar resource to retrieve.</param>
		/// <returns>Successful response</returns>
		public async Task<CalendarResource> Directory_resources_calendars_getAsync(string customer, string calendarResourceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/resources/calendars/"+ (calendarResourceId==null? "" : System.Uri.EscapeDataString(calendarResourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CalendarResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patches a calendar resource.
		/// Directory_resources_calendars_patch admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}
		/// </summary>
		/// <param name="customer">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.</param>
		/// <param name="calendarResourceId">The unique ID of the calendar resource to update.</param>
		/// <returns>Successful response</returns>
		public async Task<CalendarResource> Directory_resources_calendars_patchAsync(string customer, string calendarResourceId, CalendarResource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/resources/calendars/"+ (calendarResourceId==null? "" : System.Uri.EscapeDataString(calendarResourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CalendarResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved.
		/// Directory_resources_calendars_update admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}
		/// </summary>
		/// <param name="customer">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.</param>
		/// <param name="calendarResourceId">The unique ID of the calendar resource to update.</param>
		/// <returns>Successful response</returns>
		public async Task<CalendarResource> Directory_resources_calendars_updateAsync(string customer, string calendarResourceId, CalendarResource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/resources/calendars/"+ (calendarResourceId==null? "" : System.Uri.EscapeDataString(calendarResourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CalendarResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of features for an account.
		/// Directory_resources_features_list admin/directory/v1/customer/{customer}/resources/features
		/// </summary>
		/// <param name="customer">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.</param>
		/// <param name="maxResults">Maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="pageToken">Token to specify the next page in the list.</param>
		/// <returns>Successful response</returns>
		public async Task<Features> Directory_resources_features_listAsync(string customer, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/resources/features&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Features>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a feature.
		/// Directory_resources_features_insert admin/directory/v1/customer/{customer}/resources/features
		/// </summary>
		/// <param name="customer">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Feature> Directory_resources_features_insertAsync(string customer, Feature requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/resources/features";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Feature>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a feature.
		/// Directory_resources_features_delete admin/directory/v1/customer/{customer}/resources/features/{featureKey}
		/// </summary>
		/// <param name="customer">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.</param>
		/// <param name="featureKey">The unique ID of the feature to delete.</param>
		/// <returns>Successful response</returns>
		public async Task Directory_resources_features_deleteAsync(string customer, string featureKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/resources/features/"+ (featureKey==null? "" : System.Uri.EscapeDataString(featureKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a feature.
		/// Directory_resources_features_get admin/directory/v1/customer/{customer}/resources/features/{featureKey}
		/// </summary>
		/// <param name="customer">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.</param>
		/// <param name="featureKey">The unique ID of the feature to retrieve.</param>
		/// <returns>Successful response</returns>
		public async Task<Feature> Directory_resources_features_getAsync(string customer, string featureKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/resources/features/"+ (featureKey==null? "" : System.Uri.EscapeDataString(featureKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Feature>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patches a feature.
		/// Directory_resources_features_patch admin/directory/v1/customer/{customer}/resources/features/{featureKey}
		/// </summary>
		/// <param name="customer">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.</param>
		/// <param name="featureKey">The unique ID of the feature to update.</param>
		/// <returns>Successful response</returns>
		public async Task<Feature> Directory_resources_features_patchAsync(string customer, string featureKey, Feature requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/resources/features/"+ (featureKey==null? "" : System.Uri.EscapeDataString(featureKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Feature>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a feature.
		/// Directory_resources_features_update admin/directory/v1/customer/{customer}/resources/features/{featureKey}
		/// </summary>
		/// <param name="customer">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.</param>
		/// <param name="featureKey">The unique ID of the feature to update.</param>
		/// <returns>Successful response</returns>
		public async Task<Feature> Directory_resources_features_updateAsync(string customer, string featureKey, Feature requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/resources/features/"+ (featureKey==null? "" : System.Uri.EscapeDataString(featureKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Feature>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Renames a feature.
		/// Directory_resources_features_rename admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename
		/// </summary>
		/// <param name="customer">The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.</param>
		/// <param name="oldName">The unique ID of the feature to rename.</param>
		/// <returns>Successful response</returns>
		public async Task Directory_resources_features_renameAsync(string customer, string oldName, FeatureRename requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/resources/features/"+ (oldName==null? "" : System.Uri.EscapeDataString(oldName))+"/rename";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a paginated list of all roleAssignments.
		/// Directory_roleAssignments_list admin/directory/v1/customer/{customer}/roleassignments
		/// </summary>
		/// <param name="customer">The unique ID for the customer's Google Workspace account. In case of a multi-domain account, to fetch all groups for a customer, use this field instead of `domain`. You can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users](/admin-sdk/directory/v1/reference/users) resource. You must provide either the `customer` or the `domain` parameter.</param>
		/// <param name="includeIndirectRoleAssignments">When set to `true`, fetches indirect role assignments (i.e. role assignment via a group) as well as direct ones. Defaults to `false`. You must specify `user_key` or the indirect role assignments will not be included.</param>
		/// <param name="maxResults">Maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 200
		// </param>
		/// <param name="pageToken">Token to specify the next page in the list.</param>
		/// <param name="roleId">Immutable ID of a role. If included in the request, returns only role assignments containing this role ID.</param>
		/// <param name="userKey">The primary email address, alias email address, or unique user or group ID. If included in the request, returns role assignments only for this user or group.</param>
		/// <returns>Successful response</returns>
		public async Task<RoleAssignments> Directory_roleAssignments_listAsync(string customer, bool includeIndirectRoleAssignments, int maxResults, string pageToken, string roleId, string userKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/roleassignments&includeIndirectRoleAssignments="+includeIndirectRoleAssignments+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&roleId=" + (roleId==null? "" : System.Uri.EscapeDataString(roleId))+"&userKey=" + (userKey==null? "" : System.Uri.EscapeDataString(userKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RoleAssignments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a role assignment.
		/// Directory_roleAssignments_insert admin/directory/v1/customer/{customer}/roleassignments
		/// </summary>
		/// <param name="customer">Immutable ID of the Google Workspace account.</param>
		/// <returns>Successful response</returns>
		public async Task<RoleAssignment> Directory_roleAssignments_insertAsync(string customer, RoleAssignment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/roleassignments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RoleAssignment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a role assignment.
		/// Directory_roleAssignments_delete admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}
		/// </summary>
		/// <param name="customer">Immutable ID of the Google Workspace account.</param>
		/// <param name="roleAssignmentId">Immutable ID of the role assignment.</param>
		/// <returns>Successful response</returns>
		public async Task Directory_roleAssignments_deleteAsync(string customer, string roleAssignmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/roleassignments/"+ (roleAssignmentId==null? "" : System.Uri.EscapeDataString(roleAssignmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a role assignment.
		/// Directory_roleAssignments_get admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}
		/// </summary>
		/// <param name="customer">The unique ID for the customer's Google Workspace account. In case of a multi-domain account, to fetch all groups for a customer, use this field instead of `domain`. You can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users](/admin-sdk/directory/v1/reference/users) resource. You must provide either the `customer` or the `domain` parameter.</param>
		/// <param name="roleAssignmentId">Immutable ID of the role assignment.</param>
		/// <returns>Successful response</returns>
		public async Task<RoleAssignment> Directory_roleAssignments_getAsync(string customer, string roleAssignmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/roleassignments/"+ (roleAssignmentId==null? "" : System.Uri.EscapeDataString(roleAssignmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RoleAssignment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a paginated list of all the roles in a domain.
		/// Directory_roles_list admin/directory/v1/customer/{customer}/roles
		/// </summary>
		/// <param name="customer">The unique ID for the customer's Google Workspace account. In case of a multi-domain account, to fetch all groups for a customer, use this field instead of `domain`. You can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users](/admin-sdk/directory/v1/reference/users) resource. You must provide either the `customer` or the `domain` parameter.</param>
		/// <param name="maxResults">Maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="pageToken">Token to specify the next page in the list.</param>
		/// <returns>Successful response</returns>
		public async Task<Roles> Directory_roles_listAsync(string customer, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/roles&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Roles>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a role.
		/// Directory_roles_insert admin/directory/v1/customer/{customer}/roles
		/// </summary>
		/// <param name="customer">Immutable ID of the Google Workspace account.</param>
		/// <returns>Successful response</returns>
		public async Task<Role> Directory_roles_insertAsync(string customer, Role requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/roles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Role>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a paginated list of all privileges for a customer.
		/// Directory_privileges_list admin/directory/v1/customer/{customer}/roles/ALL/privileges
		/// </summary>
		/// <param name="customer">The unique ID for the customer's Google Workspace account. In case of a multi-domain account, to fetch all groups for a customer, use this field instead of `domain`. You can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users](/admin-sdk/directory/v1/reference/users) resource. You must provide either the `customer` or the `domain` parameter.</param>
		/// <returns>Successful response</returns>
		public async Task<Privileges> Directory_privileges_listAsync(string customer, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/roles/ALL/privileges";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Privileges>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a role.
		/// Directory_roles_delete admin/directory/v1/customer/{customer}/roles/{roleId}
		/// </summary>
		/// <param name="customer">Immutable ID of the Google Workspace account.</param>
		/// <param name="roleId">Immutable ID of the role.</param>
		/// <returns>Successful response</returns>
		public async Task Directory_roles_deleteAsync(string customer, string roleId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/roles/"+ (roleId==null? "" : System.Uri.EscapeDataString(roleId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a role.
		/// Directory_roles_get admin/directory/v1/customer/{customer}/roles/{roleId}
		/// </summary>
		/// <param name="customer">The unique ID for the customer's Google Workspace account. In case of a multi-domain account, to fetch all groups for a customer, use this field instead of `domain`. You can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users](/admin-sdk/directory/v1/reference/users) resource. You must provide either the `customer` or the `domain` parameter.</param>
		/// <param name="roleId">Immutable ID of the role.</param>
		/// <returns>Successful response</returns>
		public async Task<Role> Directory_roles_getAsync(string customer, string roleId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/roles/"+ (roleId==null? "" : System.Uri.EscapeDataString(roleId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Role>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patches a role.
		/// Directory_roles_patch admin/directory/v1/customer/{customer}/roles/{roleId}
		/// </summary>
		/// <param name="customer">Immutable ID of the Google Workspace account.</param>
		/// <param name="roleId">Immutable ID of the role.</param>
		/// <returns>Successful response</returns>
		public async Task<Role> Directory_roles_patchAsync(string customer, string roleId, Role requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/roles/"+ (roleId==null? "" : System.Uri.EscapeDataString(roleId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Role>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a role.
		/// Directory_roles_update admin/directory/v1/customer/{customer}/roles/{roleId}
		/// </summary>
		/// <param name="customer">Immutable ID of the Google Workspace account.</param>
		/// <param name="roleId">Immutable ID of the role.</param>
		/// <returns>Successful response</returns>
		public async Task<Role> Directory_roles_updateAsync(string customer, string roleId, Role requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customer/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/roles/"+ (roleId==null? "" : System.Uri.EscapeDataString(roleId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Role>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a customer.
		/// Directory_customers_get admin/directory/v1/customers/{customerKey}
		/// </summary>
		/// <param name="customerKey">Id of the customer to be retrieved</param>
		/// <returns>Successful response</returns>
		public async Task<Customer> Directory_customers_getAsync(string customerKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customers/"+ (customerKey==null? "" : System.Uri.EscapeDataString(customerKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Customer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patches a customer.
		/// Directory_customers_patch admin/directory/v1/customers/{customerKey}
		/// </summary>
		/// <param name="customerKey">Id of the customer to be updated</param>
		/// <returns>Successful response</returns>
		public async Task<Customer> Directory_customers_patchAsync(string customerKey, Customer requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customers/"+ (customerKey==null? "" : System.Uri.EscapeDataString(customerKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Customer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a customer.
		/// Directory_customers_update admin/directory/v1/customers/{customerKey}
		/// </summary>
		/// <param name="customerKey">Id of the customer to be updated</param>
		/// <returns>Successful response</returns>
		public async Task<Customer> Directory_customers_updateAsync(string customerKey, Customer requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/customers/"+ (customerKey==null? "" : System.Uri.EscapeDataString(customerKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Customer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves all groups of a domain or of a user given a userKey (paginated).
		/// Directory_groups_list admin/directory/v1/groups
		/// </summary>
		/// <param name="customer">The unique ID for the customer's Google Workspace account. In case of a multi-domain account, to fetch all groups for a customer, use this field instead of `domain`. You can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users](/admin-sdk/directory/v1/reference/users) resource. You must provide either the `customer` or the `domain` parameter.</param>
		/// <param name="domain">The domain name. Use this field to get groups from only one domain. To return all domains for a customer account, use the `customer` query parameter instead.</param>
		/// <param name="maxResults">Maximum number of results to return. Max allowed value is 200.
		/// Minimum: 1
		// </param>
		/// <param name="orderBy">Column to use for sorting results</param>
		/// <param name="pageToken">Token to specify next page in the list</param>
		/// <param name="query">Query string search. Should be of the form "". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-groups</param>
		/// <param name="sortOrder">Whether to return results in ascending or descending order. Only of use when orderBy is also used</param>
		/// <param name="userKey">Email or immutable ID of the user if only those groups are to be listed, the given user is a member of. If it's an ID, it should match with the ID of the user object.</param>
		/// <returns>Successful response</returns>
		public async Task<Groups> Directory_groups_listAsync(string customer, string domain, int maxResults, Directory_groups_listOrderBy orderBy, string pageToken, string query, Directory_chromeosdevices_listSortOrder sortOrder, string userKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/groups?customer=" + (customer==null? "" : System.Uri.EscapeDataString(customer))+"&domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&maxResults="+maxResults+"&orderBy=" + orderBy+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sortOrder=" + sortOrder+"&userKey=" + (userKey==null? "" : System.Uri.EscapeDataString(userKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Groups>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a group.
		/// Directory_groups_insert admin/directory/v1/groups
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Group> Directory_groups_insertAsync(Group requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Group>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a group.
		/// Directory_groups_delete admin/directory/v1/groups/{groupKey}
		/// </summary>
		/// <param name="groupKey">Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.</param>
		/// <returns>Successful response</returns>
		public async Task Directory_groups_deleteAsync(string groupKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/groups/"+ (groupKey==null? "" : System.Uri.EscapeDataString(groupKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a group's properties.
		/// Directory_groups_get admin/directory/v1/groups/{groupKey}
		/// </summary>
		/// <param name="groupKey">Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Group> Directory_groups_getAsync(string groupKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/groups/"+ (groupKey==null? "" : System.Uri.EscapeDataString(groupKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Group>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a group's properties. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).
		/// Directory_groups_patch admin/directory/v1/groups/{groupKey}
		/// </summary>
		/// <param name="groupKey">Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Group> Directory_groups_patchAsync(string groupKey, Group requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/groups/"+ (groupKey==null? "" : System.Uri.EscapeDataString(groupKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Group>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a group's properties.
		/// Directory_groups_update admin/directory/v1/groups/{groupKey}
		/// </summary>
		/// <param name="groupKey">Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Group> Directory_groups_updateAsync(string groupKey, Group requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/groups/"+ (groupKey==null? "" : System.Uri.EscapeDataString(groupKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Group>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all aliases for a group.
		/// Directory_groups_aliases_list admin/directory/v1/groups/{groupKey}/aliases
		/// </summary>
		/// <param name="groupKey">Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Aliases> Directory_groups_aliases_listAsync(string groupKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/groups/"+ (groupKey==null? "" : System.Uri.EscapeDataString(groupKey))+"/aliases";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Aliases>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds an alias for the group.
		/// Directory_groups_aliases_insert admin/directory/v1/groups/{groupKey}/aliases
		/// </summary>
		/// <param name="groupKey">Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Alias> Directory_groups_aliases_insertAsync(string groupKey, Alias requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/groups/"+ (groupKey==null? "" : System.Uri.EscapeDataString(groupKey))+"/aliases";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Alias>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes an alias.
		/// Directory_groups_aliases_delete admin/directory/v1/groups/{groupKey}/aliases/{alias}
		/// </summary>
		/// <param name="groupKey">Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.</param>
		/// <param name="alias">The alias to be removed</param>
		/// <returns>Successful response</returns>
		public async Task Directory_groups_aliases_deleteAsync(string groupKey, string alias, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/groups/"+ (groupKey==null? "" : System.Uri.EscapeDataString(groupKey))+"/aliases/"+ (alias==null? "" : System.Uri.EscapeDataString(alias));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Checks whether the given user is a member of the group. Membership can be direct or nested, but if nested, the `memberKey` and `groupKey` must be entities in the same domain or an `Invalid input` error is returned. To check for nested memberships that include entities outside of the group's domain, use the [`checkTransitiveMembership()`](https://cloud.google.com/identity/docs/reference/rest/v1/groups.memberships/checkTransitiveMembership) method in the Cloud Identity Groups API.
		/// Directory_members_hasMember admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}
		/// </summary>
		/// <param name="groupKey">Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.</param>
		/// <param name="memberKey">Identifies the user member in the API request. The value can be the user's primary email address, alias, or unique ID.</param>
		/// <returns>Successful response</returns>
		public async Task<MembersHasMember> Directory_members_hasMemberAsync(string groupKey, string memberKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/groups/"+ (groupKey==null? "" : System.Uri.EscapeDataString(groupKey))+"/hasMember/"+ (memberKey==null? "" : System.Uri.EscapeDataString(memberKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MembersHasMember>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a paginated list of all members in a group. This method times out after 60 minutes. For more information, see [Troubleshoot error codes](https://developers.google.com/admin-sdk/directory/v1/guides/troubleshoot-error-codes).
		/// Directory_members_list admin/directory/v1/groups/{groupKey}/members
		/// </summary>
		/// <param name="groupKey">Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.</param>
		/// <param name="includeDerivedMembership">Whether to list indirect memberships. Default: false.</param>
		/// <param name="maxResults">Maximum number of results to return. Max allowed value is 200.
		/// Minimum: 1
		// </param>
		/// <param name="pageToken">Token to specify next page in the list.</param>
		/// <param name="roles">The `roles` query parameter allows you to retrieve group members by role. Allowed values are `OWNER`, `MANAGER`, and `MEMBER`.</param>
		/// <returns>Successful response</returns>
		public async Task<Members> Directory_members_listAsync(string groupKey, bool includeDerivedMembership, int maxResults, string pageToken, string roles, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/groups/"+ (groupKey==null? "" : System.Uri.EscapeDataString(groupKey))+"/members&includeDerivedMembership="+includeDerivedMembership+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&roles=" + (roles==null? "" : System.Uri.EscapeDataString(roles));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Members>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a user to the specified group.
		/// Directory_members_insert admin/directory/v1/groups/{groupKey}/members
		/// </summary>
		/// <param name="groupKey">Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Member> Directory_members_insertAsync(string groupKey, Member requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/groups/"+ (groupKey==null? "" : System.Uri.EscapeDataString(groupKey))+"/members";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Member>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a member from a group.
		/// Directory_members_delete admin/directory/v1/groups/{groupKey}/members/{memberKey}
		/// </summary>
		/// <param name="groupKey">Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.</param>
		/// <param name="memberKey">Identifies the group member in the API request. A group member can be a user or another group. The value can be the member's (group or user) primary email address, alias, or unique ID.</param>
		/// <returns>Successful response</returns>
		public async Task Directory_members_deleteAsync(string groupKey, string memberKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/groups/"+ (groupKey==null? "" : System.Uri.EscapeDataString(groupKey))+"/members/"+ (memberKey==null? "" : System.Uri.EscapeDataString(memberKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a group member's properties.
		/// Directory_members_get admin/directory/v1/groups/{groupKey}/members/{memberKey}
		/// </summary>
		/// <param name="groupKey">Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.</param>
		/// <param name="memberKey">Identifies the group member in the API request. A group member can be a user or another group. The value can be the member's (group or user) primary email address, alias, or unique ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Member> Directory_members_getAsync(string groupKey, string memberKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/groups/"+ (groupKey==null? "" : System.Uri.EscapeDataString(groupKey))+"/members/"+ (memberKey==null? "" : System.Uri.EscapeDataString(memberKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Member>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the membership properties of a user in the specified group. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).
		/// Directory_members_patch admin/directory/v1/groups/{groupKey}/members/{memberKey}
		/// </summary>
		/// <param name="groupKey">Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.</param>
		/// <param name="memberKey">Identifies the group member in the API request. A group member can be a user or another group. The value can be the member's (group or user) primary email address, alias, or unique ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Member> Directory_members_patchAsync(string groupKey, string memberKey, Member requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/groups/"+ (groupKey==null? "" : System.Uri.EscapeDataString(groupKey))+"/members/"+ (memberKey==null? "" : System.Uri.EscapeDataString(memberKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Member>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the membership of a user in the specified group.
		/// Directory_members_update admin/directory/v1/groups/{groupKey}/members/{memberKey}
		/// </summary>
		/// <param name="groupKey">Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.</param>
		/// <param name="memberKey">Identifies the group member in the API request. A group member can be a user or another group. The value can be the member's (group or user) primary email address, alias, or unique ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Member> Directory_members_updateAsync(string groupKey, string memberKey, Member requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/groups/"+ (groupKey==null? "" : System.Uri.EscapeDataString(groupKey))+"/members/"+ (memberKey==null? "" : System.Uri.EscapeDataString(memberKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Member>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a paginated list of either deleted users or all users in a domain.
		/// Directory_users_list admin/directory/v1/users
		/// </summary>
		/// <param name="customFieldMask">A comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when `projection=custom`.</param>
		/// <param name="customer">The unique ID for the customer's Google Workspace account. In case of a multi-domain account, to fetch all groups for a customer, use this field instead of `domain`. You can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users](/admin-sdk/directory/v1/reference/users) resource. You must provide either the `customer` or the `domain` parameter.</param>
		/// <param name="domain">The domain name. Use this field to get groups from only one domain. To return all domains for a customer account, use the `customer` query parameter instead. Either the `customer` or the `domain` parameter must be provided.</param>
		/// <param name="_event">Event on which subscription is intended (if subscribing)</param>
		/// <param name="maxResults">Maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="orderBy">Property to use for sorting results.</param>
		/// <param name="pageToken">Token to specify next page in the list</param>
		/// <param name="projection">What subset of fields to fetch for this user.</param>
		/// <param name="query">Query string for searching user fields. For more information on constructing user queries, see [Search for Users](/admin-sdk/directory/v1/guides/search-users).</param>
		/// <param name="showDeleted">If set to `true`, retrieves the list of deleted users. (Default: `false`)</param>
		/// <param name="sortOrder">Whether to return results in ascending or descending order, ignoring case.</param>
		/// <param name="viewType">Whether to fetch the administrator-only or domain-wide public view of the user. For more information, see [Retrieve a user as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin).</param>
		/// <returns>Successful response</returns>
		public async Task<Users> Directory_users_listAsync(string customFieldMask, string customer, string domain, Directory_users_listEvent _event, int maxResults, Directory_users_listOrderBy orderBy, string pageToken, Directory_users_listProjection projection, string query, string showDeleted, Directory_chromeosdevices_listSortOrder sortOrder, Directory_users_listViewType viewType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/users?customFieldMask=" + (customFieldMask==null? "" : System.Uri.EscapeDataString(customFieldMask))+"&customer=" + (customer==null? "" : System.Uri.EscapeDataString(customer))+"&domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&event=" + _event+"&maxResults="+maxResults+"&orderBy=" + orderBy+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&projection=" + projection+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&showDeleted=" + (showDeleted==null? "" : System.Uri.EscapeDataString(showDeleted))+"&sortOrder=" + sortOrder+"&viewType=" + viewType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Users>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a user. Mutate calls immediately following user creation might sometimes fail as the user isn't fully created due to propagation delay in our backends. Check the error details for the "User creation is not complete" message to see if this is the case. Retrying the calls after some time can help in this case.
		/// Directory_users_insert admin/directory/v1/users
		/// </summary>
		/// <param name="resolveConflictAccount">Optional. If set to `true`, the option selected for [handling unmanaged user accounts](https://support.google.com/a/answer/11112794) will apply. Default: `false`</param>
		/// <returns>Successful response</returns>
		public async Task<User> Directory_users_insertAsync(bool resolveConflictAccount, User requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/users?resolveConflictAccount="+resolveConflictAccount;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Watches for changes in users list.
		/// Directory_users_watch admin/directory/v1/users/watch
		/// </summary>
		/// <param name="customFieldMask">Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.</param>
		/// <param name="customer">Immutable ID of the Google Workspace account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.</param>
		/// <param name="domain">Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead."</param>
		/// <param name="_event">Events to watch for.</param>
		/// <param name="maxResults">Maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="orderBy">Column to use for sorting results</param>
		/// <param name="pageToken">Token to specify next page in the list</param>
		/// <param name="projection">What subset of fields to fetch for this user.</param>
		/// <param name="query">Query string search. Should be of the form "". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users</param>
		/// <param name="showDeleted">If set to true, retrieves the list of deleted users. (Default: false)</param>
		/// <param name="sortOrder">Whether to return results in ascending or descending order.</param>
		/// <param name="viewType">Whether to fetch the administrator-only or domain-wide public view of the user. For more information, see [Retrieve a user as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin).</param>
		/// <returns>Successful response</returns>
		public async Task<Channel> Directory_users_watchAsync(string customFieldMask, string customer, string domain, Directory_users_listEvent _event, int maxResults, Directory_users_listOrderBy orderBy, string pageToken, Directory_users_listProjection projection, string query, string showDeleted, Directory_chromeosdevices_listSortOrder sortOrder, Directory_users_listViewType viewType, Channel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/users/watch?customFieldMask=" + (customFieldMask==null? "" : System.Uri.EscapeDataString(customFieldMask))+"&customer=" + (customer==null? "" : System.Uri.EscapeDataString(customer))+"&domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&event=" + _event+"&maxResults="+maxResults+"&orderBy=" + orderBy+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&projection=" + projection+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&showDeleted=" + (showDeleted==null? "" : System.Uri.EscapeDataString(showDeleted))+"&sortOrder=" + sortOrder+"&viewType=" + viewType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Channel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a user.
		/// Directory_users_delete admin/directory/v1/users/{userKey}
		/// </summary>
		/// <param name="userKey">Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.</param>
		/// <returns>Successful response</returns>
		public async Task Directory_users_deleteAsync(string userKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/users/"+ (userKey==null? "" : System.Uri.EscapeDataString(userKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a user.
		/// Directory_users_get admin/directory/v1/users/{userKey}
		/// </summary>
		/// <param name="userKey">Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.</param>
		/// <param name="customFieldMask">A comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when `projection=custom`.</param>
		/// <param name="projection">What subset of fields to fetch for this user.</param>
		/// <param name="viewType">Whether to fetch the administrator-only or domain-wide public view of the user. For more information, see [Retrieve a user as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin).</param>
		/// <returns>Successful response</returns>
		public async Task<User> Directory_users_getAsync(string userKey, string customFieldMask, Directory_users_listProjection projection, Directory_users_listViewType viewType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/users/"+ (userKey==null? "" : System.Uri.EscapeDataString(userKey))+"&customFieldMask=" + (customFieldMask==null? "" : System.Uri.EscapeDataString(customFieldMask))+"&projection=" + projection+"&viewType=" + viewType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a user using patch semantics. The update method should be used instead, because it also supports patch semantics and has better performance. If you're mapping an external identity to a Google identity, use the [`update`](https://developers.google.com/admin-sdk/directory/v1/reference/users/update) method instead of the `patch` method. This method is unable to clear fields that contain repeated objects (`addresses`, `phones`, etc). Use the update method instead.
		/// Directory_users_patch admin/directory/v1/users/{userKey}
		/// </summary>
		/// <param name="userKey">Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.</param>
		/// <returns>Successful response</returns>
		public async Task<User> Directory_users_patchAsync(string userKey, User requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/users/"+ (userKey==null? "" : System.Uri.EscapeDataString(userKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a user. This method supports patch semantics, meaning that you only need to include the fields you wish to update. Fields that are not present in the request will be preserved, and fields set to `null` will be cleared. For repeating fields that contain arrays, individual items in the array can't be patched piecemeal; they must be supplied in the request body with the desired values for all items. See the [user accounts guide](https://developers.google.com/admin-sdk/directory/v1/guides/manage-users#update_user) for more information.
		/// Directory_users_update admin/directory/v1/users/{userKey}
		/// </summary>
		/// <param name="userKey">Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.</param>
		/// <returns>Successful response</returns>
		public async Task<User> Directory_users_updateAsync(string userKey, User requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/users/"+ (userKey==null? "" : System.Uri.EscapeDataString(userKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all aliases for a user.
		/// Directory_users_aliases_list admin/directory/v1/users/{userKey}/aliases
		/// </summary>
		/// <param name="userKey">Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.</param>
		/// <param name="_event">Events to watch for.</param>
		/// <returns>Successful response</returns>
		public async Task<Aliases> Directory_users_aliases_listAsync(string userKey, Directory_users_aliases_listEvent _event, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/users/"+ (userKey==null? "" : System.Uri.EscapeDataString(userKey))+"/aliases&event=" + _event;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Aliases>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds an alias.
		/// Directory_users_aliases_insert admin/directory/v1/users/{userKey}/aliases
		/// </summary>
		/// <param name="userKey">Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Alias> Directory_users_aliases_insertAsync(string userKey, Alias requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/users/"+ (userKey==null? "" : System.Uri.EscapeDataString(userKey))+"/aliases";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Alias>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Watches for changes in users list.
		/// Directory_users_aliases_watch admin/directory/v1/users/{userKey}/aliases/watch
		/// </summary>
		/// <param name="userKey">Email or immutable ID of the user</param>
		/// <param name="_event">Events to watch for.</param>
		/// <returns>Successful response</returns>
		public async Task<Channel> Directory_users_aliases_watchAsync(string userKey, Directory_users_aliases_listEvent _event, Channel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/users/"+ (userKey==null? "" : System.Uri.EscapeDataString(userKey))+"/aliases/watch&event=" + _event;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Channel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes an alias.
		/// Directory_users_aliases_delete admin/directory/v1/users/{userKey}/aliases/{alias}
		/// </summary>
		/// <param name="userKey">Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.</param>
		/// <param name="alias">The alias to be removed.</param>
		/// <returns>Successful response</returns>
		public async Task Directory_users_aliases_deleteAsync(string userKey, string alias, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/users/"+ (userKey==null? "" : System.Uri.EscapeDataString(userKey))+"/aliases/"+ (alias==null? "" : System.Uri.EscapeDataString(alias));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the ASPs issued by a user.
		/// Directory_asps_list admin/directory/v1/users/{userKey}/asps
		/// </summary>
		/// <param name="userKey">Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Asps> Directory_asps_listAsync(string userKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/users/"+ (userKey==null? "" : System.Uri.EscapeDataString(userKey))+"/asps";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Asps>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an ASP issued by a user.
		/// Directory_asps_delete admin/directory/v1/users/{userKey}/asps/{codeId}
		/// </summary>
		/// <param name="userKey">Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.</param>
		/// <param name="codeId">The unique ID of the ASP to be deleted.</param>
		/// <returns>Successful response</returns>
		public async Task Directory_asps_deleteAsync(string userKey, int codeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/users/"+ (userKey==null? "" : System.Uri.EscapeDataString(userKey))+"/asps/"+codeId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about an ASP issued by a user.
		/// Directory_asps_get admin/directory/v1/users/{userKey}/asps/{codeId}
		/// </summary>
		/// <param name="userKey">Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.</param>
		/// <param name="codeId">The unique ID of the ASP.</param>
		/// <returns>Successful response</returns>
		public async Task<Asp> Directory_asps_getAsync(string userKey, int codeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/users/"+ (userKey==null? "" : System.Uri.EscapeDataString(userKey))+"/asps/"+codeId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Asp>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Makes a user a super administrator.
		/// Directory_users_makeAdmin admin/directory/v1/users/{userKey}/makeAdmin
		/// </summary>
		/// <param name="userKey">Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.</param>
		/// <returns>Successful response</returns>
		public async Task Directory_users_makeAdminAsync(string userKey, UserMakeAdmin requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/users/"+ (userKey==null? "" : System.Uri.EscapeDataString(userKey))+"/makeAdmin";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes the user's photo.
		/// Directory_users_photos_delete admin/directory/v1/users/{userKey}/photos/thumbnail
		/// </summary>
		/// <param name="userKey">Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.</param>
		/// <returns>Successful response</returns>
		public async Task Directory_users_photos_deleteAsync(string userKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/users/"+ (userKey==null? "" : System.Uri.EscapeDataString(userKey))+"/photos/thumbnail";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the user's photo.
		/// Directory_users_photos_get admin/directory/v1/users/{userKey}/photos/thumbnail
		/// </summary>
		/// <param name="userKey">Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.</param>
		/// <returns>Successful response</returns>
		public async Task<UserPhoto> Directory_users_photos_getAsync(string userKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/users/"+ (userKey==null? "" : System.Uri.EscapeDataString(userKey))+"/photos/thumbnail";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserPhoto>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a photo for the user. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).
		/// Directory_users_photos_patch admin/directory/v1/users/{userKey}/photos/thumbnail
		/// </summary>
		/// <param name="userKey">Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.</param>
		/// <returns>Successful response</returns>
		public async Task<UserPhoto> Directory_users_photos_patchAsync(string userKey, UserPhoto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/users/"+ (userKey==null? "" : System.Uri.EscapeDataString(userKey))+"/photos/thumbnail";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserPhoto>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds a photo for the user.
		/// Directory_users_photos_update admin/directory/v1/users/{userKey}/photos/thumbnail
		/// </summary>
		/// <param name="userKey">Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.</param>
		/// <returns>Successful response</returns>
		public async Task<UserPhoto> Directory_users_photos_updateAsync(string userKey, UserPhoto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/users/"+ (userKey==null? "" : System.Uri.EscapeDataString(userKey))+"/photos/thumbnail";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserPhoto>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Signs a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again.
		/// Directory_users_signOut admin/directory/v1/users/{userKey}/signOut
		/// </summary>
		/// <param name="userKey">Identifies the target user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.</param>
		/// <returns>Successful response</returns>
		public async Task Directory_users_signOutAsync(string userKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/users/"+ (userKey==null? "" : System.Uri.EscapeDataString(userKey))+"/signOut";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the set of tokens specified user has issued to 3rd party applications.
		/// Directory_tokens_list admin/directory/v1/users/{userKey}/tokens
		/// </summary>
		/// <param name="userKey">Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Tokens> Directory_tokens_listAsync(string userKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/users/"+ (userKey==null? "" : System.Uri.EscapeDataString(userKey))+"/tokens";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Tokens>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes all access tokens issued by a user for an application.
		/// Directory_tokens_delete admin/directory/v1/users/{userKey}/tokens/{clientId}
		/// </summary>
		/// <param name="userKey">Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.</param>
		/// <param name="clientId">The Client ID of the application the token is issued to.</param>
		/// <returns>Successful response</returns>
		public async Task Directory_tokens_deleteAsync(string userKey, string clientId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/users/"+ (userKey==null? "" : System.Uri.EscapeDataString(userKey))+"/tokens/"+ (clientId==null? "" : System.Uri.EscapeDataString(clientId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about an access token issued by a user.
		/// Directory_tokens_get admin/directory/v1/users/{userKey}/tokens/{clientId}
		/// </summary>
		/// <param name="userKey">Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.</param>
		/// <param name="clientId">The Client ID of the application the token is issued to.</param>
		/// <returns>Successful response</returns>
		public async Task<Token> Directory_tokens_getAsync(string userKey, string clientId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/users/"+ (userKey==null? "" : System.Uri.EscapeDataString(userKey))+"/tokens/"+ (clientId==null? "" : System.Uri.EscapeDataString(clientId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Token>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Turns off 2-Step Verification for user.
		/// Directory_twoStepVerification_turnOff admin/directory/v1/users/{userKey}/twoStepVerification/turnOff
		/// </summary>
		/// <param name="userKey">Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.</param>
		/// <returns>Successful response</returns>
		public async Task Directory_twoStepVerification_turnOffAsync(string userKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/users/"+ (userKey==null? "" : System.Uri.EscapeDataString(userKey))+"/twoStepVerification/turnOff";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Undeletes a deleted user.
		/// Directory_users_undelete admin/directory/v1/users/{userKey}/undelete
		/// </summary>
		/// <param name="userKey">The immutable id of the user</param>
		/// <returns>Successful response</returns>
		public async Task Directory_users_undeleteAsync(string userKey, UserUndelete requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/users/"+ (userKey==null? "" : System.Uri.EscapeDataString(userKey))+"/undelete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the current set of valid backup verification codes for the specified user.
		/// Directory_verificationCodes_list admin/directory/v1/users/{userKey}/verificationCodes
		/// </summary>
		/// <param name="userKey">Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.</param>
		/// <returns>Successful response</returns>
		public async Task<VerificationCodes> Directory_verificationCodes_listAsync(string userKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/users/"+ (userKey==null? "" : System.Uri.EscapeDataString(userKey))+"/verificationCodes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VerificationCodes>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generates new backup verification codes for the user.
		/// Directory_verificationCodes_generate admin/directory/v1/users/{userKey}/verificationCodes/generate
		/// </summary>
		/// <param name="userKey">Email or immutable ID of the user</param>
		/// <returns>Successful response</returns>
		public async Task Directory_verificationCodes_generateAsync(string userKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/users/"+ (userKey==null? "" : System.Uri.EscapeDataString(userKey))+"/verificationCodes/generate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Invalidates the current backup verification codes for the user.
		/// Directory_verificationCodes_invalidate admin/directory/v1/users/{userKey}/verificationCodes/invalidate
		/// </summary>
		/// <param name="userKey">Email or immutable ID of the user</param>
		/// <returns>Successful response</returns>
		public async Task Directory_verificationCodes_invalidateAsync(string userKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/users/"+ (userKey==null? "" : System.Uri.EscapeDataString(userKey))+"/verificationCodes/invalidate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a print server.
		/// Admin_customers_chrome_printServers_delete admin/directory/v1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the print server to be deleted. Format: `customers/{customer.id}/chrome/printServers/{print_server.id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Admin_customers_chrome_printServers_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a print server's configuration.
		/// Admin_customers_chrome_printServers_get admin/directory/v1/{name}
		/// </summary>
		/// <param name="name">Required. The [unique ID](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers) of the customer's Google Workspace account. Format: `customers/{id}`</param>
		/// <returns>Successful response</returns>
		public async Task<PrintServer> Admin_customers_chrome_printServers_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PrintServer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a print server's configuration.
		/// Admin_customers_chrome_printServers_patch admin/directory/v1/{name}
		/// </summary>
		/// <param name="name">Immutable. Resource name of the print server. Leave empty when creating. Format: `customers/{customer.id}/printServers/{print_server.id}`</param>
		/// <param name="updateMask">The list of fields to update. Some fields are read-only and cannot be updated. Values for unspecified fields are patched.</param>
		/// <returns>Successful response</returns>
		public async Task<PrintServer> Admin_customers_chrome_printServers_patchAsync(string name, string updateMask, PrintServer requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PrintServer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists print server configurations.
		/// Admin_customers_chrome_printServers_list admin/directory/v1/{parent}/chrome/printServers
		/// </summary>
		/// <param name="parent">Required. The [unique ID](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers) of the customer's Google Workspace account. Format: `customers/{id}`</param>
		/// <param name="filter">Search query in [Common Expression Language syntax](https://github.com/google/cel-spec). Supported filters are `display_name`, `description`, and `uri`. Example: `printServer.displayName=='marketing-queue'`.</param>
		/// <param name="orderBy">Sort order for results. Supported values are `display_name`, `description`, or `create_time`. Default order is ascending, but descending order can be returned by appending "desc" to the `order_by` field. For instance, `orderBy=='description desc'` returns the print servers sorted by description in descending order.</param>
		/// <param name="orgUnitId">If `org_unit_id` is present in the request, only print servers owned or inherited by the organizational unit (OU) are returned. If the `PrintServer` resource's `org_unit_id` matches the one in the request, the OU owns the server. If `org_unit_id` is not specified in the request, all print servers are returned or filtered against.</param>
		/// <param name="pageSize">The maximum number of objects to return (default `100`, max `100`). The service might return fewer than this value.</param>
		/// <param name="pageToken">A generated token to paginate results (the `next_page_token` from a previous call).</param>
		/// <returns>Successful response</returns>
		public async Task<ListPrintServersResponse> Admin_customers_chrome_printServers_listAsync(string parent, string filter, string orderBy, string orgUnitId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/chrome/printServers&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&orgUnitId=" + (orgUnitId==null? "" : System.Uri.EscapeDataString(orgUnitId))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPrintServersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a print server.
		/// Admin_customers_chrome_printServers_create admin/directory/v1/{parent}/chrome/printServers
		/// </summary>
		/// <param name="parent">Required. The [unique ID](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers) of the customer's Google Workspace account. Format: `customers/{id}`</param>
		/// <returns>Successful response</returns>
		public async Task<PrintServer> Admin_customers_chrome_printServers_createAsync(string parent, PrintServer requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/chrome/printServers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PrintServer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates multiple print servers.
		/// Admin_customers_chrome_printServers_batchCreatePrintServers admin/directory/v1/{parent}/chrome/printServers:batchCreatePrintServers
		/// </summary>
		/// <param name="parent">Required. The [unique ID](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers) of the customer's Google Workspace account. Format: `customers/{id}`</param>
		/// <returns>Successful response</returns>
		public async Task<BatchCreatePrintServersResponse> Admin_customers_chrome_printServers_batchCreatePrintServersAsync(string parent, BatchCreatePrintServersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/chrome/printServers:batchCreatePrintServers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchCreatePrintServersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes multiple print servers.
		/// Admin_customers_chrome_printServers_batchDeletePrintServers admin/directory/v1/{parent}/chrome/printServers:batchDeletePrintServers
		/// </summary>
		/// <param name="parent">Required. The [unique ID](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers) of the customer's Google Workspace account. Format: `customers/{customer.id}`</param>
		/// <returns>Successful response</returns>
		public async Task<BatchDeletePrintServersResponse> Admin_customers_chrome_printServers_batchDeletePrintServersAsync(string parent, BatchDeletePrintServersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/chrome/printServers:batchDeletePrintServers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchDeletePrintServersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List printers configs.
		/// Admin_customers_chrome_printers_list admin/directory/v1/{parent}/chrome/printers
		/// </summary>
		/// <param name="parent">Required. The name of the customer who owns this collection of printers. Format: customers/{customer_id}</param>
		/// <param name="filter">Search query. Search syntax is shared between this api and Admin Console printers pages.</param>
		/// <param name="orderBy">The order to sort results by. Must be one of display_name, description, make_and_model, or create_time. Default order is ascending, but descending order can be returned by appending "desc" to the order_by field. For instance, "description desc" will return the printers sorted by description in descending order.</param>
		/// <param name="orgUnitId">Organization Unit that we want to list the printers for. When org_unit is not present in the request then all printers of the customer are returned (or filtered). When org_unit is present in the request then only printers available to this OU will be returned (owned or inherited). You may see if printer is owned or inherited for this OU by looking at Printer.org_unit_id.</param>
		/// <param name="pageSize">The maximum number of objects to return. The service may return fewer than this value.</param>
		/// <param name="pageToken">A page token, received from a previous call.</param>
		/// <returns>Successful response</returns>
		public async Task<ListPrintersResponse> Admin_customers_chrome_printers_listAsync(string parent, string filter, string orderBy, string orgUnitId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/chrome/printers&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&orgUnitId=" + (orgUnitId==null? "" : System.Uri.EscapeDataString(orgUnitId))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPrintersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a printer under given Organization Unit.
		/// Admin_customers_chrome_printers_create admin/directory/v1/{parent}/chrome/printers
		/// </summary>
		/// <param name="parent">Required. The name of the customer. Format: customers/{customer_id}</param>
		/// <returns>Successful response</returns>
		public async Task<Printer> Admin_customers_chrome_printers_createAsync(string parent, Printer requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/chrome/printers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Printer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates printers under given Organization Unit.
		/// Admin_customers_chrome_printers_batchCreatePrinters admin/directory/v1/{parent}/chrome/printers:batchCreatePrinters
		/// </summary>
		/// <param name="parent">Required. The name of the customer. Format: customers/{customer_id}</param>
		/// <returns>Successful response</returns>
		public async Task<BatchCreatePrintersResponse> Admin_customers_chrome_printers_batchCreatePrintersAsync(string parent, BatchCreatePrintersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/chrome/printers:batchCreatePrinters";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchCreatePrintersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes printers in batch.
		/// Admin_customers_chrome_printers_batchDeletePrinters admin/directory/v1/{parent}/chrome/printers:batchDeletePrinters
		/// </summary>
		/// <param name="parent">Required. The name of the customer. Format: customers/{customer_id}</param>
		/// <returns>Successful response</returns>
		public async Task<BatchDeletePrintersResponse> Admin_customers_chrome_printers_batchDeletePrintersAsync(string parent, BatchDeletePrintersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/chrome/printers:batchDeletePrinters";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchDeletePrintersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the supported printer models.
		/// Admin_customers_chrome_printers_listPrinterModels admin/directory/v1/{parent}/chrome/printers:listPrinterModels
		/// </summary>
		/// <param name="parent">Required. The name of the customer who owns this collection of printers. Format: customers/{customer_id}</param>
		/// <param name="filter">Filer to list only models by a given manufacturer in format: "manufacturer:Brother". Search syntax is shared between this api and Admin Console printers pages.</param>
		/// <param name="pageSize">The maximum number of objects to return. The service may return fewer than this value.</param>
		/// <param name="pageToken">A page token, received from a previous call.</param>
		/// <returns>Successful response</returns>
		public async Task<ListPrinterModelsResponse> Admin_customers_chrome_printers_listPrinterModelsAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory/v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/chrome/printers:listPrinterModels&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPrinterModelsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops watching resources through this channel.
		/// Admin_channels_stop admin/directory_v1/channels/stop
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task Admin_channels_stopAsync(Channel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/directory_v1/channels/stop";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum Directory_chromeosdevices_listOrderBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="annotatedLocation")]
		annotatedLocation = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="annotatedUser")]
		annotatedUser = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lastSync")]
		lastSync = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="notes")]
		notes = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="serialNumber")]
		serialNumber = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="status")]
		status = 5,
	}
	
	public enum Directory_chromeosdevices_listProjection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BASIC")]
		BASIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FULL")]
		FULL = 1,
	}
	
	public enum Directory_chromeosdevices_listSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ASCENDING")]
		ASCENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DESCENDING")]
		DESCENDING = 1,
	}
	
	public enum Directory_mobiledevices_listOrderBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deviceId")]
		deviceId = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="email")]
		email = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lastSync")]
		lastSync = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="model")]
		model = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="name")]
		name = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="os")]
		os = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="status")]
		status = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="type")]
		type = 7,
	}
	
	public enum Directory_orgunits_listType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all")]
		all = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="children")]
		children = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="allIncludingParent")]
		allIncludingParent = 2,
	}
	
	public enum Directory_resources_buildings_insertCoordinatesSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLIENT_SPECIFIED")]
		CLIENT_SPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RESOLVED_FROM_ADDRESS")]
		RESOLVED_FROM_ADDRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SOURCE_UNSPECIFIED")]
		SOURCE_UNSPECIFIED = 2,
	}
	
	public enum Directory_groups_listOrderBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="email")]
		email = 0,
	}
	
	public enum Directory_users_listEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="add")]
		add = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="delete")]
		delete = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="makeAdmin")]
		makeAdmin = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="undelete")]
		undelete = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="update")]
		update = 4,
	}
	
	public enum Directory_users_listOrderBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="email")]
		email = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="familyName")]
		familyName = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="givenName")]
		givenName = 2,
	}
	
	public enum Directory_users_listProjection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="basic")]
		basic = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="custom")]
		custom = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="full")]
		full = 2,
	}
	
	public enum Directory_users_listViewType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="admin_view")]
		admin_view = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="domain_public")]
		domain_public = 1,
	}
	
	public enum Directory_users_aliases_listEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="add")]
		add = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="delete")]
		delete = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
