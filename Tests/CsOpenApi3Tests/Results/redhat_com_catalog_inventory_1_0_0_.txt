//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppliedInventoriesParametersServicePlan
	{
		
		/// <summary>
		/// The provider specific parameters needed to compute list of used service inventories
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_parameters")]
		public string Service_parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CheckAvailabilityTask
	{
		
		[System.Runtime.Serialization.DataMember(Name="archived_at")]
		public System.Nullable<System.DateTimeOffset> Archived_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="child_task_id")]
		public string Child_task_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completed_at")]
		public System.Nullable<System.DateTimeOffset> Completed_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="controller_message_id")]
		public string Controller_message_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// UUID of task
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="output")]
		public string Output { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Source_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<CheckAvailabilityTaskState> State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<CheckAvailabilityTaskStatus> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_source_ref")]
		public string Target_source_ref { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_type")]
		public string Target_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CheckAvailabilityTaskState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		queued = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		running = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		timedout = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CheckAvailabilityTaskStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ok = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		warn = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unchanged = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		error = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CollectionLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="first")]
		public string First { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last")]
		public string Last { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prev")]
		public string Prev { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CollectionMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ErrorNotFound
	{
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public ErrorNotFoundErrors[] ErrorNotFoundErrors { get; set; }
	}
	
	public class ErrorNotFoundErrors
	{
		
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FullRefreshPersisterTask
	{
		
		[System.Runtime.Serialization.DataMember(Name="archived_at")]
		public System.Nullable<System.DateTimeOffset> Archived_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="child_task_id")]
		public string Child_task_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completed_at")]
		public System.Nullable<System.DateTimeOffset> Completed_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="controller_message_id")]
		public string Controller_message_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// UUID of task
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="output")]
		public string Output { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Source_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public CheckAvailabilityTaskState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public CheckAvailabilityTaskStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_source_ref")]
		public string Target_source_ref { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_type")]
		public string Target_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FullRefreshUploadTask
	{
		
		[System.Runtime.Serialization.DataMember(Name="archived_at")]
		public System.Nullable<System.DateTimeOffset> Archived_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="child_task_id")]
		public string Child_task_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completed_at")]
		public System.Nullable<System.DateTimeOffset> Completed_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="controller_message_id")]
		public string Controller_message_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// UUID of task
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="output")]
		public string Output { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Source_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public CheckAvailabilityTaskState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public CheckAvailabilityTaskStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_source_ref")]
		public string Target_source_ref { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_type")]
		public string Target_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GraphQLRequest
	{
		
		/// <summary>
		/// If the Query contains several named operations, the operationName controls which one should be executed
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="operationName")]
		public string OperationName { get; set; } = "";
		
		/// <summary>
		/// The GraphQL query
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("{}")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; } = "{}";
		
		/// <summary>
		/// Optional Query variables
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variables")]
		public string Variables { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GraphQLResponse
	{
		
		/// <summary>
		/// Results from the GraphQL query
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// Errors resulting from the GraphQL query
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public string[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IncrementalRefreshUploadTask
	{
		
		[System.Runtime.Serialization.DataMember(Name="archived_at")]
		public System.Nullable<System.DateTimeOffset> Archived_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="child_task_id")]
		public string Child_task_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completed_at")]
		public System.Nullable<System.DateTimeOffset> Completed_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="controller_message_id")]
		public string Controller_message_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// UUID of task
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="output")]
		public string Output { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Source_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public CheckAvailabilityTaskState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public CheckAvailabilityTaskStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_source_ref")]
		public string Target_source_ref { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_type")]
		public string Target_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LaunchJobTask
	{
		
		[System.Runtime.Serialization.DataMember(Name="archived_at")]
		public System.Nullable<System.DateTimeOffset> Archived_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="child_task_id")]
		public string Child_task_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completed_at")]
		public System.Nullable<System.DateTimeOffset> Completed_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="controller_message_id")]
		public string Controller_message_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// UUID of task
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="output")]
		public string Output { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Source_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public CheckAvailabilityTaskState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public CheckAvailabilityTaskStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_source_ref")]
		public string Target_source_ref { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_type")]
		public string Target_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderParametersServiceOffering
	{
		
		/// <summary>
		/// The provider specific parameters needed to provision this service. This might include namespaces, special keys
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider_control_parameters")]
		public string Provider_control_parameters { get; set; }
		
		/// <summary>
		/// JSON object with provisioning parameters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_parameters")]
		public string Service_parameters { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_plan_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Service_plan_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderParametersServicePlan
	{
		
		/// <summary>
		/// The provider specific parameters needed to provision this service. This might include namespaces, special keys
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider_control_parameters")]
		public string Provider_control_parameters { get; set; }
		
		/// <summary>
		/// JSON object with provisioning parameters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_parameters")]
		public string Service_parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceCredential
	{
		
		[System.Runtime.Serialization.DataMember(Name="archived_at")]
		public System.Nullable<System.DateTimeOffset> Archived_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_seen_at")]
		public System.Nullable<System.DateTimeOffset> Last_seen_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refresh_state_part_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Refresh_state_part_id { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_credential_type_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Service_credential_type_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_created_at")]
		public System.Nullable<System.DateTimeOffset> Source_created_at { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Source_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_ref")]
		public string Source_ref { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_updated_at")]
		public System.Nullable<System.DateTimeOffset> Source_updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type_name")]
		public string Type_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceCredentialType
	{
		
		[System.Runtime.Serialization.DataMember(Name="archived_at")]
		public System.Nullable<System.DateTimeOffset> Archived_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_seen_at")]
		public System.Nullable<System.DateTimeOffset> Last_seen_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public string Namespace { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refresh_state_part_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Refresh_state_part_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_created_at")]
		public System.Nullable<System.DateTimeOffset> Source_created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_deleted_at")]
		public System.Nullable<System.DateTimeOffset> Source_deleted_at { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Source_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_ref")]
		public string Source_ref { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceCredentialTypesCollection
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ServiceCredentialType[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CollectionLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public CollectionMetadata Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceCredentialsCollection
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ServiceCredential[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CollectionLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public CollectionMetadata Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceInstance
	{
		
		[System.Runtime.Serialization.DataMember(Name="archived_at")]
		public System.Nullable<System.DateTimeOffset> Archived_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="external_url")]
		public string External_url { get; set; }
		
		/// <summary>
		/// Extra information about this object in JSON format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extra")]
		public string Extra { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_seen_at")]
		public System.Nullable<System.DateTimeOffset> Last_seen_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refresh_state_part_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Refresh_state_part_id { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="root_service_instance_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Root_service_instance_id { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_inventory_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Service_inventory_id { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_offering_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Service_offering_id { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_plan_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Service_plan_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_created_at")]
		public System.Nullable<System.DateTimeOffset> Source_created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_deleted_at")]
		public System.Nullable<System.DateTimeOffset> Source_deleted_at { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Source_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_ref")]
		public string Source_ref { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceInstanceNode
	{
		
		[System.Runtime.Serialization.DataMember(Name="archived_at")]
		public System.Nullable<System.DateTimeOffset> Archived_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="extra")]
		public string Extra { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_seen_at")]
		public System.Nullable<System.DateTimeOffset> Last_seen_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refresh_state_part_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Refresh_state_part_id { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="root_service_instance_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Root_service_instance_id { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_instance_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Service_instance_id { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_inventory_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Service_inventory_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_created_at")]
		public System.Nullable<System.DateTimeOffset> Source_created_at { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Source_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_ref")]
		public string Source_ref { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_updated_at")]
		public System.Nullable<System.DateTimeOffset> Source_updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceInstanceNodesCollection
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ServiceInstanceNode[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CollectionLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public CollectionMetadata Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceInstancesCollection
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ServiceInstance[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CollectionLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public CollectionMetadata Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceInventoriesCollection
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ServiceInventory[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CollectionLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public CollectionMetadata Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceInventory
	{
		
		[System.Runtime.Serialization.DataMember(Name="archived_at")]
		public System.Nullable<System.DateTimeOffset> Archived_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="extra")]
		public string Extra { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_seen_at")]
		public System.Nullable<System.DateTimeOffset> Last_seen_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refresh_state_part_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Refresh_state_part_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_created_at")]
		public System.Nullable<System.DateTimeOffset> Source_created_at { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Source_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_ref")]
		public string Source_ref { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_updated_at")]
		public System.Nullable<System.DateTimeOffset> Source_updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceOffering
	{
		
		[System.Runtime.Serialization.DataMember(Name="archived_at")]
		public System.Nullable<System.DateTimeOffset> Archived_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="display_name")]
		public string Display_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="distributor")]
		public string Distributor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="documentation_url")]
		public string Documentation_url { get; set; }
		
		/// <summary>
		/// Extra information about this object in JSON format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extra")]
		public string Extra { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_seen_at")]
		public System.Nullable<System.DateTimeOffset> Last_seen_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="long_description")]
		public string Long_description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refresh_state_part_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Refresh_state_part_id { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_inventory_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Service_inventory_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_created_at")]
		public System.Nullable<System.DateTimeOffset> Source_created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_deleted_at")]
		public System.Nullable<System.DateTimeOffset> Source_deleted_at { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Source_id { get; set; }
		
		/// <summary>
		/// The native reference used by the Source to refer to this object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_ref")]
		public string Source_ref { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="support_url")]
		public string Support_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceOfferingIcon
	{
		
		[System.Runtime.Serialization.DataMember(Name="archived_at")]
		public System.Nullable<System.DateTimeOffset> Archived_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// Raw icon data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_seen_at")]
		public System.Nullable<System.DateTimeOffset> Last_seen_at { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refresh_state_part_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Refresh_state_part_id { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Source_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_ref")]
		public string Source_ref { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceOfferingIconsCollection
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ServiceOfferingIcon[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CollectionLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public CollectionMetadata Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceOfferingNode
	{
		
		[System.Runtime.Serialization.DataMember(Name="archived_at")]
		public System.Nullable<System.DateTimeOffset> Archived_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="extra")]
		public string Extra { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_seen_at")]
		public System.Nullable<System.DateTimeOffset> Last_seen_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refresh_state_part_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Refresh_state_part_id { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="root_service_offering_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Root_service_offering_id { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_inventory_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Service_inventory_id { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_offering_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Service_offering_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_created_at")]
		public System.Nullable<System.DateTimeOffset> Source_created_at { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Source_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_ref")]
		public string Source_ref { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_updated_at")]
		public System.Nullable<System.DateTimeOffset> Source_updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceOfferingNodesCollection
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ServiceOfferingNode[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CollectionLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public CollectionMetadata Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceOfferingsCollection
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ServiceOffering[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CollectionLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public CollectionMetadata Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServicePlan
	{
		
		[System.Runtime.Serialization.DataMember(Name="archived_at")]
		public System.Nullable<System.DateTimeOffset> Archived_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="create_json_schema")]
		public string Create_json_schema { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Extra information about this object in JSON format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extra")]
		public string Extra { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_seen_at")]
		public System.Nullable<System.DateTimeOffset> Last_seen_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refresh_state_part_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Refresh_state_part_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resource_version")]
		public string Resource_version { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_offering_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Service_offering_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_created_at")]
		public System.Nullable<System.DateTimeOffset> Source_created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_deleted_at")]
		public System.Nullable<System.DateTimeOffset> Source_deleted_at { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Source_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_ref")]
		public string Source_ref { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="update_json_schema")]
		public string Update_json_schema { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServicePlansCollection
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ServicePlan[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CollectionLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public CollectionMetadata Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Source
	{
		
		[System.Runtime.Serialization.DataMember(Name="archived_at")]
		public System.Nullable<System.DateTimeOffset> Archived_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availability_message")]
		public string Availability_message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availability_status")]
		public string Availability_status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cloud_connector_id")]
		public string Cloud_connector_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="info")]
		public string Info { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_available_at")]
		public System.Nullable<System.DateTimeOffset> Last_available_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_checked_at")]
		public System.Nullable<System.DateTimeOffset> Last_checked_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_refresh_message")]
		public string Last_refresh_message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_successful_refresh_at")]
		public System.Nullable<System.DateTimeOffset> Last_successful_refresh_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_sha")]
		public string Previous_sha { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_size")]
		public System.Nullable<System.Int32> Previous_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refresh_finished_at")]
		public System.Nullable<System.DateTimeOffset> Refresh_finished_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refresh_started_at")]
		public System.Nullable<System.DateTimeOffset> Refresh_started_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refresh_state")]
		public string Refresh_state { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refresh_task_id")]
		public string Refresh_task_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourcesCollection
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Source[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CollectionLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public CollectionMetadata Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Tag
	{
		
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagsCollection
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Tag[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CollectionLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public CollectionMetadata Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Task_
	{
		
		[System.Runtime.Serialization.DataMember(Name="archived_at")]
		public System.Nullable<System.DateTimeOffset> Archived_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="child_task_id")]
		public string Child_task_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completed_at")]
		public System.Nullable<System.DateTimeOffset> Completed_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="controller_message_id")]
		public string Controller_message_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// UUID of task
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="output")]
		public string Output { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Source_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public CheckAvailabilityTaskState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public CheckAvailabilityTaskStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_source_ref")]
		public string Target_source_ref { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_type")]
		public string Target_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TasksCollection
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Task_[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CollectionLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public CollectionMetadata Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Tenant
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="external_tenant")]
		public string External_tenant { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TowingTask
	{
		
		[System.Runtime.Serialization.DataMember(Name="archived_at")]
		public System.Nullable<System.DateTimeOffset> Archived_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="child_task_id")]
		public string Child_task_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completed_at")]
		public System.Nullable<System.DateTimeOffset> Completed_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="controller_message_id")]
		public string Controller_message_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// UUID of task
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="output")]
		public string Output { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		/// <summary>
		/// ID of the resource
		/// Pattern: ^\d+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d+$")]
		public string Source_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public CheckAvailabilityTaskState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public CheckAvailabilityTaskStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_source_ref")]
		public string Target_source_ref { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_type")]
		public string Target_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Perform a GraphQL Query
		/// Performs a GraphQL Query
		/// PostGraphQL graphql
		/// </summary>
		/// <param name="requestBody">GraphQL Query Request</param>
		/// <returns>GraphQL Query Response</returns>
		public async Task<GraphQLResponse> PostGraphQLAsync(GraphQLRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "graphql";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GraphQLResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return this API document in JSON format
		/// GetDocumentation openapi.json
		/// </summary>
		/// <returns>The API document for this version of the API</returns>
		public async Task<string> GetDocumentationAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "openapi.json";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List ServiceCredentialTypes
		/// Returns an array of ServiceCredentialType objects
		/// ListServiceCredentialTypes service_credential_types
		/// </summary>
		/// <param name="limit">The numbers of items to return per page.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.
		/// Minimum: 0
		// </param>
		/// <param name="filter">Filter for querying collections.</param>
		/// <param name="sort_by">The list of attribute and order to sort the result set by.</param>
		/// <returns>ServiceCredentialTypes collection</returns>
		public async Task<ServiceCredentialTypesCollection> ListServiceCredentialTypesAsync(int limit, int offset, string filter, string sort_by, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "service_credential_types?limit="+limit+"&offset="+offset+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceCredentialTypesCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show an existing ServiceCredentialType
		/// Returns a ServiceCredentialType object
		/// ShowServiceCredentialType service_credential_types/{id}
		/// </summary>
		/// <param name="id">ID of the resource</param>
		/// <returns>ServiceCredentialType info</returns>
		public async Task<ServiceCredentialType> ShowServiceCredentialTypeAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "service_credential_types/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceCredentialType>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List ServiceCredentials
		/// Returns an array of ServiceCredential objects
		/// ListServiceCredentials service_credentials
		/// </summary>
		/// <param name="limit">The numbers of items to return per page.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.
		/// Minimum: 0
		// </param>
		/// <param name="filter">Filter for querying collections.</param>
		/// <param name="sort_by">The list of attribute and order to sort the result set by.</param>
		/// <returns>ServiceCredentials collection</returns>
		public async Task<ServiceCredentialsCollection> ListServiceCredentialsAsync(int limit, int offset, string filter, string sort_by, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "service_credentials?limit="+limit+"&offset="+offset+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceCredentialsCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show an existing ServiceCredential
		/// Returns a ServiceCredential object
		/// ShowServiceCredential service_credentials/{id}
		/// </summary>
		/// <param name="id">ID of the resource</param>
		/// <returns>ServiceCredential info</returns>
		public async Task<ServiceCredential> ShowServiceCredentialAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "service_credentials/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceCredential>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List ServiceInstances
		/// Returns an array of ServiceInstance objects
		/// ListServiceInstances service_instances
		/// </summary>
		/// <param name="limit">The numbers of items to return per page.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.
		/// Minimum: 0
		// </param>
		/// <param name="filter">Filter for querying collections.</param>
		/// <param name="sort_by">The list of attribute and order to sort the result set by.</param>
		/// <returns>ServiceInstances collection</returns>
		public async Task<ServiceInstancesCollection> ListServiceInstancesAsync(int limit, int offset, string filter, string sort_by, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "service_instances?limit="+limit+"&offset="+offset+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceInstancesCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show an existing ServiceInstance
		/// Returns a ServiceInstance object
		/// ShowServiceInstance service_instances/{id}
		/// </summary>
		/// <param name="id">ID of the resource</param>
		/// <returns>ServiceInstance info</returns>
		public async Task<ServiceInstance> ShowServiceInstanceAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "service_instances/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceInstance>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List ServiceInventories
		/// Returns an array of ServiceInventory objects
		/// ListServiceInventories service_inventories
		/// </summary>
		/// <param name="limit">The numbers of items to return per page.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.
		/// Minimum: 0
		// </param>
		/// <param name="filter">Filter for querying collections.</param>
		/// <param name="sort_by">The list of attribute and order to sort the result set by.</param>
		/// <returns>ServiceInventories collection</returns>
		public async Task<ServiceInventoriesCollection> ListServiceInventoriesAsync(int limit, int offset, string filter, string sort_by, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "service_inventories?limit="+limit+"&offset="+offset+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceInventoriesCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show an existing ServiceInventory
		/// Returns a ServiceInventory object
		/// ShowServiceInventory service_inventories/{id}
		/// </summary>
		/// <param name="id">ID of the resource</param>
		/// <returns>ServiceInventory info</returns>
		public async Task<ServiceInventory> ShowServiceInventoryAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "service_inventories/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceInventory>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Tag a ServiceInventory
		/// Tags a ServiceInventory object
		/// TagServiceInventory service_inventories/{id}/tag
		/// </summary>
		/// <param name="id">ID of the resource</param>
		/// <param name="requestBody">Tag attributes to add</param>
		public async Task TagServiceInventoryAsync(string id, Tag[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "service_inventories/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/tag";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Tags for ServiceInventory
		/// Returns an array of Tag objects
		/// ListServiceInventoryTags service_inventories/{id}/tags
		/// </summary>
		/// <param name="limit">The numbers of items to return per page.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.
		/// Minimum: 0
		// </param>
		/// <param name="filter">Filter for querying collections.</param>
		/// <param name="sort_by">The list of attribute and order to sort the result set by.</param>
		/// <param name="id">ID of the resource</param>
		/// <returns>Tags collection</returns>
		public async Task<TagsCollection> ListServiceInventoryTagsAsync(int limit, int offset, string filter, string sort_by, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "service_inventories/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/tags?limit="+limit+"&offset="+offset+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TagsCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Untag a ServiceInventory
		/// Untags a ServiceInventory object
		/// UntagServiceInventory service_inventories/{id}/untag
		/// </summary>
		/// <param name="id">ID of the resource</param>
		/// <param name="requestBody">Tag attributes to removed</param>
		public async Task UntagServiceInventoryAsync(string id, Tag[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "service_inventories/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/untag";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List ServiceOfferingNodes
		/// Returns an array of ServiceOfferingNode objects
		/// ListServiceOfferingNodes service_offering_nodes
		/// </summary>
		/// <param name="limit">The numbers of items to return per page.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.
		/// Minimum: 0
		// </param>
		/// <param name="filter">Filter for querying collections.</param>
		/// <param name="sort_by">The list of attribute and order to sort the result set by.</param>
		/// <returns>ServiceOfferingNodes collection</returns>
		public async Task<ServiceOfferingNodesCollection> ListServiceOfferingNodesAsync(int limit, int offset, string filter, string sort_by, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "service_offering_nodes?limit="+limit+"&offset="+offset+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceOfferingNodesCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show an existing ServiceOfferingNode
		/// Returns a ServiceOfferingNode object
		/// ShowServiceOfferingNode service_offering_nodes/{id}
		/// </summary>
		/// <param name="id">ID of the resource</param>
		/// <returns>ServiceOfferingNode info</returns>
		public async Task<ServiceOfferingNode> ShowServiceOfferingNodeAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "service_offering_nodes/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceOfferingNode>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List ServiceOfferings
		/// Returns an array of ServiceOffering objects
		/// ListServiceOfferings service_offerings
		/// </summary>
		/// <param name="limit">The numbers of items to return per page.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.
		/// Minimum: 0
		// </param>
		/// <param name="filter">Filter for querying collections.</param>
		/// <param name="sort_by">The list of attribute and order to sort the result set by.</param>
		/// <returns>ServiceOfferings collection</returns>
		public async Task<ServiceOfferingsCollection> ListServiceOfferingsAsync(int limit, int offset, string filter, string sort_by, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "service_offerings?limit="+limit+"&offset="+offset+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceOfferingsCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show an existing ServiceOffering
		/// Returns a ServiceOffering object
		/// ShowServiceOffering service_offerings/{id}
		/// </summary>
		/// <param name="id">ID of the resource</param>
		/// <returns>ServiceOffering info</returns>
		public async Task<ServiceOffering> ShowServiceOfferingAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "service_offerings/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceOffering>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Invokes computing of ServiceInventories tags for given ServiceOffering
		/// Returns an array of inventories tags
		/// AppliedInventoriesTagsForServiceOffering service_offerings/{id}/applied_inventories_tags
		/// </summary>
		/// <param name="id">ID of the resource</param>
		/// <param name="requestBody">Parameters defining input data for computing inventories</param>
		/// <returns>Returns an array of inventories tags for the computing result</returns>
		public async Task<Tag[]> AppliedInventoriesTagsForServiceOfferingAsync(string id, AppliedInventoriesParametersServicePlan requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "service_offerings/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/applied_inventories_tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Order an existing ServiceOffering
		/// Returns a Task id
		/// OrderServiceOffering service_offerings/{id}/order
		/// </summary>
		/// <param name="id">ID of the resource</param>
		/// <param name="requestBody">Order parameters defining the service and provider control</param>
		/// <returns>Returns a task ID for the order</returns>
		public async Task<OrderServiceOfferingReturn> OrderServiceOfferingAsync(string id, OrderParametersServiceOffering requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "service_offerings/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/order";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OrderServiceOfferingReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List ServiceInstances for ServiceOffering
		/// Returns an array of ServiceInstance objects
		/// ListServiceOfferingServiceInstances service_offerings/{id}/service_instances
		/// </summary>
		/// <param name="limit">The numbers of items to return per page.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.
		/// Minimum: 0
		// </param>
		/// <param name="filter">Filter for querying collections.</param>
		/// <param name="sort_by">The list of attribute and order to sort the result set by.</param>
		/// <param name="id">ID of the resource</param>
		/// <returns>ServiceInstances collection</returns>
		public async Task<ServiceInstancesCollection> ListServiceOfferingServiceInstancesAsync(int limit, int offset, string filter, string sort_by, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "service_offerings/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/service_instances?limit="+limit+"&offset="+offset+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceInstancesCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List ServiceOfferingNodes for ServiceOffering
		/// Returns an array of ServiceOfferingNode objects
		/// ListServiceOfferingServiceOfferingNodes service_offerings/{id}/service_offering_nodes
		/// </summary>
		/// <param name="limit">The numbers of items to return per page.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.
		/// Minimum: 0
		// </param>
		/// <param name="filter">Filter for querying collections.</param>
		/// <param name="sort_by">The list of attribute and order to sort the result set by.</param>
		/// <param name="id">ID of the resource</param>
		/// <returns>ServiceOfferingNodes collection</returns>
		public async Task<ServiceOfferingNodesCollection> ListServiceOfferingServiceOfferingNodesAsync(int limit, int offset, string filter, string sort_by, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "service_offerings/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/service_offering_nodes?limit="+limit+"&offset="+offset+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceOfferingNodesCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List ServicePlans for ServiceOffering
		/// Returns an array of ServicePlan objects
		/// ListServiceOfferingServicePlans service_offerings/{id}/service_plans
		/// </summary>
		/// <param name="limit">The numbers of items to return per page.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.
		/// Minimum: 0
		// </param>
		/// <param name="filter">Filter for querying collections.</param>
		/// <param name="sort_by">The list of attribute and order to sort the result set by.</param>
		/// <param name="id">ID of the resource</param>
		/// <returns>ServicePlans collection</returns>
		public async Task<ServicePlansCollection> ListServiceOfferingServicePlansAsync(int limit, int offset, string filter, string sort_by, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "service_offerings/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/service_plans?limit="+limit+"&offset="+offset+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServicePlansCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List ServicePlans
		/// Returns an array of ServicePlan objects
		/// ListServicePlans service_plans
		/// </summary>
		/// <param name="limit">The numbers of items to return per page.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.
		/// Minimum: 0
		// </param>
		/// <param name="filter">Filter for querying collections.</param>
		/// <param name="sort_by">The list of attribute and order to sort the result set by.</param>
		/// <returns>ServicePlans collection</returns>
		public async Task<ServicePlansCollection> ListServicePlansAsync(int limit, int offset, string filter, string sort_by, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "service_plans?limit="+limit+"&offset="+offset+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServicePlansCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show an existing ServicePlan
		/// Returns a ServicePlan object
		/// ShowServicePlan service_plans/{id}
		/// </summary>
		/// <param name="id">ID of the resource</param>
		/// <returns>ServicePlan info</returns>
		public async Task<ServicePlan> ShowServicePlanAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "service_plans/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServicePlan>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Sources
		/// Returns an array of Source objects
		/// ListSources sources
		/// </summary>
		/// <param name="limit">The numbers of items to return per page.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.
		/// Minimum: 0
		// </param>
		/// <param name="filter">Filter for querying collections.</param>
		/// <param name="sort_by">The list of attribute and order to sort the result set by.</param>
		/// <returns>Sources collection</returns>
		public async Task<SourcesCollection> ListSourcesAsync(int limit, int offset, string filter, string sort_by, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sources?limit="+limit+"&offset="+offset+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SourcesCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show an existing Source
		/// Returns a Source object
		/// ShowSource sources/{id}
		/// </summary>
		/// <param name="id">ID of the resource</param>
		/// <returns>Source info</returns>
		public async Task<Source> ShowSourceAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sources/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Source>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Incremental Refresh an existing Source
		/// Incremental Refresh a source object
		/// IncrementalRefreshSource sources/{id}/incremental_refresh
		/// </summary>
		/// <param name="id">ID of the resource</param>
		public async Task IncrementalRefreshSourceAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sources/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/incremental_refresh";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Refresh an existing Source
		/// Refresh a source object
		/// RefreshSource sources/{id}/refresh
		/// </summary>
		/// <param name="id">ID of the resource</param>
		public async Task RefreshSourceAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sources/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/refresh";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List ServiceInstances for Source
		/// Returns an array of ServiceInstance objects
		/// ListSourceServiceInstances sources/{id}/service_instances
		/// </summary>
		/// <param name="limit">The numbers of items to return per page.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.
		/// Minimum: 0
		// </param>
		/// <param name="filter">Filter for querying collections.</param>
		/// <param name="sort_by">The list of attribute and order to sort the result set by.</param>
		/// <param name="id">ID of the resource</param>
		/// <returns>ServiceInstances collection</returns>
		public async Task<ServiceInstancesCollection> ListSourceServiceInstancesAsync(int limit, int offset, string filter, string sort_by, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sources/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/service_instances?limit="+limit+"&offset="+offset+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceInstancesCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List ServiceInventories for Source
		/// Returns an array of ServiceInventory objects
		/// ListSourceServiceInventories sources/{id}/service_inventories
		/// </summary>
		/// <param name="limit">The numbers of items to return per page.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.
		/// Minimum: 0
		// </param>
		/// <param name="filter">Filter for querying collections.</param>
		/// <param name="sort_by">The list of attribute and order to sort the result set by.</param>
		/// <param name="id">ID of the resource</param>
		/// <returns>ServiceInventories collection</returns>
		public async Task<ServiceInventoriesCollection> ListSourceServiceInventoriesAsync(int limit, int offset, string filter, string sort_by, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sources/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/service_inventories?limit="+limit+"&offset="+offset+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceInventoriesCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List ServiceOfferingNodes for Source
		/// Returns an array of ServiceOfferingNode objects
		/// ListSourceServiceOfferingNodes sources/{id}/service_offering_nodes
		/// </summary>
		/// <param name="limit">The numbers of items to return per page.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.
		/// Minimum: 0
		// </param>
		/// <param name="filter">Filter for querying collections.</param>
		/// <param name="sort_by">The list of attribute and order to sort the result set by.</param>
		/// <param name="id">ID of the resource</param>
		/// <returns>ServiceOfferingNodes collection</returns>
		public async Task<ServiceOfferingNodesCollection> ListSourceServiceOfferingNodesAsync(int limit, int offset, string filter, string sort_by, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sources/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/service_offering_nodes?limit="+limit+"&offset="+offset+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceOfferingNodesCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List ServiceOfferings for Source
		/// Returns an array of ServiceOffering objects
		/// ListSourceServiceOfferings sources/{id}/service_offerings
		/// </summary>
		/// <param name="limit">The numbers of items to return per page.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.
		/// Minimum: 0
		// </param>
		/// <param name="filter">Filter for querying collections.</param>
		/// <param name="sort_by">The list of attribute and order to sort the result set by.</param>
		/// <param name="id">ID of the resource</param>
		/// <returns>ServiceOfferings collection</returns>
		public async Task<ServiceOfferingsCollection> ListSourceServiceOfferingsAsync(int limit, int offset, string filter, string sort_by, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sources/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/service_offerings?limit="+limit+"&offset="+offset+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceOfferingsCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List ServicePlans for Source
		/// Returns an array of ServicePlan objects
		/// ListSourceServicePlans sources/{id}/service_plans
		/// </summary>
		/// <param name="limit">The numbers of items to return per page.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.
		/// Minimum: 0
		// </param>
		/// <param name="filter">Filter for querying collections.</param>
		/// <param name="sort_by">The list of attribute and order to sort the result set by.</param>
		/// <param name="id">ID of the resource</param>
		/// <returns>ServicePlans collection</returns>
		public async Task<ServicePlansCollection> ListSourceServicePlansAsync(int limit, int offset, string filter, string sort_by, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sources/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/service_plans?limit="+limit+"&offset="+offset+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServicePlansCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Tasks for Source
		/// Returns an array of Task objects
		/// ListSourceTasks sources/{id}/tasks
		/// </summary>
		/// <param name="limit">The numbers of items to return per page.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.
		/// Minimum: 0
		// </param>
		/// <param name="filter">Filter for querying collections.</param>
		/// <param name="sort_by">The list of attribute and order to sort the result set by.</param>
		/// <param name="id">ID of the resource</param>
		/// <returns>Tasks collection</returns>
		public async Task<TasksCollection> ListSourceTasksAsync(int limit, int offset, string filter, string sort_by, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sources/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/tasks?limit="+limit+"&offset="+offset+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TasksCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Tags
		/// Returns an array of Tag objects
		/// ListTags tags
		/// </summary>
		/// <param name="limit">The numbers of items to return per page.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.
		/// Minimum: 0
		// </param>
		/// <param name="filter">Filter for querying collections.</param>
		/// <param name="sort_by">The list of attribute and order to sort the result set by.</param>
		/// <returns>Tags collection</returns>
		public async Task<TagsCollection> ListTagsAsync(int limit, int offset, string filter, string sort_by, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags?limit="+limit+"&offset="+offset+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TagsCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Tasks
		/// Returns an array of Task objects
		/// ListTasks tasks
		/// </summary>
		/// <param name="limit">The numbers of items to return per page.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.
		/// Minimum: 0
		// </param>
		/// <param name="filter">Filter for querying collections.</param>
		/// <param name="sort_by">The list of attribute and order to sort the result set by.</param>
		/// <returns>Tasks collection</returns>
		public async Task<TasksCollection> ListTasksAsync(int limit, int offset, string filter, string sort_by, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks?limit="+limit+"&offset="+offset+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TasksCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show an existing Task
		/// Returns a Task object
		/// ShowTask tasks/{id}
		/// </summary>
		/// <param name="id">UUID of task</param>
		/// <returns>Task info</returns>
		public async Task<Task_> ShowTaskAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Task_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an existing Task
		/// Updates a Task object
		/// UpdateTask tasks/{id}
		/// </summary>
		/// <param name="id">UUID of task</param>
		/// <param name="requestBody">Task attributes to update</param>
		public async Task UpdateTaskAsync(string id, Task_ requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class OrderServiceOfferingReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="task_id")]
		public string Task_id { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
