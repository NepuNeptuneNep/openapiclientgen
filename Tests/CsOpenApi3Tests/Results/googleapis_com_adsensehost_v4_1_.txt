//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Account
	{
		
		/// <summary>
		/// Unique identifier of this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Kind of resource this is, in this case adsensehost#account.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsensehost#account")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsensehost#account";
		
		/// <summary>
		/// Name of this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Approval status of this account. One of: PENDING, APPROVED, DISABLED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Accounts
	{
		
		/// <summary>
		/// ETag of this response for caching purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The accounts returned in this list response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Account[] Items { get; set; }
		
		/// <summary>
		/// Kind of list this is, in this case adsensehost#accounts.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsensehost#accounts")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsensehost#accounts";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdClient
	{
		
		/// <summary>
		/// Whether this ad client is opted in to ARC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arcOptIn")]
		public System.Nullable<System.Boolean> ArcOptIn { get; set; }
		
		/// <summary>
		/// Unique identifier of this ad client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Kind of resource this is, in this case adsensehost#adClient.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsensehost#adClient")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsensehost#adClient";
		
		/// <summary>
		/// This ad client's product code, which corresponds to the PRODUCT_CODE report dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productCode")]
		public string ProductCode { get; set; }
		
		/// <summary>
		/// Whether this ad client supports being reported on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportsReporting")]
		public System.Nullable<System.Boolean> SupportsReporting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdClients
	{
		
		/// <summary>
		/// ETag of this response for caching purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ad clients returned in this list response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public AdClient[] Items { get; set; }
		
		/// <summary>
		/// Kind of list this is, in this case adsensehost#adClients.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsensehost#adClients")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsensehost#adClients";
		
		/// <summary>
		/// Continuation token used to page through ad clients. To retrieve the next page of results, set the next request's "pageToken" value to this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdCode
	{
		
		/// <summary>
		/// The ad code snippet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adCode")]
		public string AdCode1 { get; set; }
		
		/// <summary>
		/// Kind this is, in this case adsensehost#adCode.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsensehost#adCode")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsensehost#adCode";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdStyle
	{
		
		/// <summary>
		/// The colors included in the style. These are represented as six hexadecimal characters, similar to HTML color codes, but without the leading hash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colors")]
		public AdStyleColors Colors { get; set; }
		
		/// <summary>
		/// The style of the corners in the ad (deprecated: never populated, ignored).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corners")]
		public string Corners { get; set; }
		
		/// <summary>
		/// The font which is included in the style.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="font")]
		public AdStyleFont Font { get; set; }
		
		/// <summary>
		/// Kind this is, in this case adsensehost#adStyle.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsensehost#adStyle")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsensehost#adStyle";
	}
	
	public class AdStyleColors
	{
		
		/// <summary>
		/// The color of the ad background.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="background")]
		public string Background { get; set; }
		
		/// <summary>
		/// The color of the ad border.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="border")]
		public string Border { get; set; }
		
		/// <summary>
		/// The color of the ad text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// The color of the ad title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The color of the ad url.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class AdStyleFont
	{
		
		/// <summary>
		/// The family of the font. Possible values are: ACCOUNT_DEFAULT_FAMILY, ADSENSE_DEFAULT_FAMILY, ARIAL, TIMES and VERDANA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family")]
		public string Family { get; set; }
		
		/// <summary>
		/// The size of the font. Possible values are: ACCOUNT_DEFAULT_SIZE, ADSENSE_DEFAULT_SIZE, SMALL, MEDIUM and LARGE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdUnit
	{
		
		/// <summary>
		/// Identity code of this ad unit, not necessarily unique across ad clients.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Settings specific to content ads (AFC) and highend mobile content ads (AFMC - deprecated).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentAdsSettings")]
		public AdUnitContentAdsSettings ContentAdsSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customStyle")]
		public AdStyle CustomStyle { get; set; }
		
		/// <summary>
		/// Unique identifier of this ad unit. This should be considered an opaque identifier; it is not safe to rely on it being in any particular format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Kind of resource this is, in this case adsensehost#adUnit.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsensehost#adUnit")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsensehost#adUnit";
		
		/// <summary>
		/// Settings specific to WAP mobile content ads (AFMC - deprecated).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileContentAdsSettings")]
		public AdUnitMobileContentAdsSettings MobileContentAdsSettings { get; set; }
		
		/// <summary>
		/// Name of this ad unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Status of this ad unit. Possible values are:
		///NEW: Indicates that the ad unit was created within the last seven days and does not yet have any activity associated with it.
		///
		///ACTIVE: Indicates that there has been activity on this ad unit in the last seven days.
		///
		///INACTIVE: Indicates that there has been no activity on this ad unit in the last seven days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	public class AdUnitContentAdsSettings
	{
		
		/// <summary>
		/// The backup option to be used in instances where no ad is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupOption")]
		public AdUnitContentAdsSettingsBackupOption BackupOption { get; set; }
		
		/// <summary>
		/// Size of this ad unit. Size values are in the form SIZE_{width}_{height}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// Type of this ad unit. Possible values are TEXT, TEXT_IMAGE, IMAGE and LINK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class AdUnitContentAdsSettingsBackupOption
	{
		
		/// <summary>
		/// Color to use when type is set to COLOR. These are represented as six hexadecimal characters, similar to HTML color codes, but without the leading hash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		/// <summary>
		/// Type of the backup option. Possible values are BLANK, COLOR and URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// URL to use when type is set to URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class AdUnitMobileContentAdsSettings
	{
		
		/// <summary>
		/// The markup language to use for this ad unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="markupLanguage")]
		public string MarkupLanguage { get; set; }
		
		/// <summary>
		/// The scripting language to use for this ad unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scriptingLanguage")]
		public string ScriptingLanguage { get; set; }
		
		/// <summary>
		/// Size of this ad unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// Type of this ad unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdUnits
	{
		
		/// <summary>
		/// ETag of this response for caching purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ad units returned in this list response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public AdUnit[] Items { get; set; }
		
		/// <summary>
		/// Kind of list this is, in this case adsensehost#adUnits.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsensehost#adUnits")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsensehost#adUnits";
		
		/// <summary>
		/// Continuation token used to page through ad units. To retrieve the next page of results, set the next request's "pageToken" value to this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociationSession
	{
		
		/// <summary>
		/// Hosted account id of the associated publisher after association. Present if status is ACCEPTED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Unique identifier of this association session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Kind of resource this is, in this case adsensehost#associationSession.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsensehost#associationSession")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsensehost#associationSession";
		
		/// <summary>
		/// The products to associate with the user. Options: AFC, AFG, AFV, AFS (deprecated), AFMC (deprecated)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productCodes")]
		public string[] ProductCodes { get; set; }
		
		/// <summary>
		/// Redirect URL of this association session. Used to redirect users into the AdSense association flow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirectUrl")]
		public string RedirectUrl { get; set; }
		
		/// <summary>
		/// Status of the completed association, available once the association callback token has been verified. One of ACCEPTED, REJECTED, or ERROR.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The preferred locale of the user themselves when going through the AdSense association flow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userLocale")]
		public string UserLocale { get; set; }
		
		/// <summary>
		/// The locale of the user's hosted website.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="websiteLocale")]
		public string WebsiteLocale { get; set; }
		
		/// <summary>
		/// The URL of the user's hosted website.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="websiteUrl")]
		public string WebsiteUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomChannel
	{
		
		/// <summary>
		/// Code of this custom channel, not necessarily unique across ad clients.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Unique identifier of this custom channel. This should be considered an opaque identifier; it is not safe to rely on it being in any particular format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Kind of resource this is, in this case adsensehost#customChannel.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsensehost#customChannel")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsensehost#customChannel";
		
		/// <summary>
		/// Name of this custom channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomChannels
	{
		
		/// <summary>
		/// ETag of this response for caching purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The custom channels returned in this list response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public CustomChannel[] Items { get; set; }
		
		/// <summary>
		/// Kind of list this is, in this case adsensehost#customChannels.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsensehost#customChannels")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsensehost#customChannels";
		
		/// <summary>
		/// Continuation token used to page through custom channels. To retrieve the next page of results, set the next request's "pageToken" value to this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Report
	{
		
		/// <summary>
		/// The averages of the report. This is the same length as any other row in the report; cells corresponding to dimension columns are empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="averages")]
		public string[] Averages { get; set; }
		
		/// <summary>
		/// The header information of the columns requested in the report. This is a list of headers; one for each dimension in the request, followed by one for each metric in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public ReportHeaders[] ReportHeaders { get; set; }
		
		/// <summary>
		/// Kind this is, in this case adsensehost#report.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsensehost#report")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsensehost#report";
		
		/// <summary>
		/// The output rows of the report. Each row is a list of cells; one for each dimension in the request, followed by one for each metric in the request. The dimension cells contain strings, and the metric cells contain numbers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public string[] Rows { get; set; }
		
		/// <summary>
		/// The total number of rows matched by the report request. Fewer rows may be returned in the response due to being limited by the row count requested or the report row limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalMatchedRows")]
		public string TotalMatchedRows { get; set; }
		
		/// <summary>
		/// The totals of the report. This is the same length as any other row in the report; cells corresponding to dimension columns are empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totals")]
		public string[] Totals { get; set; }
		
		/// <summary>
		/// Any warnings associated with generation of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public string[] Warnings { get; set; }
	}
	
	public class ReportHeaders
	{
		
		/// <summary>
		/// The currency of this column. Only present if the header type is METRIC_CURRENCY.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// The name of the header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of the header; one of DIMENSION, METRIC_TALLY, METRIC_RATIO, or METRIC_CURRENCY.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UrlChannel
	{
		
		/// <summary>
		/// Unique identifier of this URL channel. This should be considered an opaque identifier; it is not safe to rely on it being in any particular format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Kind of resource this is, in this case adsensehost#urlChannel.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsensehost#urlChannel")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsensehost#urlChannel";
		
		/// <summary>
		/// URL Pattern of this URL channel. Does not include "http://" or "https://". Example: www.example.com/home
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPattern")]
		public string UrlPattern { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UrlChannels
	{
		
		/// <summary>
		/// ETag of this response for caching purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The URL channels returned in this list response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public UrlChannel[] Items { get; set; }
		
		/// <summary>
		/// Kind of list this is, in this case adsensehost#urlChannels.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsensehost#urlChannels")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsensehost#urlChannels";
		
		/// <summary>
		/// Continuation token used to page through URL channels. To retrieve the next page of results, set the next request's "pageToken" value to this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List hosted accounts associated with this AdSense account by ad client id.
		/// Adsensehost_accounts_list accounts
		/// </summary>
		/// <param name="filterAdClientId">Ad clients to list accounts for.</param>
		/// <returns>Successful response</returns>
		public async Task<Accounts> Adsensehost_accounts_listAsync(string[] filterAdClientId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts?"+string.Join("&", filterAdClientId.Select(z => $"filterAdClientId={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Accounts>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get information about the selected associated AdSense account.
		/// Adsensehost_accounts_get accounts/{accountId}
		/// </summary>
		/// <param name="accountId">Account to get information about.</param>
		/// <returns>Successful response</returns>
		public async Task<Account> Adsensehost_accounts_getAsync(string accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Account>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all hosted ad clients in the specified hosted account.
		/// Adsensehost_accounts_adclients_list accounts/{accountId}/adclients
		/// </summary>
		/// <param name="accountId">Account for which to list ad clients.</param>
		/// <param name="maxResults">The maximum number of ad clients to include in the response, used for paging.
		/// Minimum: 0
		/// Maximum: 10000
		// </param>
		/// <param name="pageToken">A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<AdClients> Adsensehost_accounts_adclients_listAsync(string accountId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/adclients&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdClients>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get information about one of the ad clients in the specified publisher's AdSense account.
		/// Adsensehost_accounts_adclients_get accounts/{accountId}/adclients/{adClientId}
		/// </summary>
		/// <param name="accountId">Account which contains the ad client.</param>
		/// <param name="adClientId">Ad client to get.</param>
		/// <returns>Successful response</returns>
		public async Task<AdClient> Adsensehost_accounts_adclients_getAsync(string accountId, string adClientId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdClient>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all ad units in the specified publisher's AdSense account.
		/// Adsensehost_accounts_adunits_list accounts/{accountId}/adclients/{adClientId}/adunits
		/// </summary>
		/// <param name="accountId">Account which contains the ad client.</param>
		/// <param name="adClientId">Ad client for which to list ad units.</param>
		/// <param name="includeInactive">Whether to include inactive ad units. Default: true.</param>
		/// <param name="maxResults">The maximum number of ad units to include in the response, used for paging.
		/// Minimum: 0
		/// Maximum: 10000
		// </param>
		/// <param name="pageToken">A continuation token, used to page through ad units. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<AdUnits> Adsensehost_accounts_adunits_listAsync(string accountId, string adClientId, bool includeInactive, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId))+"/adunits&includeInactive="+includeInactive+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdUnits>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the supplied ad unit in the specified publisher AdSense account. This method supports patch semantics.
		/// Adsensehost_accounts_adunits_patch accounts/{accountId}/adclients/{adClientId}/adunits
		/// </summary>
		/// <param name="accountId">Account which contains the ad client.</param>
		/// <param name="adClientId">Ad client which contains the ad unit.</param>
		/// <param name="adUnitId">Ad unit to get.</param>
		/// <returns>Successful response</returns>
		public async Task<AdUnit> Adsensehost_accounts_adunits_patchAsync(string accountId, string adClientId, string adUnitId, AdUnit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId))+"/adunits&adUnitId=" + (adUnitId==null? "" : System.Uri.EscapeDataString(adUnitId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdUnit>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert the supplied ad unit into the specified publisher AdSense account.
		/// Adsensehost_accounts_adunits_insert accounts/{accountId}/adclients/{adClientId}/adunits
		/// </summary>
		/// <param name="accountId">Account which will contain the ad unit.</param>
		/// <param name="adClientId">Ad client into which to insert the ad unit.</param>
		/// <returns>Successful response</returns>
		public async Task<AdUnit> Adsensehost_accounts_adunits_insertAsync(string accountId, string adClientId, AdUnit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId))+"/adunits";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdUnit>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the supplied ad unit in the specified publisher AdSense account.
		/// Adsensehost_accounts_adunits_update accounts/{accountId}/adclients/{adClientId}/adunits
		/// </summary>
		/// <param name="accountId">Account which contains the ad client.</param>
		/// <param name="adClientId">Ad client which contains the ad unit.</param>
		/// <returns>Successful response</returns>
		public async Task<AdUnit> Adsensehost_accounts_adunits_updateAsync(string accountId, string adClientId, AdUnit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId))+"/adunits";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdUnit>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete the specified ad unit from the specified publisher AdSense account.
		/// Adsensehost_accounts_adunits_delete accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}
		/// </summary>
		/// <param name="accountId">Account which contains the ad unit.</param>
		/// <param name="adClientId">Ad client for which to get ad unit.</param>
		/// <param name="adUnitId">Ad unit to delete.</param>
		/// <returns>Successful response</returns>
		public async Task<AdUnit> Adsensehost_accounts_adunits_deleteAsync(string accountId, string adClientId, string adUnitId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId))+"/adunits/"+ (adUnitId==null? "" : System.Uri.EscapeDataString(adUnitId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdUnit>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the specified host ad unit in this AdSense account.
		/// Adsensehost_accounts_adunits_get accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}
		/// </summary>
		/// <param name="accountId">Account which contains the ad unit.</param>
		/// <param name="adClientId">Ad client for which to get ad unit.</param>
		/// <param name="adUnitId">Ad unit to get.</param>
		/// <returns>Successful response</returns>
		public async Task<AdUnit> Adsensehost_accounts_adunits_getAsync(string accountId, string adClientId, string adUnitId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId))+"/adunits/"+ (adUnitId==null? "" : System.Uri.EscapeDataString(adUnitId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdUnit>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get ad code for the specified ad unit, attaching the specified host custom channels.
		/// Adsensehost_accounts_adunits_getAdCode accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}/adcode
		/// </summary>
		/// <param name="accountId">Account which contains the ad client.</param>
		/// <param name="adClientId">Ad client with contains the ad unit.</param>
		/// <param name="adUnitId">Ad unit to get the code for.</param>
		/// <param name="hostCustomChannelId">Host custom channel to attach to the ad code.</param>
		/// <returns>Successful response</returns>
		public async Task<AdCode> Adsensehost_accounts_adunits_getAdCodeAsync(string accountId, string adClientId, string adUnitId, string[] hostCustomChannelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId))+"/adunits/"+ (adUnitId==null? "" : System.Uri.EscapeDataString(adUnitId))+"/adcode&"+string.Join("&", hostCustomChannelId.Select(z => $"hostCustomChannelId={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdCode>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify "alt=csv" as a query parameter.
		/// Adsensehost_accounts_reports_generate accounts/{accountId}/reports
		/// </summary>
		/// <param name="accountId">Hosted account upon which to report.</param>
		/// <param name="startDate">Start of the date range to report on in "YYYY-MM-DD" format, inclusive.</param>
		/// <param name="endDate">End of the date range to report on in "YYYY-MM-DD" format, inclusive.</param>
		/// <param name="dimension">Dimensions to base the report on.</param>
		/// <param name="filter">Filters to be run on the report.</param>
		/// <param name="locale">Optional locale to use for translating report output to a local language. Defaults to "en_US" if not specified.</param>
		/// <param name="maxResults">The maximum number of rows of report data to return.
		/// Minimum: 0
		/// Maximum: 50000
		// </param>
		/// <param name="metric">Numeric columns to include in the report.</param>
		/// <param name="sort">The name of a dimension or metric to sort the resulting report on, optionally prefixed with "+" to sort ascending or "-" to sort descending. If no prefix is specified, the column is sorted ascending.</param>
		/// <param name="startIndex">Index of the first row of report data to return.
		/// Minimum: 0
		/// Maximum: 5000
		// </param>
		/// <returns>Successful response</returns>
		public async Task<Report> Adsensehost_accounts_reports_generateAsync(string accountId, string startDate, string endDate, string[] dimension, string[] filter, string locale, int maxResults, string[] metric, string[] sort, int startIndex, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/reports&startDate=" + (startDate==null? "" : System.Uri.EscapeDataString(startDate))+"&endDate=" + (endDate==null? "" : System.Uri.EscapeDataString(endDate))+"&"+string.Join("&", dimension.Select(z => $"dimension={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", filter.Select(z => $"filter={System.Uri.EscapeDataString(z.ToString())}"))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale))+"&maxResults="+maxResults+"&"+string.Join("&", metric.Select(z => $"metric={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", sort.Select(z => $"sort={System.Uri.EscapeDataString(z.ToString())}"))+"&startIndex="+startIndex;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Report>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all host ad clients in this AdSense account.
		/// Adsensehost_adclients_list adclients
		/// </summary>
		/// <param name="maxResults">The maximum number of ad clients to include in the response, used for paging.
		/// Minimum: 0
		/// Maximum: 10000
		// </param>
		/// <param name="pageToken">A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<AdClients> Adsensehost_adclients_listAsync(int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "adclients?maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdClients>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get information about one of the ad clients in the Host AdSense account.
		/// Adsensehost_adclients_get adclients/{adClientId}
		/// </summary>
		/// <param name="adClientId">Ad client to get.</param>
		/// <returns>Successful response</returns>
		public async Task<AdClient> Adsensehost_adclients_getAsync(string adClientId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdClient>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all host custom channels in this AdSense account.
		/// Adsensehost_customchannels_list adclients/{adClientId}/customchannels
		/// </summary>
		/// <param name="adClientId">Ad client for which to list custom channels.</param>
		/// <param name="maxResults">The maximum number of custom channels to include in the response, used for paging.
		/// Minimum: 0
		/// Maximum: 10000
		// </param>
		/// <param name="pageToken">A continuation token, used to page through custom channels. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomChannels> Adsensehost_customchannels_listAsync(string adClientId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId))+"/customchannels&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomChannels>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a custom channel in the host AdSense account. This method supports patch semantics.
		/// Adsensehost_customchannels_patch adclients/{adClientId}/customchannels
		/// </summary>
		/// <param name="adClientId">Ad client in which the custom channel will be updated.</param>
		/// <param name="customChannelId">Custom channel to get.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomChannel> Adsensehost_customchannels_patchAsync(string adClientId, string customChannelId, CustomChannel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId))+"/customchannels&customChannelId=" + (customChannelId==null? "" : System.Uri.EscapeDataString(customChannelId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomChannel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a new custom channel to the host AdSense account.
		/// Adsensehost_customchannels_insert adclients/{adClientId}/customchannels
		/// </summary>
		/// <param name="adClientId">Ad client to which the new custom channel will be added.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomChannel> Adsensehost_customchannels_insertAsync(string adClientId, CustomChannel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId))+"/customchannels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomChannel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a custom channel in the host AdSense account.
		/// Adsensehost_customchannels_update adclients/{adClientId}/customchannels
		/// </summary>
		/// <param name="adClientId">Ad client in which the custom channel will be updated.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomChannel> Adsensehost_customchannels_updateAsync(string adClientId, CustomChannel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId))+"/customchannels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomChannel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a specific custom channel from the host AdSense account.
		/// Adsensehost_customchannels_delete adclients/{adClientId}/customchannels/{customChannelId}
		/// </summary>
		/// <param name="adClientId">Ad client from which to delete the custom channel.</param>
		/// <param name="customChannelId">Custom channel to delete.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomChannel> Adsensehost_customchannels_deleteAsync(string adClientId, string customChannelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId))+"/customchannels/"+ (customChannelId==null? "" : System.Uri.EscapeDataString(customChannelId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomChannel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific custom channel from the host AdSense account.
		/// Adsensehost_customchannels_get adclients/{adClientId}/customchannels/{customChannelId}
		/// </summary>
		/// <param name="adClientId">Ad client from which to get the custom channel.</param>
		/// <param name="customChannelId">Custom channel to get.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomChannel> Adsensehost_customchannels_getAsync(string adClientId, string customChannelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId))+"/customchannels/"+ (customChannelId==null? "" : System.Uri.EscapeDataString(customChannelId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomChannel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all host URL channels in the host AdSense account.
		/// Adsensehost_urlchannels_list adclients/{adClientId}/urlchannels
		/// </summary>
		/// <param name="adClientId">Ad client for which to list URL channels.</param>
		/// <param name="maxResults">The maximum number of URL channels to include in the response, used for paging.
		/// Minimum: 0
		/// Maximum: 10000
		// </param>
		/// <param name="pageToken">A continuation token, used to page through URL channels. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<UrlChannels> Adsensehost_urlchannels_listAsync(string adClientId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId))+"/urlchannels&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UrlChannels>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a new URL channel to the host AdSense account.
		/// Adsensehost_urlchannels_insert adclients/{adClientId}/urlchannels
		/// </summary>
		/// <param name="adClientId">Ad client to which the new URL channel will be added.</param>
		/// <returns>Successful response</returns>
		public async Task<UrlChannel> Adsensehost_urlchannels_insertAsync(string adClientId, UrlChannel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId))+"/urlchannels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UrlChannel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a URL channel from the host AdSense account.
		/// Adsensehost_urlchannels_delete adclients/{adClientId}/urlchannels/{urlChannelId}
		/// </summary>
		/// <param name="adClientId">Ad client from which to delete the URL channel.</param>
		/// <param name="urlChannelId">URL channel to delete.</param>
		/// <returns>Successful response</returns>
		public async Task<UrlChannel> Adsensehost_urlchannels_deleteAsync(string adClientId, string urlChannelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId))+"/urlchannels/"+ (urlChannelId==null? "" : System.Uri.EscapeDataString(urlChannelId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UrlChannel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an association session for initiating an association with an AdSense user.
		/// Adsensehost_associationsessions_start associationsessions/start
		/// </summary>
		/// <param name="productCode">Products to associate with the user.</param>
		/// <param name="websiteUrl">The URL of the user's hosted website.</param>
		/// <param name="callbackUrl">The URL to redirect the user to once association is completed. It receives a token parameter that can then be used to retrieve the associated account.</param>
		/// <param name="userLocale">The preferred locale of the user.</param>
		/// <param name="websiteLocale">The locale of the user's hosted website.</param>
		/// <returns>Successful response</returns>
		public async Task<AssociationSession> Adsensehost_associationsessions_startAsync(string[] productCode, string websiteUrl, string callbackUrl, string userLocale, string websiteLocale, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "associationsessions/start?"+string.Join("&", productCode.Select(z => $"productCode={System.Uri.EscapeDataString(z.ToString())}"))+"&websiteUrl=" + (websiteUrl==null? "" : System.Uri.EscapeDataString(websiteUrl))+"&callbackUrl=" + (callbackUrl==null? "" : System.Uri.EscapeDataString(callbackUrl))+"&userLocale=" + (userLocale==null? "" : System.Uri.EscapeDataString(userLocale))+"&websiteLocale=" + (websiteLocale==null? "" : System.Uri.EscapeDataString(websiteLocale));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AssociationSession>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Verify an association session after the association callback returns from AdSense signup.
		/// Adsensehost_associationsessions_verify associationsessions/verify
		/// </summary>
		/// <param name="token">The token returned to the association callback URL.</param>
		/// <returns>Successful response</returns>
		public async Task<AssociationSession> Adsensehost_associationsessions_verifyAsync(string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "associationsessions/verify?token=" + (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AssociationSession>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify "alt=csv" as a query parameter.
		/// Adsensehost_reports_generate reports
		/// </summary>
		/// <param name="startDate">Start of the date range to report on in "YYYY-MM-DD" format, inclusive.</param>
		/// <param name="endDate">End of the date range to report on in "YYYY-MM-DD" format, inclusive.</param>
		/// <param name="dimension">Dimensions to base the report on.</param>
		/// <param name="filter">Filters to be run on the report.</param>
		/// <param name="locale">Optional locale to use for translating report output to a local language. Defaults to "en_US" if not specified.</param>
		/// <param name="maxResults">The maximum number of rows of report data to return.
		/// Minimum: 0
		/// Maximum: 50000
		// </param>
		/// <param name="metric">Numeric columns to include in the report.</param>
		/// <param name="sort">The name of a dimension or metric to sort the resulting report on, optionally prefixed with "+" to sort ascending or "-" to sort descending. If no prefix is specified, the column is sorted ascending.</param>
		/// <param name="startIndex">Index of the first row of report data to return.
		/// Minimum: 0
		/// Maximum: 5000
		// </param>
		/// <returns>Successful response</returns>
		public async Task<Report> Adsensehost_reports_generateAsync(string startDate, string endDate, string[] dimension, string[] filter, string locale, int maxResults, string[] metric, string[] sort, int startIndex, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports?startDate=" + (startDate==null? "" : System.Uri.EscapeDataString(startDate))+"&endDate=" + (endDate==null? "" : System.Uri.EscapeDataString(endDate))+"&"+string.Join("&", dimension.Select(z => $"dimension={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", filter.Select(z => $"filter={System.Uri.EscapeDataString(z.ToString())}"))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale))+"&maxResults="+maxResults+"&"+string.Join("&", metric.Select(z => $"metric={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", sort.Select(z => $"sort={System.Uri.EscapeDataString(z.ToString())}"))+"&startIndex="+startIndex;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Report>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
