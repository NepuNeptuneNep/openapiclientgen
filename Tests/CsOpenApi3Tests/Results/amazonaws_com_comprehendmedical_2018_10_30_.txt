//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeEntitiesDetectionV2JobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ComprehendMedicalAsyncJobProperties ComprehendMedicalAsyncJobProperties { get; set; }
	}
	
	/// <summary>
	/// Provides information about a detection job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComprehendMedicalAsyncJobProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ExpirationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDataConfig InputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputDataConfig OutputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ManifestFilePath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KMSKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum JobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTIAL_SUCCESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOP_REQUESTED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 6,
	}
	
	/// <summary>
	/// The input properties for an entities detection job. This includes the name of the S3 bucket and the path to the files to be analyzed. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputDataConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3Key { get; set; }
	}
	
	/// <summary>
	/// The output properties for a detection job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OutputDataConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3Key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeEntitiesDetectionV2JobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TooManyRequestsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeICD10CMInferenceJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ComprehendMedicalAsyncJobProperties ComprehendMedicalAsyncJobProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeICD10CMInferenceJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribePHIDetectionJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ComprehendMedicalAsyncJobProperties ComprehendMedicalAsyncJobProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribePHIDetectionJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeRxNormInferenceJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ComprehendMedicalAsyncJobProperties ComprehendMedicalAsyncJobProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeRxNormInferenceJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeSNOMEDCTInferenceJobResponse
	{
		
		/// <summary>
		/// Provides information about a detection job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ComprehendMedicalAsyncJobProperties ComprehendMedicalAsyncJobProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeSNOMEDCTInferenceJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectEntitiesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Entity[] Entities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UnmappedAttribute[] UnmappedAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PaginationToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelVersion { get; set; }
	}
	
	/// <summary>
	///  Provides information about an extracted medical entity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Entity
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BeginOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EndOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Score { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EntityType Category { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EntitySubType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Trait[] Traits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Attribute[] Attributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EntityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDICATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDICAL_CONDITION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROTECTED_HEALTH_INFORMATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_TREATMENT_PROCEDURE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANATOMY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_EXPRESSION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BEHAVIORAL_ENVIRONMENTAL_SOCIAL = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EntitySubType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DX_NAME = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOSAGE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROUTE_OR_MODE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORM = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FREQUENCY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DURATION = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERIC_NAME = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRAND_NAME = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RATE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACUITY = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_NAME = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_VALUE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_UNITS = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_UNIT = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCEDURE_NAME = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TREATMENT_NAME = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGE = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACT_POINT = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHONE_OR_FAX = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDENTIFIER = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ID = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		URL = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADDRESS = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROFESSION = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM_ORGAN_SITE = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIRECTION = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUALITY = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUANTITY = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_EXPRESSION = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_TO_MEDICATION_NAME = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_TO_DX_NAME = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_TO_TEST_NAME = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_TO_PROCEDURE_NAME = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_TO_TREATMENT_NAME = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMOUNT = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENDER = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RACE_ETHNICITY = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLERGIES = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOBACCO_USE = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALCOHOL_CONSUMPTION = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REC_DRUG_USE = 44,
	}
	
	/// <summary>
	///  Provides contextual information about the extracted entity. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Trait
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Score { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AttributeName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYMPTOM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIAGNOSIS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEGATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERTAINS_TO_FAMILY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HYPOTHETICAL = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW_CONFIDENCE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAST_HISTORY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FUTURE = 8,
	}
	
	/// <summary>
	///  An extracted segment of the text that is an attribute of an entity, or otherwise related to an entity, such as the dosage of a medication taken. It contains information about the attribute such as id, begin and end offset within the input text, and the segment of the input text. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Attribute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EntitySubType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Score { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float RelationshipScore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RelationshipType RelationshipType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BeginOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EndOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EntityType Category { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Trait[] Traits { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RelationshipType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVERY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WITH_DOSAGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMINISTERED_VIA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEGATIVE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OVERLAP = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOSAGE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROUTE_OR_MODE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORM = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FREQUENCY = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DURATION = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RATE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACUITY = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_VALUE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_UNITS = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_UNIT = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIRECTION = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM_ORGAN_SITE = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMOUNT = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USAGE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUALITY = 21,
	}
	
	/// <summary>
	/// An attribute that was extracted, but Amazon Comprehend Medical was unable to relate to an entity. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnmappedAttribute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EntityType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Attribute Attribute { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectEntitiesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceUnavailableException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidEncodingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TextSizeLimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectEntitiesV2Response
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Entity[] Entities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UnmappedAttribute[] UnmappedAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PaginationToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectEntitiesV2Request
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectPHIResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Entity[] Entities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PaginationToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectPHIRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InferICD10CMResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ICD10CMEntity[] Entities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PaginationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelVersion { get; set; }
	}
	
	/// <summary>
	/// The collection of medical entities extracted from the input text and their associated information. For each entity, the response provides the entity text, the entity category, where the entity text begins and ends, and the level of confidence that Amazon Comprehend Medical has in the detection and analysis. Attributes and traits of the entity are also returned. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ICD10CMEntity
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ICD10CMEntityCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ICD10CMEntityType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Score { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BeginOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EndOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ICD10CMAttribute[] Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ICD10CMTrait[] Traits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ICD10CMConcept[] ICD10CMConcepts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ICD10CMEntityCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDICAL_CONDITION = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ICD10CMEntityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DX_NAME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_EXPRESSION = 1,
	}
	
	/// <summary>
	/// The detected attributes that relate to an entity. This includes an extracted segment of the text that is an attribute of an entity, or otherwise related to an entity. InferICD10CM detects the following attributes: <code>Direction</code>, <code>System, Organ or Site</code>, and <code>Acuity</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ICD10CMAttribute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ICD10CMAttributeType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Score { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float RelationshipScore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BeginOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EndOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ICD10CMTrait[] Traits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ICD10CMEntityType Category { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ICD10CMRelationshipType RelationshipType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ICD10CMAttributeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACUITY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIRECTION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM_ORGAN_SITE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUALITY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUANTITY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_TO_DX_NAME = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_EXPRESSION = 6,
	}
	
	/// <summary>
	/// Contextual information for the entity. The traits recognized by InferICD10CM are <code>DIAGNOSIS</code>, <code>SIGN</code>, <code>SYMPTOM</code>, and <code>NEGATION</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ICD10CMTrait
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ICD10CMTraitName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Score { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ICD10CMTraitName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEGATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIAGNOSIS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYMPTOM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERTAINS_TO_FAMILY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HYPOTHETICAL = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW_CONFIDENCE = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ICD10CMRelationshipType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OVERLAP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM_ORGAN_SITE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUALITY = 2,
	}
	
	/// <summary>
	///  The ICD-10-CM concepts that the entity could refer to, along with a score indicating the likelihood of the match.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ICD10CMConcept
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Score { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InferICD10CMRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InferRxNormResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RxNormEntity[] Entities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PaginationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelVersion { get; set; }
	}
	
	/// <summary>
	/// The collection of medical entities extracted from the input text and their associated information. For each entity, the response provides the entity text, the entity category, where the entity text begins and ends, and the level of confidence that Amazon Comprehend Medical has in the detection and analysis. Attributes and traits of the entity are also returned. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RxNormEntity
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RxNormEntityCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RxNormEntityType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Score { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BeginOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EndOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RxNormAttribute[] Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RxNormTrait[] Traits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RxNormConcept[] RxNormConcepts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RxNormEntityCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDICATION = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RxNormEntityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRAND_NAME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERIC_NAME = 1,
	}
	
	/// <summary>
	/// The extracted attributes that relate to this entity. The attributes recognized by InferRxNorm are <code>DOSAGE</code>, <code>DURATION</code>, <code>FORM</code>, <code>FREQUENCY</code>, <code>RATE</code>, <code>ROUTE_OR_MODE</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RxNormAttribute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RxNormAttributeType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Score { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float RelationshipScore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BeginOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EndOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RxNormTrait[] Traits { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RxNormAttributeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOSAGE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DURATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FREQUENCY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RATE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROUTE_OR_MODE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH = 6,
	}
	
	/// <summary>
	/// The contextual information for the entity. InferRxNorm recognizes the trait <code>NEGATION</code>, which is any indication that the patient is not taking a medication. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RxNormTrait
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RxNormTraitName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Score { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RxNormTraitName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEGATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAST_HISTORY = 1,
	}
	
	/// <summary>
	/// The RxNorm concept that the entity could refer to, along with a score indicating the likelihood of the match.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RxNormConcept
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Score { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InferRxNormRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InferSNOMEDCTResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SNOMEDCTEntity[] Entities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PaginationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SNOMEDCTDetails SNOMEDCTDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Characters Characters { get; set; }
	}
	
	/// <summary>
	///  The collection of medical entities extracted from the input text and their associated information. For each entity, the response provides the entity text, the entity category, where the entity text begins and ends, and the level of confidence that Amazon Comprehend Medical has in the detection and analysis. Attributes and traits of the entity are also returned. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SNOMEDCTEntity
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SNOMEDCTEntityCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SNOMEDCTEntityType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Score { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BeginOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EndOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SNOMEDCTAttribute[] Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SNOMEDCTTrait[] Traits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SNOMEDCTConcept[] SNOMEDCTConcepts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SNOMEDCTEntityCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDICAL_CONDITION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANATOMY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_TREATMENT_PROCEDURE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SNOMEDCTEntityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DX_NAME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_NAME = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCEDURE_NAME = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TREATMENT_NAME = 3,
	}
	
	/// <summary>
	///  The extracted attributes that relate to an entity. An extracted segment of the text that is an attribute of an entity, or otherwise related to an entity, such as the dosage of a medication taken. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SNOMEDCTAttribute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SNOMEDCTEntityCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SNOMEDCTAttributeType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Score { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float RelationshipScore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SNOMEDCTRelationshipType RelationshipType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BeginOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EndOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SNOMEDCTTrait[] Traits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SNOMEDCTConcept[] SNOMEDCTConcepts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SNOMEDCTAttributeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACUITY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUALITY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIRECTION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM_ORGAN_SITE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_VALUE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_UNIT = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SNOMEDCTRelationshipType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACUITY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUALITY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_VALUE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_UNITS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIRECTION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM_ORGAN_SITE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_UNIT = 6,
	}
	
	/// <summary>
	///  Contextual information for an entity. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SNOMEDCTTrait
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SNOMEDCTTraitName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Score { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SNOMEDCTTraitName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEGATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIAGNOSIS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYMPTOM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERTAINS_TO_FAMILY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HYPOTHETICAL = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW_CONFIDENCE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAST_HISTORY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FUTURE = 8,
	}
	
	/// <summary>
	///  The SNOMED-CT concepts that the entity could refer to, along with a score indicating the likelihood of the match. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SNOMEDCTConcept
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Score { get; set; }
	}
	
	/// <summary>
	///  The information about the revision of the SNOMED-CT ontology in the response. Specifically, the details include the SNOMED-CT edition, language, and version date. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SNOMEDCTDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Edition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Language { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VersionDate { get; set; }
	}
	
	/// <summary>
	///  The number of characters in the input text to be analyzed. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Characters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> OriginalTextCharacters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InferSNOMEDCTRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEntitiesDetectionV2JobsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ComprehendMedicalAsyncJobProperties[] ComprehendMedicalAsyncJobPropertiesList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEntitiesDetectionV2JobsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ComprehendMedicalAsyncJobFilter Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// Provides information for filtering a list of detection jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComprehendMedicalAsyncJobFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTimeAfter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListICD10CMInferenceJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ComprehendMedicalAsyncJobProperties[] ComprehendMedicalAsyncJobPropertiesList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListICD10CMInferenceJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ComprehendMedicalAsyncJobFilter Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPHIDetectionJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ComprehendMedicalAsyncJobProperties[] ComprehendMedicalAsyncJobPropertiesList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPHIDetectionJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ComprehendMedicalAsyncJobFilter Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRxNormInferenceJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ComprehendMedicalAsyncJobProperties[] ComprehendMedicalAsyncJobPropertiesList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRxNormInferenceJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ComprehendMedicalAsyncJobFilter Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSNOMEDCTInferenceJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ComprehendMedicalAsyncJobProperties[] ComprehendMedicalAsyncJobPropertiesList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSNOMEDCTInferenceJobsRequest
	{
		
		/// <summary>
		/// Provides information for filtering a list of detection jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ComprehendMedicalAsyncJobFilter Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartEntitiesDetectionV2JobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartEntitiesDetectionV2JobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InputDataConfig InputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputDataConfig OutputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KMSKey { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartICD10CMInferenceJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartICD10CMInferenceJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InputDataConfig InputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputDataConfig OutputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KMSKey { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartPHIDetectionJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartPHIDetectionJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InputDataConfig InputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputDataConfig OutputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KMSKey { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartRxNormInferenceJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartRxNormInferenceJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InputDataConfig InputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputDataConfig OutputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KMSKey { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartSNOMEDCTInferenceJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartSNOMEDCTInferenceJobRequest
	{
		
		/// <summary>
		/// The input properties for an entities detection job. This includes the name of the S3 bucket and the path to the files to be analyzed. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InputDataConfig InputDataConfig { get; set; }
		
		/// <summary>
		/// The output properties for a detection job.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputDataConfig OutputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KMSKey { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopEntitiesDetectionV2JobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopEntitiesDetectionV2JobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopICD10CMInferenceJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopICD10CMInferenceJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopPHIDetectionJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopPHIDetectionJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopRxNormInferenceJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopRxNormInferenceJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopSNOMEDCTInferenceJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopSNOMEDCTInferenceJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets the properties associated with a medical entities detection job. Use this operation to get the status of a detection job.
		/// DescribeEntitiesDetectionV2Job #X-Amz-Target=ComprehendMedical_20181030.DescribeEntitiesDetectionV2Job
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeEntitiesDetectionV2JobResponse> DescribeEntitiesDetectionV2JobAsync(DescribeEntitiesDetectionV2JobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=ComprehendMedical_20181030.DescribeEntitiesDetectionV2Job";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeEntitiesDetectionV2JobResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the properties associated with an InferICD10CM job. Use this operation to get the status of an inference job.
		/// DescribeICD10CMInferenceJob #X-Amz-Target=ComprehendMedical_20181030.DescribeICD10CMInferenceJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeICD10CMInferenceJobResponse> DescribeICD10CMInferenceJobAsync(DescribeICD10CMInferenceJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=ComprehendMedical_20181030.DescribeICD10CMInferenceJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeICD10CMInferenceJobResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the properties associated with a protected health information (PHI) detection job. Use this operation to get the status of a detection job.
		/// DescribePHIDetectionJob #X-Amz-Target=ComprehendMedical_20181030.DescribePHIDetectionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribePHIDetectionJobResponse> DescribePHIDetectionJobAsync(DescribePHIDetectionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=ComprehendMedical_20181030.DescribePHIDetectionJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribePHIDetectionJobResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the properties associated with an InferRxNorm job. Use this operation to get the status of an inference job.
		/// DescribeRxNormInferenceJob #X-Amz-Target=ComprehendMedical_20181030.DescribeRxNormInferenceJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeRxNormInferenceJobResponse> DescribeRxNormInferenceJobAsync(DescribeRxNormInferenceJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=ComprehendMedical_20181030.DescribeRxNormInferenceJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeRxNormInferenceJobResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the properties associated with an InferSNOMEDCT job. Use this operation to get the status of an inference job.
		/// DescribeSNOMEDCTInferenceJob #X-Amz-Target=ComprehendMedical_20181030.DescribeSNOMEDCTInferenceJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeSNOMEDCTInferenceJobResponse> DescribeSNOMEDCTInferenceJobAsync(DescribeSNOMEDCTInferenceJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=ComprehendMedical_20181030.DescribeSNOMEDCTInferenceJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeSNOMEDCTInferenceJobResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>The <code>DetectEntities</code> operation is deprecated. You should use the <a>DetectEntitiesV2</a> operation instead.</p> <p>Inspects the clinical text for a variety of medical entities and returns specific information about them such as entity category, location, and confidence score on that information.</p>
		/// DetectEntities #X-Amz-Target=ComprehendMedical_20181030.DetectEntities
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DetectEntitiesResponse> DetectEntitiesAsync(DetectEntitiesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=ComprehendMedical_20181030.DetectEntities";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DetectEntitiesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Inspects the clinical text for a variety of medical entities and returns specific information about them such as entity category, location, and confidence score on that information. Amazon Comprehend Medical only detects medical entities in English language texts.</p> <p>The <code>DetectEntitiesV2</code> operation replaces the <a>DetectEntities</a> operation. This new action uses a different model for determining the entities in your medical text and changes the way that some entities are returned in the output. You should use the <code>DetectEntitiesV2</code> operation in all new applications.</p> <p>The <code>DetectEntitiesV2</code> operation returns the <code>Acuity</code> and <code>Direction</code> entities as attributes instead of types. </p>
		/// DetectEntitiesV2 #X-Amz-Target=ComprehendMedical_20181030.DetectEntitiesV2
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DetectEntitiesV2Response> DetectEntitiesV2Async(DetectEntitiesV2Request requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=ComprehendMedical_20181030.DetectEntitiesV2";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DetectEntitiesV2Response>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inspects the clinical text for protected health information (PHI) entities and returns the entity category, location, and confidence score for each entity. Amazon Comprehend Medical only detects entities in English language texts.
		/// DetectPHI #X-Amz-Target=ComprehendMedical_20181030.DetectPHI
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DetectPHIResponse> DetectPHIAsync(DetectPHIRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=ComprehendMedical_20181030.DetectPHI";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DetectPHIResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// InferICD10CM detects medical conditions as entities listed in a patient record and links those entities to normalized concept identifiers in the ICD-10-CM knowledge base from the Centers for Disease Control. Amazon Comprehend Medical only detects medical entities in English language texts.
		/// InferICD10CM #X-Amz-Target=ComprehendMedical_20181030.InferICD10CM
		/// </summary>
		/// <returns>Success</returns>
		public async Task<InferICD10CMResponse> InferICD10CMAsync(InferICD10CMRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=ComprehendMedical_20181030.InferICD10CM";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InferICD10CMResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// InferRxNorm detects medications as entities listed in a patient record and links to the normalized concept identifiers in the RxNorm database from the National Library of Medicine. Amazon Comprehend Medical only detects medical entities in English language texts.
		/// InferRxNorm #X-Amz-Target=ComprehendMedical_20181030.InferRxNorm
		/// </summary>
		/// <returns>Success</returns>
		public async Task<InferRxNormResponse> InferRxNormAsync(InferRxNormRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=ComprehendMedical_20181030.InferRxNorm";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InferRxNormResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// InferSNOMEDCT detects possible medical concepts as entities and links them to codes from the Systematized Nomenclature of Medicine, Clinical Terms (SNOMED-CT) ontology
		/// InferSNOMEDCT #X-Amz-Target=ComprehendMedical_20181030.InferSNOMEDCT
		/// </summary>
		/// <returns>Success</returns>
		public async Task<InferSNOMEDCTResponse> InferSNOMEDCTAsync(InferSNOMEDCTRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=ComprehendMedical_20181030.InferSNOMEDCT";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InferSNOMEDCTResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of medical entity detection jobs that you have submitted.
		/// ListEntitiesDetectionV2Jobs #X-Amz-Target=ComprehendMedical_20181030.ListEntitiesDetectionV2Jobs
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListEntitiesDetectionV2JobsResponse> ListEntitiesDetectionV2JobsAsync(ListEntitiesDetectionV2JobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=ComprehendMedical_20181030.ListEntitiesDetectionV2Jobs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListEntitiesDetectionV2JobsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of InferICD10CM jobs that you have submitted.
		/// ListICD10CMInferenceJobs #X-Amz-Target=ComprehendMedical_20181030.ListICD10CMInferenceJobs
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListICD10CMInferenceJobsResponse> ListICD10CMInferenceJobsAsync(ListICD10CMInferenceJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=ComprehendMedical_20181030.ListICD10CMInferenceJobs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListICD10CMInferenceJobsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of protected health information (PHI) detection jobs you have submitted.
		/// ListPHIDetectionJobs #X-Amz-Target=ComprehendMedical_20181030.ListPHIDetectionJobs
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListPHIDetectionJobsResponse> ListPHIDetectionJobsAsync(ListPHIDetectionJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=ComprehendMedical_20181030.ListPHIDetectionJobs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListPHIDetectionJobsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of InferRxNorm jobs that you have submitted.
		/// ListRxNormInferenceJobs #X-Amz-Target=ComprehendMedical_20181030.ListRxNormInferenceJobs
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListRxNormInferenceJobsResponse> ListRxNormInferenceJobsAsync(ListRxNormInferenceJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=ComprehendMedical_20181030.ListRxNormInferenceJobs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListRxNormInferenceJobsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of InferSNOMEDCT jobs a user has submitted.
		/// ListSNOMEDCTInferenceJobs #X-Amz-Target=ComprehendMedical_20181030.ListSNOMEDCTInferenceJobs
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListSNOMEDCTInferenceJobsResponse> ListSNOMEDCTInferenceJobsAsync(ListSNOMEDCTInferenceJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=ComprehendMedical_20181030.ListSNOMEDCTInferenceJobs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListSNOMEDCTInferenceJobsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts an asynchronous medical entity detection job for a collection of documents. Use the <code>DescribeEntitiesDetectionV2Job</code> operation to track the status of a job.
		/// StartEntitiesDetectionV2Job #X-Amz-Target=ComprehendMedical_20181030.StartEntitiesDetectionV2Job
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartEntitiesDetectionV2JobResponse> StartEntitiesDetectionV2JobAsync(StartEntitiesDetectionV2JobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=ComprehendMedical_20181030.StartEntitiesDetectionV2Job";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StartEntitiesDetectionV2JobResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts an asynchronous job to detect medical conditions and link them to the ICD-10-CM ontology. Use the <code>DescribeICD10CMInferenceJob</code> operation to track the status of a job.
		/// StartICD10CMInferenceJob #X-Amz-Target=ComprehendMedical_20181030.StartICD10CMInferenceJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartICD10CMInferenceJobResponse> StartICD10CMInferenceJobAsync(StartICD10CMInferenceJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=ComprehendMedical_20181030.StartICD10CMInferenceJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StartICD10CMInferenceJobResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts an asynchronous job to detect protected health information (PHI). Use the <code>DescribePHIDetectionJob</code> operation to track the status of a job.
		/// StartPHIDetectionJob #X-Amz-Target=ComprehendMedical_20181030.StartPHIDetectionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartPHIDetectionJobResponse> StartPHIDetectionJobAsync(StartPHIDetectionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=ComprehendMedical_20181030.StartPHIDetectionJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StartPHIDetectionJobResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts an asynchronous job to detect medication entities and link them to the RxNorm ontology. Use the <code>DescribeRxNormInferenceJob</code> operation to track the status of a job.
		/// StartRxNormInferenceJob #X-Amz-Target=ComprehendMedical_20181030.StartRxNormInferenceJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartRxNormInferenceJobResponse> StartRxNormInferenceJobAsync(StartRxNormInferenceJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=ComprehendMedical_20181030.StartRxNormInferenceJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StartRxNormInferenceJobResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts an asynchronous job to detect medical concepts and link them to the SNOMED-CT ontology. Use the DescribeSNOMEDCTInferenceJob operation to track the status of a job.
		/// StartSNOMEDCTInferenceJob #X-Amz-Target=ComprehendMedical_20181030.StartSNOMEDCTInferenceJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartSNOMEDCTInferenceJobResponse> StartSNOMEDCTInferenceJobAsync(StartSNOMEDCTInferenceJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=ComprehendMedical_20181030.StartSNOMEDCTInferenceJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StartSNOMEDCTInferenceJobResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops a medical entities detection job in progress.
		/// StopEntitiesDetectionV2Job #X-Amz-Target=ComprehendMedical_20181030.StopEntitiesDetectionV2Job
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopEntitiesDetectionV2JobResponse> StopEntitiesDetectionV2JobAsync(StopEntitiesDetectionV2JobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=ComprehendMedical_20181030.StopEntitiesDetectionV2Job";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StopEntitiesDetectionV2JobResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops an InferICD10CM inference job in progress.
		/// StopICD10CMInferenceJob #X-Amz-Target=ComprehendMedical_20181030.StopICD10CMInferenceJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopICD10CMInferenceJobResponse> StopICD10CMInferenceJobAsync(StopICD10CMInferenceJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=ComprehendMedical_20181030.StopICD10CMInferenceJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StopICD10CMInferenceJobResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops a protected health information (PHI) detection job in progress.
		/// StopPHIDetectionJob #X-Amz-Target=ComprehendMedical_20181030.StopPHIDetectionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopPHIDetectionJobResponse> StopPHIDetectionJobAsync(StopPHIDetectionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=ComprehendMedical_20181030.StopPHIDetectionJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StopPHIDetectionJobResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops an InferRxNorm inference job in progress.
		/// StopRxNormInferenceJob #X-Amz-Target=ComprehendMedical_20181030.StopRxNormInferenceJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopRxNormInferenceJobResponse> StopRxNormInferenceJobAsync(StopRxNormInferenceJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=ComprehendMedical_20181030.StopRxNormInferenceJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StopRxNormInferenceJobResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops an InferSNOMEDCT inference job in progress.
		/// StopSNOMEDCTInferenceJob #X-Amz-Target=ComprehendMedical_20181030.StopSNOMEDCTInferenceJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopSNOMEDCTInferenceJobResponse> StopSNOMEDCTInferenceJobAsync(StopSNOMEDCTInferenceJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=ComprehendMedical_20181030.StopSNOMEDCTInferenceJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StopSNOMEDCTInferenceJobResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum DescribeEntitiesDetectionV2JobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ComprehendMedical_20181030.DescribeEntitiesDetectionV2Job")]
		ComprehendMedical_20181030_DescribeEntitiesDetectionV2Job = 0,
	}
	
	public enum DescribeICD10CMInferenceJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ComprehendMedical_20181030.DescribeICD10CMInferenceJob")]
		ComprehendMedical_20181030_DescribeICD10CMInferenceJob = 0,
	}
	
	public enum DescribePHIDetectionJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ComprehendMedical_20181030.DescribePHIDetectionJob")]
		ComprehendMedical_20181030_DescribePHIDetectionJob = 0,
	}
	
	public enum DescribeRxNormInferenceJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ComprehendMedical_20181030.DescribeRxNormInferenceJob")]
		ComprehendMedical_20181030_DescribeRxNormInferenceJob = 0,
	}
	
	public enum DescribeSNOMEDCTInferenceJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ComprehendMedical_20181030.DescribeSNOMEDCTInferenceJob")]
		ComprehendMedical_20181030_DescribeSNOMEDCTInferenceJob = 0,
	}
	
	public enum DetectEntitiesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ComprehendMedical_20181030.DetectEntities")]
		ComprehendMedical_20181030_DetectEntities = 0,
	}
	
	public enum DetectEntitiesV2X_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ComprehendMedical_20181030.DetectEntitiesV2")]
		ComprehendMedical_20181030_DetectEntitiesV2 = 0,
	}
	
	public enum DetectPHIX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ComprehendMedical_20181030.DetectPHI")]
		ComprehendMedical_20181030_DetectPHI = 0,
	}
	
	public enum InferICD10CMX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ComprehendMedical_20181030.InferICD10CM")]
		ComprehendMedical_20181030_InferICD10CM = 0,
	}
	
	public enum InferRxNormX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ComprehendMedical_20181030.InferRxNorm")]
		ComprehendMedical_20181030_InferRxNorm = 0,
	}
	
	public enum InferSNOMEDCTX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ComprehendMedical_20181030.InferSNOMEDCT")]
		ComprehendMedical_20181030_InferSNOMEDCT = 0,
	}
	
	public enum ListEntitiesDetectionV2JobsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ComprehendMedical_20181030.ListEntitiesDetectionV2Jobs")]
		ComprehendMedical_20181030_ListEntitiesDetectionV2Jobs = 0,
	}
	
	public enum ListICD10CMInferenceJobsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ComprehendMedical_20181030.ListICD10CMInferenceJobs")]
		ComprehendMedical_20181030_ListICD10CMInferenceJobs = 0,
	}
	
	public enum ListPHIDetectionJobsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ComprehendMedical_20181030.ListPHIDetectionJobs")]
		ComprehendMedical_20181030_ListPHIDetectionJobs = 0,
	}
	
	public enum ListRxNormInferenceJobsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ComprehendMedical_20181030.ListRxNormInferenceJobs")]
		ComprehendMedical_20181030_ListRxNormInferenceJobs = 0,
	}
	
	public enum ListSNOMEDCTInferenceJobsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ComprehendMedical_20181030.ListSNOMEDCTInferenceJobs")]
		ComprehendMedical_20181030_ListSNOMEDCTInferenceJobs = 0,
	}
	
	public enum StartEntitiesDetectionV2JobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ComprehendMedical_20181030.StartEntitiesDetectionV2Job")]
		ComprehendMedical_20181030_StartEntitiesDetectionV2Job = 0,
	}
	
	public enum StartICD10CMInferenceJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ComprehendMedical_20181030.StartICD10CMInferenceJob")]
		ComprehendMedical_20181030_StartICD10CMInferenceJob = 0,
	}
	
	public enum StartPHIDetectionJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ComprehendMedical_20181030.StartPHIDetectionJob")]
		ComprehendMedical_20181030_StartPHIDetectionJob = 0,
	}
	
	public enum StartRxNormInferenceJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ComprehendMedical_20181030.StartRxNormInferenceJob")]
		ComprehendMedical_20181030_StartRxNormInferenceJob = 0,
	}
	
	public enum StartSNOMEDCTInferenceJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ComprehendMedical_20181030.StartSNOMEDCTInferenceJob")]
		ComprehendMedical_20181030_StartSNOMEDCTInferenceJob = 0,
	}
	
	public enum StopEntitiesDetectionV2JobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ComprehendMedical_20181030.StopEntitiesDetectionV2Job")]
		ComprehendMedical_20181030_StopEntitiesDetectionV2Job = 0,
	}
	
	public enum StopICD10CMInferenceJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ComprehendMedical_20181030.StopICD10CMInferenceJob")]
		ComprehendMedical_20181030_StopICD10CMInferenceJob = 0,
	}
	
	public enum StopPHIDetectionJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ComprehendMedical_20181030.StopPHIDetectionJob")]
		ComprehendMedical_20181030_StopPHIDetectionJob = 0,
	}
	
	public enum StopRxNormInferenceJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ComprehendMedical_20181030.StopRxNormInferenceJob")]
		ComprehendMedical_20181030_StopRxNormInferenceJob = 0,
	}
	
	public enum StopSNOMEDCTInferenceJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ComprehendMedical_20181030.StopSNOMEDCTInferenceJob")]
		ComprehendMedical_20181030_StopSNOMEDCTInferenceJob = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
