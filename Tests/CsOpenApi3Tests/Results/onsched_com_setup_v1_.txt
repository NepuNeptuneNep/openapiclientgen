//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddressInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="addressLine1")]
		public string AddressLine1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="addressLine2")]
		public string AddressLine2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddressUpdateModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="addressLine1")]
		public string AddressLine1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="addressLine2")]
		public string AddressLine2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddressViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="addressLine1")]
		public string AddressLine1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="addressLine2")]
		public string AddressLine2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppointmentAuditViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="appointmentId")]
		public string AppointmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modificationType")]
		public string ModificationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modifiedBy")]
		public string ModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modifiedOn")]
		public string ModifiedOn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notesAfter")]
		public string NotesAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notesBefore")]
		public string NotesBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusAfter")]
		public string StatusAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusBefore")]
		public string StatusBefore { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppointmentCustomerViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="appointmentId")]
		public string AppointmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerId")]
		public string CustomerId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppointmentListViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public AppointmentViewModel[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppointmentViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="auditTrail")]
		public AppointmentAuditViewModel[] AuditTrail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookedBy")]
		public string BookedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessName")]
		public string BusinessName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="calendarId")]
		public string CalendarId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="confirmationNumber")]
		public string ConfirmationNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="confirmed")]
		public System.Nullable<System.Boolean> Confirmed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createDate")]
		public string CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public System.Collections.Generic.Dictionary<string, CustomFieldViewModel> CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerId")]
		public string CustomerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerMessage")]
		public string CustomerMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customers")]
		public AppointmentCustomerViewModel[] Customers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateInternational")]
		public string DateInternational { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="downloadIcsUrl")]
		public string DownloadIcsUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailConfirmationSent")]
		public string EmailConfirmationSent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailReminderSent")]
		public string EmailReminderSent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public string EndDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstname")]
		public string Firstname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupSize")]
		public System.Nullable<System.Int32> GroupSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedBy")]
		public string LastModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedOn")]
		public string LastModifiedOn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastname")]
		public string Lastname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public string Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public string Longitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="onlineBooking")]
		public System.Nullable<System.Boolean> OnlineBooking { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentStatus")]
		public System.Nullable<System.Int32> PaymentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phoneExt")]
		public string PhoneExt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phoneType")]
		public string PhoneType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rescheduledId")]
		public string RescheduledId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceEmail")]
		public string ResourceEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceGroupId")]
		public string ResourceGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceGroupName")]
		public string ResourceGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceImageUrl")]
		public string ResourceImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public AppointmentResourceViewModel[] Resources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceAllocationId")]
		public string ServiceAllocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public string ServiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceImageUrl")]
		public string ServiceImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smsConfirmationSent")]
		public string SmsConfirmationSent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smsReminderSent")]
		public string SmsReminderSent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public string StartDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stripeChargeId")]
		public string StripeChargeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stripeRefundId")]
		public string StripeRefundId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.Int32> Time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public System.Nullable<System.Int32> Timezone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneIana")]
		public string TimezoneIana { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneId")]
		public string TimezoneId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomFieldViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppointmentResourceViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="appointmentId")]
		public string AppointmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceEmail")]
		public string ResourceEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceGroupId")]
		public string ResourceGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceImageUrl")]
		public string ResourceImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppointmentReminderViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="emailFirstReminder")]
		public System.Nullable<System.Int32> EmailFirstReminder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailFirstReminderInterval")]
		public System.Nullable<System.Int32> EmailFirstReminderInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailSecondReminder")]
		public System.Nullable<System.Int32> EmailSecondReminder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailSecondReminderInterval")]
		public System.Nullable<System.Int32> EmailSecondReminderInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smsFirstReminder")]
		public System.Nullable<System.Int32> SmsFirstReminder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smsFirstReminderInterval")]
		public System.Nullable<System.Int32> SmsFirstReminderInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smsSecondReminder")]
		public System.Nullable<System.Int32> SmsSecondReminder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smsSecondReminderInterval")]
		public System.Nullable<System.Int32> SmsSecondReminderInterval { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppointmentRemindersInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="emailFirstReminder")]
		public System.Nullable<System.Int32> EmailFirstReminder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailFirstReminderInterval")]
		public System.Nullable<System.Int32> EmailFirstReminderInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailSecondReminder")]
		public System.Nullable<System.Int32> EmailSecondReminder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailSecondReminderInterval")]
		public System.Nullable<System.Int32> EmailSecondReminderInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smsFirstReminder")]
		public System.Nullable<System.Int32> SmsFirstReminder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smsFirstReminderInterval")]
		public System.Nullable<System.Int32> SmsFirstReminderInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smsSecondReminder")]
		public System.Nullable<System.Int32> SmsSecondReminder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smsSecondReminderInterval")]
		public System.Nullable<System.Int32> SmsSecondReminderInterval { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthorizedCompanyListViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public AuthorizedCompanyViewModel[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthorizedCompanyViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AvailabilityInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="fri")]
		public WeekDayInputModel Fri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mon")]
		public WeekDayInputModel Mon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sat")]
		public WeekDayInputModel Sat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sun")]
		public WeekDayInputModel Sun { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thu")]
		public WeekDayInputModel Thu { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tue")]
		public WeekDayInputModel Tue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wed")]
		public WeekDayInputModel Wed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WeekDayInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.Int32> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.Int32> StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AvailabilityViewModel2
	{
		
		[System.Runtime.Serialization.DataMember(Name="fri")]
		public WeekDayViewModel2 Fri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mon")]
		public WeekDayViewModel2 Mon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sat")]
		public WeekDayViewModel2 Sat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sun")]
		public WeekDayViewModel2 Sun { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thu")]
		public WeekDayViewModel2 Thu { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tue")]
		public WeekDayViewModel2 Tue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wed")]
		public WeekDayViewModel2 Wed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WeekDayViewModel2
	{
		
		[System.Runtime.Serialization.DataMember(Name="displayEndTime")]
		public string DisplayEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayStartTime")]
		public string DisplayStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.Int32> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.Int32> StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BusinessDefaultsInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="autoUpdateCustomer")]
		public System.Nullable<System.Boolean> AutoUpdateCustomer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessNotification")]
		public System.Nullable<System.Boolean> BusinessNotification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerCity")]
		public System.Nullable<System.Boolean> CustomerCity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerState")]
		public System.Nullable<System.Boolean> CustomerState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailInfo")]
		public System.Nullable<System.Boolean> EmailInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableUtcTimezone")]
		public System.Nullable<System.Boolean> EnableUtcTimezone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BusinessDefaultsUpdateModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="autoUpdateCustomer")]
		public System.Nullable<System.Boolean> AutoUpdateCustomer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessNotification")]
		public System.Nullable<System.Boolean> BusinessNotification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerCity")]
		public System.Nullable<System.Boolean> CustomerCity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerState")]
		public System.Nullable<System.Boolean> CustomerState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailInfo")]
		public System.Nullable<System.Boolean> EmailInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableUtcTimezone")]
		public System.Nullable<System.Boolean> EnableUtcTimezone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BusinessDefaultsViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="autoUpdateCustomer")]
		public System.Nullable<System.Boolean> AutoUpdateCustomer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessNotification")]
		public System.Nullable<System.Boolean> BusinessNotification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerCity")]
		public System.Nullable<System.Boolean> CustomerCity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerState")]
		public System.Nullable<System.Boolean> CustomerState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailInfo")]
		public System.Nullable<System.Boolean> EmailInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableUtcTimezone")]
		public System.Nullable<System.Boolean> EnableUtcTimezone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BusinessHolidayViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="businessClosed")]
		public System.Nullable<System.Boolean> BusinessClosed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="holidayName")]
		public string HolidayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publicHolidayId")]
		public System.Nullable<System.Int32> PublicHolidayId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BusinessHourInputModel
	{
		
		/// <summary>
		/// endTime is entered in military format. e.g. 1800 = 6pm end, 2400 = midnight end of day.
		///For 24 hours enter startTime = 0 and endTime = 2400
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.Int32> EndTime { get; set; }
		
		/// <summary>
		/// If true then available for 24 hours. startTime must be zero and endTime must be 2400.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is24Hours")]
		public System.Nullable<System.Boolean> Is24Hours { get; set; }
		
		/// <summary>
		/// If false, then not available entire day, starTime and endTime must both be zero. If true, then available between startTime and endTime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isOpen")]
		public System.Nullable<System.Boolean> IsOpen { get; set; }
		
		/// <summary>
		/// startTime is entered in military format. e.g. 0 = midnight start, 900 = 9am start
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.Int32> StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BusinessHourViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.Int32> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is24Hours")]
		public System.Nullable<System.Boolean> Is24Hours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isOpen")]
		public System.Nullable<System.Boolean> IsOpen { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.Int32> StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BusinessHoursInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="fri")]
		public BusinessHourInputModel Fri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mon")]
		public BusinessHourInputModel Mon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sat")]
		public BusinessHourInputModel Sat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sun")]
		public BusinessHourInputModel Sun { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thu")]
		public BusinessHourInputModel Thu { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tue")]
		public BusinessHourInputModel Tue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wed")]
		public BusinessHourInputModel Wed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BusinessHoursUpdateModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="fri")]
		public BusinessHourInputModel Fri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mon")]
		public BusinessHourInputModel Mon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sat")]
		public BusinessHourInputModel Sat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sun")]
		public BusinessHourInputModel Sun { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thu")]
		public BusinessHourInputModel Thu { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tue")]
		public BusinessHourInputModel Tue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wed")]
		public BusinessHourInputModel Wed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BusinessHoursViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="fri")]
		public BusinessHourViewModel Fri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mon")]
		public BusinessHourViewModel Mon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sat")]
		public BusinessHourViewModel Sat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sun")]
		public BusinessHourViewModel Sun { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thu")]
		public BusinessHourViewModel Thu { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tue")]
		public BusinessHourViewModel Tue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wed")]
		public BusinessHourViewModel Wed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BusinessPermissionListViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public BusinessPermissionViewModel[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BusinessPermissionViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="access")]
		public string Access { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="function")]
		public string Function { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BusinessServiceListViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public BusinessServiceViewModel[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BusinessServiceViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public System.Nullable<System.Int32> ServiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BusinessUserInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sendRegistrationInvite")]
		public System.Nullable<System.Boolean> SendRegistrationInvite { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BusinessUserListViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public BusinessUserViewModel[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BusinessUserViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessName")]
		public string BusinessName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identityAccount")]
		public System.Nullable<System.Boolean> IdentityAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public BusinessUserPermissionViewModel[] Permissions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BusinessUserPermissionViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="access")]
		public string Access { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="function")]
		public string Function { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BusinessUserUpdateModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sendRegistrationInvite")]
		public System.Nullable<System.Boolean> SendRegistrationInvite { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CalendarAuthViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="calendarAuthUrl")]
		public string CalendarAuthUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="calendarId")]
		public string CalendarId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CalendarBlockInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.Int32> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repeat")]
		public RepeatInputModel Repeat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repeats")]
		public System.Nullable<System.Boolean> Repeats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.Int32> StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RepeatInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public string Frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interval")]
		public System.Nullable<System.Int32> Interval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="monthDay")]
		public System.Nullable<System.Int32> MonthDay { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="monthType")]
		public string MonthType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weekdays")]
		public string Weekdays { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CalendarBlockListViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CalendarBlockViewModel[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CalendarBlockViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="calendarId")]
		public string CalendarId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedStatus")]
		public System.Nullable<System.Boolean> DeletedStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedTime")]
		public string DeletedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public string EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.Int32> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repeat")]
		public RepeatViewModel Repeat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repeats")]
		public System.Nullable<System.Boolean> Repeats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public string StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.Int32> StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RepeatViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public string Frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interval")]
		public System.Nullable<System.Int32> Interval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="monthDay")]
		public string MonthDay { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="monthType")]
		public string MonthType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weekdays")]
		public string Weekdays { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CalendarBlockUpdateModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.Int32> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repeat")]
		public RepeatInputModel Repeat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repeats")]
		public System.Nullable<System.Boolean> Repeats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.Int32> StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CalendarHourViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.Int32> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.Int32> StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CalendarHoursViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="fri")]
		public CalendarHourViewModel Fri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mon")]
		public CalendarHourViewModel Mon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sat")]
		public CalendarHourViewModel Sat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sun")]
		public CalendarHourViewModel Sun { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thu")]
		public CalendarHourViewModel Thu { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tue")]
		public CalendarHourViewModel Tue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wed")]
		public CalendarHourViewModel Wed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompanyDomainInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompanyDomainListViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CompanyDomainViewModel[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompanyDomainViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompanyDomainUpdateModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompanyInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="addressLine1")]
		public string AddressLine1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="addressLine2")]
		public string AddressLine2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingWebhookUrl")]
		public string BookingWebhookUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerWebhookUrl")]
		public string CustomerWebhookUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disableEmailAndSmsNotifications")]
		public System.Nullable<System.Boolean> DisableEmailAndSmsNotifications { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fax")]
		public string Fax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notificationFromEmailAddress")]
		public string NotificationFromEmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notificationFromName")]
		public string NotificationFromName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registrationEmail")]
		public string RegistrationEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reminderWebhookUrl")]
		public string ReminderWebhookUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceWebhookUrl")]
		public string ResourceWebhookUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneName")]
		public string TimezoneName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webhookSignatureHash")]
		public string WebhookSignatureHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompanyUpdateModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="addressLine1")]
		public string AddressLine1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="addressLine2")]
		public string AddressLine2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingWebhookUrl")]
		public string BookingWebhookUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerWebhookUrl")]
		public string CustomerWebhookUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disableEmailAndSmsNotifications")]
		public System.Nullable<System.Boolean> DisableEmailAndSmsNotifications { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fax")]
		public string Fax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notificationFromEmailAddress")]
		public string NotificationFromEmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notificationFromName")]
		public string NotificationFromName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registrationEmail")]
		public string RegistrationEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reminderWebhookUrl")]
		public string ReminderWebhookUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceWebhookUrl")]
		public string ResourceWebhookUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneName")]
		public string TimezoneName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webhookSignatureHash")]
		public string WebhookSignatureHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompanyViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="addressLine1")]
		public string AddressLine1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="addressLine2")]
		public string AddressLine2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingWebhookUrl")]
		public string BookingWebhookUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientSecret")]
		public string ClientSecret { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerWebhookUrl")]
		public string CustomerWebhookUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedStatus")]
		public System.Nullable<System.Boolean> DeletedStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedTime")]
		public string DeletedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disableEmailAndSmsNotifications")]
		public System.Nullable<System.Boolean> DisableEmailAndSmsNotifications { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fax")]
		public string Fax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notificationFromEmailAddress")]
		public string NotificationFromEmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notificationFromName")]
		public string NotificationFromName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registrationDate")]
		public string RegistrationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registrationEmail")]
		public string RegistrationEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reminderWebhookUrl")]
		public string ReminderWebhookUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceWebhookUrl")]
		public string ResourceWebhookUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneId")]
		public string TimezoneId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneName")]
		public string TimezoneName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webhookSignatureHash")]
		public string WebhookSignatureHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContactInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="businessPhone")]
		public string BusinessPhone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessPhoneExt")]
		public string BusinessPhoneExt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conferenceInfo")]
		public string ConferenceInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="homePhone")]
		public string HomePhone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobilePhone")]
		public string MobilePhone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preferredPhoneType")]
		public string PreferredPhoneType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skypeUsername")]
		public string SkypeUsername { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContactUpdateModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="businessPhone")]
		public string BusinessPhone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessPhoneExt")]
		public string BusinessPhoneExt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conferenceInfo")]
		public string ConferenceInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="homePhone")]
		public string HomePhone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobilePhone")]
		public string MobilePhone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preferredPhoneType")]
		public string PreferredPhoneType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skypeUsername")]
		public string SkypeUsername { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContactViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="businessPhone")]
		public string BusinessPhone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessPhoneExt")]
		public string BusinessPhoneExt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conferenceInfo")]
		public string ConferenceInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="homePhone")]
		public string HomePhone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobilePhone")]
		public string MobilePhone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phoneType")]
		public string PhoneType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skypeUsername")]
		public string SkypeUsername { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContentResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public System.Nullable<System.Int32> StatusCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomFieldInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="field1")]
		public string Field1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field10")]
		public string Field10 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field2")]
		public string Field2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field3")]
		public string Field3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field4")]
		public string Field4 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field5")]
		public string Field5 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field6")]
		public string Field6 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field7")]
		public string Field7 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field8")]
		public string Field8 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field9")]
		public string Field9 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomFieldUpdateModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="field1")]
		public string Field1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field10")]
		public string Field10 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field2")]
		public string Field2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field3")]
		public string Field3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field4")]
		public string Field4 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field5")]
		public string Field5 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field6")]
		public string Field6 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field7")]
		public string Field7 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field8")]
		public string Field8 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field9")]
		public string Field9 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerListViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CustomerViewModel[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public AddressViewModel Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="birthdate")]
		public string Birthdate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessName")]
		public string BusinessName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="companyName")]
		public string CompanyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public ContactViewModel Contact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdOn")]
		public string CreatedOn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public System.Collections.Generic.Dictionary<string, CustomFieldViewModel> CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedStatus")]
		public System.Nullable<System.Boolean> DeletedStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedTime")]
		public string DeletedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailInfo")]
		public System.Nullable<System.Boolean> EmailInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailPromotion")]
		public System.Nullable<System.Boolean> EmailPromotion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstname")]
		public string Firstname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public string GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inviteEmailSent")]
		public string InviteEmailSent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastVisitDate")]
		public string LastVisitDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastname")]
		public string Lastname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public string Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public string Longitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modifiedBy")]
		public string ModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modifiedOn")]
		public string ModifiedOn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notificationType")]
		public string NotificationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registeredBy")]
		public string RegisteredBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registrationDate")]
		public string RegistrationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stripeCustomerId")]
		public string StripeCustomerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="verificationDate")]
		public string VerificationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="verifiedBy")]
		public string VerifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="welcomeEmailSent")]
		public string WelcomeEmailSent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerPrivacyViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="appointments")]
		public AppointmentViewModel[] Appointments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public CustomerViewModel Customer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EmailTemplateInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="templateContent")]
		public string TemplateContent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateName")]
		public string TemplateName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EmailTemplateListViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EmailTemplateViewModel[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EmailTemplateViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="customized")]
		public System.Nullable<System.Boolean> Customized { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleServiceAccountCreds
	{
		
		[System.Runtime.Serialization.DataMember(Name="auth_provider_x509_cert_url")]
		public string Auth_provider_x509_cert_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="auth_uri")]
		public string Auth_uri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="client_email")]
		public string Client_email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="client_id")]
		public string Client_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="client_x509_cert_url")]
		public string Client_x509_cert_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="private_key")]
		public string Private_key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="private_key_id")]
		public string Private_key_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project_id")]
		public string Project_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="token_uri")]
		public string Token_uri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocationInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public AddressInputModel Address { get; set; }
		
		/// <summary>
		/// Field is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminEmail")]
		public string AdminEmail { get; set; }
		
		/// <summary>
		/// This field is no longer required and has been deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminName")]
		public string AdminName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="appointmentReminders")]
		public AppointmentRemindersInputModel AppointmentReminders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessHours")]
		public BusinessHoursInputModel BusinessHours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaults")]
		public BusinessDefaultsInputModel Defaults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fax")]
		public string Fax { get; set; }
		
		/// <summary>
		/// Use the friendlyId as an alternative to the assigned locationId
		///Choose something easy and meaningful. Must be unique within your company.
		///FriendlyId's are limited to maximum of 64 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendlyId")]
		public string FriendlyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// GroupSize Limits the number of people that can come
		///along on a single appointment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regionId")]
		public string RegionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public OnlineSettingsInputModel Settings { get; set; }
		
		/// <summary>
		/// Field is required. It is in Iana format. e.g. America/New_York. Use moment.js in your client for ease of timezone detection and selection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timezoneName")]
		public string TimezoneName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OnlineSettingsInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="bookAheadUnit")]
		public System.Nullable<System.Int32> BookAheadUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookAheadValue")]
		public System.Nullable<System.Int32> BookAheadValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookInAdvance")]
		public System.Nullable<System.Int32> BookInAdvance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingTimerMins")]
		public System.Nullable<System.Int32> BookingTimerMins { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerBookingsPerDay")]
		public System.Nullable<System.Int32> CustomerBookingsPerDay { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableWorldTimezones")]
		public System.Nullable<System.Boolean> EnableWorldTimezones { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocationListViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public LocationViewModel[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocationViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public AddressViewModel Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="adminEmail")]
		public string AdminEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="adminName")]
		public string AdminName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="appointmentReminders")]
		public AppointmentReminderViewModel AppointmentReminders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessHolidays")]
		public BusinessHolidayViewModel[] BusinessHolidays { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessHours")]
		public BusinessHoursViewModel BusinessHours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="companyId")]
		public string CompanyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="companyName")]
		public string CompanyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaults")]
		public BusinessDefaultsViewModel Defaults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fax")]
		public string Fax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="friendlyId")]
		public string FriendlyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="primaryBusiness")]
		public System.Nullable<System.Boolean> PrimaryBusiness { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="primaryCalendarId")]
		public string PrimaryCalendarId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regionId")]
		public string RegionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="services")]
		public BusinessServiceViewModel[] Services { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public OnlineSettingsViewModel Settings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneIana")]
		public string TimezoneIana { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneId")]
		public string TimezoneId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneOffset")]
		public System.Nullable<System.Int32> TimezoneOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="travel")]
		public TravelViewModel Travel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OnlineSettingsViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="availabilityForm")]
		public System.Nullable<System.Int32> AvailabilityForm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookAheadUnit")]
		public System.Nullable<System.Int32> BookAheadUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookAheadValue")]
		public System.Nullable<System.Int32> BookAheadValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookInAdvance")]
		public System.Nullable<System.Int32> BookInAdvance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookWithAccount")]
		public System.Nullable<System.Boolean> BookWithAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingConfirmationMessage")]
		public string BookingConfirmationMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingMessage")]
		public string BookingMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingPolicy")]
		public string BookingPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingTimerMins")]
		public System.Nullable<System.Int32> BookingTimerMins { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessId")]
		public string BusinessId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="companyId")]
		public string CompanyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerBookingsPerDay")]
		public System.Nullable<System.Int32> CustomerBookingsPerDay { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerVerification")]
		public System.Nullable<System.Boolean> CustomerVerification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultService")]
		public System.Nullable<System.Boolean> DefaultService { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultToCustomerTimezone")]
		public System.Nullable<System.Boolean> DefaultToCustomerTimezone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disableAuthorization")]
		public System.Nullable<System.Boolean> DisableAuthorization { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableWorldTimezones")]
		public System.Nullable<System.Boolean> EnableWorldTimezones { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="familyMembersEnabled")]
		public System.Nullable<System.Boolean> FamilyMembersEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstAvailable")]
		public System.Nullable<System.Boolean> FirstAvailable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="formFlow")]
		public System.Nullable<System.Int32> FormFlow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hideBreadCrumbNav")]
		public System.Nullable<System.Boolean> HideBreadCrumbNav { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hideContinueBooking")]
		public System.Nullable<System.Boolean> HideContinueBooking { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hideLocationNav")]
		public System.Nullable<System.Boolean> HideLocationNav { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hideNavBar")]
		public System.Nullable<System.Boolean> HideNavBar { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hideServiceGroupsNav")]
		public System.Nullable<System.Boolean> HideServiceGroupsNav { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hideServicesNav")]
		public System.Nullable<System.Boolean> HideServicesNav { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lateCancelAction")]
		public System.Nullable<System.Int32> LateCancelAction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lateCancelHours")]
		public System.Nullable<System.Int32> LateCancelHours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lateRescheduleAction")]
		public System.Nullable<System.Int32> LateRescheduleAction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lateRescheduleHours")]
		public System.Nullable<System.Int32> LateRescheduleHours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="liveMode")]
		public System.Nullable<System.Boolean> LiveMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceAnyLabel")]
		public string ResourceAnyLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceLabel")]
		public string ResourceLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceSelection")]
		public System.Nullable<System.Boolean> ResourceSelection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="returnToAvailability")]
		public System.Nullable<System.Boolean> ReturnToAvailability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="returnToService")]
		public System.Nullable<System.Boolean> ReturnToService { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceLabel")]
		public string ServiceLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showBusinessLogo")]
		public System.Nullable<System.Boolean> ShowBusinessLogo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showOnSchedLogo")]
		public System.Nullable<System.Boolean> ShowOnSchedLogo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showServiceGroups")]
		public System.Nullable<System.Boolean> ShowServiceGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TravelViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="distance")]
		public string Distance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="proximity")]
		public string Proximity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startAddress")]
		public string StartAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startLat")]
		public string StartLat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startLon")]
		public string StartLon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocationUpdateModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public AddressUpdateModel Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="adminEmail")]
		public string AdminEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="adminName")]
		public string AdminName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="appointmentReminders")]
		public AppointmentRemindersInputModel AppointmentReminders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessHours")]
		public BusinessHoursUpdateModel BusinessHours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaults")]
		public BusinessDefaultsUpdateModel Defaults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fax")]
		public string Fax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="friendlyId")]
		public string FriendlyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regionId")]
		public string RegionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public OnlineSettingsUpdateModel Settings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneName")]
		public string TimezoneName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OnlineSettingsUpdateModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="bookAheadUnit")]
		public System.Nullable<System.Int32> BookAheadUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookAheadValue")]
		public System.Nullable<System.Int32> BookAheadValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookInAdvance")]
		public System.Nullable<System.Int32> BookInAdvance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingTimerMins")]
		public System.Nullable<System.Int32> BookingTimerMins { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerBookingsPerDay")]
		public System.Nullable<System.Int32> CustomerBookingsPerDay { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableWorldTimezones")]
		public System.Nullable<System.Boolean> EnableWorldTimezones { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocationsInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public LocationInputModel[] Locations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MasterEmailTemplateSettingsViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="centerEmailContent")]
		public System.Nullable<System.Boolean> CenterEmailContent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="centerEmailContentPanel")]
		public System.Nullable<System.Boolean> CenterEmailContentPanel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="centerEmailFooter")]
		public System.Nullable<System.Boolean> CenterEmailFooter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentBackgroundColor")]
		public string ContentBackgroundColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentColor")]
		public string ContentColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentLinkColor")]
		public string ContentLinkColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailBackgroundColor")]
		public string EmailBackgroundColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailColor")]
		public string EmailColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailLinkColor")]
		public string EmailLinkColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="footerFontSize")]
		public string FooterFontSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="footerLogoHeight")]
		public string FooterLogoHeight { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="footerLogoPadding")]
		public string FooterLogoPadding { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="footerPanelEmailContact")]
		public System.Nullable<System.Boolean> FooterPanelEmailContact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="footerPanelPhoneContact")]
		public System.Nullable<System.Boolean> FooterPanelPhoneContact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="footerPanelWebsiteContact")]
		public System.Nullable<System.Boolean> FooterPanelWebsiteContact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="headerLogoHeight")]
		public string HeaderLogoHeight { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="headerLogoPadding")]
		public string HeaderLogoPadding { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="panelBackgroundColor")]
		public string PanelBackgroundColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="panelColor")]
		public string PanelColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="panelLinkColor")]
		public string PanelLinkColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacyPolicyLink")]
		public string PrivacyPolicyLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showContentPanel")]
		public System.Nullable<System.Boolean> ShowContentPanel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showFooterLogo")]
		public System.Nullable<System.Boolean> ShowFooterLogo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showFooterPanel")]
		public System.Nullable<System.Boolean> ShowFooterPanel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showHeaderLogo")]
		public System.Nullable<System.Boolean> ShowHeaderLogo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showHeaderPanel")]
		public System.Nullable<System.Boolean> ShowHeaderPanel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MasterTemplateSettingsInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="centerEmailContent")]
		public System.Nullable<System.Boolean> CenterEmailContent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="centerEmailContentPanel")]
		public System.Nullable<System.Boolean> CenterEmailContentPanel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="centerEmailFooter")]
		public System.Nullable<System.Boolean> CenterEmailFooter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentBackgroundColor")]
		public string ContentBackgroundColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentColor")]
		public string ContentColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentLinkColor")]
		public string ContentLinkColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailBackgroundColor")]
		public string EmailBackgroundColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailColor")]
		public string EmailColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailLinkColor")]
		public string EmailLinkColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="footerFontSize")]
		public string FooterFontSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="footerLogoHeight")]
		public string FooterLogoHeight { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="footerLogoPadding")]
		public string FooterLogoPadding { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="footerPanelEmailContact")]
		public System.Nullable<System.Boolean> FooterPanelEmailContact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="footerPanelPhoneContact")]
		public System.Nullable<System.Boolean> FooterPanelPhoneContact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="footerPanelWebsiteContact")]
		public System.Nullable<System.Boolean> FooterPanelWebsiteContact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="headerLogoHeight")]
		public string HeaderLogoHeight { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="headerLogoPadding")]
		public string HeaderLogoPadding { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="panelBackgroundColor")]
		public string PanelBackgroundColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="panelColor")]
		public string PanelColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="panelLinkColor")]
		public string PanelLinkColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacyPolicyLink")]
		public string PrivacyPolicyLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showContentPanel")]
		public System.Nullable<System.Boolean> ShowContentPanel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showFooterLogo")]
		public System.Nullable<System.Boolean> ShowFooterLogo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showFooterPanel")]
		public System.Nullable<System.Boolean> ShowFooterPanel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showHeaderLogo")]
		public System.Nullable<System.Boolean> ShowHeaderLogo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showHeaderPanel")]
		public System.Nullable<System.Boolean> ShowHeaderPanel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhoneViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="businessPhone")]
		public string BusinessPhone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessPhoneExt")]
		public string BusinessPhoneExt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="homePhone")]
		public string HomePhone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobilePhone")]
		public string MobilePhone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phoneType")]
		public string PhoneType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegionInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegionListViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RegionViewModel[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegionViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegionUpdateModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RepeatUpdateModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public string Frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interval")]
		public System.Nullable<System.Int32> Interval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="monthDay")]
		public System.Nullable<System.Int32> MonthDay { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="monthType")]
		public string MonthType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weekdays")]
		public string Weekdays { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceAllocationInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.Int32> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repeat")]
		public RepeatInputModel Repeat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repeats")]
		public System.Nullable<System.Boolean> Repeats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.Int32> StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceAllocationListViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ResourceAllocationViewModel[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceAllocationViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="businessId")]
		public System.Nullable<System.Int32> BusinessId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedStatus")]
		public System.Nullable<System.Boolean> DeletedStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedTime")]
		public string DeletedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public string EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.Int32> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repeat")]
		public RepeatViewModel Repeat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repeats")]
		public System.Nullable<System.Boolean> Repeats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public System.Nullable<System.Int32> ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public string StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.Int32> StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceAllocationUpdateModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.Int32> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repeat")]
		public RepeatInputModel Repeat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repeats")]
		public System.Nullable<System.Boolean> Repeats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.Int32> StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceAvailabilityViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="businessId")]
		public System.Nullable<System.Int32> BusinessId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ignoreBusinessHours")]
		public System.Nullable<System.Boolean> IgnoreBusinessHours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public System.Nullable<System.Int32> ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceTzo")]
		public System.Nullable<System.Int32> ResourceTzo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weekdays")]
		public AvailabilityViewModel2 Weekdays { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceBlockInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="allDay")]
		public System.Nullable<System.Boolean> AllDay { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.Int32> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repeat")]
		public RepeatInputModel Repeat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repeats")]
		public System.Nullable<System.Boolean> Repeats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.Int32> StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceBlockListViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ResourceBlockViewModel[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceBlockViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="businessId")]
		public System.Nullable<System.Int32> BusinessId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedStatus")]
		public System.Nullable<System.Boolean> DeletedStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedTime")]
		public string DeletedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public string EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.Int32> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repeat")]
		public RepeatViewModel Repeat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repeats")]
		public System.Nullable<System.Boolean> Repeats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public System.Nullable<System.Int32> ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public string StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.Int32> StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceBlockUpdateModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="allDay")]
		public System.Nullable<System.Boolean> AllDay { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.Int32> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repeat")]
		public RepeatInputModel Repeat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repeats")]
		public System.Nullable<System.Boolean> Repeats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.Int32> StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceBulkUpdateModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public AddressUpdateModel Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public AvailabilityInputModel Availability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public ContactUpdateModel Contact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public CustomFieldUpdateModel CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public string GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public ResourceOptionsUpdateModel Options { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recurringAvailability")]
		public System.Nullable<System.Boolean> RecurringAvailability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceIds")]
		public string[] ServiceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneId")]
		public string TimezoneId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceOptionsUpdateModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="bioLink")]
		public string BioLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingNotification")]
		public System.Nullable<System.Int32> BookingNotification { get; set; }
		
		/// <summary>
		/// 0 = OnSched Availability, 1 = Google Calendar, 2 = Outlook Calendar
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calendarAvailability")]
		public System.Nullable<System.Int32> CalendarAvailability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayColor")]
		public string DisplayColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effectiveDate")]
		public System.Nullable<System.DateTimeOffset> EffectiveDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="googleCalendarId")]
		public string GoogleCalendarId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hourly")]
		public System.Nullable<System.Double> Hourly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ignoreBusinessHours")]
		public System.Nullable<System.Boolean> IgnoreBusinessHours { get; set; }
		
		/// <summary>
		/// 0 = None, 1=Online Bookings 2=All Bookings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationType")]
		public System.Nullable<System.Int32> NotificationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outlookCalendarId")]
		public string OutlookCalendarId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortKey")]
		public System.Nullable<System.Int32> SortKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceGroupInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceGroupListViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ResourceGroupViewModel[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceGroupViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="bookingNotification")]
		public System.Nullable<System.Int32> BookingNotification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedStatus")]
		public System.Nullable<System.Boolean> DeletedStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedTime")]
		public System.Nullable<System.DateTimeOffset> DeletedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceGroupUpdateModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceHourViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.Int32> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.Int32> StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceHoursViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="fri")]
		public ResourceHourViewModel Fri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mon")]
		public ResourceHourViewModel Mon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sat")]
		public ResourceHourViewModel Sat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sun")]
		public ResourceHourViewModel Sun { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thu")]
		public ResourceHourViewModel Thu { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tue")]
		public ResourceHourViewModel Tue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wed")]
		public ResourceHourViewModel Wed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceImageInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="imageFileData")]
		public string ImageFileData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageFileName")]
		public string ImageFileName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public AddressInputModel Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public AvailabilityInputModel Availability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public ContactInputModel Contact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public CustomFieldInputModel CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public string GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Options for the new resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public ResourceOptionsInputModel Options { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recurringAvailability")]
		public System.Nullable<System.Boolean> RecurringAvailability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceIds")]
		public string[] ServiceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneId")]
		public string TimezoneId { get; set; }
	}
	
	/// <summary>
	/// Options for the new resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceOptionsInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="bioLink")]
		public string BioLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingNotification")]
		public System.Nullable<System.Int32> BookingNotification { get; set; }
		
		/// <summary>
		/// 0 = OnSched Availability, 1 = Google Calendar, 2 = Outlook Calendar
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calendarAvailability")]
		public System.Nullable<System.Int32> CalendarAvailability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayColor")]
		public string DisplayColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effectiveDate")]
		public System.Nullable<System.DateTimeOffset> EffectiveDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="googleCalendarId")]
		public string GoogleCalendarId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hourly")]
		public System.Nullable<System.Double> Hourly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ignoreBusinessHours")]
		public System.Nullable<System.Boolean> IgnoreBusinessHours { get; set; }
		
		/// <summary>
		/// 0 = None, 1=Online Bookings 2=All Bookings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationType")]
		public System.Nullable<System.Int32> NotificationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outlookCalendarId")]
		public string OutlookCalendarId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortKey")]
		public System.Nullable<System.Int32> SortKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceListViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ResourceViewModel[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public AddressViewModel Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public ResourceHoursViewModel Availability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bioLink")]
		public string BioLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingNotification")]
		public System.Nullable<System.Int32> BookingNotification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="calendarAvailability")]
		public System.Nullable<System.Int32> CalendarAvailability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public ContactViewModel Contact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public CustomFieldInputModel CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedStatus")]
		public System.Nullable<System.Boolean> DeletedStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedTime")]
		public System.Nullable<System.DateTimeOffset> DeletedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effectiveDate")]
		public System.Nullable<System.DateTimeOffset> EffectiveDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="googleCalendarAuthUrl")]
		public string GoogleCalendarAuthUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="googleCalendarAuthorized")]
		public System.Nullable<System.Boolean> GoogleCalendarAuthorized { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="googleCalendarId")]
		public string GoogleCalendarId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public System.Nullable<System.Int32> GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hourly")]
		public System.Nullable<System.Double> Hourly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ignoreBusinessHours")]
		public System.Nullable<System.Boolean> IgnoreBusinessHours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notificationType")]
		public System.Nullable<System.Int32> NotificationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		/// <summary>
		/// Options for the new resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public ResourceOptionsInputModel Options { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outlookCalendarAuthUrl")]
		public string OutlookCalendarAuthUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outlookCalendarAuthorized")]
		public System.Nullable<System.Boolean> OutlookCalendarAuthorized { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outlookCalendarId")]
		public string OutlookCalendarId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public PhoneViewModel Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recurringAvailability")]
		public System.Nullable<System.Boolean> RecurringAvailability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="services")]
		public ResourceServiceViewModel[] Services { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skypeName")]
		public string SkypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortKey")]
		public System.Nullable<System.Int32> SortKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneIana")]
		public string TimezoneIana { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneId")]
		public string TimezoneId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneOffset")]
		public System.Nullable<System.Int32> TimezoneOffset { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceServiceViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public System.Nullable<System.Int32> ServiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceUpdateModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public AddressUpdateModel Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public AvailabilityInputModel Availability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public ContactUpdateModel Contact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public CustomFieldUpdateModel CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public string GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public ResourceOptionsUpdateModel Options { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recurringAvailability")]
		public System.Nullable<System.Boolean> RecurringAvailability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceIds")]
		public string[] ServiceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneId")]
		public string TimezoneId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourcesInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public ResourceInputModel[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourcesUpdateModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public ResourceBulkUpdateModel[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public AvailabilityInputModel Availability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingsPerSlot")]
		public System.Nullable<System.Int32> BookingsPerSlot { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interval")]
		public System.Nullable<System.Int32> Interval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceGroupId")]
		public string ResourceGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleListViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ScheduleViewModel[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public CalendarHoursViewModel Availability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingsPerSlot")]
		public System.Nullable<System.Int32> BookingsPerSlot { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedStatus")]
		public System.Nullable<System.Boolean> DeletedStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedTime")]
		public System.Nullable<System.DateTimeOffset> DeletedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interval")]
		public System.Nullable<System.Int32> Interval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="primary")]
		public System.Nullable<System.Boolean> Primary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceGroupId")]
		public string ResourceGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleUpdateModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public AvailabilityInputModel Availability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingsPerSlot")]
		public System.Nullable<System.Int32> BookingsPerSlot { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interval")]
		public System.Nullable<System.Int32> Interval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceGroupId")]
		public string ResourceGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceAllocationInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="bookingLimit")]
		public System.Nullable<System.Int32> BookingLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.Int32> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repeat")]
		public RepeatInputModel Repeat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repeats")]
		public System.Nullable<System.Boolean> Repeats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.Int32> StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceAllocationListViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ServiceAllocationViewModel[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceAllocationViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="bookingCount")]
		public System.Nullable<System.Int32> BookingCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingLimit")]
		public System.Nullable<System.Int32> BookingLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedStatus")]
		public System.Nullable<System.Boolean> DeletedStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedTime")]
		public string DeletedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public string EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.Int32> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repeat")]
		public RepeatViewModel Repeat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repeats")]
		public System.Nullable<System.Boolean> Repeats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceAddress")]
		public AddressViewModel ResourceAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceDescription")]
		public string ResourceDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceImageUrl")]
		public string ResourceImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourcePhone")]
		public PhoneViewModel ResourcePhone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceDescription")]
		public string ServiceDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceDuration")]
		public System.Nullable<System.Int32> ServiceDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public string ServiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceImageUrl")]
		public string ServiceImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public string StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.Int32> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneName")]
		public string TimezoneName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneOffset")]
		public System.Nullable<System.Int32> TimezoneOffset { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceAllocationUpdateModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="bookingLimit")]
		public System.Nullable<System.Int32> BookingLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.Int32> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repeat")]
		public RepeatInputModel Repeat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repeats")]
		public System.Nullable<System.Boolean> Repeats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.Int32> StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceAllocationsInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="serviceAllocations")]
		public ServiceAllocationInputModel[] ServiceAllocations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceAvailabilityViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="ignoreBusinessHours")]
		public System.Nullable<System.Boolean> IgnoreBusinessHours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public System.Nullable<System.Int32> ServiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weekdays")]
		public AvailabilityViewModel2 Weekdays { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceBlockInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.Int32> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repeat")]
		public RepeatInputModel Repeat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repeats")]
		public System.Nullable<System.Boolean> Repeats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.Int32> StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceBlockListViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ServiceBlockViewModel[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceBlockViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="deletedStatus")]
		public System.Nullable<System.Boolean> DeletedStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedTime")]
		public string DeletedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public string EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.Int32> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repeat")]
		public RepeatViewModel Repeat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repeats")]
		public System.Nullable<System.Boolean> Repeats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public string ServiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public string StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.Int32> StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceBlockUpdateModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.Int32> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repeat")]
		public RepeatUpdateModel Repeat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repeats")]
		public System.Nullable<System.Boolean> Repeats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.Int32> StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceCalendarInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="calendarId")]
		public string CalendarId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public string ServiceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceCalendarViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="calendarId")]
		public string CalendarId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="calendarName")]
		public string CalendarName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public string ServiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceFeesInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="cancellationFeeAmount")]
		public System.Nullable<System.Double> CancellationFeeAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cancellationFeeTaxable")]
		public System.Nullable<System.Boolean> CancellationFeeTaxable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="feeAmount")]
		public System.Nullable<System.Double> FeeAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="feeTaxable")]
		public System.Nullable<System.Boolean> FeeTaxable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nonRefundable")]
		public System.Nullable<System.Boolean> NonRefundable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceFeesUpdateModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="cancellationFeeAmount")]
		public System.Nullable<System.Double> CancellationFeeAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cancellationFeeTaxable")]
		public System.Nullable<System.Boolean> CancellationFeeTaxable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="feeAmount")]
		public System.Nullable<System.Double> FeeAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="feeTaxable")]
		public System.Nullable<System.Boolean> FeeTaxable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nonRefundable")]
		public System.Nullable<System.Boolean> NonRefundable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceGroupInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<System.Int32> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceGroupListViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ServiceGroupViewModel[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceGroupViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="companyId")]
		public string CompanyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDeleted")]
		public System.Nullable<System.Boolean> IsDeleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<System.Int32> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceHourViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.Int32> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.Int32> StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceHoursViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="fri")]
		public ServiceHourViewModel Fri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mon")]
		public ServiceHourViewModel Mon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sat")]
		public ServiceHourViewModel Sat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sun")]
		public ServiceHourViewModel Sun { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thu")]
		public ServiceHourViewModel Thu { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tue")]
		public ServiceHourViewModel Tue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wed")]
		public ServiceHourViewModel Wed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceImageInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="imageFileData")]
		public string ImageFileData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageFileName")]
		public string ImageFileName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public AvailabilityInputModel Availability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingInterval")]
		public System.Nullable<System.Int32> BookingInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingLimit")]
		public System.Nullable<System.Int32> BookingLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public CustomFieldInputModel CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fees")]
		public ServiceFeesInputModel Fees { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxCapacity")]
		public System.Nullable<System.Int32> MaxCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxGroupSize")]
		public System.Nullable<System.Int32> MaxGroupSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mediaPageUrl")]
		public string MediaPageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public ServiceOptionsInputModel Options { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="public")]
		public System.Nullable<System.Boolean> Public { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceGroupId")]
		public string ServiceGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public ServiceSettingsInputModel Settings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceOptionsInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="consumerPadding")]
		public System.Nullable<System.Boolean> ConsumerPadding { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultService")]
		public System.Nullable<System.Boolean> DefaultService { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="durationInterval")]
		public System.Nullable<System.Int32> DurationInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="durationMax")]
		public System.Nullable<System.Int32> DurationMax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="durationMin")]
		public System.Nullable<System.Int32> DurationMin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="durationSelect")]
		public System.Nullable<System.Boolean> DurationSelect { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="padding")]
		public System.Nullable<System.Int32> Padding { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceSettingsInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="bookAheadUnit")]
		public System.Nullable<System.Int32> BookAheadUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookAheadValue")]
		public System.Nullable<System.Int32> BookAheadValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookInAdvance")]
		public System.Nullable<System.Int32> BookInAdvance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceListViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ServiceViewModel[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public ServiceHoursViewModel Availability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookAheadUnit")]
		public System.Nullable<System.Int32> BookAheadUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookAheadValue")]
		public System.Nullable<System.Int32> BookAheadValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookInAdvance")]
		public System.Nullable<System.Int32> BookInAdvance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingInterval")]
		public System.Nullable<System.Int32> BookingInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingLimit")]
		public System.Nullable<System.Int32> BookingLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="calendarId")]
		public string CalendarId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="calendarResourceGroupId")]
		public string CalendarResourceGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cancellationFeeAmount")]
		public System.Nullable<System.Double> CancellationFeeAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cancellationFeeTaxable")]
		public System.Nullable<System.Boolean> CancellationFeeTaxable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="companyId")]
		public string CompanyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consumerPadding")]
		public System.Nullable<System.Boolean> ConsumerPadding { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public CustomFieldInputModel CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dailyBookingLimitCount")]
		public System.Nullable<System.Int32> DailyBookingLimitCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dailyBookingLimitMinutes")]
		public System.Nullable<System.Int32> DailyBookingLimitMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultService")]
		public System.Nullable<System.Boolean> DefaultService { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="durationInterval")]
		public System.Nullable<System.Int32> DurationInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="durationMax")]
		public System.Nullable<System.Int32> DurationMax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="durationMin")]
		public System.Nullable<System.Int32> DurationMin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="durationSelect")]
		public System.Nullable<System.Boolean> DurationSelect { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="feeAmount")]
		public System.Nullable<System.Double> FeeAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="feeTaxable")]
		public System.Nullable<System.Boolean> FeeTaxable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxBookingLimit")]
		public System.Nullable<System.Int32> MaxBookingLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxCapacity")]
		public System.Nullable<System.Int32> MaxCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxGroupSize")]
		public System.Nullable<System.Int32> MaxGroupSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResourceBookingLimit")]
		public System.Nullable<System.Int32> MaxResourceBookingLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mediaPageUrl")]
		public string MediaPageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nonRefundable")]
		public System.Nullable<System.Boolean> NonRefundable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="padding")]
		public System.Nullable<System.Int32> Padding { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roundRobin")]
		public System.Nullable<System.Int32> RoundRobin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceGroupId")]
		public System.Nullable<System.Int32> ServiceGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceGroupName")]
		public string ServiceGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showOnline")]
		public System.Nullable<System.Boolean> ShowOnline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceOptionsUpdateModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="consumerPadding")]
		public System.Nullable<System.Boolean> ConsumerPadding { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultService")]
		public System.Nullable<System.Boolean> DefaultService { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="durationInterval")]
		public System.Nullable<System.Int32> DurationInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="durationMax")]
		public System.Nullable<System.Int32> DurationMax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="durationMin")]
		public System.Nullable<System.Int32> DurationMin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="durationSelect")]
		public System.Nullable<System.Boolean> DurationSelect { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="padding")]
		public System.Nullable<System.Int32> Padding { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceSettingsUpdateModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="bookAheadUnit")]
		public System.Nullable<System.Int32> BookAheadUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookAheadValue")]
		public System.Nullable<System.Int32> BookAheadValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookInAdvance")]
		public System.Nullable<System.Int32> BookInAdvance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceUpdateModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public AvailabilityInputModel Availability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingInterval")]
		public System.Nullable<System.Int32> BookingInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingLimit")]
		public System.Nullable<System.Int32> BookingLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public CustomFieldUpdateModel CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fees")]
		public ServiceFeesUpdateModel Fees { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxCapacity")]
		public System.Nullable<System.Int32> MaxCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxGroupSize")]
		public System.Nullable<System.Int32> MaxGroupSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mediaPageUrl")]
		public string MediaPageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public ServiceOptionsUpdateModel Options { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="public")]
		public System.Nullable<System.Boolean> Public { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceGroupId")]
		public string ServiceGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public ServiceSettingsUpdateModel Settings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SystemTimezoneViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseUtcOffset")]
		public System.Nullable<System.Int32> BaseUtcOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="daylightName")]
		public string DaylightName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="standardName")]
		public string StandardName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportsDaylightSavingTime")]
		public System.Nullable<System.Boolean> SupportsDaylightSavingTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneIana")]
		public string TimezoneIana { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneId")]
		public string TimezoneId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimezoneViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regions")]
		public string[] Regions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezones")]
		public TimezonesViewModel[] Timezones { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimezonesViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneIanna")]
		public string TimezoneIanna { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tzOffset")]
		public System.Nullable<System.Int32> TzOffset { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List Appointments
		/// <p>Use this endpoint to return a <b>List of Appointments</b>. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further. For more information: <a href="https://onsched.readme.io/docs/appointments-overview">Appointments Overview</a></p>
		/// SetupV1AppointmentsGetByLocationIdAndEmailAndLastnameAndServiceIdAndCalendarIdAndResourceIdAndCustomerIdAndServiceAllocationIdAndStartDateAndEndDateAndStatusAndBookedByAndOffsetAndLimit setup/v1/appointments
		/// </summary>
		/// <param name="locationId">id of business location, defaults to primary business location</param>
		/// <param name="email">Filter appointments by email address</param>
		/// <param name="lastname">Filter appointments by lastname or part of</param>
		/// <param name="serviceId">Filter appointments by service</param>
		/// <param name="calendarId">Filter appointments by calendar</param>
		/// <param name="resourceId">Filter appointments by resource</param>
		/// <param name="customerId">Filter appointments by customer</param>
		/// <param name="serviceAllocationId">Filter appointments by service allocation</param>
		/// <param name="startDate">Format YYYY-MM-DD: Filter appointments by on/after startDate</param>
		/// <param name="endDate">Format YYYY-MM-DD: Filter appointments on/before endDate</param>
		/// <param name="status">Filter appointments by status: IN, BK, CN, RE, RS</param>
		/// <param name="bookedBy">Filter appointments by user email who booked</param>
		/// <param name="offset">Starting row of page, default 0</param>
		/// <param name="limit">Page limit default 20, max 100</param>
		/// <returns>Success</returns>
		public async Task<AppointmentListViewModel> SetupV1AppointmentsGetByLocationIdAndEmailAndLastnameAndServiceIdAndCalendarIdAndResourceIdAndCustomerIdAndServiceAllocationIdAndStartDateAndEndDateAndStatusAndBookedByAndOffsetAndLimitAsync(string locationId, string email, string lastname, string serviceId, string calendarId, string resourceId, string customerId, string serviceAllocationId, System.DateTimeOffset startDate, System.DateTimeOffset endDate, string status, string bookedBy, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/appointments?locationId=" + (locationId==null? "" : System.Uri.EscapeDataString(locationId))+"&email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&lastname=" + (lastname==null? "" : System.Uri.EscapeDataString(lastname))+"&serviceId=" + (serviceId==null? "" : System.Uri.EscapeDataString(serviceId))+"&calendarId=" + (calendarId==null? "" : System.Uri.EscapeDataString(calendarId))+"&resourceId=" + (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"&customerId=" + (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"&serviceAllocationId=" + (serviceAllocationId==null? "" : System.Uri.EscapeDataString(serviceAllocationId))+"&startDate=" + startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDate=" + endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&status=" + (status==null? "" : System.Uri.EscapeDataString(status))+"&bookedBy=" + (bookedBy==null? "" : System.Uri.EscapeDataString(bookedBy))+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppointmentListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Appointment
		/// <p>Use this endpoint to return an <b>Appointment</b> object. A valid <b>appointment id</b> is required. Find appointment id's by using the <i>GET​/setup​/v1​/appointments</i> endpoint.</p>
		/// SetupV1Appointments_idGet setup/v1/appointments/{id}
		/// </summary>
		/// <param name="id">id of appointment object</param>
		/// <returns>Success</returns>
		public async Task<AppointmentViewModel> SetupV1Appointments_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/appointments/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppointmentViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reassign Appointment
		/// <p>Use this endpoint to <b>Reassign</b> an appointment from one resource to another. The result returned is a single appointment that was reassigned to the target resource. A valid <b>appointment id</b> and <b>resource id</b> is required. Find appointment id's by using the <i>GET /setup/v1/appointments</i> endpoint, find resource id's by using the <i>GET ​/setup​/v1​/resources</i> endpoint.</p>
		/// SetupV1Appointments_idReassignResource_resourceIdPut setup/v1/appointments/{id}/reassign/resource/{resourceId}
		/// </summary>
		/// <param name="id">id of appointment object</param>
		/// <param name="resourceId">id of target resource</param>
		/// <returns>Success</returns>
		public async Task<AppointmentViewModel> SetupV1Appointments_idReassignResource_resourceIdPutAsync(string id, string resourceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/appointments/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/reassign/resource/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppointmentViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Users
		/// <p>Use this endpoint to return a <b>List of Business Users and their Roles</b>. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
		/// SetupV1BusinessusersGetByLocationIdAndEmailAndRoleAndOffsetAndLimit setup/v1/businessusers
		/// </summary>
		/// <param name="locationId">id of business location, defaults to primary business location</param>
		/// <param name="email">Filter by email address</param>
		/// <param name="role">Filter user role</param>
		/// <param name="offset">Starting row of page, default 0</param>
		/// <param name="limit">Page limit default 20, max 100</param>
		/// <returns>Success</returns>
		public async Task<BusinessUserListViewModel> SetupV1BusinessusersGetByLocationIdAndEmailAndRoleAndOffsetAndLimitAsync(string locationId, string email, string role, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/businessusers?locationId=" + (locationId==null? "" : System.Uri.EscapeDataString(locationId))+"&email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&role=" + (role==null? "" : System.Uri.EscapeDataString(role))+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BusinessUserListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create User
		/// <p>Use this endpoint to <b>Create</b> a Business User. If not specified, the business location defaults to the primary business location. </p>
		/// <p>Required fields: <b>Name</b>, <b>Email</b> and <b>Role</b><b>Note:</b> If the businessUser is a bookable resource (bizresource) then a resourceId is required.</p>
		/// <p>For role, use one of the values listed. <b>Business Roles Include: bizowner</b> (Business Owner), <b>bizadmin</b> (Business Administrator), <b>bizresource</b> (Business User - Bookable Resource).</p>
		/// <p>The <b>sendRegistrationInvite</b> parameter is available to API consumers for their own use. It provides no added functionality in OnSched.</p>
		/// SetupV1BusinessusersPost setup/v1/businessusers
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BusinessUserViewModel> SetupV1BusinessusersPostAsync(BusinessUserInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/businessusers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BusinessUserViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List User Permissions
		/// <p>Use this endpoint to return a <b>List of Business User Permissions by Role</b>. Results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
		/// SetupV1BusinessusersPermissionsGetByRoleAndOffsetAndLimit setup/v1/businessusers/permissions
		/// </summary>
		/// <param name="role">Filter permissions by role</param>
		/// <param name="offset">Starting row of page, default 0</param>
		/// <param name="limit">Page limit default 20, max 100</param>
		/// <returns>Success</returns>
		public async Task<BusinessPermissionListViewModel> SetupV1BusinessusersPermissionsGetByRoleAndOffsetAndLimitAsync(string role, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/businessusers/permissions?role=" + (role==null? "" : System.Uri.EscapeDataString(role))+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BusinessPermissionListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List User Companies
		/// <p>Use this endpoint to return a <b>List of Companies</b> associated with the business users email requested. A business user <b>email</b> address is required. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
		/// SetupV1Businessusers_emailCompaniesGetBySearchTextAndOffsetAndLimit setup/v1/businessusers/{email}/companies
		/// </summary>
		/// <param name="email">Email of business user</param>
		/// <param name="searchText">All or partial company name</param>
		/// <param name="offset">Starting row of page, default 0</param>
		/// <param name="limit">Page limit default 20, max 100</param>
		/// <returns>Success</returns>
		public async Task<AuthorizedCompanyListViewModel> SetupV1Businessusers_emailCompaniesGetBySearchTextAndOffsetAndLimitAsync(string email, string searchText, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/businessusers/"+ (email==null? "" : System.Uri.EscapeDataString(email))+"/companies&searchText=" + (searchText==null? "" : System.Uri.EscapeDataString(searchText))+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AuthorizedCompanyListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete User
		/// <p>Use this endpoint to permanently <b>Delete</b> a Business User. A valid <b>businessUser id</b> is required.</p>
		/// SetupV1Businessusers_idDelete setup/v1/businessusers/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task SetupV1Businessusers_idDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/businessusers/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get User
		/// <p>Use this endpoint to return a <b>Business User</b> object. A valid <b>businessUser id</b> is required. Find businessUser id's using the <i>GET /setup/v1/businessusers</i> endpoint.</p>
		/// SetupV1Businessusers_idGet setup/v1/businessusers/{id}
		/// </summary>
		/// <param name="id">id of businessUser object</param>
		/// <returns>Success</returns>
		public async Task<BusinessUserViewModel> SetupV1Businessusers_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/businessusers/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BusinessUserViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update User
		/// <p>Use this endpoint to <b>Update</b> a Business User. A valid <b>businessUser id</b> is required.</p>
		/// <p>
		/// <b>Business Roles Include: bizowner</b> (Business Owner), <b>bizadmin</b> (Business Administrator), <b>bizresource</b> (Business User - Bookable Resource).</p>
		/// SetupV1Businessusers_idPut setup/v1/businessusers/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BusinessUserViewModel> SetupV1Businessusers_idPutAsync(string id, BusinessUserUpdateModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/businessusers/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BusinessUserViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Calendars
		/// <p>Use this endpoint to return a <b>List of Calendars</b> from the requested location. If not specified, the business location defaults to the primary business location. </p>
		/// SetupV1CalendarsGetByLocationIdAndDeletedAndOffsetAndLimit setup/v1/calendars
		/// </summary>
		/// <param name="locationId">id of business location, defaults to primary business location</param>
		/// <param name="deleted">Filter by deleted status</param>
		/// <param name="offset">Starting row of page, default 0</param>
		/// <param name="limit">Page limit default 20, max 100</param>
		/// <returns>Success</returns>
		public async Task<ScheduleListViewModel> SetupV1CalendarsGetByLocationIdAndDeletedAndOffsetAndLimitAsync(string locationId, bool deleted, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/calendars?locationId=" + (locationId==null? "" : System.Uri.EscapeDataString(locationId))+"&deleted="+deleted+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScheduleListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DEPRECATING: Create
		/// <p>
		/// <b>DEPRECATING:</b> Create Calendar</p>
		/// <p>We are no longer supporting Multiple Calendar Functionality as it is part of our Legacy Application and has no relevance in the API.</p>
		/// SetupV1CalendarsPost setup/v1/calendars
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ScheduleViewModel> SetupV1CalendarsPostAsync(ScheduleInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/calendars";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScheduleViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Calendar Block
		/// <p>Use this endpoint to permanently <b>Delete</b> a calendar block. A valid <b>calendarBlock id</b> is required.</p>
		/// SetupV1CalendarsBlock_idDelete setup/v1/calendars/block/{id}
		/// </summary>
		/// <param name="id">id of a calendarBlock object</param>
		/// <returns>Success</returns>
		public async Task<CalendarBlockViewModel> SetupV1CalendarsBlock_idDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/calendars/block/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CalendarBlockViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Calendar Block
		/// <p>Use this endpoint to <b>Create</b> a Calendar Block. A valid <b>calendarBlock id</b> is required. Refer to the <i>POST ​/setup​/v1​/calendars​/{id}​/block</i> endpoint for fieldnames and details.</p>
		/// SetupV1CalendarsBlock_idPut setup/v1/calendars/block/{id}
		/// </summary>
		/// <param name="id">id of calendarBlock object</param>
		/// <param name="requestBody">Resource Block input model</param>
		/// <returns>Success</returns>
		public async Task<CalendarBlockViewModel> SetupV1CalendarsBlock_idPutAsync(string id, CalendarBlockUpdateModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/calendars/block/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CalendarBlockViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Calendar Block
		/// <p>Use this endpoint to return a <b>Calendar Block</b>. A valid <b>calendarBlock id</b> is required. </p>
		/// SetupV1CalendarsBlocks_idGet setup/v1/calendars/blocks/{id}
		/// </summary>
		/// <param name="id">id of calendarBlock object</param>
		/// <returns>Success</returns>
		public async Task<CalendarBlockViewModel> SetupV1CalendarsBlocks_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/calendars/blocks/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CalendarBlockViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Calendar
		/// <p>Use this endpoint to <b>Delete</b> a calendar object. A valid <b>calendar id</b> is required. The calendar is not permanently deleted and can be recovered by using the <i>PUT ​/setup​/v1​/calendars​/{id}​/recover </i>endpoint.</p>
		/// SetupV1Calendars_idDelete setup/v1/calendars/{id}
		/// </summary>
		/// <param name="id">id of calendar object</param>
		/// <returns>Success</returns>
		public async Task<ScheduleViewModel> SetupV1Calendars_idDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/calendars/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScheduleViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Calendar
		/// <p>Use this endpoint to return a <b>Calendar</b> object. A valid <b>calendar id</b> is required.</p>
		/// SetupV1Calendars_idGet setup/v1/calendars/{id}
		/// </summary>
		/// <param name="id">id of calendar object</param>
		/// <returns>Success</returns>
		public async Task<ScheduleViewModel> SetupV1Calendars_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/calendars/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScheduleViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Calendar
		/// <p>Use this endpoint to <b>Update</b> a calendar object. A valid <b>calendar id</b> is required. When your company was created a calendar object was automatically created with 24-hour weekly availability. Its <b>name = Main</b>, the <b>type = resource</b> and by default the <b>interval = 30 mins</b>. We are currently supporting resource calendar type. Other types were part of our Legacy Application and has no relevance in the API product.</p>
		/// SetupV1Calendars_idPut setup/v1/calendars/{id}
		/// </summary>
		/// <param name="id">id of calendar object</param>
		/// <param name="requestBody">Input model for the calendar object</param>
		/// <returns>Success</returns>
		public async Task<ScheduleViewModel> SetupV1Calendars_idPutAsync(string id, ScheduleUpdateModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/calendars/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScheduleViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create Calendar Block
		/// <p>Use this endpoint to <b>Create</b> a Calendar Block. A valid <b>calendar id</b> is required.</p>
		/// <p>Required fields: <b>startDate, endDate, startTime, endTime</b> and <b>reason</b>.</p>
		/// <p>Calendar blocks can be set to specific time ranges or for the whole day. Th block a whole day set the startTime to 0 and endTime to 2400.</p>
		/// <p>Calendar blocks can be for a specific date range instance or set to repeat at a specified frequency.</p>
		/// <p>
		/// <b>Repeat object: (repeats = true)</b>
		/// </p>
		/// <p>The <b>frequency</b> can be set to a value of <b>D, W or M</b> for <b>Day, Week</b> or <b>Month</b> respectively.</p>
		/// <p>Use the <b>interval</b> property to specify the interval that the block repeats. For example, an interval of 2 for a weekly block means that the block will repeat every 2nd week beginning at the day specified. A daily block with an interval of 10 means the block will repeat every 10 days. The interval property applies to all repeat frequencies. <b>If using the repeat functionality an interval value is required</b>.</p>
		/// <p>
		/// <b>DAILY BLOCKS</b>: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of “1” repeats every day, and an interval value of “3” is every 3rd day.</p>
		/// <p>
		/// <b>WEEKLY BLOCKS</b>: Will repeat only on the specified days of the week for the date range specified. For weekly the <b>frequency</b>  is required and should be set to <b>“W”</b>.  You must specify the <b>weekdays</b> parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are <b>0,1,2,3,4,5,6</b> where <b>0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday</b>. For example, a weekly frequency with an interval of “1”, and an entry of weekdays = “24”, will repeat each week on Tuesday and Thursday for the duration of the block date range.</p>
		/// <p>
		/// <b>MONTHLY BLOCKS</b>: Will repeat either on the day of the month specified in the <b>monthDay</b> property or on the day of the week and week of the month specified by the <b>monthType</b> property.  In both cases <b>frequency</b> is required and should be set to <b>“M”</b>, monthly, <b>monthDay</b> is the day of the month you want blocked.  If monthDay=’15’ this means to block the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses “day of the week and week of the month” scenario.  There are two possible values for monthType: <b>D for Day of Month</b> or <b>W for Week of Month.</b> For <b>monthType D</b>, monthDay value must be between 1 and 31. It is the day of the month to repeat on. For <b>monthType M</b>, monthDay value contains 2 digits: day of week (0-6), (0,1,2,3,4,5,6 where 0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType=”M” and monthDay=”43”.</p>
		/// <p>
		/// <b>Repeats will end on the date specified by the end date.</b>
		/// </p>
		/// SetupV1Calendars_idBlockPost setup/v1/calendars/{id}/block
		/// </summary>
		/// <param name="id">id of calendar object</param>
		/// <returns>Success</returns>
		public async Task<ResourceBlockViewModel> SetupV1Calendars_idBlockPostAsync(string id, CalendarBlockInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/calendars/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/block";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceBlockViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Calendar Blocks
		/// <p>Use this endpoint to return a <b>List of Calendar Blocks</b> for the requested calendar. A valid <b>calendar id</b> is required. </p>
		/// SetupV1Calendars_idBlocksGetByOffsetAndLimit setup/v1/calendars/{id}/blocks
		/// </summary>
		/// <param name="id">id of calendar to list blocks</param>
		/// <param name="offset">Starting row of page, default 0</param>
		/// <param name="limit">Page limit default 20, max 100</param>
		/// <returns>Valid response</returns>
		public async Task<CalendarBlockListViewModel> SetupV1Calendars_idBlocksGetByOffsetAndLimitAsync(string id, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/calendars/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/blocks&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CalendarBlockListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Recover Calendar
		/// <p>Use this endpoint to <b>Recover</b> a previously deleted calendar object. A valid <b>calendar id</b> is required.</p>
		/// SetupV1Calendars_idRecoverPut setup/v1/calendars/{id}/recover
		/// </summary>
		/// <param name="id">id of calendar object</param>
		/// <returns>Success</returns>
		public async Task<ScheduleViewModel> SetupV1Calendars_idRecoverPutAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/calendars/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/recover";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScheduleViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Calendar Services
		/// <p>Use this endpoint to return a <b>List of Linked Services</b> of a calendar object. A valid <b>calendar id</b> is required. Find calendar id's by using the <i>GET /setup/v1/calendars</i> endpoint.</p>
		/// SetupV1Calendars_idServicesGetByOffsetAndLimit setup/v1/calendars/{id}/services
		/// </summary>
		/// <param name="id">id of calendar object</param>
		/// <param name="offset">Starting row of page, default 0</param>
		/// <param name="limit">Page limit default 20, max 100</param>
		/// <returns>Success</returns>
		public async Task<ServiceListViewModel> SetupV1Calendars_idServicesGetByOffsetAndLimitAsync(string id, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/calendars/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/services&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Company
		/// <p>Use this endpoint to return the <b>Authorized Company</b> information. The company is the main entity that oversees all business locations defined below it, hierarchically. </p>
		/// <p>Access to the company credentials gives you access to all business locations defined in the authorized company. Client credentials resolve to a single company and are purposely hidden from this endpoint.</p>
		/// SetupV1CompaniesGet setup/v1/companies
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CompanyViewModel> SetupV1CompaniesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/companies";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CompanyViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Company
		/// <p>Use this endpoint to <b>Create</b> a new authorized company.</p>
		/// <p>
		/// <b>Note: Special API Partner credentials are required to access this endpoint.</b>
		/// </p>
		/// <p>The <b>name, registrationEmail, phone, country</b> and <b>timezoneName</b> are required fields. For <b>country</b> use the standard ISO 3166 2-character country code.</p>
		/// <p>The <b>timezoneName</b> must be expressed as an IANA Timezone e.g., <i>America/New_York</i>.</p>
		/// <p>For more information: <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">Timezone IANA Wiki</a></p>
		/// SetupV1CompaniesPost setup/v1/companies
		/// </summary>
		/// <param name="requestBody">Company Input Model</param>
		/// <returns>Success</returns>
		public async Task<CompanyViewModel> SetupV1CompaniesPostAsync(CompanyInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/companies";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CompanyViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update Company
		/// <p>Use this endpoint to <b>Update</b> the authorized company information. Your client credentials resolve to a single company. The timezoneName must be expressed as an IANA Timezone, e.g., <i>America/New_York</i>. </p>
		/// <p>For more information: <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">Timezone IANA Wiki</a></p>
		/// SetupV1CompaniesPut setup/v1/companies
		/// </summary>
		/// <param name="requestBody">Company Update Model</param>
		/// <returns>Success</returns>
		public async Task<CompanyViewModel> SetupV1CompaniesPutAsync(CompanyUpdateModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/companies";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CompanyViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Company Domains
		/// <p>Use this endpoint to return a <b>List of Company Domains</b> for the authorized company. To share the OnSchedJS booking widget on your website or in your application your domain must be listed.</p>
		/// SetupV1CompaniesDomainsGet setup/v1/companies/domains
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CompanyDomainListViewModel> SetupV1CompaniesDomainsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/companies/domains";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CompanyDomainListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Company Domain
		/// <p>Use this endpoint to <b>Create</b> an OnSchedJs domain for your authorized company. To share the OnSchedJS booking widget on your website or in your application you must add the domain.</p>
		/// SetupV1CompaniesDomainsPost setup/v1/companies/domains
		/// </summary>
		/// <param name="requestBody">Company Domain Input Model</param>
		/// <returns>Success</returns>
		public async Task<CompanyDomainViewModel> SetupV1CompaniesDomainsPostAsync(CompanyDomainInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/companies/domains";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CompanyDomainViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Company Domain
		/// <p>Use this endpoint to <b>Delete</b> an OnSchedJs domain from your authorized company. A valid <b>companyDomain id</b> is required.</p>
		/// SetupV1CompaniesDomains_idDelete setup/v1/companies/domains/{id}
		/// </summary>
		/// <param name="id">id of companyDomain object</param>
		/// <returns>Success</returns>
		public async Task<CompanyDomainViewModel> SetupV1CompaniesDomains_idDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/companies/domains/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CompanyDomainViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Company Domain
		/// <p>Use this endpoint to return a <b>Company Domain</b> object. A valid <b>companyDomain id</b> is required. </p>
		/// SetupV1CompaniesDomains_idGet setup/v1/companies/domains/{id}
		/// </summary>
		/// <param name="id">id of companyDomain object</param>
		/// <returns>Success</returns>
		public async Task<CompanyDomainViewModel> SetupV1CompaniesDomains_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/companies/domains/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CompanyDomainViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Company Domain
		/// <p>Use this endpoint to <b>Update</b> an OnSchedJs domain for your authorized company. A valid <b>companyDomain id</b> is required.</p>
		/// SetupV1CompaniesDomains_idPut setup/v1/companies/domains/{id}
		/// </summary>
		/// <param name="id">id of companyDomain object</param>
		/// <param name="requestBody">Company Domain Update Model</param>
		/// <returns>Success</returns>
		public async Task<CompanyDomainViewModel> SetupV1CompaniesDomains_idPutAsync(string id, CompanyDomainUpdateModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/companies/domains/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CompanyDomainViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Email Templates
		/// <p>Use this endpoint to return a <b>List of Email Templates</b> that are provided and may be customized. If the template has been customized, the customized property is true. The scope parameter indicates if the email template has been customized at the Business Location level or Company level. This endpoint returns <b>only company level templates</b>, so the scope is always company.</p>
		/// SetupV1CompaniesEmailTemplatesGet setup/v1/companies/email/templates
		/// </summary>
		/// <returns>Success</returns>
		public async Task<EmailTemplateListViewModel> SetupV1CompaniesEmailTemplatesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/companies/email/templates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EmailTemplateListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Master Template Settings
		/// <p>Use this endpoint to <b>Delete Custom Master Email Template Settings</b>. Deleting a custom master email template setting will reactivate the original default OnSched template settings.</p>
		/// SetupV1CompaniesEmailTemplatesMasterDelete setup/v1/companies/email/templates/master
		/// </summary>
		/// <returns>Success</returns>
		public async Task<MasterEmailTemplateSettingsViewModel> SetupV1CompaniesEmailTemplatesMasterDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/companies/email/templates/master";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MasterEmailTemplateSettingsViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Master Template Settings
		/// <p>Use this endpoint to return the <b>Master Email Template Settings</b>. Settings exist for showing or hiding email panels and for changing color schemes. </p>
		/// SetupV1CompaniesEmailTemplatesMasterGet setup/v1/companies/email/templates/master
		/// </summary>
		/// <returns>Success</returns>
		public async Task<MasterEmailTemplateSettingsViewModel> SetupV1CompaniesEmailTemplatesMasterGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/companies/email/templates/master";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MasterEmailTemplateSettingsViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Master Template Settings
		/// <p>Use this endpoint to <b>Create Custom Master Email Template Settings</b>. Settings exist for showing or hiding email panels and for changing color schemes. Use the <i>GET ​/setup​/v1​/companies​/email​/templates</i> endpoint to display the settings offered. Changes to the Master Template Settings will be reflected in all business locations associated with this company. </p>
		/// <p>The email template endpoints work a little differently than most. There are no endpoints to update the templates, we use the post endpoint to create a custom template instead. This endpoint creates a new custom Master Template Settings file that will be used instead. If you delete it you are deleting the custom template settings you created and the original default Master Template created by OnSched would be reactivated.</p>
		/// SetupV1CompaniesEmailTemplatesMasterPost setup/v1/companies/email/templates/master
		/// </summary>
		/// <returns>Success</returns>
		public async Task<MasterEmailTemplateSettingsViewModel> SetupV1CompaniesEmailTemplatesMasterPostAsync(MasterTemplateSettingsInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/companies/email/templates/master";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MasterEmailTemplateSettingsViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Email Template
		/// <p>Use this endpoint to return the requested <b>Email Template</b>. If it wasn't customized the default template is returned. The response content is in html format. A valid emailTemplate <b>name</b> is required. Find template names by using the: <i>GET ​/setup​/v1​/companies​/email​/templates</i> endpoint. Note: The master template cannot be accessed here. </p>
		/// <p>To create custom company email templates, go to the <i>POST ​/setup​/v1​/locations​/{id}​/email​/templates</i> endpoint and create a template using the Primary Business Location Id.</p>
		/// SetupV1CompaniesEmailTemplates_templateNameGet setup/v1/companies/email/templates/{templateName}
		/// </summary>
		/// <param name="templateName">Email template name</param>
		/// <returns>Success</returns>
		public async Task<ContentResult> SetupV1CompaniesEmailTemplates_templateNameGetAsync(string templateName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/companies/email/templates/"+ (templateName==null? "" : System.Uri.EscapeDataString(templateName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContentResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Regions
		/// <p>Use this endpoint to return a list of <b>Regions</b> in the authorized company. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further. </p>
		/// SetupV1CompaniesRegionsGetByOffsetAndLimit setup/v1/companies/regions
		/// </summary>
		/// <param name="offset">Starting row of page, default 0</param>
		/// <param name="limit">Page limit default 20, max 100</param>
		/// <returns>region object's</returns>
		public async Task<RegionListViewModel> SetupV1CompaniesRegionsGetByOffsetAndLimitAsync(int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/companies/regions?offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RegionListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Region
		/// <p>Use this endpoint to <b>Create</b> a region object. Regions can be mapped to business locations. They can be used by the locations endpoints to filter locations by region id.</p>
		/// SetupV1CompaniesRegionsPost setup/v1/companies/regions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RegionViewModel> SetupV1CompaniesRegionsPostAsync(RegionInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/companies/regions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RegionViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Region
		/// <p>Use this endpoint to <b>Delete</b> a region object. A valid <b>region id</b> is required. If the region is related to any business locations it won't be deleted. You must first remove any references to region id from the business locations prior to deleting.</p>
		/// SetupV1CompaniesRegions_idDelete setup/v1/companies/regions/{id}
		/// </summary>
		/// <param name="id">id of Region</param>
		/// <returns>Success</returns>
		public async Task<RegionViewModel> SetupV1CompaniesRegions_idDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/companies/regions/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RegionViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Region
		/// <p>Use this endpoint to return a <b>Region</b> object. A valid <b>region id</b> is required.</p>
		/// SetupV1CompaniesRegions_idGet setup/v1/companies/regions/{id}
		/// </summary>
		/// <param name="id">id of a region object</param>
		/// <returns>Success</returns>
		public async Task<RegionViewModel> SetupV1CompaniesRegions_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/companies/regions/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RegionViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Region
		/// <p>Use this endpoint to <b>Update</b> a region object. A valid <b>region id</b> is required.</p>
		/// SetupV1CompaniesRegions_idPut setup/v1/companies/regions/{id}
		/// </summary>
		/// <param name="id">id of Region</param>
		/// <param name="requestBody">Region Update Model</param>
		/// <returns>Success</returns>
		public async Task<RegionViewModel> SetupV1CompaniesRegions_idPutAsync(string id, RegionUpdateModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/companies/regions/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RegionViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Time Zones
		/// <p>Use this endpoint to return a <b>List of timezone names, timezoneIana and tzOffset values</b> calculated for the date requested. Daylight Savings may or may not apply depending on the date specified.</p>
		/// SetupV1CompaniesTimezones_dateGet setup/v1/companies/timezones/{date}
		/// </summary>
		/// <param name="date">"YYYY-MM-DD: Date for timezone info"</param>
		/// <returns>Success</returns>
		public async Task<TimezoneViewModel> SetupV1CompaniesTimezones_dateGetAsync(System.DateTimeOffset date, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/companies/timezones/"+date.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TimezoneViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Customers
		/// <p>Use this endpoint to return a <b>List of Customers</b>. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
		/// SetupV1CustomersGetByLocationIdAndGroupIdAndEmailAndLastnameAndDeletedAndOffsetAndLimit setup/v1/customers
		/// </summary>
		/// <param name="locationId">id of business location, defaults to primary business location</param>
		/// <param name="groupId">Filter by groupId</param>
		/// <param name="email">Filter by email address.</param>
		/// <param name="lastname">Search by lastname.</param>
		/// <param name="deleted">Filter by deleted status.</param>
		/// <param name="offset">Starting row of page, default 0</param>
		/// <param name="limit">Page limit default 20, max 100</param>
		/// <returns>Success</returns>
		public async Task<CustomerListViewModel> SetupV1CustomersGetByLocationIdAndGroupIdAndEmailAndLastnameAndDeletedAndOffsetAndLimitAsync(string locationId, string groupId, string email, string lastname, bool deleted, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/customers?locationId=" + (locationId==null? "" : System.Uri.EscapeDataString(locationId))+"&groupId=" + (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"&email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&lastname=" + (lastname==null? "" : System.Uri.EscapeDataString(lastname))+"&deleted="+deleted+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Customer
		/// <p>Use this endpoint to return a <b>Customer</b> object. A valid <b>customer id</b> is required. Find customer id's by using the <i>GET /setup/v1/customers</i> endpoint.</p>
		/// SetupV1Customers_idGet setup/v1/customers/{id}
		/// </summary>
		/// <param name="id">id of customer object</param>
		/// <returns>Success</returns>
		public async Task<CustomerViewModel> SetupV1Customers_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/customers/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Customer Data
		/// <p>Use this endpoint to return the <b>Customer</b> object. A valid <b>customer id</b> is required. Find customer id's using the <i>GET /setup/v1/customers</i> endpoint.</p>
		/// SetupV1Customers_idPrivacyGet setup/v1/customers/{id}/privacy
		/// </summary>
		/// <param name="id">id of customer object</param>
		/// <returns>Success</returns>
		public async Task<CustomerPrivacyViewModel> SetupV1Customers_idPrivacyGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/customers/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/privacy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerPrivacyViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Locations
		/// <p>Use this endpoint to <b>List Business Locations</b> associated with your company. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
		/// <p>
		/// <b>IMPORTANT DEPRECATION NOTICE</b>: The following online settings parameters were intended for internal use in our Portal application only. They will be deprecated on <b>OCTOBER 15, 2022</b>. These fields are currently part of the <b>SETTINGS</b> object in all location endpoints: <b>businessId, enabled, familyMembersEnabled, serviceLabel, resourceLabel, resourceAnyLabel, resourceSelection, liveMode, formFlow, availabilityForm, showServiceGroups, showOnSchedLogo, showBusinessLogo, disableAuthorization, hideNavBar, hideLocationNav, hideServiceGroupsNav, hideServicesNav, hideContinueBooking, returnToService, returnToAvailability, hideBreadCrumbNav.</b> If you are using these fields, please adjust your code to handle the deprecation or let us know by submitting a ticket to: <b><i>support@onsched.com</i></b> as we do not want to interrupt your existing workflows.</p>
		/// SetupV1LocationsGetByNameAndServiceIdAndFriendlyIdAndDeletedAndOffsetAndLimit setup/v1/locations
		/// </summary>
		/// <param name="name">Location name(full or partial) to filter on</param>
		/// <param name="serviceId">Find locations that offer this service</param>
		/// <param name="friendlyId">friendlyId of location</param>
		/// <param name="deleted">Filter locations on deleted status</param>
		/// <param name="offset">Starting row of page, default 0</param>
		/// <param name="limit">Page limit default 20, max 100</param>
		/// <returns>Success</returns>
		public async Task<LocationListViewModel> SetupV1LocationsGetByNameAndServiceIdAndFriendlyIdAndDeletedAndOffsetAndLimitAsync(string name, string serviceId, string friendlyId, bool deleted, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/locations?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&serviceId=" + (serviceId==null? "" : System.Uri.EscapeDataString(serviceId))+"&friendlyId=" + (friendlyId==null? "" : System.Uri.EscapeDataString(friendlyId))+"&deleted="+deleted+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LocationListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Location
		/// <p>Use this endpoint to <b>Create</b> a new business location. The result is a business location object with a GUID assigned to the location.</p>
		/// <p>The <b>name</b> and <b>timezoneName</b> fields are required. The <b>timezoneName</b> must be expressed as an IANA Timezone e.g., <i>America/New_York</i>. Refer to: <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">Timezone Wiki</a> for a listing of IANA time zones.</p>
		/// <p>
		/// <b>Business hours</b> are set by defining the <b>startTime</b> and <b>endTime</b> values for each day available/open. All days of the week must be provided when setting availability. Days are defined as <b>sun, mon, tue, wed, thu, fri and sat</b>. Start and End Times are entered in <b>military format. e.g., 800 is 8:00am, 2230 is 10:30pm</b>. If there is no physical location and the business hours are irrelevant, set the hours to open 24 hours by setting startTime=0 and endTime=2400. To set a whole day as unavailable, set both the startTime and endTime to 0. </p>
		/// <p>
		/// <b>Settings</b> can be set here. Booking timer minutes, book ahead restrictions and customer bookings per day are all available here. Please read about the settings scope parameter before setting these values as it may simplify your process.</p>
		/// <p>
		/// <b>Settings Scope</b> can be set to the company or the business location level. You can have all locations use the same company level settings or individual business locations can define their own, business location scope. If you want to use the company settings throughout all locations, do not pass in <b>settings element</b>. To create business location scoped settings, pass in the <b>settings element</b> with the field values defined in the post body. </p>
		/// <p>
		/// <b>Appointment Reminders</b> Reminder values are used to define how many hours, days, or weeks (interval value) prior to the appointment to send the reminder. <b>Interval</b> values are used to define the reminder interval: <b>1 = Hours</b>, <b>2 = Days</b> and <b>3 = Weeks</b>. The reminder fields are numbers. If you are using the hours interval, use a number from 1 to 24.</p>
		/// <p>Example 1: <b>emailFirstReminder:  1, emailFirstReminderInterval:  2</b> - results in 1st reminder being sent <b>1 Day before</b> the appointment time.</p>
		/// <p>Example 2: <b>emailSecondReminder: 3, emailSecondReminderInterval: 1</b> - results in 2nd reminder being sent <b>3 Hours before</b> the appointment time.</p>
		/// <p>
		/// <b>IMPORTANT DEPRECATION NOTICE</b>: The following online settings parameters were intended for internal use in our Portal application only. They will be deprecated on <b>OCTOBER 15, 2022</b>. These fields are currently part of the <b>SETTINGS</b> object in all location endpoints: <b>businessId, enabled, familyMembersEnabled, serviceLabel, resourceLabel, resourceAnyLabel, resourceSelection, liveMode, formFlow, availabilityForm, showServiceGroups, showOnSchedLogo, showBusinessLogo, disableAuthorization, hideNavBar, hideLocationNav, hideServiceGroupsNav, hideServicesNav, hideContinueBooking, returnToService, returnToAvailability, hideBreadCrumbNav.</b> If you are using these fields, please adjust your code to handle the deprecation or let us know by submitting a ticket to: <b><i>support@onsched.com</i></b> as we do not want to interrupt your existing workflows.</p>
		/// SetupV1LocationsPost setup/v1/locations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<LocationViewModel> SetupV1LocationsPostAsync(LocationInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/locations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LocationViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create Locations Bulk
		/// <p>Use this endpoint to <b>Create Bulk</b> business locations. The posted list of locations cannot exceed 100 location objects per transaction for performance purposes. The result is a list of new business location objects with a GUID assigned to each location.</p>
		/// <p>The <b>name</b> and <b>timezoneName</b> fields are required. The <b>timezoneName</b> must be expressed as an IANA Timezone e.g., <i>America/New_York</i>. Refer to: <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">Timezone Wiki</a> for a listing of IANA time zones.</p>
		/// <p>
		/// <b>Business hours</b> are set by defining the <b>startTime</b> and <b>endTime</b> values for each day available/open. All days of the week must be provided when setting availability. Days are defined as <b>sun, mon, tue, wed, thu, fri and sat</b>. Start and End Times are entered in <b>military format. e.g., 800 is 8:00am, 2230 is 10:30pm</b>. If there is no physical location and the business hours are irrelevant, set the hours to open 24 hours by setting startTime=0 and endTime=2400. To set a whole day as unavailable, set both the startTime and endTime to 0. </p>
		/// <p>
		/// <b>Settings</b> can be set here. Booking timer minutes, book ahead restrictions and customer bookings per day are all available here. Please read about the settings scope parameter before setting these values as it may simplify your process.</p>
		/// <p>
		/// <b>Settings Scope</b> can be set to the company or the business location level. You can have all locations use the same company level settings or individual business locations can define their own, business location scope. If you want to use the company settings throughout all locations, do not pass in <b>settings element</b>. To create business location scoped settings, pass in the <b>settings element</b> with the field values defined in the post body. </p>
		/// <p>
		/// <b>Appointment Reminders</b> Reminder values are used to define how many hours, days, or weeks (interval value) prior to the appointment to send the reminder. <b>Interval</b> values are used to define the reminder interval: <b>1 = Hours</b>, <b>2 = Days</b> and <b>3 = Weeks</b>. The reminder fields are numbers. If you are using the hours interval, use a number from 1 to 24.</p>
		/// <p>Example 1: <b>emailFirstReminder:  1, emailFirstReminderInterval:  2</b> - results in 1st reminder being sent <b>1 Day before</b> the appointment time.</p>
		/// <p>Example 2: <b>emailSecondReminder: 3, emailSecondReminderInterval: 1</b> - results in 2nd reminder being sent <b>3 Hours before</b> the appointment time.</p>
		/// <p>
		/// <b>IMPORTANT DEPRECATION NOTICE</b>: The following online settings parameters were intended for internal use in our Portal application only. They will be deprecated on <b>OCTOBER 15, 2022</b>. These fields are currently part of the <b>SETTINGS</b> object in all location endpoints: <b>businessId, enabled, familyMembersEnabled, serviceLabel, resourceLabel, resourceAnyLabel, resourceSelection, liveMode, formFlow, availabilityForm, showServiceGroups, showOnSchedLogo, showBusinessLogo, disableAuthorization, hideNavBar, hideLocationNav, hideServiceGroupsNav, hideServicesNav, hideContinueBooking, returnToService, returnToAvailability, hideBreadCrumbNav.</b> If you are using these fields, please adjust your code to handle the deprecation or let us know by submitting a ticket to: <b><i>support@onsched.com</i></b> as we do not want to interrupt your existing workflows.</p>
		/// SetupV1LocationsBulkPost setup/v1/locations/bulk
		/// </summary>
		/// <returns>Success</returns>
		public async Task<LocationViewModel[]> SetupV1LocationsBulkPostAsync(LocationsInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/locations/bulk";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LocationViewModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Unlink Service
		/// <p>Use this endpoint to <b>Unlink</b> a location service from a business location. A valid <b>locationService id</b> is required. Find location services by using the <i>GET ​/setup​/v1​/locations​/{id}​/services</i> endpoint. </p>
		/// SetupV1LocationsServices_idDelete setup/v1/locations/services/{id}
		/// </summary>
		/// <param name="id">id of locationService object</param>
		/// <returns>Success</returns>
		public async Task<LocationViewModel> SetupV1LocationsServices_idDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/locations/services/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LocationViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Linked Service
		/// <p>Use this endpoint to <b>Get a Linked Service</b>. A valid <b>locationService id</b> is required.</p>
		/// SetupV1LocationsServices_idGet setup/v1/locations/services/{id}
		/// </summary>
		/// <param name="id">id of locationService object</param>
		/// <returns>location service objects</returns>
		public async Task<BusinessServiceViewModel> SetupV1LocationsServices_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/locations/services/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BusinessServiceViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Location
		/// <p>Use this endpoint to <b>Delete</b> a business location. A valid business <b>location id</b> is required. The location is not permanently deleted and can be recovered by using the <i>PUT /setup​/v1​/locations​/{id}​/recover</i> endpoint.</p>
		/// SetupV1Locations_idDelete setup/v1/locations/{id}
		/// </summary>
		/// <param name="id">id of business location, defaults to primary business location</param>
		/// <returns>Success</returns>
		public async Task<LocationViewModel> SetupV1Locations_idDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/locations/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LocationViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Location
		/// <p>Use this endpoint to return a <b>Location</b> object. A valid <b>location id</b> is required. If not specified, the business location defaults to the primary business location. Find all business location id's, by using the <i>GET /consumer/v1/locations</i> endpoint.</p>
		/// <p>
		/// <b>IMPORTANT DEPRECATION NOTICE</b>: The following online settings parameters were intended for internal use in our Portal application only. They will be deprecated on <b>OCTOBER 15, 2022</b>. These fields are currently part of the <b>SETTINGS</b> object in all location endpoints: <b>businessId, enabled, familyMembersEnabled, serviceLabel, resourceLabel, resourceAnyLabel, resourceSelection, liveMode, formFlow, availabilityForm, showServiceGroups, showOnSchedLogo, showBusinessLogo, disableAuthorization, hideNavBar, hideLocationNav, hideServiceGroupsNav, hideServicesNav, hideContinueBooking, returnToService, returnToAvailability, hideBreadCrumbNav.</b> If you are using these fields, please adjust your code to handle the deprecation or let us know by submitting a ticket to: <b><i>support@onsched.com</i></b> as we do not want to interrupt your existing workflows.</p>
		/// SetupV1Locations_idGet setup/v1/locations/{id}
		/// </summary>
		/// <param name="id">id of business location, defaults to primary business location</param>
		/// <returns>Success</returns>
		public async Task<LocationViewModel> SetupV1Locations_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/locations/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LocationViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Location
		/// <p>Use this endpoint to <b>Update</b> a business location object. A valid business <b>location id</b> is required. The optional removeRegion query parameter can be used to remove the region relationship from the location.</p>
		/// <p>If the settings element is populated the scope will be set to the business location with the settings supplied. If your settings are uniform across all locations, then do not supply the settings element and the location will use the settings defined on the primary business location (company scoped). Company scoped settings cascade down to the locations. You can override any location that needs different settings by providing settings in the update model. Use the <i>PUT /setup/v1/locations/{id}/settings/scope/{settingsScope}</i> endpoint to change the settings scope only. This is typically used when switching from business location scope back to company.</p>
		/// <p>Refer to: <i><b>POST ​/setup​/v1​/locations</b></i> endpoint for details.</p>
		/// SetupV1Locations_idPutByRemoveRegion setup/v1/locations/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<LocationViewModel> SetupV1Locations_idPutByRemoveRegionAsync(string id, bool removeRegion, LocationUpdateModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/locations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&removeRegion="+removeRegion;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LocationViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Reminders
		/// <p>Use this endpoint to <b>Get Email and SMS appointment reminder settings</b> for the requested location. A valid business <b>location id</b> is required. </p>
		/// SetupV1Locations_idAppointmentremindersGet setup/v1/locations/{id}/appointmentreminders
		/// </summary>
		/// <param name="id">id of business location, defaults to primary business location</param>
		/// <returns>Success</returns>
		public async Task<AppointmentReminderViewModel> SetupV1Locations_idAppointmentremindersGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/locations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/appointmentreminders";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppointmentReminderViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Reminders
		/// <p>Use this endpoint to <b>Update</b> Email and SMS appointment reminder settings for the requested location. A valid business <b>location id</b> is required. </p>
		/// <p>
		/// <b>Appointment Reminders</b> Reminder values are used to define how many hours, days, or weeks (interval value) prior to the appointment to send the reminder. <b>Interval</b> values are used to define the reminder interval: <b>1 = Hours</b>, <b>2 = Days</b> and <b>3 = Weeks</b>. The reminder fields are numbers. If you are using the hours interval, use a number from 1 to 24.</p>
		/// <p>Example 1: <b>emailFirstReminder:  1, emailFirstReminderInterval:  2</b> - results in 1st reminder being sent <b>1 Day before</b> the appointment time.</p>
		/// <p>Example 2: <b>emailSecondReminder: 3, emailSecondReminderInterval: 1</b> - results in 2nd reminder being sent <b>3 Hours before</b> the appointment time.</p>
		/// SetupV1Locations_idAppointmentremindersPut setup/v1/locations/{id}/appointmentreminders
		/// </summary>
		/// <param name="id">id of business location, defaults to primary business location</param>
		/// <param name="requestBody">input model for reminders</param>
		/// <returns>Success</returns>
		public async Task<LocationViewModel> SetupV1Locations_idAppointmentremindersPutAsync(string id, AppointmentRemindersInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/locations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/appointmentreminders";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LocationViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete All Location Images
		/// <p>Use this endpoint to <b>Delete All</b> location images from the location blob storage container. An option exists to use upper case for matching the subdirectory name. Legacy apps stored pics using upper case while the API uses lower case names.</p>
		/// SetupV1Locations_idDeleteallimagesDeleteByUppercase setup/v1/locations/{id}/deleteallimages
		/// </summary>
		/// <returns>Success</returns>
		public async Task<bool> SetupV1Locations_idDeleteallimagesDeleteByUppercaseAsync(string id, bool uppercase, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/locations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/deleteallimages&uppercase="+uppercase;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<bool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Location Image
		/// <p>Use this endpoint to <b>Delete</b> a previously uploaded location image. A valid business <b>location id</b> is required.</p>
		/// SetupV1Locations_idDeleteimageDelete setup/v1/locations/{id}/deleteimage
		/// </summary>
		/// <param name="id">id of business location, defaults to primary business location</param>
		/// <returns>Success</returns>
		public async Task<LocationViewModel> SetupV1Locations_idDeleteimageDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/locations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/deleteimage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LocationViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Email Templates
		/// <p>Use this endpoint to return a <b>List of Email Templates</b> that are provided and may be customized. If the template has been customized, the customized property is true. The scope parameter indicates if the email template has been customized. This endpoint returns <b>only company level templates</b>, so the scope is always company.</p>
		/// SetupV1Locations_idEmailTemplatesGet setup/v1/locations/{id}/email/templates
		/// </summary>
		/// <returns>Success</returns>
		public async Task<EmailTemplateListViewModel> SetupV1Locations_idEmailTemplatesGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/locations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/email/templates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EmailTemplateListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Custom Template
		/// <p>Use this endpoint to a <b>Create</b> a Custom Email Template. You must convert the content to a base64 encoded string. Updates to the primary business location create company scoped custom templates. Updates to non-primary business locations create business location scoped custom templates. The master template cannot be updated with this endpoint.</p>
		/// <p>The email template endpoints work a little differently than most. There are no endpoints to update the templates, we use the post endpoint to create a custom template instead. This endpoint creates a new email template that will be used instead. If you delete it, you are deleting the custom template you created and the original default template created by OnSched will be reactivated.</p>
		/// SetupV1Locations_idEmailTemplatesPost setup/v1/locations/{id}/email/templates
		/// </summary>
		/// <param name="id">id of business location, defaults to primary business location</param>
		/// <param name="requestBody">Input model for email template</param>
		/// <returns>Success</returns>
		public async Task<ContentResult> SetupV1Locations_idEmailTemplatesPostAsync(string id, EmailTemplateInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/locations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/email/templates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContentResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Master Template Settings
		/// <p>Use this endpoint to <b>Delete Custom Master Email Template Settings</b>. A valid business <b>location id</b> is required. Deleting a custom master email template will reactivate the original default OnSched template settings.</p>
		/// SetupV1Locations_idEmailTemplatesMasterDelete setup/v1/locations/{id}/email/templates/master
		/// </summary>
		/// <param name="id">id of business location, defaults to primary business location</param>
		/// <returns>Success</returns>
		public async Task<MasterEmailTemplateSettingsViewModel> SetupV1Locations_idEmailTemplatesMasterDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/locations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/email/templates/master";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MasterEmailTemplateSettingsViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Master Template Settings
		/// <p>Use this endpoint to get <b>Master Email Template Settings</b>. A valid business <b>location id</b> is required. Settings exist for showing or hiding panels and for changing color schemes. </p>
		/// SetupV1Locations_idEmailTemplatesMasterGet setup/v1/locations/{id}/email/templates/master
		/// </summary>
		/// <param name="id">id of business location, defaults to primary business location</param>
		/// <returns>Success</returns>
		public async Task<MasterEmailTemplateSettingsViewModel> SetupV1Locations_idEmailTemplatesMasterGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/locations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/email/templates/master";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MasterEmailTemplateSettingsViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Master Template Settings
		/// <p>Use this endpoint to <b>Create Custom Master Email Template Settings</b>. A valid business <b>location id</b> is required. Settings exist for showing or hiding email panels and for changing color schemes. Use the <i>GET ​/setup​/v1​/locations​/{id}​/email​/templates​/masterSettings</i> endpoint to display the settings offered. Changes to the Master Template Settings will be reflected in all business locations associated with this company. </p>
		/// <p>The email template endpoints work a little differently than most. There are no endpoints to update the templates, we use the post endpoint to create a custom template instead. This endpoint creates a new custom Master Template Settings file that will be used instead. If you delete it, you are deleting the custom template settings you created and the original default Master Template created by OnSched would be reactivated.</p>
		/// SetupV1Locations_idEmailTemplatesMasterPost setup/v1/locations/{id}/email/templates/master
		/// </summary>
		/// <param name="id">id of business location, defaults to primary business location</param>
		/// <param name="requestBody">Input model for master email template settings</param>
		/// <returns>Success</returns>
		public async Task<MasterEmailTemplateSettingsViewModel> SetupV1Locations_idEmailTemplatesMasterPostAsync(string id, MasterTemplateSettingsInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/locations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/email/templates/master";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MasterEmailTemplateSettingsViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Custom Template
		/// <p>Use this endpoint to <b>Delete</b> a Custom Email Template that was previously created. A valid business <b>location id</b> and email <b>templateName</b> are required. Deleting a custom email template will revert the template back to its default originally created by OnSched. Changes will be reflected in all business locations associated with this company.</p>
		/// <p>The email template endpoints work a little differently than most. When you delete you are deleting the custom template you created, and the original default Email Template created by OnSched will be reactivated.</p>
		/// SetupV1Locations_idEmailTemplates_templateNameDelete setup/v1/locations/{id}/email/templates/{templateName}
		/// </summary>
		/// <param name="id">id of business location, defaults to primary business location</param>
		/// <param name="templateName">Name of the email template</param>
		/// <returns>Success</returns>
		public async Task<ContentResult> SetupV1Locations_idEmailTemplates_templateNameDeleteAsync(string id, string templateName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/locations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/email/templates/"+ (templateName==null? "" : System.Uri.EscapeDataString(templateName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContentResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Email Template
		/// <p>Use this endpoint to return the requested <b>Email Template</b>. The template is from the primary business location. If it wasn't customized the default template is returned. The response content is in html format. A valid <b>emailTemplate name</b> is required. Find template names by using the <i>GET ​/setup​/v1​/locations​/{id}​/email​/templates</i> endpoint. Note: The master template cannot be accessed here. </p>
		/// SetupV1Locations_idEmailTemplates_templateNameGet setup/v1/locations/{id}/email/templates/{templateName}
		/// </summary>
		/// <param name="id">id of business location</param>
		/// <param name="templateName">name of the email template</param>
		/// <returns>Success</returns>
		public async Task<ContentResult> SetupV1Locations_idEmailTemplates_templateNameGetAsync(string id, string templateName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/locations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/email/templates/"+ (templateName==null? "" : System.Uri.EscapeDataString(templateName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContentResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Google Cal Access
		/// <p>Use this endpoint to <b>Delete</b> authorized access to all google calendar users in your organization. Upon deletion Google Calendars will no longer be synced for resources.</p>
		/// SetupV1Locations_idGoogleServiceAccountDelete setup/v1/locations/{id}/google/service/account
		/// </summary>
		/// <param name="id">id of business location, defaults to primary business location</param>
		/// <returns>Success</returns>
		public async Task SetupV1Locations_idGoogleServiceAccountDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/locations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/google/service/account";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Google Cal Access
		/// <p>Use this endpoint to <b>Authorize Access</b> to google calendar users in your organization. You must create/have a Google Service account as an admin of your GSuite, then save the credentials as a Json Key file. This <b>Json Key</b> and a valid business <b>location id</b> are required. </p>
		/// SetupV1Locations_idGoogleServiceAccountPost setup/v1/locations/{id}/google/service/account
		/// </summary>
		/// <param name="id">id of business location, defaults to primary business location</param>
		/// <param name="requestBody">Generated Json Key file from Google</param>
		/// <returns>Success</returns>
		public async Task<GoogleServiceAccountCreds> SetupV1Locations_idGoogleServiceAccountPostAsync(string id, GoogleServiceAccountCreds requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/locations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/google/service/account";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleServiceAccountCreds>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update Location Holidays
		/// <p>Use this endpoint to <b>Update</b> Business Holidays as Opened or Closed. A valid business <b>location id</b> is required. If not specified, the business location defaults to the primary business location.</p>
		/// <p>Holidays are automatically defined with the initial Post Location endpoint and are based on country code. Find your location holiday codes by using the: <i>GET /setup​/v1​/locations​/{id}</i> endpoint. Change your holidays to open or closed by passing in the <b>holidayId</b> along with the <b>closed</b> boolean value to change the status of a specific holiday. Pass in an <b>asterisk *</b> for the holidayId then all business holidays will be set as defined.</p>
		/// SetupV1Locations_idHolidays_holidayId_closedPut setup/v1/locations/{id}/holidays/{holidayId}/{closed}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<LocationViewModel> SetupV1Locations_idHolidays_holidayId_closedPutAsync(string id, string holidayId, bool closed, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/locations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/holidays/"+ (holidayId==null? "" : System.Uri.EscapeDataString(holidayId))+"/"+closed;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LocationViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Recover Location
		/// <p>Use this endpoint to <b>Recover</b> a deleted business location. A valid business <b>location id</b> is required.</p>
		/// SetupV1Locations_idRecoverPut setup/v1/locations/{id}/recover
		/// </summary>
		/// <returns>Success</returns>
		public async Task<LocationViewModel> SetupV1Locations_idRecoverPutAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/locations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/recover";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LocationViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Linked Services
		/// <p>Use this endpoint to <b>Delete All</b> location linked services from a business location. A valid business <b>location id</b> is required. </p>
		/// SetupV1Locations_idServicesDelete setup/v1/locations/{id}/services
		/// </summary>
		/// <param name="id">id of business location, defaults to primary business location</param>
		/// <returns>Success</returns>
		public async Task<LocationViewModel> SetupV1Locations_idServicesDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/locations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/services";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LocationViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Location Linked Services
		/// <p>Use this endpoint to return a list of <b>Location Linked Services</b>. A valid business <b>location id</b> is required. By default, there are no location linked services attached to a location. Refer to the: <i>POST /setup​/v1​/locations​/{id}​/services</i> for details. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
		/// SetupV1Locations_idServicesGetByOffsetAndLimit setup/v1/locations/{id}/services
		/// </summary>
		/// <param name="id">id of business location, defaults to primary business location</param>
		/// <param name="offset">Starting row of page, default 0</param>
		/// <param name="limit">Page limit default 20, max 100</param>
		/// <returns>location service objects</returns>
		public async Task<BusinessServiceListViewModel> SetupV1Locations_idServicesGetByOffsetAndLimitAsync(string id, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/locations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/services&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BusinessServiceListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Linked Service
		/// <p>Use this endpoint to <b>Link Services</b> to a location object. A valid business <b>location id</b> is required. By default, there are <i>no services linked</i> to a location. </p>
		/// <p>Services are definable globally at the Company level and associated with the Primary Business Location, or at a Secondary Business Location. When accessing the Services endpoints, by default, API consumers are provided with a <b>combined</b> list of Services defined from both the Primary and Secondary Business Location.</p>
		/// <p>If necessary, the list of Service(s) provided can be cherry-picked/linked to <b>only include specific Service(s)</b> by using this endpoint. This allows for a subset of defined Services to be provided for a location.</p>
		/// <p>Supplying the list of services ids to cherry-pick/link to the location in the request body will explicitly define which Primary Location Services are offered by the specified business location.</p>
		/// SetupV1Locations_idServicesPost setup/v1/locations/{id}/services
		/// </summary>
		/// <param name="id">id of business location, defaults to primary business location</param>
		/// <param name="requestBody">array of valid service object id's</param>
		/// <returns>Success</returns>
		public async Task<LocationViewModel> SetupV1Locations_idServicesPostAsync(string id, string[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/locations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/services";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LocationViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update Location Scope
		/// <p>Use this endpoint to <b>Update</b> a business locations online booking settings scope. A valid business <b>location id</b> is required.</p>
		/// <p>
		/// <b>settingsScope</b> values are <b>0 = company scope, 1 = business location scope</b>. To inherit the online settings defined in the primary business location, then use value = 0 for company scope. Otherwise, to override the settings for a specific location then use value = 1 for business location scope. <b>Note</b>: You cannot change the settings scope of the Primary Business Location.</p>
		/// SetupV1Locations_idSettingsScope_settingsScopePut setup/v1/locations/{id}/settings/scope/{settingsScope}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<LocationViewModel> SetupV1Locations_idSettingsScope_settingsScopePutAsync(string id, string settingsScope, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/locations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/settings/scope/"+ (settingsScope==null? "" : System.Uri.EscapeDataString(settingsScope));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LocationViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Upload Location Image
		/// <p>Use this endpoint to <b>Upload</b> an image to a location object. A valid business <b>location id</b> is required. You must convert the image to a <b>base64 encoded string</b> and pass that string as input along with your <b>filename</b>.</p>
		/// SetupV1Locations_idUploadimagePost setup/v1/locations/{id}/uploadimage
		/// </summary>
		/// <param name="id">id of business location, defaults to primary business location</param>
		/// <param name="requestBody">Input model for image upload</param>
		/// <returns>Success</returns>
		public async Task<LocationViewModel> SetupV1Locations_idUploadimagePostAsync(string id, ResourceImageInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/locations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/uploadimage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LocationViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Resource Groups
		/// <p>Use this endpoint to <b>List Resource Groups</b> for the specified location. If not specified, the business location defaults to the primary business location. <b>Name</b> is a required field.</p>
		/// <p>Use the offset and limit parameters to control the page start and size. Default offset is 0, limit is 20, maximum is 100. Use the query parameters to filter the results further.</p>
		/// SetupV1ResourcegroupsGetByLocationIdAndDeletedAndOffsetAndLimit setup/v1/resourcegroups
		/// </summary>
		/// <param name="locationId">id of business location, defaults to primary business location</param>
		/// <param name="deleted">Filter results by deleted status</param>
		/// <param name="offset">Starting row of page, default 0</param>
		/// <param name="limit">Page limit default 20, max 100</param>
		/// <returns>Success</returns>
		public async Task<ResourceGroupListViewModel> SetupV1ResourcegroupsGetByLocationIdAndDeletedAndOffsetAndLimitAsync(string locationId, bool deleted, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resourcegroups?locationId=" + (locationId==null? "" : System.Uri.EscapeDataString(locationId))+"&deleted="+deleted+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceGroupListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Resource Group
		/// <p>Use this endpoint to <b>Create</b> a resourceGroup object. Resource groups are used to categorize your resources.</p>
		/// SetupV1ResourcegroupsPost setup/v1/resourcegroups
		/// </summary>
		/// <param name="requestBody">Resource input model</param>
		/// <returns>Success</returns>
		public async Task<ResourceGroupViewModel> SetupV1ResourcegroupsPostAsync(ResourceGroupInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resourcegroups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceGroupViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Resource Group
		/// <p>Use this endpoint to <b>Delete</b> a resourceGroup object. A valid <b>resourceGroup id</b> is required. The resource group is not permanently deleted and can be recovered by using the <i>PUT ​/setup​/v1​/resourcegroups​/{id}​/recover</i> endpoint.</p>
		/// SetupV1Resourcegroups_idDelete setup/v1/resourcegroups/{id}
		/// </summary>
		/// <param name="id">id of resourceGroup object</param>
		/// <returns>Success</returns>
		public async Task<ResourceGroupViewModel> SetupV1Resourcegroups_idDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resourcegroups/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceGroupViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Resource Group
		/// <p>Use this endpoint to return a <b>Resource Group</b> object. A valid <b>resourceGroup id</b> is required. Find resourceGroup id's by using the <i>GET setup/v1/resourceGroups</i> endpoint.</p>
		/// SetupV1Resourcegroups_idGet setup/v1/resourcegroups/{id}
		/// </summary>
		/// <param name="id">id of resourceGroup object</param>
		/// <returns>Success</returns>
		public async Task<ResourceGroupViewModel> SetupV1Resourcegroups_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resourcegroups/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceGroupViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Resource Group
		/// <p>Use this endpoint to <b>Update</b> a resourceGroup object. A valid <b>resourceGroup id</b> is required. </p>
		/// SetupV1Resourcegroups_idPut setup/v1/resourcegroups/{id}
		/// </summary>
		/// <param name="id">id of resourcGroup object</param>
		/// <param name="requestBody">Resource Group Update Model</param>
		/// <returns>Success</returns>
		public async Task<ResourceGroupViewModel> SetupV1Resourcegroups_idPutAsync(string id, ResourceGroupUpdateModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resourcegroups/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceGroupViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Recover Resource Group
		/// <p>Use this endpoint to <b>Recover</b> a deleted resourceGroup object. A valid <b>resourceGroup id</b> is required.</p>
		/// SetupV1Resourcegroups_idRecoverPut setup/v1/resourcegroups/{id}/recover
		/// </summary>
		/// <param name="id">id of resourceGroup object</param>
		/// <returns>Success</returns>
		public async Task<ResourceViewModel> SetupV1Resourcegroups_idRecoverPutAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resourcegroups/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/recover";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Resources
		/// <p>Use this endpoint to return a <b>List of Resources</b>. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
		/// SetupV1ResourcesGetByLocationIdAndResourceGroupIdAndEmailAndNameAndDeletedAndGoogleAuthReturnUrlAndOutlookAuthReturnUrlAndOffsetAndLimit setup/v1/resources
		/// </summary>
		/// <param name="locationId">id of business location, defaults to primary business location</param>
		/// <param name="resourceGroupId">Filter by group Id</param>
		/// <param name="email">Filter by email address</param>
		/// <param name="name">Search by name</param>
		/// <param name="deleted">Show by deleted status, default is false</param>
		/// <param name="googleAuthReturnUrl">Google calendar authorization return url</param>
		/// <param name="outlookAuthReturnUrl">Outlook calendar authorization return url</param>
		/// <param name="offset">Starting row of page, default 0</param>
		/// <param name="limit">Page limit default 20, max is 100</param>
		/// <returns>resource object</returns>
		public async Task<ResourceListViewModel> SetupV1ResourcesGetByLocationIdAndResourceGroupIdAndEmailAndNameAndDeletedAndGoogleAuthReturnUrlAndOutlookAuthReturnUrlAndOffsetAndLimitAsync(string locationId, string resourceGroupId, string email, string name, bool deleted, string googleAuthReturnUrl, string outlookAuthReturnUrl, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resources?locationId=" + (locationId==null? "" : System.Uri.EscapeDataString(locationId))+"&resourceGroupId=" + (resourceGroupId==null? "" : System.Uri.EscapeDataString(resourceGroupId))+"&email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&deleted="+deleted+"&googleAuthReturnUrl=" + (googleAuthReturnUrl==null? "" : System.Uri.EscapeDataString(googleAuthReturnUrl))+"&outlookAuthReturnUrl=" + (outlookAuthReturnUrl==null? "" : System.Uri.EscapeDataString(outlookAuthReturnUrl))+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Resource
		/// <p>Use this endpoint to <b>Create</b> a new resource.</p>
		/// <p>Required Fields: <b>Email Address</b> and <b>Name</b></p>
		/// <p>Providing a single or many serviceId(s) in the service array will result the resource explicitly being available to provide those services only. While passing in an empty array will result in all services being available to the resources. This includes all company and business scoped services. See the <i>POST ​/setup​/v1​/resources​/{id}​/services</i> endpoint for details about explicitly linking services.</p>
		/// <p>Set the resource availability type by using the <b>recurringAvailability</b> flag. Set recurringAvailability to <b>True</b> for <b>Weekly Availability</b> or <b>False</b> for <b>Resource Allocations</b>.</p>
		/// SetupV1ResourcesPostByGoogleAuthReturnUrlAndOutlookAuthReturnUrl setup/v1/resources
		/// </summary>
		/// <param name="googleAuthReturnUrl">Google calendar authorization return url</param>
		/// <param name="outlookAuthReturnUrl">Outlook calendar authorization return url</param>
		/// <param name="requestBody">Resource input model</param>
		/// <returns>Success</returns>
		public async Task<ResourceViewModel> SetupV1ResourcesPostByGoogleAuthReturnUrlAndOutlookAuthReturnUrlAsync(string googleAuthReturnUrl, string outlookAuthReturnUrl, ResourceInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resources?googleAuthReturnUrl=" + (googleAuthReturnUrl==null? "" : System.Uri.EscapeDataString(googleAuthReturnUrl))+"&outlookAuthReturnUrl=" + (outlookAuthReturnUrl==null? "" : System.Uri.EscapeDataString(outlookAuthReturnUrl));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Allocation
		/// <p>Use this endpoint to <b>Delete</b> a Resource Allocation. A valid <b>resourceAllocation id</b> is required.</p>
		/// SetupV1ResourcesAllocations_idDelete setup/v1/resources/allocations/{id}
		/// </summary>
		/// <param name="id">id of resourceAllocation object</param>
		/// <returns>Success</returns>
		public async Task<ResourceBlockViewModel> SetupV1ResourcesAllocations_idDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resources/allocations/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceBlockViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Allocation
		/// <p>Use this endpoint to return a <b>Resource Allocation</b>. A valid <b>resourceAllocation id</b> is required. </p>
		/// SetupV1ResourcesAllocations_idGet setup/v1/resources/allocations/{id}
		/// </summary>
		/// <param name="id">id of resourceAllocation object</param>
		/// <returns>Success</returns>
		public async Task<ResourceAllocationViewModel> SetupV1ResourcesAllocations_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resources/allocations/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceAllocationViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Allocation
		/// <p>Use this endpoint to <b>Update</b> a resource allocation. A valid <b>resourceAllocation id</b> is required. Refer to the <i>POST /setup/v1/resources/{id}/allocations</i> endpoint for details.</p>
		/// SetupV1ResourcesAllocations_idPut setup/v1/resources/allocations/{id}
		/// </summary>
		/// <param name="id">id of resourceAllocation object</param>
		/// <param name="requestBody">Resource allocation update model</param>
		/// <returns>Success</returns>
		public async Task<ResourceBlockViewModel> SetupV1ResourcesAllocations_idPutAsync(string id, ResourceAllocationUpdateModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resources/allocations/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceBlockViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Block
		/// <p>Use this endpoint to <b>Delete</b> a Resource Block. A valid <b>resourceBlock id</b> is required.</p>
		/// SetupV1ResourcesBlock_idDelete setup/v1/resources/block/{id}
		/// </summary>
		/// <param name="id">id of resourceBlock object</param>
		/// <returns>Success</returns>
		public async Task<ResourceBlockViewModel> SetupV1ResourcesBlock_idDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resources/block/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceBlockViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Block
		/// <p>Use this endpoint to <b>Update</b> a Resource Block. A valid <b>resourceBlock id</b> is required. Refer to the <i>POST ​/setup​/v1​/resources​/{id}​/block</i> endpoint for fieldnames and details.</p>
		/// SetupV1ResourcesBlock_idPut setup/v1/resources/block/{id}
		/// </summary>
		/// <param name="id">id of resourceBlock object</param>
		/// <param name="requestBody">Resource Block update model</param>
		/// <returns>Success</returns>
		public async Task<ResourceBlockViewModel> SetupV1ResourcesBlock_idPutAsync(string id, ResourceBlockUpdateModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resources/block/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceBlockViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Block
		/// <p>Use this endpoint to <b>Get</b> a Resource Block. A valid <b>resourceBlock id</b> is required.</p>
		/// SetupV1ResourcesBlocks_idGet setup/v1/resources/blocks/{id}
		/// </summary>
		/// <param name="id">id of resourceBlock object</param>
		/// <returns>Success</returns>
		public async Task<ResourceBlockViewModel> SetupV1ResourcesBlocks_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resources/blocks/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceBlockViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Resources Bulk
		/// <p>Use this endpoint to <b>Bulk Create</b> resources. Valid <b>resource ids</b> are required. The posted list of resources cannot exceed 100 resource objects per transaction for performance purposes.</p>
		/// <p>Required Fields: <b>Email Address</b> and <b>Name</b></p>
		/// <p>Providing a single or many serviceId(s) in the service array will result the resource explicitly being available to provide those services only. While passing in an empty array will result in all services being available to the resources. This includes all company and business scoped services. See the <i>POST ​/setup​/v1​/resources​/{id}​/services</i> endpoint for details about explicitly linking services.</p>
		/// <p>Set the resource availability type by using the <b>recurringAvailability</b> flag. Set recurringAvailability to <b>True</b> for <b>Weekly Availability</b> or <b>False</b> for <b>Resource Allocations</b>.</p>
		/// SetupV1ResourcesBulkPostByGoogleAuthReturnUrlAndOutlookAuthReturnUrl setup/v1/resources/bulk
		/// </summary>
		/// <param name="googleAuthReturnUrl">Google calendar authorization return url</param>
		/// <param name="outlookAuthReturnUrl">Outlook calendar authorization return url</param>
		/// <param name="requestBody">Resources input model</param>
		/// <returns>Success</returns>
		public async Task<ResourceViewModel[]> SetupV1ResourcesBulkPostByGoogleAuthReturnUrlAndOutlookAuthReturnUrlAsync(string googleAuthReturnUrl, string outlookAuthReturnUrl, ResourcesInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resources/bulk?googleAuthReturnUrl=" + (googleAuthReturnUrl==null? "" : System.Uri.EscapeDataString(googleAuthReturnUrl))+"&outlookAuthReturnUrl=" + (outlookAuthReturnUrl==null? "" : System.Uri.EscapeDataString(outlookAuthReturnUrl));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceViewModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update Resources Bulk
		/// <p>Use this endpoint to <b>Bulk Update</b> resources. Valid <b>resource id's</b> are required. The list of resources cannot exceed 100 resource objects per transaction for performance purposes.</p>
		/// <p>Required Fields: <b>Email Address</b> and <b>Name</b></p>
		/// <p>Providing a single or many serviceId(s) in the service array will result the resource explicitly being available to provide those services only. While passing in an empty array will result in all services being available to the resources. This includes all company and business scoped services. See the <i>POST ​/setup​/v1​/resources​/{id}​/services</i> endpoint for details about explicitly linking services.</p>
		/// <p>Set the resource availability type by using the <b>recurringAvailability</b> flag. Set recurringAvailability to <b>True</b> for <b>Weekly Availability</b> or <b>False</b> for <b>Resource Allocations</b>.</p>
		/// SetupV1ResourcesBulkPutByGoogleAuthReturnUrlAndOutlookAuthReturnUrl setup/v1/resources/bulk
		/// </summary>
		/// <param name="googleAuthReturnUrl">Google calendar authorization return url</param>
		/// <param name="outlookAuthReturnUrl">Outlook calendar authorization return url</param>
		/// <param name="requestBody">Resources update model</param>
		/// <returns>Success</returns>
		public async Task<ResourceViewModel[]> SetupV1ResourcesBulkPutByGoogleAuthReturnUrlAndOutlookAuthReturnUrlAsync(string googleAuthReturnUrl, string outlookAuthReturnUrl, ResourcesUpdateModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resources/bulk?googleAuthReturnUrl=" + (googleAuthReturnUrl==null? "" : System.Uri.EscapeDataString(googleAuthReturnUrl))+"&outlookAuthReturnUrl=" + (outlookAuthReturnUrl==null? "" : System.Uri.EscapeDataString(outlookAuthReturnUrl));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceViewModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Time Zones
		/// <p>Use this endpoint to return a <b>List of Time Zones</b>.</p>
		/// SetupV1ResourcesTimezonesGet setup/v1/resources/timezones
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SystemTimezoneViewModel> SetupV1ResourcesTimezonesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resources/timezones";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SystemTimezoneViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Resource
		/// <p>Use this endpoint to <b>Delete</b> a resource. The resource is not permanently deleted and can be recovered. A valid <b>resource id</b> is required.</p>
		/// SetupV1Resources_idDelete setup/v1/resources/{id}
		/// </summary>
		/// <param name="id">id of resource object</param>
		/// <returns>Success</returns>
		public async Task<ResourceViewModel> SetupV1Resources_idDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resources/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Resource
		/// <p>Use this endpoint to return a <b>Resource</b> object. A valid <b>resource id</b> is required. Find resource id's by using the: <i>GET /setup/v1/resources</i> endpoint.</p>
		/// SetupV1Resources_idGetByGoogleAuthReturnUrlAndOutlookAuthReturnUrl setup/v1/resources/{id}
		/// </summary>
		/// <param name="id">id of resource object</param>
		/// <param name="googleAuthReturnUrl">Google calendar authorization return url</param>
		/// <param name="outlookAuthReturnUrl">Outlook calendar authorization return url</param>
		/// <returns>Success</returns>
		public async Task<ResourceViewModel> SetupV1Resources_idGetByGoogleAuthReturnUrlAndOutlookAuthReturnUrlAsync(string id, string googleAuthReturnUrl, string outlookAuthReturnUrl, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resources/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&googleAuthReturnUrl=" + (googleAuthReturnUrl==null? "" : System.Uri.EscapeDataString(googleAuthReturnUrl))+"&outlookAuthReturnUrl=" + (outlookAuthReturnUrl==null? "" : System.Uri.EscapeDataString(outlookAuthReturnUrl));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Resource
		/// <p>Use this endpoint to <b>Update</b> a resource. A valid <b>resource id</b> is required.</p>
		/// <p>Required Fields: <b>Email Address</b> and <b>Name</b></p>
		/// <p>Providing a single or many serviceId(s) in the service array will result the resource explicitly being available to provide those services only. While passing in an empty array will result in all services being available to the resources. This includes all company and business scoped services. See the <i>POST ​/setup​/v1​/resources​/{id}​/services</i> endpoint for details about explicitly linking services.</p>
		/// <p>Set the resource availability type by using the <b>recurringAvailability</b> flag. Set recurringAvailability to <b>True</b> for <b>Weekly Availability</b> or <b>False</b> for <b>Resource Allocations</b>.</p>
		/// SetupV1Resources_idPutByGoogleAuthReturnUrlAndOutlookAuthReturnUrl setup/v1/resources/{id}
		/// </summary>
		/// <param name="id">id of resource object</param>
		/// <param name="googleAuthReturnUrl">Google calendar authorization return url</param>
		/// <param name="outlookAuthReturnUrl">Outlook calendar authorization return url</param>
		/// <param name="requestBody">Resource Update Model</param>
		/// <returns>Success</returns>
		public async Task<ResourceViewModel> SetupV1Resources_idPutByGoogleAuthReturnUrlAndOutlookAuthReturnUrlAsync(string id, string googleAuthReturnUrl, string outlookAuthReturnUrl, ResourceUpdateModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resources/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&googleAuthReturnUrl=" + (googleAuthReturnUrl==null? "" : System.Uri.EscapeDataString(googleAuthReturnUrl))+"&outlookAuthReturnUrl=" + (outlookAuthReturnUrl==null? "" : System.Uri.EscapeDataString(outlookAuthReturnUrl));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Resource Allocations
		/// <p>Use this endpoint to return a list of <b>Resource Allocations</b> for a specified resource. We recommend using allocations if a resource's schedule changes frequently from day to day or week to week. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
		/// SetupV1Resources_idAllocationsGetByStartDateAndEndDateAndOffsetAndLimit setup/v1/resources/{id}/allocations
		/// </summary>
		/// <param name="id">id of resource to list allocations for</param>
		/// <param name="startDate">yyyy-mm-dd, filter allocations on/after startDate</param>
		/// <param name="endDate">yyyy-mm-dd, filter on/before endDate</param>
		/// <param name="offset">Starting row of page, default 0</param>
		/// <param name="limit">Page limit default 20, max 100</param>
		/// <returns>resource allocation objects</returns>
		public async Task<ResourceAllocationListViewModel> SetupV1Resources_idAllocationsGetByStartDateAndEndDateAndOffsetAndLimitAsync(string id, System.DateTimeOffset startDate, System.DateTimeOffset endDate, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resources/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/allocations&startDate=" + startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDate=" + endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceAllocationListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Allocation
		/// <p>Use this endpoint to <b>Create</b> a resource allocation for a resource. A valid <b>resource id</b> is required.</p>
		/// <p>Required fields: <b>startDate, endDate, startTime, endTime</b> and <b>reason</b>. Resource allocations can be set to specific time ranges or for the whole day by setting startTime=0 and endTime=2400. They can repeat for a specific date range instance or set to repeat at a specified frequency.</p>
		/// <p>
		/// <b>Repeat object: (repeats = true)</b>
		/// </p>
		/// <p>The <b>frequency</b> can be set to a value of <b>D, W or M </b>for <b>Day, Week</b> or <b>Month</b> respectively.</p>
		/// <p>Use the <b>interval</b> property to specify the interval that the allocation repeats. For example, an interval of 2 for a weekly allocation means that the allocation will repeat every 2nd week beginning at the day specified. A daily allocation with an interval of 10 means the allocation will repeat every 10 days. The interval property applies to all repeat frequencies.  <b>If using the repeat functionality an interval value is required</b>.</p>
		/// <p>
		/// <b>DAILY ALLOCATIONS</b>: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of “1” repeats every day, and an interval value of “3” is every 3rd day.</p>
		/// <p>
		/// <b>WEEKLY ALLOCATIONS</b>: Will repeat only on the specified days of the week for the date range specified. For weekly the <b>frequency</b> is required and should be set to <b>“W”</b>. You must specify the <b>“weekdays”</b> parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are <b>0,1,2,3,4,5,6</b> where <b>0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday</b>.  For example, a weekly frequency with an interval of “1”, and an entry of weekdays = “24”, will repeat each week on Tuesday and Thursday for the duration of the allocation date range.</p>
		/// <p>
		/// <b>MONTHLY ALLOCATIONS</b>: Will repeat either on the day of the month specified in the <b>monthDay</b> property or on the day of the week and week of the month specified by the <b>monthType</b> property.  In both cases <b>frequency</b> is required and should be set to <b>“M”</b>, monthly. <b>monthDay</b> is the day of the month you want allocated.  If monthDay=’15’ this means to allocate the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses “day of the week and week of the month” scenario.  There are two possible values for monthType: <b>D for Day of Month</b> or <b>W for Week of Month.</b> For <b>monthType D</b>, monthDay value must be between 1 and 31. It is the day of the month to repeat on.  For <b>monthType M</b>, monthDay value contains 2 digits:  day of week (0-6), (0,1,2,3,4,5,6 where 0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType=”M” and monthDay=”43”.</p>
		/// <p>
		/// <b>Repeats will end on the date specified by the end date.</b>
		/// </p>
		/// SetupV1Resources_idAllocationsPost setup/v1/resources/{id}/allocations
		/// </summary>
		/// <param name="id">id of resource object</param>
		/// <returns>Success</returns>
		public async Task<ResourceBlockViewModel> SetupV1Resources_idAllocationsPostAsync(string id, ResourceAllocationInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resources/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/allocations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceBlockViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Weekly Availability
		/// <p>Use this endpoint to view the <b>Weekly Availability</b> for a resource. The displayed available times are represented in the resource's timezone. The resource timezone can be set to any world timezone. If not provided, by default it is set to the Business timezone.</p>
		/// SetupV1Resources_idAvailabilityGet setup/v1/resources/{id}/availability
		/// </summary>
		/// <param name="id">id of resource object</param>
		/// <returns>Success</returns>
		public async Task<ResourceAvailabilityViewModel> SetupV1Resources_idAvailabilityGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resources/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/availability";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceAvailabilityViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Weekly Availability
		/// <p>Use this endpoint to <b>Update</b> resource weekly availability. A valid <b>resource id</b> is required. The availability day entries are created when a resource object is created.</p>
		/// <p>To update weekly availability hours, all days of the week must be provided. Days are defined as <b>sun, mon, tue, wed, thu, fri</b> and <b>sat</b>. The <b>startTime</b> and <b>endTime</b> fields are entered in <b>military format. e.g., 800 is 8:00am, 2230 is 10:30pm</b>. We support 24-hour availability, set startTime=0 and endTime=2400. To set a whole day as unavailable, set both the startTime and endTime to 0.</p>
		/// <p>If you require times in between specified hours to be unavailable, use the resource blocks endpoints. Times entered represent the timezone of the resource. Resources can be set to any world timezone. </p>
		/// SetupV1Resources_idAvailabilityPut setup/v1/resources/{id}/availability
		/// </summary>
		/// <param name="id">id of resource object</param>
		/// <param name="requestBody">Resource Availability Input Model</param>
		/// <returns>Success</returns>
		public async Task<ResourceAvailabilityViewModel> SetupV1Resources_idAvailabilityPutAsync(string id, AvailabilityInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resources/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/availability";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceAvailabilityViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create Block
		/// <p>Use this endpoint to <b>Create</b> a Resource Block. A valid <b>resource id</b> is required.</p>
		/// <p>Required fields: <b>startDate, endDate, startTime, endTime</b> and <b>reason</b>.</p>
		/// <p>Resource blocks can be set to specific time ranges or for the whole day. Use the <b>AllDay</b> setting to create an all-day block. <b>AllDay</b> will automatically set startTime to 0 and endTime to 2400.</p>
		/// <p>Resource blocks can be for a specific date range instance or set to repeat at a specified frequency. </p>
		/// <p>
		/// <b>Repeat object: (repeats = true)</b>
		/// </p>
		/// <p>The <b>frequency</b> can be set to a value of <b>D, W or M</b> for <b>Day, Week</b> or <b>Month</b> respectively.</p>
		/// <p>Use the <b>interval</b> property to specify the interval that the block repeats. For example, an interval of 2 for a weekly block means that the block will repeat every 2nd week beginning at the day specified. A daily block with an interval of 10 means the block will repeat every 10 days. The interval property applies to all repeat frequencies. <b>If using the repeat functionality an interval value is required</b>.</p>
		/// <p>
		/// <b>DAILY BLOCKS</b>: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of “1” repeats every day, and an interval value of “3” is every 3rd day.</p>
		/// <p>
		/// <b>WEEKLY BLOCKS</b>: Will repeat only on the specified days of the week for the date range specified. For weekly the <b>frequency</b> is required and should be set to <b>“W”</b>.  You must specify the <b>weekdays</b> parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are <b>0,1,2,3,4,5,6</b> where <b>0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday</b>. For example, a weekly frequency with an interval of “1”, and an entry of weekdays = “24”, will repeat each week on Tuesday and Thursday for the duration of the block date range.</p>
		/// <p>
		/// <b>MONTHLY BLOCKS</b>: Will repeat either on the day of the month specified in the <b>monthDay</b> property or on the day of the week and week of the month specified by the <b>monthType</b> property.  In both cases <b>frequency</b> is required and should be set to <b>“M”</b>, monthly, <b>monthDay</b> is the day of the month you want blocked.  If monthDay=’15’ this means to block the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses “day of the week and week of the month” scenario.  There are two possible values for monthType: <b>D for Day of Month</b> or <b>W for Week of Month.</b> For <b>monthType D</b>, monthDay value must be between 1 and 31. It is the day of the month to repeat on. For <b>monthType M</b>, monthDay value contains 2 digits: day of week (0-6), (0,1,2,3,4,5,6 where 0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType=”M” and monthDay=”43”. </p>
		/// <p>
		/// <b>Repeats will end on the date specified by the end date.</b>
		/// </p>
		/// SetupV1Resources_idBlockPost setup/v1/resources/{id}/block
		/// </summary>
		/// <param name="id">id of resource object</param>
		/// <returns>Success</returns>
		public async Task<ResourceBlockViewModel> SetupV1Resources_idBlockPostAsync(string id, ResourceBlockInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resources/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/block";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceBlockViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Resource Blocks
		/// <p>Use this endpoint to return a list of <b>Resource Blocks</b>. A valid <b>resource id</b> is required. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
		/// SetupV1Resources_idBlocksGetByStartDateAndEndDateAndOffsetAndLimit setup/v1/resources/{id}/blocks
		/// </summary>
		/// <param name="id">id of resource to list blocks for</param>
		/// <param name="startDate">YYYY-MM-DD, filter blocks on/after startDate</param>
		/// <param name="endDate">YYYY-MM-DD, filter on/before endDate</param>
		/// <param name="offset">Starting row of page, default 0</param>
		/// <param name="limit">Page limit default 20, max 100</param>
		/// <returns>resource block object's</returns>
		public async Task<ResourceBlockListViewModel> SetupV1Resources_idBlocksGetByStartDateAndEndDateAndOffsetAndLimitAsync(string id, System.DateTimeOffset startDate, System.DateTimeOffset endDate, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resources/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/blocks&startDate=" + startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDate=" + endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceBlockListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Resource Google URL
		/// <p>Use this endpoint to return the <b>Resources Google Calendar Authorization URL</b>. A valid <b>resource id</b> and <b>Google Email Address</b> are required.</p>
		/// SetupV1Resources_idCalendarAuthGoogle_googleEmailAddressGetByGoogleAuthReturnUrl setup/v1/resources/{id}/calendar/auth/google/{googleEmailAddress}
		/// </summary>
		/// <param name="id">id of resource object</param>
		/// <param name="googleEmailAddress">Email address of Google Calendar</param>
		/// <param name="googleAuthReturnUrl">Google calendar authorization return url</param>
		/// <returns>Success</returns>
		public async Task<CalendarAuthViewModel> SetupV1Resources_idCalendarAuthGoogle_googleEmailAddressGetByGoogleAuthReturnUrlAsync(string id, string googleEmailAddress, string googleAuthReturnUrl, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resources/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/calendar/auth/google/"+ (googleEmailAddress==null? "" : System.Uri.EscapeDataString(googleEmailAddress))+"&googleAuthReturnUrl=" + (googleAuthReturnUrl==null? "" : System.Uri.EscapeDataString(googleAuthReturnUrl));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CalendarAuthViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Resource Outlook URL
		/// <p>Use this endpoint to return the <b>Resources Outlook Calendar Authorization URL</b>. A valid <b>resource id</b> and <b>Outlook Email Address</b> are required.</p>
		/// SetupV1Resources_idCalendarAuthOutlook_outlookEmailAddressGetByOutlookAuthReturnUrl setup/v1/resources/{id}/calendar/auth/outlook/{outlookEmailAddress}
		/// </summary>
		/// <param name="id">id of resource object</param>
		/// <param name="outlookEmailAddress">Email address of Outlook Calendar</param>
		/// <param name="outlookAuthReturnUrl">Outlook calendar authorization return url</param>
		/// <returns>Success</returns>
		public async Task<CalendarAuthViewModel> SetupV1Resources_idCalendarAuthOutlook_outlookEmailAddressGetByOutlookAuthReturnUrlAsync(string id, string outlookEmailAddress, string outlookAuthReturnUrl, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resources/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/calendar/auth/outlook/"+ (outlookEmailAddress==null? "" : System.Uri.EscapeDataString(outlookEmailAddress))+"&outlookAuthReturnUrl=" + (outlookAuthReturnUrl==null? "" : System.Uri.EscapeDataString(outlookAuthReturnUrl));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CalendarAuthViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Resource Image
		/// <p>Use this endpoint to permanently <b>Delete</b> a previously uploaded resource image. A valid <b>resource id</b> is required.</p>
		/// SetupV1Resources_idDeleteimageDelete setup/v1/resources/{id}/deleteimage
		/// </summary>
		/// <param name="id">id of resource object</param>
		/// <returns>Success</returns>
		public async Task<ResourceViewModel> SetupV1Resources_idDeleteimageDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resources/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/deleteimage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reassign Resource
		/// <p>Use this endpoint to <b>Reassign</b> appointments from one resource to another. If the startDate is not supplied, the default is today's date + 1 day; If the endDate is not supplied, all future appointments from the start date will be reassigned. If the calendar id is not supplied the default is the primary calendar of the location.</p>
		/// SetupV1Resources_idReassignAppointments_resourceIdPutByStartDateAndEndDateAndCalendarId setup/v1/resources/{id}/reassign/appointments/{resourceId}
		/// </summary>
		/// <param name="id">id of the original resource</param>
		/// <param name="resourceId">id of the target resource</param>
		/// <param name="startDate">YYYY-MM-DD, Appt range start date</param>
		/// <param name="endDate">YYYY-MM-DD, Appt range end date</param>
		/// <param name="calendarId">CalendarId of calendar containing appointments</param>
		/// <returns>Success</returns>
		public async Task<AppointmentViewModel[]> SetupV1Resources_idReassignAppointments_resourceIdPutByStartDateAndEndDateAndCalendarIdAsync(string id, string resourceId, System.DateTimeOffset startDate, System.DateTimeOffset endDate, string calendarId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resources/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/reassign/appointments/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"&startDate=" + startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDate=" + endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&calendarId=" + (calendarId==null? "" : System.Uri.EscapeDataString(calendarId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppointmentViewModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Recover Resource
		/// <p>Use this endpoint to <b>Recover</b> a deleted resource. A valid <b>resource id</b> is required.</p>
		/// SetupV1Resources_idRecoverPutByGoogleAuthReturnUrlAndOutlookAuthReturnUrl setup/v1/resources/{id}/recover
		/// </summary>
		/// <param name="id">id of resource object</param>
		/// <param name="googleAuthReturnUrl">Google calendar authorization return url</param>
		/// <param name="outlookAuthReturnUrl">Outlook calendar authorization return url</param>
		/// <returns>Success</returns>
		public async Task<ResourceViewModel> SetupV1Resources_idRecoverPutByGoogleAuthReturnUrlAndOutlookAuthReturnUrlAsync(string id, string googleAuthReturnUrl, string outlookAuthReturnUrl, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resources/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/recover&googleAuthReturnUrl=" + (googleAuthReturnUrl==null? "" : System.Uri.EscapeDataString(googleAuthReturnUrl))+"&outlookAuthReturnUrl=" + (outlookAuthReturnUrl==null? "" : System.Uri.EscapeDataString(outlookAuthReturnUrl));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Linked Services
		/// <p>Use this endpoint to <b>Delete</b> linked services from a Resource, i.e. unlink the services. A valid <b>resource id</b> is required. Once deleted, all services become available to the resource.</p>
		/// SetupV1Resources_idServicesDelete setup/v1/resources/{id}/services
		/// </summary>
		/// <param name="id">id of resource object</param>
		/// <returns>Success</returns>
		public async Task<ResourceViewModel> SetupV1Resources_idServicesDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resources/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/services";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Linked Services
		/// <p>Use this endpoint to explicitly <b>Link Services</b> to a Resource. A valid <b>resource id</b> is required.</p>
		/// <p>
		/// <b>Note:</b> By default, the services array is empty which signifies that all services are provided by the resource. Linking services here will add to the linked service(s) array available to this resource. This will limit the services available to the resource.</p>
		/// <p>You cannot post services that already exist in the array, you can only add new ones. Use the <i>PUT ​/setup​/v1​/resources​/{id}​/services</i> endpoint to update the entire list.</p>
		/// SetupV1Resources_idServicesPost setup/v1/resources/{id}/services
		/// </summary>
		/// <param name="id">id of resource object</param>
		/// <param name="requestBody">Array of valid service object id's</param>
		/// <returns>Success</returns>
		public async Task<ResourceViewModel> SetupV1Resources_idServicesPostAsync(string id, string[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resources/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/services";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update Linked Services
		/// <p>Use this endpoint to <b>Update</b> the linked services of a Resource. A valid <b>resource id</b> is required.</p>
		/// <p>Updating services with this endpoint will update the linked services available to the resource. Only those services will be available to the resource.</p>
		/// <p>
		/// <b>Note:</b> This is a destructive process, any existing linked services will be removed and replaced with the list of services supplied here. Provide the resources complete list of services when using this endpoint.</p>
		/// SetupV1Resources_idServicesPut setup/v1/resources/{id}/services
		/// </summary>
		/// <param name="id">id of resource object</param>
		/// <param name="requestBody">Array of valid service object id's</param>
		/// <returns>Success</returns>
		public async Task<ResourceViewModel> SetupV1Resources_idServicesPutAsync(string id, string[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resources/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/services";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Upload Resource Image
		/// <p>Use this endpoint to <b>Upload</b> a resource image to the resource. A valid <b>resource id</b> is required. You must convert the image to a <b>base64 encoded string</b> and pass that string as input along with your <b>filename</b>.</p>
		/// SetupV1Resources_idUploadimagePost setup/v1/resources/{id}/uploadimage
		/// </summary>
		/// <param name="id">id of resource object</param>
		/// <param name="requestBody">Input model for image upload</param>
		/// <returns>Success</returns>
		public async Task<ResourceViewModel> SetupV1Resources_idUploadimagePostAsync(string id, ResourceImageInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/resources/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/uploadimage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Service Groups
		/// <p>Use this endpoint to return a list of <b>Service Groups</b> for the requested location. If no business location is specified it will default to the Primary Business Location of the company. Use the offset and limit parameters to control the page start and size. Default offset is 0, limit is 20, maximum is 100. Use the other query parameters to filter the results further.</p>
		/// SetupV1ServicegroupsGetByLocationIdAndOffsetAndLimit setup/v1/servicegroups
		/// </summary>
		/// <param name="locationId">id of business location, defaults to primary business location</param>
		/// <param name="offset">Starting row of page, default 0</param>
		/// <param name="limit">Page limit default 20, max 100</param>
		/// <returns>Success</returns>
		public async Task<ServiceGroupListViewModel> SetupV1ServicegroupsGetByLocationIdAndOffsetAndLimitAsync(string locationId, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/servicegroups?locationId=" + (locationId==null? "" : System.Uri.EscapeDataString(locationId))+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceGroupListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Service Group
		/// <p>Use this endpoint to <b>Create</b> a Service Group. If no locationId is specified in the body, the business location will default to the primary business location. Service groups are used to categorize services. Service groups are optional and only make sense if you have multiple services that will be easier read if categorized. Only the service group Type of 0 is supported by the API. It defaults to 0 if not supplied.</p>
		/// SetupV1ServicegroupsPost setup/v1/servicegroups
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ServiceGroupViewModel> SetupV1ServicegroupsPostAsync(ServiceGroupInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/servicegroups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceGroupViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Service Group
		/// <p>Use this endpoint to <b>Delete</b> a Service Group object. A valid <b>serviceGroup id</b> is required. The service group is not permanently deleted and can be recovered by using the <i>PUT ​/setup​/v1​/servicegroups​/{id}​/recover</i> endpoint.</p>
		/// SetupV1Servicegroups_idDelete setup/v1/servicegroups/{id}
		/// </summary>
		/// <param name="id">id of serviceGroup object</param>
		/// <returns>Success</returns>
		public async Task<ServiceGroupViewModel> SetupV1Servicegroups_idDeleteAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/servicegroups/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceGroupViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Service Group
		/// <p>Use this endpoint to return a <b>Service Group</b> object. A valid <b>serviceGroup id</b> is required. Find service group id's by using the <i>GET /setup/v1/serviceGroups</i> endpoint.</p>
		/// SetupV1Servicegroups_idGet setup/v1/servicegroups/{id}
		/// </summary>
		/// <param name="id">id of serviceGroup object</param>
		/// <returns>Success</returns>
		public async Task<ServiceGroupViewModel> SetupV1Servicegroups_idGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/servicegroups/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceGroupViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Service Group
		/// <p>Use this endpoint to <b>Update</b> a Service Group object. A valid <b>serviceGroup id</b> is required. </p>
		/// SetupV1Servicegroups_idPut setup/v1/servicegroups/{id}
		/// </summary>
		/// <param name="id">id of serviceGroup object</param>
		/// <returns>Success</returns>
		public async Task<ServiceGroupViewModel> SetupV1Servicegroups_idPutAsync(int id, ServiceGroupInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/servicegroups/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceGroupViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Recover Service Group
		/// <p>Use this endpoint to <b>Recover</b> a deleted Service Group. A valid <b>serviceGroup id</b> is required. </p>
		/// SetupV1Servicegroups_idRecoverPut setup/v1/servicegroups/{id}/recover
		/// </summary>
		/// <param name="id">id of serviceGroup object</param>
		/// <returns>Success</returns>
		public async Task<ServiceGroupViewModel> SetupV1Servicegroups_idRecoverPutAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/servicegroups/"+id+"/recover";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceGroupViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Services
		/// <p>Use this endpoint to return a <b>List of Service</b>. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
		/// SetupV1ServicesGetByLocationIdAndServiceGroupIdAndDeletedAndOffsetAndLimit setup/v1/services
		/// </summary>
		/// <param name="locationId">id of business location, defaults to primary business location</param>
		/// <param name="serviceGroupId">Filter services by groupId</param>
		/// <param name="deleted">Filter by deleted status</param>
		/// <param name="offset">Starting row of page, default 0</param>
		/// <param name="limit">Page limit default 20, max 100</param>
		/// <returns>Success</returns>
		public async Task<ServiceListViewModel> SetupV1ServicesGetByLocationIdAndServiceGroupIdAndDeletedAndOffsetAndLimitAsync(string locationId, int serviceGroupId, bool deleted, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/services?locationId=" + (locationId==null? "" : System.Uri.EscapeDataString(locationId))+"&serviceGroupId="+serviceGroupId+"&deleted="+deleted+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Service
		/// <p>Use this endpoint to <b>Create</b> a new service. If not specified, the business location defaults to the primary business location. Note: Posting a service to the Primary Business Location will scope as company scoped and make the service available to all locations. If you want a service to only be available from a specific location, include the business location id.</p>
		/// <p>Required fields: <b>Name</b> and <b>Duration</b></p>
		/// <p>The service <b>Type</b> is either, <b>1 = Appointment</b> or <b>2 = Event</b>. Default is 1 if not specified.</p>
		/// <p>For type = 1, Appointments - Create an availability entry for each weekday to provide the service for. <b>All days of the week must be provided when adding service availability.</b> Days are defined as <b>sun, mon, tue, wed, thu, fri</b> and <b>sat</b>. Start and End Times are entered in military format. e.g., 800 is 8:00am, 2230 is 10:30pm. If not provided, it defaults to the primary location business hours.</p>
		/// <p>We support 24-hour availability, set startTime=0 and endTime=2400. To set a whole day as unavailable, set both the startTime and endTime to 0. If you require times in between specified hours to be unavailable, use the service block endpoint at: <i>POST ​/setup​/v1​/services​/{id}​/block</i>.</p>
		/// <p>For type = 2, Events - Create service allocations for their availability. Refer to the: <i>POST /setup​/v1​/services​/{id}​/allocations</i> to set up service allocations for the event.</p>
		/// <p>Options are available for customer selected durations, for details: <a href="https://docs.onsched.com/docs/services-overview#variable-duration">Variable Duration Overview</a></p>
		/// <p>Additional parameters include but are not limited to bookingLimit, maxCapacity and maxGroupSize. For details: <a href="https://docs.onsched.com/docs/service-max-capacity">Service Limits Overview</a></p>
		/// SetupV1ServicesPost setup/v1/services
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ServiceViewModel> SetupV1ServicesPostAsync(ServiceInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/services";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Allocation
		/// <p>Use this endpoint to permanently <b>Delete</b> a service allocation. A valid <b>serviceAllocation id</b> is required.</p>
		/// SetupV1ServicesAllocations_idDelete setup/v1/services/allocations/{id}
		/// </summary>
		/// <param name="id">id of serviceAllocation object</param>
		/// <returns>Success</returns>
		public async Task<ServiceAllocationViewModel> SetupV1ServicesAllocations_idDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/services/allocations/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceAllocationViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Allocation
		/// <p>Use this endpoint to <b>Get a Service Allocation</b>. A valid <b>serviceAllocation id</b> is required.</p>
		/// SetupV1ServicesAllocations_idGet setup/v1/services/allocations/{id}
		/// </summary>
		/// <param name="id">id of serviceAllocation object</param>
		/// <returns>Success</returns>
		public async Task<ServiceAllocationViewModel> SetupV1ServicesAllocations_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/services/allocations/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceAllocationViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Allocation
		/// <p>Use this endpoint to <b>Update</b> a service allocation. A valid <b>serviceAllocation id</b> is required. Refer to the <i>POST /setup/v1/services/{id}/allocations</i> endpoint for fields names and details.</p>
		/// SetupV1ServicesAllocations_idPut setup/v1/services/allocations/{id}
		/// </summary>
		/// <param name="id">id of serviceAllocation object</param>
		/// <param name="requestBody">Service allocation update model</param>
		/// <returns>Success</returns>
		public async Task<ServiceAllocationViewModel> SetupV1ServicesAllocations_idPutAsync(string id, ServiceAllocationUpdateModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/services/allocations/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceAllocationViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Block
		/// <p>Use this endpoint to permanently <b>Delete</b> a Service Block. A valid <b>serviceBlock id</b> is required.</p>
		/// SetupV1ServicesBlock_idDelete setup/v1/services/block/{id}
		/// </summary>
		/// <param name="id">id of serviceBlock object</param>
		/// <returns>Success</returns>
		public async Task<ResourceBlockViewModel> SetupV1ServicesBlock_idDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/services/block/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceBlockViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Block
		/// <p>Use this endpoint to <b>Update</b> a Service Block. A valid <b>serviceBlock id</b> is required.</p>
		/// SetupV1ServicesBlock_idPut setup/v1/services/block/{id}
		/// </summary>
		/// <param name="id">id of serviceBlock object</param>
		/// <param name="requestBody">Service Block update model</param>
		/// <returns>Success</returns>
		public async Task<ServiceBlockViewModel> SetupV1ServicesBlock_idPutAsync(string id, ServiceBlockUpdateModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/services/block/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceBlockViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Block
		/// <p>Use this endpoint to <b>Get a Service Block</b>. A valid <b>serviceBlock id</b> is required.</p>
		/// SetupV1ServicesBlocks_idGet setup/v1/services/blocks/{id}
		/// </summary>
		/// <param name="id">id of serviceBlock object</param>
		/// <returns>Success</returns>
		public async Task<ResourceBlockViewModel> SetupV1ServicesBlocks_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/services/blocks/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceBlockViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Link Service to Calendar
		/// <p>Use this endpoint to <b>Link a Service</b> to a calendar. </p>
		/// SetupV1ServicesCalendarPost setup/v1/services/calendar
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ServiceCalendarViewModel> SetupV1ServicesCalendarPostAsync(ServiceCalendarInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/services/calendar";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceCalendarViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Service Links
		/// <p>Use this endpoint to <b>Delete</b> service links from the calendar specified. A valid <b>calendar id</b> is required.</p>
		/// SetupV1ServicesCalendar_idDelete setup/v1/services/calendar/{id}
		/// </summary>
		/// <param name="id">id of calender to delete service links from</param>
		/// <returns>Success</returns>
		public async Task<ServiceCalendarViewModel> SetupV1ServicesCalendar_idDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/services/calendar/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceCalendarViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Service
		/// <p>Use this endpoint to <b>Delete</b> a service object. A valid <b>service id</b> is required. The service is not permanently deleted and can be recovered by using the <i>PUT /setup​/v1​/services​/{id}​/recover</i> endpoint.</p>
		/// SetupV1Services_idDelete setup/v1/services/{id}
		/// </summary>
		/// <param name="id">id of service object</param>
		/// <returns>Success</returns>
		public async Task<ServiceViewModel> SetupV1Services_idDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/services/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Service
		/// <p>Use this endpoint to return a <b>Service</b> object. A valid <b>service id</b> is required. Find service id's by using the <i>GET /setup/v1/services</i> endpoint.</p>
		/// SetupV1Services_idGet setup/v1/services/{id}
		/// </summary>
		/// <param name="id">id of service object</param>
		/// <returns>Success</returns>
		public async Task<ServiceViewModel> SetupV1Services_idGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/services/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Service
		/// <p>Use this endpoint to <b>Update</b> a service object. A valid <b>service id</b> is required.</p>
		/// SetupV1Services_idPut setup/v1/services/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ServiceViewModel> SetupV1Services_idPutAsync(string id, ServiceUpdateModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/services/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Service Allocations
		/// <p>Use this endpoint to return a <b>List of Service Allocations</b> for a specified service. A valid <b>service id</b> is required. Service allocations are used for <b>Event type services only</b> where the events are offered on specific dates and times. Retrieve all allocations for a location by passing in 0 as the service id.</p>
		/// <p>The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
		/// SetupV1Services_idAllocationsGetByLocationIdAndResourceIdAndStartDateAndEndDateAndOffsetAndLimit setup/v1/services/{id}/allocations
		/// </summary>
		/// <param name="id">id of  service to list allocations for, 0 for all</param>
		/// <param name="locationId">The id of the location. Defaults to the primary location</param>
		/// <param name="resourceId">The id of the resource to filter on</param>
		/// <param name="startDate">Format YYYY-MM-DD. Filter appointments by on/after startDate</param>
		/// <param name="endDate">Format YYYY-MM-DD. Filter appointments on/before endDate</param>
		/// <param name="offset">Starting row of page, default 0</param>
		/// <param name="limit">Page limit default 20, max 100</param>
		/// <returns>service alloaction object</returns>
		public async Task<ServiceAllocationListViewModel> SetupV1Services_idAllocationsGetByLocationIdAndResourceIdAndStartDateAndEndDateAndOffsetAndLimitAsync(string id, string locationId, string resourceId, System.DateTimeOffset startDate, System.DateTimeOffset endDate, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/services/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/allocations&locationId=" + (locationId==null? "" : System.Uri.EscapeDataString(locationId))+"&resourceId=" + (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"&startDate=" + startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDate=" + endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceAllocationListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Allocation
		/// <p>Use this endpoint to <b>Create</b> a service allocation for a service. A valid <b>service id</b> is required. Service allocations are used for <b>Event type services only</b>. Service allocations allow you to specify the time(s) a service is available as opposed to using weekly availability which represents a weekly schedule, ie: Mon-Fri 9am-5pm.</p>
		/// <p>Required fields: <b>startDate, endDate, startTime, endTime</b> and <b>reason</b>. Service allocations can be set to specific time ranges or for the whole day by setting startTime=0 and endTime=2400. Service allocations can repeat for a specific date range instance or set to repeat at a specified frequency.</p>
		/// <p>
		/// <b>Repeat object: (repeats = true)</b>
		/// </p>
		/// <p>The <b>frequency</b> can be set to a value of <b>D, W or M</b> for <b>Day, Week</b> or <b>Month</b> respectively.</p>
		/// <p>Use the <b>interval</b> property to specify the interval that the allocation repeats. For example, an interval of 2 for a weekly allocation means that the allocation will repeat every 2nd week beginning at the day specified. A daily allocation with an interval of 10 means the allocation will repeat every 10 days. The interval property applies to all repeat frequencies.  <b>If using the repeat functionality an interval value is required</b>.</p>
		/// <p>
		/// <b>DAILY ALLOCATIONS</b>: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of “1” repeats every day, and an interval value of “3” is every 3rd day.</p>
		/// <p>
		/// <b>WEEKLY ALLOCATIONS</b>: Will repeat only on the specified days of the week for the date range specified. For weekly the <b>frequency</b> is required and should be set to <b>“W”</b>. You must specify the <b>“weekdays”</b> parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are <b>0,1,2,3,4,5,6</b> where <b>0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday</b>.  For example, a weekly frequency with an interval of “1”, and an entry of weekdays = “24”, will repeat each week on Tuesday and Thursday for the duration of the allocation date range.</p>
		/// <p>
		/// <b>MONTHLY ALLOCATIONS</b>: Will repeat either on the day of the month specified in the <b>monthDay</b> property or on the day of the week and week of the month specified by the <b>monthType</b> property.  In both cases <b>frequency</b> is required and should be set to <b>“M”</b>, monthly. <b>monthDay</b> is the day of the month you want allocated.  If monthDay=’15’ this means to allocate the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses “day of the week and week of the month” scenario.  There are two possible values for monthType: <b>D for Day of Month</b> or <b>W for Week of Month.</b> For <b>monthType D</b>, monthDay value must be between 1 and 31. It is the day of the month to repeat on.  For <b>monthType M</b>, monthDay value contains 2 digits:  day of week (0-6), (0,1,2,3,4,5,6 where 0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType=”M” and monthDay=”43”.</p>
		/// <p>
		/// <b>Repeats will end on the date specified by the end date.</b>
		/// </p>
		/// SetupV1Services_idAllocationsPost setup/v1/services/{id}/allocations
		/// </summary>
		/// <param name="id">id of service object</param>
		/// <returns>Success</returns>
		public async Task<ServiceAllocationViewModel> SetupV1Services_idAllocationsPostAsync(string id, ServiceAllocationInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/services/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/allocations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceAllocationViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create Allocations Bulk
		/// <p>Use this endpoint to <b>Create</b> bulk service allocations. A valid <b>service id</b> is required. Use this endpoint only if you need to POST multiple service allocations in one transaction. For details refer to: <a href="POST ​/setup​/v1​/services​/{id}​/allocations">Post Service Allocation</a></p>
		/// SetupV1Services_idAllocationsBulkPost setup/v1/services/{id}/allocations/bulk
		/// </summary>
		/// <param name="id">id of service object</param>
		/// <returns>Success</returns>
		public async Task<ServiceAllocationViewModel[]> SetupV1Services_idAllocationsBulkPostAsync(string id, ServiceAllocationsInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/services/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/allocations/bulk";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceAllocationViewModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Weekly Availability
		/// <p>Use this endpoint to return the <b>Weekly Service Availability</b> for an appointment service. A valid <b>service id</b> is required. Weekly availability is returned for services where the Type = 1. For event type services, where service Type = 2, refer to the <i>GET ​/setup​/v1​/services​/{id}​/allocations</i> endpoint.</p>
		/// SetupV1Services_idAvailabilityGet setup/v1/services/{id}/availability
		/// </summary>
		/// <param name="id">id of service object</param>
		/// <returns>Success</returns>
		public async Task<ServiceAvailabilityViewModel> SetupV1Services_idAvailabilityGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/services/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/availability";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceAvailabilityViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Weekly Availability
		/// <p>Use this endpoint to <b>Update</b> service weekly availability. A valid <b>service id</b> is required. The availability day entries are created when a service object is created.</p>
		/// <p>To update weekly availability hours, all days of the week must be provided. Days are defined as <b>sun, mon, tue, wed, thu, fri</b> and <b>sat</b>. The <b>startTime</b> and <b>endTime</b> fields are entered in <b>military format. e.g., 800 is 8:00am, 2230 is 10:30pm</b>. We support 24-hour availability, set startTime=0 and endTime=2400. To set a whole day as unavailable, set both the startTime and endTime to 0.</p>
		/// <p>If you require times in between specified hours to be unavailable, use the resource blocks endpoints. Times entered represent the timezone of the business location.</p>
		/// SetupV1Services_idAvailabilityPut setup/v1/services/{id}/availability
		/// </summary>
		/// <param name="id">id of service object</param>
		/// <param name="requestBody">Service Availability Input Model</param>
		/// <returns>Success</returns>
		public async Task<ServiceAvailabilityViewModel> SetupV1Services_idAvailabilityPutAsync(string id, AvailabilityInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/services/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/availability";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceAvailabilityViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create Block
		/// <p>Use this endpoint to <b>Create</b> a Service Block. A valid <b>service id</b> is required.</p>
		/// <p>Required fields: <b>startDate, endDate, startTime, endTime</b> and <b>reason</b>.</p>
		/// <p>Service blocks can be set to specific time ranges or for the whole day. To block a whole day set startTime to 0 and endTime to 2400.</p>
		/// <p>Service blocks can be for a specific date range instance or set to repeat at a specified frequency. </p>
		/// <p>
		/// <b>Repeat object: (repeats = true)</b>
		/// </p>
		/// <p>The <b>frequency</b> can be set to a value of <b>D, W or M</b> for <b>Day, Week</b> or <b>Month</b> respectively.</p>
		/// <p>Use the <b>interval</b> property to specify the interval that the block repeats. For example, an interval of 2 for a weekly block means that the block will repeat every 2nd week beginning at the day specified. A daily block with an interval of 10 means the block will repeat every 10 days. The interval property applies to all repeat frequencies. <b>If using the repeat functionality an interval value is required</b>.</p>
		/// <p>
		/// <b>DAILY BLOCKS</b>: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of “1” repeats every day, and an interval value of “3” is every 3rd day.</p>
		/// <p>
		/// <b>WEEKLY BLOCKS</b>: Will repeat only on the specified days of the week for the date range specified. For weekly the <b>frequency</b> is required and should be set to <b>“W”</b>.  You must specify the <b>weekdays</b> parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are <b>0,1,2,3,4,5,6</b> where <b>0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday</b>. For example, a weekly frequency with an interval of “1”, and an entry of weekdays = “24”, will repeat each week on Tuesday and Thursday for the duration of the block date range.</p>
		/// <p>
		/// <b>MONTHLY BLOCKS</b>: Will repeat either on the day of the month specified in the <b>monthDay</b> property or on the day of the week and week of the month specified by the <b>monthType</b> property.  In both cases <b>frequency</b> is required and should be set to <b>“M”</b>, monthly, <b>monthDay</b> is the day of the month you want blocked.  If monthDay=’15’ this means to block the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses “day of the week and week of the month” scenario.  There are two possible values for monthType: <b>D for Day of Month</b> or <b>W for Week of Month.</b> For <b>monthType D</b>, monthDay value must be between 1 and 31. It is the day of the month to repeat on. For <b>monthType M</b>, monthDay value contains 2 digits: day of week (0-6), (0,1,2,3,4,5,6 where 0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType=”M” and monthDay=”43”.</p>
		/// <p>
		/// <b>Repeats will end on the date specified by the end date.</b>
		/// </p>
		/// SetupV1Services_idBlockPost setup/v1/services/{id}/block
		/// </summary>
		/// <param name="id">id of service object</param>
		/// <returns>Success</returns>
		public async Task<ServiceBlockViewModel> SetupV1Services_idBlockPostAsync(string id, ServiceBlockInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/services/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/block";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceBlockViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Service Blocks
		/// <p>Use this endpoint to return a list of <b>Service Blocks</b>. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
		/// SetupV1Services_idBlocksGetByStartDateAndEndDateAndOffsetAndLimit setup/v1/services/{id}/blocks
		/// </summary>
		/// <param name="id">id of service to list blocks for</param>
		/// <param name="startDate">Format YYYY-MM-DD. Filter blocks on/after startDate</param>
		/// <param name="endDate">Format YYYY-MM-DD. Filter on/before endDate</param>
		/// <param name="offset">Starting row of page, default 0</param>
		/// <param name="limit">Page limit default 20, max 100</param>
		/// <returns>service block object's</returns>
		public async Task<ServiceBlockListViewModel> SetupV1Services_idBlocksGetByStartDateAndEndDateAndOffsetAndLimitAsync(string id, System.DateTimeOffset startDate, System.DateTimeOffset endDate, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/services/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/blocks&startDate=" + startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDate=" + endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceBlockListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Linked Calendar
		/// <p>Use this endpoint to <b>Get the Linked Calendar</b> for the service requested. A valid <b>service id</b> is required. A service can only be linked to one calendar in a location.</p>
		/// SetupV1Services_idCalendarGetByLocationId setup/v1/services/{id}/calendar
		/// </summary>
		/// <param name="id">id of service object</param>
		/// <param name="locationId">id of business location, defaults to primary business location</param>
		/// <returns>Success</returns>
		public async Task<ServiceCalendarViewModel> SetupV1Services_idCalendarGetByLocationIdAsync(string id, string locationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/services/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/calendar&locationId=" + (locationId==null? "" : System.Uri.EscapeDataString(locationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceCalendarViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Service Image
		/// <p>Use this endpoint to permanently <b>Delete</b> a previously uploaded service image. A valid <b>service id</b> is required.</p>
		/// SetupV1Services_idDeleteimageDelete setup/v1/services/{id}/deleteimage
		/// </summary>
		/// <param name="id">id of service object</param>
		/// <returns>Success</returns>
		public async Task<ServiceViewModel> SetupV1Services_idDeleteimageDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/services/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/deleteimage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Recover Service
		/// <p>Use this endpoint to <b>Recover</b> a deleted service object. A valid <b>service id</b> is required.</p>
		/// SetupV1Services_idRecoverPut setup/v1/services/{id}/recover
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ServiceViewModel> SetupV1Services_idRecoverPutAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/services/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/recover";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Resources for Service
		/// <p>Use this endpoint to return a list of <b>Resources</b> that provide the requested service. A valid <b>service id</b> is required. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
		/// SetupV1Services_idResourcesGetByOffsetAndLimitAndGoogleAuthReturnUrlAndOutlookAuthReturnUrl setup/v1/services/{id}/resources
		/// </summary>
		/// <param name="id">id of service object</param>
		/// <param name="offset">Starting row of page, default 0</param>
		/// <param name="limit">Page limit default 20, max 100</param>
		/// <param name="googleAuthReturnUrl">Google calendar authorization return url</param>
		/// <param name="outlookAuthReturnUrl">Outlook calendar authorization return url</param>
		/// <returns>Success</returns>
		public async Task<ResourceListViewModel> SetupV1Services_idResourcesGetByOffsetAndLimitAndGoogleAuthReturnUrlAndOutlookAuthReturnUrlAsync(string id, int offset, int limit, string googleAuthReturnUrl, string outlookAuthReturnUrl, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/services/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/resources&offset="+offset+"&limit="+limit+"&googleAuthReturnUrl=" + (googleAuthReturnUrl==null? "" : System.Uri.EscapeDataString(googleAuthReturnUrl))+"&outlookAuthReturnUrl=" + (outlookAuthReturnUrl==null? "" : System.Uri.EscapeDataString(outlookAuthReturnUrl));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Upload Service Image
		/// <p>Use this endpoint to <b>Upload</b> an image to the service. A valid <b>service id</b> is required. You must convert the image to a <b>base64 encoded string</b> and pass that string as input along with your <b>filename</b>.</p>
		/// SetupV1Services_idUploadimagePost setup/v1/services/{id}/uploadimage
		/// </summary>
		/// <param name="id">id of service object</param>
		/// <param name="requestBody">Input model for image upload</param>
		/// <returns>Success</returns>
		public async Task<ServiceViewModel> SetupV1Services_idUploadimagePostAsync(string id, ServiceImageInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup/v1/services/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/uploadimage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
