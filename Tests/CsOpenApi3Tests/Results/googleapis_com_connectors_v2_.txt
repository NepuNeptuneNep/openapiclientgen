//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// AccessCredentials includes the OAuth access token, and the other fields returned along with it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessCredentials
	{
		
		/// <summary>
		/// OAuth access token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		public string AccessToken { get; set; }
		
		/// <summary>
		/// Duration till the access token expires.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiresIn")]
		public string ExpiresIn { get; set; }
		
		/// <summary>
		/// OAuth refresh token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refreshToken")]
		public string RefreshToken { get; set; }
	}
	
	/// <summary>
	/// Action message contains metadata information about a single action present in the external system.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Action
	{
		
		/// <summary>
		/// Brief Description of action
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Display Name of action to be shown on client side
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// JsonSchema representation of schema metadata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputJsonSchema")]
		public JsonSchema InputJsonSchema { get; set; }
		
		/// <summary>
		/// List containing input parameter metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputParameters")]
		public InputParameter[] InputParameters { get; set; }
		
		/// <summary>
		/// Name of the action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// JsonSchema representation of schema metadata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultJsonSchema")]
		public JsonSchema ResultJsonSchema { get; set; }
		
		/// <summary>
		/// List containing the metadata of result fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultMetadata")]
		public ResultMetadata[] ResultMetadata { get; set; }
	}
	
	/// <summary>
	/// JsonSchema representation of schema metadata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JsonSchema
	{
		
		/// <summary>
		/// Additional details apart from standard json schema fields, this gives flexibility to store metadata about the schema
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalDetails")]
		public System.Collections.Generic.Dictionary<string, object> AdditionalDetails { get; set; }
		
		/// <summary>
		/// A description of this schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Possible values for an enumeration. This works in conjunction with `type` to represent types with a fixed set of legal values
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enum")]
		public string[] Enum { get; set; }
		
		/// <summary>
		/// Format of the value as per https://json-schema.org/understanding-json-schema/reference/string.html#format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		/// <summary>
		/// JsonSchema representation of schema metadata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public JsonSchema Items { get; set; }
		
		/// <summary>
		/// JDBC datatype of the field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jdbcType")]
		public System.Nullable<JsonSchemaJdbcType> JdbcType { get; set; }
		
		/// <summary>
		/// The child schemas, applicable only if this is of type `object`. The key is the name of the property and the value is the json schema that describes that property
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, JsonSchema> Properties { get; set; }
		
		/// <summary>
		/// Whether this property is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="required")]
		public string[] Required { get; set; }
		
		/// <summary>
		/// JSON Schema Validation: A Vocabulary for Structural Validation of JSON
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string[] Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum JsonSchemaJdbcType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMALLINT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOUBLE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATETIME = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LONG = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOLEAN = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DECIMAL = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UUID = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLOB = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIT = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TINYINT = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEGER = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIGINT = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOAT = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REAL = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMERIC = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHAR = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VARCHAR = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LONGVARCHAR = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMESTAMP = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NCHAR = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NVARCHAR = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LONGNVARCHAR = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NULL = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JAVA_OBJECT = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISTINCT = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRUCT = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARRAY = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOB = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REF = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATALINK = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROWID = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BINARY = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VARBINARY = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LONGVARBINARY = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NCLOB = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQLXML = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REF_CURSOR = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_WITH_TIMEZONE = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMESTAMP_WITH_TIMEZONE = 44,
	}
	
	/// <summary>
	/// Input Parameter message contains metadata about the parameters required for executing an Action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputParameter
	{
		
		/// <summary>
		/// The following map contains fields that are not explicitly mentioned above,this give connectors the flexibility to add new metadata fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalDetails")]
		public System.Collections.Generic.Dictionary<string, object> AdditionalDetails { get; set; }
		
		/// <summary>
		/// The data type of the Parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public JsonSchemaJdbcType DataType { get; set; }
		
		/// <summary>
		/// The following field specifies the default value of the Parameter provided by the external system if a value is not provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public object DefaultValue { get; set; }
		
		/// <summary>
		/// A brief description of the Parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// JsonSchema representation of schema metadata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jsonSchema")]
		public JsonSchema JsonSchema { get; set; }
		
		/// <summary>
		/// Name of the Parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Specifies whether a null value is allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nullable")]
		public System.Nullable<System.Boolean> Nullable { get; set; }
	}
	
	/// <summary>
	/// Result Metadata message contains metadata about the result returned after executing an Action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResultMetadata
	{
		
		/// <summary>
		/// The data type of the metadata field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public JsonSchemaJdbcType DataType { get; set; }
		
		/// <summary>
		/// A brief description of the metadata field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// JsonSchema representation of schema metadata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jsonSchema")]
		public JsonSchema JsonSchema { get; set; }
		
		/// <summary>
		/// Name of the metadata field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Response containing status of the connector for readiness prober.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CheckReadinessResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// The status of the connector.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CheckStatusResponse
	{
		
		/// <summary>
		/// When the connector is not in ACTIVE state, the description must be populated to specify the reason why it's not in ACTIVE state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// State of the connector.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<CheckStatusResponseState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CheckStatusResponseState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTH_ERROR = 3,
	}
	
	/// <summary>
	/// Time window specified for daily operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DailyCycle
	{
		
		/// <summary>
		/// Output only. Duration of the time window, set by service producer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public string Duration { get; set; }
		
		/// <summary>
		/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public TimeOfDay StartTime { get; set; }
	}
	
	/// <summary>
	/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeOfDay
	{
		
		/// <summary>
		/// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hours")]
		public System.Nullable<System.Int32> Hours { get; set; }
		
		/// <summary>
		/// Minutes of hour of day. Must be from 0 to 59.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minutes")]
		public System.Nullable<System.Int32> Minutes { get; set; }
		
		/// <summary>
		/// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nanos")]
		public System.Nullable<System.Int32> Nanos { get; set; }
		
		/// <summary>
		/// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seconds")]
		public System.Nullable<System.Int32> Seconds { get; set; }
	}
	
	/// <summary>
	/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Date
	{
		
		/// <summary>
		/// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		/// <summary>
		/// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		/// <summary>
		/// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	/// <summary>
	/// DenyMaintenancePeriod definition. Maintenance is forbidden within the deny period. The start_date must be less than the end_date.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DenyMaintenancePeriod
	{
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public Date EndDate { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public Date StartDate { get; set; }
		
		/// <summary>
		/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public TimeOfDay Time { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// 'Entity row'/ 'Entity' refers to a single row of an entity type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Entity
	{
		
		/// <summary>
		/// Fields of the entity. The key is name of the field and the value contains the applicable `google.protobuf.Value` entry for this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public System.Collections.Generic.Dictionary<string, object> Fields { get; set; }
		
		/// <summary>
		/// Output only. Resource name of the Entity. Format: projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}/entities/{id}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// EntityType message contains metadata information about a single entity type present in the external system.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntityType
	{
		
		/// <summary>
		/// List containing metadata information about each field of the entity type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public Field[] Fields { get; set; }
		
		/// <summary>
		/// JsonSchema representation of schema metadata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jsonSchema")]
		public JsonSchema JsonSchema { get; set; }
		
		/// <summary>
		/// The name of the entity type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Message contains EntityType's Field metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Field
	{
		
		/// <summary>
		/// The following map contains fields that are not explicitly mentioned above,this give connectors the flexibility to add new metadata fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalDetails")]
		public System.Collections.Generic.Dictionary<string, object> AdditionalDetails { get; set; }
		
		/// <summary>
		/// The data type of the Field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public JsonSchemaJdbcType DataType { get; set; }
		
		/// <summary>
		/// The following field specifies the default value of the Field provided by the external system if a value is not provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public object DefaultValue { get; set; }
		
		/// <summary>
		/// A brief description of the Field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// JsonSchema representation of schema metadata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jsonSchema")]
		public JsonSchema JsonSchema { get; set; }
		
		/// <summary>
		/// The following boolean field specifies if the current Field acts as a primary key or id if the parent is of type entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public System.Nullable<System.Boolean> Key { get; set; }
		
		/// <summary>
		/// Name of the Field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Specifies whether a null value is allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nullable")]
		public System.Nullable<System.Boolean> Nullable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public Reference Reference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Reference
	{
		
		/// <summary>
		/// Name of the reference field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of reference entity type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// ExchangeAuthCodeRequest currently includes no fields.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExchangeAuthCodeRequest
	{
	}
	
	/// <summary>
	/// ExchangeAuthCodeResponse includes the returned access token and its associated credentials.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExchangeAuthCodeResponse
	{
		
		/// <summary>
		/// AccessCredentials includes the OAuth access token, and the other fields returned along with it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessCredentials")]
		public AccessCredentials AccessCredentials { get; set; }
	}
	
	/// <summary>
	/// Request message for ActionService.ExecuteAction
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExecuteActionRequest
	{
		
		/// <summary>
		/// Parameters for executing the action. The parameters can be key/value pairs or nested structs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, object> Parameters { get; set; }
	}
	
	/// <summary>
	/// Response message for ActionService.ExecuteAction
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExecuteActionResponse
	{
		
		/// <summary>
		/// In the case of successful invocation of the specified action, the results Struct contains values based on the response of the action invoked. 1. If the action execution produces any entities as a result, they are returned as an array of Structs with the 'key' being the field name and the 'value' being the value of that field in each result row. { 'results': [{'key': 'value'}, ...] }
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public string[] Results { get; set; }
	}
	
	/// <summary>
	/// An execute sql query request containing the query and the connection to execute it on.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExecuteSqlQueryRequest
	{
		
		/// <summary>
		/// A wrapper around the SQL query statement. This is needed so that the JSON representation of ExecuteSqlQueryRequest has the following format: `{"query":"select *"}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public Query Query { get; set; }
	}
	
	/// <summary>
	/// A wrapper around the SQL query statement. This is needed so that the JSON representation of ExecuteSqlQueryRequest has the following format: `{"query":"select *"}`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Query
	{
		
		/// <summary>
		/// Sets the limit for the maximum number of rows returned after the query execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxRows")]
		public string MaxRows { get; set; }
		
		/// <summary>
		/// Required. Sql query to execute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query1 { get; set; }
		
		/// <summary>
		/// In the struct, the value corresponds to the value of query parameter and date type corresponds to the date type of the query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryParameters")]
		public QueryParameter[] QueryParameters { get; set; }
		
		/// <summary>
		/// Sets the number of seconds the driver will wait for a query to execute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		public string Timeout { get; set; }
	}
	
	/// <summary>
	/// Query parameter definition
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryParameter
	{
		
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public JsonSchemaJdbcType DataType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public object Value { get; set; }
	}
	
	/// <summary>
	/// A response returned by the connection after executing the sql query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExecuteSqlQueryResponse
	{
		
		/// <summary>
		/// In the case of successful execution of the query the response contains results returned by the external system. For example, the result rows of the query are contained in the 'results' Struct list - "results": [ { "field1": "val1", "field2": "val2",.. },.. ] Each Struct row can contain fields any type of like nested Structs or lists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public string[] Results { get; set; }
	}
	
	/// <summary>
	/// Instance represents the interface for SLM services to actuate the state of control plane resources. Example Instance in JSON, where consumer-project-number=123456, producer-project-id=cloud-sql: ```json Instance: { "name": "projects/123456/locations/us-east1/instances/prod-instance", "create_time": { "seconds": 1526406431, }, "labels": { "env": "prod", "foo": "bar" }, "state": READY, "software_versions": { "software_update": "cloud-sql-09-28-2018", }, "maintenance_policy_names": { "UpdatePolicy": "projects/123456/locations/us-east1/maintenancePolicies/prod-update-policy", } "tenant_project_id": "cloud-sql-test-tenant", "producer_metadata": { "cloud-sql-tier": "basic", "cloud-sql-instance-size": "1G", }, "provisioned_resources": [ { "resource-type": "compute-instance", "resource-url": "https://www.googleapis.com/compute/v1/projects/cloud-sql/zones/us-east1-b/instances/vm-1", } ], "maintenance_schedules": { "csa_rollout": { "start_time": { "seconds": 1526406431, }, "end_time": { "seconds": 1535406431, }, }, "ncsa_rollout": { "start_time": { "seconds": 1526406431, }, "end_time": { "seconds": 1535406431, }, } }, "consumer_defined_name": "my-sql-instance1", } ``` LINT.IfChange
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Instance
	{
		
		/// <summary>
		/// consumer_defined_name is the name of the instance set by the service consumers. Generally this is different from the `name` field which reperesents the system-assigned id of the instance which the service consumers do not recognize. This is a required field for tenants onboarding to Maintenance Window notifications (go/slm-rollout-maintenance-policies#prerequisites).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumerDefinedName")]
		public string ConsumerDefinedName { get; set; }
		
		/// <summary>
		/// Output only. Timestamp when the resource was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Optional. The instance_type of this instance of format: projects/{project_number}/locations/{location_id}/instanceTypes/{instance_type_id}. Instance Type represents a high-level tier or SKU of the service that this instance belong to. When enabled(eg: Maintenance Rollout), Rollout uses 'instance_type' along with 'software_versions' to determine whether instance needs an update or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceType")]
		public string InstanceType { get; set; }
		
		/// <summary>
		/// Optional. Resource labels to represent user provided metadata. Each label is a key-value pair, where both the key and the value are arbitrary strings provided by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Optional. The MaintenancePolicies that have been attached to the instance. The key must be of the type name of the oneof policy name defined in MaintenancePolicy, and the referenced policy must define the same policy type. For details, please refer to go/mr-user-guide. Should not be set if maintenance_settings.maintenance_policies is set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintenancePolicyNames")]
		public System.Collections.Generic.Dictionary<string, string> MaintenancePolicyNames { get; set; }
		
		/// <summary>
		/// The MaintenanceSchedule contains the scheduling information of published maintenance schedule with same key as software_versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintenanceSchedules")]
		public System.Collections.Generic.Dictionary<string, MaintenanceSchedule> MaintenanceSchedules { get; set; }
		
		/// <summary>
		/// Maintenance settings associated with instance. Allows service producers and end users to assign settings that controls maintenance on this instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintenanceSettings")]
		public MaintenanceSettings MaintenanceSettings { get; set; }
		
		/// <summary>
		/// Unique name of the resource. It uses the form: `projects/{project_number}/locations/{location_id}/instances/{instance_id}` Note: This name is passed, stored and logged across the rollout system. So use of consumer project_id or any other consumer PII in the name is strongly discouraged for wipeout (go/wipeout) compliance. See go/elysium/project_ids#storage-guidance for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Optional. notification_parameter are information that service producers may like to include that is not relevant to Rollout. This parameter will only be passed to Gamma and Cloud Logging for notification/logging purpose.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationParameters")]
		public System.Collections.Generic.Dictionary<string, NotificationParameter> NotificationParameters { get; set; }
		
		/// <summary>
		/// Output only. Custom string attributes used primarily to expose producer-specific information in monitoring dashboards. See go/get-instance-metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="producerMetadata")]
		public System.Collections.Generic.Dictionary<string, string> ProducerMetadata { get; set; }
		
		/// <summary>
		/// Output only. The list of data plane resources provisioned for this instance, e.g. compute VMs. See go/get-instance-metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisionedResources")]
		public ProvisionedResource[] ProvisionedResources { get; set; }
		
		/// <summary>
		/// Link to the SLM instance template. Only populated when updating SLM instances via SSA's Actuation service adaptor. Service producers with custom control plane (e.g. Cloud SQL) doesn't need to populate this field. Instead they should use software_versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slmInstanceTemplate")]
		public string SlmInstanceTemplate { get; set; }
		
		/// <summary>
		/// SloMetadata contains resources required for proper SLO classification of the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sloMetadata")]
		public SloMetadata SloMetadata { get; set; }
		
		/// <summary>
		/// Software versions that are used to deploy this instance. This can be mutated by rollout services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="softwareVersions")]
		public System.Collections.Generic.Dictionary<string, string> SoftwareVersions { get; set; }
		
		/// <summary>
		/// Output only. Current lifecycle state of the resource (e.g. if it's being created or ready to use).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<InstanceState> State { get; set; }
		
		/// <summary>
		/// Output only. ID of the associated GCP tenant project. See go/get-instance-metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantProjectId")]
		public string TenantProjectId { get; set; }
		
		/// <summary>
		/// Output only. Timestamp when the resource was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Maintenance schedule which is exposed to customer and potentially end user, indicating published upcoming future maintenance schedule
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MaintenanceSchedule
	{
		
		/// <summary>
		/// This field is deprecated, and will be always set to true since reschedule can happen multiple times now. This field should not be removed until all service producers remove this for their customers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canReschedule")]
		public System.Nullable<System.Boolean> CanReschedule { get; set; }
		
		/// <summary>
		/// The scheduled end time for the maintenance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// The rollout management policy this maintenance schedule is associated with. When doing reschedule update request, the reschedule should be against this given policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rolloutManagementPolicy")]
		public string RolloutManagementPolicy { get; set; }
		
		/// <summary>
		/// schedule_deadline_time is the time deadline any schedule start time cannot go beyond, including reschedule. It's normally the initial schedule start time plus maintenance window length (1 day or 1 week). Maintenance cannot be scheduled to start beyond this deadline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduleDeadlineTime")]
		public string ScheduleDeadlineTime { get; set; }
		
		/// <summary>
		/// The scheduled start time for the maintenance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	/// <summary>
	/// Maintenance settings associated with instance. Allows service producers and end users to assign settings that controls maintenance on this instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MaintenanceSettings
	{
		
		/// <summary>
		/// Optional. Exclude instance from maintenance. When true, rollout service will not attempt maintenance on the instance. Rollout service will include the instance in reported rollout progress as not attempted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exclude")]
		public System.Nullable<System.Boolean> Exclude { get; set; }
		
		/// <summary>
		/// Optional. If the update call is triggered from rollback, set the value as true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isRollback")]
		public System.Nullable<System.Boolean> IsRollback { get; set; }
		
		/// <summary>
		/// Optional. The MaintenancePolicies that have been attached to the instance. The key must be of the type name of the oneof policy name defined in MaintenancePolicy, and the embedded policy must define the same policy type. For details, please refer to go/mr-user-guide. Should not be set if maintenance_policy_names is set. If only the name is needed, then only populate MaintenancePolicy.name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintenancePolicies")]
		public System.Collections.Generic.Dictionary<string, MaintenancePolicy> MaintenancePolicies { get; set; }
	}
	
	/// <summary>
	/// LINT.IfChange Defines policies to service maintenance events.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MaintenancePolicy
	{
		
		/// <summary>
		/// Output only. The time when the resource was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Optional. Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Optional. Resource labels to represent user provided metadata. Each label is a key-value pair, where both the key and the value are arbitrary strings provided by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Required. MaintenancePolicy name using the form: `projects/{project_id}/locations/{location_id}/maintenancePolicies/{maintenance_policy_id}` where {project_id} refers to a GCP consumer project ID, {location_id} refers to a GCP region/zone, {maintenance_policy_id} must be 1-63 characters long and match the regular expression `[a-z0-9]([-a-z0-9]*[a-z0-9])?`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Optional. The state of the policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<MaintenancePolicyState> State { get; set; }
		
		/// <summary>
		/// Maintenance policy applicable to instance updates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatePolicy")]
		public UpdatePolicy UpdatePolicy { get; set; }
		
		/// <summary>
		/// Output only. The time when the resource was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MaintenancePolicyState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
	}
	
	/// <summary>
	/// Maintenance policy applicable to instance updates.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePolicy
	{
		
		/// <summary>
		/// Optional. Relative scheduling channel applied to resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public System.Nullable<UpdatePolicyChannel> Channel { get; set; }
		
		/// <summary>
		/// Deny Maintenance Period that is applied to resource to indicate when maintenance is forbidden. The protocol supports zero-to-many such periods, but the current SLM Rollout implementation only supports zero-to-one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="denyMaintenancePeriods")]
		public DenyMaintenancePeriod[] DenyMaintenancePeriods { get; set; }
		
		/// <summary>
		/// MaintenanceWindow definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="window")]
		public MaintenanceWindow Window { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UpdatePolicyChannel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_CHANNEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EARLIER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LATER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEK1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEK2 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEK5 = 5,
	}
	
	/// <summary>
	/// MaintenanceWindow definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MaintenanceWindow
	{
		
		/// <summary>
		/// Time window specified for daily operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dailyCycle")]
		public DailyCycle DailyCycle { get; set; }
		
		/// <summary>
		/// Time window specified for weekly operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weeklyCycle")]
		public WeeklyCycle WeeklyCycle { get; set; }
	}
	
	/// <summary>
	/// Time window specified for weekly operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WeeklyCycle
	{
		
		/// <summary>
		/// User can specify multiple windows in a week. Minimum of 1 window.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public Schedule[] Schedule { get; set; }
	}
	
	/// <summary>
	/// Configure the schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Schedule
	{
		
		/// <summary>
		/// Allows to define schedule that runs specified day of the week.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<ScheduleDay> Day { get; set; }
		
		/// <summary>
		/// Output only. Duration of the time window, set by service producer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public string Duration { get; set; }
		
		/// <summary>
		/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public TimeOfDay StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ScheduleDay
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAY_OF_WEEK_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONDAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TUESDAY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEDNESDAY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THURSDAY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRIDAY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SATURDAY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUNDAY = 7,
	}
	
	/// <summary>
	/// Contains notification related data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotificationParameter
	{
		
		/// <summary>
		/// Optional. Array of string values. e.g. instance's replica information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// Describes provisioned dataplane resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProvisionedResource
	{
		
		/// <summary>
		/// Type of the resource. This can be either a GCP resource or a custom one (e.g. another cloud provider's VM). For GCP compute resources use singular form of the names listed in GCP compute API documentation (https://cloud.google.com/compute/docs/reference/rest/v1/), prefixed with 'compute-', for example: 'compute-instance', 'compute-disk', 'compute-autoscaler'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// URL identifying the resource, e.g. "https://www.googleapis.com/compute/v1/projects/...)".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceUrl")]
		public string ResourceUrl { get; set; }
	}
	
	/// <summary>
	/// SloMetadata contains resources required for proper SLO classification of the instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SloMetadata
	{
		
		/// <summary>
		/// Optional. List of nodes. Some producers need to use per-node metadata to calculate SLO. This field allows such producers to publish per-node SLO meta data, which will be consumed by SSA Eligibility Exporter and published in the form of per node metric to Monarch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodes")]
		public NodeSloMetadata[] Nodes { get; set; }
		
		/// <summary>
		/// PerSliSloEligibility is a mapping from an SLI name to eligibility.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perSliEligibility")]
		public PerSliSloEligibility PerSliEligibility { get; set; }
		
		/// <summary>
		/// Name of the SLO tier the Instance belongs to. This name will be expected to match the tiers specified in the service SLO configuration. Field is mandatory and must not be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
	}
	
	/// <summary>
	/// Node information for custom per-node SLO implementations. SSA does not support per-node SLO, but producers can populate per-node information in SloMetadata for custom precomputations. SSA Eligibility Exporter will emit per-node metric based on this information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NodeSloMetadata
	{
		
		/// <summary>
		/// The location of the node, if different from instance location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The id of the node. This should be equal to SaasInstanceNode.node_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeId")]
		public string NodeId { get; set; }
		
		/// <summary>
		/// PerSliSloEligibility is a mapping from an SLI name to eligibility.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perSliEligibility")]
		public PerSliSloEligibility PerSliEligibility { get; set; }
	}
	
	/// <summary>
	/// PerSliSloEligibility is a mapping from an SLI name to eligibility.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PerSliSloEligibility
	{
		
		/// <summary>
		/// An entry in the eligibilities map specifies an eligibility for a particular SLI for the given instance. The SLI key in the name must be a valid SLI name specified in the Eligibility Exporter binary flags otherwise an error will be emitted by Eligibility Exporter and the oncaller will be alerted. If an SLI has been defined in the binary flags but the eligibilities map does not contain it, the corresponding SLI time series will not be emitted by the Eligibility Exporter. This ensures a smooth rollout and compatibility between the data produced by different versions of the Eligibility Exporters. If eligibilities map contains a key for an SLI which has not been declared in the binary flags, there will be an error message emitted in the Eligibility Exporter log and the metric for the SLI in question will not be emitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eligibilities")]
		public System.Collections.Generic.Dictionary<string, SloEligibility> Eligibilities { get; set; }
	}
	
	/// <summary>
	/// SloEligibility is a tuple containing eligibility value: true if an instance is eligible for SLO calculation or false if it should be excluded from all SLO-related calculations along with a user-defined reason.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SloEligibility
	{
		
		/// <summary>
		/// Whether an instance is eligible or ineligible.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eligible")]
		public System.Nullable<System.Boolean> Eligible { get; set; }
		
		/// <summary>
		/// User-defined reason for the current value of instance eligibility. Usually, this can be directly mapped to the internal state. An empty reason is allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InstanceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPAIRING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 6,
	}
	
	/// <summary>
	/// Response message for ActionService.ListActions
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListActionsResponse
	{
		
		/// <summary>
		/// List of action metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public Action[] Actions { get; set; }
		
		/// <summary>
		/// Next page token if more actions available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// List of actions which contain unsupported Datatypes. Check datatype.proto for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unsupportedActionNames")]
		public string[] UnsupportedActionNames { get; set; }
	}
	
	/// <summary>
	/// Response message for EntityService.ListEntities
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEntitiesResponse
	{
		
		/// <summary>
		/// List containing entity rows.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entities")]
		public Entity[] Entities { get; set; }
		
		/// <summary>
		/// Next page token if more records are available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for EntityService.ListEntityTypes
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEntityTypesResponse
	{
		
		/// <summary>
		/// Next page token if more entity types available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// List of metadata related to all entity types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="types")]
		public EntityType[] Types { get; set; }
		
		/// <summary>
		/// List of entity type names which contain unsupported Datatypes. Check datatype.proto for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unsupportedTypeNames")]
		public string[] UnsupportedTypeNames { get; set; }
	}
	
	/// <summary>
	/// RefreshAccessTokenRequest currently includes no fields.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RefreshAccessTokenRequest
	{
	}
	
	/// <summary>
	/// RefreshAccessTokenResponse includes the returned access token and its associated credentials.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RefreshAccessTokenResponse
	{
		
		/// <summary>
		/// AccessCredentials includes the OAuth access token, and the other fields returned along with it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessCredentials")]
		public AccessCredentials AccessCredentials { get; set; }
	}
	
	/// <summary>
	/// Response message for EntityService.UpdateEntitiesWithConditions
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateEntitiesWithConditionsResponse
	{
		
		/// <summary>
		/// Response returned by the external system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Executes a SQL statement specified in the body of the request. An example of this SQL statement in the case of Salesforce connector would be 'select * from Account a, Order o where a.Id = o.AccountId'.
		/// Connectors_projects_locations_connections_executeSqlQuery v2/{connection}:executeSqlQuery
		/// </summary>
		/// <param name="connection">Required. Resource name of the Connection. Format: projects/{project}/locations/{location}/connections/{connection}</param>
		/// <returns>Successful response</returns>
		public async Task<ExecuteSqlQueryResponse> Connectors_projects_locations_connections_executeSqlQueryAsync(string connection, ExecuteSqlQueryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (connection==null? "" : System.Uri.EscapeDataString(connection))+":executeSqlQuery";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExecuteSqlQueryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes entities based on conditions specified in the request and not on entity id.
		/// Connectors_projects_locations_connections_entityTypes_entities_deleteEntitiesWithConditions v2/{entityType}/entities:deleteEntitiesWithConditions
		/// </summary>
		/// <param name="entityType">Required. Resource name of the Entity Type. Format: projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}</param>
		/// <param name="conditions">Required. Conditions to be used when deleting entities. From a proto standpoint, There are no restrictions on what can be passed using this field. The connector documentation should have information about what format of filters/conditions are supported. Note: If this conditions field is left empty, an exception is thrown. We don't want to consider 'empty conditions' to be a match-all case. Connector developers can determine and document what a match-all case constraint would be.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Connectors_projects_locations_connections_entityTypes_entities_deleteEntitiesWithConditionsAsync(string entityType, string conditions, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (entityType==null? "" : System.Uri.EscapeDataString(entityType))+"/entities:deleteEntitiesWithConditions&conditions=" + (conditions==null? "" : System.Uri.EscapeDataString(conditions));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates entities based on conditions specified in the request and not on entity id.
		/// Connectors_projects_locations_connections_entityTypes_entities_updateEntitiesWithConditions v2/{entityType}/entities:updateEntitiesWithConditions
		/// </summary>
		/// <param name="entityType">Required. Resource name of the Entity Type. Format: projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}</param>
		/// <param name="conditions">Required. Conditions to be used when updating entities. From a proto standpoint, There are no restrictions on what can be passed using this field. The connector documentation should have information about what format of filters/conditions are supported. Note: If this conditions field is left empty, an exception is thrown. We don't want to consider 'empty conditions' to be a match-all case. Connector developers can determine and document what a match-all case constraint would be.</param>
		/// <returns>Successful response</returns>
		public async Task<UpdateEntitiesWithConditionsResponse> Connectors_projects_locations_connections_entityTypes_entities_updateEntitiesWithConditionsAsync(string entityType, string conditions, Entity requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (entityType==null? "" : System.Uri.EscapeDataString(entityType))+"/entities:updateEntitiesWithConditions&conditions=" + (conditions==null? "" : System.Uri.EscapeDataString(conditions));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateEntitiesWithConditionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing entity row matching the entity type and entity id specified in the request.
		/// Connectors_projects_locations_connections_entityTypes_entities_delete v2/{name}
		/// </summary>
		/// <param name="name">Required. Resource name of the Entity Type. Format: projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}/entities/{id}</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Connectors_projects_locations_connections_entityTypes_entities_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a single entity row matching the entity type and entity id specified in the request.
		/// Connectors_projects_locations_connections_entityTypes_entities_get v2/{name}
		/// </summary>
		/// <param name="name">Required. Resource name of the Entity Type. Format: projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}/entities/{id}</param>
		/// <returns>Successful response</returns>
		public async Task<Entity> Connectors_projects_locations_connections_entityTypes_entities_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Entity>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing entity row matching the entity type and entity id specified in the request. The fields in the entity row that need to be modified are contained in the body of the request. All unspecified fields are left unchanged. The response message contains a `Entity` message object returned as a response by the external system.
		/// Connectors_projects_locations_connections_entityTypes_entities_patch v2/{name}
		/// </summary>
		/// <param name="name">Output only. Resource name of the Entity. Format: projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}/entities/{id}</param>
		/// <returns>Successful response</returns>
		public async Task<Entity> Connectors_projects_locations_connections_entityTypes_entities_patchAsync(string name, Entity requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Entity>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Reports readiness status of the connector. Similar logic to GetStatus but modified for kubernetes health check to understand.
		/// Connectors_projects_locations_connections_checkReadiness v2/{name}:checkReadiness
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<CheckReadinessResponse> Connectors_projects_locations_connections_checkReadinessAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":checkReadiness";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CheckReadinessResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reports the status of the connection. Note that when the connection is in a state that is not ACTIVE, the implementation of this RPC method must return a Status with the corresponding State instead of returning a gRPC status code that is not "OK", which indicates that ConnectionStatus itself, not the connection, failed.
		/// Connectors_projects_locations_connections_checkStatus v2/{name}:checkStatus
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<CheckStatusResponse> Connectors_projects_locations_connections_checkStatusAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":checkStatus";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CheckStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ExchangeAuthCode exchanges the OAuth authorization code (and other necessary data) for an access token (and associated credentials).
		/// Connectors_projects_locations_connections_exchangeAuthCode v2/{name}:exchangeAuthCode
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<ExchangeAuthCodeResponse> Connectors_projects_locations_connections_exchangeAuthCodeAsync(string name, ExchangeAuthCodeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":exchangeAuthCode";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExchangeAuthCodeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Executes an action with the name specified in the request. The input parameters for executing the action are passed through the body of the ExecuteAction request.
		/// Connectors_projects_locations_connections_actions_execute v2/{name}:execute
		/// </summary>
		/// <param name="name">Required. Resource name of the Action. Format: projects/{project}/locations/{location}/connections/{connection}/actions/{action}</param>
		/// <returns>Successful response</returns>
		public async Task<ExecuteActionResponse> Connectors_projects_locations_connections_actions_executeAsync(string name, ExecuteActionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":execute";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExecuteActionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// RefreshAccessToken exchanges the OAuth refresh token (and other necessary data) for a new access token (and new associated credentials).
		/// Connectors_projects_locations_connections_refreshAccessToken v2/{name}:refreshAccessToken
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<RefreshAccessTokenResponse> Connectors_projects_locations_connections_refreshAccessTokenAsync(string name, RefreshAccessTokenRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":refreshAccessToken";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RefreshAccessTokenResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the schema of all the actions supported by the connector.
		/// Connectors_projects_locations_connections_actions_list v2/{parent}/actions
		/// </summary>
		/// <param name="parent">Required. Parent resource name of the Action. Format: projects/{project}/locations/{location}/connections/{connection}</param>
		/// <param name="pageSize">Number of Actions to return. Defaults to 25.</param>
		/// <param name="pageToken">Page token, return from a previous ListActions call, that can be used retrieve the next page of content. If unspecified, the request returns the first page of actions.</param>
		/// <param name="view">Specifies which fields of the Action are returned in the response.</param>
		/// <returns>Successful response</returns>
		public async Task<ListActionsResponse> Connectors_projects_locations_connections_actions_listAsync(string parent, int pageSize, string pageToken, Connectors_projects_locations_connections_actions_listView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/actions&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListActionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists entity rows of a particular entity type contained in the request. Note: 1. Currently, only max of one 'sort_by' column is supported. 2. If no 'sort_by' column is provided, the primary key of the table is used. If zero or more than one primary key is available, we default to the unpaginated list entities logic which only returns the first page. 3. The values of the 'sort_by' columns must uniquely identify an entity row, otherwise undefined behaviors may be observed during pagination. 4. Since transactions are not supported, any updates, inserts or deletes during pagination can lead to stale data being returned or other unexpected behaviors.
		/// Connectors_projects_locations_connections_entityTypes_entities_list v2/{parent}/entities
		/// </summary>
		/// <param name="parent">Required. Resource name of the Entity Type. Format: projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}</param>
		/// <param name="conditions">Conditions to be used when listing entities. From a proto standpoint, There are no restrictions on what can be passed using this field. The connector documentation should have information about what format of filters/conditions are supported.</param>
		/// <param name="pageSize">Number of entity rows to return. Defaults page size = 25. Max page size = 200.</param>
		/// <param name="pageToken">Page token value if available from a previous request.</param>
		/// <param name="sortBy">List of 'sort_by' columns to use when returning the results.</param>
		/// <returns>Successful response</returns>
		public async Task<ListEntitiesResponse> Connectors_projects_locations_connections_entityTypes_entities_listAsync(string parent, string conditions, int pageSize, string pageToken, string[] sortBy, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/entities&conditions=" + (conditions==null? "" : System.Uri.EscapeDataString(conditions))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&"+string.Join("&", sortBy.Select(z => $"sortBy={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListEntitiesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new entity row of the specified entity type in the external system. The field values for creating the row are contained in the body of the request. The response message contains a `Entity` message object returned as a response by the external system.
		/// Connectors_projects_locations_connections_entityTypes_entities_create v2/{parent}/entities
		/// </summary>
		/// <param name="parent">Required. Resource name of the Entity Type. Format: projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}</param>
		/// <returns>Successful response</returns>
		public async Task<Entity> Connectors_projects_locations_connections_entityTypes_entities_createAsync(string parent, Entity requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/entities";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Entity>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists metadata related to all entity types present in the external system.
		/// Connectors_projects_locations_connections_entityTypes_list v2/{parent}/entityTypes
		/// </summary>
		/// <param name="parent">Required. Resource name of the Entity Type. Format: projects/{project}/locations/{location}/connections/{connection}</param>
		/// <param name="pageSize">Number of entity types to return. Defaults to 25.</param>
		/// <param name="pageToken">Page token, return from a previous ListEntityTypes call, that can be used retrieve the next page of content. If unspecified, the request returns the first page of entity types.</param>
		/// <param name="view">Specifies which fields of the Entity Type are returned in the response.</param>
		/// <returns>Successful response</returns>
		public async Task<ListEntityTypesResponse> Connectors_projects_locations_connections_entityTypes_listAsync(string parent, int pageSize, string pageToken, Connectors_projects_locations_connections_entityTypes_listView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/entityTypes&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListEntityTypesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Connectors_projects_locations_connections_actions_listView
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTION_VIEW_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTION_VIEW_BASIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTION_VIEW_FULL = 2,
	}
	
	public enum Connectors_projects_locations_connections_entityTypes_listView
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTITY_TYPE_VIEW_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTITY_TYPE_VIEW_BASIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTITY_TYPE_VIEW_FULL = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
