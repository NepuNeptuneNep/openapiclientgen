//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The object encapsulating the output of an operation affecting the PATROL Agent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActionResponse
	{
		
		/// <summary>
		/// The output of the underlying PSL operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pslOutput")]
		public string PslOutput { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApplicationSummary
	{
		
		/// <summary>
		/// The currency in which all energy cost values are being expressed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costUnit")]
		public string CostUnit { get; set; }
		
		/// <summary>
		/// The list of devices attached to the application.<br><u>Note</u>: when using the <b>Applications</b> service, this list is always empty. It is populated only when using the <b>Application Details</b> service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceSummaries")]
		public DeviceSummary[] DeviceSummaries { get; set; }
		
		/// <summary>
		/// The unit in which all CO<sub>2</sub> emission values are being expressed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emittedCo2Unit")]
		public string EmittedCo2Unit { get; set; }
		
		/// <summary>
		/// The unit in which all energy consumption values are being expressed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energyConsumptionUnit")]
		public string EnergyConsumptionUnit { get; set; }
		
		/// <summary>
		/// The lowest heating margin among the heating margins of the devices attached to the application.<br><u>Note</u>:This field will only be present if a value could be found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heatingMargin")]
		public System.Nullable<System.Double> HeatingMargin { get; set; }
		
		/// <summary>
		/// The percentage of devices attached to the application, whose heating margin could be found.<br><u>Note</u>:This field will only be present if a value could be found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heatingMarginCoverage")]
		public System.Nullable<System.Double> HeatingMarginCoverage { get; set; }
		
		/// <summary>
		/// The name of the device having the lowest heating margin.<br><u>Note</u>:This field will only be present if a value could be found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heatingMarginDeviceName")]
		public string HeatingMarginDeviceName { get; set; }
		
		/// <summary>
		/// The link to the details of the device having the lowest heating margin.<br><u>Note</u>:This field will only be present if a value could be found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heatingMarginDeviceUrl")]
		public string HeatingMarginDeviceUrl { get; set; }
		
		/// <summary>
		/// The unit in which the heating margin of the application is being expressed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heatingMarginUnit")]
		public string HeatingMarginUnit { get; set; }
		
		/// <summary>
		/// The name of the key used to identify the application in the history table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="historyParentIdKey")]
		public string HistoryParentIdKey { get; set; }
		
		/// <summary>
		/// The ID of the application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The number of devices attached to the application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfDevices")]
		public System.Nullable<System.Int32> NumberOfDevices { get; set; }
		
		/// <summary>
		/// The confidence score (percentage) for the daily energy consumption, energy cost and CO<sub>2</sub> emission values.<br>The lower the confidence score, the more extrapolated the values are.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneDayConfidence")]
		public System.Nullable<System.Double> OneDayConfidence { get; set; }
		
		/// <summary>
		/// The daily cost of the energy consumed by the devices attached to the application.<br><u>Note</u>:This field will only be present if a value could be computed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneDayCost")]
		public System.Nullable<System.Double> OneDayCost { get; set; }
		
		/// <summary>
		/// The quantity of CO<sub>2</sub> emitted by the devices attached to the application during one day.<br><u>Note</u>:This field will only be present if a value could be computed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneDayEmittedCo2")]
		public System.Nullable<System.Double> OneDayEmittedCo2 { get; set; }
		
		/// <summary>
		/// The quantity of energy consumed by the devices attached to the application during one day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneDayEnergyConsumption")]
		public System.Nullable<System.Double> OneDayEnergyConsumption { get; set; }
		
		/// <summary>
		/// The confidence score (percentage) for the monthly energy consumption, energy cost and CO<sub>2</sub> emission values.<br>The lower the confidence score, the more extrapolated the values are.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneMonthConfidence")]
		public System.Nullable<System.Double> OneMonthConfidence { get; set; }
		
		/// <summary>
		/// The monthly cost of the energy consumed by the devices attached to the application.<br><u>Note</u>:This field will only be present if a value could be computed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneMonthCost")]
		public System.Nullable<System.Double> OneMonthCost { get; set; }
		
		/// <summary>
		/// The quantity of CO<sub>2</sub> emitted by the devices attached to the application during one month.<br><u>Note</u>:This field will only be present if a value could be computed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneMonthEmittedCo2")]
		public System.Nullable<System.Double> OneMonthEmittedCo2 { get; set; }
		
		/// <summary>
		/// The quantity of energy consumed by the devices attached to the application during one month.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneMonthEnergyConsumption")]
		public System.Nullable<System.Double> OneMonthEnergyConsumption { get; set; }
		
		/// <summary>
		/// The confidence score (percentage) for the yearly energy consumption, energy cost and CO<sub>2</sub> emission values.<br>The lower the confidence score, the more extrapolated the values are.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneYearConfidence")]
		public System.Nullable<System.Double> OneYearConfidence { get; set; }
		
		/// <summary>
		/// The yearly cost of the energy consumed by the devices attached to the application.<br><u>Note</u>:This field will only be present if a value could be computed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneYearCost")]
		public System.Nullable<System.Double> OneYearCost { get; set; }
		
		/// <summary>
		/// The quantity of CO<sub>2</sub> emitted by the devices attached to the application in one year.<br><u>Note</u>:This field will only be present if a value could be computed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneYearEmittedCo2")]
		public System.Nullable<System.Double> OneYearEmittedCo2 { get; set; }
		
		/// <summary>
		/// The quantity of energy consumed by the devices attached to the application during one year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneYearEnergyConsumption")]
		public System.Nullable<System.Double> OneYearEnergyConsumption { get; set; }
		
		/// <summary>
		/// The total power consumption of the devices attached to the application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalPowerConsumption")]
		public System.Nullable<System.Double> TotalPowerConsumption { get; set; }
		
		/// <summary>
		/// The unit in which the total power consumption of the devices attached to the application is being expressed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalPowerConsumptionUnit")]
		public string TotalPowerConsumptionUnit { get; set; }
		
		/// <summary>
		/// The data collection time (as an Epoch time, in seconds).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTimestamp")]
		public System.Nullable<System.Int64> UpdateTimestamp { get; set; }
		
		/// <summary>
		/// The link to the application details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceSummary
	{
		
		/// <summary>
		/// The ID of the PATROL Agent the device is attached to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agentId")]
		public System.Nullable<System.Int32> AgentId { get; set; }
		
		/// <summary>
		/// The name of the PATROL Agent the device is attached to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agentName")]
		public string AgentName { get; set; }
		
		/// <summary>
		/// The ambient temperature of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ambientTemperature")]
		public System.Nullable<System.Double> AmbientTemperature { get; set; }
		
		/// <summary>
		/// The collection time of the heating margin (as an Epoch time, in seconds).<br><u>Note</u>:This field will only be present if a value could be found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collectTime")]
		public string CollectTime { get; set; }
		
		/// <summary>
		/// The TSMOKey of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceTSMOKey")]
		public string DeviceTSMOKey { get; set; }
		
		/// <summary>
		/// The link to the device details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceUrl")]
		public string DeviceUrl { get; set; }
		
		/// <summary>
		/// The heating margin of the device.<br><u>Note</u>:This field will only be present if a value could be found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heatingMargin")]
		public System.Nullable<System.Double> HeatingMargin { get; set; }
		
		/// <summary>
		/// The unit in which the heating margin of the device is being expressed.<br><u>Note</u>:This field will only be present if a value could be found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heatingMarginUnit")]
		public string HeatingMarginUnit { get; set; }
		
		/// <summary>
		/// The ID of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// The ID of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The power consumption of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="powerConsumption")]
		public System.Nullable<System.Double> PowerConsumption { get; set; }
		
		/// <summary>
		/// The unit in which the power consumption of the device is being expressed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="powerConsumptionUnit")]
		public string PowerConsumptionUnit { get; set; }
		
		/// <summary>
		/// The Hardware Sentry KM version of the device's Monitor.<br><u>Note</u>:This field will only be present if a value could be found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productVersion")]
		public string ProductVersion { get; set; }
		
		/// <summary>
		/// The ID of the server the device is attached to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverId")]
		public System.Nullable<System.Int32> ServerId { get; set; }
		
		/// <summary>
		/// The name of the server the device is attached to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverName")]
		public string ServerName { get; set; }
		
		/// <summary>
		/// The SID of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		public string Sid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<DeviceSummaryType> Type { get; set; }
		
		/// <summary>
		/// The data collection time (as an Epoch time, in seconds).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTimestamp")]
		public System.Nullable<System.Int64> UpdateTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeviceSummaryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ESX_HOST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIRTUAL_MACHINE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIRTUAL_CENTER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XEN_HOST = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XEN_MASTER_SERVER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XEN_VIRTUAL_MACHINE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XENAPP_CONTROLLER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XENAPP_MACHINE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VBLOCK_ESX = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VBLOCK_VIRTUAL_MACHINE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VBLOCK_SWITCH = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VBLOCK_STORAGE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VBLOCK_CHASSIS = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VBLOCK_BLADE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VBLOCK_ENV = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AIX_BOX = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AIX_HARD_PARTITION = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AIX_POOL = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AIX_LPAR = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AIX_WPAR = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOL_SYSTEM = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOL_FRAME = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOL_ZONE = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOL_LDOM = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDHAT_KVM_HOST = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDHAT_KVM_GUEST_INSTANCE = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDHAT_XEN_HOST = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDHAT_VM = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HP_SYSTEM = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HP_NPAR = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HP_VPAR = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HP_INT_VM = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HP_INT_HOST = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MS_HOST = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MS_VM = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AZURE_VIRTUALMACHINE = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_EC2 = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OS400_HOST = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOCKER_HOST = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOCKER_NODE = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOCKER_CONTAINER = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROUTER = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HUB = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRINTER = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPEATER = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKSTATION = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NTSERVER = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRINETSERVER = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RMONPROBE = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEBSERVER = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DBSERVER = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAILSERVER = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIREWALL = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHERS = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPSERVER = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEDICATEDAGENT = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTEAGENT = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAYER_3_SWITCH = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTRAL_OFFICE_SWITCH = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCESS_SERVER = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		I_O = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_CACHING = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANAGEMENT = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLOCK_SERVER = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILE_SERVER = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOBILE_USER_DEVICE = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRIDGE_OR_EXTENDER = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GATEWAY = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOADBALANCER = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAINFRAME = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SANSWITCH = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SANHUB = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SANBRIDGE = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SANROUTER = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SANDIRECTOR = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RAIDSTORAGEDEVICE = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIRTUAL_TAPE_LIBRARY = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JBOD = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STORAGESUBSYSTEM = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STORAGE_VIRTUALIZER = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIA_LIBRARY = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTENDERNODE = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAS_HEAD = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELFCONTAINED_NAS = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPS = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IP_PHONE = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANAGEMENT_CONTROLLER = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHASSIS_MANAGER = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOSTBASED_RAID_CONTROLLER = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STORAGE_DEVICE_ENCLOSURE = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESKTOP = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAPTOP = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIRTUAL_LIBRARY_SYSTEM = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLADE_SYSTEM = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLADE_SERVER = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VPN_CONCENTRATOR = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROXY_SERVER = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAYER_3_PROXY_SERVER = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAN_ACCELERATOR = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAN_PROCESSOR = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIRTUAL_SERVER_RHL = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIRTUAL_SERVER_WINDOWS = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ESXi = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIRTUAL_SERVER = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HYPERVISOR = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_AMI = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MS_AZURE = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 108,
	}
	
	/// <summary>
	/// Contains all information regarding a specific PATROL Agent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceAgent
	{
		
		/// <summary>
		/// The status of the PATROL Agent's connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionStatus")]
		public string ConnectionStatus { get; set; }
		
		/// <summary>
		/// The ID of the PATROL Agent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The FQDN of the PATROL Agent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The operating system the PATROL Agent is running on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="os")]
		public string Os { get; set; }
		
		/// <summary>
		/// The port the PATROL Agent is running on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="port")]
		public string Port { get; set; }
		
		/// <summary>
		/// The link to the 'Monitors' tab of the PATROL Agent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The version of the PATROL Agent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// The error's business identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The timestamp of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GlobalSummary
	{
		
		/// <summary>
		/// The CO<sub>2</sub> emissions for all devices. This value can be updated by users with sufficient permissions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="co2Emission")]
		public System.Nullable<System.Double> Co2Emission { get; set; }
		
		/// <summary>
		/// The unit in which the CO<sub>2</sub> emission is being expressed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="co2EmissionUnit")]
		public string Co2EmissionUnit { get; set; }
		
		/// <summary>
		/// If <em>true</em>, indicates that you do not have sufficient rights to update the global settings. However, you may still have sufficient rights to update a specific group's setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="editable")]
		public System.Nullable<System.Boolean> Editable { get; set; }
		
		/// <summary>
		/// The electricity rate for all devices. This value can be updated by users with sufficient permissions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energyCost")]
		public System.Nullable<System.Double> EnergyCost { get; set; }
		
		/// <summary>
		/// The unit in which the electricity rate is being expressed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energyCostUnit")]
		public string EnergyCostUnit { get; set; }
		
		/// <summary>
		/// Regular expression used to filter the groups for which the power consumption will be reported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupNameFilter")]
		public string GroupNameFilter { get; set; }
		
		/// <summary>
		/// The lowest heating margin among the heating margins of all the devices.<br><u>Note</u>:This field will only be present if a value could be found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heatingMargin")]
		public System.Nullable<System.Double> HeatingMargin { get; set; }
		
		/// <summary>
		/// The percentage of devices whose heating margin could be found.<br><u>Note</u>:This field will only be present if a value could be found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heatingMarginCoverage")]
		public System.Nullable<System.Double> HeatingMarginCoverage { get; set; }
		
		/// <summary>
		/// The name of the device having the lowest heating margin.<br><u>Note</u>:This field will only be present if a value could be found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heatingMarginDeviceName")]
		public string HeatingMarginDeviceName { get; set; }
		
		/// <summary>
		/// The link to the details of the device having the lowest heating margin.<br><u>Note</u>:This field will only be present if a value could be found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heatingMarginDeviceUrl")]
		public string HeatingMarginDeviceUrl { get; set; }
		
		/// <summary>
		/// The unit in which the heating margin is being expressed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heatingMarginUnit")]
		public string HeatingMarginUnit { get; set; }
		
		/// <summary>
		/// The ID of the global summary (this ID will always be "global").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The total power consumption of all the devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalPowerConsumption")]
		public System.Nullable<System.Double> TotalPowerConsumption { get; set; }
		
		/// <summary>
		/// The unit in which the total power consumption is being expressed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalPowerConsumptionUnit")]
		public string TotalPowerConsumptionUnit { get; set; }
		
		/// <summary>
		/// The data collection time (as an Epoch time, in seconds).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTimestamp")]
		public System.Nullable<System.Int64> UpdateTimestamp { get; set; }
	}
	
	/// <summary>
	/// The deserialized form of the <b>Energy Footprint Update</b> service's request payload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GroupConfiguration
	{
		
		/// <summary>
		/// Updates the CO<sub>2</sub> emission (unit: kg/kWh).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="co2Emission")]
		public System.Nullable<System.Double> Co2Emission { get; set; }
		
		/// <summary>
		/// Updates the electricity rate (unit: $/kWh).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energyCost")]
		public System.Nullable<System.Double> EnergyCost { get; set; }
		
		/// <summary>
		/// Updates the regular expression used to filter the groups for which the power consumption should be reported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupNameFilter")]
		public string GroupNameFilter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GroupSummary
	{
		
		/// <summary>
		/// The average ambient temperature based on the ambient temperatures of the devices attached to the group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ambientTemperature")]
		public System.Nullable<System.Double> AmbientTemperature { get; set; }
		
		/// <summary>
		/// The unit in which the ambient temperature value is being expressed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ambientTemperatureUnit")]
		public string AmbientTemperatureUnit { get; set; }
		
		/// <summary>
		/// The CO<sub>2</sub> emissions for all devices attached to the group. This value can be updated by users with sufficient permissions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="co2Emission")]
		public System.Nullable<System.Double> Co2Emission { get; set; }
		
		/// <summary>
		/// The unit in which the user-defined CO<sub>2</sub> emission value is being expressed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="co2EmissionUnit")]
		public string Co2EmissionUnit { get; set; }
		
		/// <summary>
		/// The currency in which all energy cost values are being expressed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costUnit")]
		public string CostUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceSummaries")]
		public DeviceSummary[] DeviceSummaries { get; set; }
		
		/// <summary>
		/// The name of the key used to identify the group in the history table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="editable")]
		public System.Nullable<System.Boolean> Editable { get; set; }
		
		/// <summary>
		/// The unit in which all emitted CO<sub>2</sub> quantities are being expressed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emittedCo2Unit")]
		public string EmittedCo2Unit { get; set; }
		
		/// <summary>
		/// The unit in which all energy consumption values are being expressed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energyConsumptionUnit")]
		public string EnergyConsumptionUnit { get; set; }
		
		/// <summary>
		/// The electricity rate for all devices attached to the group. This value can be updated by users with sufficient permissions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energyCost")]
		public System.Nullable<System.Double> EnergyCost { get; set; }
		
		/// <summary>
		/// The unit in which th euser-defined electricity rate value is being expressed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energyCostUnit")]
		public string EnergyCostUnit { get; set; }
		
		/// <summary>
		/// The lowest heating margin among the heating margins of the devices attached to the group.<br><u>Note</u>:This field will only be present if a value could be found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heatingMargin")]
		public System.Nullable<System.Double> HeatingMargin { get; set; }
		
		/// <summary>
		/// The percentage of devices attached to the group, whose heating margin could be found.<br><u>Note</u>:This field will only be present if a value could be found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heatingMarginCoverage")]
		public System.Nullable<System.Double> HeatingMarginCoverage { get; set; }
		
		/// <summary>
		/// The name of the device having the lowest heating margin.<br><u>Note</u>:This field will only be present if a value could be found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heatingMarginDeviceName")]
		public string HeatingMarginDeviceName { get; set; }
		
		/// <summary>
		/// The link to the details of the device having the lowest heating margin.<br><u>Note</u>:This field will only be present if a value could be found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heatingMarginDeviceUrl")]
		public string HeatingMarginDeviceUrl { get; set; }
		
		/// <summary>
		/// The unit in which the heating margin of the group is being expressed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heatingMarginUnit")]
		public string HeatingMarginUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="historyParentIdKey")]
		public string HistoryParentIdKey { get; set; }
		
		/// <summary>
		/// The ID of the group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The number of devices attached to the group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfDevices")]
		public System.Nullable<System.Int32> NumberOfDevices { get; set; }
		
		/// <summary>
		/// The confidence score (percentage) for the daily energy consumption, energy cost and CO<sub>2</sub> emission values.<br>The lower the confidence score, the more extrapolated the values are.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneDayConfidence")]
		public System.Nullable<System.Double> OneDayConfidence { get; set; }
		
		/// <summary>
		/// The daily cost of the energy consumed by the devices attached to the group.<br><u>Note</u>:This field will only be present if a value could be computed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneDayCost")]
		public System.Nullable<System.Double> OneDayCost { get; set; }
		
		/// <summary>
		/// The quantity of CO<sub>2</sub> emitted by the devices attached to the group during one day.<br><u>Note</u>:This field will only be present if a value could be computed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneDayEmittedCo2")]
		public System.Nullable<System.Double> OneDayEmittedCo2 { get; set; }
		
		/// <summary>
		/// The quantity of energy consumed by the devices attached to the group during one day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneDayEnergyConsumption")]
		public System.Nullable<System.Double> OneDayEnergyConsumption { get; set; }
		
		/// <summary>
		/// The confidence score (percentage) for the monthly energy consumption, energy cost and CO<sub>2</sub> emission values.<br>The lower the confidence score, the more extrapolated the values are.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneMonthConfidence")]
		public System.Nullable<System.Double> OneMonthConfidence { get; set; }
		
		/// <summary>
		/// The monthly cost of the energy consumed by the devices attached to the group.<br><u>Note</u>:This field will only be present if a value could be computed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneMonthCost")]
		public System.Nullable<System.Double> OneMonthCost { get; set; }
		
		/// <summary>
		/// The quantity of CO<sub>2</sub> emitted by the devices attached to the group during one month.<br><u>Note</u>:This field will only be present if a value could be computed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneMonthEmittedCo2")]
		public System.Nullable<System.Double> OneMonthEmittedCo2 { get; set; }
		
		/// <summary>
		/// The quantity of energy consumed by the devices attached to the group during one month.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneMonthEnergyConsumption")]
		public System.Nullable<System.Double> OneMonthEnergyConsumption { get; set; }
		
		/// <summary>
		/// The confidence score (percentage) for the yearly energy consumption, energy cost and CO<sub>2</sub> emission values.<br>The lower the confidence score, the more extrapolated the values are.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneYearConfidence")]
		public System.Nullable<System.Double> OneYearConfidence { get; set; }
		
		/// <summary>
		/// The yearly cost of the energy consumed by the devices attached to the group.<br><u>Note</u>:This field will only be present if a value could be computed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneYearCost")]
		public System.Nullable<System.Double> OneYearCost { get; set; }
		
		/// <summary>
		/// The quantity of CO<sub>2</sub> emitted by the devices attached to the group in one year.<br><u>Note</u>:This field will only be present if a value could be computed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneYearEmittedCo2")]
		public System.Nullable<System.Double> OneYearEmittedCo2 { get; set; }
		
		/// <summary>
		/// The quantity of energy consumed by the devices attached to the group during one year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneYearEnergyConsumption")]
		public System.Nullable<System.Double> OneYearEnergyConsumption { get; set; }
		
		/// <summary>
		/// The ID of the server the group is attached to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverId")]
		public System.Nullable<System.Int32> ServerId { get; set; }
		
		/// <summary>
		/// The total power consumption of the devices attached to the group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalPowerConsumption")]
		public System.Nullable<System.Double> TotalPowerConsumption { get; set; }
		
		/// <summary>
		/// The unit in which the total power consumption of the devices attached to the group is being expressed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalPowerConsumptionUnit")]
		public string TotalPowerConsumptionUnit { get; set; }
		
		/// <summary>
		/// The data collection time (as an Epoch time, in seconds).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTimestamp")]
		public System.Nullable<System.Int64> UpdateTimestamp { get; set; }
		
		/// <summary>
		/// The link to the group details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// The deserialized form of the <b>Reinitialize</b> service's request payload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReinitializeActionConfiguration
	{
		
		/// <summary>
		/// When set to <em>1</em>, removes all manually set Alert Actions and reverts to basic default actions i.e. trigger a PATROL event and annotate a parameter graph.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resetAlertActions")]
		public System.Nullable<ReinitializeActionConfigurationResetAlertActions> ResetAlertActions { get; set; }
		
		/// <summary>
		/// When set to <em>1</em>, resets the number of times thresholds can be breached before triggering an alert to their default values (1 time) for numeric, discrete, connector status and present parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resetAlertAfterNTimes")]
		public System.Nullable<ReinitializeActionConfigurationResetAlertAfterNTimes> ResetAlertAfterNTimes { get; set; }
		
		/// <summary>
		/// When set to <em>1</em>, deactivates the debug mode when it was manually enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resetDebugMode")]
		public System.Nullable<ReinitializeActionConfigurationResetDebugMode> ResetDebugMode { get; set; }
		
		/// <summary>
		/// When set to <em>1</em>, removes all user-defined frequencies for discovery and polling processes to their default values (respectively 1 hour and 2 minutes).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resetDiscoveryAndPollingIntervals")]
		public System.Nullable<ReinitializeActionConfigurationResetDiscoveryAndPollingIntervals> ResetDiscoveryAndPollingIntervals { get; set; }
		
		/// <summary>
		/// When set to <em>1</em>, removes the custom Java settings (path and credentials). The KM will try to automatically find a suitable JRE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resetJavaSettings")]
		public System.Nullable<ReinitializeActionConfigurationResetJavaSettings> ResetJavaSettings { get; set; }
		
		/// <summary>
		/// When set to <em>1</em>, reverts any manually performed configuration changes to the default Hardware Sentry values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resetOtherAlertSettings")]
		public System.Nullable<ReinitializeActionConfigurationResetOtherAlertSettings> ResetOtherAlertSettings { get; set; }
		
		/// <summary>
		/// When set to <em>1</em>, reactivates the monitoring of all paused or removed objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resetRemovedPausedObjectList")]
		public System.Nullable<ReinitializeActionConfigurationResetRemovedPausedObjectList> ResetRemovedPausedObjectList { get; set; }
		
		/// <summary>
		/// When set to <em>1</em>, clears the report schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resetReportSettings")]
		public System.Nullable<ReinitializeActionConfigurationResetReportSettings> ResetReportSettings { get; set; }
		
		/// <summary>
		/// When set to <em>1</em>, resets all thresholds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resetThresholds")]
		public System.Nullable<ReinitializeActionConfigurationResetThresholds> ResetThresholds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReinitializeActionConfigurationResetAlertActions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReinitializeActionConfigurationResetAlertAfterNTimes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReinitializeActionConfigurationResetDebugMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReinitializeActionConfigurationResetDiscoveryAndPollingIntervals
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReinitializeActionConfigurationResetJavaSettings
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReinitializeActionConfigurationResetOtherAlertSettings
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReinitializeActionConfigurationResetRemovedPausedObjectList
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReinitializeActionConfigurationResetReportSettings
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReinitializeActionConfigurationResetThresholds
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	/// <summary>
	/// Encapsulates a list of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResultPage
	{
		
		/// <summary>
		/// The list of currently accessible results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public string[] Items { get; set; }
		
		/// <summary>
		/// If <em>true</em>, indicates that you are denied access to part of, or all the results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictedRights")]
		public System.Nullable<System.Boolean> RestrictedRights { get; set; }
		
		/// <summary>
		/// The total number of accessible results, including the results not listed in <em>items</em>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int64> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceSummary
	{
		
		/// <summary>
		/// The currency in which all energy cost values are being expressed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costUnit")]
		public string CostUnit { get; set; }
		
		/// <summary>
		/// The list of devices attached to the service.<br><u>Note</u>: when using the <b>Services</b> service, this list is always empty. It is populated only when using the <b>Service Details</b> service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceSummaries")]
		public DeviceSummary[] DeviceSummaries { get; set; }
		
		/// <summary>
		/// The unit in which all CO<sub>2</sub> emission values are being expressed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emittedCo2Unit")]
		public string EmittedCo2Unit { get; set; }
		
		/// <summary>
		/// The unit in which all energy consumption values are being expressed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energyConsumptionUnit")]
		public string EnergyConsumptionUnit { get; set; }
		
		/// <summary>
		/// The lowest heating margin among the heating margins of the devices attached to the service.<br><u>Note</u>:This field will only be present if a value could be found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heatingMargin")]
		public System.Nullable<System.Double> HeatingMargin { get; set; }
		
		/// <summary>
		/// The percentage of devices attached to the service, whose heating margin could be found.<br><u>Note</u>:This field will only be present if a value could be found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heatingMarginCoverage")]
		public System.Nullable<System.Double> HeatingMarginCoverage { get; set; }
		
		/// <summary>
		/// The name of the device having the lowest heating margin.<br><u>Note</u>:This field will only be present if a value could be found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heatingMarginDeviceName")]
		public string HeatingMarginDeviceName { get; set; }
		
		/// <summary>
		/// The link to the details of the device having the lowest heating margin.<br><u>Note</u>:This field will only be present if a value could be found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heatingMarginDeviceUrl")]
		public string HeatingMarginDeviceUrl { get; set; }
		
		/// <summary>
		/// The unit in which the heating margin of the service is being expressed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heatingMarginUnit")]
		public string HeatingMarginUnit { get; set; }
		
		/// <summary>
		/// The name of the key used to identify the service in the history table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="historyParentIdKey")]
		public string HistoryParentIdKey { get; set; }
		
		/// <summary>
		/// The ID of the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The number of devices attached to the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfDevices")]
		public System.Nullable<System.Int32> NumberOfDevices { get; set; }
		
		/// <summary>
		/// The confidence score (percentage) for the daily energy consumption, energy cost and CO<sub>2</sub> emission values.<br>The lower the confidence score, the more extrapolated the values are.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneDayConfidence")]
		public System.Nullable<System.Double> OneDayConfidence { get; set; }
		
		/// <summary>
		/// The daily cost of the energy consumed by the devices attached to the service.<br><u>Note</u>:This field will only be present if a value could be computed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneDayCost")]
		public System.Nullable<System.Double> OneDayCost { get; set; }
		
		/// <summary>
		/// The quantity of CO<sub>2</sub> emitted by the devices attached to the service during one day.<br><u>Note</u>:This field will only be present if a value could be computed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneDayEmittedCo2")]
		public System.Nullable<System.Double> OneDayEmittedCo2 { get; set; }
		
		/// <summary>
		/// The quantity of energy consumed by the devices attached to the service during one day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneDayEnergyConsumption")]
		public System.Nullable<System.Double> OneDayEnergyConsumption { get; set; }
		
		/// <summary>
		/// The confidence score (percentage) for the monthly energy consumption, energy cost and CO<sub>2</sub> emission values.<br>The lower the confidence score, the more extrapolated the values are.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneMonthConfidence")]
		public System.Nullable<System.Double> OneMonthConfidence { get; set; }
		
		/// <summary>
		/// The monthly cost of the energy consumed by the devices attached to the service.<br><u>Note</u>:This field will only be present if a value could be computed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneMonthCost")]
		public System.Nullable<System.Double> OneMonthCost { get; set; }
		
		/// <summary>
		/// The quantity of CO<sub>2</sub> emitted by the devices attached to the service during one month.<br><u>Note</u>:This field will only be present if a value could be computed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneMonthEmittedCo2")]
		public System.Nullable<System.Double> OneMonthEmittedCo2 { get; set; }
		
		/// <summary>
		/// The quantity of energy consumed by the devices attached to the service during one month.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneMonthEnergyConsumption")]
		public System.Nullable<System.Double> OneMonthEnergyConsumption { get; set; }
		
		/// <summary>
		/// The confidence score (percentage) for the yearly energy consumption, energy cost and CO<sub>2</sub> emission values.<br>The lower the confidence score, the more extrapolated the values are.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneYearConfidence")]
		public System.Nullable<System.Double> OneYearConfidence { get; set; }
		
		/// <summary>
		/// The yearly cost of the energy consumed by the devices attached to the service.<br><u>Note</u>:This field will only be present if a value could be computed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneYearCost")]
		public System.Nullable<System.Double> OneYearCost { get; set; }
		
		/// <summary>
		/// The quantity of CO<sub>2</sub> emitted by the devices attached to the service in one year.<br><u>Note</u>:This field will only be present if a value could be computed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneYearEmittedCo2")]
		public System.Nullable<System.Double> OneYearEmittedCo2 { get; set; }
		
		/// <summary>
		/// The quantity of energy consumed by the devices attached to the service during one year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneYearEnergyConsumption")]
		public System.Nullable<System.Double> OneYearEnergyConsumption { get; set; }
		
		/// <summary>
		/// The ID of the server providing the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerId")]
		public string ProviderId { get; set; }
		
		/// <summary>
		/// The total power consumption of the devices attached to the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalPowerConsumption")]
		public System.Nullable<System.Double> TotalPowerConsumption { get; set; }
		
		/// <summary>
		/// The unit in which the total power consumption of the devices attached to the service is being expressed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalPowerConsumptionUnit")]
		public string TotalPowerConsumptionUnit { get; set; }
		
		/// <summary>
		/// The data collection time (as an Epoch time, in seconds).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTimestamp")]
		public System.Nullable<System.Int64> UpdateTimestamp { get; set; }
		
		/// <summary>
		/// The link to the service details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Triggers a new collect on a specific device.
		/// You need to provide the <b>Device ID</b> and <b>Monitor Class</b> parameters to identify the device:<br>- Use the <b>/hardware/devices</b> service in the <b>Device</b> section to retrieve the <b>Device ID</b> of any device.<br>- Use the <b>/hardware/device-monitors/{deviceId}</b> service in the <b>Device</b> section to retrieve the <b>Monitor Class</b> of a device.
		/// CollectNow hardware/actions/{deviceId}/collect-now
		/// </summary>
		/// <param name="deviceId">The ID of the device.</param>
		/// <param name="monitorClass">The Monitor Class of the device.</param>
		/// <returns>Successful operation</returns>
		public async Task CollectNowAsync(int deviceId, string monitorClass, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hardware/actions/"+deviceId+"/collect-now?monitorClass=" + (monitorClass==null? "" : System.Uri.EscapeDataString(monitorClass));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Triggers a new discovery on a specific device.
		/// You need to provide the <b>Device ID</b> to identify the device:<br>- Use the <b>/hardware/devices</b> service in the <b>Device</b> section to retrieve the <b>Device ID</b> of a device.
		/// Rediscover hardware/actions/{deviceId}/rediscover
		/// </summary>
		/// <param name="deviceId">The ID of the device.</param>
		/// <returns>Successful operation</returns>
		public async Task RediscoverAsync(int deviceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hardware/actions/"+deviceId+"/rediscover";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sends a 'Reinitialize KM' command.
		/// Launches a 'Reinitialize KM' command for the following parameters:<br>- resetDiscoveryAndPollingIntervals<br>- resetAlertAfterNTimes<br>- resetAlertActions<br>- resetOtherA<br>- resetSettings<br>- resetDebugMode<br>- resetRemovedPausedObjectList<br>- resetReportSettings<br>- resetJavaSettings<br>- resetThresholds<br><br>You need to provide the <b>Device ID</b> to identify the device:<br>- Use the <b>/hardware/devices</b> service in the <b>Device</b> section to retrieve the <b>Device ID</b> of a device.
		/// Reinitialize hardware/actions/{deviceId}/reinitialize
		/// </summary>
		/// <param name="deviceId">The ID of the device.</param>
		/// <param name="requestBody">The request body as a JSON payload.</param>
		/// <returns>Successful operation</returns>
		public async Task ReinitializeAsync(int deviceId, ReinitializeActionConfiguration requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hardware/actions/"+deviceId+"/reinitialize";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a specific instance from the monitoring environment.
		/// You need to provide the <b>Device ID</b>, the <b>Monitor Class</b> and the <b>Monitor SID</b> parameters:<br>- Use the <b>/hardware/devices</b> service in the <b>Device</b> section to retrieve the <b>Device ID</b> of any device.<br>- Use the <b>/hardware/device-monitors/{deviceId}</b> service in the <b>Device</b> section to retrieve the <b>Monitor Class</b> and the <b>Monitor SID</b> for a device.<br><br>(Example:"path":"/MS_HW_MAIN/10025150" where <em>MS_HW_MAIN</em> is the Monitor Class and <em>10025150</em> is the Monitor SID).
		/// Remove hardware/actions/{deviceId}/remove
		/// </summary>
		/// <param name="deviceId">The ID of the device.</param>
		/// <param name="monitorClass">The Monitor Class of the device.</param>
		/// <param name="monitorSid">The Monitor SID of the device.</param>
		/// <returns>Successful operation</returns>
		public async Task RemoveAsync(int deviceId, string monitorClass, string monitorSid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hardware/actions/"+deviceId+"/remove?monitorClass=" + (monitorClass==null? "" : System.Uri.EscapeDataString(monitorClass))+"&monitorSid=" + (monitorSid==null? "" : System.Uri.EscapeDataString(monitorSid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resets the Error Count parameter.
		/// Sets the Error Count parameter to 0.<br><br>You need to provide the <b>Device ID</b>, the <b>Monitor Class</b> and the <b>Monitor SID</b> parameters:<br>- Use the <b>/hardware/devices</b> service in the <b>Device</b> section to retrieve the <b>Device ID</b> of any device.<br>- Use the <b>/hardware/device-monitors/{deviceId}</b> service in the <b>Device</b> section to retrieve the <b>Monitor Class</b> and the <b>Monitor SID</b> for a device.<br><br>(Example:"path":"/MS_HW_MAIN/10025150" where <em>MS_HW_MAIN</em> is the Monitor Class and <em>10025150</em> is the monitorSid).
		/// Reset hardware/actions/{deviceId}/reset-error-count
		/// </summary>
		/// <param name="deviceId">The ID of the device.</param>
		/// <param name="monitorClass">The Monitor Class of the device.</param>
		/// <param name="monitorSid">The Monitor SID of the device.</param>
		/// <returns>Successful operation</returns>
		public async Task ResetAsync(int deviceId, string monitorClass, string monitorSid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hardware/actions/"+deviceId+"/reset-error-count?monitorClass=" + (monitorClass==null? "" : System.Uri.EscapeDataString(monitorClass))+"&monitorSid=" + (monitorSid==null? "" : System.Uri.EscapeDataString(monitorSid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets summarized information about all monitored applications.
		/// Lists all the available ApplicationSummary instances.
		/// GetApplications hardware/applications
		/// </summary>
		/// <param name="page">The page number to retrieve (first page is 0).</param>
		/// <param name="limit">The maximum number of entries per page.</param>
		/// <param name="direction">The sorting order (case insensitive).</param>
		/// <param name="sort">The column to sort by (case insensitive).</param>
		/// <returns>Successful operation</returns>
		public async Task GetApplicationsAsync(string page, int limit, GetApplicationsDirection direction, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hardware/applications?page=" + (page==null? "" : System.Uri.EscapeDataString(page))+"&limit="+limit+"&direction=" + direction+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets detailed information for a specific application.
		/// You need to provide an <b>Application ID</b>:<br>- use the <b>hardware/applications</b> service to retrieve all available application IDs.
		/// GetOneApplication hardware/applications/{applicationId}
		/// </summary>
		/// <param name="applicationId">The ID of the application.</param>
		/// <returns>Successful operation</returns>
		public async Task GetOneApplicationAsync(string applicationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hardware/applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the Monitors for a specific device.
		/// You need to provide a <b>Device ID</b>:<br>- use the <b>hardware/devices</b> service to get all available device IDs.
		/// GetDeviceMonitors hardware/device-monitors/{deviceId}
		/// </summary>
		/// <param name="deviceId">The ID of the device.</param>
		/// <returns>Successful operation</returns>
		public async Task GetDeviceMonitorsAsync(int deviceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hardware/device-monitors/"+deviceId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets summarized information about all monitored devices.
		/// Lists the available DeviceSummary instances.<br><br>If a parent ID (group ID, application ID, or service ID) is provided, the function narrows down the devices list to those attached to the specified parent:<br>- use the <b>hardware/groups</b> service in the <b>Groups</b> section to get all available group IDs.<br>- use the <b>hardware/applications</b> service in the <b>Applications</b> section to get all available application IDs.<br>- use the <b>hardware/services</b> service in the <b>Services</b> section to get all available service IDs.<br><br><b>Note</b>: At most, one parent ID is taken into account according to this order of precedence:<ol><li>group ID</li><li>application ID</li><li>service ID</li></ol>
		/// GetDevices hardware/devices
		/// </summary>
		/// <param name="page">The page number to retrieve (first page is 0).</param>
		/// <param name="limit">The maximum number of entries per page.</param>
		/// <param name="direction">The sorting order (case insensitive).</param>
		/// <param name="sort">The column to sort by (case insensitive).</param>
		/// <param name="groupId">The ID of the group.</param>
		/// <param name="applicationId">The ID of the application.</param>
		/// <param name="serviceId">The ID of the service.</param>
		/// <returns>Successful operation</returns>
		public async Task GetDevicesAsync(string page, int limit, GetApplicationsDirection direction, string sort, string groupId, string applicationId, string serviceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hardware/devices?page=" + (page==null? "" : System.Uri.EscapeDataString(page))+"&limit="+limit+"&direction=" + direction+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&groupId=" + (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"&applicationId=" + (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"&serviceId=" + (serviceId==null? "" : System.Uri.EscapeDataString(serviceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets overall information for all devices.
		/// Lists the GlobalSummary instance for all the monitored devices.
		/// GetDevicesSummary hardware/devices-summary
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task GetDevicesSummaryAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hardware/devices-summary";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets detailed information about a specific device.
		/// You need to provide a <b>Device ID</b>:<br>-use the <b>hardware/devices</b> service to get all available device IDs.
		/// GetDevice hardware/devices/{deviceId}
		/// </summary>
		/// <param name="deviceId">The ID of the device.</param>
		/// <returns>Successful operation</returns>
		public async Task GetDeviceAsync(int deviceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hardware/devices/"+deviceId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets detailed information about an Agent.
		/// You need to provide a <b>Device ID</b> to retrieve detailed information about the Agent that Monitors the device:<br>-use the <b>hardware/devices</b> service to get all available device IDs.
		/// GetDeviceAgent hardware/devices/{deviceId}/agent
		/// </summary>
		/// <param name="deviceId">The ID of the device.</param>
		/// <returns>Successful operation</returns>
		public async Task GetDeviceAgentAsync(int deviceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hardware/devices/"+deviceId+"/agent";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of all the devices monitored by an Agent.
		/// You need to provide the <b>Device ID</b> of a device to retrieve any other devices monitored by the same Agent:<br>-use the <b>hardware/devices</b> service to get all available device IDs.
		/// GetAgentDevices hardware/devices/{deviceId}/agent-devices
		/// </summary>
		/// <param name="deviceId">The ID of the device.</param>
		/// <returns>Successful operation</returns>
		public async Task GetAgentDevicesAsync(int deviceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hardware/devices/"+deviceId+"/agent-devices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets data history for a parameter of a specific device over a given period.
		/// You need to provide the <b>Device ID</b>, <b>Parameter Name</b>, <b>Monitor Type</b> and <b>Monitor SID</b>:<br>- use the <b>hardware/devices</b> service to get all available device IDs<br>- use the <b>/hardware/device-monitors/{deviceId}</b> to get the parameter name, the Monitor type and the Monitor SID.<br><br>Finally, define the period for which you wish to retrieve data history.
		/// GetDeviceParameterHistory hardware/devices/{deviceId}/parameter-history
		/// </summary>
		/// <param name="deviceId">The ID of the device.</param>
		/// <param name="parameterName">The name of the parameter.</param>
		/// <param name="monitorType">The unique name of the Monitor type.</param>
		/// <param name="from">Beginning of the period (Epoch time, in seconds).</param>
		/// <param name="to">End of the period (Epoch time, in seconds).</param>
		/// <param name="monitorSid">The Monitor SID (to filter the list of Monitors).</param>
		/// <returns>Successful operation</returns>
		public async Task GetDeviceParameterHistoryAsync(int deviceId, string parameterName, string monitorType, long from, long to, string monitorSid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hardware/devices/"+deviceId+"/parameter-history?parameterName=" + (parameterName==null? "" : System.Uri.EscapeDataString(parameterName))+"&monitorType=" + (monitorType==null? "" : System.Uri.EscapeDataString(monitorType))+"&from="+from+"&to="+to+"&monitorSid=" + (monitorSid==null? "" : System.Uri.EscapeDataString(monitorSid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the energy usage for a specific device and a given period.
		/// You need to provide the device ID:<br>- use the <b>hardware/devices</b> service to get all available device IDs.
		/// GetDeviceEnergyUsage hardware/energy-usage/{deviceId}
		/// </summary>
		/// <param name="deviceId">The ID of the device.</param>
		/// <param name="rollPeriod">The period for which you wish to retrieve energy usage data.</param>
		/// <param name="basis">Subdivision of the period for which you wish to retrieve energy usage data.</param>
		/// <returns>Successful operation</returns>
		public async Task GetDeviceEnergyUsageAsync(int deviceId, GetDeviceEnergyUsageRollPeriod rollPeriod, GetDeviceEnergyUsageBasis basis, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hardware/energy-usage/"+deviceId+"?rollPeriod=" + rollPeriod+"&basis=" + basis;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all group summaries.
		/// Lists the available GroupSummary instances.
		/// GetGroups hardware/groups
		/// </summary>
		/// <param name="page">The page number to retrieve (first page is 0).</param>
		/// <param name="limit">The maximum number of entries per page.</param>
		/// <param name="direction">The sorting order (case insensitive).</param>
		/// <param name="sort">The column to sort by (case insensitive).</param>
		/// <returns>Successful operation</returns>
		public async Task GetGroupsAsync(string page, int limit, GetApplicationsDirection direction, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hardware/groups?page=" + (page==null? "" : System.Uri.EscapeDataString(page))+"&limit="+limit+"&direction=" + direction+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets detailed information about a specific group.
		/// You need to provide a <b>Device ID</b>:<br>- use the <b>hardware/groups</b> service to get all available group ID.
		/// GetOneGroup hardware/groups/{groupId}
		/// </summary>
		/// <param name="groupId">The ID of the group.</param>
		/// <returns>Successful operation</returns>
		public async Task GetOneGroupAsync(string groupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hardware/groups/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the values of the energy footprint parameter for a specific group.
		/// You need to provide a <b>Device ID</b>:<br>- use the <b>hardware/groups</b> service to get all available group ID.<br><br>If the ID is <em>"global"</em>, then the group being updated is the GlobalSummary.
		/// UpdateEnergyCost hardware/groups/{groupId}
		/// </summary>
		/// <param name="groupId">The ID of the group.</param>
		/// <param name="requestBody">The values you wish to assign.</param>
		/// <returns>Successful operation</returns>
		public async Task UpdateEnergyCostAsync(string groupId, GroupConfiguration requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hardware/groups/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the heating margin values for each monitored device, when available.
		/// If a parent ID (group ID, application ID, or service ID) is provided, the function narrows down the devices list to those attached to the specified parent:<br>- use the <b>hardware/groups</b> service in the <b>Groups</b> section to get all available group IDs.<br>- use the <b>hardware/applications</b> service in the <b>Applications</b> section to get all available application IDs.<br>- use the <b>hardware/services</b> service in the <b>Services</b> section to get all available service IDs.<br><br><b>Note</b>: At most, one parent ID is taken into account according to this order of precedence:<ol><li>group ID</li><li>application ID</li><li>service ID</li></ol>
		/// GetHeatingMarginCoverage hardware/heating-margin-devices
		/// </summary>
		/// <param name="covered">If set to <em>true</em>, only gets devices whose heating margin information is available.<br>Otherwise, gets any other devices.</param>
		/// <param name="page">The page number to retrieve (first page is 0).</param>
		/// <param name="limit">The maximum number of entries per page.</param>
		/// <param name="direction">The sorting order (case insensitive).</param>
		/// <param name="sort">The column to sort by (case insensitive).</param>
		/// <param name="groupId">The ID of the group.</param>
		/// <param name="applicationId">The ID of the application.</param>
		/// <param name="serviceId">The ID of the service.</param>
		/// <returns>Successful operation</returns>
		public async Task GetHeatingMarginCoverageAsync(bool covered, string page, int limit, GetApplicationsDirection direction, string sort, string groupId, string applicationId, string serviceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hardware/heating-margin-devices?covered="+covered+"&page=" + (page==null? "" : System.Uri.EscapeDataString(page))+"&limit="+limit+"&direction=" + direction+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&groupId=" + (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"&applicationId=" + (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"&serviceId=" + (serviceId==null? "" : System.Uri.EscapeDataString(serviceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets historical data for a specific group, application or service.
		/// Gets the historical data for a specific group, application or service, for a given period.<br><br>If a parent ID (group ID, application ID, or service ID) is provided, the function narrows down the devices list to those attached to the specified parent:<br>- use the <b>hardware/groups</b> service in the <b>Groups</b> section to get all available group IDs.<br>- use the <b>hardware/applications</b> service in the <b>Applications</b> section to get all available application IDs.<br>- use the <b>hardware/services</b> service in the <b>Services</b> section to get all available service IDs.<br><br><b>Note</b>: At most, one parent ID is taken into account according to this order of precedence:<ol><li>group ID</li><li>application ID</li><li>service ID</li></ol>
		/// GetHistory hardware/history
		/// </summary>
		/// <param name="groupId">The ID of the group.</param>
		/// <param name="applicationId">The ID of the application.</param>
		/// <param name="serviceId">The ID of the service.</param>
		/// <param name="from">Beginning of the period (Epoch time, in seconds).</param>
		/// <param name="to">End of the period (Epoch time, in seconds).</param>
		/// <returns>Successful operation</returns>
		public async Task GetHistoryAsync(string groupId, string applicationId, string serviceId, long from, long to, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hardware/history?groupId=" + (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"&applicationId=" + (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"&serviceId=" + (serviceId==null? "" : System.Uri.EscapeDataString(serviceId))+"&from="+from+"&to="+to;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Searches devices by name, model, manufacturer or serial number.
		/// Gets the DeviceSummary instances whose name, model, manufacturer or serial number match the specified criteria.<br><br>If a parent ID (group ID, application ID, or service ID) is provided, the function narrows down the devices list to those attached to the specified parent:<br>- use the <b>hardware/groups</b> service in the <b>Groups</b> section to get all available group IDs.<br>- use the <b>hardware/applications</b> service in the <b>Applications</b> section to get all available application IDs.<br>- use the <b>hardware/services</b> service in the <b>Services</b> section to get all available service IDs.<br><br><b>Note</b>: At most, one parent ID is taken into account according to this order of precedence:<ol><li>group ID</li><li>application ID</li><li>service ID</li></ol>
		/// SearchDevices hardware/search-devices
		/// </summary>
		/// <param name="searchTerms">Space-separated search criteria.</param>
		/// <param name="groupId">The ID of the group.</param>
		/// <param name="applicationId">The ID of the application.</param>
		/// <param name="serviceId">The ID of the service.</param>
		/// <param name="page">The page number to retrieve (first page is 0).</param>
		/// <param name="limit">The maximum number of entries per page.</param>
		/// <returns>Successful operation</returns>
		public async Task SearchDevicesAsync(string searchTerms, string groupId, string applicationId, string serviceId, string page, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hardware/search-devices?searchTerms=" + (searchTerms==null? "" : System.Uri.EscapeDataString(searchTerms))+"&groupId=" + (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"&applicationId=" + (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"&serviceId=" + (serviceId==null? "" : System.Uri.EscapeDataString(serviceId))+"&page=" + (page==null? "" : System.Uri.EscapeDataString(page))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets summarized information about all monitored services.
		/// Lists the available ServiceSummary instances.
		/// GetServices hardware/services
		/// </summary>
		/// <param name="page">The page number to retrieve (first page is 0).</param>
		/// <param name="limit">The maximum number of entries per page.</param>
		/// <param name="direction">The sorting order (case insensitive).</param>
		/// <param name="sort">The column to sort by (case insensitive).</param>
		/// <returns>Successful operation</returns>
		public async Task GetServicesAsync(string page, int limit, GetApplicationsDirection direction, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hardware/services?page=" + (page==null? "" : System.Uri.EscapeDataString(page))+"&limit="+limit+"&direction=" + direction+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets detailed information about a specific service.
		/// You need to provide a <b>Service ID</b> ID :<br>- use the <b>hardware/services</b> service to get all available service IDs.
		/// GetOneService hardware/services/{serviceId}
		/// </summary>
		/// <param name="serviceId">The ID of the service.</param>
		/// <returns>Successful operation</returns>
		public async Task GetOneServiceAsync(string serviceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hardware/services/"+ (serviceId==null? "" : System.Uri.EscapeDataString(serviceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum GetApplicationsDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		asc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		desc = 1,
	}
	
	public enum GetDeviceEnergyUsageRollPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_DAY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_WEEK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_MONTH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIX_MONTHS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_YEAR = 4,
	}
	
	public enum GetDeviceEnergyUsageBasis
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOURLY = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
