//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Async options that determine when a resource should finish.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AsyncOptions
	{
		
		/// <summary>
		/// Method regex where this policy will apply.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="methodMatch")]
		public string MethodMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pollingOptions")]
		public PollingOptions PollingOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PollingOptions
	{
		
		/// <summary>
		/// An array of diagnostics to be collected by Deployment Manager, these diagnostics will be displayed to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diagnostics")]
		public Diagnostic[] Diagnostics { get; set; }
		
		/// <summary>
		/// JsonPath expression that determines if the request failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failCondition")]
		public string FailCondition { get; set; }
		
		/// <summary>
		/// JsonPath expression that determines if the request is completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finishCondition")]
		public string FinishCondition { get; set; }
		
		/// <summary>
		/// JsonPath expression that evaluates to string, it indicates where to poll.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pollingLink")]
		public string PollingLink { get; set; }
		
		/// <summary>
		/// JsonPath expression, after polling is completed, indicates where to fetch the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetLink")]
		public string TargetLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Diagnostic
	{
		
		/// <summary>
		/// JsonPath expression on the resource that if non empty, indicates that this field needs to be extracted as a diagnostic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		/// <summary>
		/// Level to record this diagnostic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="level")]
		public System.Nullable<DiagnosticLevel> Level { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DiagnosticLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFORMATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 3,
	}
	
	/// <summary>
	/// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuditConfig
	{
		
		/// <summary>
		/// The configuration for logging of each type of permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auditLogConfigs")]
		public AuditLogConfig[] AuditLogConfigs { get; set; }
		
		/// <summary>
		/// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
	}
	
	/// <summary>
	/// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuditLogConfig
	{
		
		/// <summary>
		/// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptedMembers")]
		public string[] ExemptedMembers { get; set; }
		
		/// <summary>
		/// The log type that this config enables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logType")]
		public System.Nullable<AuditLogConfigLogType> LogType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AuditLogConfigLogType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOG_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN_READ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_WRITE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_READ = 3,
	}
	
	/// <summary>
	/// BaseType that describes a service-backed Type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BaseType
	{
		
		/// <summary>
		/// Allows resource handling overrides for specific collections
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collectionOverrides")]
		public CollectionOverride[] CollectionOverrides { get; set; }
		
		/// <summary>
		/// The credential used by Deployment Manager and TypeProvider. Only one of the options is permitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credential")]
		public Credential Credential { get; set; }
		
		/// <summary>
		/// Descriptor Url for the this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="descriptorUrl")]
		public string DescriptorUrl { get; set; }
		
		/// <summary>
		/// Options allows customized resource handling by Deployment Manager.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public Options Options { get; set; }
	}
	
	/// <summary>
	/// CollectionOverride allows resource handling overrides for specific resources within a BaseType
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CollectionOverride
	{
		
		/// <summary>
		/// The collection that identifies this resource within its service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collection")]
		public string Collection { get; set; }
		
		/// <summary>
		/// Options allows customized resource handling by Deployment Manager.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public Options Options { get; set; }
	}
	
	/// <summary>
	/// Options allows customized resource handling by Deployment Manager.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Options
	{
		
		/// <summary>
		/// Options regarding how to thread async requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="asyncOptions")]
		public AsyncOptions[] AsyncOptions { get; set; }
		
		/// <summary>
		/// The mappings that apply for requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputMappings")]
		public InputMapping[] InputMappings { get; set; }
		
		/// <summary>
		/// Options for how to validate and process properties on a resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validationOptions")]
		public ValidationOptions ValidationOptions { get; set; }
		
		/// <summary>
		/// Additional properties block described as a jsonSchema, these properties will never be part of the json payload, but they can be consumed by InputMappings, this must be a valid json schema draft-04. The properties specified here will be decouple in a different section. This schema will be merged to the schema validation, and properties here will be extracted From the payload and consumed explicitly by InputMappings. ex: field1: type: string field2: type: number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualProperties")]
		public string VirtualProperties { get; set; }
	}
	
	/// <summary>
	/// InputMapping creates a 'virtual' property that will be injected into the properties before sending the request to the underlying API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputMapping
	{
		
		/// <summary>
		/// The name of the field that is going to be injected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldName")]
		public string FieldName { get; set; }
		
		/// <summary>
		/// The location where this mapping applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public System.Nullable<InputMappingLocation> Location { get; set; }
		
		/// <summary>
		/// Regex to evaluate on method to decide if input applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="methodMatch")]
		public string MethodMatch { get; set; }
		
		/// <summary>
		/// A jsonPath expression to select an element.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputMappingLocation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PATH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUERY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BODY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEADER = 4,
	}
	
	/// <summary>
	/// Options for how to validate and process properties on a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationOptions
	{
		
		/// <summary>
		/// Customize how deployment manager will validate the resource against schema errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemaValidation")]
		public System.Nullable<ValidationOptionsSchemaValidation> SchemaValidation { get; set; }
		
		/// <summary>
		/// Specify what to do with extra properties when executing a request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="undeclaredProperties")]
		public System.Nullable<ValidationOptionsUndeclaredProperties> UndeclaredProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ValidationOptionsSchemaValidation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IGNORE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IGNORE_WITH_WARNINGS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAIL = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ValidationOptionsUndeclaredProperties
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IGNORE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE_WITH_WARNINGS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IGNORE_WITH_WARNINGS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAIL = 5,
	}
	
	/// <summary>
	/// The credential used by Deployment Manager and TypeProvider. Only one of the options is permitted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Credential
	{
		
		/// <summary>
		/// Basic Auth used as a credential.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basicAuth")]
		public BasicAuth BasicAuth { get; set; }
		
		/// <summary>
		/// Service Account used as a credential.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccount")]
		public ServiceAccount ServiceAccount { get; set; }
		
		/// <summary>
		/// Specify to use the project default credential, only supported by Deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useProjectDefault")]
		public System.Nullable<System.Boolean> UseProjectDefault { get; set; }
	}
	
	/// <summary>
	/// Basic Auth used as a credential.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BasicAuth
	{
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
	}
	
	/// <summary>
	/// Service Account used as a credential.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceAccount
	{
		
		/// <summary>
		/// The IAM service account email address like test@myproject.iam.gserviceaccount.com
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
	}
	
	/// <summary>
	/// Associates `members`, or principals, with a `role`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Binding
	{
		
		/// <summary>
		/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public Expr Condition { get; set; }
		
		/// <summary>
		/// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string[] Members { get; set; }
		
		/// <summary>
		/// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
	}
	
	/// <summary>
	/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Expr
	{
		
		/// <summary>
		/// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Textual representation of an expression in Common Expression Language syntax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
		
		/// <summary>
		/// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BulkInsertOperationStatus
	{
		
		/// <summary>
		/// [Output Only] Count of VMs successfully created so far.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdVmCount")]
		public System.Nullable<System.Int32> CreatedVmCount { get; set; }
		
		/// <summary>
		/// [Output Only] Count of VMs that got deleted during rollback.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deletedVmCount")]
		public System.Nullable<System.Int32> DeletedVmCount { get; set; }
		
		/// <summary>
		/// [Output Only] Count of VMs that started creating but encountered an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failedToCreateVmCount")]
		public System.Nullable<System.Int32> FailedToCreateVmCount { get; set; }
		
		/// <summary>
		/// [Output Only] Creation status of BulkInsert operation - information if the flow is rolling forward or rolling back.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<BulkInsertOperationStatusStatus> Status { get; set; }
		
		/// <summary>
		/// [Output Only] Count of VMs originally planned to be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetVmCount")]
		public System.Nullable<System.Int32> TargetVmCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BulkInsertOperationStatusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROLLING_BACK = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DONE = 3,
	}
	
	/// <summary>
	/// Holds the composite type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompositeType
	{
		
		/// <summary>
		/// An optional textual description of the resource; provided by the client when the resource is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Output only. Creation timestamp in RFC3339 text format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertTime")]
		public string InsertTime { get; set; }
		
		/// <summary>
		/// Map of labels; provided by the client when the resource is created or updated. Specifically: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?` Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public CompositeTypeLabelEntry[] Labels { get; set; }
		
		/// <summary>
		/// Name of the composite type, must follow the expression: `[a-z]([-a-z0-9_.]{0,61}[a-z0-9])?`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Represents an Operation resource. Google Compute Engine has three Operation resources: * [Global](/compute/docs/reference/rest/{$api_version}/globalOperations) * [Regional](/compute/docs/reference/rest/{$api_version}/regionOperations) * [Zonal](/compute/docs/reference/rest/{$api_version}/zoneOperations) You can use an operation resource to manage asynchronous API requests. For more information, read Handling API responses. Operations can be global, regional or zonal. - For global operations, use the `globalOperations` resource. - For regional operations, use the `regionOperations` resource. - For zonal operations, use the `zoneOperations` resource. For more information, read Global, Regional, and Zonal Resources. Note that completed Operation resources have a limited retention period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public Operation Operation { get; set; }
		
		/// <summary>
		/// Output only. Server defined URL for the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<CompositeTypeStatus> Status { get; set; }
		
		/// <summary>
		/// Files that make up the template contents of a template type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="templateContents")]
		public TemplateContents TemplateContents { get; set; }
	}
	
	/// <summary>
	/// Label object for CompositeTypes
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompositeTypeLabelEntry
	{
		
		/// <summary>
		/// Key of the label
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Value of the label
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Represents an Operation resource. Google Compute Engine has three Operation resources: * [Global](/compute/docs/reference/rest/{$api_version}/globalOperations) * [Regional](/compute/docs/reference/rest/{$api_version}/regionOperations) * [Zonal](/compute/docs/reference/rest/{$api_version}/zoneOperations) You can use an operation resource to manage asynchronous API requests. For more information, read Handling API responses. Operations can be global, regional or zonal. - For global operations, use the `globalOperations` resource. - For regional operations, use the `regionOperations` resource. - For zonal operations, use the `zoneOperations` resource. For more information, read Global, Regional, and Zonal Resources. Note that completed Operation resources have a limited retention period.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Operation
	{
		
		/// <summary>
		/// [Output Only] The value of `requestId` if you provided it in the request. Not present otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientOperationId")]
		public string ClientOperationId { get; set; }
		
		/// <summary>
		/// [Deprecated] This field is deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTimestamp")]
		public string CreationTimestamp { get; set; }
		
		/// <summary>
		/// [Output Only] A textual description of the operation, which is set when the operation is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// [Output Only] The time that this operation was completed. This value is in RFC3339 text format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// [Output Only] If errors are generated during processing of the operation, this field will be populated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public OperationError Error { get; set; }
		
		/// <summary>
		/// [Output Only] If the operation fails, this field contains the HTTP error message that was returned, such as `NOT FOUND`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpErrorMessage")]
		public string HttpErrorMessage { get; set; }
		
		/// <summary>
		/// [Output Only] If the operation fails, this field contains the HTTP error status code that was returned. For example, a `404` means the resource was not found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpErrorStatusCode")]
		public System.Nullable<System.Int32> HttpErrorStatusCode { get; set; }
		
		/// <summary>
		/// [Output Only] The unique identifier for the operation. This identifier is defined by the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// [Output Only] The time that this operation was requested. This value is in RFC3339 text format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertTime")]
		public string InsertTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instancesBulkInsertOperationMetadata")]
		public InstancesBulkInsertOperationMetadata InstancesBulkInsertOperationMetadata { get; set; }
		
		/// <summary>
		/// [Output Only] Type of the resource. Always `compute#operation` for Operation resources.
		/// </summary>
		[System.ComponentModel.DefaultValue("compute#operation")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "compute#operation";
		
		/// <summary>
		/// [Output Only] Name of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// [Output Only] An ID that represents a group of operations, such as when a group of operations results from a `bulkInsert` API request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationGroupId")]
		public string OperationGroupId { get; set; }
		
		/// <summary>
		/// [Output Only] The type of operation, such as `insert`, `update`, or `delete`, and so on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationType")]
		public string OperationType { get; set; }
		
		/// <summary>
		/// [Output Only] An optional progress indicator that ranges from 0 to 100. There is no requirement that this be linear or support any granularity of operations. This should not be used to guess when the operation will be complete. This number should monotonically increase as the operation progresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progress")]
		public System.Nullable<System.Int32> Progress { get; set; }
		
		/// <summary>
		/// [Output Only] The URL of the region where the operation resides. Only applicable when performing regional operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// [Output Only] Server-defined URL for the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="setCommonInstanceMetadataOperationMetadata")]
		public SetCommonInstanceMetadataOperationMetadata SetCommonInstanceMetadataOperationMetadata { get; set; }
		
		/// <summary>
		/// [Output Only] The time that this operation was started by the server. This value is in RFC3339 text format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// [Output Only] The status of the operation, which can be one of the following: `PENDING`, `RUNNING`, or `DONE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<OperationStatus> Status { get; set; }
		
		/// <summary>
		/// [Output Only] An optional textual description of the current status of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// [Output Only] The unique target ID, which identifies a specific incarnation of the target resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetId")]
		public string TargetId { get; set; }
		
		/// <summary>
		/// [Output Only] The URL of the resource that the operation modifies. For operations related to creating a snapshot, this points to the persistent disk that the snapshot was created from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetLink")]
		public string TargetLink { get; set; }
		
		/// <summary>
		/// [Output Only] User who requested the operation, for example: `user@example.com` or `alice_smith_identifier (global/workforcePools/example-com-us-employees)`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
		
		/// <summary>
		/// [Output Only] If warning messages are generated during processing of the operation, this field will be populated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public OperationWarnings[] OperationWarnings { get; set; }
		
		/// <summary>
		/// [Output Only] The URL of the zone where the operation resides. Only applicable when performing per-zone operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	public class OperationError
	{
		
		/// <summary>
		/// [Output Only] The array of errors encountered while processing this operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public OperationErrorErrors[] OperationErrorErrors { get; set; }
	}
	
	public class OperationErrorErrors
	{
		
		/// <summary>
		/// [Output Only] The error type identifier for this error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// [Output Only] Indicates the field in the request that caused the error. This property is optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// [Output Only] An optional, human-readable error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstancesBulkInsertOperationMetadata
	{
		
		/// <summary>
		/// Status information per location (location name is key). Example key: zones/us-central1-a
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perLocationStatus")]
		public System.Collections.Generic.Dictionary<string, BulkInsertOperationStatus> PerLocationStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetCommonInstanceMetadataOperationMetadata
	{
		
		/// <summary>
		/// [Output Only] The client operation id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientOperationId")]
		public string ClientOperationId { get; set; }
		
		/// <summary>
		/// [Output Only] Status information per location (location name is key). Example key: zones/us-central1-a
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perLocationOperations")]
		public System.Collections.Generic.Dictionary<string, SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfo> PerLocationOperations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfo
	{
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// [Output Only] Status of the action, which can be one of the following: `PROPAGATING`, `PROPAGATED`, `ABANDONED`, `FAILED`, or `DONE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfoState> State { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfoState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROPAGATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROPAGATED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABANDONED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DONE = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OperationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DONE = 2,
	}
	
	public class OperationWarnings
	{
		
		/// <summary>
		/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<OperationWarningsCode> Code { get; set; }
		
		/// <summary>
		/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public OperationWarningsData[] OperationWarningsData { get; set; }
		
		/// <summary>
		/// [Output Only] A human-readable description of the warning code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OperationWarningsCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPRECATED_RESOURCE_USED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_RESULTS_ON_PAGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNREACHABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEXT_HOP_ADDRESS_NOT_ASSIGNED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEXT_HOP_INSTANCE_NOT_FOUND = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEXT_HOP_INSTANCE_NOT_ON_NETWORK = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEXT_HOP_CANNOT_IP_FORWARD = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEXT_HOP_NOT_RUNNING = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INJECTED_KERNELS_DEPRECATED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUIRED_TOS_AGREEMENT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISK_SIZE_LARGER_THAN_IMAGE_SIZE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_NOT_DELETED = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_INSTANCE_PROPERTY_TEMPLATE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_CRITICAL_ERROR = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLEANUP_FAILED = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIELD_VALUE_OVERRIDEN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_TYPE_DEPENDENCY = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTERNAL_API_WARNING = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEMA_VALIDATION_IGNORED = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNDECLARED_PROPERTIES = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPERIMENTAL_TYPE_USED = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPRECATED_TYPE_USED = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTIAL_SUCCESS = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LARGE_DEPLOYMENT_WARNING = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIST_OVERHEAD_QUOTA_EXCEED = 27,
	}
	
	public class OperationWarningsData
	{
		
		/// <summary>
		/// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// [Output Only] A warning data value corresponding to the key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CompositeTypeStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_STATUS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPRECATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPERIMENTAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUPPORTED = 3,
	}
	
	/// <summary>
	/// Files that make up the template contents of a template type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TemplateContents
	{
		
		/// <summary>
		/// Import files referenced by the main template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imports")]
		public ImportFile[] Imports { get; set; }
		
		/// <summary>
		/// Which interpreter (python or jinja) should be used during expansion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interpreter")]
		public System.Nullable<TemplateContentsInterpreter> Interpreter { get; set; }
		
		/// <summary>
		/// The filename of the mainTemplate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mainTemplate")]
		public string MainTemplate { get; set; }
		
		/// <summary>
		/// The contents of the template schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public string Schema { get; set; }
		
		/// <summary>
		/// The contents of the main template file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="template")]
		public string Template { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportFile
	{
		
		/// <summary>
		/// The contents of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// The name of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TemplateContentsInterpreter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_INTERPRETER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PYTHON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JINJA = 2,
	}
	
	/// <summary>
	/// A response that returns all Composite Types supported by Deployment Manager
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompositeTypesListResponse
	{
		
		/// <summary>
		/// Output only. A list of resource composite types supported by Deployment Manager.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compositeTypes")]
		public CompositeType[] CompositeTypes { get; set; }
		
		/// <summary>
		/// A token used to continue a truncated list request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConfigFile
	{
		
		/// <summary>
		/// The contents of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Deployment
	{
		
		/// <summary>
		/// An optional user-provided description of the deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Provides a fingerprint to use in requests to modify a deployment, such as `update()`, `stop()`, and `cancelPreview()` requests. A fingerprint is a randomly generated value that must be provided with `update()`, `stop()`, and `cancelPreview()` requests to perform optimistic locking. This ensures optimistic concurrency so that only one request happens at a time. The fingerprint is initially generated by Deployment Manager and changes after every request to modify data. To get the latest fingerprint value, perform a `get()` request to a deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fingerprint")]
		public string Fingerprint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Output only. Creation timestamp in RFC3339 text format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertTime")]
		public string InsertTime { get; set; }
		
		/// <summary>
		/// Map of One Platform labels; provided by the client when the resource is created or updated. Specifically: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?` Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public DeploymentLabelEntry[] Labels { get; set; }
		
		/// <summary>
		/// Output only. URL of the manifest representing the last manifest that was successfully deployed. If no manifest has been successfully deployed, this field will be absent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manifest")]
		public string Manifest { get; set; }
		
		/// <summary>
		/// Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Represents an Operation resource. Google Compute Engine has three Operation resources: * [Global](/compute/docs/reference/rest/{$api_version}/globalOperations) * [Regional](/compute/docs/reference/rest/{$api_version}/regionOperations) * [Zonal](/compute/docs/reference/rest/{$api_version}/zoneOperations) You can use an operation resource to manage asynchronous API requests. For more information, read Handling API responses. Operations can be global, regional or zonal. - For global operations, use the `globalOperations` resource. - For regional operations, use the `regionOperations` resource. - For zonal operations, use the `zoneOperations` resource. For more information, read Global, Regional, and Zonal Resources. Note that completed Operation resources have a limited retention period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public Operation Operation { get; set; }
		
		/// <summary>
		/// Output only. Server defined URL for the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target")]
		public TargetConfiguration Target { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="update")]
		public DeploymentUpdate Update { get; set; }
		
		/// <summary>
		/// Output only. Update timestamp in RFC3339 text format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Label object for Deployments
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentLabelEntry
	{
		
		/// <summary>
		/// Key of the label
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Value of the label
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TargetConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="config")]
		public ConfigFile Config { get; set; }
		
		/// <summary>
		/// Specifies any files to import for this configuration. This can be used to import templates or other files. For example, you might import a text file in order to use the file in a template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imports")]
		public ImportFile[] Imports { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentUpdate
	{
		
		/// <summary>
		/// Output only. An optional user-provided description of the deployment after the current update has been applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Map of One Platform labels; provided by the client when the resource is created or updated. Specifically: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?` Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public DeploymentUpdateLabelEntry[] Labels { get; set; }
		
		/// <summary>
		/// Output only. URL of the manifest representing the update configuration of this deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manifest")]
		public string Manifest { get; set; }
	}
	
	/// <summary>
	/// Label object for DeploymentUpdate
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentUpdateLabelEntry
	{
		
		/// <summary>
		/// Key of the label
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Value of the label
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentsCancelPreviewRequest
	{
		
		/// <summary>
		/// Specifies a fingerprint for `cancelPreview()` requests. A fingerprint is a randomly generated value that must be provided in `cancelPreview()` requests to perform optimistic locking. This ensures optimistic concurrency so that the deployment does not have conflicting requests (e.g. if someone attempts to make a new update request while another user attempts to cancel a preview, this would prevent one of the requests). The fingerprint is initially generated by Deployment Manager and changes after every request to modify a deployment. To get the latest fingerprint value, perform a `get()` request on the deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fingerprint")]
		public string Fingerprint { get; set; }
	}
	
	/// <summary>
	/// A response containing a partial list of deployments and a page token used to build the next request if the request has been truncated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentsListResponse
	{
		
		/// <summary>
		/// Output only. The deployments contained in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deployments")]
		public Deployment[] Deployments { get; set; }
		
		/// <summary>
		/// Output only. A token used to continue a truncated list request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentsStopRequest
	{
		
		/// <summary>
		/// Specifies a fingerprint for `stop()` requests. A fingerprint is a randomly generated value that must be provided in `stop()` requests to perform optimistic locking. This ensures optimistic concurrency so that the deployment does not have conflicting requests (e.g. if someone attempts to make a new update request while another user attempts to stop an ongoing update request, this would prevent a collision). The fingerprint is initially generated by Deployment Manager and changes after every request to modify a deployment. To get the latest fingerprint value, perform a `get()` request on the deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fingerprint")]
		public string Fingerprint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GlobalSetPolicyRequest
	{
		
		/// <summary>
		/// Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify bindings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bindings")]
		public Binding[] Bindings { get; set; }
		
		/// <summary>
		/// Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public Policy Policy { get; set; }
	}
	
	/// <summary>
	/// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Policy
	{
		
		/// <summary>
		/// Specifies cloud audit logging configuration for this policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auditConfigs")]
		public AuditConfig[] AuditConfigs { get; set; }
		
		/// <summary>
		/// Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bindings")]
		public Binding[] Bindings { get; set; }
		
		/// <summary>
		/// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Manifest
	{
		
		[System.Runtime.Serialization.DataMember(Name="config")]
		public ConfigFile Config { get; set; }
		
		/// <summary>
		/// Output only. The fully-expanded configuration file, including any templates and references.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expandedConfig")]
		public string ExpandedConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Output only. The imported files for this manifest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imports")]
		public ImportFile[] Imports { get; set; }
		
		/// <summary>
		/// Output only. Creation timestamp in RFC3339 text format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertTime")]
		public string InsertTime { get; set; }
		
		/// <summary>
		/// Output only. The YAML layout for this manifest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="layout")]
		public string Layout { get; set; }
		
		/// <summary>
		/// Output only. The computed size of the fully expanded manifest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manifestSizeBytes")]
		public string ManifestSizeBytes { get; set; }
		
		/// <summary>
		/// Output only. The size limit for expanded manifests in the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manifestSizeLimitBytes")]
		public string ManifestSizeLimitBytes { get; set; }
		
		/// <summary>
		/// Output only. The name of the manifest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Self link for the manifest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
	}
	
	/// <summary>
	/// A response containing a partial list of manifests and a page token used to build the next request if the request has been truncated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ManifestsListResponse
	{
		
		/// <summary>
		/// Output only. Manifests contained in this list response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manifests")]
		public Manifest[] Manifests { get; set; }
		
		/// <summary>
		/// Output only. A token used to continue a truncated list request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A response containing a partial list of operations and a page token used to build the next request if the request has been truncated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OperationsListResponse
	{
		
		/// <summary>
		/// Output only. A token used to continue a truncated list request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Output only. Operations contained in this list response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Resource
	{
		
		/// <summary>
		/// The access controls set on the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessControl")]
		public ResourceAccessControl AccessControl { get; set; }
		
		/// <summary>
		/// Output only. The evaluated properties of the resource with references expanded. Returned as serialized YAML.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finalProperties")]
		public string FinalProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Output only. Creation timestamp in RFC3339 text format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertTime")]
		public string InsertTime { get; set; }
		
		/// <summary>
		/// Output only. URL of the manifest representing the current configuration of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manifest")]
		public string Manifest { get; set; }
		
		/// <summary>
		/// Output only. The name of the resource as it appears in the YAML config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The current properties of the resource before any references have been filled in. Returned as serialized YAML.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public string Properties { get; set; }
		
		/// <summary>
		/// Output only. The type of the resource, for example `compute.v1.instance`, or `cloudfunctions.v1beta1.function`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="update")]
		public ResourceUpdate Update { get; set; }
		
		/// <summary>
		/// Output only. Update timestamp in RFC3339 text format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// Output only. The URL of the actual resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Output only. If warning messages are generated during processing of this resource, this field will be populated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public ResourceWarnings[] ResourceWarnings { get; set; }
	}
	
	/// <summary>
	/// The access controls set on the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceAccessControl
	{
		
		/// <summary>
		/// The GCP IAM Policy to set on the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcpIamPolicy")]
		public string GcpIamPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceUpdate
	{
		
		/// <summary>
		/// The access controls set on the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessControl")]
		public ResourceAccessControl AccessControl { get; set; }
		
		/// <summary>
		/// Output only. If errors are generated during update of the resource, this field will be populated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ResourceUpdateError Error { get; set; }
		
		/// <summary>
		/// Output only. The expanded properties of the resource with reference values expanded. Returned as serialized YAML.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finalProperties")]
		public string FinalProperties { get; set; }
		
		/// <summary>
		/// Output only. The intent of the resource: `PREVIEW`, `UPDATE`, or `CANCEL`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intent")]
		public System.Nullable<ResourceUpdateIntent> Intent { get; set; }
		
		/// <summary>
		/// Output only. URL of the manifest representing the update configuration of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manifest")]
		public string Manifest { get; set; }
		
		/// <summary>
		/// Output only. The set of updated properties for this resource, before references are expanded. Returned as serialized YAML.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public string Properties { get; set; }
		
		/// <summary>
		/// Output only. The state of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ResourceUpdateState> State { get; set; }
		
		/// <summary>
		/// Output only. If warning messages are generated during processing of this resource, this field will be populated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public ResourceUpdateWarnings[] ResourceUpdateWarnings { get; set; }
	}
	
	public class ResourceUpdateError
	{
		
		/// <summary>
		/// [Output Only] The array of errors encountered while processing this operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public ResourceUpdateErrorErrors[] ResourceUpdateErrorErrors { get; set; }
	}
	
	public class ResourceUpdateErrorErrors
	{
		
		/// <summary>
		/// [Output Only] The error type identifier for this error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// [Output Only] Indicates the field in the request that caused the error. This property is optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// [Output Only] An optional, human-readable error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ResourceUpdateIntent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_OR_ACQUIRE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACQUIRE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABANDON = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ResourceUpdateState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PREVIEW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABORTED = 4,
	}
	
	public class ResourceUpdateWarnings
	{
		
		/// <summary>
		/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public OperationWarningsCode Code { get; set; }
		
		/// <summary>
		/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ResourceUpdateWarningsData[] ResourceUpdateWarningsData { get; set; }
		
		/// <summary>
		/// [Output Only] A human-readable description of the warning code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class ResourceUpdateWarningsData
	{
		
		/// <summary>
		/// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// [Output Only] A warning data value corresponding to the key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class ResourceWarnings
	{
		
		/// <summary>
		/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public OperationWarningsCode Code { get; set; }
		
		/// <summary>
		/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ResourceWarningsData[] ResourceWarningsData { get; set; }
		
		/// <summary>
		/// [Output Only] A human-readable description of the warning code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class ResourceWarningsData
	{
		
		/// <summary>
		/// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// [Output Only] A warning data value corresponding to the key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A response containing a partial list of resources and a page token used to build the next request if the request has been truncated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourcesListResponse
	{
		
		/// <summary>
		/// A token used to continue a truncated list request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Resources contained in this list response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public Resource[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestPermissionsRequest
	{
		
		/// <summary>
		/// The set of permissions to check for the 'resource'. Permissions with wildcards (such as '*' or 'storage.*') are not allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestPermissionsResponse
	{
		
		/// <summary>
		/// A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	/// <summary>
	/// A resource type supported by Deployment Manager.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Type
	{
		
		/// <summary>
		/// BaseType that describes a service-backed Type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="base")]
		public BaseType Base { get; set; }
		
		/// <summary>
		/// An optional textual description of the resource; provided by the client when the resource is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Output only. Creation timestamp in RFC3339 text format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertTime")]
		public string InsertTime { get; set; }
		
		/// <summary>
		/// Map of One Platform labels; provided by the client when the resource is created or updated. Specifically: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?` Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public TypeLabelEntry[] Labels { get; set; }
		
		/// <summary>
		/// Name of the type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Represents an Operation resource. Google Compute Engine has three Operation resources: * [Global](/compute/docs/reference/rest/{$api_version}/globalOperations) * [Regional](/compute/docs/reference/rest/{$api_version}/regionOperations) * [Zonal](/compute/docs/reference/rest/{$api_version}/zoneOperations) You can use an operation resource to manage asynchronous API requests. For more information, read Handling API responses. Operations can be global, regional or zonal. - For global operations, use the `globalOperations` resource. - For regional operations, use the `regionOperations` resource. - For zonal operations, use the `zoneOperations` resource. For more information, read Global, Regional, and Zonal Resources. Note that completed Operation resources have a limited retention period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public Operation Operation { get; set; }
		
		/// <summary>
		/// Output only. Server defined URL for the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
	}
	
	/// <summary>
	/// Label object for Types
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TypeLabelEntry
	{
		
		/// <summary>
		/// Key of the label
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Value of the label
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Type Information. Contains detailed information about a composite type, base type, or base type with specific collection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TypeInfo
	{
		
		/// <summary>
		/// The description of the type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// For swagger 2.0 externalDocs field will be used. For swagger 1.2 this field will be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentationLink")]
		public string DocumentationLink { get; set; }
		
		/// <summary>
		/// Output only. Type of the output. Always `deploymentManager#TypeInfo` for TypeInfo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The base type or composite type name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public TypeInfoSchemaInfo Schema { get; set; }
		
		/// <summary>
		/// Output only. Self link for the type provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// The title on the API descriptor URL provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TypeInfoSchemaInfo
	{
		
		/// <summary>
		/// The properties that this composite type or base type collection accept as input, represented as a json blob, format is: JSON Schema Draft V4
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		/// <summary>
		/// The properties that this composite type or base type collection exposes as output, these properties can be used for references, represented as json blob, format is: JSON Schema Draft V4
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="output")]
		public string Output { get; set; }
	}
	
	/// <summary>
	/// A type provider that describes a service-backed Type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TypeProvider
	{
		
		/// <summary>
		/// Allows resource handling overrides for specific collections
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collectionOverrides")]
		public CollectionOverride[] CollectionOverrides { get; set; }
		
		/// <summary>
		/// The credential used by Deployment Manager and TypeProvider. Only one of the options is permitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credential")]
		public Credential Credential { get; set; }
		
		/// <summary>
		/// List of up to 2 custom certificate authority roots to use for TLS authentication when making calls on behalf of this type provider. If set, TLS authentication will exclusively use these roots instead of relying on publicly trusted certificate authorities when validating TLS certificate authenticity. The certificates must be in base64-encoded PEM format. The maximum size of each certificate must not exceed 10KB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customCertificateAuthorityRoots")]
		public string[] CustomCertificateAuthorityRoots { get; set; }
		
		/// <summary>
		/// An optional textual description of the resource; provided by the client when the resource is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Descriptor Url for the this type provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="descriptorUrl")]
		public string DescriptorUrl { get; set; }
		
		/// <summary>
		/// Output only. Unique identifier for the resource defined by the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Output only. Creation timestamp in RFC3339 text format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertTime")]
		public string InsertTime { get; set; }
		
		/// <summary>
		/// Map of One Platform labels; provided by the client when the resource is created or updated. Specifically: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?` Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public TypeProviderLabelEntry[] Labels { get; set; }
		
		/// <summary>
		/// Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Represents an Operation resource. Google Compute Engine has three Operation resources: * [Global](/compute/docs/reference/rest/{$api_version}/globalOperations) * [Regional](/compute/docs/reference/rest/{$api_version}/regionOperations) * [Zonal](/compute/docs/reference/rest/{$api_version}/zoneOperations) You can use an operation resource to manage asynchronous API requests. For more information, read Handling API responses. Operations can be global, regional or zonal. - For global operations, use the `globalOperations` resource. - For regional operations, use the `regionOperations` resource. - For zonal operations, use the `zoneOperations` resource. For more information, read Global, Regional, and Zonal Resources. Note that completed Operation resources have a limited retention period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public Operation Operation { get; set; }
		
		/// <summary>
		/// Options allows customized resource handling by Deployment Manager.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public Options Options { get; set; }
		
		/// <summary>
		/// Output only. Self link for the type provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
	}
	
	/// <summary>
	/// Label object for TypeProviders
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TypeProviderLabelEntry
	{
		
		/// <summary>
		/// Key of the label
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Value of the label
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A response that returns all Type Providers supported by Deployment Manager
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TypeProvidersListResponse
	{
		
		/// <summary>
		/// A token used to continue a truncated list request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Output only. A list of resource type providers supported by Deployment Manager.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="typeProviders")]
		public TypeProvider[] TypeProviders { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TypeProvidersListTypesResponse
	{
		
		/// <summary>
		/// A token used to continue a truncated list request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Output only. A list of resource type info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="types")]
		public TypeInfo[] Types { get; set; }
	}
	
	/// <summary>
	/// A response that returns all Types supported by Deployment Manager
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TypesListResponse
	{
		
		/// <summary>
		/// A token used to continue a truncated list request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Output only. A list of resource types supported by Deployment Manager.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="types")]
		public Type[] Types { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all composite types for Deployment Manager.
		/// Deploymentmanager_compositeTypes_list deploymentmanager/v2beta/projects/{project}/global/compositeTypes
		/// </summary>
		/// <param name="project">The project ID for this request.</param>
		/// <param name="filter">A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.</param>
		/// <param name="maxResults">The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		/// Minimum: 0
		// </param>
		/// <param name="orderBy">Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.</param>
		/// <param name="pageToken">Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.</param>
		/// <returns>Successful response</returns>
		public async Task<CompositeTypesListResponse> Deploymentmanager_compositeTypes_listAsync(string project, string filter, int maxResults, string orderBy, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deploymentmanager/v2beta/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/global/compositeTypes&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&maxResults="+maxResults+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CompositeTypesListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a composite type.
		/// Deploymentmanager_compositeTypes_insert deploymentmanager/v2beta/projects/{project}/global/compositeTypes
		/// </summary>
		/// <param name="project">The project ID for this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Deploymentmanager_compositeTypes_insertAsync(string project, CompositeType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deploymentmanager/v2beta/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/global/compositeTypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a composite type.
		/// Deploymentmanager_compositeTypes_delete deploymentmanager/v2beta/projects/{project}/global/compositeTypes/{compositeType}
		/// </summary>
		/// <param name="project">The project ID for this request.</param>
		/// <param name="compositeType">The name of the type for this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Deploymentmanager_compositeTypes_deleteAsync(string project, string compositeType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deploymentmanager/v2beta/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/global/compositeTypes/"+ (compositeType==null? "" : System.Uri.EscapeDataString(compositeType));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a specific composite type.
		/// Deploymentmanager_compositeTypes_get deploymentmanager/v2beta/projects/{project}/global/compositeTypes/{compositeType}
		/// </summary>
		/// <param name="project">The project ID for this request.</param>
		/// <param name="compositeType">The name of the composite type for this request.</param>
		/// <returns>Successful response</returns>
		public async Task<CompositeType> Deploymentmanager_compositeTypes_getAsync(string project, string compositeType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deploymentmanager/v2beta/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/global/compositeTypes/"+ (compositeType==null? "" : System.Uri.EscapeDataString(compositeType));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CompositeType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patches a composite type.
		/// Deploymentmanager_compositeTypes_patch deploymentmanager/v2beta/projects/{project}/global/compositeTypes/{compositeType}
		/// </summary>
		/// <param name="project">The project ID for this request.</param>
		/// <param name="compositeType">The name of the composite type for this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Deploymentmanager_compositeTypes_patchAsync(string project, string compositeType, CompositeType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deploymentmanager/v2beta/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/global/compositeTypes/"+ (compositeType==null? "" : System.Uri.EscapeDataString(compositeType));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a composite type.
		/// Deploymentmanager_compositeTypes_update deploymentmanager/v2beta/projects/{project}/global/compositeTypes/{compositeType}
		/// </summary>
		/// <param name="project">The project ID for this request.</param>
		/// <param name="compositeType">The name of the composite type for this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Deploymentmanager_compositeTypes_updateAsync(string project, string compositeType, CompositeType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deploymentmanager/v2beta/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/global/compositeTypes/"+ (compositeType==null? "" : System.Uri.EscapeDataString(compositeType));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all deployments for a given project.
		/// Deploymentmanager_deployments_list deploymentmanager/v2beta/projects/{project}/global/deployments
		/// </summary>
		/// <param name="project">The project ID for this request.</param>
		/// <param name="filter">A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.</param>
		/// <param name="maxResults">The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		/// Minimum: 0
		// </param>
		/// <param name="orderBy">Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.</param>
		/// <param name="pageToken">Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.</param>
		/// <returns>Successful response</returns>
		public async Task<DeploymentsListResponse> Deploymentmanager_deployments_listAsync(string project, string filter, int maxResults, string orderBy, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deploymentmanager/v2beta/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/global/deployments&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&maxResults="+maxResults+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentsListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a deployment and all of the resources described by the deployment manifest.
		/// Deploymentmanager_deployments_insert deploymentmanager/v2beta/projects/{project}/global/deployments
		/// </summary>
		/// <param name="project">The project ID for this request.</param>
		/// <param name="createPolicy">Sets the policy to use for creating new resources.</param>
		/// <param name="preview">If set to true, creates a deployment and creates "shell" resources but does not actually instantiate these resources. This allows you to preview what your deployment looks like. After previewing a deployment, you can deploy your resources by making a request with the `update()` method or you can use the `cancelPreview()` method to cancel the preview altogether. Note that the deployment will still exist after you cancel the preview and you must separately delete this deployment if you want to remove it.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Deploymentmanager_deployments_insertAsync(string project, Deploymentmanager_deployments_insertCreatePolicy createPolicy, bool preview, Deployment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deploymentmanager/v2beta/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/global/deployments&createPolicy=" + createPolicy+"&preview="+preview;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a deployment and all of the resources in the deployment.
		/// Deploymentmanager_deployments_delete deploymentmanager/v2beta/projects/{project}/global/deployments/{deployment}
		/// </summary>
		/// <param name="project">The project ID for this request.</param>
		/// <param name="deployment">The name of the deployment for this request.</param>
		/// <param name="deletePolicy">Sets the policy to use for deleting resources.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Deploymentmanager_deployments_deleteAsync(string project, string deployment, Deploymentmanager_deployments_deleteDeletePolicy deletePolicy, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deploymentmanager/v2beta/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/global/deployments/"+ (deployment==null? "" : System.Uri.EscapeDataString(deployment))+"&deletePolicy=" + deletePolicy;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a specific deployment.
		/// Deploymentmanager_deployments_get deploymentmanager/v2beta/projects/{project}/global/deployments/{deployment}
		/// </summary>
		/// <param name="project">The project ID for this request.</param>
		/// <param name="deployment">The name of the deployment for this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Deployment> Deploymentmanager_deployments_getAsync(string project, string deployment, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deploymentmanager/v2beta/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/global/deployments/"+ (deployment==null? "" : System.Uri.EscapeDataString(deployment));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Deployment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patches a deployment and all of the resources described by the deployment manifest.
		/// Deploymentmanager_deployments_patch deploymentmanager/v2beta/projects/{project}/global/deployments/{deployment}
		/// </summary>
		/// <param name="project">The project ID for this request.</param>
		/// <param name="deployment">The name of the deployment for this request.</param>
		/// <param name="createPolicy">Sets the policy to use for creating new resources.</param>
		/// <param name="deletePolicy">Sets the policy to use for deleting resources.</param>
		/// <param name="preview">If set to true, updates the deployment and creates and updates the "shell" resources but does not actually alter or instantiate these resources. This allows you to preview what your deployment will look like. You can use this intent to preview how an update would affect your deployment. You must provide a `target.config` with a configuration if this is set to true. After previewing a deployment, you can deploy your resources by making a request with the `update()` or you can `cancelPreview()` to remove the preview altogether. Note that the deployment will still exist after you cancel the preview and you must separately delete this deployment if you want to remove it.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Deploymentmanager_deployments_patchAsync(string project, string deployment, Deploymentmanager_deployments_insertCreatePolicy createPolicy, Deploymentmanager_deployments_deleteDeletePolicy deletePolicy, bool preview, Deployment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deploymentmanager/v2beta/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/global/deployments/"+ (deployment==null? "" : System.Uri.EscapeDataString(deployment))+"&createPolicy=" + createPolicy+"&deletePolicy=" + deletePolicy+"&preview="+preview;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a deployment and all of the resources described by the deployment manifest.
		/// Deploymentmanager_deployments_update deploymentmanager/v2beta/projects/{project}/global/deployments/{deployment}
		/// </summary>
		/// <param name="project">The project ID for this request.</param>
		/// <param name="deployment">The name of the deployment for this request.</param>
		/// <param name="createPolicy">Sets the policy to use for creating new resources.</param>
		/// <param name="deletePolicy">Sets the policy to use for deleting resources.</param>
		/// <param name="preview">If set to true, updates the deployment and creates and updates the "shell" resources but does not actually alter or instantiate these resources. This allows you to preview what your deployment will look like. You can use this intent to preview how an update would affect your deployment. You must provide a `target.config` with a configuration if this is set to true. After previewing a deployment, you can deploy your resources by making a request with the `update()` or you can `cancelPreview()` to remove the preview altogether. Note that the deployment will still exist after you cancel the preview and you must separately delete this deployment if you want to remove it.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Deploymentmanager_deployments_updateAsync(string project, string deployment, Deploymentmanager_deployments_insertCreatePolicy createPolicy, Deploymentmanager_deployments_deleteDeletePolicy deletePolicy, bool preview, Deployment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deploymentmanager/v2beta/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/global/deployments/"+ (deployment==null? "" : System.Uri.EscapeDataString(deployment))+"&createPolicy=" + createPolicy+"&deletePolicy=" + deletePolicy+"&preview="+preview;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Cancels and removes the preview currently associated with the deployment.
		/// Deploymentmanager_deployments_cancelPreview deploymentmanager/v2beta/projects/{project}/global/deployments/{deployment}/cancelPreview
		/// </summary>
		/// <param name="project">The project ID for this request.</param>
		/// <param name="deployment">The name of the deployment for this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Deploymentmanager_deployments_cancelPreviewAsync(string project, string deployment, DeploymentsCancelPreviewRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deploymentmanager/v2beta/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/global/deployments/"+ (deployment==null? "" : System.Uri.EscapeDataString(deployment))+"/cancelPreview";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all manifests for a given deployment.
		/// Deploymentmanager_manifests_list deploymentmanager/v2beta/projects/{project}/global/deployments/{deployment}/manifests
		/// </summary>
		/// <param name="project">The project ID for this request.</param>
		/// <param name="deployment">The name of the deployment for this request.</param>
		/// <param name="filter">A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.</param>
		/// <param name="maxResults">The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		/// Minimum: 0
		// </param>
		/// <param name="orderBy">Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.</param>
		/// <param name="pageToken">Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.</param>
		/// <returns>Successful response</returns>
		public async Task<ManifestsListResponse> Deploymentmanager_manifests_listAsync(string project, string deployment, string filter, int maxResults, string orderBy, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deploymentmanager/v2beta/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/global/deployments/"+ (deployment==null? "" : System.Uri.EscapeDataString(deployment))+"/manifests&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&maxResults="+maxResults+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ManifestsListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a specific manifest.
		/// Deploymentmanager_manifests_get deploymentmanager/v2beta/projects/{project}/global/deployments/{deployment}/manifests/{manifest}
		/// </summary>
		/// <param name="project">The project ID for this request.</param>
		/// <param name="deployment">The name of the deployment for this request.</param>
		/// <param name="manifest">The name of the manifest for this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Manifest> Deploymentmanager_manifests_getAsync(string project, string deployment, string manifest, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deploymentmanager/v2beta/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/global/deployments/"+ (deployment==null? "" : System.Uri.EscapeDataString(deployment))+"/manifests/"+ (manifest==null? "" : System.Uri.EscapeDataString(manifest));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Manifest>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all resources in a given deployment.
		/// Deploymentmanager_resources_list deploymentmanager/v2beta/projects/{project}/global/deployments/{deployment}/resources
		/// </summary>
		/// <param name="project">The project ID for this request.</param>
		/// <param name="deployment">The name of the deployment for this request.</param>
		/// <param name="filter">A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.</param>
		/// <param name="maxResults">The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		/// Minimum: 0
		// </param>
		/// <param name="orderBy">Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.</param>
		/// <param name="pageToken">Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.</param>
		/// <returns>Successful response</returns>
		public async Task<ResourcesListResponse> Deploymentmanager_resources_listAsync(string project, string deployment, string filter, int maxResults, string orderBy, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deploymentmanager/v2beta/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/global/deployments/"+ (deployment==null? "" : System.Uri.EscapeDataString(deployment))+"/resources&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&maxResults="+maxResults+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourcesListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a single resource.
		/// Deploymentmanager_resources_get deploymentmanager/v2beta/projects/{project}/global/deployments/{deployment}/resources/{resource}
		/// </summary>
		/// <param name="project">The project ID for this request.</param>
		/// <param name="deployment">The name of the deployment for this request.</param>
		/// <param name="resource">The name of the resource for this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Resource> Deploymentmanager_resources_getAsync(string project, string deployment, string resource, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deploymentmanager/v2beta/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/global/deployments/"+ (deployment==null? "" : System.Uri.EscapeDataString(deployment))+"/resources/"+ (resource==null? "" : System.Uri.EscapeDataString(resource));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Resource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops an ongoing operation. This does not roll back any work that has already been completed, but prevents any new work from being started.
		/// Deploymentmanager_deployments_stop deploymentmanager/v2beta/projects/{project}/global/deployments/{deployment}/stop
		/// </summary>
		/// <param name="project">The project ID for this request.</param>
		/// <param name="deployment">The name of the deployment for this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Deploymentmanager_deployments_stopAsync(string project, string deployment, DeploymentsStopRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deploymentmanager/v2beta/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/global/deployments/"+ (deployment==null? "" : System.Uri.EscapeDataString(deployment))+"/stop";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
		/// Deploymentmanager_deployments_getIamPolicy deploymentmanager/v2beta/projects/{project}/global/deployments/{resource}/getIamPolicy
		/// </summary>
		/// <param name="project">Project ID for this request.</param>
		/// <param name="resource">Name or id of the resource for this request.</param>
		/// <param name="optionsRequestedPolicyVersion">Requested IAM Policy version.</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Deploymentmanager_deployments_getIamPolicyAsync(string project, string resource, int optionsRequestedPolicyVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deploymentmanager/v2beta/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/global/deployments/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+"/getIamPolicy&optionsRequestedPolicyVersion="+optionsRequestedPolicyVersion;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Policy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets the access control policy on the specified resource. Replaces any existing policy.
		/// Deploymentmanager_deployments_setIamPolicy deploymentmanager/v2beta/projects/{project}/global/deployments/{resource}/setIamPolicy
		/// </summary>
		/// <param name="project">Project ID for this request.</param>
		/// <param name="resource">Name or id of the resource for this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Deploymentmanager_deployments_setIamPolicyAsync(string project, string resource, GlobalSetPolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deploymentmanager/v2beta/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/global/deployments/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+"/setIamPolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Policy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns permissions that a caller has on the specified resource.
		/// Deploymentmanager_deployments_testIamPermissions deploymentmanager/v2beta/projects/{project}/global/deployments/{resource}/testIamPermissions
		/// </summary>
		/// <param name="project">Project ID for this request.</param>
		/// <param name="resource">Name or id of the resource for this request.</param>
		/// <returns>Successful response</returns>
		public async Task<TestPermissionsResponse> Deploymentmanager_deployments_testIamPermissionsAsync(string project, string resource, TestPermissionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deploymentmanager/v2beta/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/global/deployments/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+"/testIamPermissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestPermissionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all operations for a project.
		/// Deploymentmanager_operations_list deploymentmanager/v2beta/projects/{project}/global/operations
		/// </summary>
		/// <param name="project">The project ID for this request.</param>
		/// <param name="filter">A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.</param>
		/// <param name="maxResults">The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		/// Minimum: 0
		// </param>
		/// <param name="orderBy">Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.</param>
		/// <param name="pageToken">Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.</param>
		/// <returns>Successful response</returns>
		public async Task<OperationsListResponse> Deploymentmanager_operations_listAsync(string project, string filter, int maxResults, string orderBy, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deploymentmanager/v2beta/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/global/operations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&maxResults="+maxResults+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationsListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a specific operation.
		/// Deploymentmanager_operations_get deploymentmanager/v2beta/projects/{project}/global/operations/{operation}
		/// </summary>
		/// <param name="project">The project ID for this request.</param>
		/// <param name="operation">The name of the operation for this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Deploymentmanager_operations_getAsync(string project, string operation, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deploymentmanager/v2beta/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/global/operations/"+ (operation==null? "" : System.Uri.EscapeDataString(operation));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all resource type providers for Deployment Manager.
		/// Deploymentmanager_typeProviders_list deploymentmanager/v2beta/projects/{project}/global/typeProviders
		/// </summary>
		/// <param name="project">The project ID for this request.</param>
		/// <param name="filter">A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.</param>
		/// <param name="maxResults">The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		/// Minimum: 0
		// </param>
		/// <param name="orderBy">Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.</param>
		/// <param name="pageToken">Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.</param>
		/// <returns>Successful response</returns>
		public async Task<TypeProvidersListResponse> Deploymentmanager_typeProviders_listAsync(string project, string filter, int maxResults, string orderBy, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deploymentmanager/v2beta/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/global/typeProviders&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&maxResults="+maxResults+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TypeProvidersListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a type provider.
		/// Deploymentmanager_typeProviders_insert deploymentmanager/v2beta/projects/{project}/global/typeProviders
		/// </summary>
		/// <param name="project">The project ID for this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Deploymentmanager_typeProviders_insertAsync(string project, TypeProvider requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deploymentmanager/v2beta/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/global/typeProviders";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a type provider.
		/// Deploymentmanager_typeProviders_delete deploymentmanager/v2beta/projects/{project}/global/typeProviders/{typeProvider}
		/// </summary>
		/// <param name="project">The project ID for this request.</param>
		/// <param name="typeProvider">The name of the type provider for this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Deploymentmanager_typeProviders_deleteAsync(string project, string typeProvider, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deploymentmanager/v2beta/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/global/typeProviders/"+ (typeProvider==null? "" : System.Uri.EscapeDataString(typeProvider));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a specific type provider.
		/// Deploymentmanager_typeProviders_get deploymentmanager/v2beta/projects/{project}/global/typeProviders/{typeProvider}
		/// </summary>
		/// <param name="project">The project ID for this request.</param>
		/// <param name="typeProvider">The name of the type provider for this request.</param>
		/// <returns>Successful response</returns>
		public async Task<TypeProvider> Deploymentmanager_typeProviders_getAsync(string project, string typeProvider, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deploymentmanager/v2beta/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/global/typeProviders/"+ (typeProvider==null? "" : System.Uri.EscapeDataString(typeProvider));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TypeProvider>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patches a type provider.
		/// Deploymentmanager_typeProviders_patch deploymentmanager/v2beta/projects/{project}/global/typeProviders/{typeProvider}
		/// </summary>
		/// <param name="project">The project ID for this request.</param>
		/// <param name="typeProvider">The name of the type provider for this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Deploymentmanager_typeProviders_patchAsync(string project, string typeProvider, TypeProvider requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deploymentmanager/v2beta/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/global/typeProviders/"+ (typeProvider==null? "" : System.Uri.EscapeDataString(typeProvider));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a type provider.
		/// Deploymentmanager_typeProviders_update deploymentmanager/v2beta/projects/{project}/global/typeProviders/{typeProvider}
		/// </summary>
		/// <param name="project">The project ID for this request.</param>
		/// <param name="typeProvider">The name of the type provider for this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Deploymentmanager_typeProviders_updateAsync(string project, string typeProvider, TypeProvider requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deploymentmanager/v2beta/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/global/typeProviders/"+ (typeProvider==null? "" : System.Uri.EscapeDataString(typeProvider));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all the type info for a TypeProvider.
		/// Deploymentmanager_typeProviders_listTypes deploymentmanager/v2beta/projects/{project}/global/typeProviders/{typeProvider}/types
		/// </summary>
		/// <param name="project">The project ID for this request.</param>
		/// <param name="typeProvider">The name of the type provider for this request.</param>
		/// <param name="filter">A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.</param>
		/// <param name="maxResults">The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		/// Minimum: 0
		// </param>
		/// <param name="orderBy">Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.</param>
		/// <param name="pageToken">Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.</param>
		/// <returns>Successful response</returns>
		public async Task<TypeProvidersListTypesResponse> Deploymentmanager_typeProviders_listTypesAsync(string project, string typeProvider, string filter, int maxResults, string orderBy, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deploymentmanager/v2beta/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/global/typeProviders/"+ (typeProvider==null? "" : System.Uri.EscapeDataString(typeProvider))+"/types&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&maxResults="+maxResults+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TypeProvidersListTypesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a type info for a type provided by a TypeProvider.
		/// Deploymentmanager_typeProviders_getType deploymentmanager/v2beta/projects/{project}/global/typeProviders/{typeProvider}/types/{type}
		/// </summary>
		/// <param name="project">The project ID for this request.</param>
		/// <param name="typeProvider">The name of the type provider for this request.</param>
		/// <param name="type">The name of the type provider type for this request.</param>
		/// <returns>Successful response</returns>
		public async Task<TypeInfo> Deploymentmanager_typeProviders_getTypeAsync(string project, string typeProvider, string type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deploymentmanager/v2beta/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/global/typeProviders/"+ (typeProvider==null? "" : System.Uri.EscapeDataString(typeProvider))+"/types/"+ (type==null? "" : System.Uri.EscapeDataString(type));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TypeInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all resource types for Deployment Manager.
		/// Deploymentmanager_types_list deploymentmanager/v2beta/projects/{project}/global/types
		/// </summary>
		/// <param name="project">The project ID for this request.</param>
		/// <param name="filter">A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.</param>
		/// <param name="maxResults">The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		/// Minimum: 0
		// </param>
		/// <param name="orderBy">Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.</param>
		/// <param name="pageToken">Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.</param>
		/// <returns>Successful response</returns>
		public async Task<TypesListResponse> Deploymentmanager_types_listAsync(string project, string filter, int maxResults, string orderBy, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deploymentmanager/v2beta/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/global/types&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&maxResults="+maxResults+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TypesListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Deploymentmanager_deployments_insertCreatePolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_OR_ACQUIRE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACQUIRE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE = 2,
	}
	
	public enum Deploymentmanager_deployments_deleteDeletePolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABANDON = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
