//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchCheckLayerAvailabilityResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="layers")]
		public Layer[] Layers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failures")]
		public LayerFailure[] Failures { get; set; }
	}
	
	/// <summary>
	/// An object representing an Amazon ECR image layer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Layer
	{
		
		[System.Runtime.Serialization.DataMember(Name="layerDigest")]
		public string LayerDigest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="layerAvailability")]
		public LayerAvailability LayerAvailability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="layerSize")]
		public System.Nullable<System.Int32> LayerSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mediaType")]
		public string MediaType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LayerAvailability
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNAVAILABLE = 1,
	}
	
	/// <summary>
	/// An object representing an Amazon ECR image layer failure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LayerFailure
	{
		
		[System.Runtime.Serialization.DataMember(Name="layerDigest")]
		public string LayerDigest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureCode")]
		public LayerFailureCode FailureCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureReason")]
		public string FailureReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LayerFailureCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidLayerDigest = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MissingLayerDigest = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchCheckLayerAvailabilityRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="layerDigests")]
		public string[] LayerDigests { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RepositoryNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidParameterException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDeleteImageResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="imageIds")]
		public ImageIdentifier[] ImageIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failures")]
		public ImageFailure[] Failures { get; set; }
	}
	
	/// <summary>
	/// An object with identifying information for an image in an Amazon ECR repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageIdentifier
	{
		
		[System.Runtime.Serialization.DataMember(Name="imageDigest")]
		public string ImageDigest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageTag")]
		public string ImageTag { get; set; }
	}
	
	/// <summary>
	/// An object representing an Amazon ECR image failure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageFailure
	{
		
		[System.Runtime.Serialization.DataMember(Name="imageId")]
		public ImageIdentifier ImageId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureCode")]
		public ImageFailureCode FailureCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureReason")]
		public string FailureReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ImageFailureCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidImageDigest = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidImageTag = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ImageTagDoesNotMatchDigest = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ImageNotFound = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MissingDigestAndTag = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ImageReferencedByManifestList = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KmsError = 6,
	}
	
	/// <summary>
	/// Deletes specified images within a specified repository. Images are specified with either the <code>imageTag</code> or <code>imageDigest</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDeleteImageRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageIds")]
		public ImageIdentifier[] ImageIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetImageResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="images")]
		public Image[] Images { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failures")]
		public ImageFailure[] Failures { get; set; }
	}
	
	/// <summary>
	/// An object representing an Amazon ECR image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Image
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageId")]
		public ImageIdentifier ImageId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageManifest")]
		public string ImageManifest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageManifestMediaType")]
		public string ImageManifestMediaType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetImageRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageIds")]
		public ImageIdentifier[] ImageIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="acceptedMediaTypes")]
		public string[] AcceptedMediaTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetRepositoryScanningConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="scanningConfigurations")]
		public RepositoryScanningConfiguration[] ScanningConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failures")]
		public RepositoryScanningConfigurationFailure[] Failures { get; set; }
	}
	
	/// <summary>
	/// The details of the scanning configuration for a repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RepositoryScanningConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="repositoryArn")]
		public string RepositoryArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scanOnPush")]
		public System.Nullable<System.Boolean> ScanOnPush { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scanFrequency")]
		public ScanFrequency ScanFrequency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="appliedScanFilters")]
		public ScanningRepositoryFilter[] AppliedScanFilters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ScanFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCAN_ON_PUSH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUOUS_SCAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANUAL = 2,
	}
	
	/// <summary>
	/// The details of a scanning repository filter. For more information on how to use filters, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning.html#image-scanning-filters">Using filters</a> in the <i>Amazon Elastic Container Registry User Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScanningRepositoryFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public string Filter { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filterType")]
		public ScanningRepositoryFilterType FilterType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ScanningRepositoryFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WILDCARD = 0,
	}
	
	/// <summary>
	/// The details about any failures associated with the scanning configuration of a repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RepositoryScanningConfigurationFailure
	{
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureCode")]
		public ScanningConfigurationFailureCode FailureCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureReason")]
		public string FailureReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ScanningConfigurationFailureCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPOSITORY_NOT_FOUND = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetRepositoryScanningConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryNames")]
		public string[] RepositoryNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompleteLayerUploadResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uploadId")]
		public string UploadId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="layerDigest")]
		public string LayerDigest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompleteLayerUploadRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uploadId")]
		public string UploadId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="layerDigests")]
		public string[] LayerDigests { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UploadNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidLayerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LayerPartTooSmallException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LayerAlreadyExistsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EmptyUploadException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KmsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreatePullThroughCacheRuleResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="ecrRepositoryPrefix")]
		public string EcrRepositoryPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="upstreamRegistryUrl")]
		public string UpstreamRegistryUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreatePullThroughCacheRuleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ecrRepositoryPrefix")]
		public string EcrRepositoryPrefix { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="upstreamRegistryUrl")]
		public string UpstreamRegistryUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PullThroughCacheRuleAlreadyExistsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnsupportedUpstreamRegistryException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateRepositoryResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public Repository Repository { get; set; }
	}
	
	/// <summary>
	/// An object representing a repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Repository
	{
		
		[System.Runtime.Serialization.DataMember(Name="repositoryArn")]
		public string RepositoryArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryUri")]
		public string RepositoryUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageTagMutability")]
		public ImageTagMutability ImageTagMutability { get; set; }
		
		/// <summary>
		/// The image scanning configuration for a repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageScanningConfiguration")]
		public ImageScanningConfiguration ImageScanningConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryptionConfiguration")]
		public EncryptionConfiguration EncryptionConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ImageTagMutability
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUTABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMMUTABLE = 1,
	}
	
	/// <summary>
	/// The image scanning configuration for a repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageScanningConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="scanOnPush")]
		public System.Nullable<System.Boolean> ScanOnPush { get; set; }
	}
	
	/// <summary>
	/// <p>The encryption configuration for the repository. This determines how the contents of your repository are encrypted at rest.</p> <p>By default, when no encryption configuration is set or the <code>AES256</code> encryption type is used, Amazon ECR uses server-side encryption with Amazon S3-managed encryption keys which encrypts your data at rest using an AES-256 encryption algorithm. This does not require any action on your part.</p> <p>For more control over the encryption of the contents of your repository, you can use server-side encryption with Key Management Service key stored in Key Management Service (KMS) to encrypt your images. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/encryption-at-rest.html">Amazon ECR encryption at rest</a> in the <i>Amazon Elastic Container Registry User Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EncryptionConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="encryptionType")]
		public EncryptionType EncryptionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKey")]
		public string KmsKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EncryptionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES256 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KMS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateRepositoryRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageTagMutability")]
		public ImageTagMutability ImageTagMutability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageScanningConfiguration")]
		public ImageScanningConfiguration ImageScanningConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryptionConfiguration")]
		public EncryptionConfiguration EncryptionConfiguration { get; set; }
	}
	
	/// <summary>
	/// The metadata to apply to a resource to help you categorize and organize them. Each tag consists of a key and a value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Tag
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidTagParameterException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TooManyTagsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RepositoryAlreadyExistsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteLifecyclePolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lifecyclePolicyText")]
		public string LifecyclePolicyText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastEvaluatedAt")]
		public System.DateTimeOffset LastEvaluatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteLifecyclePolicyRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LifecyclePolicyNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeletePullThroughCacheRuleResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="ecrRepositoryPrefix")]
		public string EcrRepositoryPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="upstreamRegistryUrl")]
		public string UpstreamRegistryUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeletePullThroughCacheRuleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ecrRepositoryPrefix")]
		public string EcrRepositoryPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PullThroughCacheRuleNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteRegistryPolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyText")]
		public string PolicyText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteRegistryPolicyRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegistryPolicyNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteRepositoryResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public Repository Repository { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteRepositoryRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="force")]
		public System.Nullable<System.Boolean> Force { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RepositoryNotEmptyException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteRepositoryPolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyText")]
		public string PolicyText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteRepositoryPolicyRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RepositoryPolicyNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeImageReplicationStatusResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// An object with identifying information for an image in an Amazon ECR repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageId")]
		public ImageIdentifier ImageId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationStatuses")]
		public ImageReplicationStatus[] ReplicationStatuses { get; set; }
	}
	
	/// <summary>
	/// The status of the replication process for an image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageReplicationStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReplicationStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureCode")]
		public string FailureCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReplicationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeImageReplicationStatusRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// An object with identifying information for an image in an Amazon ECR repository.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageId")]
		public ImageIdentifier ImageId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeImageScanFindingsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// An object with identifying information for an image in an Amazon ECR repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageId")]
		public ImageIdentifier ImageId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageScanStatus")]
		public ImageScanStatus ImageScanStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageScanFindings")]
		public ImageScanFindings ImageScanFindings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The current status of an image scan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageScanStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ScanStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ScanStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSUPPORTED_IMAGE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCAN_ELIGIBILITY_EXPIRED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINDINGS_UNAVAILABLE = 7,
	}
	
	/// <summary>
	/// The details of an image scan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageScanFindings
	{
		
		[System.Runtime.Serialization.DataMember(Name="imageScanCompletedAt")]
		public System.DateTimeOffset ImageScanCompletedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vulnerabilitySourceUpdatedAt")]
		public System.DateTimeOffset VulnerabilitySourceUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="findingSeverityCounts")]
		public FindingSeverityCounts FindingSeverityCounts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="findings")]
		public ImageScanFinding[] Findings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enhancedFindings")]
		public EnhancedImageScanFinding[] EnhancedFindings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FindingSeverityCounts
	{
	}
	
	/// <summary>
	/// Contains information about an image scan finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageScanFinding
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public FindingSeverity Severity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public Attribute[] Attributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FindingSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFORMATIONAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRITICAL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNDEFINED = 5,
	}
	
	/// <summary>
	/// This data type is used in the <a>ImageScanFinding</a> data type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Attribute
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The details of an enhanced image scan. This is returned when enhanced scanning is enabled for your private registry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnhancedImageScanFinding
	{
		
		[System.Runtime.Serialization.DataMember(Name="awsAccountId")]
		public string AwsAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="findingArn")]
		public string FindingArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstObservedAt")]
		public System.DateTimeOffset FirstObservedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastObservedAt")]
		public System.DateTimeOffset LastObservedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageVulnerabilityDetails")]
		public PackageVulnerabilityDetails PackageVulnerabilityDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remediation")]
		public Remediation Remediation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public Resource[] Resources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="score")]
		public System.Nullable<System.Double> Score { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scoreDetails")]
		public ScoreDetails ScoreDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public string Severity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.DateTimeOffset UpdatedAt { get; set; }
	}
	
	/// <summary>
	/// Information about a package vulnerability finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PackageVulnerabilityDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="cvss")]
		public CvssScore[] Cvss { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referenceUrls")]
		public string[] ReferenceUrls { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relatedVulnerabilities")]
		public string[] RelatedVulnerabilities { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceUrl")]
		public string SourceUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendorCreatedAt")]
		public System.DateTimeOffset VendorCreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendorSeverity")]
		public string VendorSeverity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendorUpdatedAt")]
		public System.DateTimeOffset VendorUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vulnerabilityId")]
		public string VulnerabilityId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vulnerablePackages")]
		public VulnerablePackage[] VulnerablePackages { get; set; }
	}
	
	/// <summary>
	/// The CVSS score for a finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CvssScore
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseScore")]
		public System.Nullable<System.Double> BaseScore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scoringVector")]
		public string ScoringVector { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Information on the vulnerable package identified by a finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VulnerablePackage
	{
		
		[System.Runtime.Serialization.DataMember(Name="arch")]
		public string Arch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="epoch")]
		public System.Nullable<System.Int32> Epoch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filePath")]
		public string FilePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageManager")]
		public string PackageManager { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="release")]
		public string Release { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceLayerHash")]
		public string SourceLayerHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Information on how to remediate a finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Remediation
	{
		
		[System.Runtime.Serialization.DataMember(Name="recommendation")]
		public Recommendation Recommendation { get; set; }
	}
	
	/// <summary>
	/// Details about the recommended course of action to remediate the finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Recommendation
	{
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	/// <summary>
	/// Details about the resource involved in a finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Resource
	{
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public ResourceDetails Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Contains details about the resource involved in the finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="awsEcrContainerImage")]
		public AwsEcrContainerImageDetails AwsEcrContainerImage { get; set; }
	}
	
	/// <summary>
	/// The image details of the Amazon ECR container image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AwsEcrContainerImageDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="architecture")]
		public string Architecture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageHash")]
		public string ImageHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageTags")]
		public string[] ImageTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public string Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pushedAt")]
		public System.DateTimeOffset PushedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registry")]
		public string Registry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Tags
	{
	}
	
	/// <summary>
	/// Information about the Amazon Inspector score given to a finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScoreDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="cvss")]
		public CvssScoreDetails Cvss { get; set; }
	}
	
	/// <summary>
	/// Information about the CVSS score.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CvssScoreDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="adjustments")]
		public CvssScoreAdjustment[] Adjustments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="score")]
		public System.Nullable<System.Double> Score { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scoreSource")]
		public string ScoreSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scoringVector")]
		public string ScoringVector { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Details on adjustments Amazon Inspector made to the CVSS score for a finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CvssScoreAdjustment
	{
		
		[System.Runtime.Serialization.DataMember(Name="metric")]
		public string Metric { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeImageScanFindingsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// An object with identifying information for an image in an Amazon ECR repository.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageId")]
		public ImageIdentifier ImageId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScanNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeImagesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="imageDetails")]
		public ImageDetail[] ImageDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An object that describes an image returned by a <a>DescribeImages</a> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageDigest")]
		public string ImageDigest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageTags")]
		public string[] ImageTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageSizeInBytes")]
		public System.Nullable<System.Int32> ImageSizeInBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imagePushedAt")]
		public System.DateTimeOffset ImagePushedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageScanStatus")]
		public ImageScanStatus ImageScanStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageScanFindingsSummary")]
		public ImageScanFindingsSummary ImageScanFindingsSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageManifestMediaType")]
		public string ImageManifestMediaType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artifactMediaType")]
		public string ArtifactMediaType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastRecordedPullTime")]
		public System.DateTimeOffset LastRecordedPullTime { get; set; }
	}
	
	/// <summary>
	/// A summary of the last completed image scan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageScanFindingsSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="imageScanCompletedAt")]
		public System.DateTimeOffset ImageScanCompletedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vulnerabilitySourceUpdatedAt")]
		public System.DateTimeOffset VulnerabilitySourceUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="findingSeverityCounts")]
		public FindingSeverityCounts FindingSeverityCounts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeImagesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageIds")]
		public ImageIdentifier[] ImageIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public DescribeImagesFilter Filter { get; set; }
	}
	
	/// <summary>
	/// An object representing a filter on a <a>DescribeImages</a> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeImagesFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="tagStatus")]
		public TagStatus TagStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TagStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAGGED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNTAGGED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANY = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribePullThroughCacheRulesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="pullThroughCacheRules")]
		public PullThroughCacheRule[] PullThroughCacheRules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The details of a pull through cache rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PullThroughCacheRule
	{
		
		[System.Runtime.Serialization.DataMember(Name="ecrRepositoryPrefix")]
		public string EcrRepositoryPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="upstreamRegistryUrl")]
		public string UpstreamRegistryUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribePullThroughCacheRulesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ecrRepositoryPrefixes")]
		public string[] EcrRepositoryPrefixes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeRegistryResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationConfiguration")]
		public ReplicationConfiguration ReplicationConfiguration { get; set; }
	}
	
	/// <summary>
	/// The replication configuration for a registry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReplicationConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public ReplicationRule[] Rules { get; set; }
	}
	
	/// <summary>
	/// An array of objects representing the replication destinations and repository filters for a replication configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReplicationRule
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinations")]
		public ReplicationDestination[] Destinations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryFilters")]
		public RepositoryFilter[] RepositoryFilters { get; set; }
	}
	
	/// <summary>
	/// An array of objects representing the destination for a replication rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReplicationDestination
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
	}
	
	/// <summary>
	/// The filter settings used with image replication. Specifying a repository filter to a replication rule provides a method for controlling which repositories in a private registry are replicated. If no repository filter is specified, all images in the repository are replicated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RepositoryFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public string Filter { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filterType")]
		public RepositoryFilterType FilterType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RepositoryFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREFIX_MATCH = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeRegistryRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeRepositoriesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="repositories")]
		public Repository[] Repositories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeRepositoriesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryNames")]
		public string[] RepositoryNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAuthorizationTokenResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorizationData")]
		public AuthorizationData[] AuthorizationData { get; set; }
	}
	
	/// <summary>
	/// An object representing authorization data for an Amazon ECR registry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuthorizationData
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorizationToken")]
		public string AuthorizationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expiresAt")]
		public System.DateTimeOffset ExpiresAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="proxyEndpoint")]
		public string ProxyEndpoint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAuthorizationTokenRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryIds")]
		public string[] RegistryIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDownloadUrlForLayerResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="downloadUrl")]
		public string DownloadUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="layerDigest")]
		public string LayerDigest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDownloadUrlForLayerRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="layerDigest")]
		public string LayerDigest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LayersNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LayerInaccessibleException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetLifecyclePolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lifecyclePolicyText")]
		public string LifecyclePolicyText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastEvaluatedAt")]
		public System.DateTimeOffset LastEvaluatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetLifecyclePolicyRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetLifecyclePolicyPreviewResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lifecyclePolicyText")]
		public string LifecyclePolicyText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public LifecyclePolicyPreviewStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previewResults")]
		public LifecyclePolicyPreviewResult[] PreviewResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public LifecyclePolicyPreviewSummary Summary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LifecyclePolicyPreviewStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	/// <summary>
	/// The result of the lifecycle policy preview.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LifecyclePolicyPreviewResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="imageTags")]
		public string[] ImageTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageDigest")]
		public string ImageDigest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imagePushedAt")]
		public System.DateTimeOffset ImagePushedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public LifecyclePolicyRuleAction Action { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="appliedRulePriority")]
		public System.Nullable<System.Int32> AppliedRulePriority { get; set; }
	}
	
	/// <summary>
	/// The type of action to be taken.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LifecyclePolicyRuleAction
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ImageActionType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ImageActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRE = 0,
	}
	
	/// <summary>
	/// The summary of the lifecycle policy preview request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LifecyclePolicyPreviewSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="expiringImageTotalCount")]
		public System.Nullable<System.Int32> ExpiringImageTotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetLifecyclePolicyPreviewRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageIds")]
		public ImageIdentifier[] ImageIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public LifecyclePolicyPreviewFilter Filter { get; set; }
	}
	
	/// <summary>
	/// The filter for the lifecycle policy preview.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LifecyclePolicyPreviewFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="tagStatus")]
		public TagStatus TagStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LifecyclePolicyPreviewNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetRegistryPolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyText")]
		public string PolicyText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetRegistryPolicyRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetRegistryScanningConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scanningConfiguration")]
		public RegistryScanningConfiguration ScanningConfiguration { get; set; }
	}
	
	/// <summary>
	/// The scanning configuration for a private registry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegistryScanningConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="scanType")]
		public ScanType ScanType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public RegistryScanningRule[] Rules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ScanType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENHANCED = 1,
	}
	
	/// <summary>
	/// The details of a scanning rule for a private registry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegistryScanningRule
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scanFrequency")]
		public ScanFrequency ScanFrequency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryFilters")]
		public ScanningRepositoryFilter[] RepositoryFilters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetRegistryScanningConfigurationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetRepositoryPolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyText")]
		public string PolicyText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetRepositoryPolicyRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InitiateLayerUploadResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="uploadId")]
		public string UploadId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partSize")]
		public System.Nullable<System.Int32> PartSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InitiateLayerUploadRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListImagesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="imageIds")]
		public ImageIdentifier[] ImageIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListImagesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public ListImagesFilter Filter { get; set; }
	}
	
	/// <summary>
	/// An object representing a filter on a <a>ListImages</a> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListImagesFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="tagStatus")]
		public TagStatus TagStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutImageResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="image")]
		public Image Image { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutImageRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageManifest")]
		public string ImageManifest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageManifestMediaType")]
		public string ImageManifestMediaType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageTag")]
		public string ImageTag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageDigest")]
		public string ImageDigest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageAlreadyExistsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReferencedImagesNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageTagAlreadyExistsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageDigestDoesNotMatchException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutImageScanningConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageScanningConfiguration")]
		public ImageScanningConfiguration ImageScanningConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutImageScanningConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageScanningConfiguration")]
		public ImageScanningConfiguration ImageScanningConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutImageTagMutabilityResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageTagMutability")]
		public ImageTagMutability ImageTagMutability { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutImageTagMutabilityRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageTagMutability")]
		public ImageTagMutability ImageTagMutability { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutLifecyclePolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lifecyclePolicyText")]
		public string LifecyclePolicyText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutLifecyclePolicyRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lifecyclePolicyText")]
		public string LifecyclePolicyText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutRegistryPolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyText")]
		public string PolicyText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutRegistryPolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policyText")]
		public string PolicyText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutRegistryScanningConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryScanningConfiguration")]
		public RegistryScanningConfiguration RegistryScanningConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutRegistryScanningConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="scanType")]
		public ScanType ScanType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public RegistryScanningRule[] Rules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutReplicationConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="replicationConfiguration")]
		public ReplicationConfiguration ReplicationConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutReplicationConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replicationConfiguration")]
		public ReplicationConfiguration ReplicationConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetRepositoryPolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyText")]
		public string PolicyText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetRepositoryPolicyRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policyText")]
		public string PolicyText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="force")]
		public System.Nullable<System.Boolean> Force { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartImageScanResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// An object with identifying information for an image in an Amazon ECR repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageId")]
		public ImageIdentifier ImageId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageScanStatus")]
		public ImageScanStatus ImageScanStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartImageScanRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// An object with identifying information for an image in an Amazon ECR repository.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageId")]
		public ImageIdentifier ImageId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnsupportedImageTypeException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartLifecyclePolicyPreviewResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lifecyclePolicyText")]
		public string LifecyclePolicyText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public LifecyclePolicyPreviewStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartLifecyclePolicyPreviewRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lifecyclePolicyText")]
		public string LifecyclePolicyText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LifecyclePolicyPreviewInProgressException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tagKeys")]
		public string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UploadLayerPartResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uploadId")]
		public string UploadId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastByteReceived")]
		public System.Nullable<System.Int32> LastByteReceived { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UploadLayerPartRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryId")]
		public string RegistryId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uploadId")]
		public string UploadId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partFirstByte")]
		public int PartFirstByte { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partLastByte")]
		public int PartLastByte { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="layerPartBlob")]
		public string LayerPartBlob { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidLayerPartException
	{
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Checks the availability of one or more image layers in a repository.</p> <p>When an image is pushed to a repository, each image layer is checked to verify if it has been uploaded before. If it has been uploaded, then the image layer is skipped.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>
		/// BatchCheckLayerAvailability #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchCheckLayerAvailability
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchCheckLayerAvailabilityResponse> BatchCheckLayerAvailabilityAsync(BatchCheckLayerAvailabilityRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchCheckLayerAvailability";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchCheckLayerAvailabilityResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a list of specified images within a repository. Images are specified with either an <code>imageTag</code> or <code>imageDigest</code>.</p> <p>You can remove a tag from an image by specifying the image's tag in your request. When you remove the last tag from an image, the image is deleted from your repository.</p> <p>You can completely delete an image (and all of its tags) by specifying the image's digest in your request.</p>
		/// BatchDeleteImage #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchDeleteImage
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchDeleteImageResponse> BatchDeleteImageAsync(BatchDeleteImageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchDeleteImage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchDeleteImageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets detailed information for an image. Images are specified with either an <code>imageTag</code> or <code>imageDigest</code>.</p> <p>When an image is pulled, the BatchGetImage API is called once to retrieve the image manifest.</p>
		/// BatchGetImage #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchGetImage
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchGetImageResponse> BatchGetImageAsync(BatchGetImageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchGetImage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchGetImageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the scanning configuration for one or more repositories.
		/// BatchGetRepositoryScanningConfiguration #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchGetRepositoryScanningConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchGetRepositoryScanningConfigurationResponse> BatchGetRepositoryScanningConfigurationAsync(BatchGetRepositoryScanningConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchGetRepositoryScanningConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchGetRepositoryScanningConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Informs Amazon ECR that the image layer upload has completed for a specified registry, repository name, and upload ID. You can optionally provide a <code>sha256</code> digest of the image layer for data validation purposes.</p> <p>When an image is pushed, the CompleteLayerUpload API is called once per each new image layer to verify that the upload has completed.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>
		/// CompleteLayerUpload #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.CompleteLayerUpload
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CompleteLayerUploadResponse> CompleteLayerUploadAsync(CompleteLayerUploadRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.CompleteLayerUpload";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CompleteLayerUploadResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a pull through cache rule. A pull through cache rule provides a way to cache images from an external public registry in your Amazon ECR private registry.
		/// CreatePullThroughCacheRule #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.CreatePullThroughCacheRule
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreatePullThroughCacheRuleResponse> CreatePullThroughCacheRuleAsync(CreatePullThroughCacheRuleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.CreatePullThroughCacheRule";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreatePullThroughCacheRuleResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a repository. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/Repositories.html">Amazon ECR repositories</a> in the <i>Amazon Elastic Container Registry User Guide</i>.
		/// CreateRepository #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.CreateRepository
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateRepositoryResponse> CreateRepositoryAsync(CreateRepositoryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.CreateRepository";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateRepositoryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the lifecycle policy associated with the specified repository.
		/// DeleteLifecyclePolicy #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteLifecyclePolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteLifecyclePolicyResponse> DeleteLifecyclePolicyAsync(DeleteLifecyclePolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteLifecyclePolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteLifecyclePolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a pull through cache rule.
		/// DeletePullThroughCacheRule #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeletePullThroughCacheRule
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeletePullThroughCacheRuleResponse> DeletePullThroughCacheRuleAsync(DeletePullThroughCacheRuleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeletePullThroughCacheRule";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeletePullThroughCacheRuleResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the registry permissions policy.
		/// DeleteRegistryPolicy #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteRegistryPolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteRegistryPolicyResponse> DeleteRegistryPolicyAsync(DeleteRegistryPolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteRegistryPolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteRegistryPolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a repository. If the repository contains images, you must either delete all images in the repository or use the <code>force</code> option to delete the repository.
		/// DeleteRepository #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteRepository
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteRepositoryResponse> DeleteRepositoryAsync(DeleteRepositoryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteRepository";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteRepositoryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the repository policy associated with the specified repository.
		/// DeleteRepositoryPolicy #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteRepositoryPolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteRepositoryPolicyResponse> DeleteRepositoryPolicyAsync(DeleteRepositoryPolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteRepositoryPolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteRepositoryPolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the replication status for a specified image.
		/// DescribeImageReplicationStatus #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeImageReplicationStatus
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeImageReplicationStatusResponse> DescribeImageReplicationStatusAsync(DescribeImageReplicationStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeImageReplicationStatus";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeImageReplicationStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the scan findings for the specified image.
		/// DescribeImageScanFindings #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeImageScanFindings
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeImageScanFindingsResponse> DescribeImageScanFindingsAsync(string maxResults, string nextToken, DescribeImageScanFindingsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeImageScanFindings?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeImageScanFindingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns metadata about the images in a repository.</p> <note> <p>Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed image size, so it may return a larger image size than the image sizes returned by <a>DescribeImages</a>.</p> </note>
		/// DescribeImages #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeImages
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeImagesResponse> DescribeImagesAsync(string maxResults, string nextToken, DescribeImagesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeImages?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeImagesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the pull through cache rules for a registry.
		/// DescribePullThroughCacheRules #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribePullThroughCacheRules
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribePullThroughCacheRulesResponse> DescribePullThroughCacheRulesAsync(string maxResults, string nextToken, DescribePullThroughCacheRulesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribePullThroughCacheRules?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribePullThroughCacheRulesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes the settings for a registry. The replication configuration for a repository can be created or updated with the <a>PutReplicationConfiguration</a> API action.
		/// DescribeRegistry #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeRegistry
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeRegistryResponse> DescribeRegistryAsync(DescribeRegistryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeRegistry";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeRegistryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes image repositories in a registry.
		/// DescribeRepositories #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeRepositories
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeRepositoriesResponse> DescribeRepositoriesAsync(string maxResults, string nextToken, DescribeRepositoriesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeRepositories?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeRepositoriesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves an authorization token. An authorization token represents your IAM authentication credentials and can be used to access any Amazon ECR registry that your IAM principal has access to. The authorization token is valid for 12 hours.</p> <p>The <code>authorizationToken</code> returned is a base64 encoded string that can be decoded and used in a <code>docker login</code> command to authenticate to a registry. The CLI offers an <code>get-login-password</code> command that simplifies the login process. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/Registries.html#registry_auth">Registry authentication</a> in the <i>Amazon Elastic Container Registry User Guide</i>.</p>
		/// GetAuthorizationToken #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetAuthorizationToken
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetAuthorizationTokenResponse> GetAuthorizationTokenAsync(GetAuthorizationTokenRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetAuthorizationToken";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAuthorizationTokenResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves the pre-signed Amazon S3 download URL corresponding to an image layer. You can only get URLs for image layers that are referenced in an image.</p> <p>When an image is pulled, the GetDownloadUrlForLayer API is called once per image layer that is not already cached.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>
		/// GetDownloadUrlForLayer #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetDownloadUrlForLayer
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDownloadUrlForLayerResponse> GetDownloadUrlForLayerAsync(GetDownloadUrlForLayerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetDownloadUrlForLayer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDownloadUrlForLayerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the lifecycle policy for the specified repository.
		/// GetLifecyclePolicy #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetLifecyclePolicyResponse> GetLifecyclePolicyAsync(GetLifecyclePolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetLifecyclePolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the results of the lifecycle policy preview request for the specified repository.
		/// GetLifecyclePolicyPreview #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicyPreview
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetLifecyclePolicyPreviewResponse> GetLifecyclePolicyPreviewAsync(string maxResults, string nextToken, GetLifecyclePolicyPreviewRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicyPreview?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetLifecyclePolicyPreviewResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the permissions policy for a registry.
		/// GetRegistryPolicy #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetRegistryPolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRegistryPolicyResponse> GetRegistryPolicyAsync(GetRegistryPolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetRegistryPolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetRegistryPolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the scanning configuration for a registry.
		/// GetRegistryScanningConfiguration #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetRegistryScanningConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRegistryScanningConfigurationResponse> GetRegistryScanningConfigurationAsync(GetRegistryScanningConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetRegistryScanningConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetRegistryScanningConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the repository policy for the specified repository.
		/// GetRepositoryPolicy #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetRepositoryPolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRepositoryPolicyResponse> GetRepositoryPolicyAsync(GetRepositoryPolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetRepositoryPolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetRepositoryPolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Notifies Amazon ECR that you intend to upload an image layer.</p> <p>When an image is pushed, the InitiateLayerUpload API is called once per image layer that has not already been uploaded. Whether or not an image layer has been uploaded is determined by the BatchCheckLayerAvailability API action.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>
		/// InitiateLayerUpload #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.InitiateLayerUpload
		/// </summary>
		/// <returns>Success</returns>
		public async Task<InitiateLayerUploadResponse> InitiateLayerUploadAsync(InitiateLayerUploadRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.InitiateLayerUpload";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InitiateLayerUploadResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists all the image IDs for the specified repository.</p> <p>You can filter images based on whether or not they are tagged by using the <code>tagStatus</code> filter and specifying either <code>TAGGED</code>, <code>UNTAGGED</code> or <code>ANY</code>. For example, you can filter your results to return only <code>UNTAGGED</code> images and then pipe that result to a <a>BatchDeleteImage</a> operation to delete them. Or, you can filter your results to return only <code>TAGGED</code> images to list all of the tags in your repository.</p>
		/// ListImages #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.ListImages
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListImagesResponse> ListImagesAsync(string maxResults, string nextToken, ListImagesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.ListImages?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListImagesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List the tags for an Amazon ECR resource.
		/// ListTagsForResource #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.ListTagsForResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(ListTagsForResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.ListTagsForResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates or updates the image manifest and tags associated with an image.</p> <p>When an image is pushed and all new image layers have been uploaded, the PutImage API is called once to create or update the image manifest and the tags associated with the image.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>
		/// PutImage #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutImage
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutImageResponse> PutImageAsync(PutImageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutImage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutImageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <important> <p>The <code>PutImageScanningConfiguration</code> API is being deprecated, in favor of specifying the image scanning configuration at the registry level. For more information, see <a>PutRegistryScanningConfiguration</a>.</p> </important> <p>Updates the image scanning configuration for the specified repository.</p>
		/// PutImageScanningConfiguration #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutImageScanningConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutImageScanningConfigurationResponse> PutImageScanningConfigurationAsync(PutImageScanningConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutImageScanningConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutImageScanningConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the image tag mutability settings for the specified repository. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-tag-mutability.html">Image tag mutability</a> in the <i>Amazon Elastic Container Registry User Guide</i>.
		/// PutImageTagMutability #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutImageTagMutability
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutImageTagMutabilityResponse> PutImageTagMutabilityAsync(PutImageTagMutabilityRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutImageTagMutability";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutImageTagMutabilityResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates or updates the lifecycle policy for the specified repository. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html">Lifecycle policy template</a>.
		/// PutLifecyclePolicy #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutLifecyclePolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutLifecyclePolicyResponse> PutLifecyclePolicyAsync(PutLifecyclePolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutLifecyclePolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutLifecyclePolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates or updates the permissions policy for your registry.</p> <p>A registry policy is used to specify permissions for another Amazon Web Services account and is used when configuring cross-account replication. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/registry-permissions.html">Registry permissions</a> in the <i>Amazon Elastic Container Registry User Guide</i>.</p>
		/// PutRegistryPolicy #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutRegistryPolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutRegistryPolicyResponse> PutRegistryPolicyAsync(PutRegistryPolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutRegistryPolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutRegistryPolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates or updates the scanning configuration for your private registry.
		/// PutRegistryScanningConfiguration #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutRegistryScanningConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutRegistryScanningConfigurationResponse> PutRegistryScanningConfigurationAsync(PutRegistryScanningConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutRegistryScanningConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutRegistryScanningConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates or updates the replication configuration for a registry. The existing replication configuration for a repository can be retrieved with the <a>DescribeRegistry</a> API action. The first time the PutReplicationConfiguration API is called, a service-linked IAM role is created in your account for the replication process. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/using-service-linked-roles.html">Using service-linked roles for Amazon ECR</a> in the <i>Amazon Elastic Container Registry User Guide</i>.</p> <note> <p>When configuring cross-account replication, the destination account must grant the source account permission to replicate. This permission is controlled using a registry permissions policy. For more information, see <a>PutRegistryPolicy</a>.</p> </note>
		/// PutReplicationConfiguration #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutReplicationConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutReplicationConfigurationResponse> PutReplicationConfigurationAsync(PutReplicationConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutReplicationConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutReplicationConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Applies a repository policy to the specified repository to control access permissions. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policies.html">Amazon ECR Repository policies</a> in the <i>Amazon Elastic Container Registry User Guide</i>.
		/// SetRepositoryPolicy #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.SetRepositoryPolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SetRepositoryPolicyResponse> SetRepositoryPolicyAsync(SetRepositoryPolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.SetRepositoryPolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SetRepositoryPolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts an image vulnerability scan. An image scan can only be started once per 24 hours on an individual image. This limit includes if an image was scanned on initial push. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning.html">Image scanning</a> in the <i>Amazon Elastic Container Registry User Guide</i>.
		/// StartImageScan #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.StartImageScan
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartImageScanResponse> StartImageScanAsync(StartImageScanRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.StartImageScan";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartImageScanResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts a preview of a lifecycle policy for the specified repository. This allows you to see the results before associating the lifecycle policy with the repository.
		/// StartLifecyclePolicyPreview #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.StartLifecyclePolicyPreview
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartLifecyclePolicyPreviewResponse> StartLifecyclePolicyPreviewAsync(StartLifecyclePolicyPreviewRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.StartLifecyclePolicyPreview";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartLifecyclePolicyPreviewResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds specified tags to a resource with the specified ARN. Existing tags on a resource are not changed if they are not specified in the request parameters.
		/// TagResource #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.TagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(TagResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.TagResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes specified tags from a resource.
		/// UntagResource #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.UntagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(UntagResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.UntagResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Uploads an image layer part to Amazon ECR.</p> <p>When an image is pushed, each new image layer is uploaded in parts. The maximum size of each image layer part can be 20971520 bytes (or about 20MB). The UploadLayerPart API is called once per each new image layer part.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>
		/// UploadLayerPart #X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.UploadLayerPart
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UploadLayerPartResponse> UploadLayerPartAsync(UploadLayerPartRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.UploadLayerPart";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UploadLayerPartResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum BatchCheckLayerAvailabilityX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.BatchCheckLayerAvailability")]
		AmazonEC2ContainerRegistry_V20150921_BatchCheckLayerAvailability = 0,
	}
	
	public enum BatchDeleteImageX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.BatchDeleteImage")]
		AmazonEC2ContainerRegistry_V20150921_BatchDeleteImage = 0,
	}
	
	public enum BatchGetImageX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.BatchGetImage")]
		AmazonEC2ContainerRegistry_V20150921_BatchGetImage = 0,
	}
	
	public enum BatchGetRepositoryScanningConfigurationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.BatchGetRepositoryScanningConfiguration")]
		AmazonEC2ContainerRegistry_V20150921_BatchGetRepositoryScanningConfiguration = 0,
	}
	
	public enum CompleteLayerUploadX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.CompleteLayerUpload")]
		AmazonEC2ContainerRegistry_V20150921_CompleteLayerUpload = 0,
	}
	
	public enum CreatePullThroughCacheRuleX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.CreatePullThroughCacheRule")]
		AmazonEC2ContainerRegistry_V20150921_CreatePullThroughCacheRule = 0,
	}
	
	public enum CreateRepositoryX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.CreateRepository")]
		AmazonEC2ContainerRegistry_V20150921_CreateRepository = 0,
	}
	
	public enum DeleteLifecyclePolicyX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.DeleteLifecyclePolicy")]
		AmazonEC2ContainerRegistry_V20150921_DeleteLifecyclePolicy = 0,
	}
	
	public enum DeletePullThroughCacheRuleX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.DeletePullThroughCacheRule")]
		AmazonEC2ContainerRegistry_V20150921_DeletePullThroughCacheRule = 0,
	}
	
	public enum DeleteRegistryPolicyX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.DeleteRegistryPolicy")]
		AmazonEC2ContainerRegistry_V20150921_DeleteRegistryPolicy = 0,
	}
	
	public enum DeleteRepositoryX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.DeleteRepository")]
		AmazonEC2ContainerRegistry_V20150921_DeleteRepository = 0,
	}
	
	public enum DeleteRepositoryPolicyX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.DeleteRepositoryPolicy")]
		AmazonEC2ContainerRegistry_V20150921_DeleteRepositoryPolicy = 0,
	}
	
	public enum DescribeImageReplicationStatusX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.DescribeImageReplicationStatus")]
		AmazonEC2ContainerRegistry_V20150921_DescribeImageReplicationStatus = 0,
	}
	
	public enum DescribeImageScanFindingsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.DescribeImageScanFindings")]
		AmazonEC2ContainerRegistry_V20150921_DescribeImageScanFindings = 0,
	}
	
	public enum DescribeImagesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.DescribeImages")]
		AmazonEC2ContainerRegistry_V20150921_DescribeImages = 0,
	}
	
	public enum DescribePullThroughCacheRulesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.DescribePullThroughCacheRules")]
		AmazonEC2ContainerRegistry_V20150921_DescribePullThroughCacheRules = 0,
	}
	
	public enum DescribeRegistryX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.DescribeRegistry")]
		AmazonEC2ContainerRegistry_V20150921_DescribeRegistry = 0,
	}
	
	public enum DescribeRepositoriesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.DescribeRepositories")]
		AmazonEC2ContainerRegistry_V20150921_DescribeRepositories = 0,
	}
	
	public enum GetAuthorizationTokenX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.GetAuthorizationToken")]
		AmazonEC2ContainerRegistry_V20150921_GetAuthorizationToken = 0,
	}
	
	public enum GetDownloadUrlForLayerX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.GetDownloadUrlForLayer")]
		AmazonEC2ContainerRegistry_V20150921_GetDownloadUrlForLayer = 0,
	}
	
	public enum GetLifecyclePolicyX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicy")]
		AmazonEC2ContainerRegistry_V20150921_GetLifecyclePolicy = 0,
	}
	
	public enum GetLifecyclePolicyPreviewX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicyPreview")]
		AmazonEC2ContainerRegistry_V20150921_GetLifecyclePolicyPreview = 0,
	}
	
	public enum GetRegistryPolicyX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.GetRegistryPolicy")]
		AmazonEC2ContainerRegistry_V20150921_GetRegistryPolicy = 0,
	}
	
	public enum GetRegistryScanningConfigurationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.GetRegistryScanningConfiguration")]
		AmazonEC2ContainerRegistry_V20150921_GetRegistryScanningConfiguration = 0,
	}
	
	public enum GetRepositoryPolicyX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.GetRepositoryPolicy")]
		AmazonEC2ContainerRegistry_V20150921_GetRepositoryPolicy = 0,
	}
	
	public enum InitiateLayerUploadX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.InitiateLayerUpload")]
		AmazonEC2ContainerRegistry_V20150921_InitiateLayerUpload = 0,
	}
	
	public enum ListImagesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.ListImages")]
		AmazonEC2ContainerRegistry_V20150921_ListImages = 0,
	}
	
	public enum ListTagsForResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.ListTagsForResource")]
		AmazonEC2ContainerRegistry_V20150921_ListTagsForResource = 0,
	}
	
	public enum PutImageX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.PutImage")]
		AmazonEC2ContainerRegistry_V20150921_PutImage = 0,
	}
	
	public enum PutImageScanningConfigurationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.PutImageScanningConfiguration")]
		AmazonEC2ContainerRegistry_V20150921_PutImageScanningConfiguration = 0,
	}
	
	public enum PutImageTagMutabilityX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.PutImageTagMutability")]
		AmazonEC2ContainerRegistry_V20150921_PutImageTagMutability = 0,
	}
	
	public enum PutLifecyclePolicyX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.PutLifecyclePolicy")]
		AmazonEC2ContainerRegistry_V20150921_PutLifecyclePolicy = 0,
	}
	
	public enum PutRegistryPolicyX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.PutRegistryPolicy")]
		AmazonEC2ContainerRegistry_V20150921_PutRegistryPolicy = 0,
	}
	
	public enum PutRegistryScanningConfigurationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.PutRegistryScanningConfiguration")]
		AmazonEC2ContainerRegistry_V20150921_PutRegistryScanningConfiguration = 0,
	}
	
	public enum PutReplicationConfigurationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.PutReplicationConfiguration")]
		AmazonEC2ContainerRegistry_V20150921_PutReplicationConfiguration = 0,
	}
	
	public enum SetRepositoryPolicyX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.SetRepositoryPolicy")]
		AmazonEC2ContainerRegistry_V20150921_SetRepositoryPolicy = 0,
	}
	
	public enum StartImageScanX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.StartImageScan")]
		AmazonEC2ContainerRegistry_V20150921_StartImageScan = 0,
	}
	
	public enum StartLifecyclePolicyPreviewX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.StartLifecyclePolicyPreview")]
		AmazonEC2ContainerRegistry_V20150921_StartLifecyclePolicyPreview = 0,
	}
	
	public enum TagResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.TagResource")]
		AmazonEC2ContainerRegistry_V20150921_TagResource = 0,
	}
	
	public enum UntagResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.UntagResource")]
		AmazonEC2ContainerRegistry_V20150921_UntagResource = 0,
	}
	
	public enum UploadLayerPartX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEC2ContainerRegistry_V20150921.UploadLayerPart")]
		AmazonEC2ContainerRegistry_V20150921_UploadLayerPart = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
