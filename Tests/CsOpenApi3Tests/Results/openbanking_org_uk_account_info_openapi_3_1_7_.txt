//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class File
	{
	}
	
	/// <summary>
	/// Links relevant to the payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Links
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string First { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Last { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Next { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Prev { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Self { get; set; }
	}
	
	/// <summary>
	/// Meta Data relevant to the payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Meta
	{
		
		/// <summary>
		/// All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FirstAvailableDateTime { get; set; }
		
		/// <summary>
		/// All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastAvailableDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Model
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
	}
	
	/// <summary>
	/// Unambiguous identification of the account to which credit and debit entries are made.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBAccount4
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OBAccount4Account[] OBAccount4Account { get; set; }
		
		/// <summary>
		/// A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Specifies the sub type of account (product family group).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBAccount4AccountSubType AccountSubType { get; set; }
		
		/// <summary>
		/// Specifies the type of account (personal or business).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBAccount4AccountType AccountType { get; set; }
		
		/// <summary>
		/// Identification of the currency in which the account is held. 
		///Usage: Currency should only be used in case one and the same account number covers several currencies
		///and the initiating party needs to identify which currency needs to be used for settlement on the account.
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
		
		/// <summary>
		/// Specifies the description of the account type.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Description { get; set; }
		
		/// <summary>
		/// The nickname of the account, assigned by the account owner in order to provide an additional means of identification of the account.
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Nickname { get; set; }
		
		/// <summary>
		/// Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBranchAndFinancialInstitutionIdentification5_0 Servicer { get; set; }
		
		/// <summary>
		/// Specifies the status of account resource in code form.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBAccount4Status> Status { get; set; }
		
		/// <summary>
		/// Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StatusUpdateDateTime { get; set; }
	}
	
	public class OBAccount4Account
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBAccount4AccountSubType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChargeCard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreditCard = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CurrentAccount = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMoney = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Loan = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mortgage = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PrePaidCard = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Savings = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBAccount4AccountType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Business = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Personal = 1,
	}
	
	/// <summary>
	/// Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBBranchAndFinancialInstitutionIdentification5_0
	{
		
		/// <summary>
		/// Unique and unambiguous identification of the servicing institution.
		/// Required
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBAccount4Status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ProForma = 4,
	}
	
	/// <summary>
	/// Unambiguous identification of the account to which credit and debit entries are made.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBAccount4Basic
	{
		
		/// <summary>
		/// A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Specifies the sub type of account (product family group).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBAccount4AccountSubType AccountSubType { get; set; }
		
		/// <summary>
		/// Specifies the type of account (personal or business).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBAccount4AccountType AccountType { get; set; }
		
		/// <summary>
		/// Identification of the currency in which the account is held. 
		///Usage: Currency should only be used in case one and the same account number covers several currencies
		///and the initiating party needs to identify which currency needs to be used for settlement on the account.
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
		
		/// <summary>
		/// Specifies the description of the account type.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Description { get; set; }
		
		/// <summary>
		/// The nickname of the account, assigned by the account owner in order to provide an additional means of identification of the account.
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Nickname { get; set; }
		
		/// <summary>
		/// Specifies the status of account resource in code form.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBAccount4Status Status { get; set; }
		
		/// <summary>
		/// Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StatusUpdateDateTime { get; set; }
	}
	
	/// <summary>
	/// Unambiguous identification of the account to which credit and debit entries are made.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBAccount4Detail
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBAccount4DetailAccount[] OBAccount4DetailAccount { get; set; }
		
		/// <summary>
		/// A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Specifies the sub type of account (product family group).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBAccount4AccountSubType AccountSubType { get; set; }
		
		/// <summary>
		/// Specifies the type of account (personal or business).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBAccount4AccountType AccountType { get; set; }
		
		/// <summary>
		/// Identification of the currency in which the account is held. 
		///Usage: Currency should only be used in case one and the same account number covers several currencies
		///and the initiating party needs to identify which currency needs to be used for settlement on the account.
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
		
		/// <summary>
		/// Specifies the description of the account type.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Description { get; set; }
		
		/// <summary>
		/// The nickname of the account, assigned by the account owner in order to provide an additional means of identification of the account.
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Nickname { get; set; }
		
		/// <summary>
		/// Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBranchAndFinancialInstitutionIdentification5_0 Servicer { get; set; }
		
		/// <summary>
		/// Specifies the status of account resource in code form.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBAccount4Status Status { get; set; }
		
		/// <summary>
		/// Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StatusUpdateDateTime { get; set; }
	}
	
	public class OBAccount4DetailAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	/// <summary>
	/// Unambiguous identification of the account to which credit and debit entries are made. The following fields are optional only for accounts that are switched:
	///
	///  * Data.Currency  
	///  * Data.AccountType  
	///  * Data.AccountSubType
	///
	///For all other accounts, the fields must be populated by the ASPSP.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBAccount6
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OBAccount6Account[] OBAccount6Account { get; set; }
		
		/// <summary>
		/// A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Specifies the sub type of account (product family group).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBAccount4AccountSubType AccountSubType { get; set; }
		
		/// <summary>
		/// Specifies the type of account (personal or business).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBAccount4AccountType AccountType { get; set; }
		
		/// <summary>
		/// Identification of the currency in which the account is held. 
		///Usage: Currency should only be used in case one and the same account number covers several currencies
		///and the initiating party needs to identify which currency needs to be used for settlement on the account.
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
		
		/// <summary>
		/// Specifies the description of the account type.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Description { get; set; }
		
		/// <summary>
		/// Maturity date of the account.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> MaturityDate { get; set; }
		
		/// <summary>
		/// The nickname of the account, assigned by the account owner in order to provide an additional means of identification of the account.
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Nickname { get; set; }
		
		/// <summary>
		/// Date on which the account and related basic services are effectively operational for the account owner.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> OpeningDate { get; set; }
		
		/// <summary>
		/// Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBranchAndFinancialInstitutionIdentification5_0 Servicer { get; set; }
		
		/// <summary>
		/// Specifies the status of account resource in code form.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBAccount4Status Status { get; set; }
		
		/// <summary>
		/// Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StatusUpdateDateTime { get; set; }
		
		/// <summary>
		/// Specifies the switch status for the account, in a coded form.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SwitchStatus { get; set; }
	}
	
	public class OBAccount6Account
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	/// <summary>
	/// Unambiguous identification of the account to which credit and debit entries are made.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBAccount6Basic
	{
		
		/// <summary>
		/// A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Specifies the sub type of account (product family group).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBAccount4AccountSubType AccountSubType { get; set; }
		
		/// <summary>
		/// Specifies the type of account (personal or business).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBAccount4AccountType AccountType { get; set; }
		
		/// <summary>
		/// Identification of the currency in which the account is held. 
		///Usage: Currency should only be used in case one and the same account number covers several currencies
		///and the initiating party needs to identify which currency needs to be used for settlement on the account.
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
		
		/// <summary>
		/// Specifies the description of the account type.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Description { get; set; }
		
		/// <summary>
		/// Maturity date of the account.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> MaturityDate { get; set; }
		
		/// <summary>
		/// The nickname of the account, assigned by the account owner in order to provide an additional means of identification of the account.
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Nickname { get; set; }
		
		/// <summary>
		/// Date on which the account and related basic services are effectively operational for the account owner.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> OpeningDate { get; set; }
		
		/// <summary>
		/// Specifies the status of account resource in code form.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBAccount4Status Status { get; set; }
		
		/// <summary>
		/// Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StatusUpdateDateTime { get; set; }
		
		/// <summary>
		/// Specifies the switch status for the account, in a coded form.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SwitchStatus { get; set; }
	}
	
	/// <summary>
	/// Unambiguous identification of the account to which credit and debit entries are made.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBAccount6Detail
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBAccount6DetailAccount[] OBAccount6DetailAccount { get; set; }
		
		/// <summary>
		/// A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Specifies the sub type of account (product family group).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBAccount4AccountSubType AccountSubType { get; set; }
		
		/// <summary>
		/// Specifies the type of account (personal or business).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBAccount4AccountType AccountType { get; set; }
		
		/// <summary>
		/// Identification of the currency in which the account is held. 
		///Usage: Currency should only be used in case one and the same account number covers several currencies
		///and the initiating party needs to identify which currency needs to be used for settlement on the account.
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
		
		/// <summary>
		/// Specifies the description of the account type.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Description { get; set; }
		
		/// <summary>
		/// Maturity date of the account.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> MaturityDate { get; set; }
		
		/// <summary>
		/// The nickname of the account, assigned by the account owner in order to provide an additional means of identification of the account.
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Nickname { get; set; }
		
		/// <summary>
		/// Date on which the account and related basic services are effectively operational for the account owner.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> OpeningDate { get; set; }
		
		/// <summary>
		/// Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBranchAndFinancialInstitutionIdentification5_0 Servicer { get; set; }
		
		/// <summary>
		/// Specifies the status of account resource in code form.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBAccount4Status Status { get; set; }
		
		/// <summary>
		/// Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StatusUpdateDateTime { get; set; }
		
		/// <summary>
		/// Specifies the switch status for the account, in a coded form.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SwitchStatus { get; set; }
	}
	
	public class OBAccount6DetailAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	/// <summary>
	/// Specifies the status of account resource in code form.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBAccountStatus1Code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ProForma = 4,
	}
	
	/// <summary>
	/// The amount of the most recent direct debit collection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBActiveOrHistoricCurrencyAndAmount_0
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	/// <summary>
	/// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
	///Usage: This amount has to be transported unchanged through the transaction chain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBActiveOrHistoricCurrencyAndAmount_1
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	/// <summary>
	/// Transaction charges to be paid by the charge bearer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBActiveOrHistoricCurrencyAndAmount_10
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	/// <summary>
	/// The amount of the last (most recent) Standing Order instruction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBActiveOrHistoricCurrencyAndAmount_11
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	/// <summary>
	/// The amount of the first Standing Order
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBActiveOrHistoricCurrencyAndAmount_2
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	/// <summary>
	/// The amount of the next Standing Order.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBActiveOrHistoricCurrencyAndAmount_3
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	/// <summary>
	/// The amount of the final Standing Order
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBActiveOrHistoricCurrencyAndAmount_4
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	/// <summary>
	/// Amount of money associated with the statement benefit type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBActiveOrHistoricCurrencyAndAmount_5
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	/// <summary>
	/// Amount of money associated with the statement fee type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBActiveOrHistoricCurrencyAndAmount_6
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	/// <summary>
	/// Amount of money associated with the statement interest amount type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBActiveOrHistoricCurrencyAndAmount_7
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	/// <summary>
	/// Amount of money associated with the amount type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBActiveOrHistoricCurrencyAndAmount_8
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	/// <summary>
	/// Amount of money in the cash transaction entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBActiveOrHistoricCurrencyAndAmount_9
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	/// <summary>
	/// Identifies the nature of the postal address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBAddressTypeCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Business = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Correspondence = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeliveryTo = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MailTo = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POBox = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Postal = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Residential = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Statement = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBBCAData1
	{
		
		/// <summary>
		/// Details about the interest that may be payable to the BCA account holders
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1CreditInterest CreditInterest { get; set; }
		
		/// <summary>
		/// Contains details of fees and charges which are not associated with either Overdraft or features/benefits
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesCharges[] OBBCAData1OtherFeesCharges { get; set; }
		
		/// <summary>
		/// Borrowing details
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1Overdraft Overdraft { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1ProductDetails ProductDetails { get; set; }
	}
	
	public class OBBCAData1CreditInterest
	{
		
		/// <summary>
		/// The group of tiers or bands for which credit interest can be applied.
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBBCAData1CreditInterestTierBandSet[] OBBCAData1CreditInterestTierBandSet { get; set; }
	}
	
	public class OBBCAData1CreditInterestTierBandSet
	{
		
		/// <summary>
		/// Methods of calculating interest
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBBCAData1CreditInterestTierBandSetCalculationMethod> CalculationMethod { get; set; }
		
		/// <summary>
		/// Describes whether accrued interest is payable only to the BCA or to another bank account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1CreditInterestTierBandSetDestination Destination { get; set; }
		
		/// <summary>
		/// Optional additional notes to supplement the Tier Band Set details
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Tier Band Details
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBBCAData1CreditInterestTierBandSetTierBand[] OBBCAData1CreditInterestTierBandSetTierBand { get; set; }
		
		/// <summary>
		/// The methodology of how credit interest is paid/applied. It can be:-
		///
		///1. Banded
		///Interest rates are banded. i.e. Increasing rate on whole balance as balance increases.
		///
		///2. Tiered
		///Interest rates are tiered. i.e. increasing rate for each tier as balance increases, but interest paid on tier fixed for that tier and not on whole balance.
		///
		///3. Whole
		///The same interest rate is applied irrespective of the BCA balance
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1CreditInterestTierBandSetTierBandDepositInterestAppliedCoverage TierBandMethod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBBCAData1CreditInterestTierBandSetCalculationMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Compound = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SimpleInterest = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBBCAData1CreditInterestTierBandSetDestination
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PayAway = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SelfCredit = 1,
	}
	
	public class OBBCAData1CreditInterestTierBandSetTierBand
	{
		
		/// <summary>
		/// The annual equivalent rate (AER) is interest that is calculated under the assumption that any interest paid is combined with the original balance and the next interest payment will be based on the slightly higher account balance. Overall, this means that interest can be compounded several times in a year depending on the number of times that interest payments are made. 
		///
		///Read more: Annual Equivalent Rate (AER) http://www.investopedia.com/terms/a/aer.asp#ixzz4gfR7IO1A
		/// Required
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string AER { get; set; }
		
		/// <summary>
		/// How often is interest applied to the BCA for this tier/band i.e. how often the financial institution pays accumulated interest to the customer's BCA.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1CreditInterestTierBandSetTierBandApplicationFrequency ApplicationFrequency { get; set; }
		
		/// <summary>
		/// Bank Interest for the BCA product
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string BankInterestRate { get; set; }
		
		/// <summary>
		/// Interest rate types, other than AER, which financial institutions may use to describe the annual interest rate payable to the BCA.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBBCAData1CreditInterestTierBandSetTierBandBankInterestRateType> BankInterestRateType { get; set; }
		
		/// <summary>
		/// How often is credit interest calculated for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1CreditInterestTierBandSetTierBandApplicationFrequency CalculationFrequency { get; set; }
		
		/// <summary>
		/// Amount on which Interest applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBBCAData1CreditInterestTierBandSetTierBandDepositInterestAppliedCoverage> DepositInterestAppliedCoverage { get; set; }
		
		/// <summary>
		/// Type of interest rate, Fixed or Variable
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1CreditInterestTierBandSetTierBandFixedVariableInterestRateType FixedVariableInterestRateType { get; set; }
		
		/// <summary>
		/// Unique and unambiguous identification of a  Tier Band for a BCA.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Optional additional notes to supplement the Tier Band details
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Other application frequencies that are not available in the standard code list
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1CreditInterestTierBandSetTierBandOtherApplicationFrequency OtherApplicationFrequency { get; set; }
		
		/// <summary>
		/// Other interest rate types which are not available in the standard code list
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1CreditInterestTierBandSetTierBandOtherBankInterestType OtherBankInterestType { get; set; }
		
		/// <summary>
		/// Other calculation frequency which is not available in the standard code set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1CreditInterestTierBandSetTierBandOtherCalculationFrequency OtherCalculationFrequency { get; set; }
		
		/// <summary>
		/// Maximum deposit value for which the credit interest tier applies.
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string TierValueMaximum { get; set; }
		
		/// <summary>
		/// Minimum deposit value for which the credit interest tier applies.
		/// Required
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string TierValueMinimum { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBBCAData1CreditInterestTierBandSetTierBandApplicationFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Daily = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HalfYearly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Monthly = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Quarterly = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PerStatementDate = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Weekly = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Yearly = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBBCAData1CreditInterestTierBandSetTierBandBankInterestRateType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gross = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBBCAData1CreditInterestTierBandSetTierBandDepositInterestAppliedCoverage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Banded = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tiered = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Whole = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBBCAData1CreditInterestTierBandSetTierBandFixedVariableInterestRateType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Fixed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Variable = 1,
	}
	
	public class OBBCAData1CreditInterestTierBandSetTierBandOtherApplicationFrequency
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBBCAData1CreditInterestTierBandSetTierBandOtherBankInterestType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBBCAData1CreditInterestTierBandSetTierBandOtherCalculationFrequency
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBBCAData1OtherFeesCharges
	{
		
		/// <summary>
		/// Details about any caps (maximum charges) that apply to a particular or group of fee/charge
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesFeeChargeCap[] OBBCAData1OtherFeesChargesFeeChargeCap { get; set; }
		
		/// <summary>
		/// Other fees/charges details
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBBCAData1OtherFeesChargesFeeChargeDetail[] OBBCAData1OtherFeesChargesFeeChargeDetail { get; set; }
		
		/// <summary>
		/// Other tariff type which is not in the standard list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesOtherTariffType OtherTariffType { get; set; }
		
		/// <summary>
		/// Name of the tariff
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string TariffName { get; set; }
		
		/// <summary>
		/// TariffType which defines the fee and charges.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBBCAData1OtherFeesChargesTariffType> TariffType { get; set; }
	}
	
	public class OBBCAData1OtherFeesChargesFeeChargeCap
	{
		
		/// <summary>
		/// Period e.g. day, week, month etc. for which the fee/charge is capped
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBBCAData1OtherFeesChargesFeeChargeCapCappingPeriod> CappingPeriod { get; set; }
		
		/// <summary>
		/// Cap amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string FeeCapAmount { get; set; }
		
		/// <summary>
		/// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> FeeCapOccurrence { get; set; }
		
		/// <summary>
		/// Fee/charge type which is being capped
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] FeeType { get; set; }
		
		/// <summary>
		/// Min Max type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesFeeChargeCapMinMaxType MinMaxType { get; set; }
		
		/// <summary>
		/// Free text for adding  extra details for fee charge cap
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Other fee type code which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesFeeChargeCapOtherFeeType[] OBBCAData1OtherFeesChargesFeeChargeCapOtherFeeType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBBCAData1OtherFeesChargesFeeChargeCapCappingPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Day = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Half Year")]
		Half_Year = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Month = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Quarter = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Week = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Year = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBBCAData1OtherFeesChargesFeeChargeCapMinMaxType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Minimum = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Maximum = 1,
	}
	
	public class OBBCAData1OtherFeesChargesFeeChargeCapOtherFeeType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBBCAData1OtherFeesChargesFeeChargeDetail
	{
		
		/// <summary>
		/// How frequently the fee/charge is applied to the account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesFeeChargeDetailApplicationFrequency ApplicationFrequency { get; set; }
		
		/// <summary>
		/// How frequently the fee/charge is calculated
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesFeeChargeDetailApplicationFrequency CalculationFrequency { get; set; }
		
		/// <summary>
		/// Fee Amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string FeeAmount { get; set; }
		
		/// <summary>
		/// Range or amounts or rates for which the fee/charge applies
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesFeeChargeDetailFeeApplicableRange FeeApplicableRange { get; set; }
		
		/// <summary>
		/// Categorisation of fees and charges into standard categories.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesFeeChargeDetailFeeCategory FeeCategory { get; set; }
		
		/// <summary>
		/// Details about any caps (maximum charges) that apply to a particular or group of fee/charge
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesFeeChargeDetailFeeChargeCap[] OBBCAData1OtherFeesChargesFeeChargeDetailFeeChargeCap { get; set; }
		
		/// <summary>
		/// Rate charged for Fee/Charge (where it is charged in terms of a rate rather than an amount)
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string FeeRate { get; set; }
		
		/// <summary>
		/// Rate type for Fee/Charge (where it is charged in terms of a rate rather than an amount)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1CreditInterestTierBandSetTierBandBankInterestRateType FeeRateType { get; set; }
		
		/// <summary>
		/// Fee/Charge Type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesFeeChargeDetailFeeType FeeType { get; set; }
		
		/// <summary>
		/// Fee/charge which is usually negotiable rather than a fixed amount
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> NegotiableIndicator { get; set; }
		
		/// <summary>
		/// Optional additional notes to supplement the fee/charge details.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Other application frequencies not covered in the standard code list
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesFeeChargeDetailOtherApplicationFrequency OtherApplicationFrequency { get; set; }
		
		/// <summary>
		/// Other calculation frequency which is not available in standard code set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesFeeChargeDetailOtherCalculationFrequency OtherCalculationFrequency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesFeeChargeDetailOtherFeeCategoryType OtherFeeCategoryType { get; set; }
		
		/// <summary>
		/// Other fee rate type which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesFeeChargeDetailOtherFeeRateType OtherFeeRateType { get; set; }
		
		/// <summary>
		/// Other Fee/charge type which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesFeeChargeDetailOtherFeeType OtherFeeType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBBCAData1OtherFeesChargesFeeChargeDetailApplicationFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OnClosing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OnOpening = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChargingPeriod = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Daily = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PerItem = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Monthly = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OnAnniversary = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PerHundredPounds = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PerHour = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PerOccurrence = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PerSheet = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PerTransaction = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PerTransactionAmount = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PerTransactionPercentage = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Quarterly = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SixMonthly = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StatementMonthly = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Weekly = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Yearly = 19,
	}
	
	public class OBBCAData1OtherFeesChargesFeeChargeDetailFeeApplicableRange
	{
		
		/// <summary>
		/// Maximum Amount on which fee is applicable (where it is expressed as an amount)
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string MaximumAmount { get; set; }
		
		/// <summary>
		/// Maximum rate on which fee/charge is applicable(where it is expressed as an rate)
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string MaximumRate { get; set; }
		
		/// <summary>
		/// Minimum Amount on which fee/charge is applicable (where it is expressed as an amount)
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string MinimumAmount { get; set; }
		
		/// <summary>
		/// Minimum rate on which fee/charge is applicable(where it is expressed as an rate)
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string MinimumRate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBBCAData1OtherFeesChargesFeeChargeDetailFeeCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Servicing = 1,
	}
	
	public class OBBCAData1OtherFeesChargesFeeChargeDetailFeeChargeCap
	{
		
		/// <summary>
		/// Period e.g. day, week, month etc. for which the fee/charge is capped
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBBCAData1OtherFeesChargesFeeChargeDetailFeeChargeCapCappingPeriod> CappingPeriod { get; set; }
		
		/// <summary>
		/// Cap amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string FeeCapAmount { get; set; }
		
		/// <summary>
		/// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> FeeCapOccurrence { get; set; }
		
		/// <summary>
		/// Fee/charge type which is being capped
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] FeeType { get; set; }
		
		/// <summary>
		/// Min Max type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesFeeChargeCapMinMaxType MinMaxType { get; set; }
		
		/// <summary>
		/// Free text for adding  extra details for fee charge cap
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Other fee type code which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesFeeChargeDetailFeeChargeCapOtherFeeType[] OBBCAData1OtherFeesChargesFeeChargeDetailFeeChargeCapOtherFeeType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBBCAData1OtherFeesChargesFeeChargeDetailFeeChargeCapCappingPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Day = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Half Year")]
		Half_Year = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Month = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Quarter = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Week = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Year = 5,
	}
	
	public class OBBCAData1OtherFeesChargesFeeChargeDetailFeeChargeCapOtherFeeType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBBCAData1OtherFeesChargesFeeChargeDetailFeeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceCAccountFee = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceCAccountFeeMonthly = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceCAccountFeeQuarterly = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceCFixedTariff = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceCBusiDepAccBreakage = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceCMinimumMonthlyFee = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceCOther = 7,
	}
	
	public class OBBCAData1OtherFeesChargesFeeChargeDetailOtherApplicationFrequency
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBBCAData1OtherFeesChargesFeeChargeDetailOtherCalculationFrequency
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBBCAData1OtherFeesChargesFeeChargeDetailOtherFeeCategoryType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBBCAData1OtherFeesChargesFeeChargeDetailOtherFeeRateType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBBCAData1OtherFeesChargesFeeChargeDetailOtherFeeType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Categorisation of fees and charges into standard categories.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesFeeChargeDetailFeeCategory FeeCategory { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBBCAData1OtherFeesChargesOtherTariffType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBBCAData1OtherFeesChargesTariffType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Electronic = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mixed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 2,
	}
	
	public class OBBCAData1Overdraft
	{
		
		/// <summary>
		/// Associated Notes about the overdraft rates
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Tier band set details
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBBCAData1OverdraftOverdraftTierBandSet[] OBBCAData1OverdraftOverdraftTierBandSet { get; set; }
	}
	
	public class OBBCAData1OverdraftOverdraftTierBandSet
	{
		
		/// <summary>
		/// Indicates if the Overdraft is authorised (Y) or unauthorised (N)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AuthorisedIndicator { get; set; }
		
		/// <summary>
		/// When a customer exceeds their credit limit, a financial institution will not charge the customer unauthorised overdraft charges if they do not exceed by more than the buffer amount. Note: Authorised overdraft charges may still apply.
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string BufferAmount { get; set; }
		
		/// <summary>
		/// Unique and unambiguous identification of a  Tier Band for a overdraft product.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Optional additional notes to supplement the overdraft Tier Band Set details
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Overdraft fees and charges details
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesCharges[] OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesCharges { get; set; }
		
		/// <summary>
		/// Provides overdraft details for a specific tier or band
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBand[] OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBand { get; set; }
		
		/// <summary>
		/// An overdraft can either be 'committed' which means that the facility cannot be withdrawn without reasonable notification before it's agreed end date, or 'on demand' which means that the financial institution can demand repayment at any point in time.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBBCAData1OverdraftOverdraftTierBandSetOverdraftType> OverdraftType { get; set; }
		
		/// <summary>
		/// The methodology of how overdraft is charged. It can be:
		///'Whole'  Where the same charge/rate is applied to the entirety of the overdraft balance (where charges are applicable). 
		///'Tiered' Where different charges/rates are applied dependent on overdraft maximum and minimum balance amount tiers defined by the lending financial organisation
		///'Banded' Where different charges/rates are applied dependent on overdraft maximum and minimum balance amount bands defined by a government organisation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1CreditInterestTierBandSetTierBandDepositInterestAppliedCoverage TierBandMethod { get; set; }
	}
	
	public class OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesCharges
	{
		
		/// <summary>
		/// Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeCap[] OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeCap { get; set; }
		
		/// <summary>
		/// Details about the fees/charges
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetail[] OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetail { get; set; }
	}
	
	public class OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeCap
	{
		
		/// <summary>
		/// Period e.g. day, week, month etc. for which the fee/charge is capped
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeCapCappingPeriod> CappingPeriod { get; set; }
		
		/// <summary>
		/// Cap amount charged for a fee/charge
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string FeeCapAmount { get; set; }
		
		/// <summary>
		/// Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it’s part of a government scheme, or whether the rate may vary dependent on the applicant’s circumstances.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> FeeCapOccurrence { get; set; }
		
		/// <summary>
		/// Fee/charge type which is being capped
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] FeeType { get; set; }
		
		/// <summary>
		/// Min Max type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesFeeChargeCapMinMaxType MinMaxType { get; set; }
		
		/// <summary>
		/// Notes related to Overdraft fee charge cap
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Other fee type code which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeCapOtherFeeType[] OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeCapOtherFeeType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeCapCappingPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Day = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Half Year")]
		Half_Year = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Month = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Quarter = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Week = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Year = 5,
	}
	
	public class OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeCapOtherFeeType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetail
	{
		
		/// <summary>
		/// Frequency at which the overdraft charge is applied to the account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesFeeChargeDetailApplicationFrequency ApplicationFrequency { get; set; }
		
		/// <summary>
		/// How often is the overdraft fee/charge calculated for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesFeeChargeDetailApplicationFrequency CalculationFrequency { get; set; }
		
		/// <summary>
		/// Amount charged for an overdraft fee/charge (where it is charged in terms of an amount rather than a rate)
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string FeeAmount { get; set; }
		
		/// <summary>
		/// Rate charged for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string FeeRate { get; set; }
		
		/// <summary>
		/// Rate type for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1CreditInterestTierBandSetTierBandBankInterestRateType FeeRateType { get; set; }
		
		/// <summary>
		/// Overdraft fee type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailFeeType FeeType { get; set; }
		
		/// <summary>
		/// Every additional tranche of an overdraft balance to which an overdraft fee is applied
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string IncrementalBorrowingAmount { get; set; }
		
		/// <summary>
		/// Indicates whether fee and charges are negotiable
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> NegotiableIndicator { get; set; }
		
		/// <summary>
		/// Free text for capturing any other info related to Overdraft Fees Charge Details
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Other application frequencies that are not available in the standard code list
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOtherApplicationFrequency OtherApplicationFrequency { get; set; }
		
		/// <summary>
		/// Other calculation frequency which is not available in the standard code set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOtherCalculationFrequency OtherCalculationFrequency { get; set; }
		
		/// <summary>
		/// Other fee rate type code which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOtherFeeRateType OtherFeeRateType { get; set; }
		
		/// <summary>
		/// Other Fee type which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOtherFeeType OtherFeeType { get; set; }
		
		/// <summary>
		/// Indicates if the fee/charge is already covered by an 'Overdraft Control' fee or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OverdraftControlIndicator { get; set; }
		
		/// <summary>
		/// Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCap[] OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCap { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailFeeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ArrangedOverdraft = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AnnualReview = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EmergencyBorrowing = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BorrowingItem = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OverdraftRenewal = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OverdraftSetup = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Surcharge = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TempOverdraft = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnauthorisedBorrowing = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnauthorisedPaidTrans = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnauthorisedUnpaidTrans = 11,
	}
	
	public class OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOtherApplicationFrequency
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOtherCalculationFrequency
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOtherFeeRateType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOtherFeeType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCap
	{
		
		/// <summary>
		/// Period e.g. day, week, month etc. for which the fee/charge is capped
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCapCappingPeriod> CappingPeriod { get; set; }
		
		/// <summary>
		/// Cap amount charged for a fee/charge
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string FeeCapAmount { get; set; }
		
		/// <summary>
		/// Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it’s part of a government scheme, or whether the rate may vary dependent on the applicant’s circumstances.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> FeeCapOccurrence { get; set; }
		
		/// <summary>
		/// Fee/charge type which is being capped
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailFeeType[] FeeType { get; set; }
		
		/// <summary>
		/// Min Max type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesFeeChargeCapMinMaxType MinMaxType { get; set; }
		
		/// <summary>
		/// Notes related to Overdraft fee charge cap
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Other fee type code which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCapOtherFeeType[] OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCapOtherFeeType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCapCappingPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Day = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Half Year")]
		Half_Year = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Month = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Quarter = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Week = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Year = 5,
	}
	
	public class OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCapOtherFeeType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBand
	{
		
		/// <summary>
		/// Specifies the maximum length of a band for a fixed overdraft agreement
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> AgreementLengthMax { get; set; }
		
		/// <summary>
		/// Specifies the minimum length of a band for a fixed overdraft agreement
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> AgreementLengthMin { get; set; }
		
		/// <summary>
		/// Specifies the period of a fixed length overdraft agreement
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBandAgreementPeriod> AgreementPeriod { get; set; }
		
		/// <summary>
		/// Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it’s part of a government scheme, or whether the rate may vary dependent on the applicant’s circumstances.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> BankGuaranteedIndicator { get; set; }
		
		/// <summary>
		/// EAR means Effective Annual Rate and/or Equivalent Annual Rate (frequently
		///used interchangeably), being the actual annual interest rate of an Overdraft.
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string EAR { get; set; }
		
		/// <summary>
		/// Unique and unambiguous identification of a  Tier Band for a overdraft.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Optional additional notes to supplement the Tier/band details
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Overdraft fees and charges
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesCharges[] OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesCharges { get; set; }
		
		/// <summary>
		/// Refers to which interest rate is applied when interests are tiered. For example, if an overdraft balance is £2k and the interest tiers are:- 0-£500 0.1%, 500-1000 0.2%, 1000-10000 0.5%, then the applicable interest rate could either be 0.5% of the entire balance (since the account balance sits in the top interest tier) or (0.1%*500)+(0.2%*500)+(0.5%*1000). In the 1st situation, we say the interest is applied to the ‘Whole’ of the account balance,  and in the 2nd that it is ‘Tiered’.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1CreditInterestTierBandSetTierBandDepositInterestAppliedCoverage OverdraftInterestChargingCoverage { get; set; }
		
		/// <summary>
		/// An annual percentage rate (APR) is the annual rate charged for borrowing or earned through an investment. APR is expressed as a percentage that represents the actual yearly cost of funds over the term of a loan. This includes any fees or additional costs associated with the transaction but does not take compounding into account.
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string RepresentativeAPR { get; set; }
		
		/// <summary>
		/// Maximum value of Overdraft Tier/Band
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string TierValueMax { get; set; }
		
		/// <summary>
		/// Minimum value of Overdraft Tier/Band
		/// Required
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string TierValueMin { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBandAgreementPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Day = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Half Year")]
		Half_Year = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Month = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Quarter = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Week = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Year = 5,
	}
	
	public class OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesCharges
	{
		
		/// <summary>
		/// Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeCap[] OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeCap { get; set; }
		
		/// <summary>
		/// Details about the fees/charges
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetail[] OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetail { get; set; }
	}
	
	public class OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeCap
	{
		
		/// <summary>
		/// Period e.g. day, week, month etc. for which the fee/charge is capped
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeCapCappingPeriod> CappingPeriod { get; set; }
		
		/// <summary>
		/// Cap amount charged for a fee/charge
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string FeeCapAmount { get; set; }
		
		/// <summary>
		/// Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it’s part of a government scheme, or whether the rate may vary dependent on the applicant’s circumstances.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> FeeCapOccurrence { get; set; }
		
		/// <summary>
		/// Fee/charge type which is being capped
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailFeeType[] FeeType { get; set; }
		
		/// <summary>
		/// Min Max type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesFeeChargeCapMinMaxType MinMaxType { get; set; }
		
		/// <summary>
		/// Notes related to Overdraft fee charge cap
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Other fee type code which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeCapOtherFeeType[] OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeCapOtherFeeType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeCapCappingPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Day = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Half Year")]
		Half_Year = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Month = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Quarter = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Week = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Year = 5,
	}
	
	public class OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeCapOtherFeeType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetail
	{
		
		/// <summary>
		/// Frequency at which the overdraft charge is applied to the account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesFeeChargeDetailApplicationFrequency ApplicationFrequency { get; set; }
		
		/// <summary>
		/// How often is the overdraft fee/charge calculated for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesFeeChargeDetailApplicationFrequency CalculationFrequency { get; set; }
		
		/// <summary>
		/// Amount charged for an overdraft fee/charge (where it is charged in terms of an amount rather than a rate)
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string FeeAmount { get; set; }
		
		/// <summary>
		/// Rate charged for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string FeeRate { get; set; }
		
		/// <summary>
		/// Rate type for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1CreditInterestTierBandSetTierBandBankInterestRateType FeeRateType { get; set; }
		
		/// <summary>
		/// Overdraft fee type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailFeeType FeeType { get; set; }
		
		/// <summary>
		/// Every additional tranche of an overdraft balance to which an overdraft fee is applied
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string IncrementalBorrowingAmount { get; set; }
		
		/// <summary>
		/// Indicates whether fee and charges are negotiable
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> NegotiableIndicator { get; set; }
		
		/// <summary>
		/// Free text for capturing any other info related to Overdraft Fees Charge Details
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Other application frequencies that are not available in the standard code list
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOtherApplicationFrequency OtherApplicationFrequency { get; set; }
		
		/// <summary>
		/// Other calculation frequency which is not available in the standard code set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOtherCalculationFrequency OtherCalculationFrequency { get; set; }
		
		/// <summary>
		/// Other fee rate type code which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOtherFeeRateType OtherFeeRateType { get; set; }
		
		/// <summary>
		/// Other Fee type which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOtherFeeType OtherFeeType { get; set; }
		
		/// <summary>
		/// Indicates if the fee/charge is already covered by an 'Overdraft Control' fee or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OverdraftControlIndicator { get; set; }
		
		/// <summary>
		/// Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCap[] OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCap { get; set; }
	}
	
	public class OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOtherApplicationFrequency
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOtherCalculationFrequency
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOtherFeeRateType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOtherFeeType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCap
	{
		
		/// <summary>
		/// Period e.g. day, week, month etc. for which the fee/charge is capped
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCapCappingPeriod> CappingPeriod { get; set; }
		
		/// <summary>
		/// Cap amount charged for a fee/charge
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string FeeCapAmount { get; set; }
		
		/// <summary>
		/// Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it’s part of a government scheme, or whether the rate may vary dependent on the applicant’s circumstances.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> FeeCapOccurrence { get; set; }
		
		/// <summary>
		/// Fee/charge type which is being capped
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBBCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailFeeType[] FeeType { get; set; }
		
		/// <summary>
		/// Min Max type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesFeeChargeCapMinMaxType MinMaxType { get; set; }
		
		/// <summary>
		/// Notes related to Overdraft fee charge cap
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Other fee type code which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCapOtherFeeType[] OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCapOtherFeeType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCapCappingPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Day = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Half Year")]
		Half_Year = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Month = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Quarter = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Week = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Year = 5,
	}
	
	public class OBBCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCapOtherFeeType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBBCAData1OverdraftOverdraftTierBandSetOverdraftType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Committed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OnDemand = 1,
	}
	
	public class OBBCAData1ProductDetails
	{
		
		/// <summary>
		/// The length/duration of the fee free period
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> FeeFreeLength { get; set; }
		
		/// <summary>
		/// The unit of period (days, weeks, months etc.) of the promotional length
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBBCAData1ProductDetailsFeeFreeLengthPeriod> FeeFreeLengthPeriod { get; set; }
		
		/// <summary>
		/// Optional additional notes to supplement the Core product details
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.
		///
		///Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd 
		///With respect to BCA products, they are segmented in relation to different markets that they wish to focus on. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Segment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBBCAData1ProductDetailsFeeFreeLengthPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Day = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Half Year")]
		Half_Year = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Month = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Quarter = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Week = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Year = 5,
	}
	
	/// <summary>
	/// Balance type, in a coded form.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBBalanceType1Code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ClosingAvailable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ClosingBooked = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ClosingCleared = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Expected = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ForwardAvailable = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Information = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InterimAvailable = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InterimBooked = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InterimCleared = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OpeningAvailable = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OpeningBooked = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OpeningCleared = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PreviouslyClosedBooked = 12,
	}
	
	/// <summary>
	/// Set of elements used to fully identify the type of underlying transaction resulting in an entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBBankTransactionCodeStructure1
	{
		
		/// <summary>
		/// Specifies the family within a domain.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Specifies the sub-product family within a specific family.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SubCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBBeneficiary5
	{
		
		/// <summary>
		/// A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// A unique and immutable identifier used to identify the beneficiary resource. This identifier has no meaning to the account owner.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string BeneficiaryId { get; set; }
		
		/// <summary>
		/// Specifies the Beneficiary Type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBBeneficiary5BeneficiaryType> BeneficiaryType { get; set; }
		
		/// <summary>
		/// Provides the details to identify the beneficiary account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBCashAccount5_0 CreditorAccount { get; set; }
		
		/// <summary>
		/// Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
		///This is the servicer of the beneficiary account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBranchAndFinancialInstitutionIdentification6_0 CreditorAgent { get; set; }
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBBeneficiary5BeneficiaryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Trusted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ordinary = 1,
	}
	
	/// <summary>
	/// Provides the details to identify the beneficiary account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBCashAccount5_0
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	/// <summary>
	/// Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
	///This is the servicer of the beneficiary account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBBranchAndFinancialInstitutionIdentification6_0
	{
		
		/// <summary>
		/// Unique and unambiguous identification of the servicing institution.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Name by which an agent is known and which is usually used to identify that agent.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Name { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 PostalAddress { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
	}
	
	/// <summary>
	/// Information that locates and identifies a specific address, as defined by postal services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBPostalAddress6
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(7)]
		public string[] AddressLine { get; set; }
		
		/// <summary>
		/// Identifies the nature of the postal address.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBAddressTypeCode AddressType { get; set; }
		
		/// <summary>
		/// Number that identifies the position of a building on a street.
		/// Min length: 1
		/// Max length: 16
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public string BuildingNumber { get; set; }
		
		/// <summary>
		/// Nation with its own government.
		/// Pattern: ^[A-Z]{2,2}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{2,2}$")]
		public string Country { get; set; }
		
		/// <summary>
		/// Identifies a subdivision of a country such as state, region, county.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string CountrySubDivision { get; set; }
		
		/// <summary>
		/// Identification of a division of a large organisation or building.
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Department { get; set; }
		
		/// <summary>
		/// Identifier consisting of a group of letters and/or numbers that is added to a postal address to assist the sorting of mail.
		/// Min length: 1
		/// Max length: 16
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public string PostCode { get; set; }
		
		/// <summary>
		/// Name of a street or thoroughfare.
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string StreetName { get; set; }
		
		/// <summary>
		/// Identification of a sub-division of a large organisation or building.
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string SubDepartment { get; set; }
		
		/// <summary>
		/// Name of a built-up area, with defined boundaries, and a local government.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string TownName { get; set; }
	}
	
	/// <summary>
	/// Additional information that can not be captured in the structured fields and/or any other specific block.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBSupplementaryData1
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBBeneficiary5Basic
	{
		
		/// <summary>
		/// A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// A unique and immutable identifier used to identify the beneficiary resource. This identifier has no meaning to the account owner.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string BeneficiaryId { get; set; }
		
		/// <summary>
		/// Specifies the Beneficiary Type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBeneficiary5BeneficiaryType BeneficiaryType { get; set; }
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBBeneficiary5Detail
	{
		
		/// <summary>
		/// A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// A unique and immutable identifier used to identify the beneficiary resource. This identifier has no meaning to the account owner.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string BeneficiaryId { get; set; }
		
		/// <summary>
		/// Specifies the Beneficiary Type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBeneficiary5BeneficiaryType BeneficiaryType { get; set; }
		
		/// <summary>
		/// Provides the details to identify the beneficiary account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBCashAccount5_0 CreditorAccount { get; set; }
		
		/// <summary>
		/// Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
		///This is the servicer of the beneficiary account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBranchAndFinancialInstitutionIdentification6_0 CreditorAgent { get; set; }
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	/// <summary>
	/// Specifies the Beneficiary Type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBBeneficiaryType1Code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Trusted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ordinary = 1,
	}
	
	/// <summary>
	/// Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
	///This is the servicer of the beneficiary account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBBranchAndFinancialInstitutionIdentification5_1
	{
		
		/// <summary>
		/// Unique and unambiguous identification of the servicing institution.
		/// Required
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
	}
	
	/// <summary>
	/// Financial institution servicing an account for the creditor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBBranchAndFinancialInstitutionIdentification6_1
	{
		
		/// <summary>
		/// Unique and unambiguous identification of a financial institution or a branch of a financial institution.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Name by which an agent is known and which is usually used to identify that agent.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Name { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 PostalAddress { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
	}
	
	/// <summary>
	/// Financial institution servicing an account for the debtor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBBranchAndFinancialInstitutionIdentification6_2
	{
		
		/// <summary>
		/// Unique and unambiguous identification of a financial institution or a branch of a financial institution.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Name by which an agent is known and which is usually used to identify that agent.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Name { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 PostalAddress { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
	}
	
	/// <summary>
	/// Provides the details to identify the beneficiary account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBCashAccount5_1
	{
		
		/// <summary>
		/// Beneficiary account identification.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	/// <summary>
	/// Unambiguous identification of the account of the creditor, in the case of a debit transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBCashAccount6_0
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	/// <summary>
	/// Unambiguous identification of the account of the debtor, in the case of a crebit transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBCashAccount6_1
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	/// <summary>
	/// Indicates whether the amount is a credit or a debit. 
	///Usage: A zero amount is considered to be a credit amount.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBCreditDebitCode_0
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Credit = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Debit = 1,
	}
	
	/// <summary>
	/// Indicates whether the transaction is a credit or a debit entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBCreditDebitCode_1
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Credit = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Debit = 1,
	}
	
	/// <summary>
	/// Indicates whether the balance is a credit or a debit balance. 
	///Usage: A zero balance is considered to be a credit balance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBCreditDebitCode_2
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Credit = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Debit = 1,
	}
	
	/// <summary>
	/// Set of elements used to provide details on the currency exchange.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBCurrencyExchange5
	{
		
		/// <summary>
		/// Unique identification to unambiguously identify the foreign exchange contract.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string ContractIdentification { get; set; }
		
		/// <summary>
		/// Factor used to convert an amount from one currency into another. This reflects the price at which one currency was bought with another currency.
		///Usage: ExchangeRate expresses the ratio between UnitCurrency and QuotedCurrency (ExchangeRate = UnitCurrency/QuotedCurrency).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double ExchangeRate { get; set; }
		
		/// <summary>
		/// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBCurrencyExchange5InstructedAmount InstructedAmount { get; set; }
		
		/// <summary>
		/// Date and time at which an exchange rate is quoted.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> QuotationDate { get; set; }
		
		/// <summary>
		/// Currency from which an amount is to be converted in a currency conversion.
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string SourceCurrency { get; set; }
		
		/// <summary>
		/// Currency into which an amount is to be converted in a currency conversion.
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string TargetCurrency { get; set; }
		
		/// <summary>
		/// Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string UnitCurrency { get; set; }
	}
	
	public class OBCurrencyExchange5InstructedAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	/// <summary>
	/// Status of a transaction entry on the books of the account servicer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBEntryStatus1Code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Booked = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBError1
	{
		
		/// <summary>
		/// Low level textual error code, e.g., UK.OBIE.Field.Missing
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		/// <summary>
		/// A description of the error that occurred. e.g., 'A mandatory field isn't supplied' or 'RequestedExecutionDateTime must be in future'
		///OBIE doesn't standardise this field
		/// Required
		/// Min length: 1
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Message { get; set; }
		
		/// <summary>
		/// Recommended but optional reference to the JSON Path of the field with error, e.g., Data.Initiation.InstructedAmount.Currency
		/// Min length: 1
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Path { get; set; }
		
		/// <summary>
		/// URL to help remediate the problem, or provide more information, or to API Reference, or help etc
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// An array of detail error codes, and messages, and URLs to documentation to help remediation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBErrorResponse1
	{
		
		/// <summary>
		/// High level textual error code, to help categorize the errors.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Code { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBError1[] Errors { get; set; }
		
		/// <summary>
		/// A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Id { get; set; }
		
		/// <summary>
		/// Brief Error message, e.g., 'There is something wrong with the request parameters provided'
		/// Required
		/// Min length: 1
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Specifies the sub type of account (product family group).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBExternalAccountSubType1Code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChargeCard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreditCard = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CurrentAccount = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMoney = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Loan = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mortgage = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PrePaidCard = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Savings = 7,
	}
	
	/// <summary>
	/// Specifies the type of account (personal or business).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBExternalAccountType1Code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Business = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Personal = 1,
	}
	
	/// <summary>
	/// Specifies the status of the direct debit in code form.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBExternalDirectDebitStatus1Code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 1,
	}
	
	/// <summary>
	/// Party type, in a coded form.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBExternalPartyType1Code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Delegate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Joint = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sole = 2,
	}
	
	/// <summary>
	/// Specifies the scheduled payment date type requested
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBExternalScheduleType1Code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Arrival = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Execution = 1,
	}
	
	/// <summary>
	/// Specifies the status of the standing order in code form.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBExternalStandingOrderStatus1Code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 1,
	}
	
	/// <summary>
	/// Statement type, in a coded form.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBExternalStatementType1Code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AccountClosure = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AccountOpening = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Annual = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Interim = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RegularPeriodic = 4,
	}
	
	/// <summary>
	/// Details of the merchant involved in the transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBMerchantDetails1
	{
		
		/// <summary>
		/// Category code conform to ISO 18245, related to the type of services or goods the merchant provides for the transaction.
		/// Min length: 3
		/// Max length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public string MerchantCategoryCode { get; set; }
		
		/// <summary>
		/// Name by which the merchant is known.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string MerchantName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBPCAData1
	{
		
		/// <summary>
		/// Details about the interest that may be payable to the PCA account holders
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1CreditInterest CreditInterest { get; set; }
		
		/// <summary>
		/// Contains details of fees and charges which are not associated with either borrowing or features/benefits
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OtherFeesCharges OtherFeesCharges { get; set; }
		
		/// <summary>
		/// Details about Overdraft rates, fees & charges
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1Overdraft Overdraft { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1ProductDetails ProductDetails { get; set; }
	}
	
	public class OBPCAData1CreditInterest
	{
		
		/// <summary>
		/// The group of tiers or bands for which credit interest can be applied.
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBPCAData1CreditInterestTierBandSet[] OBPCAData1CreditInterestTierBandSet { get; set; }
	}
	
	public class OBPCAData1CreditInterestTierBandSet
	{
		
		/// <summary>
		/// Methods of calculating interest
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1CreditInterestTierBandSetCalculationMethod CalculationMethod { get; set; }
		
		/// <summary>
		/// Describes whether accrued interest is payable only to the PCA or to another bank account
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1CreditInterestTierBandSetDestination Destination { get; set; }
		
		/// <summary>
		/// Optional additional notes to supplement the Tier Band Set details
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Tier Band Details
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBPCAData1CreditInterestTierBandSetTierBand[] OBPCAData1CreditInterestTierBandSetTierBand { get; set; }
		
		/// <summary>
		/// The methodology of how credit interest is charged. It can be:-
		///
		///1. Banded
		///Interest rates are banded. i.e. Increasing rate on whole balance as balance increases.
		///
		///2. Tiered
		///Interest rates are tiered. i.e. increasing rate for each tier as balance increases, but interest paid on tier fixed for that tier and not on whole balance.
		///
		///3. Whole
		///The same interest rate is applied irrespective of the PCA balance
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1CreditInterestTierBandSetTierBandDepositInterestAppliedCoverage TierBandMethod { get; set; }
	}
	
	public class OBPCAData1CreditInterestTierBandSetTierBand
	{
		
		/// <summary>
		/// The annual equivalent rate (AER) is interest that is calculated under the assumption that any interest paid is combined with the original balance and the next interest payment will be based on the slightly higher account balance. Overall, this means that interest can be compounded several times in a year depending on the number of times that interest payments are made. 
		///
		///Read more: Annual Equivalent Rate (AER) http://www.investopedia.com/terms/a/aer.asp#ixzz4gfR7IO1A
		/// Required
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string AER { get; set; }
		
		/// <summary>
		/// How often is interest applied to the PCA for this tier/band i.e. how often the financial institution pays accumulated interest to the customer's PCA.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1CreditInterestTierBandSetTierBandApplicationFrequency ApplicationFrequency { get; set; }
		
		/// <summary>
		/// Bank Interest for the PCA product
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string BankInterestRate { get; set; }
		
		/// <summary>
		/// Interest rate types, other than AER, which financial institutions may use to describe the annual interest rate payable to the PCA.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBPCAData1CreditInterestTierBandSetTierBandBankInterestRateType> BankInterestRateType { get; set; }
		
		/// <summary>
		/// How often is credit interest calculated for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1CreditInterestTierBandSetTierBandApplicationFrequency CalculationFrequency { get; set; }
		
		/// <summary>
		/// Amount on which Interest applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBPCAData1CreditInterestTierBandSetTierBandDepositInterestAppliedCoverage> DepositInterestAppliedCoverage { get; set; }
		
		/// <summary>
		/// Type of interest rate, Fixed or Variable
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1CreditInterestTierBandSetTierBandFixedVariableInterestRateType FixedVariableInterestRateType { get; set; }
		
		/// <summary>
		/// Unique and unambiguous identification of a  Tier Band for a PCA.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Optional additional notes to supplement the Tier Band details
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Other application frequencies that are not available in the standard code list
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1CreditInterestTierBandSetTierBandOtherApplicationFrequency OtherApplicationFrequency { get; set; }
		
		/// <summary>
		/// Other interest rate types which are not available in the standard code list
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1CreditInterestTierBandSetTierBandOtherBankInterestType OtherBankInterestType { get; set; }
		
		/// <summary>
		/// Other calculation frequency which is not available in the standard code set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1CreditInterestTierBandSetTierBandOtherCalculationFrequency OtherCalculationFrequency { get; set; }
		
		/// <summary>
		/// Maximum deposit value for which the credit interest tier applies.
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string TierValueMaximum { get; set; }
		
		/// <summary>
		/// Minimum deposit value for which the credit interest tier applies.
		/// Required
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string TierValueMinimum { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBPCAData1CreditInterestTierBandSetTierBandApplicationFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PerAcademicTerm = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Daily = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HalfYearly = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Monthly = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Quarterly = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PerStatementDate = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Weekly = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Yearly = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBPCAData1CreditInterestTierBandSetTierBandBankInterestRateType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LinkedBaseRate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gross = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Net = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBPCAData1CreditInterestTierBandSetTierBandDepositInterestAppliedCoverage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tiered = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Whole = 1,
	}
	
	public class OBPCAData1CreditInterestTierBandSetTierBandOtherApplicationFrequency
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBPCAData1CreditInterestTierBandSetTierBandOtherBankInterestType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBPCAData1CreditInterestTierBandSetTierBandOtherCalculationFrequency
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBPCAData1OtherFeesCharges
	{
		
		/// <summary>
		/// Details about any caps (maximum charges) that apply to a particular fee/charge
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OtherFeesChargesFeeChargeCap[] OBPCAData1OtherFeesChargesFeeChargeCap { get; set; }
		
		/// <summary>
		/// Other fees/charges details
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBPCAData1OtherFeesChargesFeeChargeDetail[] OBPCAData1OtherFeesChargesFeeChargeDetail { get; set; }
	}
	
	public class OBPCAData1OtherFeesChargesFeeChargeCap
	{
		
		/// <summary>
		/// Period e.g. day, week, month etc. for which the fee/charge is capped
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBPCAData1OtherFeesChargesFeeChargeCapCappingPeriod> CappingPeriod { get; set; }
		
		/// <summary>
		/// Cap amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string FeeCapAmount { get; set; }
		
		/// <summary>
		/// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> FeeCapOccurrence { get; set; }
		
		/// <summary>
		/// Fee/charge type which is being capped
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] FeeType { get; set; }
		
		/// <summary>
		/// Indicates that this is the minimum/ maximum fee/charge that can be applied by the financial institution
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesFeeChargeCapMinMaxType MinMaxType { get; set; }
		
		/// <summary>
		/// Free text for adding  extra details for fee charge cap
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Other fee type code which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OtherFeesChargesFeeChargeCapOtherFeeType[] OBPCAData1OtherFeesChargesFeeChargeCapOtherFeeType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBPCAData1OtherFeesChargesFeeChargeCapCappingPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AcademicTerm = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Day = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Half Year")]
		Half_Year = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Month = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Quarter = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Week = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Year = 6,
	}
	
	public class OBPCAData1OtherFeesChargesFeeChargeCapOtherFeeType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBPCAData1OtherFeesChargesFeeChargeDetail
	{
		
		/// <summary>
		/// How frequently the fee/charge is applied to the account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OtherFeesChargesFeeChargeDetailApplicationFrequency ApplicationFrequency { get; set; }
		
		/// <summary>
		/// How frequently the fee/charge is calculated
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OtherFeesChargesFeeChargeDetailApplicationFrequency CalculationFrequency { get; set; }
		
		/// <summary>
		/// Fee Amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string FeeAmount { get; set; }
		
		/// <summary>
		/// Range or amounts or rates for which the fee/charge applies
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OtherFeesChargesFeeChargeDetailFeeApplicableRange FeeApplicableRange { get; set; }
		
		/// <summary>
		/// Categorisation of fees and charges into standard categories.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesFeeChargeDetailFeeCategory FeeCategory { get; set; }
		
		/// <summary>
		/// Details about any caps (maximum charges) that apply to a particular fee/charge
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OtherFeesChargesFeeChargeDetailFeeChargeCap[] OBPCAData1OtherFeesChargesFeeChargeDetailFeeChargeCap { get; set; }
		
		/// <summary>
		/// Rate charged for Fee/Charge (where it is charged in terms of a rate rather than an amount)
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string FeeRate { get; set; }
		
		/// <summary>
		/// Rate type for Fee/Charge (where it is charged in terms of a rate rather than an amount)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1CreditInterestTierBandSetTierBandBankInterestRateType FeeRateType { get; set; }
		
		/// <summary>
		/// Fee/Charge Type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OtherFeesChargesFeeChargeDetailFeeType FeeType { get; set; }
		
		/// <summary>
		/// Optional additional notes to supplement the fee/charge details.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Other application frequencies not covered in the standard code list
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OtherFeesChargesFeeChargeDetailOtherApplicationFrequency OtherApplicationFrequency { get; set; }
		
		/// <summary>
		/// Other calculation frequency which is not available in standard code set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OtherFeesChargesFeeChargeDetailOtherCalculationFrequency OtherCalculationFrequency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OtherFeesChargesFeeChargeDetailOtherFeeCategoryType OtherFeeCategoryType { get; set; }
		
		/// <summary>
		/// Other fee rate type which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OtherFeesChargesFeeChargeDetailOtherFeeRateType OtherFeeRateType { get; set; }
		
		/// <summary>
		/// Other Fee/charge type which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OtherFeesChargesFeeChargeDetailOtherFeeType OtherFeeType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBPCAData1OtherFeesChargesFeeChargeDetailApplicationFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AccountClosing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AccountOpening = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AcademicTerm = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChargingPeriod = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Daily = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PerItem = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Monthly = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OnAccountAnniversary = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PerHour = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PerOccurrence = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PerSheet = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PerTransaction = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PerTransactionAmount = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PerTransactionPercentage = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Quarterly = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SixMonthly = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StatementMonthly = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Weekly = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Yearly = 19,
	}
	
	public class OBPCAData1OtherFeesChargesFeeChargeDetailFeeApplicableRange
	{
		
		/// <summary>
		/// Maximum Amount on which fee is applicable (where it is expressed as an amount)
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string MaximumAmount { get; set; }
		
		/// <summary>
		/// Maximum rate on which fee/charge is applicable(where it is expressed as an rate)
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string MaximumRate { get; set; }
		
		/// <summary>
		/// Minimum Amount on which fee/charge is applicable (where it is expressed as an amount)
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string MinimumAmount { get; set; }
		
		/// <summary>
		/// Minimum rate on which fee/charge is applicable(where it is expressed as an rate)
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string MinimumRate { get; set; }
	}
	
	public class OBPCAData1OtherFeesChargesFeeChargeDetailFeeChargeCap
	{
		
		/// <summary>
		/// Period e.g. day, week, month etc. for which the fee/charge is capped
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBPCAData1OtherFeesChargesFeeChargeDetailFeeChargeCapCappingPeriod> CappingPeriod { get; set; }
		
		/// <summary>
		/// Cap amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string FeeCapAmount { get; set; }
		
		/// <summary>
		/// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> FeeCapOccurrence { get; set; }
		
		/// <summary>
		/// Fee/charge type which is being capped
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] FeeType { get; set; }
		
		/// <summary>
		/// Indicates that this is the minimum/ maximum fee/charge that can be applied by the financial institution
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesFeeChargeCapMinMaxType MinMaxType { get; set; }
		
		/// <summary>
		/// Free text for adding  extra details for fee charge cap
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Other fee type code which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OtherFeesChargesFeeChargeDetailFeeChargeCapOtherFeeType[] OBPCAData1OtherFeesChargesFeeChargeDetailFeeChargeCapOtherFeeType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBPCAData1OtherFeesChargesFeeChargeDetailFeeChargeCapCappingPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AcademicTerm = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Day = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Half Year")]
		Half_Year = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Month = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Quarter = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Week = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Year = 6,
	}
	
	public class OBPCAData1OtherFeesChargesFeeChargeDetailFeeChargeCapOtherFeeType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBPCAData1OtherFeesChargesFeeChargeDetailFeeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceCAccountFee = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceCAccountFeeMonthly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceCOther = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 3,
	}
	
	public class OBPCAData1OtherFeesChargesFeeChargeDetailOtherApplicationFrequency
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBPCAData1OtherFeesChargesFeeChargeDetailOtherCalculationFrequency
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBPCAData1OtherFeesChargesFeeChargeDetailOtherFeeCategoryType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBPCAData1OtherFeesChargesFeeChargeDetailOtherFeeRateType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBPCAData1OtherFeesChargesFeeChargeDetailOtherFeeType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Categorisation of fees and charges into standard categories.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesFeeChargeDetailFeeCategory FeeCategory { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBPCAData1Overdraft
	{
		
		/// <summary>
		/// Associated Notes about the overdraft rates
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Tier band set details
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBPCAData1OverdraftOverdraftTierBandSet[] OBPCAData1OverdraftOverdraftTierBandSet { get; set; }
	}
	
	public class OBPCAData1OverdraftOverdraftTierBandSet
	{
		
		/// <summary>
		/// Indicates if the Overdraft is authorised (Y) or unauthorised (N)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AuthorisedIndicator { get; set; }
		
		/// <summary>
		/// When a customer exceeds their credit limit, a financial institution will not charge the customer unauthorised overdraft charges if they do not exceed by more than the buffer amount. Note: Authorised overdraft charges may still apply.
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string BufferAmount { get; set; }
		
		/// <summary>
		/// Unique and unambiguous identification of a  Tier Band for a overdraft product.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Optional additional notes to supplement the overdraft Tier Band Set details
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Overdraft fees and charges details
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesCharges[] OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesCharges { get; set; }
		
		/// <summary>
		/// Provides overdraft details for a specific tier or band
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBPCAData1OverdraftOverdraftTierBandSetOverdraftTierBand[] OBPCAData1OverdraftOverdraftTierBandSetOverdraftTierBand { get; set; }
		
		/// <summary>
		/// An overdraft can either be 'committed' which means that the facility cannot be withdrawn without reasonable notification before it's agreed end date, or 'on demand' which means that the financial institution can demand repayment at any point in time.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBPCAData1OverdraftOverdraftTierBandSetOverdraftType> OverdraftType { get; set; }
		
		/// <summary>
		/// The methodology of how overdraft is charged. It can be:
		///'Whole'  Where the same charge/rate is applied to the entirety of the overdraft balance (where charges are applicable). 
		///'Tiered' Where different charges/rates are applied dependent on overdraft maximum and minimum balance amount tiers defined by the lending financial organisation
		///'Banded' Where different charges/rates are applied dependent on overdraft maximum and minimum balance amount bands defined by a government organisation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OverdraftOverdraftTierBandSetTierBandMethod TierBandMethod { get; set; }
	}
	
	public class OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesCharges
	{
		
		/// <summary>
		/// Details about any caps (maximum charges) that apply to a particular fee/charge
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeCap[] OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeCap { get; set; }
		
		/// <summary>
		/// Details about the fees/charges
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetail[] OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetail { get; set; }
	}
	
	public class OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeCap
	{
		
		/// <summary>
		/// Period e.g. day, week, month etc. for which the fee/charge is capped
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeCapCappingPeriod> CappingPeriod { get; set; }
		
		/// <summary>
		/// Cap amount charged for a fee/charge
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string FeeCapAmount { get; set; }
		
		/// <summary>
		/// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> FeeCapOccurrence { get; set; }
		
		/// <summary>
		/// Fee/charge type which is being capped
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] FeeType { get; set; }
		
		/// <summary>
		/// Indicates that this is the minimum/ maximum fee/charge that can be applied by the financial institution
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesFeeChargeCapMinMaxType MinMaxType { get; set; }
		
		/// <summary>
		/// Notes related to Overdraft fee charge cap
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Other fee type code which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeCapOtherFeeType[] OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeCapOtherFeeType { get; set; }
		
		/// <summary>
		/// Specifies for the overdraft control feature/benefit
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OverdraftControlIndicator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeCapCappingPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AcademicTerm = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Day = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Half Year")]
		Half_Year = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Month = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Quarter = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Week = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Year = 6,
	}
	
	public class OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeCapOtherFeeType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetail
	{
		
		/// <summary>
		/// Frequency at which the overdraft charge is applied to the account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OtherFeesChargesFeeChargeDetailApplicationFrequency ApplicationFrequency { get; set; }
		
		/// <summary>
		/// How often is the overdraft fee/charge calculated for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OtherFeesChargesFeeChargeDetailApplicationFrequency CalculationFrequency { get; set; }
		
		/// <summary>
		/// Amount charged for an overdraft fee/charge (where it is charged in terms of an amount rather than a rate)
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string FeeAmount { get; set; }
		
		/// <summary>
		/// Rate charged for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string FeeRate { get; set; }
		
		/// <summary>
		/// Rate type for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1CreditInterestTierBandSetTierBandBankInterestRateType FeeRateType { get; set; }
		
		/// <summary>
		/// Overdraft fee type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailFeeType FeeType { get; set; }
		
		/// <summary>
		/// Every additional tranche of an overdraft balance to which an overdraft fee is applied
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string IncrementalBorrowingAmount { get; set; }
		
		/// <summary>
		/// Free text for capturing any other info related to Overdraft Fees Charge Details
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Other application frequencies that are not available in the standard code list
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOtherApplicationFrequency OtherApplicationFrequency { get; set; }
		
		/// <summary>
		/// Other calculation frequency which is not available in the standard code set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOtherCalculationFrequency OtherCalculationFrequency { get; set; }
		
		/// <summary>
		/// Other fee rate type code which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOtherFeeRateType OtherFeeRateType { get; set; }
		
		/// <summary>
		/// Other Fee type which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOtherFeeType OtherFeeType { get; set; }
		
		/// <summary>
		/// Specifies for the overdraft control feature/benefit
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OverdraftControlIndicator { get; set; }
		
		/// <summary>
		/// Details about any caps (maximum charges) that apply to a particular fee/charge
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCap OverdraftFeeChargeCap { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailFeeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ArrangedOverdraft = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EmergencyBorrowing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BorrowingItem = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OverdraftRenewal = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AnnualReview = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OverdraftSetup = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Surcharge = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TempOverdraft = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnauthorisedBorrowing = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnauthorisedPaidTrans = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnauthorisedUnpaidTrans = 11,
	}
	
	public class OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOtherApplicationFrequency
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOtherCalculationFrequency
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOtherFeeRateType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOtherFeeType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCap
	{
		
		/// <summary>
		/// Period e.g. day, week, month etc. for which the fee/charge is capped
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCapCappingPeriod> CappingPeriod { get; set; }
		
		/// <summary>
		/// Cap amount charged for a fee/charge
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string FeeCapAmount { get; set; }
		
		/// <summary>
		/// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> FeeCapOccurrence { get; set; }
		
		/// <summary>
		/// Fee/charge type which is being capped
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailFeeType[] FeeType { get; set; }
		
		/// <summary>
		/// Indicates that this is the minimum/ maximum fee/charge that can be applied by the financial institution
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesFeeChargeCapMinMaxType MinMaxType { get; set; }
		
		/// <summary>
		/// Notes related to Overdraft fee charge cap
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Other fee type code which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCapOtherFeeType[] OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCapOtherFeeType { get; set; }
		
		/// <summary>
		/// Specifies for the overdraft control feature/benefit
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OverdraftControlIndicator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCapCappingPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AcademicTerm = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Day = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Half Year")]
		Half_Year = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Month = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Quarter = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Week = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Year = 6,
	}
	
	public class OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCapOtherFeeType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBPCAData1OverdraftOverdraftTierBandSetOverdraftTierBand
	{
		
		/// <summary>
		/// Indicates that a bank provides the overdraft limit up to TierValueMIn to all customers automatically
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> BankGuaranteedIndicator { get; set; }
		
		/// <summary>
		/// EAR means Effective Annual Rate and/or Equivalent Annual Rate (frequently
		///used interchangeably), being the actual annual interest rate of an Overdraft.
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string EAR { get; set; }
		
		/// <summary>
		/// Unique and unambiguous identification of a  Tier Band for a overdraft.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Optional additional notes to supplement the Tier/band details
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Overdraft fees and charges
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesCharges[] OBPCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesCharges { get; set; }
		
		/// <summary>
		/// Interest charged on whole amount or tiered/banded
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1CreditInterestTierBandSetTierBandDepositInterestAppliedCoverage OverdraftInterestChargingCoverage { get; set; }
		
		/// <summary>
		/// An annual percentage rate (APR) is the annual rate charged for borrowing or earned through an investment. APR is expressed as a percentage that represents the actual yearly cost of funds over the term of a loan. This includes any fees or additional costs associated with the transaction but does not take compounding into account.
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string RepresentativeAPR { get; set; }
		
		/// <summary>
		/// Maximum value of Overdraft Tier/Band
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string TierValueMax { get; set; }
		
		/// <summary>
		/// Minimum value of Overdraft Tier/Band
		/// Required
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string TierValueMin { get; set; }
	}
	
	public class OBPCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesCharges
	{
		
		/// <summary>
		/// Details about any caps (maximum charges) that apply to a particular fee/charge
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeCap[] OBPCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeCap { get; set; }
		
		/// <summary>
		/// Details about the fees/charges
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBPCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetail[] OBPCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetail { get; set; }
	}
	
	public class OBPCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeCap
	{
		
		/// <summary>
		/// Period e.g. day, week, month etc. for which the fee/charge is capped
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBPCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeCapCappingPeriod> CappingPeriod { get; set; }
		
		/// <summary>
		/// Cap amount charged for a fee/charge
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string FeeCapAmount { get; set; }
		
		/// <summary>
		/// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> FeeCapOccurrence { get; set; }
		
		/// <summary>
		/// Fee/charge type which is being capped
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailFeeType[] FeeType { get; set; }
		
		/// <summary>
		/// Indicates that this is the minimum/ maximum fee/charge that can be applied by the financial institution
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesFeeChargeCapMinMaxType MinMaxType { get; set; }
		
		/// <summary>
		/// Notes related to Overdraft fee charge cap
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Other fee type code which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeCapOtherFeeType[] OBPCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeCapOtherFeeType { get; set; }
		
		/// <summary>
		/// Specifies for the overdraft control feature/benefit
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OverdraftControlIndicator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBPCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeCapCappingPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AcademicTerm = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Day = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Half Year")]
		Half_Year = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Month = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Quarter = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Week = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Year = 6,
	}
	
	public class OBPCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeCapOtherFeeType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBPCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetail
	{
		
		/// <summary>
		/// Frequency at which the overdraft charge is applied to the account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OtherFeesChargesFeeChargeDetailApplicationFrequency ApplicationFrequency { get; set; }
		
		/// <summary>
		/// How often is the overdraft fee/charge calculated for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OtherFeesChargesFeeChargeDetailApplicationFrequency CalculationFrequency { get; set; }
		
		/// <summary>
		/// Amount charged for an overdraft fee/charge (where it is charged in terms of an amount rather than a rate)
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string FeeAmount { get; set; }
		
		/// <summary>
		/// Rate charged for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string FeeRate { get; set; }
		
		/// <summary>
		/// Rate type for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1CreditInterestTierBandSetTierBandBankInterestRateType FeeRateType { get; set; }
		
		/// <summary>
		/// Overdraft fee type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailFeeType FeeType { get; set; }
		
		/// <summary>
		/// Every additional tranche of an overdraft balance to which an overdraft fee is applied
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string IncrementalBorrowingAmount { get; set; }
		
		/// <summary>
		/// Free text for capturing any other info related to Overdraft Fees Charge Details
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Other application frequencies that are not available in the standard code list
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOtherApplicationFrequency OtherApplicationFrequency { get; set; }
		
		/// <summary>
		/// Other calculation frequency which is not available in the standard code set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOtherCalculationFrequency OtherCalculationFrequency { get; set; }
		
		/// <summary>
		/// Other fee rate type code which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOtherFeeRateType OtherFeeRateType { get; set; }
		
		/// <summary>
		/// Other Fee type which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOtherFeeType OtherFeeType { get; set; }
		
		/// <summary>
		/// Specifies for the overdraft control feature/benefit
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OverdraftControlIndicator { get; set; }
		
		/// <summary>
		/// Details about any caps (maximum charges) that apply to a particular fee/charge
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCap OverdraftFeeChargeCap { get; set; }
	}
	
	public class OBPCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOtherApplicationFrequency
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBPCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOtherCalculationFrequency
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBPCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOtherFeeRateType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBPCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOtherFeeType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBPCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCap
	{
		
		/// <summary>
		/// Period e.g. day, week, month etc. for which the fee/charge is capped
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBPCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCapCappingPeriod> CappingPeriod { get; set; }
		
		/// <summary>
		/// Cap amount charged for a fee/charge
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string FeeCapAmount { get; set; }
		
		/// <summary>
		/// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> FeeCapOccurrence { get; set; }
		
		/// <summary>
		/// Fee/charge type which is being capped
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBPCAData1OverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailFeeType[] FeeType { get; set; }
		
		/// <summary>
		/// Indicates that this is the minimum/ maximum fee/charge that can be applied by the financial institution
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1OtherFeesChargesFeeChargeCapMinMaxType MinMaxType { get; set; }
		
		/// <summary>
		/// Notes related to Overdraft fee charge cap
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Other fee type code which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCapOtherFeeType[] OBPCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCapOtherFeeType { get; set; }
		
		/// <summary>
		/// Specifies for the overdraft control feature/benefit
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OverdraftControlIndicator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBPCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCapCappingPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AcademicTerm = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Day = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Half Year")]
		Half_Year = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Month = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Quarter = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Week = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Year = 6,
	}
	
	public class OBPCAData1OverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCapOtherFeeType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Min length: 0
		/// Max length: 4
		/// Pattern: ^\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBPCAData1OverdraftOverdraftTierBandSetOverdraftType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Committed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OnDemand = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBPCAData1OverdraftOverdraftTierBandSetTierBandMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tiered = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Whole = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Banded = 2,
	}
	
	public class OBPCAData1ProductDetails
	{
		
		/// <summary>
		/// The maximum relevant charges that could accrue as defined fully in Part 7 of the CMA order
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string MonthlyMaximumCharge { get; set; }
		
		/// <summary>
		/// Optional additional notes to supplement the Core product details
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.
		///
		///Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd 
		///With respect to PCA products, they are segmented in relation to different markets that they wish to focus on. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Segment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBParty2
	{
		
		/// <summary>
		/// A party’s role with respect to the related account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountRole { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBParty2Address[] OBParty2Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> BeneficialOwnership { get; set; }
		
		/// <summary>
		/// Address for electronic mail (e-mail).
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// Specifies a character string with a maximum length of 350 characters.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string FullLegalName { get; set; }
		
		/// <summary>
		/// Legal standing of the party.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LegalStructure { get; set; }
		
		/// <summary>
		/// Collection of information that identifies a mobile phone number, as defined by telecom services.
		/// Pattern: \+[0-9]{1,3}-[0-9()+\-]{1,30}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\+[0-9]{1,3}-[0-9()+\-]{1,30}")]
		public string Mobile { get; set; }
		
		/// <summary>
		/// Name by which a party is known and which is usually used to identify that party.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// A unique and immutable identifier used to identify the customer resource. This identifier has no meaning to the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string PartyId { get; set; }
		
		/// <summary>
		/// Number assigned by an agent to identify its customer.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string PartyNumber { get; set; }
		
		/// <summary>
		/// Party type, in a coded form.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBExternalPartyType1Code PartyType { get; set; }
		
		/// <summary>
		/// Collection of information that identifies a phone number, as defined by telecom services.
		/// Pattern: \+[0-9]{1,3}-[0-9()+\-]{1,30}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\+[0-9]{1,3}-[0-9()+\-]{1,30}")]
		public string Phone { get; set; }
		
		/// <summary>
		/// The Party's relationships with other resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPartyRelationships1 Relationships { get; set; }
	}
	
	public class OBParty2Address
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string[] AddressLine { get; set; }
		
		/// <summary>
		/// Identifies the nature of the postal address.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBAddressTypeCode AddressType { get; set; }
		
		/// <summary>
		/// Number that identifies the position of a building on a street.
		/// Min length: 1
		/// Max length: 16
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public string BuildingNumber { get; set; }
		
		/// <summary>
		/// Nation with its own government, occupying a particular territory.
		/// Required
		/// Pattern: ^[A-Z]{2,2}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{2,2}$")]
		public string Country { get; set; }
		
		/// <summary>
		/// Identifies a subdivision of a country eg, state, region, county.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string CountrySubDivision { get; set; }
		
		/// <summary>
		/// Identifier consisting of a group of letters and/or numbers that is added to a postal address to assist the sorting of mail.
		/// Min length: 1
		/// Max length: 16
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public string PostCode { get; set; }
		
		/// <summary>
		/// Name of a street or thoroughfare.
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string StreetName { get; set; }
		
		/// <summary>
		/// Name of a built-up area, with defined boundaries, and a local government.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string TownName { get; set; }
	}
	
	/// <summary>
	/// The Party's relationships with other resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBPartyRelationships1
	{
		
		/// <summary>
		/// Relationship to the Account resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPartyRelationships1Account Account { get; set; }
	}
	
	public class OBPartyRelationships1Account
	{
		
		/// <summary>
		/// Unique identification as assigned by the ASPSP to uniquely identify the related resource.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Id { get; set; }
		
		/// <summary>
		/// Absolute URI to the related resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Related { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBReadAccount6
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadAccount6Data Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
	}
	
	public class OBReadAccount6Data
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OBAccount6[] Account { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBReadBalance1
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadBalance1Data Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
	}
	
	public class OBReadBalance1Data
	{
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBReadBalance1DataBalance[] OBReadBalance1DataBalance { get; set; }
	}
	
	public class OBReadBalance1DataBalance
	{
		
		/// <summary>
		/// A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Amount of money of the cash balance.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadBalance1DataBalanceAmount Amount { get; set; }
		
		/// <summary>
		/// Indicates whether the balance is a credit or a debit balance. 
		///Usage: A zero balance is considered to be a credit balance.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBCreditDebitCode_0 CreditDebitIndicator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBReadBalance1DataBalanceCreditLine[] OBReadBalance1DataBalanceCreditLine { get; set; }
		
		/// <summary>
		/// Indicates the date (and time) of the balance.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset DateTime { get; set; }
		
		/// <summary>
		/// Balance type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBBalanceType1Code Type { get; set; }
	}
	
	public class OBReadBalance1DataBalanceAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	public class OBReadBalance1DataBalanceCreditLine
	{
		
		/// <summary>
		/// Amount of money of the credit line.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadBalance1DataBalanceCreditLineAmount Amount { get; set; }
		
		/// <summary>
		/// Indicates whether or not the credit line is included in the balance of the account.
		///Usage: If not present, credit line is not included in the balance amount of the account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Included { get; set; }
		
		/// <summary>
		/// Limit type, in a coded form.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBReadBalance1DataBalanceCreditLineType> Type { get; set; }
	}
	
	public class OBReadBalance1DataBalanceCreditLineAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBReadBalance1DataBalanceCreditLineType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Available = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Credit = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Emergency = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pre-Agreed")]
		PreMinusAgreed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Temporary = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBReadBeneficiary5
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadBeneficiary5Data Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
	}
	
	public class OBReadBeneficiary5Data
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OBBeneficiary5[] Beneficiary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBReadConsent1
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadConsent1Data Data { get; set; }
		
		/// <summary>
		/// The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Account Info.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBRisk2 Risk { get; set; }
	}
	
	public class OBReadConsent1Data
	{
		
		/// <summary>
		/// Specified date and time the permissions will expire.
		///If this is not populated, the permissions will be open ended.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] Permissions { get; set; }
		
		/// <summary>
		/// Specified start date and time for the transaction query period.
		///If this is not populated, the start date will be open ended, and data will be returned from the earliest available transaction.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> TransactionFromDateTime { get; set; }
		
		/// <summary>
		/// Specified end date and time for the transaction query period.
		///If this is not populated, the end date will be open ended, and data will be returned to the latest available transaction.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> TransactionToDateTime { get; set; }
	}
	
	/// <summary>
	/// The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Account Info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBRisk2
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBReadConsentResponse1
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadConsentResponse1Data Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Account Info.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBRisk2 Risk { get; set; }
	}
	
	public class OBReadConsentResponse1Data
	{
		
		/// <summary>
		/// Unique identification as assigned to identify the account access consent resource.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string ConsentId { get; set; }
		
		/// <summary>
		/// Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// Specified date and time the permissions will expire.
		///If this is not populated, the permissions will be open ended.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] Permissions { get; set; }
		
		/// <summary>
		/// Specifies the status of consent resource in code form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadConsentResponse1DataStatus Status { get; set; }
		
		/// <summary>
		/// Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StatusUpdateDateTime { get; set; }
		
		/// <summary>
		/// Specified start date and time for the transaction query period.
		///If this is not populated, the start date will be open ended, and data will be returned from the earliest available transaction.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> TransactionFromDateTime { get; set; }
		
		/// <summary>
		/// Specified end date and time for the transaction query period.
		///If this is not populated, the end date will be open ended, and data will be returned to the latest available transaction.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> TransactionToDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBReadConsentResponse1DataStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Authorised = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AwaitingAuthorisation = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Rejected = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Revoked = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBReadDataStatement2
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OBStatement2[] Statement { get; set; }
	}
	
	/// <summary>
	/// Provides further details on a statement resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBStatement2
	{
		
		/// <summary>
		/// A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// Date and time at which the statement period ends.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndDateTime { get; set; }
		
		/// <summary>
		/// Date and time at which the statement period starts.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBStatement2StatementAmount[] OBStatement2StatementAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBStatement2StatementBenefit[] OBStatement2StatementBenefit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBStatement2StatementDateTime[] OBStatement2StatementDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] StatementDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBStatement2StatementFee[] OBStatement2StatementFee { get; set; }
		
		/// <summary>
		/// Unique identifier for the statement resource within an servicing institution. This identifier is both unique and immutable.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string StatementId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBStatement2StatementInterest[] OBStatement2StatementInterest { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBStatement2StatementRate[] OBStatement2StatementRate { get; set; }
		
		/// <summary>
		/// Unique reference for the statement. This reference may be optionally populated if available.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string StatementReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBStatement2StatementValue[] OBStatement2StatementValue { get; set; }
		
		/// <summary>
		/// Statement type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBExternalStatementType1Code Type { get; set; }
	}
	
	public class OBStatement2StatementAmount
	{
		
		/// <summary>
		/// Amount of money associated with the amount type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount_8 Amount { get; set; }
		
		/// <summary>
		/// Indicates whether the amount is a credit or a debit. 
		///Usage: A zero amount is considered to be a credit amount.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBCreditDebitCode_0 CreditDebitIndicator { get; set; }
		
		/// <summary>
		/// Amount type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	public class OBStatement2StatementBenefit
	{
		
		/// <summary>
		/// Amount of money associated with the statement benefit type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount_5 Amount { get; set; }
		
		/// <summary>
		/// Benefit type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	public class OBStatement2StatementDateTime
	{
		
		/// <summary>
		/// Date and time associated with the date time type.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset DateTime { get; set; }
		
		/// <summary>
		/// Date time type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	public class OBStatement2StatementFee
	{
		
		/// <summary>
		/// Amount of money associated with the statement fee type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount_6 Amount { get; set; }
		
		/// <summary>
		/// Indicates whether the amount is a credit or a debit. 
		///Usage: A zero amount is considered to be a credit amount.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBCreditDebitCode_0 CreditDebitIndicator { get; set; }
		
		/// <summary>
		/// Description that may be available for the statement fee.
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Description { get; set; }
		
		/// <summary>
		/// How frequently the fee is applied to the Account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Frequency { get; set; }
		
		/// <summary>
		/// Rate charged for Statement Fee (where it is charged in terms of a rate rather than an amount)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Rate { get; set; }
		
		/// <summary>
		/// Description that may be available for the statement fee rate type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RateType { get; set; }
		
		/// <summary>
		/// Fee type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	public class OBStatement2StatementInterest
	{
		
		/// <summary>
		/// Amount of money associated with the statement interest amount type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount_7 Amount { get; set; }
		
		/// <summary>
		/// Indicates whether the amount is a credit or a debit. 
		///Usage: A zero amount is considered to be a credit amount.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBCreditDebitCode_0 CreditDebitIndicator { get; set; }
		
		/// <summary>
		/// Description that may be available for the statement interest.
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Description { get; set; }
		
		/// <summary>
		/// Specifies the statement fee type requested
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Frequency { get; set; }
		
		/// <summary>
		/// field representing a percentage (e.g. 0.05 represents 5% and 0.9525 represents 95.25%). Note the number of decimal places may vary.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Rate { get; set; }
		
		/// <summary>
		/// Description that may be available for the statement Interest rate type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RateType { get; set; }
		
		/// <summary>
		/// Interest amount type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	public class OBStatement2StatementRate
	{
		
		/// <summary>
		/// Rate associated with the statement rate type.
		/// Required
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string Rate { get; set; }
		
		/// <summary>
		/// Statement rate type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	public class OBStatement2StatementValue
	{
		
		/// <summary>
		/// Statement value type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		/// <summary>
		/// Value associated with the statement value type.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBReadDataTransaction6
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OBTransaction6[] Transaction { get; set; }
	}
	
	/// <summary>
	/// Provides further details on an entry in the report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBTransaction6
	{
		
		/// <summary>
		/// A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address for a transaction entry, that is presented in free format text.
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string AddressLine { get; set; }
		
		/// <summary>
		/// Amount of money in the cash transaction entry.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount_9 Amount { get; set; }
		
		/// <summary>
		/// Set of elements used to define the balance as a numerical representation of the net increases and decreases in an account after a transaction entry is applied to the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBTransactionCashBalance Balance { get; set; }
		
		/// <summary>
		/// Set of elements used to fully identify the type of underlying transaction resulting in an entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBankTransactionCodeStructure1 BankTransactionCode { get; set; }
		
		/// <summary>
		/// Date and time when a transaction entry is posted to an account on the account servicer's books.
		///Usage: Booking date is the expected booking date, unless the status is booked, in which case it is the actual booking date.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset BookingDateTime { get; set; }
		
		/// <summary>
		/// Set of elements to describe the card instrument used in the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBTransactionCardInstrument1 CardInstrument { get; set; }
		
		/// <summary>
		/// Transaction charges to be paid by the charge bearer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount_10 ChargeAmount { get; set; }
		
		/// <summary>
		/// Indicates whether the transaction is a credit or a debit entry.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBCreditDebitCode_0 CreditDebitIndicator { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the creditor, in the case of a debit transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBCashAccount6_0 CreditorAccount { get; set; }
		
		/// <summary>
		/// Financial institution servicing an account for the creditor.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBranchAndFinancialInstitutionIdentification6_1 CreditorAgent { get; set; }
		
		/// <summary>
		/// Set of elements used to provide details on the currency exchange.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBCurrencyExchange5 CurrencyExchange { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the debtor, in the case of a crebit transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBCashAccount6_1 DebtorAccount { get; set; }
		
		/// <summary>
		/// Financial institution servicing an account for the debtor.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBranchAndFinancialInstitutionIdentification6_2 DebtorAgent { get; set; }
		
		/// <summary>
		/// Details of the merchant involved in the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBMerchantDetails1 MerchantDetails { get; set; }
		
		/// <summary>
		/// Set of elements to fully identify a proprietary bank transaction code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProprietaryBankTransactionCodeStructure1 ProprietaryBankTransactionCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] StatementReference { get; set; }
		
		/// <summary>
		/// Status of a transaction entry on the books of the account servicer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBEntryStatus1Code Status { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
		
		/// <summary>
		/// Unique identifier for the transaction within an servicing institution. This identifier is both unique and immutable.
		/// Min length: 1
		/// Max length: 210
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(210)]
		public string TransactionId { get; set; }
		
		/// <summary>
		/// Further details of the transaction. 
		///This is the transaction narrative, which is unstructured text.
		/// Min length: 1
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string TransactionInformation { get; set; }
		
		/// <summary>
		/// Specifies the Mutability of the Transaction record.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBTransaction6TransactionMutability> TransactionMutability { get; set; }
		
		/// <summary>
		/// Unique reference for the transaction. This reference is optionally populated, and may as an example be the FPID in the Faster Payments context.
		/// Min length: 1
		/// Max length: 210
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(210)]
		public string TransactionReference { get; set; }
		
		/// <summary>
		/// Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit transaction entry.
		///Usage: If transaction entry status is pending and value date is present, then the value date refers to an expected/requested value date.
		///For transaction entries subject to availability/float and for which availability information is provided, the value date must not be used. In this case the availability component identifies the number of availability days.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ValueDateTime { get; set; }
	}
	
	/// <summary>
	/// Set of elements used to define the balance as a numerical representation of the net increases and decreases in an account after a transaction entry is applied to the account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBTransactionCashBalance
	{
		
		/// <summary>
		/// Amount of money of the cash balance after a transaction entry is applied to the account..
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBTransactionCashBalanceAmount Amount { get; set; }
		
		/// <summary>
		/// Indicates whether the balance is a credit or a debit balance. 
		///Usage: A zero balance is considered to be a credit balance.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBCreditDebitCode_0 CreditDebitIndicator { get; set; }
		
		/// <summary>
		/// Balance type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBBalanceType1Code Type { get; set; }
	}
	
	public class OBTransactionCashBalanceAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	/// <summary>
	/// Set of elements to describe the card instrument used in the transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBTransactionCardInstrument1
	{
		
		/// <summary>
		/// The card authorisation type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBTransactionCardInstrument1AuthorisationType> AuthorisationType { get; set; }
		
		/// <summary>
		/// Name of the card scheme.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBTransactionCardInstrument1CardSchemeName CardSchemeName { get; set; }
		
		/// <summary>
		/// Identification assigned by an institution to identify the card instrument used in the transaction. This identification is known by the account owner, and may be masked.
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Name of the cardholder using the card instrument.
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBTransactionCardInstrument1AuthorisationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ConsumerDevice = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Contactless = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PIN = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBTransactionCardInstrument1CardSchemeName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AmericanExpress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Diners = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Discover = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MasterCard = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VISA = 4,
	}
	
	/// <summary>
	/// Set of elements to fully identify a proprietary bank transaction code.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProprietaryBankTransactionCodeStructure1
	{
		
		/// <summary>
		/// Proprietary bank transaction code to identify the underlying transaction.
		/// Required
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Code { get; set; }
		
		/// <summary>
		/// Identification of the issuer of the proprietary bank transaction code.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Issuer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBTransaction6TransactionMutability
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mutable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Immutable = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBReadDirectDebit2
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadDirectDebit2Data Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
	}
	
	public class OBReadDirectDebit2Data
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OBReadDirectDebit2DataDirectDebit[] OBReadDirectDebit2DataDirectDebit { get; set; }
	}
	
	public class OBReadDirectDebit2DataDirectDebit
	{
		
		/// <summary>
		/// A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// A unique and immutable identifier used to identify the direct debit resource. This identifier has no meaning to the account owner.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string DirectDebitId { get; set; }
		
		/// <summary>
		/// Specifies the status of the direct debit in code form.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBExternalDirectDebitStatus1Code DirectDebitStatusCode { get; set; }
		
		/// <summary>
		/// Regularity with which direct debit instructions are to be created and processed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Frequency { get; set; }
		
		/// <summary>
		/// Direct Debit reference. For AUDDIS service users provide Core Reference. For non AUDDIS service users provide Core reference if possible or last used reference.
		/// Required
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string MandateIdentification { get; set; }
		
		/// <summary>
		/// Name of Service User.
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
		
		/// <summary>
		/// The amount of the most recent direct debit collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount_0 PreviousPaymentAmount { get; set; }
		
		/// <summary>
		/// Date of most recent direct debit collection.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> PreviousPaymentDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBReadOffer1
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadOffer1Data Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
	}
	
	public class OBReadOffer1Data
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OBReadOffer1DataOffer[] OBReadOffer1DataOffer { get; set; }
	}
	
	public class OBReadOffer1DataOffer
	{
		
		/// <summary>
		/// A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Amount of money associated with the offer type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadOffer1DataOfferAmount Amount { get; set; }
		
		/// <summary>
		/// Further details of the offer.
		/// Min length: 1
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Description { get; set; }
		
		/// <summary>
		/// Date and time at which the offer ends.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndDateTime { get; set; }
		
		/// <summary>
		/// Fee associated with the offer type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadOffer1DataOfferFee Fee { get; set; }
		
		/// <summary>
		/// A unique and immutable identifier used to identify the offer resource. This identifier has no meaning to the account owner.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string OfferId { get; set; }
		
		/// <summary>
		/// Offer type, in a coded form.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBReadOffer1DataOfferOfferType> OfferType { get; set; }
		
		/// <summary>
		/// Rate associated with the offer type.
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string Rate { get; set; }
		
		/// <summary>
		/// Date and time at which the offer starts.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartDateTime { get; set; }
		
		/// <summary>
		/// Further details of the term of the offer.
		/// Min length: 1
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Term { get; set; }
		
		/// <summary>
		/// URL (Uniform Resource Locator) where documentation on the offer can be found
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string URL { get; set; }
		
		/// <summary>
		/// Value associated with the offer type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class OBReadOffer1DataOfferAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	public class OBReadOffer1DataOfferFee
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBReadOffer1DataOfferOfferType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BalanceTransfer = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LimitIncrease = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MoneyTransfer = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PromotionalRate = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBReadParty2
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadParty2Data Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
	}
	
	public class OBReadParty2Data
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OBParty2 Party { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBReadParty3
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadParty3Data Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
	}
	
	public class OBReadParty3Data
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OBParty2[] Party { get; set; }
	}
	
	/// <summary>
	/// Product details of Other Product which is not avaiable in the standard list
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBReadProduct2
	{
		
		/// <summary>
		/// Aligning with the read write specs structure.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2Data Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
	}
	
	public class OBReadProduct2Data
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProduct[] OBReadProduct2DataProduct { get; set; }
	}
	
	public class OBReadProduct2DataProduct
	{
		
		/// <summary>
		/// A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBBCAData1 BCA { get; set; }
		
		/// <summary>
		/// Unique and unambiguous identification of a  Product Marketing State.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string MarketingStateId { get; set; }
		
		/// <summary>
		/// Other product type details associated with the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductType OtherProductType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBPCAData1 PCA { get; set; }
		
		/// <summary>
		/// The unique ID that has been internally assigned by the financial institution to each of the current account banking products they market to their retail and/or small to medium enterprise (SME) customers.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The name of the Product used for marketing purposes from a customer perspective. I.e. what the customer would recognise.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string ProductName { get; set; }
		
		/// <summary>
		/// Product type : Personal Current Account, Business Current Account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductProductType ProductType { get; set; }
		
		/// <summary>
		/// Any secondary Identification which  supports Product Identifier to uniquely identify the current account banking products.
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string SecondaryProductId { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductType
	{
		
		/// <summary>
		/// Details about the interest that may be payable to the Account holders
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeCreditInterest CreditInterest { get; set; }
		
		/// <summary>
		/// Description of the Product associated with the account
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Details about the interest that may be payable to the SME Loan holders
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterest LoanInterest { get; set; }
		
		/// <summary>
		/// Long name associated with the product
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeOtherFeesCharges[] OBReadProduct2DataProductOtherProductTypeOtherFeesCharges { get; set; }
		
		/// <summary>
		/// Borrowing details
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeOverdraft Overdraft { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeProductDetails ProductDetails { get; set; }
		
		/// <summary>
		/// Repayment details of the Loan product
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeRepayment Repayment { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeCreditInterest
	{
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSet[] OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSet { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSet
	{
		
		/// <summary>
		/// Methods of calculating interest
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSetCalculationMethod> CalculationMethod { get; set; }
		
		/// <summary>
		/// Describes whether accrued interest is payable only to the BCA or to another bank account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSetDestination Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OB_OtherCodeType1_0 OtherCalculationMethod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OB_OtherCodeType1_0 OtherDestination { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSetTierBand[] OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSetTierBand { get; set; }
		
		/// <summary>
		/// The methodology of how credit interest is paid/applied. It can be:-
		///1. Banded
		///Interest rates are banded. i.e. Increasing rate on whole balance as balance increases.
		///2. Tiered
		///Interest rates are tiered. i.e. increasing rate for each tier as balance increases, but interest paid on tier fixed for that tier and not on whole balance.
		///3. Whole
		///The same interest rate is applied irrespective of the product holder's account balance
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSetTierBandDepositInterestAppliedCoverage TierBandMethod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSetCalculationMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITCO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITOT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITSI = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSetDestination
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INOT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INPA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSC = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OB_OtherCodeType1_0
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Pattern: ^\\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSetTierBand
	{
		
		/// <summary>
		/// The annual equivalent rate (AER) is interest that is calculated under the assumption that any interest paid is combined with the original balance and the next interest payment will be based on the slightly higher account balance. Overall, this means that interest can be compounded several times in a year depending on the number of times that interest payments are made. 
		///Read more: Annual Equivalent Rate (AER) http://www.investopedia.com/terms/a/aer.asp#ixzz4gfR7IO1A
		/// Required
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string AER { get; set; }
		
		/// <summary>
		/// How often is interest applied to the Product for this tier/band i.e. how often the financial institution pays accumulated interest to the customer's account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSetTierBandApplicationFrequency ApplicationFrequency { get; set; }
		
		/// <summary>
		/// Bank Interest for the product
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string BankInterestRate { get; set; }
		
		/// <summary>
		/// Interest rate types, other than AER, which financial institutions may use to describe the annual interest rate payable to the account holder's account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSetTierBandBankInterestRateType> BankInterestRateType { get; set; }
		
		/// <summary>
		/// How often is credit interest calculated for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSetTierBandApplicationFrequency CalculationFrequency { get; set; }
		
		/// <summary>
		/// Amount on which Interest applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSetTierBandDepositInterestAppliedCoverage> DepositInterestAppliedCoverage { get; set; }
		
		/// <summary>
		/// Type of interest rate, Fixed or Variable
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSetTierBandFixedVariableInterestRateType FixedVariableInterestRateType { get; set; }
		
		/// <summary>
		/// Unique and unambiguous identification of a  Tier Band for the Product.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Identification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Other application frequencies that are not available in the standard code list
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OB_OtherCodeType1_1 OtherApplicationFrequency { get; set; }
		
		/// <summary>
		/// Other interest rate types which are not available in the standard code list
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSetTierBandOtherBankInterestType OtherBankInterestType { get; set; }
		
		/// <summary>
		/// Other calculation frequency which is not available in the standard code set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OB_OtherCodeType1_2 OtherCalculationFrequency { get; set; }
		
		/// <summary>
		/// Maximum deposit value for which the credit interest tier applies.
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string TierValueMaximum { get; set; }
		
		/// <summary>
		/// Minimum deposit value for which the credit interest tier applies.
		/// Required
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string TierValueMinimum { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSetTierBandApplicationFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FQAT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FQDY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FQHY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FQMY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FQOT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FQQY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FQSD = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FQWY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FQYY = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSetTierBandBankInterestRateType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INBB = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INGR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INLR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INNE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INOT = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSetTierBandDepositInterestAppliedCoverage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INBA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTI = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INWH = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSetTierBandFixedVariableInterestRateType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFI = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVA = 1,
	}
	
	/// <summary>
	/// Other application frequencies that are not available in the standard code list
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OB_OtherCodeType1_1
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Pattern: ^\\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSetTierBandOtherBankInterestType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Pattern: ^\\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Other calculation frequency which is not available in the standard code set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OB_OtherCodeType1_2
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Pattern: ^\\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeLoanInterest
	{
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSet[] OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSet
	{
		
		/// <summary>
		/// Methods of calculating interest
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSetCalculationMethod CalculationMethod { get; set; }
		
		/// <summary>
		/// Loan interest tierbandset identification. Used by  loan providers for internal use purpose.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Identification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesCharges[] OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesCharges { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestTierBand[] OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestTierBand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OB_OtherCodeType1_0 OtherCalculationMethod { get; set; }
		
		/// <summary>
		/// The methodology of how credit interest is charged. It can be:-
		///1. Banded
		///Interest rates are banded. i.e. Increasing rate on whole balance as balance increases.
		///2. Tiered
		///Interest rates are tiered. i.e. increasing rate for each tier as balance increases, but interest paid on tier fixed for that tier and not on whole balance.
		///3. Whole
		///The same interest rate is applied irrespective of the SME Loan balance
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSetTierBandDepositInterestAppliedCoverage TierBandMethod { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesCharges
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeCap[] OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeCap { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeDetail[] OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeDetail { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeCap
	{
		
		/// <summary>
		/// Period e.g. day, week, month etc. for which the fee/charge is capped
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeCapCappingPeriod> CappingPeriod { get; set; }
		
		/// <summary>
		/// Cap amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string FeeCapAmount { get; set; }
		
		/// <summary>
		/// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FeeCapOccurrence { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] FeeType { get; set; }
		
		/// <summary>
		/// Min Max type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeCapMinMaxType MinMaxType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeCapOtherFeeType[] OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeCapOtherFeeType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeCapCappingPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEAC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEAO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FECP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEDA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEHO = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEI = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEMO = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEOA = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEOT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPC = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPH = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPO = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPS = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPT = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPTA = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPTP = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEQU = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FESM = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEST = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEWE = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEYE = 20,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeCapMinMaxType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FMMN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FMMX = 1,
	}
	
	public class OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeCapOtherFeeType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Pattern: ^\\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeDetail
	{
		
		/// <summary>
		/// How frequently the fee/charge is applied to the account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeCapCappingPeriod ApplicationFrequency { get; set; }
		
		/// <summary>
		/// How frequently the fee/charge is calculated
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeCapCappingPeriod CalculationFrequency { get; set; }
		
		/// <summary>
		/// Fee Amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string FeeAmount { get; set; }
		
		/// <summary>
		/// Rate charged for Fee/Charge (where it is charged in terms of a rate rather than an amount)
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string FeeRate { get; set; }
		
		/// <summary>
		/// Rate type for Fee/Charge (where it is charged in terms of a rate rather than an amount)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSetTierBandBankInterestRateType FeeRateType { get; set; }
		
		/// <summary>
		/// Fee/Charge Type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeDetailFeeType FeeType { get; set; }
		
		/// <summary>
		/// Fee/charge which is usually negotiable rather than a fixed amount
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> NegotiableIndicator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Other application frequencies not covered in the standard code list
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OB_OtherCodeType1_6 OtherApplicationFrequency { get; set; }
		
		/// <summary>
		/// Other calculation frequency which is not available in standard code set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OB_OtherCodeType1_7 OtherCalculationFrequency { get; set; }
		
		/// <summary>
		/// Other fee rate type which is not in the standard rate type list
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OB_OtherCodeType1_5 OtherFeeRateType { get; set; }
		
		/// <summary>
		/// Other Fee/charge type which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OB_OtherFeeChargeDetailType OtherFeeType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeDetailFeeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FTOT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FYAF = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FYAM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FYAQ = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FYCP = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FYDB = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FYMI = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FYXX = 8,
	}
	
	/// <summary>
	/// Other application frequencies not covered in the standard code list
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OB_OtherCodeType1_6
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Pattern: ^\\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Other calculation frequency which is not available in standard code set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OB_OtherCodeType1_7
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Pattern: ^\\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Other fee rate type which is not in the standard rate type list
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OB_OtherCodeType1_5
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Pattern: ^\\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Other Fee/charge type which is not available in the standard code set
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OB_OtherFeeChargeDetailType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Pattern: ^\\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Categorisation of fees and charges into standard categories.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OB_OtherFeeChargeDetailTypeFeeCategory FeeCategory { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OB_OtherFeeChargeDetailTypeFeeCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FCOT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FCRE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FCSV = 2,
	}
	
	public class OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestTierBand
	{
		
		/// <summary>
		/// Type of interest rate, Fixed or Variable
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSetTierBandFixedVariableInterestRateType FixedVariableInterestRateType { get; set; }
		
		/// <summary>
		/// Unique and unambiguous identification of a  Tier Band for a SME Loan.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Identification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestTierBandLoanInterestFeesCharges[] OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestTierBandLoanInterestFeesCharges { get; set; }
		
		/// <summary>
		/// Loan provider Interest for the SME Loan product
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string LoanProviderInterestRate { get; set; }
		
		/// <summary>
		/// Interest rate types, other than APR, which financial institutions may use to describe the annual interest rate payable for the SME Loan.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSetTierBandBankInterestRateType LoanProviderInterestRateType { get; set; }
		
		/// <summary>
		/// The unit of period (days, weeks, months etc.) of the Maximum Term
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestTierBandMaxTermPeriod> MaxTermPeriod { get; set; }
		
		/// <summary>
		/// The unit of period (days, weeks, months etc.) of the Minimum Term
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestTierBandMaxTermPeriod MinTermPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Other loan interest rate types which are not available in the standard code list
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestTierBandOtherLoanProviderInterestRateType OtherLoanProviderInterestRateType { get; set; }
		
		/// <summary>
		/// The annual equivalent rate (AER) is interest that is calculated under the assumption that any interest paid is combined with the original balance and the next interest payment will be based on the slightly higher account balance. Overall, this means that interest can be compounded several times in a year depending on the number of times that interest payments are made. 
		///For SME Loan, this APR is the representative APR which includes any account fees.
		/// Required
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string RepAPR { get; set; }
		
		/// <summary>
		/// Maximum loan term for which the loan interest tier applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TierValueMaxTerm { get; set; }
		
		/// <summary>
		/// Maximum loan value for which the loan interest tier applies.
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string TierValueMaximum { get; set; }
		
		/// <summary>
		/// Minimum loan term for which the loan interest tier applies.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int TierValueMinTerm { get; set; }
		
		/// <summary>
		/// Minimum loan value for which the loan interest tier applies.
		/// Required
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string TierValueMinimum { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestTierBandLoanInterestFeesCharges
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestTierBandLoanInterestFeesChargesLoanInterestFeeChargeCap[] OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestTierBandLoanInterestFeesChargesLoanInterestFeeChargeCap { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestTierBandLoanInterestFeesChargesLoanInterestFeeChargeDetail[] OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestTierBandLoanInterestFeesChargesLoanInterestFeeChargeDetail { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestTierBandLoanInterestFeesChargesLoanInterestFeeChargeCap
	{
		
		/// <summary>
		/// Period e.g. day, week, month etc. for which the fee/charge is capped
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeCapCappingPeriod CappingPeriod { get; set; }
		
		/// <summary>
		/// Cap amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string FeeCapAmount { get; set; }
		
		/// <summary>
		/// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FeeCapOccurrence { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeDetailFeeType[] FeeType { get; set; }
		
		/// <summary>
		/// Min Max type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeCapMinMaxType MinMaxType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestTierBandLoanInterestFeesChargesLoanInterestFeeChargeCapOtherFeeType[] OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestTierBandLoanInterestFeesChargesLoanInterestFeeChargeCapOtherFeeType { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestTierBandLoanInterestFeesChargesLoanInterestFeeChargeCapOtherFeeType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Pattern: ^\\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestTierBandLoanInterestFeesChargesLoanInterestFeeChargeDetail
	{
		
		/// <summary>
		/// How frequently the fee/charge is applied to the account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeCapCappingPeriod ApplicationFrequency { get; set; }
		
		/// <summary>
		/// How frequently the fee/charge is calculated
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeCapCappingPeriod CalculationFrequency { get; set; }
		
		/// <summary>
		/// Fee Amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string FeeAmount { get; set; }
		
		/// <summary>
		/// Rate charged for Fee/Charge (where it is charged in terms of a rate rather than an amount)
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string FeeRate { get; set; }
		
		/// <summary>
		/// Rate type for Fee/Charge (where it is charged in terms of a rate rather than an amount)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSetTierBandBankInterestRateType FeeRateType { get; set; }
		
		/// <summary>
		/// Fee/Charge Type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeDetailFeeType FeeType { get; set; }
		
		/// <summary>
		/// Fee/charge which is usually negotiable rather than a fixed amount
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> NegotiableIndicator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Other application frequencies not covered in the standard code list
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OB_OtherCodeType1_6 OtherApplicationFrequency { get; set; }
		
		/// <summary>
		/// Other calculation frequency which is not available in standard code set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OB_OtherCodeType1_7 OtherCalculationFrequency { get; set; }
		
		/// <summary>
		/// Other fee rate type which is not in the standard rate type list
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OB_OtherCodeType1_5 OtherFeeRateType { get; set; }
		
		/// <summary>
		/// Other Fee/charge type which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OB_OtherFeeChargeDetailType OtherFeeType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestTierBandMaxTermPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PACT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PDAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHYR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PMTH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PQTR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PWEK = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PYER = 6,
	}
	
	public class OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestTierBandOtherLoanProviderInterestRateType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Pattern: ^\\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeOtherFeesCharges
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeOtherFeesChargesFeeChargeCap[] OBReadProduct2DataProductOtherProductTypeOtherFeesChargesFeeChargeCap { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBReadProduct2DataProductOtherProductTypeOtherFeesChargesFeeChargeDetail[] OBReadProduct2DataProductOtherProductTypeOtherFeesChargesFeeChargeDetail { get; set; }
		
		/// <summary>
		/// Other tariff type which is not in the standard list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeOtherFeesChargesOtherTariffType OtherTariffType { get; set; }
		
		/// <summary>
		/// Name of the tariff
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string TariffName { get; set; }
		
		/// <summary>
		/// TariffType which defines the fee and charges.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBReadProduct2DataProductOtherProductTypeOtherFeesChargesTariffType> TariffType { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeOtherFeesChargesFeeChargeCap
	{
		
		/// <summary>
		/// Period e.g. day, week, month etc. for which the fee/charge is capped
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestTierBandMaxTermPeriod CappingPeriod { get; set; }
		
		/// <summary>
		/// Cap amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string FeeCapAmount { get; set; }
		
		/// <summary>
		/// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FeeCapOccurrence { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeDetailFeeType[] FeeType { get; set; }
		
		/// <summary>
		/// Min Max type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeCapMinMaxType MinMaxType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeOtherFeesChargesFeeChargeCapOtherFeeType[] OBReadProduct2DataProductOtherProductTypeOtherFeesChargesFeeChargeCapOtherFeeType { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeOtherFeesChargesFeeChargeCapOtherFeeType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Pattern: ^\\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeOtherFeesChargesFeeChargeDetail
	{
		
		/// <summary>
		/// How frequently the fee/charge is applied to the account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeCapCappingPeriod ApplicationFrequency { get; set; }
		
		/// <summary>
		/// How frequently the fee/charge is calculated
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeCapCappingPeriod CalculationFrequency { get; set; }
		
		/// <summary>
		/// Fee Amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string FeeAmount { get; set; }
		
		/// <summary>
		/// Range or amounts or rates for which the fee/charge applies
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeOtherFeesChargesFeeChargeDetailFeeApplicableRange FeeApplicableRange { get; set; }
		
		/// <summary>
		/// Categorisation of fees and charges into standard categories.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OB_OtherFeeChargeDetailTypeFeeCategory FeeCategory { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeOtherFeesChargesFeeChargeDetailFeeChargeCap[] OBReadProduct2DataProductOtherProductTypeOtherFeesChargesFeeChargeDetailFeeChargeCap { get; set; }
		
		/// <summary>
		/// Rate charged for Fee/Charge (where it is charged in terms of a rate rather than an amount)
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string FeeRate { get; set; }
		
		/// <summary>
		/// Rate type for Fee/Charge (where it is charged in terms of a rate rather than an amount)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSetTierBandBankInterestRateType FeeRateType { get; set; }
		
		/// <summary>
		/// Fee/Charge Type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeDetailFeeType FeeType { get; set; }
		
		/// <summary>
		/// Fee/charge which is usually negotiable rather than a fixed amount
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> NegotiableIndicator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Other application frequencies not covered in the standard code list
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OB_OtherCodeType1_6 OtherApplicationFrequency { get; set; }
		
		/// <summary>
		/// Other calculation frequency which is not available in standard code set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OB_OtherCodeType1_7 OtherCalculationFrequency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OB_OtherCodeType1_0 OtherFeeCategoryType { get; set; }
		
		/// <summary>
		/// Other fee rate type which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OB_OtherCodeType1_8 OtherFeeRateType { get; set; }
		
		/// <summary>
		/// Other Fee/charge type which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OB_OtherFeeChargeDetailType OtherFeeType { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeOtherFeesChargesFeeChargeDetailFeeApplicableRange
	{
		
		/// <summary>
		/// Maximum Amount on which fee is applicable (where it is expressed as an amount)
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string MaximumAmount { get; set; }
		
		/// <summary>
		/// Maximum rate on which fee/charge is applicable(where it is expressed as an rate)
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string MaximumRate { get; set; }
		
		/// <summary>
		/// Minimum Amount on which fee/charge is applicable (where it is expressed as an amount)
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string MinimumAmount { get; set; }
		
		/// <summary>
		/// Minimum rate on which fee/charge is applicable(where it is expressed as an rate)
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string MinimumRate { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeOtherFeesChargesFeeChargeDetailFeeChargeCap
	{
		
		/// <summary>
		/// Period e.g. day, week, month etc. for which the fee/charge is capped
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestTierBandMaxTermPeriod CappingPeriod { get; set; }
		
		/// <summary>
		/// Cap amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string FeeCapAmount { get; set; }
		
		/// <summary>
		/// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FeeCapOccurrence { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeDetailFeeType[] FeeType { get; set; }
		
		/// <summary>
		/// Min Max type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeCapMinMaxType MinMaxType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeOtherFeesChargesFeeChargeDetailFeeChargeCapOtherFeeType[] OBReadProduct2DataProductOtherProductTypeOtherFeesChargesFeeChargeDetailFeeChargeCapOtherFeeType { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeOtherFeesChargesFeeChargeDetailFeeChargeCapOtherFeeType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Pattern: ^\\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Other fee rate type which is not available in the standard code set
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OB_OtherCodeType1_8
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Pattern: ^\\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeOtherFeesChargesOtherTariffType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Pattern: ^\\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBReadProduct2DataProductOtherProductTypeOtherFeesChargesTariffType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TTEL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TTMX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TTOT = 2,
	}
	
	public class OBReadProduct2DataProductOtherProductTypeOverdraft
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSet[] OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSet { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSet
	{
		
		/// <summary>
		/// Indicates if the Overdraft is authorised (Y) or unauthorised (N)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AuthorisedIndicator { get; set; }
		
		/// <summary>
		/// When a customer exceeds their credit limit, a financial institution will not charge the customer unauthorised overdraft charges if they do not exceed by more than the buffer amount. Note: Authorised overdraft charges may still apply.
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string BufferAmount { get; set; }
		
		/// <summary>
		/// Unique and unambiguous identification of a  Tier Band for a overdraft product.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Identification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftFeesCharges[] OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftFeesCharges { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftTierBand[] OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftTierBand { get; set; }
		
		/// <summary>
		/// An overdraft can either be 'committed' which means that the facility cannot be withdrawn without reasonable notification before it's agreed end date, or 'on demand' which means that the financial institution can demand repayment at any point in time.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftType> OverdraftType { get; set; }
		
		/// <summary>
		/// The methodology of how overdraft is charged. It can be:
		///'Whole'  Where the same charge/rate is applied to the entirety of the overdraft balance (where charges are applicable). 
		///'Tiered' Where different charges/rates are applied dependent on overdraft maximum and minimum balance amount tiers defined by the lending financial organisation
		///'Banded' Where different charges/rates are applied dependent on overdraft maximum and minimum balance amount bands defined by a government organisation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSetTierBandDepositInterestAppliedCoverage TierBandMethod { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftFeesCharges
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeCap[] OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeCap { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetail[] OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetail { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeCap
	{
		
		/// <summary>
		/// Period e.g. day, week, month etc. for which the fee/charge is capped
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestTierBandMaxTermPeriod CappingPeriod { get; set; }
		
		/// <summary>
		/// Cap amount charged for a fee/charge
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string FeeCapAmount { get; set; }
		
		/// <summary>
		/// Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it�s part of a government scheme, or whether the rate may vary dependent on the applicant�s circumstances.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FeeCapOccurrence { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] FeeType { get; set; }
		
		/// <summary>
		/// Min Max type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeCapMinMaxType MinMaxType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeCapOtherFeeType[] OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeCapOtherFeeType { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeCapOtherFeeType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Pattern: ^\\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetail
	{
		
		/// <summary>
		/// Frequency at which the overdraft charge is applied to the account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeCapCappingPeriod ApplicationFrequency { get; set; }
		
		/// <summary>
		/// How often is the overdraft fee/charge calculated for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeCapCappingPeriod CalculationFrequency { get; set; }
		
		/// <summary>
		/// Amount charged for an overdraft fee/charge (where it is charged in terms of an amount rather than a rate)
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string FeeAmount { get; set; }
		
		/// <summary>
		/// Rate charged for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string FeeRate { get; set; }
		
		/// <summary>
		/// Rate type for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSetTierBandBankInterestRateType FeeRateType { get; set; }
		
		/// <summary>
		/// Overdraft fee type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailFeeType FeeType { get; set; }
		
		/// <summary>
		/// Every additional tranche of an overdraft balance to which an overdraft fee is applied
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string IncrementalBorrowingAmount { get; set; }
		
		/// <summary>
		/// Indicates whether fee and charges are negotiable
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> NegotiableIndicator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Other application frequencies that are not available in the standard code list
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OB_OtherCodeType1_1 OtherApplicationFrequency { get; set; }
		
		/// <summary>
		/// Other calculation frequency which is not available in the standard code set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OB_OtherCodeType1_2 OtherCalculationFrequency { get; set; }
		
		/// <summary>
		/// Other fee rate type code which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OB_OtherCodeType1_4 OtherFeeRateType { get; set; }
		
		/// <summary>
		/// Other Fee type which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OB_OtherCodeType1_3 OtherFeeType { get; set; }
		
		/// <summary>
		/// Indicates if the fee/charge is already covered by an 'Overdraft Control' fee or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OverdraftControlIndicator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCap[] OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCap { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailFeeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FBAO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FBAR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FBEB = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FBIT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FBOR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FBOS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FBSC = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FBTO = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FBUB = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FBUT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FTOT = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FTUT = 11,
	}
	
	/// <summary>
	/// Other fee rate type code which is not available in the standard code set
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OB_OtherCodeType1_4
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Pattern: ^\\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Other Fee type which is not available in the standard code set
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OB_OtherCodeType1_3
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Pattern: ^\\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCap
	{
		
		/// <summary>
		/// Period e.g. day, week, month etc. for which the fee/charge is capped
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestTierBandMaxTermPeriod CappingPeriod { get; set; }
		
		/// <summary>
		/// Cap amount charged for a fee/charge
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string FeeCapAmount { get; set; }
		
		/// <summary>
		/// Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it�s part of a government scheme, or whether the rate may vary dependent on the applicant�s circumstances.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FeeCapOccurrence { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailFeeType[] FeeType { get; set; }
		
		/// <summary>
		/// Min Max type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeCapMinMaxType MinMaxType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCapOtherFeeType[] OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCapOtherFeeType { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCapOtherFeeType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Pattern: ^\\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftTierBand
	{
		
		/// <summary>
		/// Specifies the maximum length of a band for a fixed overdraft agreement
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AgreementLengthMax { get; set; }
		
		/// <summary>
		/// Specifies the minimum length of a band for a fixed overdraft agreement
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AgreementLengthMin { get; set; }
		
		/// <summary>
		/// Specifies the period of a fixed length overdraft agreement
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestTierBandMaxTermPeriod AgreementPeriod { get; set; }
		
		/// <summary>
		/// Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it�s part of a government scheme, or whether the rate may vary dependent on the applicant�s circumstances.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> BankGuaranteedIndicator { get; set; }
		
		/// <summary>
		/// EAR means Effective Annual Rate and/or Equivalent Annual Rate (frequently
		///used interchangeably), being the actual annual interest rate of an Overdraft.
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string EAR { get; set; }
		
		/// <summary>
		/// Unique and unambiguous identification of a  Tier Band for a overdraft.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Identification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesCharges[] OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesCharges { get; set; }
		
		/// <summary>
		/// Refers to which interest rate is applied when interests are tiered. For example, if an overdraft balance is �2k and the interest tiers are:- 0-�500 0.1%, 500-1000 0.2%, 1000-10000 0.5%, then the applicable interest rate could either be 0.5% of the entire balance (since the account balance sits in the top interest tier) or (0.1%*500)+(0.2%*500)+(0.5%*1000). In the 1st situation, we say the interest is applied to the �Whole� of the account balance,  and in the 2nd that it is �Tiered�.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSetTierBandDepositInterestAppliedCoverage OverdraftInterestChargingCoverage { get; set; }
		
		/// <summary>
		/// Maximum value of Overdraft Tier/Band
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string TierValueMax { get; set; }
		
		/// <summary>
		/// Minimum value of Overdraft Tier/Band
		/// Required
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string TierValueMin { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesCharges
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeCap[] OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeCap { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetail[] OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetail { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeCap
	{
		
		/// <summary>
		/// Period e.g. day, week, month etc. for which the fee/charge is capped
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestTierBandMaxTermPeriod CappingPeriod { get; set; }
		
		/// <summary>
		/// Cap amount charged for a fee/charge
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string FeeCapAmount { get; set; }
		
		/// <summary>
		/// Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it�s part of a government scheme, or whether the rate may vary dependent on the applicant�s circumstances.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FeeCapOccurrence { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailFeeType[] FeeType { get; set; }
		
		/// <summary>
		/// Min Max type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeCapMinMaxType MinMaxType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeCapOtherFeeType[] OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeCapOtherFeeType { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeCapOtherFeeType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Pattern: ^\\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetail
	{
		
		/// <summary>
		/// Frequency at which the overdraft charge is applied to the account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeCapCappingPeriod ApplicationFrequency { get; set; }
		
		/// <summary>
		/// How often is the overdraft fee/charge calculated for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeCapCappingPeriod CalculationFrequency { get; set; }
		
		/// <summary>
		/// Amount charged for an overdraft fee/charge (where it is charged in terms of an amount rather than a rate)
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string FeeAmount { get; set; }
		
		/// <summary>
		/// Rate charged for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string FeeRate { get; set; }
		
		/// <summary>
		/// Rate type for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSetTierBandBankInterestRateType FeeRateType { get; set; }
		
		/// <summary>
		/// Overdraft fee type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailFeeType FeeType { get; set; }
		
		/// <summary>
		/// Every additional tranche of an overdraft balance to which an overdraft fee is applied
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string IncrementalBorrowingAmount { get; set; }
		
		/// <summary>
		/// Indicates whether fee and charges are negotiable
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> NegotiableIndicator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Other application frequencies that are not available in the standard code list
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OB_OtherCodeType1_1 OtherApplicationFrequency { get; set; }
		
		/// <summary>
		/// Other calculation frequency which is not available in the standard code set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OB_OtherCodeType1_2 OtherCalculationFrequency { get; set; }
		
		/// <summary>
		/// Other fee rate type code which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OB_OtherCodeType1_4 OtherFeeRateType { get; set; }
		
		/// <summary>
		/// Other Fee type which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OB_OtherCodeType1_3 OtherFeeType { get; set; }
		
		/// <summary>
		/// Indicates if the fee/charge is already covered by an 'Overdraft Control' fee or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OverdraftControlIndicator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCap[] OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCap { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCap
	{
		
		/// <summary>
		/// Period e.g. day, week, month etc. for which the fee/charge is capped
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestTierBandMaxTermPeriod CappingPeriod { get; set; }
		
		/// <summary>
		/// Cap amount charged for a fee/charge
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string FeeCapAmount { get; set; }
		
		/// <summary>
		/// Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it�s part of a government scheme, or whether the rate may vary dependent on the applicant�s circumstances.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FeeCapOccurrence { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftFeesChargesOverdraftFeeChargeDetailFeeType[] FeeType { get; set; }
		
		/// <summary>
		/// Min Max type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeCapMinMaxType MinMaxType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCapOtherFeeType[] OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCapOtherFeeType { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftTierBandOverdraftFeesChargesOverdraftFeeChargeDetailOverdraftFeeChargeCapOtherFeeType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Pattern: ^\\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBReadProduct2DataProductOtherProductTypeOverdraftOverdraftTierBandSetOverdraftType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OVCO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OVOD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OVOT = 2,
	}
	
	public class OBReadProduct2DataProductOtherProductTypeProductDetails
	{
		
		/// <summary>
		/// The length/duration of the fee free period
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FeeFreeLength { get; set; }
		
		/// <summary>
		/// The unit of period (days, weeks, months etc.) of the promotional length
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestTierBandMaxTermPeriod FeeFreeLengthPeriod { get; set; }
		
		/// <summary>
		/// The maximum relevant charges that could accrue as defined fully in Part 7 of the CMA order
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string MonthlyMaximumCharge { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OB_OtherCodeType1_0 OtherSegment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Segment { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeRepayment
	{
		
		/// <summary>
		/// The repayment is for paying just the interest only or both interest and capital or bullet amount or balance to date etc
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBReadProduct2DataProductOtherProductTypeRepaymentAmountType> AmountType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Other amount type which is not in the standard code list
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeRepaymentOtherAmountType OtherAmountType { get; set; }
		
		/// <summary>
		/// Other repayment frequency which is not in the standard code list
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeRepaymentOtherRepaymentFrequency OtherRepaymentFrequency { get; set; }
		
		/// <summary>
		/// Other repayment type which is not in the standard code list
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeRepaymentOtherRepaymentType OtherRepaymentType { get; set; }
		
		/// <summary>
		/// Applicable fee/charges for repayment such as prepayment, full early repayment or non repayment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeRepaymentRepaymentFeeCharges RepaymentFeeCharges { get; set; }
		
		/// <summary>
		/// Repayment frequency
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBReadProduct2DataProductOtherProductTypeRepaymentRepaymentFrequency> RepaymentFrequency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeRepaymentRepaymentHoliday[] OBReadProduct2DataProductOtherProductTypeRepaymentRepaymentHoliday { get; set; }
		
		/// <summary>
		/// Repayment type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBReadProduct2DataProductOtherProductTypeRepaymentRepaymentType> RepaymentType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBReadProduct2DataProductOtherProductTypeRepaymentAmountType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RABD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RABL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RACI = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RAFC = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RAIO = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RALT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USOT = 6,
	}
	
	public class OBReadProduct2DataProductOtherProductTypeRepaymentOtherAmountType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Pattern: ^\\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeRepaymentOtherRepaymentFrequency
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Pattern: ^\\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeRepaymentOtherRepaymentType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Pattern: ^\\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeRepaymentRepaymentFeeCharges
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCap[] OBReadProduct2DataProductOtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCap { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBReadProduct2DataProductOtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeDetail[] OBReadProduct2DataProductOtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeDetail { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCap
	{
		
		/// <summary>
		/// Period e.g. day, week, month etc. for which the fee/charge is capped
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestTierBandMaxTermPeriod CappingPeriod { get; set; }
		
		/// <summary>
		/// Cap amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string FeeCapAmount { get; set; }
		
		/// <summary>
		/// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FeeCapOccurrence { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeDetailFeeType[] FeeType { get; set; }
		
		/// <summary>
		/// Min Max type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeCapMinMaxType MinMaxType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapOtherFeeType[] OBReadProduct2DataProductOtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapOtherFeeType { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapOtherFeeType
	{
		
		/// <summary>
		/// The four letter Mnemonic used within an XML file to identify a code
		/// Pattern: ^\\w{0,4}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\\w{0,4}$")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description to describe the purpose of the code
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Description { get; set; }
		
		/// <summary>
		/// Long name associated with the code
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
	}
	
	public class OBReadProduct2DataProductOtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeDetail
	{
		
		/// <summary>
		/// How frequently the fee/charge is applied to the account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeCapCappingPeriod ApplicationFrequency { get; set; }
		
		/// <summary>
		/// How frequently the fee/charge is calculated
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeCapCappingPeriod CalculationFrequency { get; set; }
		
		/// <summary>
		/// Fee Amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
		/// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
		public string FeeAmount { get; set; }
		
		/// <summary>
		/// Rate charged for Fee/Charge (where it is charged in terms of a rate rather than an amount)
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string FeeRate { get; set; }
		
		/// <summary>
		/// Rate type for Fee/Charge (where it is charged in terms of a rate rather than an amount)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeCreditInterestTierBandSetTierBandBankInterestRateType FeeRateType { get; set; }
		
		/// <summary>
		/// Fee/Charge Type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestFeesChargesLoanInterestFeeChargeDetailFeeType FeeType { get; set; }
		
		/// <summary>
		/// Fee/charge which is usually negotiable rather than a fixed amount
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> NegotiableIndicator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// Other application frequencies not covered in the standard code list
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OB_OtherCodeType1_6 OtherApplicationFrequency { get; set; }
		
		/// <summary>
		/// Other calculation frequency which is not available in standard code set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OB_OtherCodeType1_7 OtherCalculationFrequency { get; set; }
		
		/// <summary>
		/// Other fee rate type which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OB_OtherCodeType1_8 OtherFeeRateType { get; set; }
		
		/// <summary>
		/// Other Fee/charge type which is not available in the standard code set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OB_OtherFeeChargeDetailType OtherFeeType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBReadProduct2DataProductOtherProductTypeRepaymentRepaymentFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMDA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMFL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMFO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMHY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMMO = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMOT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMQU = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMWE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMYE = 8,
	}
	
	public class OBReadProduct2DataProductOtherProductTypeRepaymentRepaymentHoliday
	{
		
		/// <summary>
		/// The maximum length/duration of a Repayment Holiday
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxHolidayLength { get; set; }
		
		/// <summary>
		/// The unit of period (days, weeks, months etc.) of the repayment holiday
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBReadProduct2DataProductOtherProductTypeLoanInterestLoanInterestTierBandSetLoanInterestTierBandMaxTermPeriod MaxHolidayPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Notes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBReadProduct2DataProductOtherProductTypeRepaymentRepaymentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USBA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USBU = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USCI = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USCS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USFA = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USFB = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USFI = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USIO = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USOT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USPF = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USRW = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USSL = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBReadProduct2DataProductProductType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BusinessCurrentAccount = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CommercialCreditCard = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PersonalCurrentAccount = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMELoan = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBReadScheduledPayment3
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadScheduledPayment3Data Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
	}
	
	public class OBReadScheduledPayment3Data
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OBScheduledPayment3[] ScheduledPayment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBScheduledPayment3
	{
		
		/// <summary>
		/// A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Provides the details to identify the beneficiary account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBCashAccount5_1 CreditorAccount { get; set; }
		
		/// <summary>
		/// Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
		///This is the servicer of the beneficiary account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBranchAndFinancialInstitutionIdentification5_1 CreditorAgent { get; set; }
		
		/// <summary>
		/// A reference value provided by the PSU to the PISP while setting up the scheduled payment.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string DebtorReference { get; set; }
		
		/// <summary>
		/// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
		///Usage: This amount has to be transported unchanged through the transaction chain.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount_1 InstructedAmount { get; set; }
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// The date on which the scheduled payment will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ScheduledPaymentDateTime { get; set; }
		
		/// <summary>
		/// A unique and immutable identifier used to identify the scheduled payment resource. This identifier has no meaning to the account owner.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string ScheduledPaymentId { get; set; }
		
		/// <summary>
		/// Specifies the scheduled payment date type requested
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBExternalScheduleType1Code ScheduledType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBReadStandingOrder6
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadStandingOrder6Data Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
	}
	
	public class OBReadStandingOrder6Data
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OBStandingOrder6[] StandingOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBStandingOrder6
	{
		
		/// <summary>
		/// A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Provides the details to identify the beneficiary account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBCashAccount5_1 CreditorAccount { get; set; }
		
		/// <summary>
		/// Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
		///This is the servicer of the beneficiary account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBranchAndFinancialInstitutionIdentification5_1 CreditorAgent { get; set; }
		
		/// <summary>
		/// The amount of the final Standing Order
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount_4 FinalPaymentAmount { get; set; }
		
		/// <summary>
		/// The date on which the final payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FinalPaymentDateTime { get; set; }
		
		/// <summary>
		/// The amount of the first Standing Order
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount_2 FirstPaymentAmount { get; set; }
		
		/// <summary>
		/// The date on which the first payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FirstPaymentDateTime { get; set; }
		
		/// <summary>
		/// Individual Definitions:
		///NotKnown - Not Known
		///EvryDay - Every day
		///EvryWorkgDay - Every working day
		///IntrvlDay - An interval specified in number of calendar days (02 to 31)
		///IntrvlWkDay - An interval specified in weeks (01 to 09), and the day within the week (01 to 07)
		///WkInMnthDay - A monthly interval, specifying the week of the month (01 to 05) and day within the week (01 to 07)
		///IntrvlMnthDay - An interval specified in months (between 01 to 06, 12, 24), specifying the day within the month (-05 to -01, 01 to 31)
		///QtrDay - Quarterly (either ENGLISH, SCOTTISH, or RECEIVED)
		///ENGLISH = Paid on the 25th March, 24th June, 29th September and 25th December.
		///SCOTTISH = Paid on the 2nd February, 15th May, 1st August and 11th November.
		///RECEIVED = Paid on the 20th March, 19th June, 24th September and 20th December.
		///Individual Patterns:
		///NotKnown (ScheduleCode)
		///EvryDay (ScheduleCode)
		///EvryWorkgDay (ScheduleCode)
		///IntrvlDay:NoOfDay (ScheduleCode + NoOfDay)
		///IntrvlWkDay:IntervalInWeeks:DayInWeek (ScheduleCode + IntervalInWeeks + DayInWeek)
		///WkInMnthDay:WeekInMonth:DayInWeek (ScheduleCode + WeekInMonth + DayInWeek)
		///IntrvlMnthDay:IntervalInMonths:DayInMonth (ScheduleCode + IntervalInMonths + DayInMonth)
		///QtrDay: + either (ENGLISH, SCOTTISH or RECEIVED) ScheduleCode + QuarterDay
		///The regular expression for this element combines five smaller versions for each permitted pattern. To aid legibility - the components are presented individually here:
		///NotKnown
		///EvryDay
		///EvryWorkgDay
		///IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1])
		///IntrvlWkDay:0[1-9]:0[1-7]
		///WkInMnthDay:0[1-5]:0[1-7]
		///IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01])
		///QtrDay:(ENGLISH|SCOTTISH|RECEIVED)
		///Full Regular Expression:
		///^(NotKnown)$|^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$
		/// Required
		/// Pattern: ^(NotKnown)$|^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(NotKnown)$|^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$")]
		public string Frequency { get; set; }
		
		/// <summary>
		/// The amount of the last (most recent) Standing Order instruction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount_11 LastPaymentAmount { get; set; }
		
		/// <summary>
		/// The date on which the last (most recent) payment for a Standing Order schedule was made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastPaymentDateTime { get; set; }
		
		/// <summary>
		/// The amount of the next Standing Order.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount_3 NextPaymentAmount { get; set; }
		
		/// <summary>
		/// The date on which the next payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> NextPaymentDateTime { get; set; }
		
		/// <summary>
		/// Number of the payments that will be made in completing this frequency sequence including any executed since the sequence start date.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string NumberOfPayments { get; set; }
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// A unique and immutable identifier used to identify the standing order resource. This identifier has no meaning to the account owner.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string StandingOrderId { get; set; }
		
		/// <summary>
		/// Specifies the status of the standing order in code form.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBExternalDirectDebitStatus1Code StandingOrderStatusCode { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBReadStatement2
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadDataStatement2 Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBReadTransaction6
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadDataTransaction6 Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBScheduledPayment3Basic
	{
		
		/// <summary>
		/// A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// A reference value provided by the PSU to the PISP while setting up the scheduled payment.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string DebtorReference { get; set; }
		
		/// <summary>
		/// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
		///Usage: This amount has to be transported unchanged through the transaction chain.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount_1 InstructedAmount { get; set; }
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// The date on which the scheduled payment will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ScheduledPaymentDateTime { get; set; }
		
		/// <summary>
		/// A unique and immutable identifier used to identify the scheduled payment resource. This identifier has no meaning to the account owner.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string ScheduledPaymentId { get; set; }
		
		/// <summary>
		/// Specifies the scheduled payment date type requested
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBExternalScheduleType1Code ScheduledType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBScheduledPayment3Detail
	{
		
		/// <summary>
		/// A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Provides the details to identify the beneficiary account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBCashAccount5_1 CreditorAccount { get; set; }
		
		/// <summary>
		/// Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
		///This is the servicer of the beneficiary account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBranchAndFinancialInstitutionIdentification5_1 CreditorAgent { get; set; }
		
		/// <summary>
		/// A reference value provided by the PSU to the PISP while setting up the scheduled payment.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string DebtorReference { get; set; }
		
		/// <summary>
		/// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
		///Usage: This amount has to be transported unchanged through the transaction chain.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount_1 InstructedAmount { get; set; }
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// The date on which the scheduled payment will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ScheduledPaymentDateTime { get; set; }
		
		/// <summary>
		/// A unique and immutable identifier used to identify the scheduled payment resource. This identifier has no meaning to the account owner.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string ScheduledPaymentId { get; set; }
		
		/// <summary>
		/// Specifies the scheduled payment date type requested
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBExternalScheduleType1Code ScheduledType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBStandingOrder6Basic
	{
		
		/// <summary>
		/// A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// The amount of the final Standing Order
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount_4 FinalPaymentAmount { get; set; }
		
		/// <summary>
		/// The date on which the final payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FinalPaymentDateTime { get; set; }
		
		/// <summary>
		/// The amount of the first Standing Order
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount_2 FirstPaymentAmount { get; set; }
		
		/// <summary>
		/// The date on which the first payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FirstPaymentDateTime { get; set; }
		
		/// <summary>
		/// Individual Definitions:
		///NotKnown - Not Known
		///EvryDay - Every day
		///EvryWorkgDay - Every working day
		///IntrvlDay - An interval specified in number of calendar days (02 to 31)
		///IntrvlWkDay - An interval specified in weeks (01 to 09), and the day within the week (01 to 07)
		///WkInMnthDay - A monthly interval, specifying the week of the month (01 to 05) and day within the week (01 to 07)
		///IntrvlMnthDay - An interval specified in months (between 01 to 06, 12, 24), specifying the day within the month (-05 to -01, 01 to 31)
		///QtrDay - Quarterly (either ENGLISH, SCOTTISH, or RECEIVED)
		///ENGLISH = Paid on the 25th March, 24th June, 29th September and 25th December.
		///SCOTTISH = Paid on the 2nd February, 15th May, 1st August and 11th November.
		///RECEIVED = Paid on the 20th March, 19th June, 24th September and 20th December.
		///Individual Patterns:
		///NotKnown (ScheduleCode)
		///EvryDay (ScheduleCode)
		///EvryWorkgDay (ScheduleCode)
		///IntrvlDay:NoOfDay (ScheduleCode + NoOfDay)
		///IntrvlWkDay:IntervalInWeeks:DayInWeek (ScheduleCode + IntervalInWeeks + DayInWeek)
		///WkInMnthDay:WeekInMonth:DayInWeek (ScheduleCode + WeekInMonth + DayInWeek)
		///IntrvlMnthDay:IntervalInMonths:DayInMonth (ScheduleCode + IntervalInMonths + DayInMonth)
		///QtrDay: + either (ENGLISH, SCOTTISH or RECEIVED) ScheduleCode + QuarterDay
		///The regular expression for this element combines five smaller versions for each permitted pattern. To aid legibility - the components are presented individually here:
		///NotKnown
		///EvryDay
		///EvryWorkgDay
		///IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1])
		///IntrvlWkDay:0[1-9]:0[1-7]
		///WkInMnthDay:0[1-5]:0[1-7]
		///IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01])
		///QtrDay:(ENGLISH|SCOTTISH|RECEIVED)
		///Full Regular Expression:
		///^(NotKnown)$|^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$
		/// Required
		/// Pattern: ^(NotKnown)$|^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(NotKnown)$|^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$")]
		public string Frequency { get; set; }
		
		/// <summary>
		/// The amount of the last (most recent) Standing Order instruction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount_11 LastPaymentAmount { get; set; }
		
		/// <summary>
		/// The date on which the last (most recent) payment for a Standing Order schedule was made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastPaymentDateTime { get; set; }
		
		/// <summary>
		/// The amount of the next Standing Order.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount_3 NextPaymentAmount { get; set; }
		
		/// <summary>
		/// The date on which the next payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> NextPaymentDateTime { get; set; }
		
		/// <summary>
		/// Number of the payments that will be made in completing this frequency sequence including any executed since the sequence start date.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string NumberOfPayments { get; set; }
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// A unique and immutable identifier used to identify the standing order resource. This identifier has no meaning to the account owner.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string StandingOrderId { get; set; }
		
		/// <summary>
		/// Specifies the status of the standing order in code form.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBExternalDirectDebitStatus1Code StandingOrderStatusCode { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBStandingOrder6Detail
	{
		
		/// <summary>
		/// A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Provides the details to identify the beneficiary account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBCashAccount5_1 CreditorAccount { get; set; }
		
		/// <summary>
		/// Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
		///This is the servicer of the beneficiary account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBranchAndFinancialInstitutionIdentification5_1 CreditorAgent { get; set; }
		
		/// <summary>
		/// The amount of the final Standing Order
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount_4 FinalPaymentAmount { get; set; }
		
		/// <summary>
		/// The date on which the final payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FinalPaymentDateTime { get; set; }
		
		/// <summary>
		/// The amount of the first Standing Order
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount_2 FirstPaymentAmount { get; set; }
		
		/// <summary>
		/// The date on which the first payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FirstPaymentDateTime { get; set; }
		
		/// <summary>
		/// Individual Definitions:
		///NotKnown - Not Known
		///EvryDay - Every day
		///EvryWorkgDay - Every working day
		///IntrvlDay - An interval specified in number of calendar days (02 to 31)
		///IntrvlWkDay - An interval specified in weeks (01 to 09), and the day within the week (01 to 07)
		///WkInMnthDay - A monthly interval, specifying the week of the month (01 to 05) and day within the week (01 to 07)
		///IntrvlMnthDay - An interval specified in months (between 01 to 06, 12, 24), specifying the day within the month (-05 to -01, 01 to 31)
		///QtrDay - Quarterly (either ENGLISH, SCOTTISH, or RECEIVED)
		///ENGLISH = Paid on the 25th March, 24th June, 29th September and 25th December.
		///SCOTTISH = Paid on the 2nd February, 15th May, 1st August and 11th November.
		///RECEIVED = Paid on the 20th March, 19th June, 24th September and 20th December.
		///Individual Patterns:
		///NotKnown (ScheduleCode)
		///EvryDay (ScheduleCode)
		///EvryWorkgDay (ScheduleCode)
		///IntrvlDay:NoOfDay (ScheduleCode + NoOfDay)
		///IntrvlWkDay:IntervalInWeeks:DayInWeek (ScheduleCode + IntervalInWeeks + DayInWeek)
		///WkInMnthDay:WeekInMonth:DayInWeek (ScheduleCode + WeekInMonth + DayInWeek)
		///IntrvlMnthDay:IntervalInMonths:DayInMonth (ScheduleCode + IntervalInMonths + DayInMonth)
		///QtrDay: + either (ENGLISH, SCOTTISH or RECEIVED) ScheduleCode + QuarterDay
		///The regular expression for this element combines five smaller versions for each permitted pattern. To aid legibility - the components are presented individually here:
		///NotKnown
		///EvryDay
		///EvryWorkgDay
		///IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1])
		///IntrvlWkDay:0[1-9]:0[1-7]
		///WkInMnthDay:0[1-5]:0[1-7]
		///IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01])
		///QtrDay:(ENGLISH|SCOTTISH|RECEIVED)
		///Full Regular Expression:
		///^(NotKnown)$|^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$
		/// Required
		/// Pattern: ^(NotKnown)$|^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(NotKnown)$|^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$")]
		public string Frequency { get; set; }
		
		/// <summary>
		/// The amount of the last (most recent) Standing Order instruction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount_11 LastPaymentAmount { get; set; }
		
		/// <summary>
		/// The date on which the last (most recent) payment for a Standing Order schedule was made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastPaymentDateTime { get; set; }
		
		/// <summary>
		/// The amount of the next Standing Order.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount_3 NextPaymentAmount { get; set; }
		
		/// <summary>
		/// The date on which the next payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> NextPaymentDateTime { get; set; }
		
		/// <summary>
		/// Number of the payments that will be made in completing this frequency sequence including any executed since the sequence start date.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string NumberOfPayments { get; set; }
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// A unique and immutable identifier used to identify the standing order resource. This identifier has no meaning to the account owner.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string StandingOrderId { get; set; }
		
		/// <summary>
		/// Specifies the status of the standing order in code form.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBExternalDirectDebitStatus1Code StandingOrderStatusCode { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	/// <summary>
	/// Provides further details on a statement resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBStatement2Basic
	{
		
		/// <summary>
		/// A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// Date and time at which the statement period ends.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndDateTime { get; set; }
		
		/// <summary>
		/// Date and time at which the statement period starts.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBStatement2BasicStatementBenefit[] OBStatement2BasicStatementBenefit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBStatement2BasicStatementDateTime[] OBStatement2BasicStatementDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] StatementDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBStatement2BasicStatementFee[] OBStatement2BasicStatementFee { get; set; }
		
		/// <summary>
		/// Unique identifier for the statement resource within an servicing institution. This identifier is both unique and immutable.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string StatementId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBStatement2BasicStatementInterest[] OBStatement2BasicStatementInterest { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBStatement2BasicStatementRate[] OBStatement2BasicStatementRate { get; set; }
		
		/// <summary>
		/// Unique reference for the statement. This reference may be optionally populated if available.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string StatementReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBStatement2BasicStatementValue[] OBStatement2BasicStatementValue { get; set; }
		
		/// <summary>
		/// Statement type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBExternalStatementType1Code Type { get; set; }
	}
	
	public class OBStatement2BasicStatementBenefit
	{
		
		/// <summary>
		/// Amount of money associated with the statement benefit type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount_5 Amount { get; set; }
		
		/// <summary>
		/// Benefit type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	public class OBStatement2BasicStatementDateTime
	{
		
		/// <summary>
		/// Date and time associated with the date time type.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset DateTime { get; set; }
		
		/// <summary>
		/// Date time type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	public class OBStatement2BasicStatementFee
	{
		
		/// <summary>
		/// Amount of money associated with the statement fee type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount_6 Amount { get; set; }
		
		/// <summary>
		/// Indicates whether the amount is a credit or a debit. 
		///Usage: A zero amount is considered to be a credit amount.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBCreditDebitCode_0 CreditDebitIndicator { get; set; }
		
		/// <summary>
		/// Description that may be available for the statement fee.
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Description { get; set; }
		
		/// <summary>
		/// How frequently the fee is applied to the Account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Frequency { get; set; }
		
		/// <summary>
		/// Rate charged for Statement Fee (where it is charged in terms of a rate rather than an amount)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Rate { get; set; }
		
		/// <summary>
		/// Description that may be available for the statement fee rate type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RateType { get; set; }
		
		/// <summary>
		/// Fee type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	public class OBStatement2BasicStatementInterest
	{
		
		/// <summary>
		/// Amount of money associated with the statement interest amount type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount_7 Amount { get; set; }
		
		/// <summary>
		/// Indicates whether the amount is a credit or a debit. 
		///Usage: A zero amount is considered to be a credit amount.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBCreditDebitCode_0 CreditDebitIndicator { get; set; }
		
		/// <summary>
		/// Description that may be available for the statement interest.
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Description { get; set; }
		
		/// <summary>
		/// Specifies the statement fee type requested
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Frequency { get; set; }
		
		/// <summary>
		/// field representing a percentage (e.g. 0.05 represents 5% and 0.9525 represents 95.25%). Note the number of decimal places may vary.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Rate { get; set; }
		
		/// <summary>
		/// Description that may be available for the statement Interest rate type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RateType { get; set; }
		
		/// <summary>
		/// Interest amount type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	public class OBStatement2BasicStatementRate
	{
		
		/// <summary>
		/// Rate associated with the statement rate type.
		/// Required
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string Rate { get; set; }
		
		/// <summary>
		/// Statement rate type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	public class OBStatement2BasicStatementValue
	{
		
		/// <summary>
		/// Statement value type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		/// <summary>
		/// Value associated with the statement value type.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Provides further details on a statement resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBStatement2Detail
	{
		
		/// <summary>
		/// A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// Date and time at which the statement period ends.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndDateTime { get; set; }
		
		/// <summary>
		/// Date and time at which the statement period starts.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBStatement2DetailStatementAmount[] OBStatement2DetailStatementAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBStatement2DetailStatementBenefit[] OBStatement2DetailStatementBenefit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBStatement2DetailStatementDateTime[] OBStatement2DetailStatementDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] StatementDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBStatement2DetailStatementFee[] OBStatement2DetailStatementFee { get; set; }
		
		/// <summary>
		/// Unique identifier for the statement resource within an servicing institution. This identifier is both unique and immutable.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string StatementId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBStatement2DetailStatementInterest[] OBStatement2DetailStatementInterest { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBStatement2DetailStatementRate[] OBStatement2DetailStatementRate { get; set; }
		
		/// <summary>
		/// Unique reference for the statement. This reference may be optionally populated if available.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string StatementReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBStatement2DetailStatementValue[] OBStatement2DetailStatementValue { get; set; }
		
		/// <summary>
		/// Statement type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBExternalStatementType1Code Type { get; set; }
	}
	
	public class OBStatement2DetailStatementAmount
	{
		
		/// <summary>
		/// Amount of money associated with the amount type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount_8 Amount { get; set; }
		
		/// <summary>
		/// Indicates whether the amount is a credit or a debit. 
		///Usage: A zero amount is considered to be a credit amount.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBCreditDebitCode_0 CreditDebitIndicator { get; set; }
		
		/// <summary>
		/// Amount type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	public class OBStatement2DetailStatementBenefit
	{
		
		/// <summary>
		/// Amount of money associated with the statement benefit type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount_5 Amount { get; set; }
		
		/// <summary>
		/// Benefit type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	public class OBStatement2DetailStatementDateTime
	{
		
		/// <summary>
		/// Date and time associated with the date time type.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset DateTime { get; set; }
		
		/// <summary>
		/// Date time type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	public class OBStatement2DetailStatementFee
	{
		
		/// <summary>
		/// Amount of money associated with the statement fee type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount_6 Amount { get; set; }
		
		/// <summary>
		/// Indicates whether the amount is a credit or a debit. 
		///Usage: A zero amount is considered to be a credit amount.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBCreditDebitCode_0 CreditDebitIndicator { get; set; }
		
		/// <summary>
		/// Description that may be available for the statement fee.
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Description { get; set; }
		
		/// <summary>
		/// How frequently the fee is applied to the Account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Frequency { get; set; }
		
		/// <summary>
		/// Rate charged for Statement Fee (where it is charged in terms of a rate rather than an amount)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Rate { get; set; }
		
		/// <summary>
		/// Description that may be available for the statement fee rate type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RateType { get; set; }
		
		/// <summary>
		/// Fee type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	public class OBStatement2DetailStatementInterest
	{
		
		/// <summary>
		/// Amount of money associated with the statement interest amount type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount_7 Amount { get; set; }
		
		/// <summary>
		/// Indicates whether the amount is a credit or a debit. 
		///Usage: A zero amount is considered to be a credit amount.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBCreditDebitCode_0 CreditDebitIndicator { get; set; }
		
		/// <summary>
		/// Description that may be available for the statement interest.
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Description { get; set; }
		
		/// <summary>
		/// Specifies the statement fee type requested
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Frequency { get; set; }
		
		/// <summary>
		/// field representing a percentage (e.g. 0.05 represents 5% and 0.9525 represents 95.25%). Note the number of decimal places may vary.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Rate { get; set; }
		
		/// <summary>
		/// Description that may be available for the statement Interest rate type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RateType { get; set; }
		
		/// <summary>
		/// Interest amount type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	public class OBStatement2DetailStatementRate
	{
		
		/// <summary>
		/// Rate associated with the statement rate type.
		/// Required
		/// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
		public string Rate { get; set; }
		
		/// <summary>
		/// Statement rate type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	public class OBStatement2DetailStatementValue
	{
		
		/// <summary>
		/// Statement value type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		/// <summary>
		/// Value associated with the statement value type.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Provides further details on an entry in the report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBTransaction6Basic
	{
		
		/// <summary>
		/// A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address for a transaction entry, that is presented in free format text.
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string AddressLine { get; set; }
		
		/// <summary>
		/// Amount of money in the cash transaction entry.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount_9 Amount { get; set; }
		
		/// <summary>
		/// Set of elements used to fully identify the type of underlying transaction resulting in an entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBankTransactionCodeStructure1 BankTransactionCode { get; set; }
		
		/// <summary>
		/// Date and time when a transaction entry is posted to an account on the account servicer's books.
		///Usage: Booking date is the expected booking date, unless the status is booked, in which case it is the actual booking date.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset BookingDateTime { get; set; }
		
		/// <summary>
		/// Set of elements to describe the card instrument used in the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBTransactionCardInstrument1 CardInstrument { get; set; }
		
		/// <summary>
		/// Transaction charges to be paid by the charge bearer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount_10 ChargeAmount { get; set; }
		
		/// <summary>
		/// Indicates whether the transaction is a credit or a debit entry.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBCreditDebitCode_0 CreditDebitIndicator { get; set; }
		
		/// <summary>
		/// Set of elements used to provide details on the currency exchange.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBCurrencyExchange5 CurrencyExchange { get; set; }
		
		/// <summary>
		/// Set of elements to fully identify a proprietary bank transaction code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProprietaryBankTransactionCodeStructure1 ProprietaryBankTransactionCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] StatementReference { get; set; }
		
		/// <summary>
		/// Status of a transaction entry on the books of the account servicer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBEntryStatus1Code Status { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
		
		/// <summary>
		/// Unique identifier for the transaction within an servicing institution. This identifier is both unique and immutable.
		/// Min length: 1
		/// Max length: 210
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(210)]
		public string TransactionId { get; set; }
		
		/// <summary>
		/// Specifies the Mutability of the Transaction record.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBTransaction6TransactionMutability TransactionMutability { get; set; }
		
		/// <summary>
		/// Unique reference for the transaction. This reference is optionally populated, and may as an example be the FPID in the Faster Payments context.
		/// Min length: 1
		/// Max length: 210
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(210)]
		public string TransactionReference { get; set; }
		
		/// <summary>
		/// Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit transaction entry.
		///Usage: If transaction entry status is pending and value date is present, then the value date refers to an expected/requested value date.
		///For transaction entries subject to availability/float and for which availability information is provided, the value date must not be used. In this case the availability component identifies the number of availability days.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ValueDateTime { get; set; }
	}
	
	/// <summary>
	/// Provides further details on an entry in the report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OBTransaction6Detail
	{
		
		/// <summary>
		/// A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address for a transaction entry, that is presented in free format text.
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string AddressLine { get; set; }
		
		/// <summary>
		/// Amount of money in the cash transaction entry.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount_9 Amount { get; set; }
		
		/// <summary>
		/// Set of elements used to define the balance as a numerical representation of the net increases and decreases in an account after a transaction entry is applied to the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBTransactionCashBalance Balance { get; set; }
		
		/// <summary>
		/// Set of elements used to fully identify the type of underlying transaction resulting in an entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBankTransactionCodeStructure1 BankTransactionCode { get; set; }
		
		/// <summary>
		/// Date and time when a transaction entry is posted to an account on the account servicer's books.
		///Usage: Booking date is the expected booking date, unless the status is booked, in which case it is the actual booking date.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset BookingDateTime { get; set; }
		
		/// <summary>
		/// Set of elements to describe the card instrument used in the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBTransactionCardInstrument1 CardInstrument { get; set; }
		
		/// <summary>
		/// Transaction charges to be paid by the charge bearer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount_10 ChargeAmount { get; set; }
		
		/// <summary>
		/// Indicates whether the transaction is a credit or a debit entry.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBCreditDebitCode_0 CreditDebitIndicator { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the creditor, in the case of a debit transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBCashAccount6_0 CreditorAccount { get; set; }
		
		/// <summary>
		/// Financial institution servicing an account for the creditor.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBranchAndFinancialInstitutionIdentification6_1 CreditorAgent { get; set; }
		
		/// <summary>
		/// Set of elements used to provide details on the currency exchange.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBCurrencyExchange5 CurrencyExchange { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the debtor, in the case of a crebit transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBCashAccount6_1 DebtorAccount { get; set; }
		
		/// <summary>
		/// Financial institution servicing an account for the debtor.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBBranchAndFinancialInstitutionIdentification6_2 DebtorAgent { get; set; }
		
		/// <summary>
		/// Details of the merchant involved in the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBMerchantDetails1 MerchantDetails { get; set; }
		
		/// <summary>
		/// Set of elements to fully identify a proprietary bank transaction code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProprietaryBankTransactionCodeStructure1 ProprietaryBankTransactionCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] StatementReference { get; set; }
		
		/// <summary>
		/// Status of a transaction entry on the books of the account servicer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBEntryStatus1Code Status { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
		
		/// <summary>
		/// Unique identifier for the transaction within an servicing institution. This identifier is both unique and immutable.
		/// Min length: 1
		/// Max length: 210
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(210)]
		public string TransactionId { get; set; }
		
		/// <summary>
		/// Further details of the transaction. 
		///This is the transaction narrative, which is unstructured text.
		/// Min length: 1
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string TransactionInformation { get; set; }
		
		/// <summary>
		/// Specifies the Mutability of the Transaction record.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBTransaction6TransactionMutability TransactionMutability { get; set; }
		
		/// <summary>
		/// Unique reference for the transaction. This reference is optionally populated, and may as an example be the FPID in the Faster Payments context.
		/// Min length: 1
		/// Max length: 210
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(210)]
		public string TransactionReference { get; set; }
		
		/// <summary>
		/// Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit transaction entry.
		///Usage: If transaction entry status is pending and value date is present, then the value date refers to an expected/requested value date.
		///For transaction entries subject to availability/float and for which availability information is provided, the value date must not be used. In this case the availability component identifies the number of availability days.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ValueDateTime { get; set; }
	}
	
	/// <summary>
	/// Specifies the Mutability of the Transaction record.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OBTransactionMutability1Code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mutable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Immutable = 1,
	}
	
	/// <summary>
	/// Categorisation of fees and charges into standard categories.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OB_FeeCategory1Code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FCOT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FCRE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FCSV = 2,
	}
	
	/// <summary>
	/// Frequency at which the overdraft charge is applied to the account
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OB_FeeFrequency1Code_0
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEAC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEAO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FECP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEDA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEHO = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEI = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEMO = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEOA = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEOT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPC = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPH = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPO = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPS = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPT = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPTA = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPTP = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEQU = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FESM = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEST = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEWE = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEYE = 20,
	}
	
	/// <summary>
	/// How often is the overdraft fee/charge calculated for the account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OB_FeeFrequency1Code_1
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEAC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEAO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FECP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEDA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEHO = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEI = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEMO = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEOA = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEOT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPC = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPH = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPO = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPS = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPT = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPTA = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPTP = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEQU = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FESM = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEST = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEWE = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEYE = 20,
	}
	
	/// <summary>
	/// How frequently the fee/charge is applied to the account
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OB_FeeFrequency1Code_2
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEAC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEAO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FECP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEDA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEHO = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEI = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEMO = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEOA = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEOT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPC = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPH = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPO = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPS = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPT = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPTA = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPTP = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEQU = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FESM = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEST = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEWE = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEYE = 20,
	}
	
	/// <summary>
	/// How frequently the fee/charge is calculated
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OB_FeeFrequency1Code_3
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEAC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEAO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FECP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEDA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEHO = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEI = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEMO = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEOA = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEOT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPC = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPH = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPO = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPS = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPT = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPTA = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPTP = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEQU = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FESM = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEST = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEWE = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEYE = 20,
	}
	
	/// <summary>
	/// Period e.g. day, week, month etc. for which the fee/charge is capped
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OB_FeeFrequency1Code_4
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEAC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEAO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FECP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEDA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEHO = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEI = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEMO = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEOA = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEOT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPC = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPH = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPO = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPS = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPT = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPTA = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPTP = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEQU = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FESM = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEST = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEWE = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEYE = 20,
	}
	
	/// <summary>
	/// Fee/Charge Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OB_FeeType1Code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEPF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FTOT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FYAF = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FYAM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FYAQ = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FYCP = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FYDB = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FYMI = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FYXX = 8,
	}
	
	/// <summary>
	/// Methods of calculating interest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OB_InterestCalculationMethod1Code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITCO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITOT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITSI = 2,
	}
	
	/// <summary>
	/// Type of interest rate, Fixed or Variable
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OB_InterestFixedVariableType1Code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFI = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVA = 1,
	}
	
	/// <summary>
	/// Rate type for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OB_InterestRateType1Code_0
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INBB = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INGR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INLR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INNE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INOT = 5,
	}
	
	/// <summary>
	/// Rate type for Fee/Charge (where it is charged in terms of a rate rather than an amount)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OB_InterestRateType1Code_1
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INBB = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INGR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INLR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INNE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INOT = 5,
	}
	
	/// <summary>
	/// Min Max type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OB_MinMaxType1Code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FMMN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FMMX = 1,
	}
	
	/// <summary>
	/// Overdraft fee type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OB_OverdraftFeeType1Code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FBAO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FBAR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FBEB = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FBIT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FBOR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FBOS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FBSC = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FBTO = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FBUB = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FBUT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FTOT = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FTUT = 11,
	}
	
	/// <summary>
	/// Period e.g. day, week, month etc. for which the fee/charge is capped
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OB_Period1Code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PACT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PDAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHYR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PMTH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PQTR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PWEK = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PYER = 6,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Create Account Access Consents
		/// CreateAccountAccessConsents account-access-consents
		/// </summary>
		/// <param name="requestBody">Default</param>
		public async Task CreateAccountAccessConsentsAsync(OBReadConsent1 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account-access-consents";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Account Access Consents
		/// DeleteAccountAccessConsentsConsentId account-access-consents/{ConsentId}
		/// </summary>
		/// <param name="ConsentId">ConsentId</param>
		public async Task DeleteAccountAccessConsentsConsentIdAsync(string ConsentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account-access-consents/"+ (ConsentId==null? "" : System.Uri.EscapeDataString(ConsentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Account Access Consents
		/// GetAccountAccessConsentsConsentId account-access-consents/{ConsentId}
		/// </summary>
		/// <param name="ConsentId">ConsentId</param>
		/// <returns>Account Access Consents Read</returns>
		public async Task<OBReadConsentResponse1> GetAccountAccessConsentsConsentIdAsync(string ConsentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account-access-consents/"+ (ConsentId==null? "" : System.Uri.EscapeDataString(ConsentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OBReadConsentResponse1>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Accounts
		/// GetAccounts accounts
		/// </summary>
		/// <returns>Accounts Read</returns>
		public async Task<OBReadAccount6> GetAccountsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OBReadAccount6>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Accounts
		/// GetAccountsAccountId accounts/{AccountId}
		/// </summary>
		/// <param name="AccountId">AccountId</param>
		/// <returns>Accounts Read</returns>
		public async Task<OBReadAccount6> GetAccountsAccountIdAsync(string AccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (AccountId==null? "" : System.Uri.EscapeDataString(AccountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OBReadAccount6>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Balances
		/// GetAccountsAccountIdBalances accounts/{AccountId}/balances
		/// </summary>
		/// <param name="AccountId">AccountId</param>
		/// <returns>Balances Read</returns>
		public async Task<OBReadBalance1> GetAccountsAccountIdBalancesAsync(string AccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (AccountId==null? "" : System.Uri.EscapeDataString(AccountId))+"/balances";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OBReadBalance1>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Beneficiaries
		/// GetAccountsAccountIdBeneficiaries accounts/{AccountId}/beneficiaries
		/// </summary>
		/// <param name="AccountId">AccountId</param>
		/// <returns>Beneficiaries Read</returns>
		public async Task<OBReadBeneficiary5> GetAccountsAccountIdBeneficiariesAsync(string AccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (AccountId==null? "" : System.Uri.EscapeDataString(AccountId))+"/beneficiaries";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OBReadBeneficiary5>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Direct Debits
		/// GetAccountsAccountIdDirectDebits accounts/{AccountId}/direct-debits
		/// </summary>
		/// <param name="AccountId">AccountId</param>
		/// <returns>Direct Debits Read</returns>
		public async Task<OBReadDirectDebit2> GetAccountsAccountIdDirectDebitsAsync(string AccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (AccountId==null? "" : System.Uri.EscapeDataString(AccountId))+"/direct-debits";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OBReadDirectDebit2>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Offers
		/// GetAccountsAccountIdOffers accounts/{AccountId}/offers
		/// </summary>
		/// <param name="AccountId">AccountId</param>
		/// <returns>Offers Read</returns>
		public async Task<OBReadOffer1> GetAccountsAccountIdOffersAsync(string AccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (AccountId==null? "" : System.Uri.EscapeDataString(AccountId))+"/offers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OBReadOffer1>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Parties
		/// GetAccountsAccountIdParties accounts/{AccountId}/parties
		/// </summary>
		/// <param name="AccountId">AccountId</param>
		/// <returns>Parties Read</returns>
		public async Task<OBReadParty3> GetAccountsAccountIdPartiesAsync(string AccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (AccountId==null? "" : System.Uri.EscapeDataString(AccountId))+"/parties";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OBReadParty3>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Parties
		/// GetAccountsAccountIdParty accounts/{AccountId}/party
		/// </summary>
		/// <param name="AccountId">AccountId</param>
		/// <returns>Parties Read</returns>
		public async Task<OBReadParty2> GetAccountsAccountIdPartyAsync(string AccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (AccountId==null? "" : System.Uri.EscapeDataString(AccountId))+"/party";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OBReadParty2>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Products
		/// GetAccountsAccountIdProduct accounts/{AccountId}/product
		/// </summary>
		/// <param name="AccountId">AccountId</param>
		/// <returns>Products Read</returns>
		public async Task<OBReadProduct2> GetAccountsAccountIdProductAsync(string AccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (AccountId==null? "" : System.Uri.EscapeDataString(AccountId))+"/product";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OBReadProduct2>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Scheduled Payments
		/// GetAccountsAccountIdScheduledPayments accounts/{AccountId}/scheduled-payments
		/// </summary>
		/// <param name="AccountId">AccountId</param>
		/// <returns>Scheduled Payments Read</returns>
		public async Task<OBReadScheduledPayment3> GetAccountsAccountIdScheduledPaymentsAsync(string AccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (AccountId==null? "" : System.Uri.EscapeDataString(AccountId))+"/scheduled-payments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OBReadScheduledPayment3>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Standing Orders
		/// GetAccountsAccountIdStandingOrders accounts/{AccountId}/standing-orders
		/// </summary>
		/// <param name="AccountId">AccountId</param>
		/// <returns>Standing Orders Read</returns>
		public async Task<OBReadStandingOrder6> GetAccountsAccountIdStandingOrdersAsync(string AccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (AccountId==null? "" : System.Uri.EscapeDataString(AccountId))+"/standing-orders";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OBReadStandingOrder6>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Statements
		/// GetAccountsAccountIdStatements accounts/{AccountId}/statements
		/// </summary>
		/// <param name="AccountId">AccountId</param>
		/// <param name="fromStatementDateTime">The UTC ISO 8601 Date Time to filter statements FROM
		///NB Time component is optional - set to 00:00:00 for just Date.
		///If the Date Time contains a timezone, the ASPSP must ignore the timezone component.</param>
		/// <param name="toStatementDateTime">The UTC ISO 8601 Date Time to filter statements TO
		///NB Time component is optional - set to 00:00:00 for just Date.
		///If the Date Time contains a timezone, the ASPSP must ignore the timezone component.</param>
		/// <returns>Statements Read</returns>
		public async Task<OBReadStatement2> GetAccountsAccountIdStatementsAsync(string AccountId, System.DateTimeOffset fromStatementDateTime, System.DateTimeOffset toStatementDateTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (AccountId==null? "" : System.Uri.EscapeDataString(AccountId))+"/statements&fromStatementDateTime=" + fromStatementDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&toStatementDateTime=" + toStatementDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OBReadStatement2>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Statements
		/// GetAccountsAccountIdStatementsStatementId accounts/{AccountId}/statements/{StatementId}
		/// </summary>
		/// <param name="StatementId">StatementId</param>
		/// <param name="AccountId">AccountId</param>
		/// <returns>Statements Read</returns>
		public async Task<OBReadStatement2> GetAccountsAccountIdStatementsStatementIdAsync(string StatementId, string AccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (AccountId==null? "" : System.Uri.EscapeDataString(AccountId))+"/statements/"+ (StatementId==null? "" : System.Uri.EscapeDataString(StatementId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OBReadStatement2>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Statements
		/// GetAccountsAccountIdStatementsStatementIdFile accounts/{AccountId}/statements/{StatementId}/file
		/// </summary>
		/// <param name="StatementId">StatementId</param>
		/// <param name="AccountId">AccountId</param>
		/// <returns>Statements Read</returns>
		public async Task<File> GetAccountsAccountIdStatementsStatementIdFileAsync(string StatementId, string AccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (AccountId==null? "" : System.Uri.EscapeDataString(AccountId))+"/statements/"+ (StatementId==null? "" : System.Uri.EscapeDataString(StatementId))+"/file";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<File>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Transactions
		/// GetAccountsAccountIdStatementsStatementIdTransactions accounts/{AccountId}/statements/{StatementId}/transactions
		/// </summary>
		/// <param name="StatementId">StatementId</param>
		/// <param name="AccountId">AccountId</param>
		/// <returns>Transactions Read</returns>
		public async Task<OBReadTransaction6> GetAccountsAccountIdStatementsStatementIdTransactionsAsync(string StatementId, string AccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (AccountId==null? "" : System.Uri.EscapeDataString(AccountId))+"/statements/"+ (StatementId==null? "" : System.Uri.EscapeDataString(StatementId))+"/transactions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OBReadTransaction6>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Transactions
		/// GetAccountsAccountIdTransactions accounts/{AccountId}/transactions
		/// </summary>
		/// <param name="AccountId">AccountId</param>
		/// <param name="fromBookingDateTime">The UTC ISO 8601 Date Time to filter transactions FROM
		///NB Time component is optional - set to 00:00:00 for just Date.
		///If the Date Time contains a timezone, the ASPSP must ignore the timezone component.</param>
		/// <param name="toBookingDateTime">The UTC ISO 8601 Date Time to filter transactions TO
		///NB Time component is optional - set to 00:00:00 for just Date.
		///If the Date Time contains a timezone, the ASPSP must ignore the timezone component.</param>
		/// <returns>Transactions Read</returns>
		public async Task<OBReadTransaction6> GetAccountsAccountIdTransactionsAsync(string AccountId, System.DateTimeOffset fromBookingDateTime, System.DateTimeOffset toBookingDateTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (AccountId==null? "" : System.Uri.EscapeDataString(AccountId))+"/transactions&fromBookingDateTime=" + fromBookingDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&toBookingDateTime=" + toBookingDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OBReadTransaction6>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Balances
		/// GetBalances balances
		/// </summary>
		/// <returns>Balances Read</returns>
		public async Task<OBReadBalance1> GetBalancesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "balances";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OBReadBalance1>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Beneficiaries
		/// GetBeneficiaries beneficiaries
		/// </summary>
		/// <returns>Beneficiaries Read</returns>
		public async Task<OBReadBeneficiary5> GetBeneficiariesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "beneficiaries";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OBReadBeneficiary5>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Direct Debits
		/// GetDirectDebits direct-debits
		/// </summary>
		/// <returns>Direct Debits Read</returns>
		public async Task<OBReadDirectDebit2> GetDirectDebitsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "direct-debits";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OBReadDirectDebit2>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Offers
		/// GetOffers offers
		/// </summary>
		/// <returns>Offers Read</returns>
		public async Task<OBReadOffer1> GetOffersAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OBReadOffer1>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Parties
		/// GetParty party
		/// </summary>
		/// <returns>Parties Read</returns>
		public async Task<OBReadParty2> GetPartyAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "party";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OBReadParty2>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Products
		/// GetProducts products
		/// </summary>
		/// <returns>Products Read</returns>
		public async Task<OBReadProduct2> GetProductsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OBReadProduct2>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Scheduled Payments
		/// GetScheduledPayments scheduled-payments
		/// </summary>
		/// <returns>Scheduled Payments Read</returns>
		public async Task<OBReadScheduledPayment3> GetScheduledPaymentsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scheduled-payments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OBReadScheduledPayment3>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Standing Orders
		/// GetStandingOrders standing-orders
		/// </summary>
		/// <returns>Standing Orders Read</returns>
		public async Task<OBReadStandingOrder6> GetStandingOrdersAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "standing-orders";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OBReadStandingOrder6>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Statements
		/// GetStatements statements
		/// </summary>
		/// <param name="fromStatementDateTime">The UTC ISO 8601 Date Time to filter statements FROM
		///NB Time component is optional - set to 00:00:00 for just Date.
		///If the Date Time contains a timezone, the ASPSP must ignore the timezone component.</param>
		/// <param name="toStatementDateTime">The UTC ISO 8601 Date Time to filter statements TO
		///NB Time component is optional - set to 00:00:00 for just Date.
		///If the Date Time contains a timezone, the ASPSP must ignore the timezone component.</param>
		/// <returns>Statements Read</returns>
		public async Task<OBReadStatement2> GetStatementsAsync(System.DateTimeOffset fromStatementDateTime, System.DateTimeOffset toStatementDateTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "statements?fromStatementDateTime=" + fromStatementDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&toStatementDateTime=" + toStatementDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OBReadStatement2>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Transactions
		/// GetTransactions transactions
		/// </summary>
		/// <param name="fromBookingDateTime">The UTC ISO 8601 Date Time to filter transactions FROM
		///NB Time component is optional - set to 00:00:00 for just Date.
		///If the Date Time contains a timezone, the ASPSP must ignore the timezone component.</param>
		/// <param name="toBookingDateTime">The UTC ISO 8601 Date Time to filter transactions TO
		///NB Time component is optional - set to 00:00:00 for just Date.
		///If the Date Time contains a timezone, the ASPSP must ignore the timezone component.</param>
		/// <returns>Transactions Read</returns>
		public async Task<OBReadTransaction6> GetTransactionsAsync(System.DateTimeOffset fromBookingDateTime, System.DateTimeOffset toBookingDateTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transactions?fromBookingDateTime=" + fromBookingDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&toBookingDateTime=" + toBookingDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OBReadTransaction6>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
