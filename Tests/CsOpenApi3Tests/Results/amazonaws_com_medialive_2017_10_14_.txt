//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Placeholder documentation for AcceptInputDeviceTransferResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AcceptInputDeviceTransferResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BadRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnprocessableEntityException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InternalServerErrorException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ForbiddenException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BadGatewayException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GatewayTimeoutException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TooManyRequestsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConflictException
	{
	}
	
	/// <summary>
	/// Placeholder documentation for BatchDeleteResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDeleteResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BatchFailedResultModel[] Failed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchSuccessfulResultModel[] Successful { get; set; }
	}
	
	/// <summary>
	/// Details from a failed operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchFailedResultModel
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Details from a successful operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchSuccessfulResultModel
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for BatchStartResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchStartResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BatchFailedResultModel[] Failed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchSuccessfulResultModel[] Successful { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for BatchStopResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchStopResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BatchFailedResultModel[] Failed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchSuccessfulResultModel[] Successful { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for BatchUpdateScheduleResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchUpdateScheduleResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BatchScheduleActionCreateResult Creates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchScheduleActionDeleteResult Deletes { get; set; }
	}
	
	/// <summary>
	/// List of actions that have been created in the schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchScheduleActionCreateResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScheduleAction[] ScheduleActions { get; set; }
	}
	
	/// <summary>
	/// Contains information on a single schedule action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleAction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ActionName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScheduleActionSettings ScheduleActionSettings { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScheduleActionStartSettings ScheduleActionStartSettings { get; set; }
	}
	
	/// <summary>
	/// Holds the settings for a single schedule action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleActionSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public HlsId3SegmentTaggingScheduleActionSettings HlsId3SegmentTaggingSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsTimedMetadataScheduleActionSettings HlsTimedMetadataSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputPrepareScheduleActionSettings InputPrepareSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputSwitchScheduleActionSettings InputSwitchSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MotionGraphicsActivateScheduleActionSettings MotionGraphicsImageActivateSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MotionGraphicsDeactivateScheduleActionSettings MotionGraphicsImageDeactivateSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PauseStateScheduleActionSettings PauseStateSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Scte35InputScheduleActionSettings Scte35InputSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Scte35ReturnToNetworkScheduleActionSettings Scte35ReturnToNetworkSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Scte35SpliceInsertScheduleActionSettings Scte35SpliceInsertSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Scte35TimeSignalScheduleActionSettings Scte35TimeSignalSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StaticImageActivateScheduleActionSettings StaticImageActivateSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StaticImageDeactivateScheduleActionSettings StaticImageDeactivateSettings { get; set; }
	}
	
	/// <summary>
	/// Settings for the action to insert a user-defined ID3 tag in each HLS segment
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HlsId3SegmentTaggingScheduleActionSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Tag { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id3 { get; set; }
	}
	
	/// <summary>
	/// Settings for the action to emit HLS metadata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HlsTimedMetadataScheduleActionSettings
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id3 { get; set; }
	}
	
	/// <summary>
	/// Action to prepare an input for a future immediate input switch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputPrepareScheduleActionSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InputAttachmentNameReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputClippingSettings InputClippingSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] UrlPath { get; set; }
	}
	
	/// <summary>
	/// Settings to let you create a clip of the file input, in order to set up the input to ingest only a portion of the file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputClippingSettings
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InputTimecodeSource InputTimecodeSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StartTimecode StartTimecode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StopTimecode StopTimecode { get; set; }
	}
	
	/// <summary>
	/// Documentation update needed
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InputTimecodeSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ZEROBASED")]
		ZEROBASED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EMBEDDED")]
		EMBEDDED = 1,
	}
	
	/// <summary>
	/// Settings to identify the start of the clip.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartTimecode
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Timecode { get; set; }
	}
	
	/// <summary>
	/// Settings to identify the end of the clip.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopTimecode
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LastFrameClippingBehavior LastFrameClippingBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Timecode { get; set; }
	}
	
	/// <summary>
	/// If you specify a StopTimecode in an input (in order to clip the file), you can specify if you want the clip to exclude (the default) or include the frame specified by the timecode.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LastFrameClippingBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXCLUDE_LAST_FRAME")]
		EXCLUDE_LAST_FRAME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INCLUDE_LAST_FRAME")]
		INCLUDE_LAST_FRAME = 1,
	}
	
	/// <summary>
	/// Settings for the "switch input" action: to switch from ingesting one input to ingesting another input.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputSwitchScheduleActionSettings
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InputAttachmentNameReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputClippingSettings InputClippingSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] UrlPath { get; set; }
	}
	
	/// <summary>
	/// Settings to specify the rendering of motion graphics into the video stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MotionGraphicsActivateScheduleActionSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PasswordParam { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Settings to specify the ending of rendering motion graphics into the video stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MotionGraphicsDeactivateScheduleActionSettings
	{
	}
	
	/// <summary>
	/// Settings for the action to set pause state of a channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PauseStateScheduleActionSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PipelinePauseStateSettings[] Pipelines { get; set; }
	}
	
	/// <summary>
	/// Settings for pausing a pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PipelinePauseStateSettings
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PipelineId PipelineId { get; set; }
	}
	
	/// <summary>
	/// Pipeline ID
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PipelineId
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PIPELINE_0")]
		PIPELINE_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PIPELINE_1")]
		PIPELINE_1 = 1,
	}
	
	/// <summary>
	/// Scte35Input Schedule Action Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Scte35InputScheduleActionSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InputAttachmentNameReference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Scte35InputMode Mode { get; set; }
	}
	
	/// <summary>
	/// Whether the SCTE-35 input should be the active input or a fixed input.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Scte35InputMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FIXED")]
		FIXED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FOLLOW_ACTIVE")]
		FOLLOW_ACTIVE = 1,
	}
	
	/// <summary>
	/// Settings for a SCTE-35 return_to_network message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Scte35ReturnToNetworkScheduleActionSettings
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int SpliceEventId { get; set; }
	}
	
	/// <summary>
	/// Settings for a SCTE-35 splice_insert message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Scte35SpliceInsertScheduleActionSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int SpliceEventId { get; set; }
	}
	
	/// <summary>
	/// Settings for a SCTE-35 time_signal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Scte35TimeSignalScheduleActionSettings
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Scte35Descriptor[] Scte35Descriptors { get; set; }
	}
	
	/// <summary>
	/// Holds one set of SCTE-35 Descriptor Settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Scte35Descriptor
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Scte35DescriptorSettings Scte35DescriptorSettings { get; set; }
	}
	
	/// <summary>
	/// SCTE-35 Descriptor settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Scte35DescriptorSettings
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Scte35SegmentationDescriptor SegmentationDescriptorScte35DescriptorSettings { get; set; }
	}
	
	/// <summary>
	/// Corresponds to SCTE-35 segmentation_descriptor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Scte35SegmentationDescriptor
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Scte35DeliveryRestrictions DeliveryRestrictions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SegmentNum { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Scte35SegmentationCancelIndicator SegmentationCancelIndicator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SegmentationDuration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int SegmentationEventId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SegmentationTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SegmentationUpid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SegmentationUpidType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SegmentsExpected { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SubSegmentNum { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SubSegmentsExpected { get; set; }
	}
	
	/// <summary>
	/// Corresponds to SCTE-35 delivery_not_restricted_flag parameter. To declare delivery restrictions, include this element and its four "restriction" flags. To declare that there are no restrictions, omit this element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Scte35DeliveryRestrictions
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Scte35ArchiveAllowedFlag ArchiveAllowedFlag { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Scte35DeviceRestrictions DeviceRestrictions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Scte35NoRegionalBlackoutFlag NoRegionalBlackoutFlag { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Scte35WebDeliveryAllowedFlag WebDeliveryAllowedFlag { get; set; }
	}
	
	/// <summary>
	/// Corresponds to the archive_allowed parameter. A value of ARCHIVE_NOT_ALLOWED corresponds to 0 (false) in the SCTE-35 specification. If you include one of the "restriction" flags then you must include all four of them.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Scte35ArchiveAllowedFlag
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ARCHIVE_NOT_ALLOWED")]
		ARCHIVE_NOT_ALLOWED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ARCHIVE_ALLOWED")]
		ARCHIVE_ALLOWED = 1,
	}
	
	/// <summary>
	/// Corresponds to the device_restrictions parameter in a segmentation_descriptor. If you include one of the "restriction" flags then you must include all four of them.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Scte35DeviceRestrictions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RESTRICT_GROUP0")]
		RESTRICT_GROUP0 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RESTRICT_GROUP1")]
		RESTRICT_GROUP1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RESTRICT_GROUP2")]
		RESTRICT_GROUP2 = 3,
	}
	
	/// <summary>
	/// Corresponds to the no_regional_blackout_flag parameter. A value of REGIONAL_BLACKOUT corresponds to 0 (false) in the SCTE-35 specification. If you include one of the "restriction" flags then you must include all four of them.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Scte35NoRegionalBlackoutFlag
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REGIONAL_BLACKOUT")]
		REGIONAL_BLACKOUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_REGIONAL_BLACKOUT")]
		NO_REGIONAL_BLACKOUT = 1,
	}
	
	/// <summary>
	/// Corresponds to the web_delivery_allowed_flag parameter. A value of WEB_DELIVERY_NOT_ALLOWED corresponds to 0 (false) in the SCTE-35 specification. If you include one of the "restriction" flags then you must include all four of them.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Scte35WebDeliveryAllowedFlag
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WEB_DELIVERY_NOT_ALLOWED")]
		WEB_DELIVERY_NOT_ALLOWED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WEB_DELIVERY_ALLOWED")]
		WEB_DELIVERY_ALLOWED = 1,
	}
	
	/// <summary>
	/// Corresponds to SCTE-35 segmentation_event_cancel_indicator. SEGMENTATION_EVENT_NOT_CANCELED corresponds to 0 in the SCTE-35 specification and indicates that this is an insertion request. SEGMENTATION_EVENT_CANCELED corresponds to 1 in the SCTE-35 specification and indicates that this is a cancelation request, in which case complete this field and the existing event ID to cancel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Scte35SegmentationCancelIndicator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SEGMENTATION_EVENT_NOT_CANCELED")]
		SEGMENTATION_EVENT_NOT_CANCELED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SEGMENTATION_EVENT_CANCELED")]
		SEGMENTATION_EVENT_CANCELED = 1,
	}
	
	/// <summary>
	/// Settings for the action to activate a static image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StaticImageActivateScheduleActionSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FadeIn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FadeOut { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InputLocation Image { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ImageX { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ImageY { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Layer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Opacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	/// <summary>
	/// Input Location
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputLocation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PasswordParam { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Settings for the action to deactivate the image in a specific layer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StaticImageDeactivateScheduleActionSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FadeOut { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Layer { get; set; }
	}
	
	/// <summary>
	/// Settings to specify when an action should occur. Only one of the options must be selected.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleActionStartSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FixedModeScheduleActionStartSettings FixedModeScheduleActionStartSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FollowModeScheduleActionStartSettings FollowModeScheduleActionStartSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ImmediateModeScheduleActionStartSettings ImmediateModeScheduleActionStartSettings { get; set; }
	}
	
	/// <summary>
	/// Start time for the action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FixedModeScheduleActionStartSettings
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Time { get; set; }
	}
	
	/// <summary>
	/// Settings to specify if an action follows another.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FollowModeScheduleActionStartSettings
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FollowPoint FollowPoint { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReferenceActionName { get; set; }
	}
	
	/// <summary>
	/// Follow reference point.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FollowPoint
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="END")]
		END = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="START")]
		START = 1,
	}
	
	/// <summary>
	/// Settings to configure an action so that it occurs as soon as possible.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImmediateModeScheduleActionStartSettings
	{
	}
	
	/// <summary>
	/// List of actions that have been deleted from the schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchScheduleActionDeleteResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScheduleAction[] ScheduleActions { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for CancelInputDeviceTransferResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelInputDeviceTransferResponse
	{
	}
	
	/// <summary>
	/// Placeholder documentation for ClaimDeviceResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClaimDeviceResponse
	{
	}
	
	/// <summary>
	/// Placeholder documentation for CreateChannelResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateChannelResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Channel Channel { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for Channel
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Channel
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CdiInputSpecification CdiInputSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChannelClass ChannelClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputDestination[] Destinations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChannelEgressEndpoint[] EgressEndpoints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EncoderSettings EncoderSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputAttachment[] InputAttachments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputSpecification InputSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LogLevel LogLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceStatus Maintenance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipelineDetail[] PipelineDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PipelinesRunningCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChannelState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcOutputSettingsDescription Vpc { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for CdiInputSpecification
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CdiInputSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CdiInputResolution Resolution { get; set; }
	}
	
	/// <summary>
	/// Maximum CDI input resolution; SD is 480i and 576i up to 30 frames-per-second (fps), HD is 720p up to 60 fps / 1080i up to 30 fps, FHD is 1080p up to 60 fps, UHD is 2160p up to 60 fps
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CdiInputResolution
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SD")]
		SD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HD")]
		HD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FHD")]
		FHD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UHD")]
		UHD = 3,
	}
	
	/// <summary>
	/// A standard channel has two encoding pipelines and a single pipeline channel only has one.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ChannelClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STANDARD")]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SINGLE_PIPELINE")]
		SINGLE_PIPELINE = 1,
	}
	
	/// <summary>
	/// Placeholder documentation for OutputDestination
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OutputDestination
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaPackageOutputDestinationSettings[] MediaPackageSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexProgramChannelDestinationSettings MultiplexSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputDestinationSettings[] Settings { get; set; }
	}
	
	/// <summary>
	/// MediaPackage Output Destination Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaPackageOutputDestinationSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ChannelId { get; set; }
	}
	
	/// <summary>
	/// Multiplex Program Input Destination Settings for outputting a Channel to a Multiplex
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MultiplexProgramChannelDestinationSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MultiplexId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProgramName { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for OutputDestinationSettings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OutputDestinationSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PasswordParam { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StreamName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for ChannelEgressEndpoint
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelEgressEndpoint
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceIp { get; set; }
	}
	
	/// <summary>
	/// Encoder Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EncoderSettings
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AudioDescription[] AudioDescriptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AvailBlanking AvailBlanking { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AvailConfiguration AvailConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BlackoutSlate BlackoutSlate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CaptionDescription[] CaptionDescriptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FeatureActivations FeatureActivations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GlobalConfiguration GlobalConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MotionGraphicsConfiguration MotionGraphicsConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenConfiguration NielsenConfiguration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputGroup[] OutputGroups { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TimecodeConfig TimecodeConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VideoDescription[] VideoDescriptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ThumbnailConfiguration ThumbnailConfiguration { get; set; }
	}
	
	/// <summary>
	/// Audio Description
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AudioDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AudioNormalizationSettings AudioNormalizationSettings { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AudioSelectorName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AudioType AudioType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AudioDescriptionAudioTypeControl AudioTypeControl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AudioWatermarkSettings AudioWatermarkingSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AudioCodecSettings CodecSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AudioDescriptionAudioTypeControl LanguageCodeControl { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RemixSettings RemixSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StreamName { get; set; }
	}
	
	/// <summary>
	/// Audio Normalization Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AudioNormalizationSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AudioNormalizationAlgorithm Algorithm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AudioNormalizationAlgorithmControl AlgorithmControl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TargetLkfs { get; set; }
	}
	
	/// <summary>
	/// Audio Normalization Algorithm
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AudioNormalizationAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ITU_1770_1")]
		ITU_1770_1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ITU_1770_2")]
		ITU_1770_2 = 1,
	}
	
	/// <summary>
	/// Audio Normalization Algorithm Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AudioNormalizationAlgorithmControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CORRECT_AUDIO")]
		CORRECT_AUDIO = 0,
	}
	
	/// <summary>
	/// Audio Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AudioType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLEAN_EFFECTS")]
		CLEAN_EFFECTS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HEARING_IMPAIRED")]
		HEARING_IMPAIRED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNDEFINED")]
		UNDEFINED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VISUAL_IMPAIRED_COMMENTARY")]
		VISUAL_IMPAIRED_COMMENTARY = 3,
	}
	
	/// <summary>
	/// Audio Description Audio Type Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AudioDescriptionAudioTypeControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FOLLOW_INPUT")]
		FOLLOW_INPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USE_CONFIGURED")]
		USE_CONFIGURED = 1,
	}
	
	/// <summary>
	/// Audio Watermark Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AudioWatermarkSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenWatermarksSettings NielsenWatermarksSettings { get; set; }
	}
	
	/// <summary>
	/// Nielsen Watermarks Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NielsenWatermarksSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenCBET NielsenCbetSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenWatermarksDistributionTypes NielsenDistributionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenNaesIiNw NielsenNaesIiNwSettings { get; set; }
	}
	
	/// <summary>
	/// Nielsen CBET
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NielsenCBET
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CbetCheckDigitString { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NielsenWatermarksCbetStepaside CbetStepaside { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Csid { get; set; }
	}
	
	/// <summary>
	/// Nielsen Watermarks Cbet Stepaside
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NielsenWatermarksCbetStepaside
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Nielsen Watermarks Distribution Types
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NielsenWatermarksDistributionTypes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FINAL_DISTRIBUTOR")]
		FINAL_DISTRIBUTOR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROGRAM_CONTENT")]
		PROGRAM_CONTENT = 1,
	}
	
	/// <summary>
	/// Nielsen Naes Ii Nw
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NielsenNaesIiNw
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CheckDigitString { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double Sid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenWatermarkTimezones Timezone { get; set; }
	}
	
	/// <summary>
	/// Nielsen Watermark Timezones
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NielsenWatermarkTimezones
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AMERICA_PUERTO_RICO")]
		AMERICA_PUERTO_RICO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="US_ALASKA")]
		US_ALASKA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="US_ARIZONA")]
		US_ARIZONA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="US_CENTRAL")]
		US_CENTRAL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="US_EASTERN")]
		US_EASTERN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="US_HAWAII")]
		US_HAWAII = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="US_MOUNTAIN")]
		US_MOUNTAIN = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="US_PACIFIC")]
		US_PACIFIC = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="US_SAMOA")]
		US_SAMOA = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UTC")]
		UTC = 9,
	}
	
	/// <summary>
	/// Audio Codec Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AudioCodecSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AacSettings AacSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ac3Settings Ac3Settings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Eac3AtmosSettings Eac3AtmosSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Eac3Settings Eac3Settings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Mp2Settings Mp2Settings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PassThroughSettings PassThroughSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WavSettings WavSettings { get; set; }
	}
	
	/// <summary>
	/// Aac Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AacSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Bitrate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AacCodingMode CodingMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AacInputType InputType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AacProfile Profile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AacRateControlMode RateControlMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AacRawFormat RawFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SampleRate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AacSpec Spec { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AacVbrQuality VbrQuality { get; set; }
	}
	
	/// <summary>
	/// Aac Coding Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AacCodingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AD_RECEIVER_MIX")]
		AD_RECEIVER_MIX = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CODING_MODE_1_0")]
		CODING_MODE_1_0 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CODING_MODE_1_1")]
		CODING_MODE_1_1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CODING_MODE_2_0")]
		CODING_MODE_2_0 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CODING_MODE_5_1")]
		CODING_MODE_5_1 = 4,
	}
	
	/// <summary>
	/// Aac Input Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AacInputType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BROADCASTER_MIXED_AD")]
		BROADCASTER_MIXED_AD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NORMAL")]
		NORMAL = 1,
	}
	
	/// <summary>
	/// Aac Profile
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AacProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HEV1")]
		HEV1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HEV2")]
		HEV2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LC")]
		LC = 2,
	}
	
	/// <summary>
	/// Aac Rate Control Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AacRateControlMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CBR")]
		CBR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VBR")]
		VBR = 1,
	}
	
	/// <summary>
	/// Aac Raw Format
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AacRawFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LATM_LOAS")]
		LATM_LOAS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 1,
	}
	
	/// <summary>
	/// Aac Spec
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AacSpec
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MPEG2")]
		MPEG2 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MPEG4")]
		MPEG4 = 1,
	}
	
	/// <summary>
	/// Aac Vbr Quality
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AacVbrQuality
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HIGH")]
		HIGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOW")]
		LOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MEDIUM_HIGH")]
		MEDIUM_HIGH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MEDIUM_LOW")]
		MEDIUM_LOW = 3,
	}
	
	/// <summary>
	/// Ac3 Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Ac3Settings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Bitrate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ac3BitstreamMode BitstreamMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ac3CodingMode CodingMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Dialnorm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ac3DrcProfile DrcProfile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenWatermarksCbetStepaside LfeFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AudioDescriptionAudioTypeControl MetadataControl { get; set; }
	}
	
	/// <summary>
	/// Ac3 Bitstream Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Ac3BitstreamMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMMENTARY")]
		COMMENTARY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETE_MAIN")]
		COMPLETE_MAIN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DIALOGUE")]
		DIALOGUE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EMERGENCY")]
		EMERGENCY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HEARING_IMPAIRED")]
		HEARING_IMPAIRED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MUSIC_AND_EFFECTS")]
		MUSIC_AND_EFFECTS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VISUALLY_IMPAIRED")]
		VISUALLY_IMPAIRED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VOICE_OVER")]
		VOICE_OVER = 7,
	}
	
	/// <summary>
	/// Ac3 Coding Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Ac3CodingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CODING_MODE_1_0")]
		CODING_MODE_1_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CODING_MODE_1_1")]
		CODING_MODE_1_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CODING_MODE_2_0")]
		CODING_MODE_2_0 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CODING_MODE_3_2_LFE")]
		CODING_MODE_3_2_LFE = 3,
	}
	
	/// <summary>
	/// Ac3 Drc Profile
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Ac3DrcProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FILM_STANDARD")]
		FILM_STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 1,
	}
	
	/// <summary>
	/// Eac3 Atmos Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Eac3AtmosSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Bitrate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Eac3AtmosCodingMode CodingMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Dialnorm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Eac3AtmosDrcLine DrcLine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Eac3AtmosDrcLine DrcRf { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> HeightTrim { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SurroundTrim { get; set; }
	}
	
	/// <summary>
	/// Eac3 Atmos Coding Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Eac3AtmosCodingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CODING_MODE_5_1_4")]
		CODING_MODE_5_1_4 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CODING_MODE_7_1_4")]
		CODING_MODE_7_1_4 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CODING_MODE_9_1_6")]
		CODING_MODE_9_1_6 = 2,
	}
	
	/// <summary>
	/// Eac3 Atmos Drc Line
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Eac3AtmosDrcLine
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FILM_LIGHT")]
		FILM_LIGHT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FILM_STANDARD")]
		FILM_STANDARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MUSIC_LIGHT")]
		MUSIC_LIGHT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MUSIC_STANDARD")]
		MUSIC_STANDARD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SPEECH")]
		SPEECH = 5,
	}
	
	/// <summary>
	/// Eac3 Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Eac3Settings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Eac3AttenuationControl AttenuationControl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Bitrate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Eac3BitstreamMode BitstreamMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Eac3CodingMode CodingMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenWatermarksCbetStepaside DcFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Dialnorm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Eac3AtmosDrcLine DrcLine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Eac3AtmosDrcLine DrcRf { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Eac3LfeControl LfeControl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenWatermarksCbetStepaside LfeFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> LoRoCenterMixLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> LoRoSurroundMixLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> LtRtCenterMixLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> LtRtSurroundMixLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AudioDescriptionAudioTypeControl MetadataControl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Eac3PassthroughControl PassthroughControl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Eac3PhaseControl PhaseControl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Eac3StereoDownmix StereoDownmix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Eac3SurroundExMode SurroundExMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Eac3SurroundExMode SurroundMode { get; set; }
	}
	
	/// <summary>
	/// Eac3 Attenuation Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Eac3AttenuationControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ATTENUATE_3_DB")]
		ATTENUATE_3_DB = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 1,
	}
	
	/// <summary>
	/// Eac3 Bitstream Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Eac3BitstreamMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMMENTARY")]
		COMMENTARY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETE_MAIN")]
		COMPLETE_MAIN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EMERGENCY")]
		EMERGENCY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HEARING_IMPAIRED")]
		HEARING_IMPAIRED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VISUALLY_IMPAIRED")]
		VISUALLY_IMPAIRED = 4,
	}
	
	/// <summary>
	/// Eac3 Coding Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Eac3CodingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CODING_MODE_1_0")]
		CODING_MODE_1_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CODING_MODE_2_0")]
		CODING_MODE_2_0 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CODING_MODE_3_2")]
		CODING_MODE_3_2 = 2,
	}
	
	/// <summary>
	/// Eac3 Lfe Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Eac3LfeControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LFE")]
		LFE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_LFE")]
		NO_LFE = 1,
	}
	
	/// <summary>
	/// Eac3 Passthrough Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Eac3PassthroughControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_PASSTHROUGH")]
		NO_PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WHEN_POSSIBLE")]
		WHEN_POSSIBLE = 1,
	}
	
	/// <summary>
	/// Eac3 Phase Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Eac3PhaseControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_SHIFT")]
		NO_SHIFT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SHIFT_90_DEGREES")]
		SHIFT_90_DEGREES = 1,
	}
	
	/// <summary>
	/// Eac3 Stereo Downmix
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Eac3StereoDownmix
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DPL2")]
		DPL2 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LO_RO")]
		LO_RO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LT_RT")]
		LT_RT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_INDICATED")]
		NOT_INDICATED = 3,
	}
	
	/// <summary>
	/// Eac3 Surround Ex Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Eac3SurroundExMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_INDICATED")]
		NOT_INDICATED = 2,
	}
	
	/// <summary>
	/// Mp2 Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Mp2Settings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Bitrate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Mp2CodingMode CodingMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SampleRate { get; set; }
	}
	
	/// <summary>
	/// Mp2 Coding Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Mp2CodingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CODING_MODE_1_0")]
		CODING_MODE_1_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CODING_MODE_2_0")]
		CODING_MODE_2_0 = 1,
	}
	
	/// <summary>
	/// Pass Through Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PassThroughSettings
	{
	}
	
	/// <summary>
	/// Wav Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WavSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BitDepth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WavCodingMode CodingMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SampleRate { get; set; }
	}
	
	/// <summary>
	/// Wav Coding Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WavCodingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CODING_MODE_1_0")]
		CODING_MODE_1_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CODING_MODE_2_0")]
		CODING_MODE_2_0 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CODING_MODE_4_0")]
		CODING_MODE_4_0 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CODING_MODE_8_0")]
		CODING_MODE_8_0 = 3,
	}
	
	/// <summary>
	/// Remix Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemixSettings
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AudioChannelMapping[] ChannelMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ChannelsIn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ChannelsOut { get; set; }
	}
	
	/// <summary>
	/// Audio Channel Mapping
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AudioChannelMapping
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InputChannelLevel[] InputChannelLevels { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int OutputChannel { get; set; }
	}
	
	/// <summary>
	/// Input Channel Level
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputChannelLevel
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Gain { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int InputChannel { get; set; }
	}
	
	/// <summary>
	/// Avail Blanking
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AvailBlanking
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InputLocation AvailBlankingImage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenWatermarksCbetStepaside State { get; set; }
	}
	
	/// <summary>
	/// Avail Configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AvailConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AvailSettings AvailSettings { get; set; }
	}
	
	/// <summary>
	/// Avail Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AvailSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Esam Esam { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Scte35SpliceInsert Scte35SpliceInsert { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Scte35TimeSignalApos Scte35TimeSignalApos { get; set; }
	}
	
	/// <summary>
	/// Esam
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Esam
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AcquisitionPointId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AdAvailOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PasswordParam { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PoisEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ZoneIdentity { get; set; }
	}
	
	/// <summary>
	/// Typical configuration that applies breaks on splice inserts in addition to time signal placement opportunities, breaks, and advertisements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Scte35SpliceInsert
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AdAvailOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Scte35SpliceInsertNoRegionalBlackoutBehavior NoRegionalBlackoutFlag { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Scte35SpliceInsertNoRegionalBlackoutBehavior WebDeliveryAllowedFlag { get; set; }
	}
	
	/// <summary>
	/// Scte35 Splice Insert No Regional Blackout Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Scte35SpliceInsertNoRegionalBlackoutBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FOLLOW")]
		FOLLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IGNORE")]
		IGNORE = 1,
	}
	
	/// <summary>
	/// Atypical configuration that applies segment breaks only on SCTE-35 time signal placement opportunities and breaks.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Scte35TimeSignalApos
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AdAvailOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Scte35SpliceInsertNoRegionalBlackoutBehavior NoRegionalBlackoutFlag { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Scte35SpliceInsertNoRegionalBlackoutBehavior WebDeliveryAllowedFlag { get; set; }
	}
	
	/// <summary>
	/// Blackout Slate
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BlackoutSlate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InputLocation BlackoutSlateImage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenWatermarksCbetStepaside NetworkEndBlackout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputLocation NetworkEndBlackoutImage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenWatermarksCbetStepaside State { get; set; }
	}
	
	/// <summary>
	/// Caption Description
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CaptionDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AccessibilityType Accessibility { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CaptionSelectorName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CaptionDestinationSettings DestinationSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LanguageDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Accessibility Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AccessibilityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DOES_NOT_IMPLEMENT_ACCESSIBILITY_FEATURES")]
		DOES_NOT_IMPLEMENT_ACCESSIBILITY_FEATURES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPLEMENTS_ACCESSIBILITY_FEATURES")]
		IMPLEMENTS_ACCESSIBILITY_FEATURES = 1,
	}
	
	/// <summary>
	/// Caption Destination Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CaptionDestinationSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AribDestinationSettings AribDestinationSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BurnInDestinationSettings BurnInDestinationSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DvbSubDestinationSettings DvbSubDestinationSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EbuTtDDestinationSettings EbuTtDDestinationSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EmbeddedDestinationSettings EmbeddedDestinationSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EmbeddedPlusScte20DestinationSettings EmbeddedPlusScte20DestinationSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RtmpCaptionInfoDestinationSettings RtmpCaptionInfoDestinationSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Scte20PlusEmbeddedDestinationSettings Scte20PlusEmbeddedDestinationSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Scte27DestinationSettings Scte27DestinationSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SmpteTtDestinationSettings SmpteTtDestinationSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TeletextDestinationSettings TeletextDestinationSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TtmlDestinationSettings TtmlDestinationSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WebvttDestinationSettings WebvttDestinationSettings { get; set; }
	}
	
	/// <summary>
	/// Arib Destination Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AribDestinationSettings
	{
	}
	
	/// <summary>
	/// Burn In Destination Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BurnInDestinationSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BurnInAlignment Alignment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BurnInBackgroundColor BackgroundColor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BackgroundOpacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputLocation Font { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BurnInFontColor FontColor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FontOpacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FontResolution { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FontSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BurnInFontColor OutlineColor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> OutlineSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BurnInBackgroundColor ShadowColor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ShadowOpacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ShadowXOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ShadowYOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BurnInTeletextGridControl TeletextGridControl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> XPosition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> YPosition { get; set; }
	}
	
	/// <summary>
	/// Burn In Alignment
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BurnInAlignment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CENTERED")]
		CENTERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LEFT")]
		LEFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SMART")]
		SMART = 2,
	}
	
	/// <summary>
	/// Burn In Background Color
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BurnInBackgroundColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BLACK")]
		BLACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WHITE")]
		WHITE = 2,
	}
	
	/// <summary>
	/// Burn In Font Color
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BurnInFontColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BLACK")]
		BLACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BLUE")]
		BLUE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GREEN")]
		GREEN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RED")]
		RED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WHITE")]
		WHITE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="YELLOW")]
		YELLOW = 5,
	}
	
	/// <summary>
	/// Burn In Teletext Grid Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BurnInTeletextGridControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FIXED")]
		FIXED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SCALED")]
		SCALED = 1,
	}
	
	/// <summary>
	/// Dvb Sub Destination Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DvbSubDestinationSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BurnInAlignment Alignment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BurnInBackgroundColor BackgroundColor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BackgroundOpacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputLocation Font { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BurnInFontColor FontColor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FontOpacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FontResolution { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FontSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BurnInFontColor OutlineColor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> OutlineSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BurnInBackgroundColor ShadowColor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ShadowOpacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ShadowXOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ShadowYOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BurnInTeletextGridControl TeletextGridControl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> XPosition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> YPosition { get; set; }
	}
	
	/// <summary>
	/// Ebu Tt DDestination Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EbuTtDDestinationSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CopyrightHolder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenWatermarksCbetStepaside FillLineGap { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FontFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EbuTtDDestinationStyleControl StyleControl { get; set; }
	}
	
	/// <summary>
	/// Ebu Tt DDestination Style Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EbuTtDDestinationStyleControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXCLUDE")]
		EXCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INCLUDE")]
		INCLUDE = 1,
	}
	
	/// <summary>
	/// Embedded Destination Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EmbeddedDestinationSettings
	{
	}
	
	/// <summary>
	/// Embedded Plus Scte20 Destination Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EmbeddedPlusScte20DestinationSettings
	{
	}
	
	/// <summary>
	/// Rtmp Caption Info Destination Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RtmpCaptionInfoDestinationSettings
	{
	}
	
	/// <summary>
	/// Scte20 Plus Embedded Destination Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Scte20PlusEmbeddedDestinationSettings
	{
	}
	
	/// <summary>
	/// Scte27 Destination Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Scte27DestinationSettings
	{
	}
	
	/// <summary>
	/// Smpte Tt Destination Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SmpteTtDestinationSettings
	{
	}
	
	/// <summary>
	/// Teletext Destination Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TeletextDestinationSettings
	{
	}
	
	/// <summary>
	/// Ttml Destination Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TtmlDestinationSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TtmlDestinationStyleControl StyleControl { get; set; }
	}
	
	/// <summary>
	/// Ttml Destination Style Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TtmlDestinationStyleControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PASSTHROUGH")]
		PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USE_CONFIGURED")]
		USE_CONFIGURED = 1,
	}
	
	/// <summary>
	/// Webvtt Destination Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WebvttDestinationSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public WebvttDestinationStyleControl StyleControl { get; set; }
	}
	
	/// <summary>
	/// Webvtt Destination Style Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WebvttDestinationStyleControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_STYLE_DATA")]
		NO_STYLE_DATA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PASSTHROUGH")]
		PASSTHROUGH = 1,
	}
	
	/// <summary>
	/// Feature Activations
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FeatureActivations
	{
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenWatermarksCbetStepaside InputPrepareScheduleActions { get; set; }
	}
	
	/// <summary>
	/// Global Configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GlobalConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InitialAudioGain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GlobalConfigurationInputEndAction InputEndAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputLossBehavior InputLossBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GlobalConfigurationOutputLockingMode OutputLockingMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GlobalConfigurationOutputTimingSource OutputTimingSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenWatermarksCbetStepaside SupportLowFramerateInputs { get; set; }
	}
	
	/// <summary>
	/// Global Configuration Input End Action
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GlobalConfigurationInputEndAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SWITCH_AND_LOOP_INPUTS")]
		SWITCH_AND_LOOP_INPUTS = 1,
	}
	
	/// <summary>
	/// Input Loss Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputLossBehavior
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BlackFrameMsec { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InputLossImageColor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputLocation InputLossImageSlate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputLossImageType InputLossImageType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RepeatFrameMsec { get; set; }
	}
	
	/// <summary>
	/// Input Loss Image Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InputLossImageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COLOR")]
		COLOR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SLATE")]
		SLATE = 1,
	}
	
	/// <summary>
	/// Global Configuration Output Locking Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GlobalConfigurationOutputLockingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EPOCH_LOCKING")]
		EPOCH_LOCKING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PIPELINE_LOCKING")]
		PIPELINE_LOCKING = 1,
	}
	
	/// <summary>
	/// Global Configuration Output Timing Source
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GlobalConfigurationOutputTimingSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INPUT_CLOCK")]
		INPUT_CLOCK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SYSTEM_CLOCK")]
		SYSTEM_CLOCK = 1,
	}
	
	/// <summary>
	/// Motion Graphics Configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MotionGraphicsConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenWatermarksCbetStepaside MotionGraphicsInsertion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MotionGraphicsSettings MotionGraphicsSettings { get; set; }
	}
	
	/// <summary>
	/// Motion Graphics Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MotionGraphicsSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public HtmlMotionGraphicsSettings HtmlMotionGraphicsSettings { get; set; }
	}
	
	/// <summary>
	/// Html Motion Graphics Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HtmlMotionGraphicsSettings
	{
	}
	
	/// <summary>
	/// Nielsen Configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NielsenConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DistributorId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenWatermarksCbetStepaside NielsenPcmToId3Tagging { get; set; }
	}
	
	/// <summary>
	/// Output groups for this Live Event. Output groups contain information about where streams should be distributed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OutputGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputGroupSettings OutputGroupSettings { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Output[] Outputs { get; set; }
	}
	
	/// <summary>
	/// Output Group Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OutputGroupSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ArchiveGroupSettings ArchiveGroupSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FrameCaptureGroupSettings FrameCaptureGroupSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettings HlsGroupSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaPackageGroupSettings MediaPackageGroupSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MsSmoothGroupSettings MsSmoothGroupSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexGroupSettings MultiplexGroupSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RtmpGroupSettings RtmpGroupSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UdpGroupSettings UdpGroupSettings { get; set; }
	}
	
	/// <summary>
	/// Archive Group Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArchiveGroupSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ArchiveCdnSettings ArchiveCdnSettings { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputLocationRef Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RolloverInterval { get; set; }
	}
	
	/// <summary>
	/// Archive Cdn Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArchiveCdnSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ArchiveS3Settings ArchiveS3Settings { get; set; }
	}
	
	/// <summary>
	/// Archive S3 Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArchiveS3Settings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public S3CannedAcl CannedAcl { get; set; }
	}
	
	/// <summary>
	/// S3 Canned Acl
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum S3CannedAcl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTHENTICATED_READ")]
		AUTHENTICATED_READ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BUCKET_OWNER_FULL_CONTROL")]
		BUCKET_OWNER_FULL_CONTROL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BUCKET_OWNER_READ")]
		BUCKET_OWNER_READ = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PUBLIC_READ")]
		PUBLIC_READ = 3,
	}
	
	/// <summary>
	/// Reference to an OutputDestination ID defined in the channel
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OutputLocationRef
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationRefId { get; set; }
	}
	
	/// <summary>
	/// Frame Capture Group Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FrameCaptureGroupSettings
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputLocationRef Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FrameCaptureCdnSettings FrameCaptureCdnSettings { get; set; }
	}
	
	/// <summary>
	/// Frame Capture Cdn Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FrameCaptureCdnSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FrameCaptureS3Settings FrameCaptureS3Settings { get; set; }
	}
	
	/// <summary>
	/// Frame Capture S3 Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FrameCaptureS3Settings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public S3CannedAcl CannedAcl { get; set; }
	}
	
	/// <summary>
	/// Hls Group Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HlsGroupSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public HlsAdMarkers[] AdMarkers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BaseUrlContent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BaseUrlContent1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BaseUrlManifest { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BaseUrlManifest1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CaptionLanguageMapping[] CaptionLanguageMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsCaptionLanguageSetting CaptionLanguageSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenWatermarksCbetStepaside ClientCache { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsCodecSpecification CodecSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConstantIv { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputLocationRef Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsDirectoryStructure DirectoryStructure { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsDiscontinuityTags DiscontinuityTags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsEncryptionType EncryptionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsCdnSettings HlsCdnSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenWatermarksCbetStepaside HlsId3SegmentTagging { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IFrameOnlyPlaylistType IFrameOnlyPlaylists { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsIncompleteSegmentBehavior IncompleteSegmentBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> IndexNSegments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputLossActionForHlsOut InputLossAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EbuTtDDestinationStyleControl IvInManifest { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsIvSource IvSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> KeepSegments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KeyFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KeyFormatVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KeyProviderSettings KeyProviderSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsManifestCompression ManifestCompression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsManifestDurationFormat ManifestDurationFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinSegmentLength { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsMode Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsOutputSelection OutputSelection { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EbuTtDDestinationStyleControl ProgramDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsProgramDateTimeClock ProgramDateTimeClock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProgramDateTimePeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenWatermarksCbetStepaside RedundantManifest { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SegmentLength { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsSegmentationMode SegmentationMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SegmentsPerSubdirectory { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EbuTtDDestinationStyleControl StreamInfResolution { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsTimedMetadataId3Frame TimedMetadataId3Frame { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimedMetadataId3Period { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimestampDeltaMilliseconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsTsFileMode TsFileMode { get; set; }
	}
	
	/// <summary>
	/// Hls Ad Markers
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HlsAdMarkers
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADOBE")]
		ADOBE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ELEMENTAL")]
		ELEMENTAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ELEMENTAL_SCTE35")]
		ELEMENTAL_SCTE35 = 2,
	}
	
	/// <summary>
	/// Maps a caption channel to an ISO 693-2 language code (http://www.loc.gov/standards/iso639-2), with an optional description.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CaptionLanguageMapping
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int CaptionChannel { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LanguageDescription { get; set; }
	}
	
	/// <summary>
	/// Hls Caption Language Setting
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HlsCaptionLanguageSetting
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSERT")]
		INSERT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OMIT")]
		OMIT = 2,
	}
	
	/// <summary>
	/// Hls Codec Specification
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HlsCodecSpecification
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RFC_4281")]
		RFC_4281 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RFC_6381")]
		RFC_6381 = 1,
	}
	
	/// <summary>
	/// Hls Directory Structure
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HlsDirectoryStructure
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SINGLE_DIRECTORY")]
		SINGLE_DIRECTORY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUBDIRECTORY_PER_STREAM")]
		SUBDIRECTORY_PER_STREAM = 1,
	}
	
	/// <summary>
	/// Hls Discontinuity Tags
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HlsDiscontinuityTags
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSERT")]
		INSERT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NEVER_INSERT")]
		NEVER_INSERT = 1,
	}
	
	/// <summary>
	/// Hls Encryption Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HlsEncryptionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AES128")]
		AES128 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SAMPLE_AES")]
		SAMPLE_AES = 1,
	}
	
	/// <summary>
	/// Hls Cdn Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HlsCdnSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public HlsAkamaiSettings HlsAkamaiSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsBasicPutSettings HlsBasicPutSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsMediaStoreSettings HlsMediaStoreSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsS3Settings HlsS3Settings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsWebdavSettings HlsWebdavSettings { get; set; }
	}
	
	/// <summary>
	/// Hls Akamai Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HlsAkamaiSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ConnectionRetryInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FilecacheDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsAkamaiHttpTransferMode HttpTransferMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumRetries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RestartDelay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Salt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Token { get; set; }
	}
	
	/// <summary>
	/// Hls Akamai Http Transfer Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HlsAkamaiHttpTransferMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHUNKED")]
		CHUNKED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NON_CHUNKED")]
		NON_CHUNKED = 1,
	}
	
	/// <summary>
	/// Hls Basic Put Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HlsBasicPutSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ConnectionRetryInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FilecacheDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumRetries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RestartDelay { get; set; }
	}
	
	/// <summary>
	/// Hls Media Store Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HlsMediaStoreSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ConnectionRetryInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FilecacheDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsMediaStoreStorageClass MediaStoreStorageClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumRetries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RestartDelay { get; set; }
	}
	
	/// <summary>
	/// Hls Media Store Storage Class
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HlsMediaStoreStorageClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TEMPORAL")]
		TEMPORAL = 0,
	}
	
	/// <summary>
	/// Hls S3 Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HlsS3Settings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public S3CannedAcl CannedAcl { get; set; }
	}
	
	/// <summary>
	/// Hls Webdav Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HlsWebdavSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ConnectionRetryInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FilecacheDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsAkamaiHttpTransferMode HttpTransferMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumRetries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RestartDelay { get; set; }
	}
	
	/// <summary>
	/// When set to "standard", an I-Frame only playlist will be written out for each video output in the output group. This I-Frame only playlist will contain byte range offsets pointing to the I-frame(s) in each segment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum IFrameOnlyPlaylistType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STANDARD")]
		STANDARD = 1,
	}
	
	/// <summary>
	/// Hls Incomplete Segment Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HlsIncompleteSegmentBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTO")]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUPPRESS")]
		SUPPRESS = 1,
	}
	
	/// <summary>
	/// Input Loss Action For Hls Out
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InputLossActionForHlsOut
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EMIT_OUTPUT")]
		EMIT_OUTPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAUSE_OUTPUT")]
		PAUSE_OUTPUT = 1,
	}
	
	/// <summary>
	/// Hls Iv Source
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HlsIvSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPLICIT")]
		EXPLICIT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FOLLOWS_SEGMENT_NUMBER")]
		FOLLOWS_SEGMENT_NUMBER = 1,
	}
	
	/// <summary>
	/// Key Provider Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeyProviderSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StaticKeySettings StaticKeySettings { get; set; }
	}
	
	/// <summary>
	/// Static Key Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StaticKeySettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InputLocation KeyProviderServer { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StaticKeyValue { get; set; }
	}
	
	/// <summary>
	/// Hls Manifest Compression
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HlsManifestCompression
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GZIP")]
		GZIP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 1,
	}
	
	/// <summary>
	/// Hls Manifest Duration Format
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HlsManifestDurationFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FLOATING_POINT")]
		FLOATING_POINT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INTEGER")]
		INTEGER = 1,
	}
	
	/// <summary>
	/// Hls Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HlsMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LIVE")]
		LIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VOD")]
		VOD = 1,
	}
	
	/// <summary>
	/// Hls Output Selection
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HlsOutputSelection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MANIFESTS_AND_SEGMENTS")]
		MANIFESTS_AND_SEGMENTS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SEGMENTS_ONLY")]
		SEGMENTS_ONLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VARIANT_MANIFESTS_AND_SEGMENTS")]
		VARIANT_MANIFESTS_AND_SEGMENTS = 2,
	}
	
	/// <summary>
	/// Hls Program Date Time Clock
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HlsProgramDateTimeClock
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INITIALIZE_FROM_OUTPUT_TIMECODE")]
		INITIALIZE_FROM_OUTPUT_TIMECODE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SYSTEM_CLOCK")]
		SYSTEM_CLOCK = 1,
	}
	
	/// <summary>
	/// Hls Segmentation Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HlsSegmentationMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USE_INPUT_SEGMENTATION")]
		USE_INPUT_SEGMENTATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USE_SEGMENT_DURATION")]
		USE_SEGMENT_DURATION = 1,
	}
	
	/// <summary>
	/// Hls Timed Metadata Id3 Frame
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HlsTimedMetadataId3Frame
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRIV")]
		PRIV = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TDRL")]
		TDRL = 2,
	}
	
	/// <summary>
	/// Hls Ts File Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HlsTsFileMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SEGMENTED_FILES")]
		SEGMENTED_FILES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SINGLE_FILE")]
		SINGLE_FILE = 1,
	}
	
	/// <summary>
	/// Media Package Group Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaPackageGroupSettings
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputLocationRef Destination { get; set; }
	}
	
	/// <summary>
	/// Ms Smooth Group Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MsSmoothGroupSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcquisitionPointId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SmoothGroupAudioOnlyTimecodeControl AudioOnlyTimecodeControl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SmoothGroupCertificateMode CertificateMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ConnectionRetryInterval { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputLocationRef Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EventId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SmoothGroupEventIdMode EventIdMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SmoothGroupEventStopBehavior EventStopBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FilecacheDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FragmentLength { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputLossActionForHlsOut InputLossAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumRetries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RestartDelay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsSegmentationMode SegmentationMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SendDelayMs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SmoothGroupSparseTrackType SparseTrackType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SmoothGroupStreamManifestBehavior StreamManifestBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TimestampOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SmoothGroupTimestampOffsetMode TimestampOffsetMode { get; set; }
	}
	
	/// <summary>
	/// Smooth Group Audio Only Timecode Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SmoothGroupAudioOnlyTimecodeControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PASSTHROUGH")]
		PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USE_CONFIGURED_CLOCK")]
		USE_CONFIGURED_CLOCK = 1,
	}
	
	/// <summary>
	/// Smooth Group Certificate Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SmoothGroupCertificateMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SELF_SIGNED")]
		SELF_SIGNED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VERIFY_AUTHENTICITY")]
		VERIFY_AUTHENTICITY = 1,
	}
	
	/// <summary>
	/// Smooth Group Event Id Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SmoothGroupEventIdMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_EVENT_ID")]
		NO_EVENT_ID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USE_CONFIGURED")]
		USE_CONFIGURED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USE_TIMESTAMP")]
		USE_TIMESTAMP = 2,
	}
	
	/// <summary>
	/// Smooth Group Event Stop Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SmoothGroupEventStopBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SEND_EOS")]
		SEND_EOS = 1,
	}
	
	/// <summary>
	/// Smooth Group Sparse Track Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SmoothGroupSparseTrackType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SCTE_35")]
		SCTE_35 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SCTE_35_WITHOUT_SEGMENTATION")]
		SCTE_35_WITHOUT_SEGMENTATION = 2,
	}
	
	/// <summary>
	/// Smooth Group Stream Manifest Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SmoothGroupStreamManifestBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DO_NOT_SEND")]
		DO_NOT_SEND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SEND")]
		SEND = 1,
	}
	
	/// <summary>
	/// Smooth Group Timestamp Offset Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SmoothGroupTimestampOffsetMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USE_CONFIGURED_OFFSET")]
		USE_CONFIGURED_OFFSET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USE_EVENT_START_DATE")]
		USE_EVENT_START_DATE = 1,
	}
	
	/// <summary>
	/// Multiplex Group Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MultiplexGroupSettings
	{
	}
	
	/// <summary>
	/// Rtmp Group Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RtmpGroupSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RtmpAdMarkers[] AdMarkers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthenticationScheme AuthenticationScheme { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RtmpCacheFullBehavior CacheFullBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CacheLength { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RtmpCaptionData CaptionData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputLossActionForHlsOut InputLossAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RestartDelay { get; set; }
	}
	
	/// <summary>
	/// Rtmp Ad Markers
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RtmpAdMarkers
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ON_CUE_POINT_SCTE35")]
		ON_CUE_POINT_SCTE35 = 0,
	}
	
	/// <summary>
	/// Authentication Scheme
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AuthenticationScheme
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AKAMAI")]
		AKAMAI = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMMON")]
		COMMON = 1,
	}
	
	/// <summary>
	/// Rtmp Cache Full Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RtmpCacheFullBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISCONNECT_IMMEDIATELY")]
		DISCONNECT_IMMEDIATELY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WAIT_FOR_SERVER")]
		WAIT_FOR_SERVER = 1,
	}
	
	/// <summary>
	/// Rtmp Caption Data
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RtmpCaptionData
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALL")]
		ALL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FIELD1_608")]
		FIELD1_608 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FIELD1_AND_FIELD2_608")]
		FIELD1_AND_FIELD2_608 = 2,
	}
	
	/// <summary>
	/// Udp Group Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UdpGroupSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InputLossActionForUdpOut InputLossAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsTimedMetadataId3Frame TimedMetadataId3Frame { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimedMetadataId3Period { get; set; }
	}
	
	/// <summary>
	/// Input Loss Action For Udp Out
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InputLossActionForUdpOut
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DROP_PROGRAM")]
		DROP_PROGRAM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DROP_TS")]
		DROP_TS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EMIT_PROGRAM")]
		EMIT_PROGRAM = 2,
	}
	
	/// <summary>
	/// Output settings. There can be multiple outputs within a group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Output
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AudioDescriptionNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CaptionDescriptionNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OutputName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputSettings OutputSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VideoDescriptionName { get; set; }
	}
	
	/// <summary>
	/// Output Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OutputSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ArchiveOutputSettings ArchiveOutputSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FrameCaptureOutputSettings FrameCaptureOutputSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsOutputSettings HlsOutputSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaPackageOutputSettings MediaPackageOutputSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MsSmoothOutputSettings MsSmoothOutputSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexOutputSettings MultiplexOutputSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RtmpOutputSettings RtmpOutputSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UdpOutputSettings UdpOutputSettings { get; set; }
	}
	
	/// <summary>
	/// Archive Output Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArchiveOutputSettings
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ArchiveContainerSettings ContainerSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Extension { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameModifier { get; set; }
	}
	
	/// <summary>
	/// Archive Container Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArchiveContainerSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettings M2tsSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RawSettings RawSettings { get; set; }
	}
	
	/// <summary>
	/// M2ts Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class M2tsSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public M2tsAbsentInputAudioBehavior AbsentInputAudioBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenWatermarksCbetStepaside Arib { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AribCaptionsPid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public M2tsAribCaptionsPidControl AribCaptionsPidControl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public M2tsAudioBufferModel AudioBufferModel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AudioFramesPerPes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AudioPids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public M2tsAudioBufferModel AudioStreamType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Bitrate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public M2tsBufferModel BufferModel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenWatermarksCbetStepaside CcDescriptor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DvbNitSettings DvbNitSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DvbSdtSettings DvbSdtSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DvbSubPids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DvbTdtSettings DvbTdtSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DvbTeletextPid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public M2tsEbifControl Ebif { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public M2tsAudioInterval EbpAudioInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EbpLookaheadMs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public M2tsEbpPlacement EbpPlacement { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EcmPid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EbuTtDDestinationStyleControl EsRateInPes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EtvPlatformPid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EtvSignalPid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FragmentTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public M2tsEbifControl Klv { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KlvDataPids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public M2tsNielsenId3Behavior NielsenId3Behavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> NullPacketBitrate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PatInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public M2tsPcrControl PcrControl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PcrPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PcrPid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PmtInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PmtPid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProgramNum { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AacRateControlMode RateMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Scte27Pids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public M2tsEbifControl Scte35Control { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Scte35Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public M2tsSegmentationMarkers SegmentationMarkers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public M2tsSegmentationStyle SegmentationStyle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SegmentationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public M2tsNielsenId3Behavior TimedMetadataBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TimedMetadataPid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TransportStreamId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VideoPid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Scte35PrerollPullupMilliseconds { get; set; }
	}
	
	/// <summary>
	/// M2ts Absent Input Audio Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum M2tsAbsentInputAudioBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DROP")]
		DROP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENCODE_SILENCE")]
		ENCODE_SILENCE = 1,
	}
	
	/// <summary>
	/// M2ts Arib Captions Pid Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum M2tsAribCaptionsPidControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTO")]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USE_CONFIGURED")]
		USE_CONFIGURED = 1,
	}
	
	/// <summary>
	/// M2ts Audio Buffer Model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum M2tsAudioBufferModel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ATSC")]
		ATSC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DVB")]
		DVB = 1,
	}
	
	/// <summary>
	/// M2ts Buffer Model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum M2tsBufferModel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MULTIPLEX")]
		MULTIPLEX = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 1,
	}
	
	/// <summary>
	/// DVB Network Information Table (NIT)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DvbNitSettings
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int NetworkId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NetworkName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RepInterval { get; set; }
	}
	
	/// <summary>
	/// DVB Service Description Table (SDT)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DvbSdtSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DvbSdtOutputSdt OutputSdt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RepInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceProviderName { get; set; }
	}
	
	/// <summary>
	/// Dvb Sdt Output Sdt
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DvbSdtOutputSdt
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SDT_FOLLOW")]
		SDT_FOLLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SDT_FOLLOW_IF_PRESENT")]
		SDT_FOLLOW_IF_PRESENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SDT_MANUAL")]
		SDT_MANUAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SDT_NONE")]
		SDT_NONE = 3,
	}
	
	/// <summary>
	/// DVB Time and Date Table (SDT)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DvbTdtSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RepInterval { get; set; }
	}
	
	/// <summary>
	/// M2ts Ebif Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum M2tsEbifControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PASSTHROUGH")]
		PASSTHROUGH = 1,
	}
	
	/// <summary>
	/// M2ts Audio Interval
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum M2tsAudioInterval
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VIDEO_AND_FIXED_INTERVALS")]
		VIDEO_AND_FIXED_INTERVALS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VIDEO_INTERVAL")]
		VIDEO_INTERVAL = 1,
	}
	
	/// <summary>
	/// M2ts Ebp Placement
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum M2tsEbpPlacement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VIDEO_AND_AUDIO_PIDS")]
		VIDEO_AND_AUDIO_PIDS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VIDEO_PID")]
		VIDEO_PID = 1,
	}
	
	/// <summary>
	/// M2ts Nielsen Id3 Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum M2tsNielsenId3Behavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_PASSTHROUGH")]
		NO_PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PASSTHROUGH")]
		PASSTHROUGH = 1,
	}
	
	/// <summary>
	/// M2ts Pcr Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum M2tsPcrControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONFIGURED_PCR_PERIOD")]
		CONFIGURED_PCR_PERIOD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PCR_EVERY_PES_PACKET")]
		PCR_EVERY_PES_PACKET = 1,
	}
	
	/// <summary>
	/// M2ts Segmentation Markers
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum M2tsSegmentationMarkers
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EBP")]
		EBP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EBP_LEGACY")]
		EBP_LEGACY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PSI_SEGSTART")]
		PSI_SEGSTART = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RAI_ADAPT")]
		RAI_ADAPT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RAI_SEGSTART")]
		RAI_SEGSTART = 5,
	}
	
	/// <summary>
	/// M2ts Segmentation Style
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum M2tsSegmentationStyle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MAINTAIN_CADENCE")]
		MAINTAIN_CADENCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RESET_CADENCE")]
		RESET_CADENCE = 1,
	}
	
	/// <summary>
	/// Raw Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RawSettings
	{
	}
	
	/// <summary>
	/// Frame Capture Output Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FrameCaptureOutputSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NameModifier { get; set; }
	}
	
	/// <summary>
	/// Hls Output Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HlsOutputSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public HlsH265PackagingType H265PackagingType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HlsSettings HlsSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameModifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SegmentModifier { get; set; }
	}
	
	/// <summary>
	/// Hls H265 Packaging Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HlsH265PackagingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HEV1")]
		HEV1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HVC1")]
		HVC1 = 1,
	}
	
	/// <summary>
	/// Hls Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HlsSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AudioOnlyHlsSettings AudioOnlyHlsSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Fmp4HlsSettings Fmp4HlsSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FrameCaptureHlsSettings FrameCaptureHlsSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StandardHlsSettings StandardHlsSettings { get; set; }
	}
	
	/// <summary>
	/// Audio Only Hls Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AudioOnlyHlsSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AudioGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputLocation AudioOnlyImage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AudioOnlyHlsTrackType AudioTrackType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AudioOnlyHlsSegmentType SegmentType { get; set; }
	}
	
	/// <summary>
	/// Audio Only Hls Track Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AudioOnlyHlsTrackType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALTERNATE_AUDIO_AUTO_SELECT")]
		ALTERNATE_AUDIO_AUTO_SELECT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT")]
		ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALTERNATE_AUDIO_NOT_AUTO_SELECT")]
		ALTERNATE_AUDIO_NOT_AUTO_SELECT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUDIO_ONLY_VARIANT_STREAM")]
		AUDIO_ONLY_VARIANT_STREAM = 3,
	}
	
	/// <summary>
	/// Audio Only Hls Segment Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AudioOnlyHlsSegmentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AAC")]
		AAC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FMP4")]
		FMP4 = 1,
	}
	
	/// <summary>
	/// Fmp4 Hls Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Fmp4HlsSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AudioRenditionSets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public M2tsNielsenId3Behavior NielsenId3Behavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public M2tsNielsenId3Behavior TimedMetadataBehavior { get; set; }
	}
	
	/// <summary>
	/// Frame Capture Hls Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FrameCaptureHlsSettings
	{
	}
	
	/// <summary>
	/// Standard Hls Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StandardHlsSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AudioRenditionSets { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public M3u8Settings M3u8Settings { get; set; }
	}
	
	/// <summary>
	/// Settings information for the .m3u8 container
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class M3u8Settings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AudioFramesPerPes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AudioPids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EcmPid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public M2tsNielsenId3Behavior NielsenId3Behavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PatInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public M2tsPcrControl PcrControl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PcrPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PcrPid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PmtInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PmtPid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProgramNum { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public M2tsNielsenId3Behavior Scte35Behavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Scte35Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public M2tsNielsenId3Behavior TimedMetadataBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TimedMetadataPid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TransportStreamId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VideoPid { get; set; }
	}
	
	/// <summary>
	/// Media Package Output Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaPackageOutputSettings
	{
	}
	
	/// <summary>
	/// Ms Smooth Output Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MsSmoothOutputSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public HlsH265PackagingType H265PackagingType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameModifier { get; set; }
	}
	
	/// <summary>
	/// Multiplex Output Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MultiplexOutputSettings
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputLocationRef Destination { get; set; }
	}
	
	/// <summary>
	/// Rtmp Output Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RtmpOutputSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SmoothGroupCertificateMode CertificateMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ConnectionRetryInterval { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputLocationRef Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumRetries { get; set; }
	}
	
	/// <summary>
	/// Udp Output Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UdpOutputSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BufferMsec { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UdpContainerSettings ContainerSettings { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputLocationRef Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FecOutputSettings FecOutputSettings { get; set; }
	}
	
	/// <summary>
	/// Udp Container Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UdpContainerSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettings M2tsSettings { get; set; }
	}
	
	/// <summary>
	/// Fec Output Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FecOutputSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ColumnDepth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FecOutputIncludeFec IncludeFec { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RowLength { get; set; }
	}
	
	/// <summary>
	/// Fec Output Include Fec
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FecOutputIncludeFec
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COLUMN")]
		COLUMN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COLUMN_AND_ROW")]
		COLUMN_AND_ROW = 1,
	}
	
	/// <summary>
	/// Timecode Config
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimecodeConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TimecodeConfigSource Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SyncThreshold { get; set; }
	}
	
	/// <summary>
	/// Timecode Config Source
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TimecodeConfigSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EMBEDDED")]
		EMBEDDED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SYSTEMCLOCK")]
		SYSTEMCLOCK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ZEROBASED")]
		ZEROBASED = 2,
	}
	
	/// <summary>
	/// Video settings for this stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VideoCodecSettings CodecSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VideoDescriptionRespondToAfd RespondToAfd { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VideoDescriptionScalingBehavior ScalingBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Sharpness { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	/// <summary>
	/// Video Codec Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoCodecSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FrameCaptureSettings FrameCaptureSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H264Settings H264Settings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H265Settings H265Settings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Mpeg2Settings Mpeg2Settings { get; set; }
	}
	
	/// <summary>
	/// Frame Capture Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FrameCaptureSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CaptureInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FrameCaptureIntervalUnit CaptureIntervalUnits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TimecodeBurninSettings TimecodeBurninSettings { get; set; }
	}
	
	/// <summary>
	/// Frame Capture Interval Unit
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FrameCaptureIntervalUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MILLISECONDS")]
		MILLISECONDS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SECONDS")]
		SECONDS = 1,
	}
	
	/// <summary>
	/// Timecode Burnin Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimecodeBurninSettings
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TimecodeBurninFontSize FontSize { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TimecodeBurninPosition Position { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Prefix { get; set; }
	}
	
	/// <summary>
	/// Timecode Burnin Font Size
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TimecodeBurninFontSize
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXTRA_SMALL_10")]
		EXTRA_SMALL_10 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LARGE_48")]
		LARGE_48 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MEDIUM_32")]
		MEDIUM_32 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SMALL_16")]
		SMALL_16 = 3,
	}
	
	/// <summary>
	/// Timecode Burnin Position
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TimecodeBurninPosition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BOTTOM_CENTER")]
		BOTTOM_CENTER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BOTTOM_LEFT")]
		BOTTOM_LEFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BOTTOM_RIGHT")]
		BOTTOM_RIGHT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MIDDLE_CENTER")]
		MIDDLE_CENTER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MIDDLE_LEFT")]
		MIDDLE_LEFT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MIDDLE_RIGHT")]
		MIDDLE_RIGHT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TOP_CENTER")]
		TOP_CENTER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TOP_LEFT")]
		TOP_LEFT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TOP_RIGHT")]
		TOP_RIGHT = 8,
	}
	
	/// <summary>
	/// H264 Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class H264Settings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public H264AdaptiveQuantization AdaptiveQuantization { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AfdSignaling AfdSignaling { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Bitrate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BufFillPct { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BufSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H264ColorMetadata ColorMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H264ColorSpaceSettings ColorSpaceSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H264EntropyEncoding EntropyEncoding { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H264FilterSettings FilterSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FixedAfd FixedAfd { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenWatermarksCbetStepaside FlickerAq { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenWatermarksCbetStepaside ForceFieldPictures { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H264FramerateControl FramerateControl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FramerateDenominator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FramerateNumerator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenWatermarksCbetStepaside GopBReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GopClosedCadence { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GopNumBFrames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> GopSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H264GopSizeUnits GopSizeUnits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H264Level Level { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H264LookAheadRateControl LookAheadRateControl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxBitrate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinIInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumRefFrames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H264FramerateControl ParControl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ParDenominator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ParNumerator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H264Profile Profile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H264QualityLevel QualityLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> QvbrQualityLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H264RateControlMode RateControlMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H264ScanType ScanType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenWatermarksCbetStepaside SceneChangeDetect { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Slices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Softness { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenWatermarksCbetStepaside SpatialAq { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H264SubGopLength SubgopLength { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H264Syntax Syntax { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenWatermarksCbetStepaside TemporalAq { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H264TimecodeInsertionBehavior TimecodeInsertion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TimecodeBurninSettings TimecodeBurninSettings { get; set; }
	}
	
	/// <summary>
	/// H264 Adaptive Quantization
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H264AdaptiveQuantization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTO")]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HIGH")]
		HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HIGHER")]
		HIGHER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOW")]
		LOW = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MAX")]
		MAX = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MEDIUM")]
		MEDIUM = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OFF")]
		OFF = 6,
	}
	
	/// <summary>
	/// Afd Signaling
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AfdSignaling
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTO")]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FIXED")]
		FIXED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 2,
	}
	
	/// <summary>
	/// H264 Color Metadata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H264ColorMetadata
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IGNORE")]
		IGNORE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSERT")]
		INSERT = 1,
	}
	
	/// <summary>
	/// H264 Color Space Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class H264ColorSpaceSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ColorSpacePassthroughSettings ColorSpacePassthroughSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Rec601Settings Rec601Settings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Rec709Settings Rec709Settings { get; set; }
	}
	
	/// <summary>
	/// Passthrough applies no color space conversion to the output
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ColorSpacePassthroughSettings
	{
	}
	
	/// <summary>
	/// Rec601 Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Rec601Settings
	{
	}
	
	/// <summary>
	/// Rec709 Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Rec709Settings
	{
	}
	
	/// <summary>
	/// H264 Entropy Encoding
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H264EntropyEncoding
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CABAC")]
		CABAC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CAVLC")]
		CAVLC = 1,
	}
	
	/// <summary>
	/// H264 Filter Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class H264FilterSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TemporalFilterSettings TemporalFilterSettings { get; set; }
	}
	
	/// <summary>
	/// Temporal Filter Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TemporalFilterSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TemporalFilterPostFilterSharpening PostFilterSharpening { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TemporalFilterStrength Strength { get; set; }
	}
	
	/// <summary>
	/// Temporal Filter Post Filter Sharpening
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TemporalFilterPostFilterSharpening
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTO")]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 2,
	}
	
	/// <summary>
	/// Temporal Filter Strength
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TemporalFilterStrength
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTO")]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STRENGTH_1")]
		STRENGTH_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STRENGTH_2")]
		STRENGTH_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STRENGTH_3")]
		STRENGTH_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STRENGTH_4")]
		STRENGTH_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STRENGTH_5")]
		STRENGTH_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STRENGTH_6")]
		STRENGTH_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STRENGTH_7")]
		STRENGTH_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STRENGTH_8")]
		STRENGTH_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STRENGTH_9")]
		STRENGTH_9 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STRENGTH_10")]
		STRENGTH_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STRENGTH_11")]
		STRENGTH_11 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STRENGTH_12")]
		STRENGTH_12 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STRENGTH_13")]
		STRENGTH_13 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STRENGTH_14")]
		STRENGTH_14 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STRENGTH_15")]
		STRENGTH_15 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STRENGTH_16")]
		STRENGTH_16 = 16,
	}
	
	/// <summary>
	/// Fixed Afd
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FixedAfd
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AFD_0000")]
		AFD_0000 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AFD_0010")]
		AFD_0010 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AFD_0011")]
		AFD_0011 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AFD_0100")]
		AFD_0100 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AFD_1000")]
		AFD_1000 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AFD_1001")]
		AFD_1001 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AFD_1010")]
		AFD_1010 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AFD_1011")]
		AFD_1011 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AFD_1101")]
		AFD_1101 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AFD_1110")]
		AFD_1110 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AFD_1111")]
		AFD_1111 = 10,
	}
	
	/// <summary>
	/// H264 Framerate Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H264FramerateControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INITIALIZE_FROM_SOURCE")]
		INITIALIZE_FROM_SOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SPECIFIED")]
		SPECIFIED = 1,
	}
	
	/// <summary>
	/// H264 Gop Size Units
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H264GopSizeUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FRAMES")]
		FRAMES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SECONDS")]
		SECONDS = 1,
	}
	
	/// <summary>
	/// H264 Level
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H264Level
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H264_LEVEL_1")]
		H264_LEVEL_1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H264_LEVEL_1_1")]
		H264_LEVEL_1_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H264_LEVEL_1_2")]
		H264_LEVEL_1_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H264_LEVEL_1_3")]
		H264_LEVEL_1_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H264_LEVEL_2")]
		H264_LEVEL_2 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H264_LEVEL_2_1")]
		H264_LEVEL_2_1 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H264_LEVEL_2_2")]
		H264_LEVEL_2_2 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H264_LEVEL_3")]
		H264_LEVEL_3 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H264_LEVEL_3_1")]
		H264_LEVEL_3_1 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H264_LEVEL_3_2")]
		H264_LEVEL_3_2 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H264_LEVEL_4")]
		H264_LEVEL_4 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H264_LEVEL_4_1")]
		H264_LEVEL_4_1 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H264_LEVEL_4_2")]
		H264_LEVEL_4_2 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H264_LEVEL_5")]
		H264_LEVEL_5 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H264_LEVEL_5_1")]
		H264_LEVEL_5_1 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H264_LEVEL_5_2")]
		H264_LEVEL_5_2 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H264_LEVEL_AUTO")]
		H264_LEVEL_AUTO = 16,
	}
	
	/// <summary>
	/// H264 Look Ahead Rate Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H264LookAheadRateControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HIGH")]
		HIGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOW")]
		LOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MEDIUM")]
		MEDIUM = 2,
	}
	
	/// <summary>
	/// H264 Profile
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H264Profile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BASELINE")]
		BASELINE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HIGH")]
		HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HIGH_10BIT")]
		HIGH_10BIT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HIGH_422")]
		HIGH_422 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HIGH_422_10BIT")]
		HIGH_422_10BIT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MAIN")]
		MAIN = 5,
	}
	
	/// <summary>
	/// H264 Quality Level
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H264QualityLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENHANCED_QUALITY")]
		ENHANCED_QUALITY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STANDARD_QUALITY")]
		STANDARD_QUALITY = 1,
	}
	
	/// <summary>
	/// H264 Rate Control Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H264RateControlMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CBR")]
		CBR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MULTIPLEX")]
		MULTIPLEX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="QVBR")]
		QVBR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VBR")]
		VBR = 3,
	}
	
	/// <summary>
	/// H264 Scan Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H264ScanType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INTERLACED")]
		INTERLACED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROGRESSIVE")]
		PROGRESSIVE = 1,
	}
	
	/// <summary>
	/// H264 Sub Gop Length
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H264SubGopLength
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DYNAMIC")]
		DYNAMIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FIXED")]
		FIXED = 1,
	}
	
	/// <summary>
	/// H264 Syntax
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H264Syntax
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEFAULT")]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RP2027")]
		RP2027 = 1,
	}
	
	/// <summary>
	/// H264 Timecode Insertion Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H264TimecodeInsertionBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PIC_TIMING_SEI")]
		PIC_TIMING_SEI = 1,
	}
	
	/// <summary>
	/// H265 Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class H265Settings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public H264AdaptiveQuantization AdaptiveQuantization { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AfdSignaling AfdSignaling { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H265AlternativeTransferFunction AlternativeTransferFunction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Bitrate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BufSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H264ColorMetadata ColorMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H265ColorSpaceSettings ColorSpaceSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H265FilterSettings FilterSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FixedAfd FixedAfd { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenWatermarksCbetStepaside FlickerAq { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int FramerateDenominator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int FramerateNumerator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GopClosedCadence { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> GopSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H264GopSizeUnits GopSizeUnits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H265Level Level { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H264LookAheadRateControl LookAheadRateControl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxBitrate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinIInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ParDenominator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ParNumerator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H265Profile Profile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> QvbrQualityLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H265RateControlMode RateControlMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H264ScanType ScanType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenWatermarksCbetStepaside SceneChangeDetect { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Slices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H265Tier Tier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H264TimecodeInsertionBehavior TimecodeInsertion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TimecodeBurninSettings TimecodeBurninSettings { get; set; }
	}
	
	/// <summary>
	/// H265 Alternative Transfer Function
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H265AlternativeTransferFunction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSERT")]
		INSERT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OMIT")]
		OMIT = 1,
	}
	
	/// <summary>
	/// H265 Color Space Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class H265ColorSpaceSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ColorSpacePassthroughSettings ColorSpacePassthroughSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DolbyVision81Settings DolbyVision81Settings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Hdr10Settings Hdr10Settings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Rec601Settings Rec601Settings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Rec709Settings Rec709Settings { get; set; }
	}
	
	/// <summary>
	/// Dolby Vision81 Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DolbyVision81Settings
	{
	}
	
	/// <summary>
	/// Hdr10 Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Hdr10Settings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxCll { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxFall { get; set; }
	}
	
	/// <summary>
	/// H265 Filter Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class H265FilterSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TemporalFilterSettings TemporalFilterSettings { get; set; }
	}
	
	/// <summary>
	/// H265 Level
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H265Level
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H265_LEVEL_1")]
		H265_LEVEL_1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H265_LEVEL_2")]
		H265_LEVEL_2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H265_LEVEL_2_1")]
		H265_LEVEL_2_1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H265_LEVEL_3")]
		H265_LEVEL_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H265_LEVEL_3_1")]
		H265_LEVEL_3_1 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H265_LEVEL_4")]
		H265_LEVEL_4 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H265_LEVEL_4_1")]
		H265_LEVEL_4_1 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H265_LEVEL_5")]
		H265_LEVEL_5 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H265_LEVEL_5_1")]
		H265_LEVEL_5_1 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H265_LEVEL_5_2")]
		H265_LEVEL_5_2 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H265_LEVEL_6")]
		H265_LEVEL_6 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H265_LEVEL_6_1")]
		H265_LEVEL_6_1 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H265_LEVEL_6_2")]
		H265_LEVEL_6_2 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H265_LEVEL_AUTO")]
		H265_LEVEL_AUTO = 13,
	}
	
	/// <summary>
	/// H265 Profile
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H265Profile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MAIN")]
		MAIN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MAIN_10BIT")]
		MAIN_10BIT = 1,
	}
	
	/// <summary>
	/// H265 Rate Control Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H265RateControlMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CBR")]
		CBR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MULTIPLEX")]
		MULTIPLEX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="QVBR")]
		QVBR = 2,
	}
	
	/// <summary>
	/// H265 Tier
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H265Tier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HIGH")]
		HIGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MAIN")]
		MAIN = 1,
	}
	
	/// <summary>
	/// Mpeg2 Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Mpeg2Settings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Mpeg2AdaptiveQuantization AdaptiveQuantization { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AfdSignaling AfdSignaling { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H264ColorMetadata ColorMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Mpeg2ColorSpace ColorSpace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Mpeg2DisplayRatio DisplayAspectRatio { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Mpeg2FilterSettings FilterSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FixedAfd FixedAfd { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int FramerateDenominator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int FramerateNumerator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GopClosedCadence { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GopNumBFrames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> GopSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H264GopSizeUnits GopSizeUnits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H264ScanType ScanType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H264SubGopLength SubgopLength { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Mpeg2TimecodeInsertionBehavior TimecodeInsertion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TimecodeBurninSettings TimecodeBurninSettings { get; set; }
	}
	
	/// <summary>
	/// Mpeg2 Adaptive Quantization
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Mpeg2AdaptiveQuantization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTO")]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HIGH")]
		HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOW")]
		LOW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MEDIUM")]
		MEDIUM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OFF")]
		OFF = 4,
	}
	
	/// <summary>
	/// Mpeg2 Color Space
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Mpeg2ColorSpace
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTO")]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PASSTHROUGH")]
		PASSTHROUGH = 1,
	}
	
	/// <summary>
	/// Mpeg2 Display Ratio
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Mpeg2DisplayRatio
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISPLAYRATIO16X9")]
		DISPLAYRATIO16X9 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISPLAYRATIO4X3")]
		DISPLAYRATIO4X3 = 1,
	}
	
	/// <summary>
	/// Mpeg2 Filter Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Mpeg2FilterSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TemporalFilterSettings TemporalFilterSettings { get; set; }
	}
	
	/// <summary>
	/// Mpeg2 Timecode Insertion Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Mpeg2TimecodeInsertionBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GOP_TIMECODE")]
		GOP_TIMECODE = 1,
	}
	
	/// <summary>
	/// Video Description Respond To Afd
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VideoDescriptionRespondToAfd
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PASSTHROUGH")]
		PASSTHROUGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RESPOND")]
		RESPOND = 2,
	}
	
	/// <summary>
	/// Video Description Scaling Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VideoDescriptionScalingBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEFAULT")]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STRETCH_TO_OUTPUT")]
		STRETCH_TO_OUTPUT = 1,
	}
	
	/// <summary>
	/// Thumbnail Configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThumbnailConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ThumbnailState State { get; set; }
	}
	
	/// <summary>
	/// Thumbnail State
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ThumbnailState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTO")]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 1,
	}
	
	/// <summary>
	/// Placeholder documentation for InputAttachment
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputAttachment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AutomaticInputFailoverSettings AutomaticInputFailoverSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InputAttachmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InputId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputSettings InputSettings { get; set; }
	}
	
	/// <summary>
	/// The settings for Automatic Input Failover.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutomaticInputFailoverSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ErrorClearTimeMsec { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FailoverCondition[] FailoverConditions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputPreference InputPreference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SecondaryInputId { get; set; }
	}
	
	/// <summary>
	/// Failover Condition settings. There can be multiple failover conditions inside AutomaticInputFailoverSettings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FailoverCondition
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FailoverConditionSettings FailoverConditionSettings { get; set; }
	}
	
	/// <summary>
	/// Settings for one failover condition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FailoverConditionSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AudioSilenceFailoverSettings AudioSilenceSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputLossFailoverSettings InputLossSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VideoBlackFailoverSettings VideoBlackSettings { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for AudioSilenceFailoverSettings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AudioSilenceFailoverSettings
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AudioSelectorName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AudioSilenceThresholdMsec { get; set; }
	}
	
	/// <summary>
	/// MediaLive will perform a failover if content is not detected in this input for the specified period.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputLossFailoverSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InputLossThresholdMsec { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for VideoBlackFailoverSettings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoBlackFailoverSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BlackDetectThreshold { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VideoBlackThresholdMsec { get; set; }
	}
	
	/// <summary>
	/// Input preference when deciding which input to make active when a previously failed input has recovered.
	///If \"EQUAL_INPUT_PREFERENCE\", then the active input will stay active as long as it is healthy.
	///If \"PRIMARY_INPUT_PREFERRED\", then always switch back to the primary input when it is healthy.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InputPreference
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EQUAL_INPUT_PREFERENCE")]
		EQUAL_INPUT_PREFERENCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRIMARY_INPUT_PREFERRED")]
		PRIMARY_INPUT_PREFERRED = 1,
	}
	
	/// <summary>
	/// Live Event input parameters. There can be multiple inputs in a single Live Event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AudioSelector[] AudioSelectors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CaptionSelector[] CaptionSelectors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenWatermarksCbetStepaside DeblockFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenWatermarksCbetStepaside DenoiseFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FilterStrength { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputFilter InputFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkInputSettings NetworkInputSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Scte35Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Smpte2038DataPreference Smpte2038DataPreference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputSourceEndBehavior SourceEndBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VideoSelector VideoSelector { get; set; }
	}
	
	/// <summary>
	/// Audio Selector
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AudioSelector
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AudioSelectorSettings SelectorSettings { get; set; }
	}
	
	/// <summary>
	/// Audio Selector Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AudioSelectorSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AudioHlsRenditionSelection AudioHlsRenditionSelection { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AudioLanguageSelection AudioLanguageSelection { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AudioPidSelection AudioPidSelection { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AudioTrackSelection AudioTrackSelection { get; set; }
	}
	
	/// <summary>
	/// Audio Hls Rendition Selection
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AudioHlsRenditionSelection
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GroupId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Audio Language Selection
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AudioLanguageSelection
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AudioLanguageSelectionPolicy LanguageSelectionPolicy { get; set; }
	}
	
	/// <summary>
	/// Audio Language Selection Policy
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AudioLanguageSelectionPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOOSE")]
		LOOSE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STRICT")]
		STRICT = 1,
	}
	
	/// <summary>
	/// Audio Pid Selection
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AudioPidSelection
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Pid { get; set; }
	}
	
	/// <summary>
	/// Audio Track Selection
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AudioTrackSelection
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AudioTrack[] Tracks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AudioDolbyEDecode DolbyEDecode { get; set; }
	}
	
	/// <summary>
	/// Audio Track
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AudioTrack
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Track { get; set; }
	}
	
	/// <summary>
	/// Audio Dolby EDecode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AudioDolbyEDecode
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DolbyEProgramSelection ProgramSelection { get; set; }
	}
	
	/// <summary>
	/// Dolby EProgram Selection
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DolbyEProgramSelection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALL_CHANNELS")]
		ALL_CHANNELS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROGRAM_1")]
		PROGRAM_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROGRAM_2")]
		PROGRAM_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROGRAM_3")]
		PROGRAM_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROGRAM_4")]
		PROGRAM_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROGRAM_5")]
		PROGRAM_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROGRAM_6")]
		PROGRAM_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROGRAM_7")]
		PROGRAM_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROGRAM_8")]
		PROGRAM_8 = 8,
	}
	
	/// <summary>
	/// Caption Selector
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CaptionSelector
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CaptionSelectorSettings SelectorSettings { get; set; }
	}
	
	/// <summary>
	/// Caption Selector Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CaptionSelectorSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AncillarySourceSettings AncillarySourceSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AribSourceSettings AribSourceSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DvbSubSourceSettings DvbSubSourceSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EmbeddedSourceSettings EmbeddedSourceSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Scte20SourceSettings Scte20SourceSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Scte27SourceSettings Scte27SourceSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TeletextSourceSettings TeletextSourceSettings { get; set; }
	}
	
	/// <summary>
	/// Ancillary Source Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AncillarySourceSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SourceAncillaryChannelNumber { get; set; }
	}
	
	/// <summary>
	/// Arib Source Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AribSourceSettings
	{
	}
	
	/// <summary>
	/// Dvb Sub Source Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DvbSubSourceSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DvbSubOcrLanguage OcrLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Pid { get; set; }
	}
	
	/// <summary>
	/// Dvb Sub Ocr Language
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DvbSubOcrLanguage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEU")]
		DEU = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENG")]
		ENG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FRA")]
		FRA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NLD")]
		NLD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POR")]
		POR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SPA")]
		SPA = 5,
	}
	
	/// <summary>
	/// Embedded Source Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EmbeddedSourceSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EmbeddedConvert608To708 Convert608To708 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EmbeddedScte20Detection Scte20Detection { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Source608ChannelNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Source608TrackNumber { get; set; }
	}
	
	/// <summary>
	/// Embedded Convert608 To708
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EmbeddedConvert608To708
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPCONVERT")]
		UPCONVERT = 1,
	}
	
	/// <summary>
	/// Embedded Scte20 Detection
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EmbeddedScte20Detection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTO")]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OFF")]
		OFF = 1,
	}
	
	/// <summary>
	/// Scte20 Source Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Scte20SourceSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EmbeddedConvert608To708 Convert608To708 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Source608ChannelNumber { get; set; }
	}
	
	/// <summary>
	/// Scte27 Source Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Scte27SourceSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DvbSubOcrLanguage OcrLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Pid { get; set; }
	}
	
	/// <summary>
	/// Teletext Source Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TeletextSourceSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CaptionRectangle OutputRectangle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageNumber { get; set; }
	}
	
	/// <summary>
	/// Caption Rectangle
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CaptionRectangle
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double Height { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double LeftOffset { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double TopOffset { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double Width { get; set; }
	}
	
	/// <summary>
	/// Input Filter
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InputFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTO")]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FORCED")]
		FORCED = 2,
	}
	
	/// <summary>
	/// Network source to transcode. Must be accessible to the Elemental Live node that is running the live event through a network connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NetworkInputSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public HlsInputSettings HlsInputSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkInputServerValidation ServerValidation { get; set; }
	}
	
	/// <summary>
	/// Hls Input Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HlsInputSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Bandwidth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BufferSegments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Retries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RetryInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsScte35SourceType Scte35Source { get; set; }
	}
	
	/// <summary>
	/// Hls Scte35 Source Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HlsScte35SourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MANIFEST")]
		MANIFEST = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SEGMENTS")]
		SEGMENTS = 1,
	}
	
	/// <summary>
	/// Network Input Server Validation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NetworkInputServerValidation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHECK_CRYPTOGRAPHY_AND_VALIDATE_NAME")]
		CHECK_CRYPTOGRAPHY_AND_VALIDATE_NAME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHECK_CRYPTOGRAPHY_ONLY")]
		CHECK_CRYPTOGRAPHY_ONLY = 1,
	}
	
	/// <summary>
	/// Smpte2038 Data Preference
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Smpte2038DataPreference
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IGNORE")]
		IGNORE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PREFER")]
		PREFER = 1,
	}
	
	/// <summary>
	/// Input Source End Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InputSourceEndBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONTINUE")]
		CONTINUE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOOP")]
		LOOP = 1,
	}
	
	/// <summary>
	/// Specifies a particular video stream within an input source. An input may have only a single video selector.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoSelector
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VideoSelectorColorSpace ColorSpace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VideoSelectorColorSpaceSettings ColorSpaceSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VideoSelectorColorSpaceUsage ColorSpaceUsage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VideoSelectorSettings SelectorSettings { get; set; }
	}
	
	/// <summary>
	/// Video Selector Color Space
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VideoSelectorColorSpace
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FOLLOW")]
		FOLLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HDR10")]
		HDR10 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HLG_2020")]
		HLG_2020 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REC_601")]
		REC_601 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REC_709")]
		REC_709 = 4,
	}
	
	/// <summary>
	/// Video Selector Color Space Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoSelectorColorSpaceSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Hdr10Settings Hdr10Settings { get; set; }
	}
	
	/// <summary>
	/// Video Selector Color Space Usage
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VideoSelectorColorSpaceUsage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FALLBACK")]
		FALLBACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FORCE")]
		FORCE = 1,
	}
	
	/// <summary>
	/// Video Selector Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoSelectorSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VideoSelectorPid VideoSelectorPid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VideoSelectorProgramId VideoSelectorProgramId { get; set; }
	}
	
	/// <summary>
	/// Video Selector Pid
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoSelectorPid
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Pid { get; set; }
	}
	
	/// <summary>
	/// Video Selector Program Id
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoSelectorProgramId
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProgramId { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for InputSpecification
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InputCodec Codec { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputMaximumBitrate MaximumBitrate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputResolution Resolution { get; set; }
	}
	
	/// <summary>
	/// codec in increasing order of complexity
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InputCodec
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MPEG2")]
		MPEG2 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AVC")]
		AVC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HEVC")]
		HEVC = 2,
	}
	
	/// <summary>
	/// Maximum input bitrate in megabits per second. Bitrates up to 50 Mbps are supported currently.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InputMaximumBitrate
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MAX_10_MBPS")]
		MAX_10_MBPS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MAX_20_MBPS")]
		MAX_20_MBPS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MAX_50_MBPS")]
		MAX_50_MBPS = 2,
	}
	
	/// <summary>
	/// Input resolution based on lines of vertical resolution in the input; SD is less than 720 lines, HD is 720 to 1080 lines, UHD is greater than 1080 lines
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InputResolution
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SD")]
		SD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HD")]
		HD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UHD")]
		UHD = 2,
	}
	
	/// <summary>
	/// The log level the user wants for their channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LogLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR")]
		ERROR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WARNING")]
		WARNING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INFO")]
		INFO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEBUG")]
		DEBUG = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 4,
	}
	
	/// <summary>
	/// Placeholder documentation for MaintenanceStatus
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MaintenanceStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceDay MaintenanceDay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceDeadline { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceScheduledDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceStartTime { get; set; }
	}
	
	/// <summary>
	/// The currently selected maintenance day.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MaintenanceDay
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MONDAY")]
		MONDAY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TUESDAY")]
		TUESDAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WEDNESDAY")]
		WEDNESDAY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="THURSDAY")]
		THURSDAY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FRIDAY")]
		FRIDAY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SATURDAY")]
		SATURDAY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUNDAY")]
		SUNDAY = 6,
	}
	
	/// <summary>
	/// Runtime details of a pipeline when a channel is running.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PipelineDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ActiveInputAttachmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ActiveInputSwitchActionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ActiveMotionGraphicsActionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ActiveMotionGraphicsUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineId { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for ChannelState
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ChannelState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATING")]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATE_FAILED")]
		CREATE_FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IDLE")]
		IDLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STARTING")]
		STARTING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RUNNING")]
		RUNNING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RECOVERING")]
		RECOVERING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STOPPING")]
		STOPPING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETING")]
		DELETING = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETED")]
		DELETED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATING")]
		UPDATING = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATE_FAILED")]
		UPDATE_FAILED = 10,
	}
	
	/// <summary>
	/// Placeholder documentation for Tags
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tags
	{
	}
	
	/// <summary>
	/// The properties for a private VPC Output
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VpcOutputSettingsDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NetworkInterfaceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetIds { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for CreateInputResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateInputResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Input Input { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for Input
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Input
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AttachedChannels { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDestination[] Destinations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChannelClass InputClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceSettings[] InputDevices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InputPartnerIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputSourceType InputSourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaConnectFlow[] MediaConnectFlows { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputSource[] Sources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputType Type { get; set; }
	}
	
	/// <summary>
	/// The settings for a PUSH type input.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputDestination
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Ip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDestinationVpc Vpc { get; set; }
	}
	
	/// <summary>
	/// The properties for a VPC type input destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputDestinationVpc
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
	}
	
	/// <summary>
	/// Settings for an input device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputDeviceSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// There are two types of input sources, static and dynamic. If an input source is dynamic you can
	///change the source url of the input dynamically using an input switch action. Currently, two input types
	///support a dynamic url at this time, MP4_FILE and TS_FILE. By default all input sources are static.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InputSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STATIC")]
		STATIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DYNAMIC")]
		DYNAMIC = 1,
	}
	
	/// <summary>
	/// The settings for a MediaConnect Flow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaConnectFlow
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FlowArn { get; set; }
	}
	
	/// <summary>
	/// The settings for a PULL type input.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputSource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PasswordParam { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for InputState
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InputState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATING")]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DETACHED")]
		DETACHED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ATTACHED")]
		ATTACHED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETING")]
		DELETING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETED")]
		DELETED = 4,
	}
	
	/// <summary>
	/// The different types of inputs that AWS Elemental MediaLive supports.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InputType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UDP_PUSH")]
		UDP_PUSH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RTP_PUSH")]
		RTP_PUSH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RTMP_PUSH")]
		RTMP_PUSH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RTMP_PULL")]
		RTMP_PULL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="URL_PULL")]
		URL_PULL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MP4_FILE")]
		MP4_FILE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MEDIACONNECT")]
		MEDIACONNECT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INPUT_DEVICE")]
		INPUT_DEVICE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS_CDI")]
		AWS_CDI = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TS_FILE")]
		TS_FILE = 9,
	}
	
	/// <summary>
	/// Endpoint settings for a PUSH type input.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputDestinationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string StreamName { get; set; }
	}
	
	/// <summary>
	/// The settings for a MediaConnect Flow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaConnectFlowRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FlowArn { get; set; }
	}
	
	/// <summary>
	/// Settings for for a PULL type input.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputSourceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PasswordParam { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for CreateInputSecurityGroupResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateInputSecurityGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InputSecurityGroup SecurityGroup { get; set; }
	}
	
	/// <summary>
	/// An Input Security Group
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputSecurityGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Inputs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputSecurityGroupState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputWhitelistRule[] WhitelistRules { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for InputSecurityGroupState
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InputSecurityGroupState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IDLE")]
		IDLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_USE")]
		IN_USE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATING")]
		UPDATING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETED")]
		DELETED = 3,
	}
	
	/// <summary>
	/// Whitelist rule
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputWhitelistRule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Cidr { get; set; }
	}
	
	/// <summary>
	/// An IPv4 CIDR to whitelist.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputWhitelistRuleCidr
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Cidr { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for CreateMultiplexResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateMultiplexResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Multiplex Multiplex { get; set; }
	}
	
	/// <summary>
	/// The multiplex object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Multiplex
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexOutputDestination[] Destinations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexSettings MultiplexSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PipelinesRunningCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProgramCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	/// <summary>
	/// Multiplex output destination settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MultiplexOutputDestination
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexMediaConnectOutputDestinationSettings MediaConnectSettings { get; set; }
	}
	
	/// <summary>
	/// Multiplex MediaConnect output destination settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MultiplexMediaConnectOutputDestinationSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EntitlementArn { get; set; }
	}
	
	/// <summary>
	/// Contains configuration for a Multiplex event
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MultiplexSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaximumVideoBufferDelayMilliseconds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int TransportStreamBitrate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int TransportStreamId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TransportStreamReservedBitrate { get; set; }
	}
	
	/// <summary>
	/// The current state of the multiplex.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MultiplexState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATING")]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATE_FAILED")]
		CREATE_FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IDLE")]
		IDLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STARTING")]
		STARTING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RUNNING")]
		RUNNING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RECOVERING")]
		RECOVERING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STOPPING")]
		STOPPING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETING")]
		DELETING = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETED")]
		DELETED = 8,
	}
	
	/// <summary>
	/// Placeholder documentation for CreateMultiplexProgramResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateMultiplexProgramResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexProgram MultiplexProgram { get; set; }
	}
	
	/// <summary>
	/// The multiplex program object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MultiplexProgram
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ChannelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexProgramSettings MultiplexProgramSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexProgramPacketIdentifiersMap PacketIdentifiersMap { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexProgramPipelineDetail[] PipelineDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProgramName { get; set; }
	}
	
	/// <summary>
	/// Multiplex Program settings configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MultiplexProgramSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PreferredChannelPipeline PreferredChannelPipeline { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ProgramNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexProgramServiceDescriptor ServiceDescriptor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexVideoSettings VideoSettings { get; set; }
	}
	
	/// <summary>
	/// Indicates which pipeline is preferred by the multiplex for program ingest.
	///If set to \"PIPELINE_0\" or \"PIPELINE_1\" and an unhealthy ingest causes the multiplex to switch to the non-preferred pipeline,
	///it will switch back once that ingest is healthy again. If set to \"CURRENTLY_ACTIVE\",
	///it will not switch back to the other pipeline based on it recovering to a healthy state,
	///it will only switch if the active pipeline becomes unhealthy.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PreferredChannelPipeline
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CURRENTLY_ACTIVE")]
		CURRENTLY_ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PIPELINE_0")]
		PIPELINE_0 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PIPELINE_1")]
		PIPELINE_1 = 2,
	}
	
	/// <summary>
	/// Transport stream service descriptor configuration for the Multiplex program.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MultiplexProgramServiceDescriptor
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceName { get; set; }
	}
	
	/// <summary>
	/// The video configuration for each program in a multiplex.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MultiplexVideoSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ConstantBitrate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexStatmuxVideoSettings StatmuxSettings { get; set; }
	}
	
	/// <summary>
	/// Statmux rate control settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MultiplexStatmuxVideoSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaximumBitrate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinimumBitrate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Priority { get; set; }
	}
	
	/// <summary>
	/// Packet identifiers map for a given Multiplex program.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MultiplexProgramPacketIdentifiersMap
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AudioPids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DvbSubPids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DvbTeletextPid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EtvPlatformPid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EtvSignalPid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> KlvDataPids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PcrPid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PmtPid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PrivateMetadataPid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Scte27Pids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Scte35Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimedMetadataPid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VideoPid { get; set; }
	}
	
	/// <summary>
	/// The current source for one of the pipelines in the multiplex.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MultiplexProgramPipelineDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ActiveChannelPipeline { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineId { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for CreatePartnerInputResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePartnerInputResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Input Input { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for DeleteChannelResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteChannelResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CdiInputSpecification CdiInputSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChannelClass ChannelClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputDestination[] Destinations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChannelEgressEndpoint[] EgressEndpoints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EncoderSettings EncoderSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputAttachment[] InputAttachments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputSpecification InputSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LogLevel LogLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceStatus Maintenance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipelineDetail[] PipelineDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PipelinesRunningCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChannelState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcOutputSettingsDescription Vpc { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for DeleteInputResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteInputResponse
	{
	}
	
	/// <summary>
	/// Placeholder documentation for DeleteInputSecurityGroupResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteInputSecurityGroupResponse
	{
	}
	
	/// <summary>
	/// Placeholder documentation for DeleteMultiplexResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteMultiplexResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexOutputDestination[] Destinations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexSettings MultiplexSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PipelinesRunningCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProgramCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for DeleteMultiplexProgramResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteMultiplexProgramResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ChannelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexProgramSettings MultiplexProgramSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexProgramPacketIdentifiersMap PacketIdentifiersMap { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexProgramPipelineDetail[] PipelineDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProgramName { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for DeleteReservationResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteReservationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OfferingDurationUnits DurationUnits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string End { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FixedPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OfferingDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OfferingType OfferingType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RenewalSettings RenewalSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservationResourceSpecification ResourceSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Start { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservationState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> UsagePrice { get; set; }
	}
	
	/// <summary>
	/// Units for duration, e.g. 'MONTHS'
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OfferingDurationUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MONTHS")]
		MONTHS = 0,
	}
	
	/// <summary>
	/// Offering type, e.g. 'NO_UPFRONT'
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OfferingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_UPFRONT")]
		NO_UPFRONT = 0,
	}
	
	/// <summary>
	/// The Renewal settings for Reservations
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RenewalSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ReservationAutomaticRenewal AutomaticRenewal { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RenewalCount { get; set; }
	}
	
	/// <summary>
	/// Automatic Renewal Status for Reservation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReservationAutomaticRenewal
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNAVAILABLE")]
		UNAVAILABLE = 2,
	}
	
	/// <summary>
	/// Resource configuration (codec, resolution, bitrate, ...)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReservationResourceSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ChannelClass ChannelClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservationCodec Codec { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputMaximumBitrate MaximumBitrate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservationMaximumFramerate MaximumFramerate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CdiInputResolution Resolution { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservationResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservationSpecialFeature SpecialFeature { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservationVideoQuality VideoQuality { get; set; }
	}
	
	/// <summary>
	/// Codec, 'MPEG2', 'AVC', 'HEVC', or 'AUDIO'
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReservationCodec
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MPEG2")]
		MPEG2 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AVC")]
		AVC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HEVC")]
		HEVC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUDIO")]
		AUDIO = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LINK")]
		LINK = 4,
	}
	
	/// <summary>
	/// Maximum framerate in frames per second (Outputs only)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReservationMaximumFramerate
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MAX_30_FPS")]
		MAX_30_FPS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MAX_60_FPS")]
		MAX_60_FPS = 1,
	}
	
	/// <summary>
	/// Resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReservationResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INPUT")]
		INPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OUTPUT")]
		OUTPUT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MULTIPLEX")]
		MULTIPLEX = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHANNEL")]
		CHANNEL = 3,
	}
	
	/// <summary>
	/// Special features, 'ADVANCED_AUDIO' 'AUDIO_NORMALIZATION' 'MGHD' or 'MGUHD'
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReservationSpecialFeature
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADVANCED_AUDIO")]
		ADVANCED_AUDIO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUDIO_NORMALIZATION")]
		AUDIO_NORMALIZATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MGHD")]
		MGHD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MGUHD")]
		MGUHD = 3,
	}
	
	/// <summary>
	/// Video quality, e.g. 'STANDARD' (Outputs only)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReservationVideoQuality
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STANDARD")]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENHANCED")]
		ENHANCED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PREMIUM")]
		PREMIUM = 2,
	}
	
	/// <summary>
	/// Current reservation state
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReservationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPIRED")]
		EXPIRED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELED")]
		CANCELED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETED")]
		DELETED = 3,
	}
	
	/// <summary>
	/// Placeholder documentation for DeleteScheduleResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteScheduleResponse
	{
	}
	
	/// <summary>
	/// Placeholder documentation for DescribeChannelResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeChannelResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CdiInputSpecification CdiInputSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChannelClass ChannelClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputDestination[] Destinations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChannelEgressEndpoint[] EgressEndpoints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EncoderSettings EncoderSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputAttachment[] InputAttachments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputSpecification InputSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LogLevel LogLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceStatus Maintenance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipelineDetail[] PipelineDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PipelinesRunningCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChannelState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcOutputSettingsDescription Vpc { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for DescribeInputResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeInputResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AttachedChannels { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDestination[] Destinations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChannelClass InputClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceSettings[] InputDevices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InputPartnerIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputSourceType InputSourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaConnectFlow[] MediaConnectFlows { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputSource[] Sources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputType Type { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for DescribeInputDeviceResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeInputDeviceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceConnectionState ConnectionState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceSettingsSyncState DeviceSettingsSyncState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceUpdateStatus DeviceUpdateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceHdSettings HdDeviceSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MacAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceNetworkSettings NetworkSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SerialNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceUhdSettings UhdDeviceSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
	}
	
	/// <summary>
	/// The state of the connection between the input device and AWS.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InputDeviceConnectionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISCONNECTED")]
		DISCONNECTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONNECTED")]
		CONNECTED = 1,
	}
	
	/// <summary>
	/// The status of the action to synchronize the device configuration. If you change the configuration of the input device (for example, the maximum bitrate), MediaLive sends the new data to the device. The device might not update itself immediately. SYNCED means the device has updated its configuration. SYNCING means that it has not updated its configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DeviceSettingsSyncState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SYNCED")]
		SYNCED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SYNCING")]
		SYNCING = 1,
	}
	
	/// <summary>
	/// The status of software on the input device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DeviceUpdateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UP_TO_DATE")]
		UP_TO_DATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_UP_TO_DATE")]
		NOT_UP_TO_DATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATING")]
		UPDATING = 2,
	}
	
	/// <summary>
	/// Settings that describe the active source from the input device, and the video characteristics of that source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputDeviceHdSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceActiveInput ActiveInput { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceConfiguredInput ConfiguredInput { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceState DeviceState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Framerate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxBitrate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H264ScanType ScanType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Width { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LatencyMs { get; set; }
	}
	
	/// <summary>
	/// The source at the input device that is currently active.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InputDeviceActiveInput
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HDMI")]
		HDMI = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SDI")]
		SDI = 1,
	}
	
	/// <summary>
	/// The source to activate (use) from the input device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InputDeviceConfiguredInput
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTO")]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HDMI")]
		HDMI = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SDI")]
		SDI = 2,
	}
	
	/// <summary>
	/// The state of the input device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InputDeviceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IDLE")]
		IDLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STREAMING")]
		STREAMING = 1,
	}
	
	/// <summary>
	/// The network settings for the input device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputDeviceNetworkSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DnsAddresses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Gateway { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceIpScheme IpScheme { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetMask { get; set; }
	}
	
	/// <summary>
	/// Specifies whether the input device has been configured (outside of MediaLive) to use a dynamic IP address assignment (DHCP) or a static IP address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InputDeviceIpScheme
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STATIC")]
		STATIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DHCP")]
		DHCP = 1,
	}
	
	/// <summary>
	/// The type of the input device. For an AWS Elemental Link device that outputs resolutions up to 1080, choose "HD".
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InputDeviceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HD")]
		HD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UHD")]
		UHD = 1,
	}
	
	/// <summary>
	/// Settings that describe the active source from the input device, and the video characteristics of that source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputDeviceUhdSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceActiveInput ActiveInput { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceConfiguredInput ConfiguredInput { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceState DeviceState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Framerate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxBitrate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public H264ScanType ScanType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Width { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LatencyMs { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for DescribeInputDeviceThumbnailResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeInputDeviceThumbnailResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Body { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for DescribeInputSecurityGroupResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeInputSecurityGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Inputs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputSecurityGroupState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputWhitelistRule[] WhitelistRules { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for DescribeMultiplexResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeMultiplexResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexOutputDestination[] Destinations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexSettings MultiplexSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PipelinesRunningCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProgramCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for DescribeMultiplexProgramResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeMultiplexProgramResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ChannelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexProgramSettings MultiplexProgramSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexProgramPacketIdentifiersMap PacketIdentifiersMap { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexProgramPipelineDetail[] PipelineDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProgramName { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for DescribeOfferingResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeOfferingResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OfferingDurationUnits DurationUnits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FixedPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OfferingDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OfferingType OfferingType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservationResourceSpecification ResourceSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> UsagePrice { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for DescribeReservationResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeReservationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OfferingDurationUnits DurationUnits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string End { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FixedPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OfferingDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OfferingType OfferingType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RenewalSettings RenewalSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservationResourceSpecification ResourceSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Start { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservationState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> UsagePrice { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for DescribeScheduleResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeScheduleResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScheduleAction[] ScheduleActions { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for DescribeAccountConfigurationResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAccountConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AccountConfiguration AccountConfiguration { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for AccountConfiguration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for DescribeThumbnailsResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeThumbnailsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ThumbnailDetail[] ThumbnailDetails { get; set; }
	}
	
	/// <summary>
	/// Thumbnail details for one pipeline of a running channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThumbnailDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Thumbnail[] Thumbnails { get; set; }
	}
	
	/// <summary>
	/// Details of a single thumbnail
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Thumbnail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Body { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ThumbnailType ThumbnailType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset TimeStamp { get; set; }
	}
	
	/// <summary>
	/// Thumbnail type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ThumbnailType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNSPECIFIED")]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CURRENT_ACTIVE")]
		CURRENT_ACTIVE = 1,
	}
	
	/// <summary>
	/// Placeholder documentation for ListChannelsResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListChannelsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ChannelSummary[] Channels { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for ChannelSummary
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CdiInputSpecification CdiInputSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChannelClass ChannelClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputDestination[] Destinations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChannelEgressEndpoint[] EgressEndpoints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputAttachment[] InputAttachments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputSpecification InputSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LogLevel LogLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceStatus Maintenance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PipelinesRunningCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChannelState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcOutputSettingsDescription Vpc { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for ListInputDeviceTransfersResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListInputDeviceTransfersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TransferringInputDeviceSummary[] InputDeviceTransfers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Details about the input device that is being transferred.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransferringInputDeviceSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetCustomerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceTransferType TransferType { get; set; }
	}
	
	/// <summary>
	/// The type of device transfer. INCOMING for an input device that is being transferred to you, OUTGOING for an input device that you are transferring to another AWS account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InputDeviceTransferType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OUTGOING")]
		OUTGOING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INCOMING")]
		INCOMING = 1,
	}
	
	/// <summary>
	/// Placeholder documentation for ListInputDevicesResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListInputDevicesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceSummary[] InputDevices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Details of the input device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputDeviceSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceConnectionState ConnectionState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceSettingsSyncState DeviceSettingsSyncState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceUpdateStatus DeviceUpdateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceHdSettings HdDeviceSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MacAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceNetworkSettings NetworkSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SerialNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceUhdSettings UhdDeviceSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for ListInputSecurityGroupsResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListInputSecurityGroupsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InputSecurityGroup[] InputSecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for ListInputsResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListInputsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Input[] Inputs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for ListMultiplexProgramsResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMultiplexProgramsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexProgramSummary[] MultiplexPrograms { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for MultiplexProgramSummary
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MultiplexProgramSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ChannelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProgramName { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for ListMultiplexesResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMultiplexesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexSummary[] Multiplexes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for MultiplexSummary
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MultiplexSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexSettingsSummary MultiplexSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PipelinesRunningCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProgramCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	/// <summary>
	/// Contains summary configuration for a Multiplex event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MultiplexSettingsSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TransportStreamBitrate { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for ListOfferingsResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOfferingsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Offering[] Offerings { get; set; }
	}
	
	/// <summary>
	/// Reserved resources available for purchase
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Offering
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OfferingDurationUnits DurationUnits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FixedPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OfferingDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OfferingType OfferingType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservationResourceSpecification ResourceSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> UsagePrice { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for ListReservationsResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListReservationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Reservation[] Reservations { get; set; }
	}
	
	/// <summary>
	/// Reserved resources available to use
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Reservation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OfferingDurationUnits DurationUnits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string End { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FixedPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OfferingDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OfferingType OfferingType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RenewalSettings RenewalSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservationResourceSpecification ResourceSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Start { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservationState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> UsagePrice { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for ListTagsForResourceResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for PurchaseOfferingResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PurchaseOfferingResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Reservation Reservation { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for RebootInputDeviceResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RebootInputDeviceResponse
	{
	}
	
	/// <summary>
	/// Placeholder documentation for RejectInputDeviceTransferResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RejectInputDeviceTransferResponse
	{
	}
	
	/// <summary>
	/// Placeholder documentation for UpdateAccountConfigurationResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAccountConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AccountConfiguration AccountConfiguration { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for StartChannelResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartChannelResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CdiInputSpecification CdiInputSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChannelClass ChannelClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputDestination[] Destinations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChannelEgressEndpoint[] EgressEndpoints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EncoderSettings EncoderSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputAttachment[] InputAttachments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputSpecification InputSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LogLevel LogLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceStatus Maintenance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipelineDetail[] PipelineDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PipelinesRunningCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChannelState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcOutputSettingsDescription Vpc { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for StartInputDeviceMaintenanceWindowResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartInputDeviceMaintenanceWindowResponse
	{
	}
	
	/// <summary>
	/// Placeholder documentation for StartMultiplexResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartMultiplexResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexOutputDestination[] Destinations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexSettings MultiplexSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PipelinesRunningCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProgramCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for StopChannelResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopChannelResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CdiInputSpecification CdiInputSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChannelClass ChannelClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputDestination[] Destinations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChannelEgressEndpoint[] EgressEndpoints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EncoderSettings EncoderSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputAttachment[] InputAttachments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputSpecification InputSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LogLevel LogLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceStatus Maintenance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipelineDetail[] PipelineDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PipelinesRunningCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChannelState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcOutputSettingsDescription Vpc { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for StopMultiplexResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopMultiplexResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexOutputDestination[] Destinations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexSettings MultiplexSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PipelinesRunningCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProgramCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for TransferInputDeviceResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransferInputDeviceResponse
	{
	}
	
	/// <summary>
	/// Placeholder documentation for UpdateChannelResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateChannelResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Channel Channel { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for UpdateChannelClassResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateChannelClassResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Channel Channel { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for UpdateInputResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateInputResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Input Input { get; set; }
	}
	
	/// <summary>
	/// Settings for an input device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputDeviceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for UpdateInputDeviceResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateInputDeviceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceConnectionState ConnectionState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceSettingsSyncState DeviceSettingsSyncState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceUpdateStatus DeviceUpdateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceHdSettings HdDeviceSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MacAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceNetworkSettings NetworkSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SerialNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceUhdSettings UhdDeviceSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for UpdateInputSecurityGroupResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateInputSecurityGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InputSecurityGroup SecurityGroup { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for UpdateMultiplexResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateMultiplexResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Multiplex Multiplex { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for UpdateMultiplexProgramResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateMultiplexProgramResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexProgram MultiplexProgram { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for UpdateReservationResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateReservationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Reservation Reservation { get; set; }
	}
	
	/// <summary>
	/// Ac3 Lfe Filter
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Ac3LfeFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Ac3 Metadata Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Ac3MetadataControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FOLLOW_INPUT")]
		FOLLOW_INPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USE_CONFIGURED")]
		USE_CONFIGURED = 1,
	}
	
	/// <summary>
	/// Placeholder documentation for AcceptInputDeviceTransferRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AcceptInputDeviceTransferRequest
	{
	}
	
	/// <summary>
	/// Audio Description Language Code Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AudioDescriptionLanguageCodeControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FOLLOW_INPUT")]
		FOLLOW_INPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USE_CONFIGURED")]
		USE_CONFIGURED = 1,
	}
	
	/// <summary>
	/// Avail Blanking State
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AvailBlankingState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 1,
	}
	
	/// <summary>
	/// A request to delete resources
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDeleteRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ChannelIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InputIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InputSecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] MultiplexIds { get; set; }
	}
	
	/// <summary>
	/// A list of schedule actions to create (in a request) or that have been created (in a response).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchScheduleActionCreateRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScheduleAction[] ScheduleActions { get; set; }
	}
	
	/// <summary>
	/// A list of schedule actions to delete.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchScheduleActionDeleteRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ActionNames { get; set; }
	}
	
	/// <summary>
	/// A request to start resources
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchStartRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ChannelIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] MultiplexIds { get; set; }
	}
	
	/// <summary>
	/// A request to stop resources
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchStopRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ChannelIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] MultiplexIds { get; set; }
	}
	
	/// <summary>
	/// List of actions to create and list of actions to delete.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchUpdateScheduleRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BatchScheduleActionCreateRequest Creates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchScheduleActionDeleteRequest Deletes { get; set; }
	}
	
	/// <summary>
	/// Blackout Slate Network End Blackout
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BlackoutSlateNetworkEndBlackout
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Blackout Slate State
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BlackoutSlateState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Burn In Outline Color
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BurnInOutlineColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BLACK")]
		BLACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BLUE")]
		BLUE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GREEN")]
		GREEN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RED")]
		RED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WHITE")]
		WHITE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="YELLOW")]
		YELLOW = 5,
	}
	
	/// <summary>
	/// Burn In Shadow Color
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BurnInShadowColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BLACK")]
		BLACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WHITE")]
		WHITE = 2,
	}
	
	/// <summary>
	/// Placeholder documentation for CancelInputDeviceTransferRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelInputDeviceTransferRequest
	{
	}
	
	/// <summary>
	/// A request to claim an AWS Elemental device that you have purchased from a third-party vendor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClaimDeviceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for MaintenanceCreateSettings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MaintenanceCreateSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceDay MaintenanceDay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceStartTime { get; set; }
	}
	
	/// <summary>
	/// The properties for a private VPC Output
	///When this property is specified, the output egress addresses will be created in a user specified VPC
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VpcOutputSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PublicAddressAllocationIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetIds { get; set; }
	}
	
	/// <summary>
	/// A request to create a channel
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateChannelRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CdiInputSpecification CdiInputSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChannelClass ChannelClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputDestination[] Destinations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EncoderSettings EncoderSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputAttachment[] InputAttachments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputSpecification InputSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LogLevel LogLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceCreateSettings Maintenance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Reserved { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcOutputSettings Vpc { get; set; }
	}
	
	/// <summary>
	/// Settings for a private VPC Input.
	///When this property is specified, the input destination addresses will be created in a VPC rather than with public Internet addresses.
	///This property requires setting the roleArn property on Input creation.
	///Not compatible with the inputSecurityGroups property.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputVpcRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetIds { get; set; }
	}
	
	/// <summary>
	/// The name of the input
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateInputRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InputDestinationRequest[] Destinations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceSettings[] InputDevices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InputSecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaConnectFlowRequest[] MediaConnectFlows { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputSourceRequest[] Sources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputVpcRequest Vpc { get; set; }
	}
	
	/// <summary>
	/// The IPv4 CIDRs to whitelist for this Input Security Group
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateInputSecurityGroupRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputWhitelistRuleCidr[] WhitelistRules { get; set; }
	}
	
	/// <summary>
	/// A request to create a program in a multiplex.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateMultiplexProgramRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MultiplexProgramSettings MultiplexProgramSettings { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProgramName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
	}
	
	/// <summary>
	/// A request to create a multiplex.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateMultiplexRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] AvailabilityZones { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MultiplexSettings MultiplexSettings { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	/// <summary>
	/// A request to create a partner input
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePartnerInputRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for CreateTagsRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTagsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for DeleteChannelRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteChannelRequest
	{
	}
	
	/// <summary>
	/// Placeholder documentation for DeleteInputRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteInputRequest
	{
	}
	
	/// <summary>
	/// Placeholder documentation for DeleteInputSecurityGroupRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteInputSecurityGroupRequest
	{
	}
	
	/// <summary>
	/// Placeholder documentation for DeleteMultiplexProgramRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteMultiplexProgramRequest
	{
	}
	
	/// <summary>
	/// Placeholder documentation for DeleteMultiplexRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteMultiplexRequest
	{
	}
	
	/// <summary>
	/// Placeholder documentation for DeleteReservationRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteReservationRequest
	{
	}
	
	/// <summary>
	/// Placeholder documentation for DeleteScheduleRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteScheduleRequest
	{
	}
	
	/// <summary>
	/// Placeholder documentation for DeleteTagsRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteTagsRequest
	{
	}
	
	/// <summary>
	/// Placeholder documentation for DescribeChannelRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeChannelRequest
	{
	}
	
	/// <summary>
	/// Placeholder documentation for DescribeInputDeviceRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeInputDeviceRequest
	{
	}
	
	/// <summary>
	/// The HTTP Accept header. Indicates the requested type fothe thumbnail.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AcceptHeader
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="image/jpeg")]
		image_jpeg = 0,
	}
	
	/// <summary>
	/// Placeholder documentation for DescribeInputDeviceThumbnailRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeInputDeviceThumbnailRequest
	{
	}
	
	/// <summary>
	/// Specifies the media type of the thumbnail.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="image/jpeg")]
		image_jpeg = 0,
	}
	
	/// <summary>
	/// Placeholder documentation for DescribeInputRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeInputRequest
	{
	}
	
	/// <summary>
	/// A standard input has two sources and a single pipeline input only has one.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InputClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STANDARD")]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SINGLE_PIPELINE")]
		SINGLE_PIPELINE = 1,
	}
	
	/// <summary>
	/// Placeholder documentation for DescribeInputSecurityGroupRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeInputSecurityGroupRequest
	{
	}
	
	/// <summary>
	/// Placeholder documentation for DescribeMultiplexProgramRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeMultiplexProgramRequest
	{
	}
	
	/// <summary>
	/// Placeholder documentation for DescribeMultiplexRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeMultiplexRequest
	{
	}
	
	/// <summary>
	/// Placeholder documentation for DescribeOfferingRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeOfferingRequest
	{
	}
	
	/// <summary>
	/// Placeholder documentation for DescribeReservationRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeReservationRequest
	{
	}
	
	/// <summary>
	/// Placeholder documentation for DescribeScheduleRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeScheduleRequest
	{
	}
	
	/// <summary>
	/// Dvb Sub Destination Alignment
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DvbSubDestinationAlignment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CENTERED")]
		CENTERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LEFT")]
		LEFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SMART")]
		SMART = 2,
	}
	
	/// <summary>
	/// Dvb Sub Destination Background Color
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DvbSubDestinationBackgroundColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BLACK")]
		BLACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WHITE")]
		WHITE = 2,
	}
	
	/// <summary>
	/// Dvb Sub Destination Font Color
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DvbSubDestinationFontColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BLACK")]
		BLACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BLUE")]
		BLUE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GREEN")]
		GREEN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RED")]
		RED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WHITE")]
		WHITE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="YELLOW")]
		YELLOW = 5,
	}
	
	/// <summary>
	/// Dvb Sub Destination Outline Color
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DvbSubDestinationOutlineColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BLACK")]
		BLACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BLUE")]
		BLUE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GREEN")]
		GREEN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RED")]
		RED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WHITE")]
		WHITE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="YELLOW")]
		YELLOW = 5,
	}
	
	/// <summary>
	/// Dvb Sub Destination Shadow Color
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DvbSubDestinationShadowColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BLACK")]
		BLACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WHITE")]
		WHITE = 2,
	}
	
	/// <summary>
	/// Dvb Sub Destination Teletext Grid Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DvbSubDestinationTeletextGridControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FIXED")]
		FIXED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SCALED")]
		SCALED = 1,
	}
	
	/// <summary>
	/// Eac3 Atmos Drc Rf
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Eac3AtmosDrcRf
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FILM_LIGHT")]
		FILM_LIGHT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FILM_STANDARD")]
		FILM_STANDARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MUSIC_LIGHT")]
		MUSIC_LIGHT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MUSIC_STANDARD")]
		MUSIC_STANDARD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SPEECH")]
		SPEECH = 5,
	}
	
	/// <summary>
	/// Eac3 Dc Filter
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Eac3DcFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Eac3 Drc Line
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Eac3DrcLine
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FILM_LIGHT")]
		FILM_LIGHT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FILM_STANDARD")]
		FILM_STANDARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MUSIC_LIGHT")]
		MUSIC_LIGHT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MUSIC_STANDARD")]
		MUSIC_STANDARD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SPEECH")]
		SPEECH = 5,
	}
	
	/// <summary>
	/// Eac3 Drc Rf
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Eac3DrcRf
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FILM_LIGHT")]
		FILM_LIGHT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FILM_STANDARD")]
		FILM_STANDARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MUSIC_LIGHT")]
		MUSIC_LIGHT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MUSIC_STANDARD")]
		MUSIC_STANDARD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SPEECH")]
		SPEECH = 5,
	}
	
	/// <summary>
	/// Eac3 Lfe Filter
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Eac3LfeFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Eac3 Metadata Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Eac3MetadataControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FOLLOW_INPUT")]
		FOLLOW_INPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USE_CONFIGURED")]
		USE_CONFIGURED = 1,
	}
	
	/// <summary>
	/// Eac3 Surround Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Eac3SurroundMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_INDICATED")]
		NOT_INDICATED = 2,
	}
	
	/// <summary>
	/// Ebu Tt DFill Line Gap Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EbuTtDFillLineGapControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Feature Activations Input Prepare Schedule Actions
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FeatureActivationsInputPrepareScheduleActions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Fmp4 Nielsen Id3 Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Fmp4NielsenId3Behavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_PASSTHROUGH")]
		NO_PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PASSTHROUGH")]
		PASSTHROUGH = 1,
	}
	
	/// <summary>
	/// Fmp4 Timed Metadata Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Fmp4TimedMetadataBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_PASSTHROUGH")]
		NO_PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PASSTHROUGH")]
		PASSTHROUGH = 1,
	}
	
	/// <summary>
	/// Placeholder documentation for DescribeAccountConfigurationRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAccountConfigurationRequest
	{
	}
	
	/// <summary>
	/// Placeholder documentation for DescribeThumbnailsRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeThumbnailsRequest
	{
	}
	
	/// <summary>
	/// Global Configuration Low Framerate Inputs
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GlobalConfigurationLowFramerateInputs
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 1,
	}
	
	/// <summary>
	/// H264 Flicker Aq
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H264FlickerAq
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 1,
	}
	
	/// <summary>
	/// H264 Force Field Pictures
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H264ForceFieldPictures
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 1,
	}
	
	/// <summary>
	/// H264 Gop BReference
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H264GopBReference
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 1,
	}
	
	/// <summary>
	/// H264 Par Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H264ParControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INITIALIZE_FROM_SOURCE")]
		INITIALIZE_FROM_SOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SPECIFIED")]
		SPECIFIED = 1,
	}
	
	/// <summary>
	/// H264 Scene Change Detect
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H264SceneChangeDetect
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 1,
	}
	
	/// <summary>
	/// H264 Spatial Aq
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H264SpatialAq
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 1,
	}
	
	/// <summary>
	/// H264 Temporal Aq
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H264TemporalAq
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 1,
	}
	
	/// <summary>
	/// H265 Adaptive Quantization
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H265AdaptiveQuantization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTO")]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HIGH")]
		HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HIGHER")]
		HIGHER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOW")]
		LOW = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MAX")]
		MAX = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MEDIUM")]
		MEDIUM = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OFF")]
		OFF = 6,
	}
	
	/// <summary>
	/// H265 Color Metadata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H265ColorMetadata
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IGNORE")]
		IGNORE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSERT")]
		INSERT = 1,
	}
	
	/// <summary>
	/// H265 Flicker Aq
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H265FlickerAq
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 1,
	}
	
	/// <summary>
	/// H265 Gop Size Units
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H265GopSizeUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FRAMES")]
		FRAMES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SECONDS")]
		SECONDS = 1,
	}
	
	/// <summary>
	/// H265 Look Ahead Rate Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H265LookAheadRateControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HIGH")]
		HIGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOW")]
		LOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MEDIUM")]
		MEDIUM = 2,
	}
	
	/// <summary>
	/// H265 Scan Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H265ScanType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INTERLACED")]
		INTERLACED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROGRESSIVE")]
		PROGRESSIVE = 1,
	}
	
	/// <summary>
	/// H265 Scene Change Detect
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H265SceneChangeDetect
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 1,
	}
	
	/// <summary>
	/// H265 Timecode Insertion Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum H265TimecodeInsertionBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PIC_TIMING_SEI")]
		PIC_TIMING_SEI = 1,
	}
	
	/// <summary>
	/// Hls Client Cache
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HlsClientCache
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 1,
	}
	
	/// <summary>
	/// State of HLS ID3 Segment Tagging
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HlsId3SegmentTaggingState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Hls Iv In Manifest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HlsIvInManifest
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXCLUDE")]
		EXCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INCLUDE")]
		INCLUDE = 1,
	}
	
	/// <summary>
	/// Hls Program Date Time
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HlsProgramDateTime
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXCLUDE")]
		EXCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INCLUDE")]
		INCLUDE = 1,
	}
	
	/// <summary>
	/// Hls Redundant Manifest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HlsRedundantManifest
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Hls Stream Inf Resolution
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HlsStreamInfResolution
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXCLUDE")]
		EXCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INCLUDE")]
		INCLUDE = 1,
	}
	
	/// <summary>
	/// Hls Webdav Http Transfer Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HlsWebdavHttpTransferMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHUNKED")]
		CHUNKED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NON_CHUNKED")]
		NON_CHUNKED = 1,
	}
	
	/// <summary>
	/// Input Deblock Filter
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InputDeblockFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Input Denoise Filter
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InputDenoiseFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Configurable settings for the input device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputDeviceConfigurableSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceConfiguredInput ConfiguredInput { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxBitrate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LatencyMs { get; set; }
	}
	
	/// <summary>
	/// The scan type of the video source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InputDeviceScanType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INTERLACED")]
		INTERLACED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROGRESSIVE")]
		PROGRESSIVE = 1,
	}
	
	/// <summary>
	/// Input Loss Action For Ms Smooth Out
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InputLossActionForMsSmoothOut
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EMIT_OUTPUT")]
		EMIT_OUTPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAUSE_OUTPUT")]
		PAUSE_OUTPUT = 1,
	}
	
	/// <summary>
	/// Input Loss Action For Rtmp Out
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InputLossActionForRtmpOut
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EMIT_OUTPUT")]
		EMIT_OUTPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAUSE_OUTPUT")]
		PAUSE_OUTPUT = 1,
	}
	
	/// <summary>
	/// Placeholder documentation for ListChannelsRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListChannelsRequest
	{
	}
	
	/// <summary>
	/// Placeholder documentation for ListInputDeviceTransfersRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListInputDeviceTransfersRequest
	{
	}
	
	/// <summary>
	/// Placeholder documentation for ListInputDevicesRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListInputDevicesRequest
	{
	}
	
	/// <summary>
	/// Placeholder documentation for ListInputSecurityGroupsRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListInputSecurityGroupsRequest
	{
	}
	
	/// <summary>
	/// Placeholder documentation for ListInputsRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListInputsRequest
	{
	}
	
	/// <summary>
	/// Placeholder documentation for ListMultiplexProgramsRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMultiplexProgramsRequest
	{
	}
	
	/// <summary>
	/// Placeholder documentation for ListMultiplexesRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMultiplexesRequest
	{
	}
	
	/// <summary>
	/// Placeholder documentation for ListOfferingsRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOfferingsRequest
	{
	}
	
	/// <summary>
	/// Placeholder documentation for ListReservationsRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListReservationsRequest
	{
	}
	
	/// <summary>
	/// Placeholder documentation for ListTagsForResourceRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceRequest
	{
	}
	
	/// <summary>
	/// M2ts Arib
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum M2tsArib
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 1,
	}
	
	/// <summary>
	/// M2ts Audio Stream Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum M2tsAudioStreamType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ATSC")]
		ATSC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DVB")]
		DVB = 1,
	}
	
	/// <summary>
	/// M2ts Cc Descriptor
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum M2tsCcDescriptor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 1,
	}
	
	/// <summary>
	/// M2ts Es Rate In Pes
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum M2tsEsRateInPes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXCLUDE")]
		EXCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INCLUDE")]
		INCLUDE = 1,
	}
	
	/// <summary>
	/// M2ts Klv
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum M2tsKlv
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PASSTHROUGH")]
		PASSTHROUGH = 1,
	}
	
	/// <summary>
	/// M2ts Rate Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum M2tsRateMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CBR")]
		CBR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VBR")]
		VBR = 1,
	}
	
	/// <summary>
	/// M2ts Scte35 Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum M2tsScte35Control
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PASSTHROUGH")]
		PASSTHROUGH = 1,
	}
	
	/// <summary>
	/// M2ts Timed Metadata Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum M2tsTimedMetadataBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_PASSTHROUGH")]
		NO_PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PASSTHROUGH")]
		PASSTHROUGH = 1,
	}
	
	/// <summary>
	/// M3u8 Nielsen Id3 Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum M3u8NielsenId3Behavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_PASSTHROUGH")]
		NO_PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PASSTHROUGH")]
		PASSTHROUGH = 1,
	}
	
	/// <summary>
	/// M3u8 Pcr Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum M3u8PcrControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONFIGURED_PCR_PERIOD")]
		CONFIGURED_PCR_PERIOD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PCR_EVERY_PES_PACKET")]
		PCR_EVERY_PES_PACKET = 1,
	}
	
	/// <summary>
	/// M3u8 Scte35 Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum M3u8Scte35Behavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_PASSTHROUGH")]
		NO_PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PASSTHROUGH")]
		PASSTHROUGH = 1,
	}
	
	/// <summary>
	/// M3u8 Timed Metadata Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum M3u8TimedMetadataBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_PASSTHROUGH")]
		NO_PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PASSTHROUGH")]
		PASSTHROUGH = 1,
	}
	
	/// <summary>
	/// Placeholder documentation for MaintenanceUpdateSettings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MaintenanceUpdateSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceDay MaintenanceDay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceScheduledDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceStartTime { get; set; }
	}
	
	/// <summary>
	/// Motion Graphics Insertion
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MotionGraphicsInsertion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Mpeg2 Color Metadata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Mpeg2ColorMetadata
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IGNORE")]
		IGNORE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSERT")]
		INSERT = 1,
	}
	
	/// <summary>
	/// Mpeg2 Gop Size Units
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Mpeg2GopSizeUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FRAMES")]
		FRAMES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SECONDS")]
		SECONDS = 1,
	}
	
	/// <summary>
	/// Mpeg2 Scan Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Mpeg2ScanType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INTERLACED")]
		INTERLACED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROGRESSIVE")]
		PROGRESSIVE = 1,
	}
	
	/// <summary>
	/// Mpeg2 Sub Gop Length
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Mpeg2SubGopLength
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DYNAMIC")]
		DYNAMIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FIXED")]
		FIXED = 1,
	}
	
	/// <summary>
	/// Smooth Group Segmentation Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SmoothGroupSegmentationMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USE_INPUT_SEGMENTATION")]
		USE_INPUT_SEGMENTATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USE_SEGMENT_DURATION")]
		USE_SEGMENT_DURATION = 1,
	}
	
	/// <summary>
	/// Ms Smooth H265 Packaging Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MsSmoothH265PackagingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HEV1")]
		HEV1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HVC1")]
		HVC1 = 1,
	}
	
	/// <summary>
	/// State of Nielsen PCM to ID3 tagging
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NielsenPcmToId3TaggingState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Placeholder documentation for PurchaseOfferingRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PurchaseOfferingRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RenewalSettings RenewalSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Start { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	/// <summary>
	/// Whether or not to force reboot the input device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RebootInputDeviceForce
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO")]
		NO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="YES")]
		YES = 1,
	}
	
	/// <summary>
	/// A request to reboot an AWS Elemental device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RebootInputDeviceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RebootInputDeviceForce Force { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for RejectInputDeviceTransferRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RejectInputDeviceTransferRequest
	{
	}
	
	/// <summary>
	/// Maximum bitrate in megabits per second
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReservationMaximumBitrate
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MAX_10_MBPS")]
		MAX_10_MBPS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MAX_20_MBPS")]
		MAX_20_MBPS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MAX_50_MBPS")]
		MAX_50_MBPS = 2,
	}
	
	/// <summary>
	/// Resolution based on lines of vertical resolution; SD is less than 720 lines, HD is 720 to 1080 lines, FHD is 1080 lines, UHD is greater than 1080 lines
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReservationResolution
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SD")]
		SD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HD")]
		HD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FHD")]
		FHD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UHD")]
		UHD = 3,
	}
	
	/// <summary>
	/// Rtmp Output Certificate Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RtmpOutputCertificateMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SELF_SIGNED")]
		SELF_SIGNED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VERIFY_AUTHENTICITY")]
		VERIFY_AUTHENTICITY = 1,
	}
	
	/// <summary>
	/// Scte20 Convert608 To708
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Scte20Convert608To708
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPCONVERT")]
		UPCONVERT = 1,
	}
	
	/// <summary>
	/// Scte27 Ocr Language
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Scte27OcrLanguage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEU")]
		DEU = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENG")]
		ENG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FRA")]
		FRA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NLD")]
		NLD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POR")]
		POR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SPA")]
		SPA = 5,
	}
	
	/// <summary>
	/// Scte35 Apos No Regional Blackout Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Scte35AposNoRegionalBlackoutBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FOLLOW")]
		FOLLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IGNORE")]
		IGNORE = 1,
	}
	
	/// <summary>
	/// Scte35 Apos Web Delivery Allowed Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Scte35AposWebDeliveryAllowedBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FOLLOW")]
		FOLLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IGNORE")]
		IGNORE = 1,
	}
	
	/// <summary>
	/// Scte35 Splice Insert Web Delivery Allowed Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Scte35SpliceInsertWebDeliveryAllowedBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FOLLOW")]
		FOLLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IGNORE")]
		IGNORE = 1,
	}
	
	/// <summary>
	/// List of account configuration parameters to update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAccountConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AccountConfiguration AccountConfiguration { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for StartChannelRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartChannelRequest
	{
	}
	
	/// <summary>
	/// Placeholder documentation for StartInputDeviceMaintenanceWindowRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartInputDeviceMaintenanceWindowRequest
	{
	}
	
	/// <summary>
	/// Placeholder documentation for StartMultiplexRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartMultiplexRequest
	{
	}
	
	/// <summary>
	/// Placeholder documentation for StopChannelRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopChannelRequest
	{
	}
	
	/// <summary>
	/// Placeholder documentation for StopMultiplexRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopMultiplexRequest
	{
	}
	
	/// <summary>
	/// A request to transfer an input device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransferInputDeviceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetCustomerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransferMessage { get; set; }
	}
	
	/// <summary>
	/// Udp Timed Metadata Id3 Frame
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UdpTimedMetadataId3Frame
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRIV")]
		PRIV = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TDRL")]
		TDRL = 2,
	}
	
	/// <summary>
	/// Channel class that the channel should be updated to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateChannelClassRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ChannelClass ChannelClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputDestination[] Destinations { get; set; }
	}
	
	/// <summary>
	/// A request to update a channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateChannelRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CdiInputSpecification CdiInputSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputDestination[] Destinations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EncoderSettings EncoderSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputAttachment[] InputAttachments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputSpecification InputSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LogLevel LogLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceUpdateSettings Maintenance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// A request to update an input device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateInputDeviceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceConfigurableSettings HdDeviceSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceConfigurableSettings UhdDeviceSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
	}
	
	/// <summary>
	/// A request to update an input.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateInputRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InputDestinationRequest[] Destinations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceRequest[] InputDevices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InputSecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaConnectFlowRequest[] MediaConnectFlows { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputSourceRequest[] Sources { get; set; }
	}
	
	/// <summary>
	/// The request to update some combination of the Input Security Group name and the IPv4 CIDRs the Input Security Group should allow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateInputSecurityGroupRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputWhitelistRuleCidr[] WhitelistRules { get; set; }
	}
	
	/// <summary>
	/// A request to update a program in a multiplex.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateMultiplexProgramRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexProgramSettings MultiplexProgramSettings { get; set; }
	}
	
	/// <summary>
	/// A request to update a multiplex.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateMultiplexRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexSettings MultiplexSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Request to update a reservation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateReservationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RenewalSettings RenewalSettings { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Accept an incoming input device transfer. The ownership of the device will transfer to your AWS account.
		/// AcceptInputDeviceTransfer prod/inputDevices/{inputDeviceId}/accept
		/// </summary>
		/// <param name="inputDeviceId">The unique ID of the input device to accept. For example, hd-123456789abcdef.</param>
		/// <returns>Success</returns>
		public async Task<AcceptInputDeviceTransferResponse> AcceptInputDeviceTransferAsync(string inputDeviceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/inputDevices/"+ (inputDeviceId==null? "" : System.Uri.EscapeDataString(inputDeviceId))+"/accept";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AcceptInputDeviceTransferResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts delete of resources.
		/// BatchDelete prod/batch/delete
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchDeleteResponse> BatchDeleteAsync(BatchDeletePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/batch/delete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchDeleteResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts existing resources
		/// BatchStart prod/batch/start
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchStartResponse> BatchStartAsync(BatchStartPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/batch/start";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchStartResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stops running resources
		/// BatchStop prod/batch/stop
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchStopResponse> BatchStopAsync(BatchStopPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/batch/stop";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchStopResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a channel schedule
		/// BatchUpdateSchedule prod/channels/{channelId}/schedule
		/// </summary>
		/// <param name="channelId">Id of the channel whose schedule is being updated.</param>
		/// <returns>Success</returns>
		public async Task<BatchUpdateScheduleResponse> BatchUpdateScheduleAsync(string channelId, BatchUpdateSchedulePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/channels/"+ (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"/schedule";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchUpdateScheduleResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete all schedule actions on a channel.
		/// DeleteSchedule prod/channels/{channelId}/schedule
		/// </summary>
		/// <param name="channelId">Id of the channel whose schedule is being deleted.</param>
		/// <returns>Success</returns>
		public async Task<DeleteScheduleResponse> DeleteScheduleAsync(string channelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/channels/"+ (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"/schedule";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteScheduleResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a channel schedule
		/// DescribeSchedule prod/channels/{channelId}/schedule
		/// </summary>
		/// <param name="channelId">Id of the channel whose schedule is being updated.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeScheduleResponse> DescribeScheduleAsync(string channelId, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/channels/"+ (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"/schedule&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeScheduleResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancel an input device transfer that you have requested.
		/// CancelInputDeviceTransfer prod/inputDevices/{inputDeviceId}/cancel
		/// </summary>
		/// <param name="inputDeviceId">The unique ID of the input device to cancel. For example, hd-123456789abcdef.</param>
		/// <returns>Success</returns>
		public async Task<CancelInputDeviceTransferResponse> CancelInputDeviceTransferAsync(string inputDeviceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/inputDevices/"+ (inputDeviceId==null? "" : System.Uri.EscapeDataString(inputDeviceId))+"/cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CancelInputDeviceTransferResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Send a request to claim an AWS Elemental device that you have purchased from a third-party vendor. After the request succeeds, you will own the device.
		/// ClaimDevice prod/claimDevice
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ClaimDeviceResponse> ClaimDeviceAsync(ClaimDevicePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/claimDevice";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClaimDeviceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new channel
		/// CreateChannel prod/channels
		/// </summary>
		public async Task CreateChannelAsync(CreateChannelPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/channels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Produces list of channels that have been created
		/// ListChannels prod/channels
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListChannelsResponse> ListChannelsAsync(int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/channels?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListChannelsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an input
		/// CreateInput prod/inputs
		/// </summary>
		public async Task CreateInputAsync(CreateInputPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/inputs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Produces list of inputs that have been created
		/// ListInputs prod/inputs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListInputsResponse> ListInputsAsync(int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/inputs?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListInputsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Input Security Group
		/// CreateInputSecurityGroup prod/inputSecurityGroups
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateInputSecurityGroupResponse> CreateInputSecurityGroupAsync(CreateInputSecurityGroupPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/inputSecurityGroups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateInputSecurityGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Produces a list of Input Security Groups for an account
		/// ListInputSecurityGroups prod/inputSecurityGroups
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListInputSecurityGroupsResponse> ListInputSecurityGroupsAsync(int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/inputSecurityGroups?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListInputSecurityGroupsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new multiplex.
		/// CreateMultiplex prod/multiplexes
		/// </summary>
		public async Task CreateMultiplexAsync(CreateMultiplexPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/multiplexes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of the existing multiplexes.
		/// ListMultiplexes prod/multiplexes
		/// </summary>
		/// <param name="maxResults">The maximum number of items to return.</param>
		/// <param name="nextToken">The token to retrieve the next page of results.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListMultiplexesResponse> ListMultiplexesAsync(int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/multiplexes?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListMultiplexesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new program in the multiplex.
		/// CreateMultiplexProgram prod/multiplexes/{multiplexId}/programs
		/// </summary>
		/// <param name="multiplexId">ID of the multiplex where the program is to be created.</param>
		public async Task CreateMultiplexProgramAsync(string multiplexId, CreateMultiplexProgramPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/multiplexes/"+ (multiplexId==null? "" : System.Uri.EscapeDataString(multiplexId))+"/programs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List the programs that currently exist for a specific multiplex.
		/// ListMultiplexPrograms prod/multiplexes/{multiplexId}/programs
		/// </summary>
		/// <param name="maxResults">The maximum number of items to return.</param>
		/// <param name="multiplexId">The ID of the multiplex that the programs belong to.</param>
		/// <param name="nextToken">The token to retrieve the next page of results.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListMultiplexProgramsResponse> ListMultiplexProgramsAsync(int maxResults, string multiplexId, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/multiplexes/"+ (multiplexId==null? "" : System.Uri.EscapeDataString(multiplexId))+"/programs?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListMultiplexProgramsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a partner input
		/// CreatePartnerInput prod/inputs/{inputId}/partners
		/// </summary>
		/// <param name="inputId">Unique ID of the input.</param>
		public async Task CreatePartnerInputAsync(string inputId, CreatePartnerInputPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/inputs/"+ (inputId==null? "" : System.Uri.EscapeDataString(inputId))+"/partners";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create tags for a resource
		/// CreateTags prod/tags/{resource_arn}
		/// </summary>
		public async Task CreateTagsAsync(string resource_arn, CreateTagsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/tags/{resource_arn}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Produces list of tags that have been created for a resource
		/// ListTagsForResource prod/tags/{resource_arn}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resource_arn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/tags/{resource_arn}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts deletion of channel. The associated outputs are also deleted.
		/// DeleteChannel prod/channels/{channelId}
		/// </summary>
		/// <param name="channelId">Unique ID of the channel.</param>
		/// <returns>Success</returns>
		public async Task<DeleteChannelResponse> DeleteChannelAsync(string channelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/channels/"+ (channelId==null? "" : System.Uri.EscapeDataString(channelId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteChannelResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets details about a channel
		/// DescribeChannel prod/channels/{channelId}
		/// </summary>
		/// <param name="channelId">channel ID</param>
		/// <returns>Success</returns>
		public async Task<DescribeChannelResponse> DescribeChannelAsync(string channelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/channels/"+ (channelId==null? "" : System.Uri.EscapeDataString(channelId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeChannelResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a channel.
		/// UpdateChannel prod/channels/{channelId}
		/// </summary>
		/// <param name="channelId">channel ID</param>
		/// <returns>Success</returns>
		public async Task<UpdateChannelResponse> UpdateChannelAsync(string channelId, UpdateChannelPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/channels/"+ (channelId==null? "" : System.Uri.EscapeDataString(channelId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateChannelResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the input end point
		/// DeleteInput prod/inputs/{inputId}
		/// </summary>
		/// <param name="inputId">Unique ID of the input</param>
		/// <returns>Success</returns>
		public async Task<DeleteInputResponse> DeleteInputAsync(string inputId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/inputs/"+ (inputId==null? "" : System.Uri.EscapeDataString(inputId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteInputResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Produces details about an input
		/// DescribeInput prod/inputs/{inputId}
		/// </summary>
		/// <param name="inputId">Unique ID of the input</param>
		/// <returns>Success</returns>
		public async Task<DescribeInputResponse> DescribeInputAsync(string inputId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/inputs/"+ (inputId==null? "" : System.Uri.EscapeDataString(inputId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeInputResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an input.
		/// UpdateInput prod/inputs/{inputId}
		/// </summary>
		/// <param name="inputId">Unique ID of the input.</param>
		/// <returns>Success</returns>
		public async Task<UpdateInputResponse> UpdateInputAsync(string inputId, UpdateInputPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/inputs/"+ (inputId==null? "" : System.Uri.EscapeDataString(inputId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateInputResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an Input Security Group
		/// DeleteInputSecurityGroup prod/inputSecurityGroups/{inputSecurityGroupId}
		/// </summary>
		/// <param name="inputSecurityGroupId">The Input Security Group to delete</param>
		/// <returns>Success</returns>
		public async Task<DeleteInputSecurityGroupResponse> DeleteInputSecurityGroupAsync(string inputSecurityGroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/inputSecurityGroups/"+ (inputSecurityGroupId==null? "" : System.Uri.EscapeDataString(inputSecurityGroupId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteInputSecurityGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Produces a summary of an Input Security Group
		/// DescribeInputSecurityGroup prod/inputSecurityGroups/{inputSecurityGroupId}
		/// </summary>
		/// <param name="inputSecurityGroupId">The id of the Input Security Group to describe</param>
		/// <returns>Success</returns>
		public async Task<DescribeInputSecurityGroupResponse> DescribeInputSecurityGroupAsync(string inputSecurityGroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/inputSecurityGroups/"+ (inputSecurityGroupId==null? "" : System.Uri.EscapeDataString(inputSecurityGroupId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeInputSecurityGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an Input Security Group's Whilelists.
		/// UpdateInputSecurityGroup prod/inputSecurityGroups/{inputSecurityGroupId}
		/// </summary>
		/// <param name="inputSecurityGroupId">The id of the Input Security Group to update.</param>
		/// <returns>Success</returns>
		public async Task<UpdateInputSecurityGroupResponse> UpdateInputSecurityGroupAsync(string inputSecurityGroupId, UpdateInputSecurityGroupPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/inputSecurityGroups/"+ (inputSecurityGroupId==null? "" : System.Uri.EscapeDataString(inputSecurityGroupId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateInputSecurityGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a multiplex. The multiplex must be idle.
		/// DeleteMultiplex prod/multiplexes/{multiplexId}
		/// </summary>
		/// <param name="multiplexId">The ID of the multiplex.</param>
		public async Task DeleteMultiplexAsync(string multiplexId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/multiplexes/"+ (multiplexId==null? "" : System.Uri.EscapeDataString(multiplexId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets details about a multiplex.
		/// DescribeMultiplex prod/multiplexes/{multiplexId}
		/// </summary>
		/// <param name="multiplexId">The ID of the multiplex.</param>
		/// <returns>Success</returns>
		public async Task<DescribeMultiplexResponse> DescribeMultiplexAsync(string multiplexId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/multiplexes/"+ (multiplexId==null? "" : System.Uri.EscapeDataString(multiplexId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeMultiplexResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a multiplex.
		/// UpdateMultiplex prod/multiplexes/{multiplexId}
		/// </summary>
		/// <param name="multiplexId">ID of the multiplex to update.</param>
		/// <returns>Success</returns>
		public async Task<UpdateMultiplexResponse> UpdateMultiplexAsync(string multiplexId, UpdateMultiplexPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/multiplexes/"+ (multiplexId==null? "" : System.Uri.EscapeDataString(multiplexId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateMultiplexResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a program from a multiplex.
		/// DeleteMultiplexProgram prod/multiplexes/{multiplexId}/programs/{programName}
		/// </summary>
		/// <param name="multiplexId">The ID of the multiplex that the program belongs to.</param>
		/// <param name="programName">The multiplex program name.</param>
		/// <returns>Success</returns>
		public async Task<DeleteMultiplexProgramResponse> DeleteMultiplexProgramAsync(string multiplexId, string programName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/multiplexes/"+ (multiplexId==null? "" : System.Uri.EscapeDataString(multiplexId))+"/programs/"+ (programName==null? "" : System.Uri.EscapeDataString(programName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteMultiplexProgramResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the details for a program in a multiplex.
		/// DescribeMultiplexProgram prod/multiplexes/{multiplexId}/programs/{programName}
		/// </summary>
		/// <param name="multiplexId">The ID of the multiplex that the program belongs to.</param>
		/// <param name="programName">The name of the program.</param>
		/// <returns>Success</returns>
		public async Task<DescribeMultiplexProgramResponse> DescribeMultiplexProgramAsync(string multiplexId, string programName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/multiplexes/"+ (multiplexId==null? "" : System.Uri.EscapeDataString(multiplexId))+"/programs/"+ (programName==null? "" : System.Uri.EscapeDataString(programName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeMultiplexProgramResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a program in a multiplex.
		/// UpdateMultiplexProgram prod/multiplexes/{multiplexId}/programs/{programName}
		/// </summary>
		/// <param name="multiplexId">The ID of the multiplex of the program to update.</param>
		/// <param name="programName">The name of the program to update.</param>
		/// <returns>Success</returns>
		public async Task<UpdateMultiplexProgramResponse> UpdateMultiplexProgramAsync(string multiplexId, string programName, UpdateMultiplexProgramPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/multiplexes/"+ (multiplexId==null? "" : System.Uri.EscapeDataString(multiplexId))+"/programs/"+ (programName==null? "" : System.Uri.EscapeDataString(programName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateMultiplexProgramResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an expired reservation.
		/// DeleteReservation prod/reservations/{reservationId}
		/// </summary>
		/// <param name="reservationId">Unique reservation ID, e.g. '1234567'</param>
		/// <returns>Success</returns>
		public async Task<DeleteReservationResponse> DeleteReservationAsync(string reservationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/reservations/"+ (reservationId==null? "" : System.Uri.EscapeDataString(reservationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteReservationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get details for a reservation.
		/// DescribeReservation prod/reservations/{reservationId}
		/// </summary>
		/// <param name="reservationId">Unique reservation ID, e.g. '1234567'</param>
		/// <returns>Success</returns>
		public async Task<DescribeReservationResponse> DescribeReservationAsync(string reservationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/reservations/"+ (reservationId==null? "" : System.Uri.EscapeDataString(reservationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeReservationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update reservation.
		/// UpdateReservation prod/reservations/{reservationId}
		/// </summary>
		/// <param name="reservationId">Unique reservation ID, e.g. '1234567'</param>
		/// <returns>Success</returns>
		public async Task<UpdateReservationResponse> UpdateReservationAsync(string reservationId, UpdateReservationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/reservations/"+ (reservationId==null? "" : System.Uri.EscapeDataString(reservationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateReservationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes tags for a resource
		/// DeleteTags prod/tags/{resource_arn}#tagKeys
		/// </summary>
		/// <param name="tagKeys">An array of tag keys to delete</param>
		public async Task DeleteTagsAsync(string resource_arn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/tags/{resource_arn}#tagKeys?"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the details for the input device
		/// DescribeInputDevice prod/inputDevices/{inputDeviceId}
		/// </summary>
		/// <param name="inputDeviceId">The unique ID of this input device. For example, hd-123456789abcdef.</param>
		/// <returns>Success</returns>
		public async Task<DescribeInputDeviceResponse> DescribeInputDeviceAsync(string inputDeviceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/inputDevices/"+ (inputDeviceId==null? "" : System.Uri.EscapeDataString(inputDeviceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeInputDeviceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the parameters for the input device.
		/// UpdateInputDevice prod/inputDevices/{inputDeviceId}
		/// </summary>
		/// <param name="inputDeviceId">The unique ID of the input device. For example, hd-123456789abcdef.</param>
		/// <returns>Success</returns>
		public async Task<UpdateInputDeviceResponse> UpdateInputDeviceAsync(string inputDeviceId, UpdateInputDevicePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/inputDevices/"+ (inputDeviceId==null? "" : System.Uri.EscapeDataString(inputDeviceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateInputDeviceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the latest thumbnail data for the input device.
		/// DescribeInputDeviceThumbnail prod/inputDevices/{inputDeviceId}/thumbnailData#accept
		/// </summary>
		/// <param name="inputDeviceId">The unique ID of this input device. For example, hd-123456789abcdef.</param>
		/// <returns>Success</returns>
		public async Task<DescribeInputDeviceThumbnailResponse> DescribeInputDeviceThumbnailAsync(string inputDeviceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/inputDevices/"+ (inputDeviceId==null? "" : System.Uri.EscapeDataString(inputDeviceId))+"/thumbnailData#accept";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeInputDeviceThumbnailResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get details for an offering.
		/// DescribeOffering prod/offerings/{offeringId}
		/// </summary>
		/// <param name="offeringId">Unique offering ID, e.g. '87654321'</param>
		/// <returns>Success</returns>
		public async Task<DescribeOfferingResponse> DescribeOfferingAsync(string offeringId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeOfferingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get account configuration
		/// DescribeAccountConfiguration prod/accountConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeAccountConfigurationResponse> DescribeAccountConfigurationAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/accountConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeAccountConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update account configuration
		/// UpdateAccountConfiguration prod/accountConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateAccountConfigurationResponse> UpdateAccountConfigurationAsync(UpdateAccountConfigurationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/accountConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateAccountConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describe the latest thumbnails data.
		/// DescribeThumbnails prod/channels/{channelId}/thumbnails#pipelineId&thumbnailType
		/// </summary>
		/// <param name="channelId">Unique ID of the channel</param>
		/// <param name="pipelineId">Pipeline ID ("0" or "1")</param>
		/// <param name="thumbnailType">thumbnail type</param>
		/// <returns>Success</returns>
		public async Task<DescribeThumbnailsResponse> DescribeThumbnailsAsync(string channelId, string pipelineId, string thumbnailType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/channels/"+ (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"/thumbnails#pipelineId&thumbnailType&pipelineId=" + (pipelineId==null? "" : System.Uri.EscapeDataString(pipelineId))+"&thumbnailType=" + (thumbnailType==null? "" : System.Uri.EscapeDataString(thumbnailType));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeThumbnailsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List input devices that are currently being transferred. List input devices that you are transferring from your AWS account or input devices that another AWS account is transferring to you.
		/// ListInputDeviceTransfers prod/inputDeviceTransfers#transferType
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListInputDeviceTransfersResponse> ListInputDeviceTransfersAsync(int maxResults, string nextToken, string transferType, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/inputDeviceTransfers#transferType?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&transferType=" + (transferType==null? "" : System.Uri.EscapeDataString(transferType))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListInputDeviceTransfersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List input devices
		/// ListInputDevices prod/inputDevices
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListInputDevicesResponse> ListInputDevicesAsync(int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/inputDevices?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListInputDevicesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List offerings available for purchase.
		/// ListOfferings prod/offerings
		/// </summary>
		/// <param name="channelClass">Filter by channel class, 'STANDARD' or 'SINGLE_PIPELINE'
		///</param>
		/// <param name="channelConfiguration">Filter to offerings that match the configuration of an existing channel, e.g. '2345678' (a channel ID)
		///</param>
		/// <param name="codec">Filter by codec, 'AVC', 'HEVC', 'MPEG2', 'AUDIO', or 'LINK'</param>
		/// <param name="duration">Filter by offering duration, e.g. '12'</param>
		/// <param name="maximumBitrate">Filter by bitrate, 'MAX_10_MBPS', 'MAX_20_MBPS', or 'MAX_50_MBPS'
		///</param>
		/// <param name="maximumFramerate">Filter by framerate, 'MAX_30_FPS' or 'MAX_60_FPS'</param>
		/// <param name="resolution">Filter by resolution, 'SD', 'HD', 'FHD', or 'UHD'</param>
		/// <param name="resourceType">Filter by resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'</param>
		/// <param name="specialFeature">Filter by special feature, 'ADVANCED_AUDIO' or 'AUDIO_NORMALIZATION'
		///</param>
		/// <param name="videoQuality">Filter by video quality, 'STANDARD', 'ENHANCED', or 'PREMIUM'
		///</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListOfferingsResponse> ListOfferingsAsync(string channelClass, string channelConfiguration, string codec, string duration, int maxResults, string maximumBitrate, string maximumFramerate, string nextToken, string resolution, string resourceType, string specialFeature, string videoQuality, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/offerings?channelClass=" + (channelClass==null? "" : System.Uri.EscapeDataString(channelClass))+"&channelConfiguration=" + (channelConfiguration==null? "" : System.Uri.EscapeDataString(channelConfiguration))+"&codec=" + (codec==null? "" : System.Uri.EscapeDataString(codec))+"&duration=" + (duration==null? "" : System.Uri.EscapeDataString(duration))+"&maxResults="+maxResults+"&maximumBitrate=" + (maximumBitrate==null? "" : System.Uri.EscapeDataString(maximumBitrate))+"&maximumFramerate=" + (maximumFramerate==null? "" : System.Uri.EscapeDataString(maximumFramerate))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&resolution=" + (resolution==null? "" : System.Uri.EscapeDataString(resolution))+"&resourceType=" + (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"&specialFeature=" + (specialFeature==null? "" : System.Uri.EscapeDataString(specialFeature))+"&videoQuality=" + (videoQuality==null? "" : System.Uri.EscapeDataString(videoQuality))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListOfferingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List purchased reservations.
		/// ListReservations prod/reservations
		/// </summary>
		/// <param name="channelClass">Filter by channel class, 'STANDARD' or 'SINGLE_PIPELINE'
		///</param>
		/// <param name="codec">Filter by codec, 'AVC', 'HEVC', 'MPEG2', 'AUDIO', or 'LINK'</param>
		/// <param name="maximumBitrate">Filter by bitrate, 'MAX_10_MBPS', 'MAX_20_MBPS', or 'MAX_50_MBPS'
		///</param>
		/// <param name="maximumFramerate">Filter by framerate, 'MAX_30_FPS' or 'MAX_60_FPS'</param>
		/// <param name="resolution">Filter by resolution, 'SD', 'HD', 'FHD', or 'UHD'</param>
		/// <param name="resourceType">Filter by resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'</param>
		/// <param name="specialFeature">Filter by special feature, 'ADVANCED_AUDIO' or 'AUDIO_NORMALIZATION'
		///</param>
		/// <param name="videoQuality">Filter by video quality, 'STANDARD', 'ENHANCED', or 'PREMIUM'
		///</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListReservationsResponse> ListReservationsAsync(string channelClass, string codec, int maxResults, string maximumBitrate, string maximumFramerate, string nextToken, string resolution, string resourceType, string specialFeature, string videoQuality, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/reservations?channelClass=" + (channelClass==null? "" : System.Uri.EscapeDataString(channelClass))+"&codec=" + (codec==null? "" : System.Uri.EscapeDataString(codec))+"&maxResults="+maxResults+"&maximumBitrate=" + (maximumBitrate==null? "" : System.Uri.EscapeDataString(maximumBitrate))+"&maximumFramerate=" + (maximumFramerate==null? "" : System.Uri.EscapeDataString(maximumFramerate))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&resolution=" + (resolution==null? "" : System.Uri.EscapeDataString(resolution))+"&resourceType=" + (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"&specialFeature=" + (specialFeature==null? "" : System.Uri.EscapeDataString(specialFeature))+"&videoQuality=" + (videoQuality==null? "" : System.Uri.EscapeDataString(videoQuality))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListReservationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Purchase an offering and create a reservation.
		/// PurchaseOffering prod/offerings/{offeringId}/purchase
		/// </summary>
		/// <param name="offeringId">Offering to purchase, e.g. '87654321'</param>
		public async Task PurchaseOfferingAsync(string offeringId, PurchaseOfferingPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/offerings/"+ (offeringId==null? "" : System.Uri.EscapeDataString(offeringId))+"/purchase";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Send a reboot command to the specified input device. The device will begin rebooting within a few seconds of sending the command. When the reboot is complete, the device’s connection status will change to connected.
		/// RebootInputDevice prod/inputDevices/{inputDeviceId}/reboot
		/// </summary>
		/// <param name="inputDeviceId">The unique ID of the input device to reboot. For example, hd-123456789abcdef.</param>
		/// <returns>Success</returns>
		public async Task<RebootInputDeviceResponse> RebootInputDeviceAsync(string inputDeviceId, RebootInputDevicePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/inputDevices/"+ (inputDeviceId==null? "" : System.Uri.EscapeDataString(inputDeviceId))+"/reboot";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RebootInputDeviceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Reject the transfer of the specified input device to your AWS account.
		/// RejectInputDeviceTransfer prod/inputDevices/{inputDeviceId}/reject
		/// </summary>
		/// <param name="inputDeviceId">The unique ID of the input device to reject. For example, hd-123456789abcdef.</param>
		/// <returns>Success</returns>
		public async Task<RejectInputDeviceTransferResponse> RejectInputDeviceTransferAsync(string inputDeviceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/inputDevices/"+ (inputDeviceId==null? "" : System.Uri.EscapeDataString(inputDeviceId))+"/reject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RejectInputDeviceTransferResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts an existing channel
		/// StartChannel prod/channels/{channelId}/start
		/// </summary>
		/// <param name="channelId">A request to start a channel</param>
		/// <returns>Success</returns>
		public async Task<StartChannelResponse> StartChannelAsync(string channelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/channels/"+ (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"/start";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartChannelResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start a maintenance window for the specified input device. Starting a maintenance window will give the device up to two hours to install software. If the device was streaming prior to the maintenance, it will resume streaming when the software is fully installed. Devices automatically install updates while they are powered on and their MediaLive channels are stopped. A maintenance window allows you to update a device without having to stop MediaLive channels that use the device. The device must remain powered on and connected to the internet for the duration of the maintenance.
		/// StartInputDeviceMaintenanceWindow prod/inputDevices/{inputDeviceId}/startInputDeviceMaintenanceWindow
		/// </summary>
		/// <param name="inputDeviceId">The unique ID of the input device to start a maintenance window for. For example, hd-123456789abcdef.</param>
		/// <returns>Success</returns>
		public async Task<StartInputDeviceMaintenanceWindowResponse> StartInputDeviceMaintenanceWindowAsync(string inputDeviceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/inputDevices/"+ (inputDeviceId==null? "" : System.Uri.EscapeDataString(inputDeviceId))+"/startInputDeviceMaintenanceWindow";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartInputDeviceMaintenanceWindowResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start (run) the multiplex. Starting the multiplex does not start the channels. You must explicitly start each channel.
		/// StartMultiplex prod/multiplexes/{multiplexId}/start
		/// </summary>
		/// <param name="multiplexId">The ID of the multiplex.</param>
		public async Task StartMultiplexAsync(string multiplexId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/multiplexes/"+ (multiplexId==null? "" : System.Uri.EscapeDataString(multiplexId))+"/start";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops a running channel
		/// StopChannel prod/channels/{channelId}/stop
		/// </summary>
		/// <param name="channelId">A request to stop a running channel</param>
		/// <returns>Success</returns>
		public async Task<StopChannelResponse> StopChannelAsync(string channelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/channels/"+ (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"/stop";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StopChannelResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops a running multiplex. If the multiplex isn't running, this action has no effect.
		/// StopMultiplex prod/multiplexes/{multiplexId}/stop
		/// </summary>
		/// <param name="multiplexId">The ID of the multiplex.</param>
		public async Task StopMultiplexAsync(string multiplexId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/multiplexes/"+ (multiplexId==null? "" : System.Uri.EscapeDataString(multiplexId))+"/stop";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start an input device transfer to another AWS account. After you make the request, the other account must accept or reject the transfer.
		/// TransferInputDevice prod/inputDevices/{inputDeviceId}/transfer
		/// </summary>
		/// <param name="inputDeviceId">The unique ID of this input device. For example, hd-123456789abcdef.</param>
		/// <returns>Success</returns>
		public async Task<TransferInputDeviceResponse> TransferInputDeviceAsync(string inputDeviceId, TransferInputDevicePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/inputDevices/"+ (inputDeviceId==null? "" : System.Uri.EscapeDataString(inputDeviceId))+"/transfer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TransferInputDeviceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Changes the class of the channel.
		/// UpdateChannelClass prod/channels/{channelId}/channelClass
		/// </summary>
		/// <param name="channelId">Channel Id of the channel whose class should be updated.</param>
		/// <returns>Success</returns>
		public async Task<UpdateChannelClassResponse> UpdateChannelClassAsync(string channelId, UpdateChannelClassPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prod/channels/"+ (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"/channelClass";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateChannelClassResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public class BatchDeletePostBody
	{
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelIds")]
		public string[] ChannelIds { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputIds")]
		public string[] InputIds { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputSecurityGroupIds")]
		public string[] InputSecurityGroupIds { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiplexIds")]
		public string[] MultiplexIds { get; set; }
	}
	
	public class BatchStartPostBody
	{
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelIds")]
		public string[] ChannelIds { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiplexIds")]
		public string[] MultiplexIds { get; set; }
	}
	
	public class BatchStopPostBody
	{
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelIds")]
		public string[] ChannelIds { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiplexIds")]
		public string[] MultiplexIds { get; set; }
	}
	
	public class BatchUpdateSchedulePutBody
	{
		
		/// <summary>
		/// A list of schedule actions to create (in a request) or that have been created (in a response).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creates")]
		public BatchUpdateSchedulePutBodyCreates Creates { get; set; }
		
		/// <summary>
		/// A list of schedule actions to delete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deletes")]
		public BatchUpdateSchedulePutBodyDeletes Deletes { get; set; }
	}
	
	public class BatchUpdateSchedulePutBodyCreates
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ScheduleAction[] ScheduleActions { get; set; }
	}
	
	public class BatchUpdateSchedulePutBodyDeletes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ActionNames { get; set; }
	}
	
	public class ClaimDevicePostBody
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class CreateChannelPostBody
	{
		
		/// <summary>
		/// Placeholder documentation for CdiInputSpecification
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cdiInputSpecification")]
		public CreateChannelPostBodyCdiInputSpecification CdiInputSpecification { get; set; }
		
		/// <summary>
		/// A standard channel has two encoding pipelines and a single pipeline channel only has one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelClass")]
		public ChannelClass ChannelClass { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfOutputDestination
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinations")]
		public OutputDestination[] Destinations { get; set; }
		
		/// <summary>
		/// Encoder Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encoderSettings")]
		public CreateChannelPostBodyEncoderSettings EncoderSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputAttachment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputAttachments")]
		public InputAttachment[] InputAttachments { get; set; }
		
		/// <summary>
		/// Placeholder documentation for InputSpecification
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputSpecification")]
		public CreateChannelPostBodyInputSpecification InputSpecification { get; set; }
		
		/// <summary>
		/// The log level the user wants for their channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logLevel")]
		public LogLevel LogLevel { get; set; }
		
		/// <summary>
		/// Placeholder documentation for MaintenanceCreateSettings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintenance")]
		public CreateChannelPostBodyMaintenance Maintenance { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reserved")]
		public string Reserved { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The properties for a private VPC Output
		///When this property is specified, the output egress addresses will be created in a user specified VPC
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vpc")]
		public CreateChannelPostBodyVpc Vpc { get; set; }
	}
	
	public class CreateChannelPostBodyCdiInputSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CdiInputResolution Resolution { get; set; }
	}
	
	public class CreateChannelPostBodyEncoderSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AudioDescription[] AudioDescriptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AvailBlanking AvailBlanking { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AvailConfiguration AvailConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BlackoutSlate BlackoutSlate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CaptionDescription[] CaptionDescriptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FeatureActivations FeatureActivations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GlobalConfiguration GlobalConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MotionGraphicsConfiguration MotionGraphicsConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenConfiguration NielsenConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputGroup[] OutputGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TimecodeConfig TimecodeConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VideoDescription[] VideoDescriptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ThumbnailConfiguration ThumbnailConfiguration { get; set; }
	}
	
	public class CreateChannelPostBodyInputSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InputCodec Codec { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputMaximumBitrate MaximumBitrate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputResolution Resolution { get; set; }
	}
	
	public class CreateChannelPostBodyMaintenance
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceDay MaintenanceDay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceStartTime { get; set; }
	}
	
	public class CreateChannelPostBodyVpc
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PublicAddressAllocationIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetIds { get; set; }
	}
	
	public class CreateInputPostBody
	{
		
		/// <summary>
		/// Placeholder documentation for __listOfInputDestinationRequest
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinations")]
		public InputDestinationRequest[] Destinations { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputDeviceSettings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputDevices")]
		public InputDeviceSettings[] InputDevices { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputSecurityGroups")]
		public string[] InputSecurityGroups { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfMediaConnectFlowRequest
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaConnectFlows")]
		public MediaConnectFlowRequest[] MediaConnectFlows { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputSourceRequest
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public InputSourceRequest[] Sources { get; set; }
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The different types of inputs that AWS Elemental MediaLive supports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public InputType Type { get; set; }
		
		/// <summary>
		/// Settings for a private VPC Input.
		///When this property is specified, the input destination addresses will be created in a VPC rather than with public Internet addresses.
		///This property requires setting the roleArn property on Input creation.
		///Not compatible with the inputSecurityGroups property.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vpc")]
		public CreateInputPostBodyVpc Vpc { get; set; }
	}
	
	public class CreateInputPostBodyVpc
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetIds { get; set; }
	}
	
	public class CreateInputSecurityGroupPostBody
	{
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputWhitelistRuleCidr
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="whitelistRules")]
		public InputWhitelistRuleCidr[] WhitelistRules { get; set; }
	}
	
	public class CreateMultiplexPostBody
	{
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="availabilityZones")]
		public string[] AvailabilityZones { get; set; }
		
		/// <summary>
		/// Contains configuration for a Multiplex event
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="multiplexSettings")]
		public CreateMultiplexPostBodyMultiplexSettings MultiplexSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateMultiplexPostBodyMultiplexSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaximumVideoBufferDelayMilliseconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TransportStreamBitrate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TransportStreamId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TransportStreamReservedBitrate { get; set; }
	}
	
	public class CreateMultiplexProgramPostBody
	{
		
		/// <summary>
		/// Multiplex Program settings configuration.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="multiplexProgramSettings")]
		public CreateMultiplexProgramPostBodyMultiplexProgramSettings MultiplexProgramSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="programName")]
		public string ProgramName { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	public class CreateMultiplexProgramPostBodyMultiplexProgramSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PreferredChannelPipeline PreferredChannelPipeline { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProgramNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexProgramServiceDescriptor ServiceDescriptor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexVideoSettings VideoSettings { get; set; }
	}
	
	public class CreatePartnerInputPostBody
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateTagsPostBody
	{
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class UpdateChannelPutBody
	{
		
		/// <summary>
		/// Placeholder documentation for CdiInputSpecification
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cdiInputSpecification")]
		public UpdateChannelPutBodyCdiInputSpecification CdiInputSpecification { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfOutputDestination
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinations")]
		public OutputDestination[] Destinations { get; set; }
		
		/// <summary>
		/// Encoder Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encoderSettings")]
		public UpdateChannelPutBodyEncoderSettings EncoderSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputAttachment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputAttachments")]
		public InputAttachment[] InputAttachments { get; set; }
		
		/// <summary>
		/// Placeholder documentation for InputSpecification
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputSpecification")]
		public UpdateChannelPutBodyInputSpecification InputSpecification { get; set; }
		
		/// <summary>
		/// The log level the user wants for their channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logLevel")]
		public LogLevel LogLevel { get; set; }
		
		/// <summary>
		/// Placeholder documentation for MaintenanceUpdateSettings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintenance")]
		public UpdateChannelPutBodyMaintenance Maintenance { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
	}
	
	public class UpdateChannelPutBodyCdiInputSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CdiInputResolution Resolution { get; set; }
	}
	
	public class UpdateChannelPutBodyEncoderSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AudioDescription[] AudioDescriptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AvailBlanking AvailBlanking { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AvailConfiguration AvailConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BlackoutSlate BlackoutSlate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CaptionDescription[] CaptionDescriptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FeatureActivations FeatureActivations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GlobalConfiguration GlobalConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MotionGraphicsConfiguration MotionGraphicsConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NielsenConfiguration NielsenConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputGroup[] OutputGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TimecodeConfig TimecodeConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VideoDescription[] VideoDescriptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ThumbnailConfiguration ThumbnailConfiguration { get; set; }
	}
	
	public class UpdateChannelPutBodyInputSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InputCodec Codec { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputMaximumBitrate MaximumBitrate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputResolution Resolution { get; set; }
	}
	
	public class UpdateChannelPutBodyMaintenance
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceDay MaintenanceDay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceScheduledDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceStartTime { get; set; }
	}
	
	public class UpdateInputPutBody
	{
		
		/// <summary>
		/// Placeholder documentation for __listOfInputDestinationRequest
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinations")]
		public InputDestinationRequest[] Destinations { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputDeviceRequest
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputDevices")]
		public InputDeviceRequest[] InputDevices { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputSecurityGroups")]
		public string[] InputSecurityGroups { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfMediaConnectFlowRequest
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaConnectFlows")]
		public MediaConnectFlowRequest[] MediaConnectFlows { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputSourceRequest
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public InputSourceRequest[] Sources { get; set; }
	}
	
	public class UpdateInputSecurityGroupPutBody
	{
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputWhitelistRuleCidr
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="whitelistRules")]
		public InputWhitelistRuleCidr[] WhitelistRules { get; set; }
	}
	
	public class UpdateMultiplexPutBody
	{
		
		/// <summary>
		/// Contains configuration for a Multiplex event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiplexSettings")]
		public UpdateMultiplexPutBodyMultiplexSettings MultiplexSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class UpdateMultiplexPutBodyMultiplexSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaximumVideoBufferDelayMilliseconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TransportStreamBitrate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TransportStreamId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TransportStreamReservedBitrate { get; set; }
	}
	
	public class UpdateMultiplexProgramPutBody
	{
		
		/// <summary>
		/// Multiplex Program settings configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiplexProgramSettings")]
		public UpdateMultiplexProgramPutBodyMultiplexProgramSettings MultiplexProgramSettings { get; set; }
	}
	
	public class UpdateMultiplexProgramPutBodyMultiplexProgramSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PreferredChannelPipeline PreferredChannelPipeline { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProgramNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexProgramServiceDescriptor ServiceDescriptor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiplexVideoSettings VideoSettings { get; set; }
	}
	
	public class UpdateReservationPutBody
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The Renewal settings for Reservations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="renewalSettings")]
		public UpdateReservationPutBodyRenewalSettings RenewalSettings { get; set; }
	}
	
	public class UpdateReservationPutBodyRenewalSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ReservationAutomaticRenewal AutomaticRenewal { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RenewalCount { get; set; }
	}
	
	public class UpdateInputDevicePutBody
	{
		
		/// <summary>
		/// Configurable settings for the input device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hdDeviceSettings")]
		public UpdateInputDevicePutBodyHdDeviceSettings HdDeviceSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Configurable settings for the input device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uhdDeviceSettings")]
		public UpdateInputDevicePutBodyUhdDeviceSettings UhdDeviceSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availabilityZone")]
		public string AvailabilityZone { get; set; }
	}
	
	public class UpdateInputDevicePutBodyHdDeviceSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceConfiguredInput ConfiguredInput { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxBitrate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LatencyMs { get; set; }
	}
	
	public class UpdateInputDevicePutBodyUhdDeviceSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceConfiguredInput ConfiguredInput { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxBitrate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LatencyMs { get; set; }
	}
	
	public enum DescribeInputDeviceThumbnailAccept
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="image/jpeg")]
		image_jpeg = 0,
	}
	
	public class UpdateAccountConfigurationPutBody
	{
		
		/// <summary>
		/// Placeholder documentation for AccountConfiguration
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountConfiguration")]
		public UpdateAccountConfigurationPutBodyAccountConfiguration AccountConfiguration { get; set; }
	}
	
	public class UpdateAccountConfigurationPutBodyAccountConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
	}
	
	public class PurchaseOfferingPostBody
	{
		
		/// <summary>
		/// Placeholder documentation for __integerMin1
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int Count { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The Renewal settings for Reservations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="renewalSettings")]
		public PurchaseOfferingPostBodyRenewalSettings RenewalSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start")]
		public string Start { get; set; }
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class PurchaseOfferingPostBodyRenewalSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ReservationAutomaticRenewal AutomaticRenewal { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RenewalCount { get; set; }
	}
	
	public class RebootInputDevicePostBody
	{
		
		/// <summary>
		/// Whether or not to force reboot the input device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="force")]
		public RebootInputDeviceForce Force { get; set; }
	}
	
	public class TransferInputDevicePostBody
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetCustomerId")]
		public string TargetCustomerId { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetRegion")]
		public string TargetRegion { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferMessage")]
		public string TransferMessage { get; set; }
	}
	
	public class UpdateChannelClassPutBody
	{
		
		/// <summary>
		/// A standard channel has two encoding pipelines and a single pipeline channel only has one.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelClass")]
		public ChannelClass ChannelClass { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfOutputDestination
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinations")]
		public OutputDestination[] Destinations { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
