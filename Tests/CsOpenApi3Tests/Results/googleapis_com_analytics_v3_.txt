//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// JSON template for Analytics account entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Account
	{
		
		/// <summary>
		/// Child link for an account entry. Points to the list of web properties for this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="childLink")]
		public AccountChildLink ChildLink { get; set; }
		
		/// <summary>
		/// Time the account was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// Account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource type for Analytics account.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#account")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#account";
		
		/// <summary>
		/// Account name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Permissions the user has for this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public AccountPermissions Permissions { get; set; }
		
		/// <summary>
		/// Link for this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// Indicates whether this account is starred or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="starred")]
		public System.Nullable<System.Boolean> Starred { get; set; }
		
		/// <summary>
		/// Time the account was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
	}
	
	public class AccountChildLink
	{
		
		/// <summary>
		/// Link to the list of web properties for this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// Type of the child link. Its value is "analytics#webproperties".
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#webproperties")]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; } = "analytics#webproperties";
	}
	
	public class AccountPermissions
	{
		
		/// <summary>
		/// All the permissions that the user has for this account. These include any implied permissions (e.g., EDIT implies VIEW).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effective")]
		public string[] Effective { get; set; }
	}
	
	/// <summary>
	/// JSON template for a linked account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountRef
	{
		
		/// <summary>
		/// Link for this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// Account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Analytics account reference.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#accountRef")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#accountRef";
		
		/// <summary>
		/// Account name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// An AccountSummary collection lists a summary of accounts, properties and views (profiles) to which the user has access. Each resource in the collection corresponds to a single AccountSummary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountSummaries
	{
		
		/// <summary>
		/// A list of AccountSummaries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public AccountSummary[] Items { get; set; }
		
		/// <summary>
		/// The maximum number of resources the response can contain, regardless of the actual number of resources returned. Its value ranges from 1 to 1000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		/// <summary>
		/// Collection type.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#accountSummaries")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#accountSummaries";
		
		/// <summary>
		/// Link to next page for this AccountSummary collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Link to previous page for this AccountSummary collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousLink")]
		public string PreviousLink { get; set; }
		
		/// <summary>
		/// The starting index of the resources, which is 1 by default or otherwise specified by the start-index query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIndex")]
		public System.Nullable<System.Int32> StartIndex { get; set; }
		
		/// <summary>
		/// The total number of results for the query, regardless of the number of results in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// Email ID of the authenticated user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// JSON template for an Analytics AccountSummary. An AccountSummary is a lightweight tree comprised of properties/profiles.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountSummary
	{
		
		/// <summary>
		/// Account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource type for Analytics AccountSummary.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#accountSummary")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#accountSummary";
		
		/// <summary>
		/// Account name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Indicates whether this account is starred or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="starred")]
		public System.Nullable<System.Boolean> Starred { get; set; }
		
		/// <summary>
		/// List of web properties under this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webProperties")]
		public WebPropertySummary[] WebProperties { get; set; }
	}
	
	/// <summary>
	/// JSON template for an Analytics WebPropertySummary. WebPropertySummary returns basic information (i.e., summary) for a web property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WebPropertySummary
	{
		
		/// <summary>
		/// Web property ID of the form UA-XXXXX-YY.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Internal ID for this web property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalWebPropertyId")]
		public string InternalWebPropertyId { get; set; }
		
		/// <summary>
		/// Resource type for Analytics WebPropertySummary.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#webPropertySummary")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#webPropertySummary";
		
		/// <summary>
		/// Level for this web property. Possible values are STANDARD or PREMIUM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="level")]
		public string Level { get; set; }
		
		/// <summary>
		/// Web property name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// List of profiles under this web property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profiles")]
		public ProfileSummary[] Profiles { get; set; }
		
		/// <summary>
		/// Indicates whether this web property is starred or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="starred")]
		public System.Nullable<System.Boolean> Starred { get; set; }
		
		/// <summary>
		/// Website url for this web property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="websiteUrl")]
		public string WebsiteUrl { get; set; }
	}
	
	/// <summary>
	/// JSON template for an Analytics ProfileSummary. ProfileSummary returns basic information (i.e., summary) for a profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProfileSummary
	{
		
		/// <summary>
		/// View (profile) ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource type for Analytics ProfileSummary.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#profileSummary")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#profileSummary";
		
		/// <summary>
		/// View (profile) name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Indicates whether this view (profile) is starred or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="starred")]
		public System.Nullable<System.Boolean> Starred { get; set; }
		
		/// <summary>
		/// View (Profile) type. Supported types: WEB or APP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// JSON template for an Analytics account ticket. The account ticket consists of the ticket ID and the basic information for the account, property and profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountTicket
	{
		
		/// <summary>
		/// JSON template for Analytics account entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account")]
		public Account Account { get; set; }
		
		/// <summary>
		/// Account ticket ID used to access the account ticket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource type for account ticket.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#accountTicket")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#accountTicket";
		
		/// <summary>
		/// JSON template for an Analytics view (profile).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profile")]
		public Profile Profile { get; set; }
		
		/// <summary>
		/// Redirect URI where the user will be sent after accepting Terms of Service. Must be configured in APIs console as a callback URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirectUri")]
		public string RedirectUri { get; set; }
		
		/// <summary>
		/// JSON template for an Analytics web property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webproperty")]
		public Webproperty Webproperty { get; set; }
	}
	
	/// <summary>
	/// JSON template for an Analytics view (profile).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Profile
	{
		
		/// <summary>
		/// Account ID to which this view (profile) belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Indicates whether bot filtering is enabled for this view (profile).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="botFilteringEnabled")]
		public System.Nullable<System.Boolean> BotFilteringEnabled { get; set; }
		
		/// <summary>
		/// Child link for this view (profile). Points to the list of goals for this view (profile).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="childLink")]
		public ProfileChildLink ChildLink { get; set; }
		
		/// <summary>
		/// Time this view (profile) was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// The currency type associated with this view (profile), defaults to USD. The supported values are:
		///USD, JPY, EUR, GBP, AUD, KRW, BRL, CNY, DKK, RUB, SEK, NOK, PLN, TRY, TWD, HKD, THB, IDR, ARS, MXN, VND, PHP, INR, CHF, CAD, CZK, NZD, HUF, BGN, LTL, ZAR, UAH, AED, BOB, CLP, COP, EGP, HRK, ILS, MAD, MYR, PEN, PKR, RON, RSD, SAR, SGD, VEF, LVL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// Default page for this view (profile).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultPage")]
		public string DefaultPage { get; set; }
		
		/// <summary>
		/// Indicates whether ecommerce tracking is enabled for this view (profile).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eCommerceTracking")]
		public System.Nullable<System.Boolean> ECommerceTracking { get; set; }
		
		/// <summary>
		/// Indicates whether enhanced ecommerce tracking is enabled for this view (profile). This property can only be enabled if ecommerce tracking is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enhancedECommerceTracking")]
		public System.Nullable<System.Boolean> EnhancedECommerceTracking { get; set; }
		
		/// <summary>
		/// The query parameters that are excluded from this view (profile).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludeQueryParameters")]
		public string ExcludeQueryParameters { get; set; }
		
		/// <summary>
		/// View (Profile) ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Internal ID for the web property to which this view (profile) belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalWebPropertyId")]
		public string InternalWebPropertyId { get; set; }
		
		/// <summary>
		/// Resource type for Analytics view (profile).
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#profile")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#profile";
		
		/// <summary>
		/// Name of this view (profile).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Parent link for this view (profile). Points to the web property to which this view (profile) belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentLink")]
		public ProfileParentLink ParentLink { get; set; }
		
		/// <summary>
		/// Permissions the user has for this view (profile).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public ProfilePermissions Permissions { get; set; }
		
		/// <summary>
		/// Link for this view (profile).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// Site search category parameters for this view (profile).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="siteSearchCategoryParameters")]
		public string SiteSearchCategoryParameters { get; set; }
		
		/// <summary>
		/// The site search query parameters for this view (profile).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="siteSearchQueryParameters")]
		public string SiteSearchQueryParameters { get; set; }
		
		/// <summary>
		/// Indicates whether this view (profile) is starred or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="starred")]
		public System.Nullable<System.Boolean> Starred { get; set; }
		
		/// <summary>
		/// Whether or not Analytics will strip search category parameters from the URLs in your reports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stripSiteSearchCategoryParameters")]
		public System.Nullable<System.Boolean> StripSiteSearchCategoryParameters { get; set; }
		
		/// <summary>
		/// Whether or not Analytics will strip search query parameters from the URLs in your reports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stripSiteSearchQueryParameters")]
		public System.Nullable<System.Boolean> StripSiteSearchQueryParameters { get; set; }
		
		/// <summary>
		/// Time zone for which this view (profile) has been configured. Time zones are identified by strings from the TZ database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
		
		/// <summary>
		/// View (Profile) type. Supported types: WEB or APP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Time this view (profile) was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
		
		/// <summary>
		/// Web property ID of the form UA-XXXXX-YY to which this view (profile) belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webPropertyId")]
		public string WebPropertyId { get; set; }
		
		/// <summary>
		/// Website URL for this view (profile).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="websiteUrl")]
		public string WebsiteUrl { get; set; }
	}
	
	public class ProfileChildLink
	{
		
		/// <summary>
		/// Link to the list of goals for this view (profile).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// Value is "analytics#goals".
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#goals")]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; } = "analytics#goals";
	}
	
	public class ProfileParentLink
	{
		
		/// <summary>
		/// Link to the web property to which this view (profile) belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// Value is "analytics#webproperty".
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#webproperty")]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; } = "analytics#webproperty";
	}
	
	public class ProfilePermissions
	{
		
		/// <summary>
		/// All the permissions that the user has for this view (profile). These include any implied permissions (e.g., EDIT implies VIEW) or inherited permissions from the parent web property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effective")]
		public string[] Effective { get; set; }
	}
	
	/// <summary>
	/// JSON template for an Analytics web property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Webproperty
	{
		
		/// <summary>
		/// Account ID to which this web property belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Child link for this web property. Points to the list of views (profiles) for this web property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="childLink")]
		public WebpropertyChildLink ChildLink { get; set; }
		
		/// <summary>
		/// Time this web property was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// Set to true to reset the retention period of the user identifier with each new event from that user (thus setting the expiration date to current time plus retention period).
		///Set to false to delete data associated with the user identifier automatically after the rentention period.
		///This property cannot be set on insert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataRetentionResetOnNewActivity")]
		public System.Nullable<System.Boolean> DataRetentionResetOnNewActivity { get; set; }
		
		/// <summary>
		/// The length of time for which user and event data is retained.
		///This property cannot be set on insert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataRetentionTtl")]
		public string DataRetentionTtl { get; set; }
		
		/// <summary>
		/// Default view (profile) ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultProfileId")]
		public string DefaultProfileId { get; set; }
		
		/// <summary>
		/// Web property ID of the form UA-XXXXX-YY.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The industry vertical/category selected for this web property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="industryVertical")]
		public string IndustryVertical { get; set; }
		
		/// <summary>
		/// Internal ID for this web property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalWebPropertyId")]
		public string InternalWebPropertyId { get; set; }
		
		/// <summary>
		/// Resource type for Analytics WebProperty.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#webproperty")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#webproperty";
		
		/// <summary>
		/// Level for this web property. Possible values are STANDARD or PREMIUM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="level")]
		public string Level { get; set; }
		
		/// <summary>
		/// Name of this web property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Parent link for this web property. Points to the account to which this web property belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentLink")]
		public WebpropertyParentLink ParentLink { get; set; }
		
		/// <summary>
		/// Permissions the user has for this web property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public WebpropertyPermissions Permissions { get; set; }
		
		/// <summary>
		/// View (Profile) count for this web property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileCount")]
		public System.Nullable<System.Int32> ProfileCount { get; set; }
		
		/// <summary>
		/// Link for this web property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// Indicates whether this web property is starred or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="starred")]
		public System.Nullable<System.Boolean> Starred { get; set; }
		
		/// <summary>
		/// Time this web property was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
		
		/// <summary>
		/// Website url for this web property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="websiteUrl")]
		public string WebsiteUrl { get; set; }
	}
	
	public class WebpropertyChildLink
	{
		
		/// <summary>
		/// Link to the list of views (profiles) for this web property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// Type of the parent link. Its value is "analytics#profiles".
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#profiles")]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; } = "analytics#profiles";
	}
	
	public class WebpropertyParentLink
	{
		
		/// <summary>
		/// Link to the account for this web property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// Type of the parent link. Its value is "analytics#account".
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#account")]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; } = "analytics#account";
	}
	
	public class WebpropertyPermissions
	{
		
		/// <summary>
		/// All the permissions that the user has for this web property. These include any implied permissions (e.g., EDIT implies VIEW) or inherited permissions from the parent account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effective")]
		public string[] Effective { get; set; }
	}
	
	/// <summary>
	/// JSON template for an Analytics account tree requests. The account tree request is used in the provisioning api to create an account, property, and view (profile). It contains the basic information required to make these fields.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountTreeRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// Resource type for account ticket.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#accountTreeRequest")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#accountTreeRequest";
		
		[System.Runtime.Serialization.DataMember(Name="profileName")]
		public string ProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webpropertyName")]
		public string WebpropertyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="websiteUrl")]
		public string WebsiteUrl { get; set; }
	}
	
	/// <summary>
	/// JSON template for an Analytics account tree response. The account tree response is used in the provisioning api to return the result of creating an account, property, and view (profile).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountTreeResponse
	{
		
		/// <summary>
		/// JSON template for Analytics account entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account")]
		public Account Account { get; set; }
		
		/// <summary>
		/// Resource type for account ticket.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#accountTreeResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#accountTreeResponse";
		
		/// <summary>
		/// JSON template for an Analytics view (profile).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profile")]
		public Profile Profile { get; set; }
		
		/// <summary>
		/// JSON template for an Analytics web property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webproperty")]
		public Webproperty Webproperty { get; set; }
	}
	
	/// <summary>
	/// An account collection provides a list of Analytics accounts to which a user has access. The account collection is the entry point to all management information. Each resource in the collection corresponds to a single Analytics account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Accounts
	{
		
		/// <summary>
		/// A list of accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Account[] Items { get; set; }
		
		/// <summary>
		/// The maximum number of entries the response can contain, regardless of the actual number of entries returned. Its value ranges from 1 to 1000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		/// <summary>
		/// Collection type.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#accounts")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#accounts";
		
		/// <summary>
		/// Next link for this account collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Previous link for this account collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousLink")]
		public string PreviousLink { get; set; }
		
		/// <summary>
		/// The starting index of the entries, which is 1 by default or otherwise specified by the start-index query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIndex")]
		public System.Nullable<System.Int32> StartIndex { get; set; }
		
		/// <summary>
		/// The total number of results for the query, regardless of the number of results in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// Email ID of the authenticated user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// JSON template for an Google Ads account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AdWordsAccount
	{
		
		/// <summary>
		/// True if auto-tagging is enabled on the Google Ads account. Read-only after the insert operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoTaggingEnabled")]
		public System.Nullable<System.Boolean> AutoTaggingEnabled { get; set; }
		
		/// <summary>
		/// Customer ID. This field is required when creating a Google Ads link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerId")]
		public string CustomerId { get; set; }
		
		/// <summary>
		/// Resource type for Google Ads account.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#adWordsAccount")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#adWordsAccount";
	}
	
	/// <summary>
	/// Request template for the delete upload data request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnalyticsDataimportDeleteUploadDataRequest
	{
		
		/// <summary>
		/// A list of upload UIDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customDataImportUids")]
		public string[] CustomDataImportUids { get; set; }
	}
	
	/// <summary>
	/// JSON template for a metadata column.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Column
	{
		
		/// <summary>
		/// Map of attribute name and value for this column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public System.Collections.Generic.Dictionary<string, string> Attributes { get; set; }
		
		/// <summary>
		/// Column id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource type for Analytics column.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#column")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#column";
	}
	
	/// <summary>
	/// Lists columns (dimensions and metrics) for a particular report type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Columns
	{
		
		/// <summary>
		/// List of attributes names returned by columns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributeNames")]
		public string[] AttributeNames { get; set; }
		
		/// <summary>
		/// Etag of collection. This etag can be compared with the last response etag to check if response has changed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// List of columns for a report type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Column[] Items { get; set; }
		
		/// <summary>
		/// Collection type.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#columns")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#columns";
		
		/// <summary>
		/// Total number of columns returned in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	/// <summary>
	/// JSON template for an Analytics custom data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomDataSource
	{
		
		/// <summary>
		/// Account ID to which this custom data source belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="childLink")]
		public CustomDataSourceChildLink ChildLink { get; set; }
		
		/// <summary>
		/// Time this custom data source was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// Description of custom data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Custom data source ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="importBehavior")]
		public string ImportBehavior { get; set; }
		
		/// <summary>
		/// Resource type for Analytics custom data source.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#customDataSource")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#customDataSource";
		
		/// <summary>
		/// Name of this custom data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Parent link for this custom data source. Points to the web property to which this custom data source belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentLink")]
		public CustomDataSourceParentLink ParentLink { get; set; }
		
		/// <summary>
		/// IDs of views (profiles) linked to the custom data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profilesLinked")]
		public string[] ProfilesLinked { get; set; }
		
		/// <summary>
		/// Collection of schema headers of the custom data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public string[] Schema { get; set; }
		
		/// <summary>
		/// Link for this Analytics custom data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// Type of the custom data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Time this custom data source was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
		
		/// <summary>
		/// Upload type of the custom data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploadType")]
		public string UploadType { get; set; }
		
		/// <summary>
		/// Web property ID of the form UA-XXXXX-YY to which this custom data source belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webPropertyId")]
		public string WebPropertyId { get; set; }
	}
	
	public class CustomDataSourceChildLink
	{
		
		/// <summary>
		/// Link to the list of daily uploads for this custom data source. Link to the list of uploads for this custom data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// Value is "analytics#dailyUploads". Value is "analytics#uploads".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class CustomDataSourceParentLink
	{
		
		/// <summary>
		/// Link to the web property to which this custom data source belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// Value is "analytics#webproperty".
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#webproperty")]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; } = "analytics#webproperty";
	}
	
	/// <summary>
	/// Lists Analytics custom data sources to which the user has access. Each resource in the collection corresponds to a single Analytics custom data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomDataSources
	{
		
		/// <summary>
		/// Collection of custom data sources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public CustomDataSource[] Items { get; set; }
		
		/// <summary>
		/// The maximum number of resources the response can contain, regardless of the actual number of resources returned. Its value ranges from 1 to 1000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		/// <summary>
		/// Collection type.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#customDataSources")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#customDataSources";
		
		/// <summary>
		/// Link to next page for this custom data source collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Link to previous page for this custom data source collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousLink")]
		public string PreviousLink { get; set; }
		
		/// <summary>
		/// The starting index of the resources, which is 1 by default or otherwise specified by the start-index query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIndex")]
		public System.Nullable<System.Int32> StartIndex { get; set; }
		
		/// <summary>
		/// The total number of results for the query, regardless of the number of results in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// Email ID of the authenticated user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// JSON template for Analytics Custom Dimension.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomDimension
	{
		
		/// <summary>
		/// Account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Boolean indicating whether the custom dimension is active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Time the custom dimension was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// Custom dimension ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Index of the custom dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// Kind value for a custom dimension. Set to "analytics#customDimension". It is a read-only field.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#customDimension")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#customDimension";
		
		/// <summary>
		/// Name of the custom dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Parent link for the custom dimension. Points to the property to which the custom dimension belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentLink")]
		public CustomDimensionParentLink ParentLink { get; set; }
		
		/// <summary>
		/// Scope of the custom dimension: HIT, SESSION, USER or PRODUCT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
		
		/// <summary>
		/// Link for the custom dimension
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// Time the custom dimension was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
		
		/// <summary>
		/// Property ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webPropertyId")]
		public string WebPropertyId { get; set; }
	}
	
	public class CustomDimensionParentLink
	{
		
		/// <summary>
		/// Link to the property to which the custom dimension belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// Type of the parent link. Set to "analytics#webproperty".
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#webproperty")]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; } = "analytics#webproperty";
	}
	
	/// <summary>
	/// A custom dimension collection lists Analytics custom dimensions to which the user has access. Each resource in the collection corresponds to a single Analytics custom dimension.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomDimensions
	{
		
		/// <summary>
		/// Collection of custom dimensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public CustomDimension[] Items { get; set; }
		
		/// <summary>
		/// The maximum number of resources the response can contain, regardless of the actual number of resources returned. Its value ranges from 1 to 1000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		/// <summary>
		/// Collection type.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#customDimensions")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#customDimensions";
		
		/// <summary>
		/// Link to next page for this custom dimension collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Link to previous page for this custom dimension collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousLink")]
		public string PreviousLink { get; set; }
		
		/// <summary>
		/// The starting index of the resources, which is 1 by default or otherwise specified by the start-index query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIndex")]
		public System.Nullable<System.Int32> StartIndex { get; set; }
		
		/// <summary>
		/// The total number of results for the query, regardless of the number of results in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// Email ID of the authenticated user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// JSON template for Analytics Custom Metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomMetric
	{
		
		/// <summary>
		/// Account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Boolean indicating whether the custom metric is active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Time the custom metric was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// Custom metric ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Index of the custom metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// Kind value for a custom metric. Set to "analytics#customMetric". It is a read-only field.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#customMetric")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#customMetric";
		
		/// <summary>
		/// Max value of custom metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_value")]
		public string Max_value { get; set; }
		
		/// <summary>
		/// Min value of custom metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="min_value")]
		public string Min_value { get; set; }
		
		/// <summary>
		/// Name of the custom metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Parent link for the custom metric. Points to the property to which the custom metric belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentLink")]
		public CustomMetricParentLink ParentLink { get; set; }
		
		/// <summary>
		/// Scope of the custom metric: HIT or PRODUCT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
		
		/// <summary>
		/// Link for the custom metric
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// Data type of custom metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Time the custom metric was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
		
		/// <summary>
		/// Property ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webPropertyId")]
		public string WebPropertyId { get; set; }
	}
	
	public class CustomMetricParentLink
	{
		
		/// <summary>
		/// Link to the property to which the custom metric belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// Type of the parent link. Set to "analytics#webproperty".
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#webproperty")]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; } = "analytics#webproperty";
	}
	
	/// <summary>
	/// A custom metric collection lists Analytics custom metrics to which the user has access. Each resource in the collection corresponds to a single Analytics custom metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomMetrics
	{
		
		/// <summary>
		/// Collection of custom metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public CustomMetric[] Items { get; set; }
		
		/// <summary>
		/// The maximum number of resources the response can contain, regardless of the actual number of resources returned. Its value ranges from 1 to 1000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		/// <summary>
		/// Collection type.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#customMetrics")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#customMetrics";
		
		/// <summary>
		/// Link to next page for this custom metric collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Link to previous page for this custom metric collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousLink")]
		public string PreviousLink { get; set; }
		
		/// <summary>
		/// The starting index of the resources, which is 1 by default or otherwise specified by the start-index query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIndex")]
		public System.Nullable<System.Int32> StartIndex { get; set; }
		
		/// <summary>
		/// The total number of results for the query, regardless of the number of results in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// Email ID of the authenticated user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// JSON template for Analytics Entity Google Ads Link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EntityAdWordsLink
	{
		
		/// <summary>
		/// A list of Google Ads client accounts. These cannot be MCC accounts. This field is required when creating a Google Ads link. It cannot be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adWordsAccounts")]
		public AdWordsAccount[] AdWordsAccounts { get; set; }
		
		/// <summary>
		/// Web property being linked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entity")]
		public EntityAdWordsLinkEntity Entity { get; set; }
		
		/// <summary>
		/// Entity Google Ads link ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource type for entity Google Ads link.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#entityAdWordsLink")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#entityAdWordsLink";
		
		/// <summary>
		/// Name of the link. This field is required when creating a Google Ads link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// IDs of linked Views (Profiles) represented as strings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileIds")]
		public string[] ProfileIds { get; set; }
		
		/// <summary>
		/// URL link for this Google Analytics - Google Ads link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
	}
	
	public class EntityAdWordsLinkEntity
	{
		
		/// <summary>
		/// JSON template for a web property reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webPropertyRef")]
		public WebPropertyRef WebPropertyRef { get; set; }
	}
	
	/// <summary>
	/// JSON template for a web property reference.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WebPropertyRef
	{
		
		/// <summary>
		/// Account ID to which this web property belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Link for this web property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// Web property ID of the form UA-XXXXX-YY.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Internal ID for this web property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalWebPropertyId")]
		public string InternalWebPropertyId { get; set; }
		
		/// <summary>
		/// Analytics web property reference.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#webPropertyRef")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#webPropertyRef";
		
		/// <summary>
		/// Name of this web property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// An entity Google Ads link collection provides a list of GA-Google Ads links Each resource in this collection corresponds to a single link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EntityAdWordsLinks
	{
		
		/// <summary>
		/// A list of entity Google Ads links.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public EntityAdWordsLink[] Items { get; set; }
		
		/// <summary>
		/// The maximum number of entries the response can contain, regardless of the actual number of entries returned. Its value ranges from 1 to 1000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		/// <summary>
		/// Collection type.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#entityAdWordsLinks")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#entityAdWordsLinks";
		
		/// <summary>
		/// Next link for this Google Ads link collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Previous link for this Google Ads link collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousLink")]
		public string PreviousLink { get; set; }
		
		/// <summary>
		/// The starting index of the entries, which is 1 by default or otherwise specified by the start-index query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIndex")]
		public System.Nullable<System.Int32> StartIndex { get; set; }
		
		/// <summary>
		/// The total number of results for the query, regardless of the number of results in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	/// <summary>
	/// JSON template for an Analytics Entity-User Link. Returns permissions that a user has for an entity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EntityUserLink
	{
		
		/// <summary>
		/// Entity for this link. It can be an account, a web property, or a view (profile).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entity")]
		public EntityUserLinkEntity Entity { get; set; }
		
		/// <summary>
		/// Entity user link ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource type for entity user link.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#entityUserLink")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#entityUserLink";
		
		/// <summary>
		/// Permissions the user has for this entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public EntityUserLinkPermissions Permissions { get; set; }
		
		/// <summary>
		/// Self link for this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// JSON template for a user reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userRef")]
		public UserRef UserRef { get; set; }
	}
	
	public class EntityUserLinkEntity
	{
		
		/// <summary>
		/// JSON template for a linked account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountRef")]
		public AccountRef AccountRef { get; set; }
		
		/// <summary>
		/// JSON template for a linked view (profile).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileRef")]
		public ProfileRef ProfileRef { get; set; }
		
		/// <summary>
		/// JSON template for a web property reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webPropertyRef")]
		public WebPropertyRef WebPropertyRef { get; set; }
	}
	
	/// <summary>
	/// JSON template for a linked view (profile).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProfileRef
	{
		
		/// <summary>
		/// Account ID to which this view (profile) belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Link for this view (profile).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// View (Profile) ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Internal ID for the web property to which this view (profile) belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalWebPropertyId")]
		public string InternalWebPropertyId { get; set; }
		
		/// <summary>
		/// Analytics view (profile) reference.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#profileRef")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#profileRef";
		
		/// <summary>
		/// Name of this view (profile).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Web property ID of the form UA-XXXXX-YY to which this view (profile) belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webPropertyId")]
		public string WebPropertyId { get; set; }
	}
	
	public class EntityUserLinkPermissions
	{
		
		/// <summary>
		/// Effective permissions represent all the permissions that a user has for this entity. These include any implied permissions (e.g., EDIT implies VIEW) or inherited permissions from the parent entity. Effective permissions are read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effective")]
		public string[] Effective { get; set; }
		
		/// <summary>
		/// Permissions that a user has been assigned at this very level. Does not include any implied or inherited permissions. Local permissions are modifiable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="local")]
		public string[] Local { get; set; }
	}
	
	/// <summary>
	/// JSON template for a user reference.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserRef
	{
		
		/// <summary>
		/// Email ID of this user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// User ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.ComponentModel.DefaultValue("analytics#userRef")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#userRef";
	}
	
	/// <summary>
	/// An entity user link collection provides a list of Analytics ACL links Each resource in this collection corresponds to a single link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EntityUserLinks
	{
		
		/// <summary>
		/// A list of entity user links.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public EntityUserLink[] Items { get; set; }
		
		/// <summary>
		/// The maximum number of entries the response can contain, regardless of the actual number of entries returned. Its value ranges from 1 to 1000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		/// <summary>
		/// Collection type.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#entityUserLinks")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#entityUserLinks";
		
		/// <summary>
		/// Next link for this account collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Previous link for this account collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousLink")]
		public string PreviousLink { get; set; }
		
		/// <summary>
		/// The starting index of the entries, which is 1 by default or otherwise specified by the start-index query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIndex")]
		public System.Nullable<System.Int32> StartIndex { get; set; }
		
		/// <summary>
		/// The total number of results for the query, regardless of the number of results in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	/// <summary>
	/// JSON template for Analytics experiment resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Experiment
	{
		
		/// <summary>
		/// Account ID to which this experiment belongs. This field is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Time the experiment was created. This field is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// Notes about this experiment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// If true, the end user will be able to edit the experiment via the Google Analytics user interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="editableInGaUi")]
		public System.Nullable<System.Boolean> EditableInGaUi { get; set; }
		
		/// <summary>
		/// The ending time of the experiment (the time the status changed from RUNNING to ENDED). This field is present only if the experiment has ended. This field is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Boolean specifying whether to distribute traffic evenly across all variations. If the value is False, content experiments follows the default behavior of adjusting traffic dynamically based on variation performance. Optional -- defaults to False. This field may not be changed for an experiment whose status is ENDED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="equalWeighting")]
		public System.Nullable<System.Boolean> EqualWeighting { get; set; }
		
		/// <summary>
		/// Experiment ID. Required for patch and update. Disallowed for create.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Internal ID for the web property to which this experiment belongs. This field is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalWebPropertyId")]
		public string InternalWebPropertyId { get; set; }
		
		/// <summary>
		/// Resource type for an Analytics experiment. This field is read-only.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#experiment")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#experiment";
		
		/// <summary>
		/// An integer number in [3, 90]. Specifies the minimum length of the experiment. Can be changed for a running experiment. This field may not be changed for an experiments whose status is ENDED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumExperimentLengthInDays")]
		public System.Nullable<System.Int32> MinimumExperimentLengthInDays { get; set; }
		
		/// <summary>
		/// Experiment name. This field may not be changed for an experiment whose status is ENDED. This field is required when creating an experiment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The metric that the experiment is optimizing. Valid values: "ga:goal(n)Completions", "ga:adsenseAdsClicks", "ga:adsenseAdsViewed", "ga:adsenseRevenue", "ga:bounces", "ga:pageviews", "ga:sessionDuration", "ga:transactions", "ga:transactionRevenue". This field is required if status is "RUNNING" and servingFramework is one of "REDIRECT" or "API".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectiveMetric")]
		public string ObjectiveMetric { get; set; }
		
		/// <summary>
		/// Whether the objectiveMetric should be minimized or maximized. Possible values: "MAXIMUM", "MINIMUM". Optional--defaults to "MAXIMUM". Cannot be specified without objectiveMetric. Cannot be modified when status is "RUNNING" or "ENDED".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optimizationType")]
		public string OptimizationType { get; set; }
		
		/// <summary>
		/// Parent link for an experiment. Points to the view (profile) to which this experiment belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentLink")]
		public ExperimentParentLink ParentLink { get; set; }
		
		/// <summary>
		/// View (Profile) ID to which this experiment belongs. This field is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileId")]
		public string ProfileId { get; set; }
		
		/// <summary>
		/// Why the experiment ended. Possible values: "STOPPED_BY_USER", "WINNER_FOUND", "EXPERIMENT_EXPIRED", "ENDED_WITH_NO_WINNER", "GOAL_OBJECTIVE_CHANGED". "ENDED_WITH_NO_WINNER" means that the experiment didn't expire but no winner was projected to be found. If the experiment status is changed via the API to ENDED this field is set to STOPPED_BY_USER. This field is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonExperimentEnded")]
		public string ReasonExperimentEnded { get; set; }
		
		/// <summary>
		/// Boolean specifying whether variations URLS are rewritten to match those of the original. This field may not be changed for an experiments whose status is ENDED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewriteVariationUrlsAsOriginal")]
		public System.Nullable<System.Boolean> RewriteVariationUrlsAsOriginal { get; set; }
		
		/// <summary>
		/// Link for this experiment. This field is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// The framework used to serve the experiment variations and evaluate the results. One of:  
		///- REDIRECT: Google Analytics redirects traffic to different variation pages, reports the chosen variation and evaluates the results.
		///- API: Google Analytics chooses and reports the variation to serve and evaluates the results; the caller is responsible for serving the selected variation.
		///- EXTERNAL: The variations will be served externally and the chosen variation reported to Google Analytics. The caller is responsible for serving the selected variation and evaluating the results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servingFramework")]
		public string ServingFramework { get; set; }
		
		/// <summary>
		/// The snippet of code to include on the control page(s). This field is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public string Snippet { get; set; }
		
		/// <summary>
		/// The starting time of the experiment (the time the status changed from READY_TO_RUN to RUNNING). This field is present only if the experiment has started. This field is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// Experiment status. Possible values: "DRAFT", "READY_TO_RUN", "RUNNING", "ENDED". Experiments can be created in the "DRAFT", "READY_TO_RUN" or "RUNNING" state. This field is required when creating an experiment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// A floating-point number in (0, 1]. Specifies the fraction of the traffic that participates in the experiment. Can be changed for a running experiment. This field may not be changed for an experiments whose status is ENDED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trafficCoverage")]
		public System.Nullable<System.Double> TrafficCoverage { get; set; }
		
		/// <summary>
		/// Time the experiment was last modified. This field is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
		
		/// <summary>
		/// Array of variations. The first variation in the array is the original. The number of variations may not change once an experiment is in the RUNNING state. At least two variations are required before status can be set to RUNNING.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variations")]
		public ExperimentVariations[] ExperimentVariations { get; set; }
		
		/// <summary>
		/// Web property ID to which this experiment belongs. The web property ID is of the form UA-XXXXX-YY. This field is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webPropertyId")]
		public string WebPropertyId { get; set; }
		
		/// <summary>
		/// A floating-point number in (0, 1). Specifies the necessary confidence level to choose a winner. This field may not be changed for an experiments whose status is ENDED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="winnerConfidenceLevel")]
		public System.Nullable<System.Double> WinnerConfidenceLevel { get; set; }
		
		/// <summary>
		/// Boolean specifying whether a winner has been found for this experiment. This field is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="winnerFound")]
		public System.Nullable<System.Boolean> WinnerFound { get; set; }
	}
	
	public class ExperimentParentLink
	{
		
		/// <summary>
		/// Link to the view (profile) to which this experiment belongs. This field is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// Value is "analytics#profile". This field is read-only.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#profile")]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; } = "analytics#profile";
	}
	
	public class ExperimentVariations
	{
		
		/// <summary>
		/// The name of the variation. This field is required when creating an experiment. This field may not be changed for an experiment whose status is ENDED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Status of the variation. Possible values: "ACTIVE", "INACTIVE". INACTIVE variations are not served. This field may not be changed for an experiment whose status is ENDED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The URL of the variation. This field may not be changed for an experiment whose status is RUNNING or ENDED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Weight that this variation should receive. Only present if the experiment is running. This field is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Double> Weight { get; set; }
		
		/// <summary>
		/// True if the experiment has ended and this variation performed (statistically) significantly better than the original. This field is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="won")]
		public System.Nullable<System.Boolean> Won { get; set; }
	}
	
	/// <summary>
	/// An experiment collection lists Analytics experiments to which the user has access. Each view (profile) can have a set of experiments. Each resource in the Experiment collection corresponds to a single Analytics experiment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Experiments
	{
		
		/// <summary>
		/// A list of experiments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Experiment[] Items { get; set; }
		
		/// <summary>
		/// The maximum number of resources the response can contain, regardless of the actual number of resources returned. Its value ranges from 1 to 1000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		/// <summary>
		/// Collection type.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#experiments")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#experiments";
		
		/// <summary>
		/// Link to next page for this experiment collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Link to previous page for this experiment collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousLink")]
		public string PreviousLink { get; set; }
		
		/// <summary>
		/// The starting index of the resources, which is 1 by default or otherwise specified by the start-index query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIndex")]
		public System.Nullable<System.Int32> StartIndex { get; set; }
		
		/// <summary>
		/// The total number of results for the query, regardless of the number of resources in the result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// Email ID of the authenticated user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// JSON template for an Analytics account filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Filter
	{
		
		/// <summary>
		/// Account ID to which this filter belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Details for the filter of the type ADVANCED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advancedDetails")]
		public FilterAdvancedDetails AdvancedDetails { get; set; }
		
		/// <summary>
		/// Time this filter was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// JSON template for an Analytics filter expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludeDetails")]
		public FilterExpression ExcludeDetails { get; set; }
		
		/// <summary>
		/// Filter ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// JSON template for an Analytics filter expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeDetails")]
		public FilterExpression IncludeDetails { get; set; }
		
		/// <summary>
		/// Resource type for Analytics filter.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#filter")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#filter";
		
		/// <summary>
		/// Details for the filter of the type LOWER.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lowercaseDetails")]
		public FilterLowercaseDetails LowercaseDetails { get; set; }
		
		/// <summary>
		/// Name of this filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Parent link for this filter. Points to the account to which this filter belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentLink")]
		public FilterParentLink ParentLink { get; set; }
		
		/// <summary>
		/// Details for the filter of the type SEARCH_AND_REPLACE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searchAndReplaceDetails")]
		public FilterSearchAndReplaceDetails SearchAndReplaceDetails { get; set; }
		
		/// <summary>
		/// Link for this filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// Type of this filter. Possible values are INCLUDE, EXCLUDE, LOWERCASE, UPPERCASE, SEARCH_AND_REPLACE and ADVANCED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Time this filter was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
		
		/// <summary>
		/// Details for the filter of the type UPPER.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uppercaseDetails")]
		public FilterUppercaseDetails UppercaseDetails { get; set; }
	}
	
	public class FilterAdvancedDetails
	{
		
		/// <summary>
		/// Indicates if the filter expressions are case sensitive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caseSensitive")]
		public System.Nullable<System.Boolean> CaseSensitive { get; set; }
		
		/// <summary>
		/// Expression to extract from field A.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extractA")]
		public string ExtractA { get; set; }
		
		/// <summary>
		/// Expression to extract from field B.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extractB")]
		public string ExtractB { get; set; }
		
		/// <summary>
		/// Field A.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldA")]
		public string FieldA { get; set; }
		
		/// <summary>
		/// The Index of the custom dimension. Required if field is a CUSTOM_DIMENSION.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldAIndex")]
		public System.Nullable<System.Int32> FieldAIndex { get; set; }
		
		/// <summary>
		/// Indicates if field A is required to match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldARequired")]
		public System.Nullable<System.Boolean> FieldARequired { get; set; }
		
		/// <summary>
		/// Field B.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldB")]
		public string FieldB { get; set; }
		
		/// <summary>
		/// The Index of the custom dimension. Required if field is a CUSTOM_DIMENSION.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldBIndex")]
		public System.Nullable<System.Int32> FieldBIndex { get; set; }
		
		/// <summary>
		/// Indicates if field B is required to match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldBRequired")]
		public System.Nullable<System.Boolean> FieldBRequired { get; set; }
		
		/// <summary>
		/// Expression used to construct the output value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputConstructor")]
		public string OutputConstructor { get; set; }
		
		/// <summary>
		/// Output field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputToField")]
		public string OutputToField { get; set; }
		
		/// <summary>
		/// The Index of the custom dimension. Required if field is a CUSTOM_DIMENSION.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputToFieldIndex")]
		public System.Nullable<System.Int32> OutputToFieldIndex { get; set; }
		
		/// <summary>
		/// Indicates if the existing value of the output field, if any, should be overridden by the output expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overrideOutputField")]
		public System.Nullable<System.Boolean> OverrideOutputField { get; set; }
	}
	
	/// <summary>
	/// JSON template for an Analytics filter expression.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FilterExpression
	{
		
		/// <summary>
		/// Determines if the filter is case sensitive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caseSensitive")]
		public System.Nullable<System.Boolean> CaseSensitive { get; set; }
		
		/// <summary>
		/// Filter expression value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expressionValue")]
		public string ExpressionValue { get; set; }
		
		/// <summary>
		/// Field to filter. Possible values:  
		///- Content and Traffic  
		///- PAGE_REQUEST_URI, 
		///- PAGE_HOSTNAME, 
		///- PAGE_TITLE, 
		///- REFERRAL, 
		///- COST_DATA_URI (Campaign target URL), 
		///- HIT_TYPE, 
		///- INTERNAL_SEARCH_TERM, 
		///- INTERNAL_SEARCH_TYPE, 
		///- SOURCE_PROPERTY_TRACKING_ID,   
		///- Campaign or AdGroup  
		///- CAMPAIGN_SOURCE, 
		///- CAMPAIGN_MEDIUM, 
		///- CAMPAIGN_NAME, 
		///- CAMPAIGN_AD_GROUP, 
		///- CAMPAIGN_TERM, 
		///- CAMPAIGN_CONTENT, 
		///- CAMPAIGN_CODE, 
		///- CAMPAIGN_REFERRAL_PATH,   
		///- E-Commerce  
		///- TRANSACTION_COUNTRY, 
		///- TRANSACTION_REGION, 
		///- TRANSACTION_CITY, 
		///- TRANSACTION_AFFILIATION (Store or order location), 
		///- ITEM_NAME, 
		///- ITEM_CODE, 
		///- ITEM_VARIATION, 
		///- TRANSACTION_ID, 
		///- TRANSACTION_CURRENCY_CODE, 
		///- PRODUCT_ACTION_TYPE,   
		///- Audience/Users  
		///- BROWSER, 
		///- BROWSER_VERSION, 
		///- BROWSER_SIZE, 
		///- PLATFORM, 
		///- PLATFORM_VERSION, 
		///- LANGUAGE, 
		///- SCREEN_RESOLUTION, 
		///- SCREEN_COLORS, 
		///- JAVA_ENABLED (Boolean Field), 
		///- FLASH_VERSION, 
		///- GEO_SPEED (Connection speed), 
		///- VISITOR_TYPE, 
		///- GEO_ORGANIZATION (ISP organization), 
		///- GEO_DOMAIN, 
		///- GEO_IP_ADDRESS, 
		///- GEO_IP_VERSION,   
		///- Location  
		///- GEO_COUNTRY, 
		///- GEO_REGION, 
		///- GEO_CITY,   
		///- Event  
		///- EVENT_CATEGORY, 
		///- EVENT_ACTION, 
		///- EVENT_LABEL,   
		///- Other  
		///- CUSTOM_FIELD_1, 
		///- CUSTOM_FIELD_2, 
		///- USER_DEFINED_VALUE,   
		///- Application  
		///- APP_ID, 
		///- APP_INSTALLER_ID, 
		///- APP_NAME, 
		///- APP_VERSION, 
		///- SCREEN, 
		///- IS_APP (Boolean Field), 
		///- IS_FATAL_EXCEPTION (Boolean Field), 
		///- EXCEPTION_DESCRIPTION,   
		///- Mobile device  
		///- IS_MOBILE (Boolean Field, Deprecated. Use DEVICE_CATEGORY=mobile), 
		///- IS_TABLET (Boolean Field, Deprecated. Use DEVICE_CATEGORY=tablet), 
		///- DEVICE_CATEGORY, 
		///- MOBILE_HAS_QWERTY_KEYBOARD (Boolean Field), 
		///- MOBILE_HAS_NFC_SUPPORT (Boolean Field), 
		///- MOBILE_HAS_CELLULAR_RADIO (Boolean Field), 
		///- MOBILE_HAS_WIFI_SUPPORT (Boolean Field), 
		///- MOBILE_BRAND_NAME, 
		///- MOBILE_MODEL_NAME, 
		///- MOBILE_MARKETING_NAME, 
		///- MOBILE_POINTING_METHOD,   
		///- Social  
		///- SOCIAL_NETWORK, 
		///- SOCIAL_ACTION, 
		///- SOCIAL_ACTION_TARGET,   
		///- Custom dimension  
		///- CUSTOM_DIMENSION (See accompanying field index),
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		/// <summary>
		/// The Index of the custom dimension. Set only if the field is a is CUSTOM_DIMENSION.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldIndex")]
		public System.Nullable<System.Int32> FieldIndex { get; set; }
		
		/// <summary>
		/// Kind value for filter expression
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#filterExpression")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#filterExpression";
		
		/// <summary>
		/// Match type for this filter. Possible values are BEGINS_WITH, EQUAL, ENDS_WITH, CONTAINS, or MATCHES. GEO_DOMAIN, GEO_IP_ADDRESS, PAGE_REQUEST_URI, or PAGE_HOSTNAME filters can use any match type; all other filters must use MATCHES.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchType")]
		public string MatchType { get; set; }
	}
	
	public class FilterLowercaseDetails
	{
		
		/// <summary>
		/// Field to use in the filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		/// <summary>
		/// The Index of the custom dimension. Required if field is a CUSTOM_DIMENSION.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldIndex")]
		public System.Nullable<System.Int32> FieldIndex { get; set; }
	}
	
	public class FilterParentLink
	{
		
		/// <summary>
		/// Link to the account to which this filter belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// Value is "analytics#account".
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#account")]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; } = "analytics#account";
	}
	
	public class FilterSearchAndReplaceDetails
	{
		
		/// <summary>
		/// Determines if the filter is case sensitive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caseSensitive")]
		public System.Nullable<System.Boolean> CaseSensitive { get; set; }
		
		/// <summary>
		/// Field to use in the filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		/// <summary>
		/// The Index of the custom dimension. Required if field is a CUSTOM_DIMENSION.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldIndex")]
		public System.Nullable<System.Int32> FieldIndex { get; set; }
		
		/// <summary>
		/// Term to replace the search term with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replaceString")]
		public string ReplaceString { get; set; }
		
		/// <summary>
		/// Term to search.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searchString")]
		public string SearchString { get; set; }
	}
	
	public class FilterUppercaseDetails
	{
		
		/// <summary>
		/// Field to use in the filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		/// <summary>
		/// The Index of the custom dimension. Required if field is a CUSTOM_DIMENSION.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldIndex")]
		public System.Nullable<System.Int32> FieldIndex { get; set; }
	}
	
	/// <summary>
	/// JSON template for a profile filter link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FilterRef
	{
		
		/// <summary>
		/// Account ID to which this filter belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Link for this filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// Filter ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Kind value for filter reference.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#filterRef")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#filterRef";
		
		/// <summary>
		/// Name of this filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A filter collection lists filters created by users in an Analytics account. Each resource in the collection corresponds to a filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Filters
	{
		
		/// <summary>
		/// A list of filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Filter[] Items { get; set; }
		
		/// <summary>
		/// The maximum number of resources the response can contain, regardless of the actual number of resources returned. Its value ranges from 1 to 1,000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		/// <summary>
		/// Collection type.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#filters")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#filters";
		
		/// <summary>
		/// Link to next page for this filter collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Link to previous page for this filter collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousLink")]
		public string PreviousLink { get; set; }
		
		/// <summary>
		/// The starting index of the resources, which is 1 by default or otherwise specified by the start-index query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIndex")]
		public System.Nullable<System.Int32> StartIndex { get; set; }
		
		/// <summary>
		/// The total number of results for the query, regardless of the number of results in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// Email ID of the authenticated user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Analytics data for a given view (profile).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GaData
	{
		
		/// <summary>
		/// Column headers that list dimension names followed by the metric names. The order of dimensions and metrics is same as specified in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnHeaders")]
		public GaDataColumnHeaders[] GaDataColumnHeaders { get; set; }
		
		/// <summary>
		/// Determines if Analytics data contains samples.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containsSampledData")]
		public System.Nullable<System.Boolean> ContainsSampledData { get; set; }
		
		/// <summary>
		/// The last refreshed time in seconds for Analytics data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataLastRefreshed")]
		public string DataLastRefreshed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataTable")]
		public GaDataDataTable DataTable { get; set; }
		
		/// <summary>
		/// Unique ID for this data response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The maximum number of rows the response can contain, regardless of the actual number of rows returned. Its value ranges from 1 to 10,000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#gaData")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#gaData";
		
		/// <summary>
		/// Link to next page for this Analytics data query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Link to previous page for this Analytics data query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousLink")]
		public string PreviousLink { get; set; }
		
		/// <summary>
		/// Information for the view (profile), for which the Analytics data was requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileInfo")]
		public GaDataProfileInfo ProfileInfo { get; set; }
		
		/// <summary>
		/// Analytics data request query parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public GaDataQuery Query { get; set; }
		
		/// <summary>
		/// Analytics data rows, where each row contains a list of dimension values followed by the metric values. The order of dimensions and metrics is same as specified in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public string[] Rows { get; set; }
		
		/// <summary>
		/// The number of samples used to calculate the result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sampleSize")]
		public string SampleSize { get; set; }
		
		/// <summary>
		/// Total size of the sample space from which the samples were selected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sampleSpace")]
		public string SampleSpace { get; set; }
		
		/// <summary>
		/// Link to this page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// The total number of rows for the query, regardless of the number of rows in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// Total values for the requested metrics over all the results, not just the results returned in this response. The order of the metric totals is same as the metric order specified in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalsForAllResults")]
		public System.Collections.Generic.Dictionary<string, string> TotalsForAllResults { get; set; }
	}
	
	public class GaDataColumnHeaders
	{
		
		/// <summary>
		/// Column Type. Either DIMENSION or METRIC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnType")]
		public string ColumnType { get; set; }
		
		/// <summary>
		/// Data type. Dimension column headers have only STRING as the data type. Metric column headers have data types for metric values such as INTEGER, DOUBLE, CURRENCY etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public string DataType { get; set; }
		
		/// <summary>
		/// Column name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class GaDataDataTable
	{
		
		[System.Runtime.Serialization.DataMember(Name="cols")]
		public GaDataDataTableCols[] GaDataDataTableCols { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public GaDataDataTableRows[] GaDataDataTableRows { get; set; }
	}
	
	public class GaDataDataTableCols
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class GaDataDataTableRows
	{
		
		[System.Runtime.Serialization.DataMember(Name="c")]
		public GaDataDataTableRowsC[] GaDataDataTableRowsC { get; set; }
	}
	
	public class GaDataDataTableRowsC
	{
		
		[System.Runtime.Serialization.DataMember(Name="v")]
		public string V { get; set; }
	}
	
	public class GaDataProfileInfo
	{
		
		/// <summary>
		/// Account ID to which this view (profile) belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Internal ID for the web property to which this view (profile) belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalWebPropertyId")]
		public string InternalWebPropertyId { get; set; }
		
		/// <summary>
		/// View (Profile) ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileId")]
		public string ProfileId { get; set; }
		
		/// <summary>
		/// View (Profile) name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileName")]
		public string ProfileName { get; set; }
		
		/// <summary>
		/// Table ID for view (profile).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableId")]
		public string TableId { get; set; }
		
		/// <summary>
		/// Web Property ID to which this view (profile) belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webPropertyId")]
		public string WebPropertyId { get; set; }
	}
	
	public class GaDataQuery
	{
		
		/// <summary>
		/// List of analytics dimensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public string Dimensions { get; set; }
		
		/// <summary>
		/// End date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end-date")]
		public string End_date { get; set; }
		
		/// <summary>
		/// Comma-separated list of dimension or metric filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public string Filters { get; set; }
		
		/// <summary>
		/// Unique table ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public string Ids { get; set; }
		
		/// <summary>
		/// Maximum results per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max-results")]
		public System.Nullable<System.Int32> Max_results { get; set; }
		
		/// <summary>
		/// List of analytics metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public string[] Metrics { get; set; }
		
		/// <summary>
		/// Desired sampling level
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="samplingLevel")]
		public string SamplingLevel { get; set; }
		
		/// <summary>
		/// Analytics advanced segment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segment")]
		public string Segment { get; set; }
		
		/// <summary>
		/// List of dimensions or metrics based on which Analytics data is sorted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort")]
		public string[] Sort { get; set; }
		
		/// <summary>
		/// Start date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start-date")]
		public string Start_date { get; set; }
		
		/// <summary>
		/// Start index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start-index")]
		public System.Nullable<System.Int32> Start_index { get; set; }
	}
	
	/// <summary>
	/// JSON template for Analytics goal resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Goal
	{
		
		/// <summary>
		/// Account ID to which this goal belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Determines whether this goal is active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Time this goal was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// Details for the goal of the type EVENT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventDetails")]
		public GoalEventDetails EventDetails { get; set; }
		
		/// <summary>
		/// Goal ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Internal ID for the web property to which this goal belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalWebPropertyId")]
		public string InternalWebPropertyId { get; set; }
		
		/// <summary>
		/// Resource type for an Analytics goal.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#goal")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#goal";
		
		/// <summary>
		/// Goal name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Parent link for a goal. Points to the view (profile) to which this goal belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentLink")]
		public GoalParentLink ParentLink { get; set; }
		
		/// <summary>
		/// View (Profile) ID to which this goal belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileId")]
		public string ProfileId { get; set; }
		
		/// <summary>
		/// Link for this goal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// Goal type. Possible values are URL_DESTINATION, VISIT_TIME_ON_SITE, VISIT_NUM_PAGES, AND EVENT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Time this goal was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
		
		/// <summary>
		/// Details for the goal of the type URL_DESTINATION.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlDestinationDetails")]
		public GoalUrlDestinationDetails UrlDestinationDetails { get; set; }
		
		/// <summary>
		/// Goal value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Single> Value { get; set; }
		
		/// <summary>
		/// Details for the goal of the type VISIT_NUM_PAGES.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visitNumPagesDetails")]
		public GoalVisitNumPagesDetails VisitNumPagesDetails { get; set; }
		
		/// <summary>
		/// Details for the goal of the type VISIT_TIME_ON_SITE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visitTimeOnSiteDetails")]
		public GoalVisitTimeOnSiteDetails VisitTimeOnSiteDetails { get; set; }
		
		/// <summary>
		/// Web property ID to which this goal belongs. The web property ID is of the form UA-XXXXX-YY.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webPropertyId")]
		public string WebPropertyId { get; set; }
	}
	
	public class GoalEventDetails
	{
		
		/// <summary>
		/// List of event conditions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventConditions")]
		public GoalEventDetailsEventConditions[] GoalEventDetailsEventConditions { get; set; }
		
		/// <summary>
		/// Determines if the event value should be used as the value for this goal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useEventValue")]
		public System.Nullable<System.Boolean> UseEventValue { get; set; }
	}
	
	public class GoalEventDetailsEventConditions
	{
		
		/// <summary>
		/// Type of comparison. Possible values are LESS_THAN, GREATER_THAN or EQUAL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comparisonType")]
		public string ComparisonType { get; set; }
		
		/// <summary>
		/// Value used for this comparison.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comparisonValue")]
		public string ComparisonValue { get; set; }
		
		/// <summary>
		/// Expression used for this match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
		
		/// <summary>
		/// Type of the match to be performed. Possible values are REGEXP, BEGINS_WITH, or EXACT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchType")]
		public string MatchType { get; set; }
		
		/// <summary>
		/// Type of this event condition. Possible values are CATEGORY, ACTION, LABEL, or VALUE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class GoalParentLink
	{
		
		/// <summary>
		/// Link to the view (profile) to which this goal belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// Value is "analytics#profile".
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#profile")]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; } = "analytics#profile";
	}
	
	public class GoalUrlDestinationDetails
	{
		
		/// <summary>
		/// Determines if the goal URL must exactly match the capitalization of visited URLs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caseSensitive")]
		public System.Nullable<System.Boolean> CaseSensitive { get; set; }
		
		/// <summary>
		/// Determines if the first step in this goal is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstStepRequired")]
		public System.Nullable<System.Boolean> FirstStepRequired { get; set; }
		
		/// <summary>
		/// Match type for the goal URL. Possible values are HEAD, EXACT, or REGEX.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchType")]
		public string MatchType { get; set; }
		
		/// <summary>
		/// List of steps configured for this goal funnel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="steps")]
		public GoalUrlDestinationDetailsSteps[] GoalUrlDestinationDetailsSteps { get; set; }
		
		/// <summary>
		/// URL for this goal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class GoalUrlDestinationDetailsSteps
	{
		
		/// <summary>
		/// Step name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Step number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int32> Number { get; set; }
		
		/// <summary>
		/// URL for this step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class GoalVisitNumPagesDetails
	{
		
		/// <summary>
		/// Type of comparison. Possible values are LESS_THAN, GREATER_THAN, or EQUAL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comparisonType")]
		public string ComparisonType { get; set; }
		
		/// <summary>
		/// Value used for this comparison.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comparisonValue")]
		public string ComparisonValue { get; set; }
	}
	
	public class GoalVisitTimeOnSiteDetails
	{
		
		/// <summary>
		/// Type of comparison. Possible values are LESS_THAN or GREATER_THAN.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comparisonType")]
		public string ComparisonType { get; set; }
		
		/// <summary>
		/// Value used for this comparison.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comparisonValue")]
		public string ComparisonValue { get; set; }
	}
	
	/// <summary>
	/// A goal collection lists Analytics goals to which the user has access. Each view (profile) can have a set of goals. Each resource in the Goal collection corresponds to a single Analytics goal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Goals
	{
		
		/// <summary>
		/// A list of goals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Goal[] Items { get; set; }
		
		/// <summary>
		/// The maximum number of resources the response can contain, regardless of the actual number of resources returned. Its value ranges from 1 to 1000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		/// <summary>
		/// Collection type.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#goals")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#goals";
		
		/// <summary>
		/// Link to next page for this goal collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Link to previous page for this goal collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousLink")]
		public string PreviousLink { get; set; }
		
		/// <summary>
		/// The starting index of the resources, which is 1 by default or otherwise specified by the start-index query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIndex")]
		public System.Nullable<System.Int32> StartIndex { get; set; }
		
		/// <summary>
		/// The total number of results for the query, regardless of the number of resources in the result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// Email ID of the authenticated user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// JSON template for a hash Client Id request resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HashClientIdRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		[System.ComponentModel.DefaultValue("analytics#hashClientIdRequest")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#hashClientIdRequest";
		
		[System.Runtime.Serialization.DataMember(Name="webPropertyId")]
		public string WebPropertyId { get; set; }
	}
	
	/// <summary>
	/// JSON template for a hash Client Id response resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HashClientIdResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hashedClientId")]
		public string HashedClientId { get; set; }
		
		[System.ComponentModel.DefaultValue("analytics#hashClientIdResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#hashClientIdResponse";
		
		[System.Runtime.Serialization.DataMember(Name="webPropertyId")]
		public string WebPropertyId { get; set; }
	}
	
	/// <summary>
	/// JSON template for an Analytics Remarketing Include Conditions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IncludeConditions
	{
		
		/// <summary>
		/// The look-back window lets you specify a time frame for evaluating the behavior that qualifies users for your audience. For example, if your filters include users from Central Asia, and Transactions Greater than 2, and you set the look-back window to 14 days, then any user from Central Asia whose cumulative transactions exceed 2 during the last 14 days is added to the audience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="daysToLookBack")]
		public System.Nullable<System.Int32> DaysToLookBack { get; set; }
		
		/// <summary>
		/// Boolean indicating whether this segment is a smart list. https://support.google.com/analytics/answer/4628577
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSmartList")]
		public System.Nullable<System.Boolean> IsSmartList { get; set; }
		
		/// <summary>
		/// Resource type for include conditions.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#includeConditions")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#includeConditions";
		
		/// <summary>
		/// Number of days (in the range 1 to 540) a user remains in the audience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membershipDurationDays")]
		public System.Nullable<System.Int32> MembershipDurationDays { get; set; }
		
		/// <summary>
		/// The segment condition that will cause a user to be added to an audience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segment")]
		public string Segment { get; set; }
	}
	
	/// <summary>
	/// JSON template for an Analytics Remarketing Audience Foreign Link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinkedForeignAccount
	{
		
		/// <summary>
		/// Account ID to which this linked foreign account belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Boolean indicating whether this is eligible for search.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eligibleForSearch")]
		public System.Nullable<System.Boolean> EligibleForSearch { get; set; }
		
		/// <summary>
		/// Entity ad account link ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Internal ID for the web property to which this linked foreign account belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalWebPropertyId")]
		public string InternalWebPropertyId { get; set; }
		
		/// <summary>
		/// Resource type for linked foreign account.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#linkedForeignAccount")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#linkedForeignAccount";
		
		/// <summary>
		/// The foreign account ID. For example the an Google Ads `linkedAccountId` has the following format XXX-XXX-XXXX.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkedAccountId")]
		public string LinkedAccountId { get; set; }
		
		/// <summary>
		/// Remarketing audience ID to which this linked foreign account belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remarketingAudienceId")]
		public string RemarketingAudienceId { get; set; }
		
		/// <summary>
		/// The status of this foreign account link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The type of the foreign account. For example, `ADWORDS_LINKS`, `DBM_LINKS`, `MCC_LINKS` or `OPTIMIZE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Web property ID of the form UA-XXXXX-YY to which this linked foreign account belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webPropertyId")]
		public string WebPropertyId { get; set; }
	}
	
	/// <summary>
	/// Multi-Channel Funnels data for a given view (profile).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class McfData
	{
		
		/// <summary>
		/// Column headers that list dimension names followed by the metric names. The order of dimensions and metrics is same as specified in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnHeaders")]
		public McfDataColumnHeaders[] McfDataColumnHeaders { get; set; }
		
		/// <summary>
		/// Determines if the Analytics data contains sampled data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containsSampledData")]
		public System.Nullable<System.Boolean> ContainsSampledData { get; set; }
		
		/// <summary>
		/// Unique ID for this data response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The maximum number of rows the response can contain, regardless of the actual number of rows returned. Its value ranges from 1 to 10,000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#mcfData")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#mcfData";
		
		/// <summary>
		/// Link to next page for this Analytics data query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Link to previous page for this Analytics data query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousLink")]
		public string PreviousLink { get; set; }
		
		/// <summary>
		/// Information for the view (profile), for which the Analytics data was requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileInfo")]
		public McfDataProfileInfo ProfileInfo { get; set; }
		
		/// <summary>
		/// Analytics data request query parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public McfDataQuery Query { get; set; }
		
		/// <summary>
		/// Analytics data rows, where each row contains a list of dimension values followed by the metric values. The order of dimensions and metrics is same as specified in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public string[] Rows { get; set; }
		
		/// <summary>
		/// The number of samples used to calculate the result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sampleSize")]
		public string SampleSize { get; set; }
		
		/// <summary>
		/// Total size of the sample space from which the samples were selected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sampleSpace")]
		public string SampleSpace { get; set; }
		
		/// <summary>
		/// Link to this page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// The total number of rows for the query, regardless of the number of rows in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// Total values for the requested metrics over all the results, not just the results returned in this response. The order of the metric totals is same as the metric order specified in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalsForAllResults")]
		public System.Collections.Generic.Dictionary<string, string> TotalsForAllResults { get; set; }
	}
	
	public class McfDataColumnHeaders
	{
		
		/// <summary>
		/// Column Type. Either DIMENSION or METRIC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnType")]
		public string ColumnType { get; set; }
		
		/// <summary>
		/// Data type. Dimension and metric values data types such as INTEGER, DOUBLE, CURRENCY, MCF_SEQUENCE etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public string DataType { get; set; }
		
		/// <summary>
		/// Column name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class McfDataProfileInfo
	{
		
		/// <summary>
		/// Account ID to which this view (profile) belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Internal ID for the web property to which this view (profile) belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalWebPropertyId")]
		public string InternalWebPropertyId { get; set; }
		
		/// <summary>
		/// View (Profile) ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileId")]
		public string ProfileId { get; set; }
		
		/// <summary>
		/// View (Profile) name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileName")]
		public string ProfileName { get; set; }
		
		/// <summary>
		/// Table ID for view (profile).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableId")]
		public string TableId { get; set; }
		
		/// <summary>
		/// Web Property ID to which this view (profile) belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webPropertyId")]
		public string WebPropertyId { get; set; }
	}
	
	public class McfDataQuery
	{
		
		/// <summary>
		/// List of analytics dimensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public string Dimensions { get; set; }
		
		/// <summary>
		/// End date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end-date")]
		public string End_date { get; set; }
		
		/// <summary>
		/// Comma-separated list of dimension or metric filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public string Filters { get; set; }
		
		/// <summary>
		/// Unique table ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public string Ids { get; set; }
		
		/// <summary>
		/// Maximum results per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max-results")]
		public System.Nullable<System.Int32> Max_results { get; set; }
		
		/// <summary>
		/// List of analytics metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public string[] Metrics { get; set; }
		
		/// <summary>
		/// Desired sampling level
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="samplingLevel")]
		public string SamplingLevel { get; set; }
		
		/// <summary>
		/// Analytics advanced segment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segment")]
		public string Segment { get; set; }
		
		/// <summary>
		/// List of dimensions or metrics based on which Analytics data is sorted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort")]
		public string[] Sort { get; set; }
		
		/// <summary>
		/// Start date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start-date")]
		public string Start_date { get; set; }
		
		/// <summary>
		/// Start index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start-index")]
		public System.Nullable<System.Int32> Start_index { get; set; }
	}
	
	/// <summary>
	/// JSON template for an Analytics profile filter link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProfileFilterLink
	{
		
		/// <summary>
		/// JSON template for a profile filter link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterRef")]
		public FilterRef FilterRef { get; set; }
		
		/// <summary>
		/// Profile filter link ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource type for Analytics filter.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#profileFilterLink")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#profileFilterLink";
		
		/// <summary>
		/// JSON template for a linked view (profile).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileRef")]
		public ProfileRef ProfileRef { get; set; }
		
		/// <summary>
		/// The rank of this profile filter link relative to the other filters linked to the same profile.
		///For readonly (i.e., list and get) operations, the rank always starts at 1.
		///For write (i.e., create, update, or delete) operations, you may specify a value between 0 and 255 inclusively, [0, 255]. In order to insert a link at the end of the list, either don't specify a rank or set a rank to a number greater than the largest rank in the list. In order to insert a link to the beginning of the list specify a rank that is less than or equal to 1. The new link will move all existing filters with the same or lower rank down the list. After the link is inserted/updated/deleted all profile filter links will be renumbered starting at 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rank")]
		public System.Nullable<System.Int32> Rank { get; set; }
		
		/// <summary>
		/// Link for this profile filter link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
	}
	
	/// <summary>
	/// A profile filter link collection lists profile filter links between profiles and filters. Each resource in the collection corresponds to a profile filter link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProfileFilterLinks
	{
		
		/// <summary>
		/// A list of profile filter links.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ProfileFilterLink[] Items { get; set; }
		
		/// <summary>
		/// The maximum number of resources the response can contain, regardless of the actual number of resources returned. Its value ranges from 1 to 1,000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		/// <summary>
		/// Collection type.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#profileFilterLinks")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#profileFilterLinks";
		
		/// <summary>
		/// Link to next page for this profile filter link collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Link to previous page for this profile filter link collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousLink")]
		public string PreviousLink { get; set; }
		
		/// <summary>
		/// The starting index of the resources, which is 1 by default or otherwise specified by the start-index query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIndex")]
		public System.Nullable<System.Int32> StartIndex { get; set; }
		
		/// <summary>
		/// The total number of results for the query, regardless of the number of results in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// Email ID of the authenticated user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// A view (profile) collection lists Analytics views (profiles) to which the user has access. Each resource in the collection corresponds to a single Analytics view (profile).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Profiles
	{
		
		/// <summary>
		/// A list of views (profiles).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Profile[] Items { get; set; }
		
		/// <summary>
		/// The maximum number of resources the response can contain, regardless of the actual number of resources returned. Its value ranges from 1 to 1000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		/// <summary>
		/// Collection type.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#profiles")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#profiles";
		
		/// <summary>
		/// Link to next page for this view (profile) collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Link to previous page for this view (profile) collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousLink")]
		public string PreviousLink { get; set; }
		
		/// <summary>
		/// The starting index of the resources, which is 1 by default or otherwise specified by the start-index query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIndex")]
		public System.Nullable<System.Int32> StartIndex { get; set; }
		
		/// <summary>
		/// The total number of results for the query, regardless of the number of results in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// Email ID of the authenticated user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Real time data for a given view (profile).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RealtimeData
	{
		
		/// <summary>
		/// Column headers that list dimension names followed by the metric names. The order of dimensions and metrics is same as specified in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnHeaders")]
		public RealtimeDataColumnHeaders[] RealtimeDataColumnHeaders { get; set; }
		
		/// <summary>
		/// Unique ID for this data response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#realtimeData")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#realtimeData";
		
		/// <summary>
		/// Information for the view (profile), for which the real time data was requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileInfo")]
		public RealtimeDataProfileInfo ProfileInfo { get; set; }
		
		/// <summary>
		/// Real time data request query parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public RealtimeDataQuery Query { get; set; }
		
		/// <summary>
		/// Real time data rows, where each row contains a list of dimension values followed by the metric values. The order of dimensions and metrics is same as specified in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public string[] Rows { get; set; }
		
		/// <summary>
		/// Link to this page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// The total number of rows for the query, regardless of the number of rows in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// Total values for the requested metrics over all the results, not just the results returned in this response. The order of the metric totals is same as the metric order specified in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalsForAllResults")]
		public System.Collections.Generic.Dictionary<string, string> TotalsForAllResults { get; set; }
	}
	
	public class RealtimeDataColumnHeaders
	{
		
		/// <summary>
		/// Column Type. Either DIMENSION or METRIC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnType")]
		public string ColumnType { get; set; }
		
		/// <summary>
		/// Data type. Dimension column headers have only STRING as the data type. Metric column headers have data types for metric values such as INTEGER, DOUBLE, CURRENCY etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public string DataType { get; set; }
		
		/// <summary>
		/// Column name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class RealtimeDataProfileInfo
	{
		
		/// <summary>
		/// Account ID to which this view (profile) belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Internal ID for the web property to which this view (profile) belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalWebPropertyId")]
		public string InternalWebPropertyId { get; set; }
		
		/// <summary>
		/// View (Profile) ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileId")]
		public string ProfileId { get; set; }
		
		/// <summary>
		/// View (Profile) name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileName")]
		public string ProfileName { get; set; }
		
		/// <summary>
		/// Table ID for view (profile).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableId")]
		public string TableId { get; set; }
		
		/// <summary>
		/// Web Property ID to which this view (profile) belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webPropertyId")]
		public string WebPropertyId { get; set; }
	}
	
	public class RealtimeDataQuery
	{
		
		/// <summary>
		/// List of real time dimensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public string Dimensions { get; set; }
		
		/// <summary>
		/// Comma-separated list of dimension or metric filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public string Filters { get; set; }
		
		/// <summary>
		/// Unique table ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public string Ids { get; set; }
		
		/// <summary>
		/// Maximum results per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max-results")]
		public System.Nullable<System.Int32> Max_results { get; set; }
		
		/// <summary>
		/// List of real time metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public string[] Metrics { get; set; }
		
		/// <summary>
		/// List of dimensions or metrics based on which real time data is sorted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort")]
		public string[] Sort { get; set; }
	}
	
	/// <summary>
	/// JSON template for an Analytics remarketing audience.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemarketingAudience
	{
		
		/// <summary>
		/// Account ID to which this remarketing audience belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// The simple audience definition that will cause a user to be added to an audience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audienceDefinition")]
		public RemarketingAudienceAudienceDefinition AudienceDefinition { get; set; }
		
		/// <summary>
		/// The type of audience, either SIMPLE or STATE_BASED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audienceType")]
		public string AudienceType { get; set; }
		
		/// <summary>
		/// Time this remarketing audience was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// The description of this remarketing audience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Remarketing Audience ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Internal ID for the web property to which this remarketing audience belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalWebPropertyId")]
		public string InternalWebPropertyId { get; set; }
		
		/// <summary>
		/// Collection type.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#remarketingAudience")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#remarketingAudience";
		
		/// <summary>
		/// The linked ad accounts associated with this remarketing audience. A remarketing audience can have only one linkedAdAccount currently.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkedAdAccounts")]
		public LinkedForeignAccount[] LinkedAdAccounts { get; set; }
		
		/// <summary>
		/// The views (profiles) that this remarketing audience is linked to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkedViews")]
		public string[] LinkedViews { get; set; }
		
		/// <summary>
		/// The name of this remarketing audience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A state based audience definition that will cause a user to be added or removed from an audience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateBasedAudienceDefinition")]
		public RemarketingAudienceStateBasedAudienceDefinition StateBasedAudienceDefinition { get; set; }
		
		/// <summary>
		/// Time this remarketing audience was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
		
		/// <summary>
		/// Web property ID of the form UA-XXXXX-YY to which this remarketing audience belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webPropertyId")]
		public string WebPropertyId { get; set; }
	}
	
	public class RemarketingAudienceAudienceDefinition
	{
		
		/// <summary>
		/// JSON template for an Analytics Remarketing Include Conditions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeConditions")]
		public IncludeConditions IncludeConditions { get; set; }
	}
	
	public class RemarketingAudienceStateBasedAudienceDefinition
	{
		
		/// <summary>
		/// Defines the conditions to exclude users from the audience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludeConditions")]
		public RemarketingAudienceStateBasedAudienceDefinitionExcludeConditions ExcludeConditions { get; set; }
		
		/// <summary>
		/// JSON template for an Analytics Remarketing Include Conditions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeConditions")]
		public IncludeConditions IncludeConditions { get; set; }
	}
	
	public class RemarketingAudienceStateBasedAudienceDefinitionExcludeConditions
	{
		
		/// <summary>
		/// Whether to make the exclusion TEMPORARY or PERMANENT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exclusionDuration")]
		public string ExclusionDuration { get; set; }
		
		/// <summary>
		/// The segment condition that will cause a user to be removed from an audience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segment")]
		public string Segment { get; set; }
	}
	
	/// <summary>
	/// A remarketing audience collection lists Analytics remarketing audiences to which the user has access. Each resource in the collection corresponds to a single Analytics remarketing audience.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemarketingAudiences
	{
		
		/// <summary>
		/// A list of remarketing audiences.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public RemarketingAudience[] Items { get; set; }
		
		/// <summary>
		/// The maximum number of resources the response can contain, regardless of the actual number of resources returned. Its value ranges from 1 to 1000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		/// <summary>
		/// Collection type.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#remarketingAudiences")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#remarketingAudiences";
		
		/// <summary>
		/// Link to next page for this remarketing audience collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Link to previous page for this view (profile) collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousLink")]
		public string PreviousLink { get; set; }
		
		/// <summary>
		/// The starting index of the resources, which is 1 by default or otherwise specified by the start-index query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIndex")]
		public System.Nullable<System.Int32> StartIndex { get; set; }
		
		/// <summary>
		/// The total number of results for the query, regardless of the number of results in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// Email ID of the authenticated user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// JSON template for an Analytics segment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Segment
	{
		
		/// <summary>
		/// Time the segment was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// Segment definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="definition")]
		public string Definition { get; set; }
		
		/// <summary>
		/// Segment ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource type for Analytics segment.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#segment")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#segment";
		
		/// <summary>
		/// Segment name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Segment ID. Can be used with the 'segment' parameter in Core Reporting API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segmentId")]
		public string SegmentId { get; set; }
		
		/// <summary>
		/// Link for this segment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// Type for a segment. Possible values are "BUILT_IN" or "CUSTOM".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Time the segment was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
	}
	
	/// <summary>
	/// An segment collection lists Analytics segments that the user has access to. Each resource in the collection corresponds to a single Analytics segment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Segments
	{
		
		/// <summary>
		/// A list of segments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Segment[] Items { get; set; }
		
		/// <summary>
		/// The maximum number of resources the response can contain, regardless of the actual number of resources returned. Its value ranges from 1 to 1000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		/// <summary>
		/// Collection type for segments.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#segments")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#segments";
		
		/// <summary>
		/// Link to next page for this segment collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Link to previous page for this segment collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousLink")]
		public string PreviousLink { get; set; }
		
		/// <summary>
		/// The starting index of the resources, which is 1 by default or otherwise specified by the start-index query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIndex")]
		public System.Nullable<System.Int32> StartIndex { get; set; }
		
		/// <summary>
		/// The total number of results for the query, regardless of the number of results in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// Email ID of the authenticated user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// JSON template for Analytics unsampled report resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnsampledReport
	{
		
		/// <summary>
		/// Account ID to which this unsampled report belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Download details for a file stored in Google Cloud Storage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudStorageDownloadDetails")]
		public UnsampledReportCloudStorageDownloadDetails CloudStorageDownloadDetails { get; set; }
		
		/// <summary>
		/// Time this unsampled report was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// The dimensions for the unsampled report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public string Dimensions { get; set; }
		
		/// <summary>
		/// The type of download you need to use for the report data file. Possible values include `GOOGLE_DRIVE` and `GOOGLE_CLOUD_STORAGE`. If the value is `GOOGLE_DRIVE`, see the `driveDownloadDetails` field. If the value is `GOOGLE_CLOUD_STORAGE`, see the `cloudStorageDownloadDetails` field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadType")]
		public string DownloadType { get; set; }
		
		/// <summary>
		/// Download details for a file stored in Google Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driveDownloadDetails")]
		public UnsampledReportDriveDownloadDetails DriveDownloadDetails { get; set; }
		
		/// <summary>
		/// The end date for the unsampled report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end-date")]
		public string End_date { get; set; }
		
		/// <summary>
		/// The filters for the unsampled report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public string Filters { get; set; }
		
		/// <summary>
		/// Unsampled report ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource type for an Analytics unsampled report.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#unsampledReport")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#unsampledReport";
		
		/// <summary>
		/// The metrics for the unsampled report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public string Metrics { get; set; }
		
		/// <summary>
		/// View (Profile) ID to which this unsampled report belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileId")]
		public string ProfileId { get; set; }
		
		/// <summary>
		/// The segment for the unsampled report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segment")]
		public string Segment { get; set; }
		
		/// <summary>
		/// Link for this unsampled report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// The start date for the unsampled report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start-date")]
		public string Start_date { get; set; }
		
		/// <summary>
		/// Status of this unsampled report. Possible values are PENDING, COMPLETED, or FAILED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Title of the unsampled report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Time this unsampled report was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
		
		/// <summary>
		/// Web property ID to which this unsampled report belongs. The web property ID is of the form UA-XXXXX-YY.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webPropertyId")]
		public string WebPropertyId { get; set; }
	}
	
	public class UnsampledReportCloudStorageDownloadDetails
	{
		
		/// <summary>
		/// Id of the bucket the file object is stored in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucketId")]
		public string BucketId { get; set; }
		
		/// <summary>
		/// Id of the file object containing the report data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
	}
	
	public class UnsampledReportDriveDownloadDetails
	{
		
		/// <summary>
		/// Id of the document/file containing the report data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentId")]
		public string DocumentId { get; set; }
	}
	
	/// <summary>
	/// An unsampled report collection lists Analytics unsampled reports to which the user has access. Each view (profile) can have a set of unsampled reports. Each resource in the unsampled report collection corresponds to a single Analytics unsampled report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnsampledReports
	{
		
		/// <summary>
		/// A list of unsampled reports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public UnsampledReport[] Items { get; set; }
		
		/// <summary>
		/// The maximum number of resources the response can contain, regardless of the actual number of resources returned. Its value ranges from 1 to 1000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		/// <summary>
		/// Collection type.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#unsampledReports")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#unsampledReports";
		
		/// <summary>
		/// Link to next page for this unsampled report collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Link to previous page for this unsampled report collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousLink")]
		public string PreviousLink { get; set; }
		
		/// <summary>
		/// The starting index of the resources, which is 1 by default or otherwise specified by the start-index query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIndex")]
		public System.Nullable<System.Int32> StartIndex { get; set; }
		
		/// <summary>
		/// The total number of results for the query, regardless of the number of resources in the result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// Email ID of the authenticated user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Metadata returned for an upload operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Upload
	{
		
		/// <summary>
		/// Account Id to which this upload belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Custom data source Id to which this data import belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customDataSourceId")]
		public string CustomDataSourceId { get; set; }
		
		/// <summary>
		/// Data import errors collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public string[] Errors { get; set; }
		
		/// <summary>
		/// A unique ID for this upload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource type for Analytics upload.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#upload")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#upload";
		
		/// <summary>
		/// Upload status. Possible values: PENDING, COMPLETED, FAILED, DELETING, DELETED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Time this file is uploaded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploadTime")]
		public System.Nullable<System.DateTimeOffset> UploadTime { get; set; }
	}
	
	/// <summary>
	/// Upload collection lists Analytics uploads to which the user has access. Each custom data source can have a set of uploads. Each resource in the upload collection corresponds to a single Analytics data upload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Uploads
	{
		
		/// <summary>
		/// A list of uploads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Upload[] Items { get; set; }
		
		/// <summary>
		/// The maximum number of resources the response can contain, regardless of the actual number of resources returned. Its value ranges from 1 to 1000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		/// <summary>
		/// Collection type.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#uploads")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#uploads";
		
		/// <summary>
		/// Link to next page for this upload collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Link to previous page for this upload collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousLink")]
		public string PreviousLink { get; set; }
		
		/// <summary>
		/// The starting index of the resources, which is 1 by default or otherwise specified by the start-index query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIndex")]
		public System.Nullable<System.Int32> StartIndex { get; set; }
		
		/// <summary>
		/// The total number of results for the query, regardless of the number of resources in the result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	/// <summary>
	/// JSON template for a user deletion request resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserDeletionRequest
	{
		
		/// <summary>
		/// This marks the point in time for which all user data before should be deleted
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deletionRequestTime")]
		public System.Nullable<System.DateTimeOffset> DeletionRequestTime { get; set; }
		
		/// <summary>
		/// Firebase Project Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firebaseProjectId")]
		public string FirebaseProjectId { get; set; }
		
		/// <summary>
		/// User ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public UserDeletionRequestId Id { get; set; }
		
		/// <summary>
		/// Value is "analytics#userDeletionRequest".
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#userDeletionRequest")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#userDeletionRequest";
		
		/// <summary>
		/// Property ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="propertyId")]
		public string PropertyId { get; set; }
		
		/// <summary>
		/// Web property ID of the form UA-XXXXX-YY.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webPropertyId")]
		public string WebPropertyId { get; set; }
	}
	
	public class UserDeletionRequestId
	{
		
		/// <summary>
		/// Type of user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The User's id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	/// <summary>
	/// A web property collection lists Analytics web properties to which the user has access. Each resource in the collection corresponds to a single Analytics web property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Webproperties
	{
		
		/// <summary>
		/// A list of web properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Webproperty[] Items { get; set; }
		
		/// <summary>
		/// The maximum number of resources the response can contain, regardless of the actual number of resources returned. Its value ranges from 1 to 1000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		/// <summary>
		/// Collection type.
		/// </summary>
		[System.ComponentModel.DefaultValue("analytics#webproperties")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "analytics#webproperties";
		
		/// <summary>
		/// Link to next page for this web property collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Link to previous page for this web property collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousLink")]
		public string PreviousLink { get; set; }
		
		/// <summary>
		/// The starting index of the resources, which is 1 by default or otherwise specified by the start-index query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIndex")]
		public System.Nullable<System.Int32> StartIndex { get; set; }
		
		/// <summary>
		/// The total number of results for the query, regardless of the number of results in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// Email ID of the authenticated user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns Analytics data for a view (profile).
		/// Analytics_data_ga_get data/ga
		/// </summary>
		/// <param name="ids">Unique table ID for retrieving Analytics data. Table ID is of the form ga:XXXX, where XXXX is the Analytics view (profile) ID.</param>
		/// <param name="start_date">Start date for fetching Analytics data. Requests can specify a start date formatted as YYYY-MM-DD, or as a relative date (e.g., today, yesterday, or 7daysAgo). The default value is 7daysAgo.</param>
		/// <param name="end_date">End date for fetching Analytics data. Request can should specify an end date formatted as YYYY-MM-DD, or as a relative date (e.g., today, yesterday, or 7daysAgo). The default value is yesterday.</param>
		/// <param name="metrics">A comma-separated list of Analytics metrics. E.g., 'ga:sessions,ga:pageviews'. At least one metric must be specified.</param>
		/// <param name="dimensions">A comma-separated list of Analytics dimensions. E.g., 'ga:browser,ga:city'.</param>
		/// <param name="filters">A comma-separated list of dimension or metric filters to be applied to Analytics data.</param>
		/// <param name="include_empty_rows">The response will include empty rows if this parameter is set to true, the default is true</param>
		/// <param name="max_results">The maximum number of entries to include in this feed.</param>
		/// <param name="output">The selected format for the response. Default format is JSON.</param>
		/// <param name="samplingLevel">The desired sampling level.</param>
		/// <param name="segment">An Analytics segment to be applied to data.</param>
		/// <param name="sort">A comma-separated list of dimensions or metrics that determine the sort order for Analytics data.</param>
		/// <param name="start_index">An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.</param>
		/// <returns>Successful response</returns>
		public async Task<GaData> Analytics_data_ga_getAsync(string ids, string start_date, string end_date, string metrics, string dimensions, string filters, bool include_empty_rows, int max_results, Analytics_data_ga_getOutput output, Analytics_data_ga_getSamplingLevel samplingLevel, string segment, string sort, int start_index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data/ga?ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids))+"&start-date=" + (start_date==null? "" : System.Uri.EscapeDataString(start_date))+"&end-date=" + (end_date==null? "" : System.Uri.EscapeDataString(end_date))+"&metrics=" + (metrics==null? "" : System.Uri.EscapeDataString(metrics))+"&dimensions=" + (dimensions==null? "" : System.Uri.EscapeDataString(dimensions))+"&filters=" + (filters==null? "" : System.Uri.EscapeDataString(filters))+"&include-empty-rows="+include_empty_rows+"&max-results="+max_results+"&output=" + output+"&samplingLevel=" + samplingLevel+"&segment=" + (segment==null? "" : System.Uri.EscapeDataString(segment))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&start-index="+start_index;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GaData>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns Analytics Multi-Channel Funnels data for a view (profile).
		/// Analytics_data_mcf_get data/mcf
		/// </summary>
		/// <param name="ids">Unique table ID for retrieving Analytics data. Table ID is of the form ga:XXXX, where XXXX is the Analytics view (profile) ID.</param>
		/// <param name="start_date">Start date for fetching Analytics data. Requests can specify a start date formatted as YYYY-MM-DD, or as a relative date (e.g., today, yesterday, or 7daysAgo). The default value is 7daysAgo.</param>
		/// <param name="end_date">End date for fetching Analytics data. Requests can specify a start date formatted as YYYY-MM-DD, or as a relative date (e.g., today, yesterday, or 7daysAgo). The default value is 7daysAgo.</param>
		/// <param name="metrics">A comma-separated list of Multi-Channel Funnels metrics. E.g., 'mcf:totalConversions,mcf:totalConversionValue'. At least one metric must be specified.</param>
		/// <param name="dimensions">A comma-separated list of Multi-Channel Funnels dimensions. E.g., 'mcf:source,mcf:medium'.</param>
		/// <param name="filters">A comma-separated list of dimension or metric filters to be applied to the Analytics data.</param>
		/// <param name="max_results">The maximum number of entries to include in this feed.</param>
		/// <param name="samplingLevel">The desired sampling level.</param>
		/// <param name="sort">A comma-separated list of dimensions or metrics that determine the sort order for the Analytics data.</param>
		/// <param name="start_index">An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.</param>
		/// <returns>Successful response</returns>
		public async Task<McfData> Analytics_data_mcf_getAsync(string ids, string start_date, string end_date, string metrics, string dimensions, string filters, int max_results, Analytics_data_ga_getSamplingLevel samplingLevel, string sort, int start_index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data/mcf?ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids))+"&start-date=" + (start_date==null? "" : System.Uri.EscapeDataString(start_date))+"&end-date=" + (end_date==null? "" : System.Uri.EscapeDataString(end_date))+"&metrics=" + (metrics==null? "" : System.Uri.EscapeDataString(metrics))+"&dimensions=" + (dimensions==null? "" : System.Uri.EscapeDataString(dimensions))+"&filters=" + (filters==null? "" : System.Uri.EscapeDataString(filters))+"&max-results="+max_results+"&samplingLevel=" + samplingLevel+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&start-index="+start_index;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<McfData>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns real time data for a view (profile).
		/// Analytics_data_realtime_get data/realtime
		/// </summary>
		/// <param name="ids">Unique table ID for retrieving real time data. Table ID is of the form ga:XXXX, where XXXX is the Analytics view (profile) ID.</param>
		/// <param name="metrics">A comma-separated list of real time metrics. E.g., 'rt:activeUsers'. At least one metric must be specified.</param>
		/// <param name="dimensions">A comma-separated list of real time dimensions. E.g., 'rt:medium,rt:city'.</param>
		/// <param name="filters">A comma-separated list of dimension or metric filters to be applied to real time data.</param>
		/// <param name="max_results">The maximum number of entries to include in this feed.</param>
		/// <param name="sort">A comma-separated list of dimensions or metrics that determine the sort order for real time data.</param>
		/// <returns>Successful response</returns>
		public async Task<RealtimeData> Analytics_data_realtime_getAsync(string ids, string metrics, string dimensions, string filters, int max_results, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data/realtime?ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids))+"&metrics=" + (metrics==null? "" : System.Uri.EscapeDataString(metrics))+"&dimensions=" + (dimensions==null? "" : System.Uri.EscapeDataString(dimensions))+"&filters=" + (filters==null? "" : System.Uri.EscapeDataString(filters))+"&max-results="+max_results+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RealtimeData>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists account summaries (lightweight tree comprised of accounts/properties/profiles) to which the user has access.
		/// Analytics_management_accountSummaries_list management/accountSummaries
		/// </summary>
		/// <param name="max_results">The maximum number of account summaries to include in this response, where the largest acceptable value is 1000.</param>
		/// <param name="start_index">An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.</param>
		/// <returns>Successful response</returns>
		public async Task<AccountSummaries> Analytics_management_accountSummaries_listAsync(int max_results, int start_index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accountSummaries?max-results="+max_results+"&start-index="+start_index;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccountSummaries>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all accounts to which the user has access.
		/// Analytics_management_accounts_list management/accounts
		/// </summary>
		/// <param name="max_results">The maximum number of accounts to include in this response.</param>
		/// <param name="start_index">An index of the first account to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.</param>
		/// <returns>Successful response</returns>
		public async Task<Accounts> Analytics_management_accounts_listAsync(int max_results, int start_index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts?max-results="+max_results+"&start-index="+start_index;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Accounts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists account-user links for a given account.
		/// Analytics_management_accountUserLinks_list management/accounts/{accountId}/entityUserLinks
		/// </summary>
		/// <param name="accountId">Account ID to retrieve the user links for.</param>
		/// <param name="max_results">The maximum number of account-user links to include in this response.</param>
		/// <param name="start_index">An index of the first account-user link to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.</param>
		/// <returns>Successful response</returns>
		public async Task<EntityUserLinks> Analytics_management_accountUserLinks_listAsync(string accountId, int max_results, int start_index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/entityUserLinks&max-results="+max_results+"&start-index="+start_index;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EntityUserLinks>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a new user to the given account.
		/// Analytics_management_accountUserLinks_insert management/accounts/{accountId}/entityUserLinks
		/// </summary>
		/// <param name="accountId">Account ID to create the user link for.</param>
		/// <returns>Successful response</returns>
		public async Task<EntityUserLink> Analytics_management_accountUserLinks_insertAsync(string accountId, EntityUserLink requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/entityUserLinks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EntityUserLink>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a user from the given account.
		/// Analytics_management_accountUserLinks_delete management/accounts/{accountId}/entityUserLinks/{linkId}
		/// </summary>
		/// <param name="accountId">Account ID to delete the user link for.</param>
		/// <param name="linkId">Link ID to delete the user link for.</param>
		/// <returns>Successful response</returns>
		public async Task Analytics_management_accountUserLinks_deleteAsync(string accountId, string linkId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/entityUserLinks/"+ (linkId==null? "" : System.Uri.EscapeDataString(linkId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates permissions for an existing user on the given account.
		/// Analytics_management_accountUserLinks_update management/accounts/{accountId}/entityUserLinks/{linkId}
		/// </summary>
		/// <param name="accountId">Account ID to update the account-user link for.</param>
		/// <param name="linkId">Link ID to update the account-user link for.</param>
		/// <returns>Successful response</returns>
		public async Task<EntityUserLink> Analytics_management_accountUserLinks_updateAsync(string accountId, string linkId, EntityUserLink requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/entityUserLinks/"+ (linkId==null? "" : System.Uri.EscapeDataString(linkId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EntityUserLink>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all filters for an account
		/// Analytics_management_filters_list management/accounts/{accountId}/filters
		/// </summary>
		/// <param name="accountId">Account ID to retrieve filters for.</param>
		/// <param name="max_results">The maximum number of filters to include in this response.</param>
		/// <param name="start_index">An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.</param>
		/// <returns>Successful response</returns>
		public async Task<Filters> Analytics_management_filters_listAsync(string accountId, int max_results, int start_index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/filters&max-results="+max_results+"&start-index="+start_index;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Filters>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new filter.
		/// Analytics_management_filters_insert management/accounts/{accountId}/filters
		/// </summary>
		/// <param name="accountId">Account ID to create filter for.</param>
		/// <returns>Successful response</returns>
		public async Task<Filter> Analytics_management_filters_insertAsync(string accountId, Filter requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/filters";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Filter>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a filter.
		/// Analytics_management_filters_delete management/accounts/{accountId}/filters/{filterId}
		/// </summary>
		/// <param name="accountId">Account ID to delete the filter for.</param>
		/// <param name="filterId">ID of the filter to be deleted.</param>
		/// <returns>Successful response</returns>
		public async Task<Filter> Analytics_management_filters_deleteAsync(string accountId, string filterId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/filters/"+ (filterId==null? "" : System.Uri.EscapeDataString(filterId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Filter>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns filters to which the user has access.
		/// Analytics_management_filters_get management/accounts/{accountId}/filters/{filterId}
		/// </summary>
		/// <param name="accountId">Account ID to retrieve filters for.</param>
		/// <param name="filterId">Filter ID to retrieve filters for.</param>
		/// <returns>Successful response</returns>
		public async Task<Filter> Analytics_management_filters_getAsync(string accountId, string filterId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/filters/"+ (filterId==null? "" : System.Uri.EscapeDataString(filterId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Filter>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing filter. This method supports patch semantics.
		/// Analytics_management_filters_patch management/accounts/{accountId}/filters/{filterId}
		/// </summary>
		/// <param name="accountId">Account ID to which the filter belongs.</param>
		/// <param name="filterId">ID of the filter to be updated.</param>
		/// <returns>Successful response</returns>
		public async Task<Filter> Analytics_management_filters_patchAsync(string accountId, string filterId, Filter requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/filters/"+ (filterId==null? "" : System.Uri.EscapeDataString(filterId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Filter>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing filter.
		/// Analytics_management_filters_update management/accounts/{accountId}/filters/{filterId}
		/// </summary>
		/// <param name="accountId">Account ID to which the filter belongs.</param>
		/// <param name="filterId">ID of the filter to be updated.</param>
		/// <returns>Successful response</returns>
		public async Task<Filter> Analytics_management_filters_updateAsync(string accountId, string filterId, Filter requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/filters/"+ (filterId==null? "" : System.Uri.EscapeDataString(filterId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Filter>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists web properties to which the user has access.
		/// Analytics_management_webproperties_list management/accounts/{accountId}/webproperties
		/// </summary>
		/// <param name="accountId">Account ID to retrieve web properties for. Can either be a specific account ID or '~all', which refers to all the accounts that user has access to.</param>
		/// <param name="max_results">The maximum number of web properties to include in this response.</param>
		/// <param name="start_index">An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.</param>
		/// <returns>Successful response</returns>
		public async Task<Webproperties> Analytics_management_webproperties_listAsync(string accountId, int max_results, int start_index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties&max-results="+max_results+"&start-index="+start_index;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Webproperties>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new property if the account has fewer than 20 properties. Web properties are visible in the Google Analytics interface only if they have at least one profile.
		/// Analytics_management_webproperties_insert management/accounts/{accountId}/webproperties
		/// </summary>
		/// <param name="accountId">Account ID to create the web property for.</param>
		/// <returns>Successful response</returns>
		public async Task<Webproperty> Analytics_management_webproperties_insertAsync(string accountId, Webproperty requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Webproperty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a web property to which the user has access.
		/// Analytics_management_webproperties_get management/accounts/{accountId}/webproperties/{webPropertyId}
		/// </summary>
		/// <param name="accountId">Account ID to retrieve the web property for.</param>
		/// <param name="webPropertyId">ID to retrieve the web property for.</param>
		/// <returns>Successful response</returns>
		public async Task<Webproperty> Analytics_management_webproperties_getAsync(string accountId, string webPropertyId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Webproperty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing web property. This method supports patch semantics.
		/// Analytics_management_webproperties_patch management/accounts/{accountId}/webproperties/{webPropertyId}
		/// </summary>
		/// <param name="accountId">Account ID to which the web property belongs</param>
		/// <param name="webPropertyId">Web property ID</param>
		/// <returns>Successful response</returns>
		public async Task<Webproperty> Analytics_management_webproperties_patchAsync(string accountId, string webPropertyId, Webproperty requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Webproperty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing web property.
		/// Analytics_management_webproperties_update management/accounts/{accountId}/webproperties/{webPropertyId}
		/// </summary>
		/// <param name="accountId">Account ID to which the web property belongs</param>
		/// <param name="webPropertyId">Web property ID</param>
		/// <returns>Successful response</returns>
		public async Task<Webproperty> Analytics_management_webproperties_updateAsync(string accountId, string webPropertyId, Webproperty requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Webproperty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List custom data sources to which the user has access.
		/// Analytics_management_customDataSources_list management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources
		/// </summary>
		/// <param name="accountId">Account Id for the custom data sources to retrieve.</param>
		/// <param name="webPropertyId">Web property Id for the custom data sources to retrieve.</param>
		/// <param name="max_results">The maximum number of custom data sources to include in this response.</param>
		/// <param name="start_index">A 1-based index of the first custom data source to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomDataSources> Analytics_management_customDataSources_listAsync(string accountId, string webPropertyId, int max_results, int start_index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/customDataSources&max-results="+max_results+"&start-index="+start_index;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomDataSources>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete data associated with a previous upload.
		/// Analytics_management_uploads_deleteUploadData management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/deleteUploadData
		/// </summary>
		/// <param name="accountId">Account Id for the uploads to be deleted.</param>
		/// <param name="webPropertyId">Web property Id for the uploads to be deleted.</param>
		/// <param name="customDataSourceId">Custom data source Id for the uploads to be deleted.</param>
		/// <returns>Successful response</returns>
		public async Task Analytics_management_uploads_deleteUploadDataAsync(string accountId, string webPropertyId, string customDataSourceId, AnalyticsDataimportDeleteUploadDataRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/customDataSources/"+ (customDataSourceId==null? "" : System.Uri.EscapeDataString(customDataSourceId))+"/deleteUploadData";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List uploads to which the user has access.
		/// Analytics_management_uploads_list management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads
		/// </summary>
		/// <param name="accountId">Account Id for the uploads to retrieve.</param>
		/// <param name="webPropertyId">Web property Id for the uploads to retrieve.</param>
		/// <param name="customDataSourceId">Custom data source Id for uploads to retrieve.</param>
		/// <param name="max_results">The maximum number of uploads to include in this response.</param>
		/// <param name="start_index">A 1-based index of the first upload to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.</param>
		/// <returns>Successful response</returns>
		public async Task<Uploads> Analytics_management_uploads_listAsync(string accountId, string webPropertyId, string customDataSourceId, int max_results, int start_index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/customDataSources/"+ (customDataSourceId==null? "" : System.Uri.EscapeDataString(customDataSourceId))+"/uploads&max-results="+max_results+"&start-index="+start_index;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Uploads>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Upload data for a custom data source.
		/// Analytics_management_uploads_uploadData management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads
		/// </summary>
		/// <param name="accountId">Account Id associated with the upload.</param>
		/// <param name="webPropertyId">Web property UA-string associated with the upload.</param>
		/// <param name="customDataSourceId">Custom data source Id to which the data being uploaded belongs.</param>
		/// <returns>Successful response</returns>
		public async Task<Upload> Analytics_management_uploads_uploadDataAsync(string accountId, string webPropertyId, string customDataSourceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/customDataSources/"+ (customDataSourceId==null? "" : System.Uri.EscapeDataString(customDataSourceId))+"/uploads";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Upload>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List uploads to which the user has access.
		/// Analytics_management_uploads_get management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads/{uploadId}
		/// </summary>
		/// <param name="accountId">Account Id for the upload to retrieve.</param>
		/// <param name="webPropertyId">Web property Id for the upload to retrieve.</param>
		/// <param name="customDataSourceId">Custom data source Id for upload to retrieve.</param>
		/// <param name="uploadId">Upload Id to retrieve.</param>
		/// <returns>Successful response</returns>
		public async Task<Upload> Analytics_management_uploads_getAsync(string accountId, string webPropertyId, string customDataSourceId, string uploadId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/customDataSources/"+ (customDataSourceId==null? "" : System.Uri.EscapeDataString(customDataSourceId))+"/uploads/"+ (uploadId==null? "" : System.Uri.EscapeDataString(uploadId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Upload>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists custom dimensions to which the user has access.
		/// Analytics_management_customDimensions_list management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions
		/// </summary>
		/// <param name="accountId">Account ID for the custom dimensions to retrieve.</param>
		/// <param name="webPropertyId">Web property ID for the custom dimensions to retrieve.</param>
		/// <param name="max_results">The maximum number of custom dimensions to include in this response.</param>
		/// <param name="start_index">An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomDimensions> Analytics_management_customDimensions_listAsync(string accountId, string webPropertyId, int max_results, int start_index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/customDimensions&max-results="+max_results+"&start-index="+start_index;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomDimensions>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new custom dimension.
		/// Analytics_management_customDimensions_insert management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions
		/// </summary>
		/// <param name="accountId">Account ID for the custom dimension to create.</param>
		/// <param name="webPropertyId">Web property ID for the custom dimension to create.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomDimension> Analytics_management_customDimensions_insertAsync(string accountId, string webPropertyId, CustomDimension requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/customDimensions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomDimension>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a custom dimension to which the user has access.
		/// Analytics_management_customDimensions_get management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}
		/// </summary>
		/// <param name="accountId">Account ID for the custom dimension to retrieve.</param>
		/// <param name="webPropertyId">Web property ID for the custom dimension to retrieve.</param>
		/// <param name="customDimensionId">The ID of the custom dimension to retrieve.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomDimension> Analytics_management_customDimensions_getAsync(string accountId, string webPropertyId, string customDimensionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/customDimensions/"+ (customDimensionId==null? "" : System.Uri.EscapeDataString(customDimensionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomDimension>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing custom dimension. This method supports patch semantics.
		/// Analytics_management_customDimensions_patch management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}
		/// </summary>
		/// <param name="accountId">Account ID for the custom dimension to update.</param>
		/// <param name="webPropertyId">Web property ID for the custom dimension to update.</param>
		/// <param name="customDimensionId">Custom dimension ID for the custom dimension to update.</param>
		/// <param name="ignoreCustomDataSourceLinks">Force the update and ignore any warnings related to the custom dimension being linked to a custom data source / data set.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomDimension> Analytics_management_customDimensions_patchAsync(string accountId, string webPropertyId, string customDimensionId, bool ignoreCustomDataSourceLinks, CustomDimension requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/customDimensions/"+ (customDimensionId==null? "" : System.Uri.EscapeDataString(customDimensionId))+"&ignoreCustomDataSourceLinks="+ignoreCustomDataSourceLinks;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomDimension>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing custom dimension.
		/// Analytics_management_customDimensions_update management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}
		/// </summary>
		/// <param name="accountId">Account ID for the custom dimension to update.</param>
		/// <param name="webPropertyId">Web property ID for the custom dimension to update.</param>
		/// <param name="customDimensionId">Custom dimension ID for the custom dimension to update.</param>
		/// <param name="ignoreCustomDataSourceLinks">Force the update and ignore any warnings related to the custom dimension being linked to a custom data source / data set.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomDimension> Analytics_management_customDimensions_updateAsync(string accountId, string webPropertyId, string customDimensionId, bool ignoreCustomDataSourceLinks, CustomDimension requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/customDimensions/"+ (customDimensionId==null? "" : System.Uri.EscapeDataString(customDimensionId))+"&ignoreCustomDataSourceLinks="+ignoreCustomDataSourceLinks;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomDimension>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists custom metrics to which the user has access.
		/// Analytics_management_customMetrics_list management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics
		/// </summary>
		/// <param name="accountId">Account ID for the custom metrics to retrieve.</param>
		/// <param name="webPropertyId">Web property ID for the custom metrics to retrieve.</param>
		/// <param name="max_results">The maximum number of custom metrics to include in this response.</param>
		/// <param name="start_index">An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomMetrics> Analytics_management_customMetrics_listAsync(string accountId, string webPropertyId, int max_results, int start_index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/customMetrics&max-results="+max_results+"&start-index="+start_index;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomMetrics>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new custom metric.
		/// Analytics_management_customMetrics_insert management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics
		/// </summary>
		/// <param name="accountId">Account ID for the custom metric to create.</param>
		/// <param name="webPropertyId">Web property ID for the custom dimension to create.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomMetric> Analytics_management_customMetrics_insertAsync(string accountId, string webPropertyId, CustomMetric requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/customMetrics";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomMetric>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a custom metric to which the user has access.
		/// Analytics_management_customMetrics_get management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}
		/// </summary>
		/// <param name="accountId">Account ID for the custom metric to retrieve.</param>
		/// <param name="webPropertyId">Web property ID for the custom metric to retrieve.</param>
		/// <param name="customMetricId">The ID of the custom metric to retrieve.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomMetric> Analytics_management_customMetrics_getAsync(string accountId, string webPropertyId, string customMetricId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/customMetrics/"+ (customMetricId==null? "" : System.Uri.EscapeDataString(customMetricId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomMetric>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing custom metric. This method supports patch semantics.
		/// Analytics_management_customMetrics_patch management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}
		/// </summary>
		/// <param name="accountId">Account ID for the custom metric to update.</param>
		/// <param name="webPropertyId">Web property ID for the custom metric to update.</param>
		/// <param name="customMetricId">Custom metric ID for the custom metric to update.</param>
		/// <param name="ignoreCustomDataSourceLinks">Force the update and ignore any warnings related to the custom metric being linked to a custom data source / data set.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomMetric> Analytics_management_customMetrics_patchAsync(string accountId, string webPropertyId, string customMetricId, bool ignoreCustomDataSourceLinks, CustomMetric requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/customMetrics/"+ (customMetricId==null? "" : System.Uri.EscapeDataString(customMetricId))+"&ignoreCustomDataSourceLinks="+ignoreCustomDataSourceLinks;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomMetric>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing custom metric.
		/// Analytics_management_customMetrics_update management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}
		/// </summary>
		/// <param name="accountId">Account ID for the custom metric to update.</param>
		/// <param name="webPropertyId">Web property ID for the custom metric to update.</param>
		/// <param name="customMetricId">Custom metric ID for the custom metric to update.</param>
		/// <param name="ignoreCustomDataSourceLinks">Force the update and ignore any warnings related to the custom metric being linked to a custom data source / data set.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomMetric> Analytics_management_customMetrics_updateAsync(string accountId, string webPropertyId, string customMetricId, bool ignoreCustomDataSourceLinks, CustomMetric requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/customMetrics/"+ (customMetricId==null? "" : System.Uri.EscapeDataString(customMetricId))+"&ignoreCustomDataSourceLinks="+ignoreCustomDataSourceLinks;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomMetric>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists webProperty-Google Ads links for a given web property.
		/// Analytics_management_webPropertyAdWordsLinks_list management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks
		/// </summary>
		/// <param name="accountId">ID of the account which the given web property belongs to.</param>
		/// <param name="webPropertyId">Web property ID to retrieve the Google Ads links for.</param>
		/// <param name="max_results">The maximum number of webProperty-Google Ads links to include in this response.</param>
		/// <param name="start_index">An index of the first webProperty-Google Ads link to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.</param>
		/// <returns>Successful response</returns>
		public async Task<EntityAdWordsLinks> Analytics_management_webPropertyAdWordsLinks_listAsync(string accountId, string webPropertyId, int max_results, int start_index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/entityAdWordsLinks&max-results="+max_results+"&start-index="+start_index;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EntityAdWordsLinks>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a webProperty-Google Ads link.
		/// Analytics_management_webPropertyAdWordsLinks_insert management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks
		/// </summary>
		/// <param name="accountId">ID of the Google Analytics account to create the link for.</param>
		/// <param name="webPropertyId">Web property ID to create the link for.</param>
		/// <returns>Successful response</returns>
		public async Task<EntityAdWordsLink> Analytics_management_webPropertyAdWordsLinks_insertAsync(string accountId, string webPropertyId, EntityAdWordsLink requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/entityAdWordsLinks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EntityAdWordsLink>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a web property-Google Ads link.
		/// Analytics_management_webPropertyAdWordsLinks_delete management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}
		/// </summary>
		/// <param name="accountId">ID of the account which the given web property belongs to.</param>
		/// <param name="webPropertyId">Web property ID to delete the Google Ads link for.</param>
		/// <param name="webPropertyAdWordsLinkId">Web property Google Ads link ID.</param>
		/// <returns>Successful response</returns>
		public async Task Analytics_management_webPropertyAdWordsLinks_deleteAsync(string accountId, string webPropertyId, string webPropertyAdWordsLinkId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/entityAdWordsLinks/"+ (webPropertyAdWordsLinkId==null? "" : System.Uri.EscapeDataString(webPropertyAdWordsLinkId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a web property-Google Ads link to which the user has access.
		/// Analytics_management_webPropertyAdWordsLinks_get management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}
		/// </summary>
		/// <param name="accountId">ID of the account which the given web property belongs to.</param>
		/// <param name="webPropertyId">Web property ID to retrieve the Google Ads link for.</param>
		/// <param name="webPropertyAdWordsLinkId">Web property-Google Ads link ID.</param>
		/// <returns>Successful response</returns>
		public async Task<EntityAdWordsLink> Analytics_management_webPropertyAdWordsLinks_getAsync(string accountId, string webPropertyId, string webPropertyAdWordsLinkId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/entityAdWordsLinks/"+ (webPropertyAdWordsLinkId==null? "" : System.Uri.EscapeDataString(webPropertyAdWordsLinkId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EntityAdWordsLink>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing webProperty-Google Ads link. This method supports patch semantics.
		/// Analytics_management_webPropertyAdWordsLinks_patch management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}
		/// </summary>
		/// <param name="accountId">ID of the account which the given web property belongs to.</param>
		/// <param name="webPropertyId">Web property ID to retrieve the Google Ads link for.</param>
		/// <param name="webPropertyAdWordsLinkId">Web property-Google Ads link ID.</param>
		/// <returns>Successful response</returns>
		public async Task<EntityAdWordsLink> Analytics_management_webPropertyAdWordsLinks_patchAsync(string accountId, string webPropertyId, string webPropertyAdWordsLinkId, EntityAdWordsLink requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/entityAdWordsLinks/"+ (webPropertyAdWordsLinkId==null? "" : System.Uri.EscapeDataString(webPropertyAdWordsLinkId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EntityAdWordsLink>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing webProperty-Google Ads link.
		/// Analytics_management_webPropertyAdWordsLinks_update management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}
		/// </summary>
		/// <param name="accountId">ID of the account which the given web property belongs to.</param>
		/// <param name="webPropertyId">Web property ID to retrieve the Google Ads link for.</param>
		/// <param name="webPropertyAdWordsLinkId">Web property-Google Ads link ID.</param>
		/// <returns>Successful response</returns>
		public async Task<EntityAdWordsLink> Analytics_management_webPropertyAdWordsLinks_updateAsync(string accountId, string webPropertyId, string webPropertyAdWordsLinkId, EntityAdWordsLink requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/entityAdWordsLinks/"+ (webPropertyAdWordsLinkId==null? "" : System.Uri.EscapeDataString(webPropertyAdWordsLinkId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EntityAdWordsLink>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists webProperty-user links for a given web property.
		/// Analytics_management_webpropertyUserLinks_list management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks
		/// </summary>
		/// <param name="accountId">Account ID which the given web property belongs to.</param>
		/// <param name="webPropertyId">Web Property ID for the webProperty-user links to retrieve. Can either be a specific web property ID or '~all', which refers to all the web properties that user has access to.</param>
		/// <param name="max_results">The maximum number of webProperty-user Links to include in this response.</param>
		/// <param name="start_index">An index of the first webProperty-user link to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.</param>
		/// <returns>Successful response</returns>
		public async Task<EntityUserLinks> Analytics_management_webpropertyUserLinks_listAsync(string accountId, string webPropertyId, int max_results, int start_index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/entityUserLinks&max-results="+max_results+"&start-index="+start_index;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EntityUserLinks>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a new user to the given web property.
		/// Analytics_management_webpropertyUserLinks_insert management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks
		/// </summary>
		/// <param name="accountId">Account ID to create the user link for.</param>
		/// <param name="webPropertyId">Web Property ID to create the user link for.</param>
		/// <returns>Successful response</returns>
		public async Task<EntityUserLink> Analytics_management_webpropertyUserLinks_insertAsync(string accountId, string webPropertyId, EntityUserLink requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/entityUserLinks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EntityUserLink>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a user from the given web property.
		/// Analytics_management_webpropertyUserLinks_delete management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks/{linkId}
		/// </summary>
		/// <param name="accountId">Account ID to delete the user link for.</param>
		/// <param name="webPropertyId">Web Property ID to delete the user link for.</param>
		/// <param name="linkId">Link ID to delete the user link for.</param>
		/// <returns>Successful response</returns>
		public async Task Analytics_management_webpropertyUserLinks_deleteAsync(string accountId, string webPropertyId, string linkId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/entityUserLinks/"+ (linkId==null? "" : System.Uri.EscapeDataString(linkId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates permissions for an existing user on the given web property.
		/// Analytics_management_webpropertyUserLinks_update management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks/{linkId}
		/// </summary>
		/// <param name="accountId">Account ID to update the account-user link for.</param>
		/// <param name="webPropertyId">Web property ID to update the account-user link for.</param>
		/// <param name="linkId">Link ID to update the account-user link for.</param>
		/// <returns>Successful response</returns>
		public async Task<EntityUserLink> Analytics_management_webpropertyUserLinks_updateAsync(string accountId, string webPropertyId, string linkId, EntityUserLink requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/entityUserLinks/"+ (linkId==null? "" : System.Uri.EscapeDataString(linkId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EntityUserLink>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists views (profiles) to which the user has access.
		/// Analytics_management_profiles_list management/accounts/{accountId}/webproperties/{webPropertyId}/profiles
		/// </summary>
		/// <param name="accountId">Account ID for the view (profiles) to retrieve. Can either be a specific account ID or '~all', which refers to all the accounts to which the user has access.</param>
		/// <param name="webPropertyId">Web property ID for the views (profiles) to retrieve. Can either be a specific web property ID or '~all', which refers to all the web properties to which the user has access.</param>
		/// <param name="max_results">The maximum number of views (profiles) to include in this response.</param>
		/// <param name="start_index">An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.</param>
		/// <returns>Successful response</returns>
		public async Task<Profiles> Analytics_management_profiles_listAsync(string accountId, string webPropertyId, int max_results, int start_index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/profiles&max-results="+max_results+"&start-index="+start_index;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Profiles>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new view (profile).
		/// Analytics_management_profiles_insert management/accounts/{accountId}/webproperties/{webPropertyId}/profiles
		/// </summary>
		/// <param name="accountId">Account ID to create the view (profile) for.</param>
		/// <param name="webPropertyId">Web property ID to create the view (profile) for.</param>
		/// <returns>Successful response</returns>
		public async Task<Profile> Analytics_management_profiles_insertAsync(string accountId, string webPropertyId, Profile requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/profiles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Profile>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a view (profile).
		/// Analytics_management_profiles_delete management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}
		/// </summary>
		/// <param name="accountId">Account ID to delete the view (profile) for.</param>
		/// <param name="webPropertyId">Web property ID to delete the view (profile) for.</param>
		/// <param name="profileId">ID of the view (profile) to be deleted.</param>
		/// <returns>Successful response</returns>
		public async Task Analytics_management_profiles_deleteAsync(string accountId, string webPropertyId, string profileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a view (profile) to which the user has access.
		/// Analytics_management_profiles_get management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}
		/// </summary>
		/// <param name="accountId">Account ID to retrieve the view (profile) for.</param>
		/// <param name="webPropertyId">Web property ID to retrieve the view (profile) for.</param>
		/// <param name="profileId">View (Profile) ID to retrieve the view (profile) for.</param>
		/// <returns>Successful response</returns>
		public async Task<Profile> Analytics_management_profiles_getAsync(string accountId, string webPropertyId, string profileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Profile>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing view (profile). This method supports patch semantics.
		/// Analytics_management_profiles_patch management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}
		/// </summary>
		/// <param name="accountId">Account ID to which the view (profile) belongs</param>
		/// <param name="webPropertyId">Web property ID to which the view (profile) belongs</param>
		/// <param name="profileId">ID of the view (profile) to be updated.</param>
		/// <returns>Successful response</returns>
		public async Task<Profile> Analytics_management_profiles_patchAsync(string accountId, string webPropertyId, string profileId, Profile requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Profile>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing view (profile).
		/// Analytics_management_profiles_update management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}
		/// </summary>
		/// <param name="accountId">Account ID to which the view (profile) belongs</param>
		/// <param name="webPropertyId">Web property ID to which the view (profile) belongs</param>
		/// <param name="profileId">ID of the view (profile) to be updated.</param>
		/// <returns>Successful response</returns>
		public async Task<Profile> Analytics_management_profiles_updateAsync(string accountId, string webPropertyId, string profileId, Profile requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Profile>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists profile-user links for a given view (profile).
		/// Analytics_management_profileUserLinks_list management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks
		/// </summary>
		/// <param name="accountId">Account ID which the given view (profile) belongs to.</param>
		/// <param name="webPropertyId">Web Property ID which the given view (profile) belongs to. Can either be a specific web property ID or '~all', which refers to all the web properties that user has access to.</param>
		/// <param name="profileId">View (Profile) ID to retrieve the profile-user links for. Can either be a specific profile ID or '~all', which refers to all the profiles that user has access to.</param>
		/// <param name="max_results">The maximum number of profile-user links to include in this response.</param>
		/// <param name="start_index">An index of the first profile-user link to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.</param>
		/// <returns>Successful response</returns>
		public async Task<EntityUserLinks> Analytics_management_profileUserLinks_listAsync(string accountId, string webPropertyId, string profileId, int max_results, int start_index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/entityUserLinks&max-results="+max_results+"&start-index="+start_index;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EntityUserLinks>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a new user to the given view (profile).
		/// Analytics_management_profileUserLinks_insert management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks
		/// </summary>
		/// <param name="accountId">Account ID to create the user link for.</param>
		/// <param name="webPropertyId">Web Property ID to create the user link for.</param>
		/// <param name="profileId">View (Profile) ID to create the user link for.</param>
		/// <returns>Successful response</returns>
		public async Task<EntityUserLink> Analytics_management_profileUserLinks_insertAsync(string accountId, string webPropertyId, string profileId, EntityUserLink requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/entityUserLinks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EntityUserLink>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a user from the given view (profile).
		/// Analytics_management_profileUserLinks_delete management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks/{linkId}
		/// </summary>
		/// <param name="accountId">Account ID to delete the user link for.</param>
		/// <param name="webPropertyId">Web Property ID to delete the user link for.</param>
		/// <param name="profileId">View (Profile) ID to delete the user link for.</param>
		/// <param name="linkId">Link ID to delete the user link for.</param>
		/// <returns>Successful response</returns>
		public async Task Analytics_management_profileUserLinks_deleteAsync(string accountId, string webPropertyId, string profileId, string linkId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/entityUserLinks/"+ (linkId==null? "" : System.Uri.EscapeDataString(linkId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates permissions for an existing user on the given view (profile).
		/// Analytics_management_profileUserLinks_update management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks/{linkId}
		/// </summary>
		/// <param name="accountId">Account ID to update the user link for.</param>
		/// <param name="webPropertyId">Web Property ID to update the user link for.</param>
		/// <param name="profileId">View (Profile ID) to update the user link for.</param>
		/// <param name="linkId">Link ID to update the user link for.</param>
		/// <returns>Successful response</returns>
		public async Task<EntityUserLink> Analytics_management_profileUserLinks_updateAsync(string accountId, string webPropertyId, string profileId, string linkId, EntityUserLink requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/entityUserLinks/"+ (linkId==null? "" : System.Uri.EscapeDataString(linkId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EntityUserLink>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists experiments to which the user has access.
		/// Analytics_management_experiments_list management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments
		/// </summary>
		/// <param name="accountId">Account ID to retrieve experiments for.</param>
		/// <param name="webPropertyId">Web property ID to retrieve experiments for.</param>
		/// <param name="profileId">View (Profile) ID to retrieve experiments for.</param>
		/// <param name="max_results">The maximum number of experiments to include in this response.</param>
		/// <param name="start_index">An index of the first experiment to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.</param>
		/// <returns>Successful response</returns>
		public async Task<Experiments> Analytics_management_experiments_listAsync(string accountId, string webPropertyId, string profileId, int max_results, int start_index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/experiments&max-results="+max_results+"&start-index="+start_index;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Experiments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new experiment.
		/// Analytics_management_experiments_insert management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments
		/// </summary>
		/// <param name="accountId">Account ID to create the experiment for.</param>
		/// <param name="webPropertyId">Web property ID to create the experiment for.</param>
		/// <param name="profileId">View (Profile) ID to create the experiment for.</param>
		/// <returns>Successful response</returns>
		public async Task<Experiment> Analytics_management_experiments_insertAsync(string accountId, string webPropertyId, string profileId, Experiment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/experiments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Experiment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an experiment.
		/// Analytics_management_experiments_delete management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}
		/// </summary>
		/// <param name="accountId">Account ID to which the experiment belongs</param>
		/// <param name="webPropertyId">Web property ID to which the experiment belongs</param>
		/// <param name="profileId">View (Profile) ID to which the experiment belongs</param>
		/// <param name="experimentId">ID of the experiment to delete</param>
		/// <returns>Successful response</returns>
		public async Task Analytics_management_experiments_deleteAsync(string accountId, string webPropertyId, string profileId, string experimentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/experiments/"+ (experimentId==null? "" : System.Uri.EscapeDataString(experimentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an experiment to which the user has access.
		/// Analytics_management_experiments_get management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}
		/// </summary>
		/// <param name="accountId">Account ID to retrieve the experiment for.</param>
		/// <param name="webPropertyId">Web property ID to retrieve the experiment for.</param>
		/// <param name="profileId">View (Profile) ID to retrieve the experiment for.</param>
		/// <param name="experimentId">Experiment ID to retrieve the experiment for.</param>
		/// <returns>Successful response</returns>
		public async Task<Experiment> Analytics_management_experiments_getAsync(string accountId, string webPropertyId, string profileId, string experimentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/experiments/"+ (experimentId==null? "" : System.Uri.EscapeDataString(experimentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Experiment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an existing experiment. This method supports patch semantics.
		/// Analytics_management_experiments_patch management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}
		/// </summary>
		/// <param name="accountId">Account ID of the experiment to update.</param>
		/// <param name="webPropertyId">Web property ID of the experiment to update.</param>
		/// <param name="profileId">View (Profile) ID of the experiment to update.</param>
		/// <param name="experimentId">Experiment ID of the experiment to update.</param>
		/// <returns>Successful response</returns>
		public async Task<Experiment> Analytics_management_experiments_patchAsync(string accountId, string webPropertyId, string profileId, string experimentId, Experiment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/experiments/"+ (experimentId==null? "" : System.Uri.EscapeDataString(experimentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Experiment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update an existing experiment.
		/// Analytics_management_experiments_update management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}
		/// </summary>
		/// <param name="accountId">Account ID of the experiment to update.</param>
		/// <param name="webPropertyId">Web property ID of the experiment to update.</param>
		/// <param name="profileId">View (Profile) ID of the experiment to update.</param>
		/// <param name="experimentId">Experiment ID of the experiment to update.</param>
		/// <returns>Successful response</returns>
		public async Task<Experiment> Analytics_management_experiments_updateAsync(string accountId, string webPropertyId, string profileId, string experimentId, Experiment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/experiments/"+ (experimentId==null? "" : System.Uri.EscapeDataString(experimentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Experiment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists goals to which the user has access.
		/// Analytics_management_goals_list management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals
		/// </summary>
		/// <param name="accountId">Account ID to retrieve goals for. Can either be a specific account ID or '~all', which refers to all the accounts that user has access to.</param>
		/// <param name="webPropertyId">Web property ID to retrieve goals for. Can either be a specific web property ID or '~all', which refers to all the web properties that user has access to.</param>
		/// <param name="profileId">View (Profile) ID to retrieve goals for. Can either be a specific view (profile) ID or '~all', which refers to all the views (profiles) that user has access to.</param>
		/// <param name="max_results">The maximum number of goals to include in this response.</param>
		/// <param name="start_index">An index of the first goal to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.</param>
		/// <returns>Successful response</returns>
		public async Task<Goals> Analytics_management_goals_listAsync(string accountId, string webPropertyId, string profileId, int max_results, int start_index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/goals&max-results="+max_results+"&start-index="+start_index;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Goals>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new goal.
		/// Analytics_management_goals_insert management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals
		/// </summary>
		/// <param name="accountId">Account ID to create the goal for.</param>
		/// <param name="webPropertyId">Web property ID to create the goal for.</param>
		/// <param name="profileId">View (Profile) ID to create the goal for.</param>
		/// <returns>Successful response</returns>
		public async Task<Goal> Analytics_management_goals_insertAsync(string accountId, string webPropertyId, string profileId, Goal requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/goals";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Goal>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a goal to which the user has access.
		/// Analytics_management_goals_get management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}
		/// </summary>
		/// <param name="accountId">Account ID to retrieve the goal for.</param>
		/// <param name="webPropertyId">Web property ID to retrieve the goal for.</param>
		/// <param name="profileId">View (Profile) ID to retrieve the goal for.</param>
		/// <param name="goalId">Goal ID to retrieve the goal for.</param>
		/// <returns>Successful response</returns>
		public async Task<Goal> Analytics_management_goals_getAsync(string accountId, string webPropertyId, string profileId, string goalId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/goals/"+ (goalId==null? "" : System.Uri.EscapeDataString(goalId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Goal>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing goal. This method supports patch semantics.
		/// Analytics_management_goals_patch management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}
		/// </summary>
		/// <param name="accountId">Account ID to update the goal.</param>
		/// <param name="webPropertyId">Web property ID to update the goal.</param>
		/// <param name="profileId">View (Profile) ID to update the goal.</param>
		/// <param name="goalId">Index of the goal to be updated.</param>
		/// <returns>Successful response</returns>
		public async Task<Goal> Analytics_management_goals_patchAsync(string accountId, string webPropertyId, string profileId, string goalId, Goal requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/goals/"+ (goalId==null? "" : System.Uri.EscapeDataString(goalId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Goal>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing goal.
		/// Analytics_management_goals_update management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}
		/// </summary>
		/// <param name="accountId">Account ID to update the goal.</param>
		/// <param name="webPropertyId">Web property ID to update the goal.</param>
		/// <param name="profileId">View (Profile) ID to update the goal.</param>
		/// <param name="goalId">Index of the goal to be updated.</param>
		/// <returns>Successful response</returns>
		public async Task<Goal> Analytics_management_goals_updateAsync(string accountId, string webPropertyId, string profileId, string goalId, Goal requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/goals/"+ (goalId==null? "" : System.Uri.EscapeDataString(goalId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Goal>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all profile filter links for a profile.
		/// Analytics_management_profileFilterLinks_list management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks
		/// </summary>
		/// <param name="accountId">Account ID to retrieve profile filter links for.</param>
		/// <param name="webPropertyId">Web property Id for profile filter links for. Can either be a specific web property ID or '~all', which refers to all the web properties that user has access to.</param>
		/// <param name="profileId">Profile ID to retrieve filter links for. Can either be a specific profile ID or '~all', which refers to all the profiles that user has access to.</param>
		/// <param name="max_results">The maximum number of profile filter links to include in this response.</param>
		/// <param name="start_index">An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.</param>
		/// <returns>Successful response</returns>
		public async Task<ProfileFilterLinks> Analytics_management_profileFilterLinks_listAsync(string accountId, string webPropertyId, string profileId, int max_results, int start_index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/profileFilterLinks&max-results="+max_results+"&start-index="+start_index;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProfileFilterLinks>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new profile filter link.
		/// Analytics_management_profileFilterLinks_insert management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks
		/// </summary>
		/// <param name="accountId">Account ID to create profile filter link for.</param>
		/// <param name="webPropertyId">Web property Id to create profile filter link for.</param>
		/// <param name="profileId">Profile ID to create filter link for.</param>
		/// <returns>Successful response</returns>
		public async Task<ProfileFilterLink> Analytics_management_profileFilterLinks_insertAsync(string accountId, string webPropertyId, string profileId, ProfileFilterLink requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/profileFilterLinks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProfileFilterLink>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a profile filter link.
		/// Analytics_management_profileFilterLinks_delete management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}
		/// </summary>
		/// <param name="accountId">Account ID to which the profile filter link belongs.</param>
		/// <param name="webPropertyId">Web property Id to which the profile filter link belongs.</param>
		/// <param name="profileId">Profile ID to which the filter link belongs.</param>
		/// <param name="linkId">ID of the profile filter link to delete.</param>
		/// <returns>Successful response</returns>
		public async Task Analytics_management_profileFilterLinks_deleteAsync(string accountId, string webPropertyId, string profileId, string linkId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/profileFilterLinks/"+ (linkId==null? "" : System.Uri.EscapeDataString(linkId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a single profile filter link.
		/// Analytics_management_profileFilterLinks_get management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}
		/// </summary>
		/// <param name="accountId">Account ID to retrieve profile filter link for.</param>
		/// <param name="webPropertyId">Web property Id to retrieve profile filter link for.</param>
		/// <param name="profileId">Profile ID to retrieve filter link for.</param>
		/// <param name="linkId">ID of the profile filter link.</param>
		/// <returns>Successful response</returns>
		public async Task<ProfileFilterLink> Analytics_management_profileFilterLinks_getAsync(string accountId, string webPropertyId, string profileId, string linkId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/profileFilterLinks/"+ (linkId==null? "" : System.Uri.EscapeDataString(linkId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProfileFilterLink>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an existing profile filter link. This method supports patch semantics.
		/// Analytics_management_profileFilterLinks_patch management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}
		/// </summary>
		/// <param name="accountId">Account ID to which profile filter link belongs.</param>
		/// <param name="webPropertyId">Web property Id to which profile filter link belongs</param>
		/// <param name="profileId">Profile ID to which filter link belongs</param>
		/// <param name="linkId">ID of the profile filter link to be updated.</param>
		/// <returns>Successful response</returns>
		public async Task<ProfileFilterLink> Analytics_management_profileFilterLinks_patchAsync(string accountId, string webPropertyId, string profileId, string linkId, ProfileFilterLink requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/profileFilterLinks/"+ (linkId==null? "" : System.Uri.EscapeDataString(linkId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProfileFilterLink>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update an existing profile filter link.
		/// Analytics_management_profileFilterLinks_update management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}
		/// </summary>
		/// <param name="accountId">Account ID to which profile filter link belongs.</param>
		/// <param name="webPropertyId">Web property Id to which profile filter link belongs</param>
		/// <param name="profileId">Profile ID to which filter link belongs</param>
		/// <param name="linkId">ID of the profile filter link to be updated.</param>
		/// <returns>Successful response</returns>
		public async Task<ProfileFilterLink> Analytics_management_profileFilterLinks_updateAsync(string accountId, string webPropertyId, string profileId, string linkId, ProfileFilterLink requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/profileFilterLinks/"+ (linkId==null? "" : System.Uri.EscapeDataString(linkId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProfileFilterLink>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists unsampled reports to which the user has access.
		/// Analytics_management_unsampledReports_list management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports
		/// </summary>
		/// <param name="accountId">Account ID to retrieve unsampled reports for. Must be a specific account ID, ~all is not supported.</param>
		/// <param name="webPropertyId">Web property ID to retrieve unsampled reports for. Must be a specific web property ID, ~all is not supported.</param>
		/// <param name="profileId">View (Profile) ID to retrieve unsampled reports for. Must be a specific view (profile) ID, ~all is not supported.</param>
		/// <param name="max_results">The maximum number of unsampled reports to include in this response.</param>
		/// <param name="start_index">An index of the first unsampled report to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.</param>
		/// <returns>Successful response</returns>
		public async Task<UnsampledReports> Analytics_management_unsampledReports_listAsync(string accountId, string webPropertyId, string profileId, int max_results, int start_index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/unsampledReports&max-results="+max_results+"&start-index="+start_index;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UnsampledReports>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new unsampled report.
		/// Analytics_management_unsampledReports_insert management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports
		/// </summary>
		/// <param name="accountId">Account ID to create the unsampled report for.</param>
		/// <param name="webPropertyId">Web property ID to create the unsampled report for.</param>
		/// <param name="profileId">View (Profile) ID to create the unsampled report for.</param>
		/// <returns>Successful response</returns>
		public async Task<UnsampledReport> Analytics_management_unsampledReports_insertAsync(string accountId, string webPropertyId, string profileId, UnsampledReport requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/unsampledReports";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UnsampledReport>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an unsampled report.
		/// Analytics_management_unsampledReports_delete management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports/{unsampledReportId}
		/// </summary>
		/// <param name="accountId">Account ID to delete the unsampled report for.</param>
		/// <param name="webPropertyId">Web property ID to delete the unsampled reports for.</param>
		/// <param name="profileId">View (Profile) ID to delete the unsampled report for.</param>
		/// <param name="unsampledReportId">ID of the unsampled report to be deleted.</param>
		/// <returns>Successful response</returns>
		public async Task Analytics_management_unsampledReports_deleteAsync(string accountId, string webPropertyId, string profileId, string unsampledReportId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/unsampledReports/"+ (unsampledReportId==null? "" : System.Uri.EscapeDataString(unsampledReportId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a single unsampled report.
		/// Analytics_management_unsampledReports_get management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports/{unsampledReportId}
		/// </summary>
		/// <param name="accountId">Account ID to retrieve unsampled report for.</param>
		/// <param name="webPropertyId">Web property ID to retrieve unsampled reports for.</param>
		/// <param name="profileId">View (Profile) ID to retrieve unsampled report for.</param>
		/// <param name="unsampledReportId">ID of the unsampled report to retrieve.</param>
		/// <returns>Successful response</returns>
		public async Task<UnsampledReport> Analytics_management_unsampledReports_getAsync(string accountId, string webPropertyId, string profileId, string unsampledReportId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/profiles/"+ (profileId==null? "" : System.Uri.EscapeDataString(profileId))+"/unsampledReports/"+ (unsampledReportId==null? "" : System.Uri.EscapeDataString(unsampledReportId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UnsampledReport>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists remarketing audiences to which the user has access.
		/// Analytics_management_remarketingAudience_list management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences
		/// </summary>
		/// <param name="accountId">The account ID of the remarketing audiences to retrieve.</param>
		/// <param name="webPropertyId">The web property ID of the remarketing audiences to retrieve.</param>
		/// <param name="max_results">The maximum number of remarketing audiences to include in this response.</param>
		/// <param name="start_index">An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.</param>
		/// <returns>Successful response</returns>
		public async Task<RemarketingAudiences> Analytics_management_remarketingAudience_listAsync(string accountId, string webPropertyId, int max_results, int start_index, string type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/remarketingAudiences&max-results="+max_results+"&start-index="+start_index+"&type=" + (type==null? "" : System.Uri.EscapeDataString(type));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RemarketingAudiences>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new remarketing audience.
		/// Analytics_management_remarketingAudience_insert management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences
		/// </summary>
		/// <param name="accountId">The account ID for which to create the remarketing audience.</param>
		/// <param name="webPropertyId">Web property ID for which to create the remarketing audience.</param>
		/// <returns>Successful response</returns>
		public async Task<RemarketingAudience> Analytics_management_remarketingAudience_insertAsync(string accountId, string webPropertyId, RemarketingAudience requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/remarketingAudiences";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RemarketingAudience>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a remarketing audience.
		/// Analytics_management_remarketingAudience_delete management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}
		/// </summary>
		/// <param name="accountId">Account ID to which the remarketing audience belongs.</param>
		/// <param name="webPropertyId">Web property ID to which the remarketing audience belongs.</param>
		/// <param name="remarketingAudienceId">The ID of the remarketing audience to delete.</param>
		/// <returns>Successful response</returns>
		public async Task Analytics_management_remarketingAudience_deleteAsync(string accountId, string webPropertyId, string remarketingAudienceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/remarketingAudiences/"+ (remarketingAudienceId==null? "" : System.Uri.EscapeDataString(remarketingAudienceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a remarketing audience to which the user has access.
		/// Analytics_management_remarketingAudience_get management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}
		/// </summary>
		/// <param name="accountId">The account ID of the remarketing audience to retrieve.</param>
		/// <param name="webPropertyId">The web property ID of the remarketing audience to retrieve.</param>
		/// <param name="remarketingAudienceId">The ID of the remarketing audience to retrieve.</param>
		/// <returns>Successful response</returns>
		public async Task<RemarketingAudience> Analytics_management_remarketingAudience_getAsync(string accountId, string webPropertyId, string remarketingAudienceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/remarketingAudiences/"+ (remarketingAudienceId==null? "" : System.Uri.EscapeDataString(remarketingAudienceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RemarketingAudience>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing remarketing audience. This method supports patch semantics.
		/// Analytics_management_remarketingAudience_patch management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}
		/// </summary>
		/// <param name="accountId">The account ID of the remarketing audience to update.</param>
		/// <param name="webPropertyId">The web property ID of the remarketing audience to update.</param>
		/// <param name="remarketingAudienceId">The ID of the remarketing audience to update.</param>
		/// <returns>Successful response</returns>
		public async Task<RemarketingAudience> Analytics_management_remarketingAudience_patchAsync(string accountId, string webPropertyId, string remarketingAudienceId, RemarketingAudience requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/remarketingAudiences/"+ (remarketingAudienceId==null? "" : System.Uri.EscapeDataString(remarketingAudienceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RemarketingAudience>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing remarketing audience.
		/// Analytics_management_remarketingAudience_update management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}
		/// </summary>
		/// <param name="accountId">The account ID of the remarketing audience to update.</param>
		/// <param name="webPropertyId">The web property ID of the remarketing audience to update.</param>
		/// <param name="remarketingAudienceId">The ID of the remarketing audience to update.</param>
		/// <returns>Successful response</returns>
		public async Task<RemarketingAudience> Analytics_management_remarketingAudience_updateAsync(string accountId, string webPropertyId, string remarketingAudienceId, RemarketingAudience requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/webproperties/"+ (webPropertyId==null? "" : System.Uri.EscapeDataString(webPropertyId))+"/remarketingAudiences/"+ (remarketingAudienceId==null? "" : System.Uri.EscapeDataString(remarketingAudienceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RemarketingAudience>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Hashes the given Client ID.
		/// Analytics_management_clientId_hashClientId management/clientId:hashClientId
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<HashClientIdResponse> Analytics_management_clientId_hashClientIdAsync(HashClientIdRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/clientId:hashClientId";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HashClientIdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists segments to which the user has access.
		/// Analytics_management_segments_list management/segments
		/// </summary>
		/// <param name="max_results">The maximum number of segments to include in this response.</param>
		/// <param name="start_index">An index of the first segment to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.</param>
		/// <returns>Successful response</returns>
		public async Task<Segments> Analytics_management_segments_listAsync(int max_results, int start_index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "management/segments?max-results="+max_results+"&start-index="+start_index;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Segments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all columns for a report type
		/// Analytics_metadata_columns_list metadata/{reportType}/columns
		/// </summary>
		/// <param name="reportType">Report type. Allowed Values: 'ga'. Where 'ga' corresponds to the Core Reporting API</param>
		/// <returns>Successful response</returns>
		public async Task<Columns> Analytics_metadata_columns_listAsync(string reportType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "metadata/"+ (reportType==null? "" : System.Uri.EscapeDataString(reportType))+"/columns";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Columns>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an account ticket.
		/// Analytics_provisioning_createAccountTicket provisioning/createAccountTicket
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<AccountTicket> Analytics_provisioning_createAccountTicketAsync(AccountTicket requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "provisioning/createAccountTicket";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccountTicket>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provision account.
		/// Analytics_provisioning_createAccountTree provisioning/createAccountTree
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<AccountTreeResponse> Analytics_provisioning_createAccountTreeAsync(AccountTreeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "provisioning/createAccountTree";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccountTreeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Insert or update a user deletion requests.
		/// Analytics_userDeletion_userDeletionRequest_upsert userDeletion/userDeletionRequests:upsert
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<UserDeletionRequest> Analytics_userDeletion_userDeletionRequest_upsertAsync(UserDeletionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userDeletion/userDeletionRequests:upsert";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserDeletionRequest>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum Analytics_data_ga_getOutput
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dataTable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		json = 1,
	}
	
	public enum Analytics_data_ga_getSamplingLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FASTER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGHER_PRECISION = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
