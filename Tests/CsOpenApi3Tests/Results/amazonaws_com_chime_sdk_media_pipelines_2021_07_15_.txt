//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateMediaCapturePipelineResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MediaCapturePipeline MediaCapturePipeline { get; set; }
	}
	
	/// <summary>
	/// A media pipeline object consisting of an ID, source type, source ARN, a sink type, a sink ARN, and a configuration object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaCapturePipeline
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MediaPipelineId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MediaPipelineArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaPipelineSourceType SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaPipelineStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaPipelineSinkType SinkType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SinkArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChimeSdkMeetingConfiguration ChimeSdkMeetingConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MediaPipelineSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ChimeSdkMeeting")]
		ChimeSdkMeeting = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MediaPipelineStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Initializing")]
		Initializing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InProgress")]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Failed")]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Stopping")]
		Stopping = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Stopped")]
		Stopped = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Paused")]
		Paused = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MediaPipelineSinkType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="S3Bucket")]
		S3Bucket = 0,
	}
	
	/// <summary>
	/// The configuration object of the Amazon Chime SDK meeting for a specified media pipeline. <code>SourceType</code> must be <code>ChimeSdkMeeting</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChimeSdkMeetingConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SourceConfiguration SourceConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ArtifactsConfiguration ArtifactsConfiguration { get; set; }
	}
	
	/// <summary>
	/// Source configuration for a specified media pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SelectedVideoStreams SelectedVideoStreams { get; set; }
	}
	
	/// <summary>
	/// The video streams for a specified media pipeline. The total number of video streams can't exceed 25.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SelectedVideoStreams
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AttendeeIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ExternalUserIds { get; set; }
	}
	
	/// <summary>
	/// The configuration for the artifacts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArtifactsConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AudioArtifactsConfiguration Audio { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VideoArtifactsConfiguration Video { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContentArtifactsConfiguration Content { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CompositedVideoArtifactsConfiguration CompositedVideo { get; set; }
	}
	
	/// <summary>
	/// The audio artifact configuration object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AudioArtifactsConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AudioMuxType MuxType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AudioMuxType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AudioOnly")]
		AudioOnly = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AudioWithActiveSpeakerVideo")]
		AudioWithActiveSpeakerVideo = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AudioWithCompositedVideo")]
		AudioWithCompositedVideo = 2,
	}
	
	/// <summary>
	/// The video artifact configuration object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoArtifactsConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ArtifactsState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VideoMuxType MuxType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ArtifactsState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Enabled")]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Disabled")]
		Disabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VideoMuxType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VideoOnly")]
		VideoOnly = 0,
	}
	
	/// <summary>
	/// The content artifact object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContentArtifactsConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ArtifactsState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContentMuxType MuxType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentMuxType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ContentOnly")]
		ContentOnly = 0,
	}
	
	/// <summary>
	/// Specifies the configuration for compositing video artifacts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompositedVideoArtifactsConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LayoutOption Layout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResolutionOption Resolution { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GridViewConfiguration GridViewConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LayoutOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GridView")]
		GridView = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ResolutionOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HD")]
		HD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FHD")]
		FHD = 1,
	}
	
	/// <summary>
	/// Specifies the type of grid layout.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GridViewConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContentShareLayoutOption ContentShareLayout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PresenterOnlyConfiguration PresenterOnlyConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ActiveSpeakerOnlyConfiguration ActiveSpeakerOnlyConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HorizontalLayoutConfiguration HorizontalLayoutConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VerticalLayoutConfiguration VerticalLayoutConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VideoAttribute VideoAttribute { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CanvasOrientation CanvasOrientation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentShareLayoutOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PresenterOnly")]
		PresenterOnly = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Horizontal")]
		Horizontal = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Vertical")]
		Vertical = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ActiveSpeakerOnly")]
		ActiveSpeakerOnly = 3,
	}
	
	/// <summary>
	/// Defines the configuration for a presenter-only video tile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PresenterOnlyConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PresenterPosition PresenterPosition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PresenterPosition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TopLeft")]
		TopLeft = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TopRight")]
		TopRight = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BottomLeft")]
		BottomLeft = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BottomRight")]
		BottomRight = 3,
	}
	
	/// <summary>
	/// Defines the configuration for an <code>ActiveSpeakerOnly</code> video tile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActiveSpeakerOnlyConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PresenterPosition ActiveSpeakerPosition { get; set; }
	}
	
	/// <summary>
	/// Defines the configuration settings for the horizontal layout.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HorizontalLayoutConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TileOrder TileOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HorizontalTilePosition TilePosition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TileCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TileAspectRatio { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TileOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JoinSequence")]
		JoinSequence = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SpeakerSequence")]
		SpeakerSequence = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HorizontalTilePosition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Top")]
		Top = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bottom")]
		Bottom = 1,
	}
	
	/// <summary>
	/// Defines the configuration settings for a vertial layout.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VerticalLayoutConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TileOrder TileOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VerticalTilePosition TilePosition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TileCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TileAspectRatio { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VerticalTilePosition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Left")]
		Left = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Right")]
		Right = 1,
	}
	
	/// <summary>
	/// Defines the settings for a video tile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoAttribute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CornerRadius { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BorderColor BorderColor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BorderColor HighlightColor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BorderThickness { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BorderColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Black")]
		Black = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Blue")]
		Blue = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Red")]
		Red = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Green")]
		Green = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="White")]
		White = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Yellow")]
		Yellow = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CanvasOrientation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Landscape")]
		Landscape = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Portrait")]
		Portrait = 1,
	}
	
	/// <summary>
	/// A key/value pair that grants users access to meeting resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tag
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BadRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ForbiddenException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnauthorizedClientException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThrottledClientException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceLimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceUnavailableException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceFailureException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateMediaConcatenationPipelineResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MediaConcatenationPipeline MediaConcatenationPipeline { get; set; }
	}
	
	/// <summary>
	/// Concatenates audio and video data from one or more data streams.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaConcatenationPipeline
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MediaPipelineId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MediaPipelineArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConcatenationSource[] Sources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConcatenationSink[] Sinks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaPipelineStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdatedTimestamp { get; set; }
	}
	
	/// <summary>
	/// The source type and media pipeline configuration settings in a configuration object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConcatenationSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConcatenationSourceType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MediaCapturePipelineSourceConfiguration MediaCapturePipelineSourceConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConcatenationSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MediaCapturePipeline")]
		MediaCapturePipeline = 0,
	}
	
	/// <summary>
	/// The source configuration object of a media capture pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaCapturePipelineSourceConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MediaPipelineArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ChimeSdkMeetingConcatenationConfiguration ChimeSdkMeetingConfiguration { get; set; }
	}
	
	/// <summary>
	/// The configuration object of the Amazon Chime SDK meeting concatenation for a specified media pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChimeSdkMeetingConcatenationConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ArtifactsConcatenationConfiguration ArtifactsConfiguration { get; set; }
	}
	
	/// <summary>
	/// The configuration for the artifacts concatenation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArtifactsConcatenationConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AudioConcatenationConfiguration Audio { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VideoConcatenationConfiguration Video { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContentConcatenationConfiguration Content { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DataChannelConcatenationConfiguration DataChannel { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TranscriptionMessagesConcatenationConfiguration TranscriptionMessages { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MeetingEventsConcatenationConfiguration MeetingEvents { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CompositedVideoConcatenationConfiguration CompositedVideo { get; set; }
	}
	
	/// <summary>
	/// The audio artifact concatenation configuration object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AudioConcatenationConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AudioArtifactsConcatenationState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AudioArtifactsConcatenationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Enabled")]
		Enabled = 0,
	}
	
	/// <summary>
	/// The configuration object of a video concatenation pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoConcatenationConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ArtifactsState State { get; set; }
	}
	
	/// <summary>
	/// The composited content configuration object for a specified media pipeline. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContentConcatenationConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ArtifactsState State { get; set; }
	}
	
	/// <summary>
	/// The content configuration object's data channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataChannelConcatenationConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ArtifactsState State { get; set; }
	}
	
	/// <summary>
	/// The configuration object for concatenating transcription messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TranscriptionMessagesConcatenationConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ArtifactsState State { get; set; }
	}
	
	/// <summary>
	/// The configuration object for an event concatenation pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MeetingEventsConcatenationConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ArtifactsState State { get; set; }
	}
	
	/// <summary>
	/// The composited video configuration object for a specified media pipeline. <code>SourceType</code> must be <code>ChimeSdkMeeting</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompositedVideoConcatenationConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ArtifactsState State { get; set; }
	}
	
	/// <summary>
	/// The data sink of the configuration object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConcatenationSink
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MediaPipelineSinkType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public S3BucketSinkConfiguration S3BucketSinkConfiguration { get; set; }
	}
	
	/// <summary>
	/// The configuration settings for the S3 bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class S3BucketSinkConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Destination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateMediaInsightsPipelineResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MediaInsightsPipeline MediaInsightsPipeline { get; set; }
	}
	
	/// <summary>
	/// A media pipeline that streams call analytics data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaInsightsPipeline
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MediaPipelineId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MediaPipelineArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MediaInsightsPipelineConfigurationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaPipelineStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KinesisVideoStreamSourceRuntimeConfiguration KinesisVideoStreamSourceRuntimeConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaInsightsRuntimeMetadata MediaInsightsRuntimeMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KinesisVideoStreamRecordingSourceRuntimeConfiguration KinesisVideoStreamRecordingSourceRuntimeConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public S3RecordingSinkRuntimeConfiguration S3RecordingSinkRuntimeConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
	}
	
	/// <summary>
	/// The runtime configuration settings for the Kinesis video stream source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KinesisVideoStreamSourceRuntimeConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StreamConfiguration[] Streams { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MediaEncoding MediaEncoding { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MediaSampleRate { get; set; }
	}
	
	/// <summary>
	/// The configuration settings for a stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StreamConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StreamArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FragmentNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StreamChannelDefinition StreamChannelDefinition { get; set; }
	}
	
	/// <summary>
	/// Defines a streaming channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StreamChannelDefinition
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int NumberOfChannels { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChannelDefinition[] ChannelDefinitions { get; set; }
	}
	
	/// <summary>
	/// Defines an audio channel in a Kinesis video stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelDefinition
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ChannelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ParticipantRole ParticipantRole { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ParticipantRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AGENT")]
		AGENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUSTOMER")]
		CUSTOMER = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MediaEncoding
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pcm")]
		pcm = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaInsightsRuntimeMetadata
	{
	}
	
	/// <summary>
	/// A structure that contains the runtime settings for recording a Kinesis video stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KinesisVideoStreamRecordingSourceRuntimeConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RecordingStreamConfiguration[] Streams { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FragmentSelector FragmentSelector { get; set; }
	}
	
	/// <summary>
	/// A structure that holds the settings for recording media.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecordingStreamConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string StreamArn { get; set; }
	}
	
	/// <summary>
	/// <p>Describes the timestamp range and timestamp origin of a range of fragments.</p> <p>Only fragments with a start timestamp greater than or equal to the given start time and less than or equal to the end time are returned. For example, say a stream contains fragments with the following start timestamps:</p> <ul> <li> <p>00:00:00</p> </li> <li> <p>00:00:02</p> </li> <li> <p>00:00:04</p> </li> <li> <p>00:00:06</p> </li> </ul> <p>A fragment selector range with a start time of 00:00:01 and end time of 00:00:04 would return the fragments with start times of 00:00:02 and 00:00:04.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FragmentSelector
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FragmentSelectorType FragmentSelectorType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TimestampRange TimestampRange { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FragmentSelectorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ProducerTimestamp")]
		ProducerTimestamp = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ServerTimestamp")]
		ServerTimestamp = 1,
	}
	
	/// <summary>
	/// The range of timestamps to return.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimestampRange
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTimestamp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTimestamp { get; set; }
	}
	
	/// <summary>
	/// A structure that holds the settings for transmitting media files to the Amazon S3 bucket. If specified, the settings in this structure override any settings in <code>S3RecordingSinkConfiguration</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class S3RecordingSinkRuntimeConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Destination { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RecordingFileFormat RecordingFileFormat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RecordingFileFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Wav")]
		Wav = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Opus")]
		Opus = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateMediaInsightsPipelineConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MediaInsightsPipelineConfiguration MediaInsightsPipelineConfiguration { get; set; }
	}
	
	/// <summary>
	/// A structure that contains the configuration settings for a media insights pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaInsightsPipelineConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MediaInsightsPipelineConfigurationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MediaInsightsPipelineConfigurationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RealTimeAlertConfiguration RealTimeAlertConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaInsightsPipelineConfigurationElement[] Elements { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MediaInsightsPipelineConfigurationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdatedTimestamp { get; set; }
	}
	
	/// <summary>
	/// A structure that contains the configuration settings for real-time alerts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RealTimeAlertConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RealTimeAlertRule[] Rules { get; set; }
	}
	
	/// <summary>
	/// Specifies the words or phrases that trigger an alert.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RealTimeAlertRule
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RealTimeAlertRuleType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KeywordMatchConfiguration KeywordMatchConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SentimentConfiguration SentimentConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IssueDetectionConfiguration IssueDetectionConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RealTimeAlertRuleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KeywordMatch")]
		KeywordMatch = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Sentiment")]
		Sentiment = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IssueDetection")]
		IssueDetection = 2,
	}
	
	/// <summary>
	/// A structure that contains the settings for a keyword match task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeywordMatchConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RuleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Keywords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Negate { get; set; }
	}
	
	/// <summary>
	/// A structure that contains the configuration settings for a sentiment analysis task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SentimentConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RuleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SentimentType SentimentType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int TimePeriod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SentimentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NEGATIVE")]
		NEGATIVE = 0,
	}
	
	/// <summary>
	/// A structure that contains the configuration settings for an issue detection task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IssueDetectionConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RuleName { get; set; }
	}
	
	/// <summary>
	/// An element in a media insights pipeline configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaInsightsPipelineConfigurationElement
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MediaInsightsPipelineConfigurationElementType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AmazonTranscribeCallAnalyticsProcessorConfiguration AmazonTranscribeCallAnalyticsProcessorConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AmazonTranscribeProcessorConfiguration AmazonTranscribeProcessorConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KinesisDataStreamSinkConfiguration KinesisDataStreamSinkConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public S3RecordingSinkConfiguration S3RecordingSinkConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceAnalyticsProcessorConfiguration VoiceAnalyticsProcessorConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LambdaFunctionSinkConfiguration LambdaFunctionSinkConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SqsQueueSinkConfiguration SqsQueueSinkConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SnsTopicSinkConfiguration SnsTopicSinkConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MediaInsightsPipelineConfigurationElementType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonTranscribeCallAnalyticsProcessor")]
		AmazonTranscribeCallAnalyticsProcessor = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VoiceAnalyticsProcessor")]
		VoiceAnalyticsProcessor = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonTranscribeProcessor")]
		AmazonTranscribeProcessor = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KinesisDataStreamSink")]
		KinesisDataStreamSink = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LambdaFunctionSink")]
		LambdaFunctionSink = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SqsQueueSink")]
		SqsQueueSink = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SnsTopicSink")]
		SnsTopicSink = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="S3RecordingSink")]
		S3RecordingSink = 7,
	}
	
	/// <summary>
	/// A structure that contains the configuration settings for an Amazon Transcribe call analytics processor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AmazonTranscribeCallAnalyticsProcessorConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CallAnalyticsLanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VocabularyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VocabularyFilterName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VocabularyFilterMethod VocabularyFilterMethod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LanguageModelName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnablePartialResultsStabilization { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PartialResultsStability PartialResultsStability { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContentType ContentIdentificationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContentType ContentRedactionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PiiEntityTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> FilterPartialResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PostCallAnalyticsSettings PostCallAnalyticsSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CallAnalyticsStreamCategories { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CallAnalyticsLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-US")]
		enMinusUS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-GB")]
		enMinusGB = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-US")]
		esMinusUS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-CA")]
		frMinusCA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-FR")]
		frMinusFR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-AU")]
		enMinusAU = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="it-IT")]
		itMinusIT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de-DE")]
		deMinusDE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pt-BR")]
		ptMinusBR = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VocabularyFilterMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="remove")]
		remove = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mask")]
		mask = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tag")]
		tag = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PartialResultsStability
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="high")]
		high = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="medium")]
		medium = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="low")]
		low = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PII")]
		PII = 0,
	}
	
	/// <summary>
	/// <p>Allows you to specify additional settings for your Call Analytics post-call request, including output locations for your redacted transcript, which IAM role to use, and which encryption key to use.</p> <p> <code>DataAccessRoleArn</code> and <code>OutputLocation</code> are required fields.</p> <p> <code>PostCallAnalyticsSettings</code> provides the same insights as a Call Analytics post-call transcription. For more information, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/tca-post-call.html">Post-call analytics with real-time transcriptions</a> in the <i>Amazon Transcribe Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PostCallAnalyticsSettings
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OutputLocation { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContentRedactionOutput ContentRedactionOutput { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OutputEncryptionKMSKeyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRedactionOutput
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="redacted")]
		redacted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="redacted_and_unredacted")]
		redacted_and_unredacted = 1,
	}
	
	/// <summary>
	/// A structure that contains the configuration settings for an Amazon Transcribe processor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AmazonTranscribeProcessorConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CallAnalyticsLanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VocabularyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VocabularyFilterName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VocabularyFilterMethod VocabularyFilterMethod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ShowSpeakerLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnablePartialResultsStabilization { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PartialResultsStability PartialResultsStability { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContentType ContentIdentificationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContentType ContentRedactionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PiiEntityTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LanguageModelName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> FilterPartialResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IdentifyLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LanguageOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CallAnalyticsLanguageCode PreferredLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VocabularyNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VocabularyFilterNames { get; set; }
	}
	
	/// <summary>
	/// A structure that contains the configuration settings for a Kinesis Data Stream sink.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KinesisDataStreamSinkConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InsightsTarget { get; set; }
	}
	
	/// <summary>
	/// The structure that holds the settings for transmitting media to the Amazon S3 bucket. These values are used as defaults if <code>S3RecordingSinkRuntimeConfiguration</code> is not specified.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class S3RecordingSinkConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecordingFileFormat RecordingFileFormat { get; set; }
	}
	
	/// <summary>
	/// The configuration settings for a voice analytics processor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VoiceAnalyticsProcessorConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ArtifactsState SpeakerSearchStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ArtifactsState VoiceToneAnalysisStatus { get; set; }
	}
	
	/// <summary>
	/// A structure that contains the configuration settings for an AWS Lambda function's data sink.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LambdaFunctionSinkConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InsightsTarget { get; set; }
	}
	
	/// <summary>
	/// The configuration settings for the SQS sink.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SqsQueueSinkConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InsightsTarget { get; set; }
	}
	
	/// <summary>
	/// The configuration settings for the SNS topic sink.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SnsTopicSinkConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InsightsTarget { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateMediaLiveConnectorPipelineResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MediaLiveConnectorPipeline MediaLiveConnectorPipeline { get; set; }
	}
	
	/// <summary>
	/// The connector pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaLiveConnectorPipeline
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LiveConnectorSourceConfiguration[] Sources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LiveConnectorSinkConfiguration[] Sinks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MediaPipelineId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MediaPipelineArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaPipelineStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdatedTimestamp { get; set; }
	}
	
	/// <summary>
	/// The data source configuration object of a streaming media pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveConnectorSourceConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MediaPipelineSourceType SourceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ChimeSdkMeetingLiveConnectorConfiguration ChimeSdkMeetingLiveConnectorConfiguration { get; set; }
	}
	
	/// <summary>
	/// The media pipeline's configuration object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChimeSdkMeetingLiveConnectorConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LiveConnectorMuxType MuxType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CompositedVideoArtifactsConfiguration CompositedVideo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourceConfiguration SourceConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LiveConnectorMuxType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AudioWithCompositedVideo")]
		AudioWithCompositedVideo = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AudioWithActiveSpeakerVideo")]
		AudioWithActiveSpeakerVideo = 1,
	}
	
	/// <summary>
	/// The media pipeline's sink configuration settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveConnectorSinkConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LiveConnectorSinkType SinkType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LiveConnectorRTMPConfiguration RTMPConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LiveConnectorSinkType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RTMP")]
		RTMP = 0,
	}
	
	/// <summary>
	/// The media pipeline's RTMP configuration object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveConnectorRTMPConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AudioChannelsOption AudioChannels { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AudioSampleRate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AudioChannelsOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Stereo")]
		Stereo = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mono")]
		Mono = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMediaCapturePipelineResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MediaCapturePipeline MediaCapturePipeline { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMediaInsightsPipelineConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MediaInsightsPipelineConfiguration MediaInsightsPipelineConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMediaPipelineResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MediaPipeline MediaPipeline { get; set; }
	}
	
	/// <summary>
	/// A pipeline consisting of a media capture, media concatenation, or live-streaming pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaPipeline
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MediaCapturePipeline MediaCapturePipeline { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaLiveConnectorPipeline MediaLiveConnectorPipeline { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaConcatenationPipeline MediaConcatenationPipeline { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaInsightsPipeline MediaInsightsPipeline { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMediaCapturePipelinesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MediaCapturePipelineSummary[] MediaCapturePipelines { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The summary data of a media capture pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaCapturePipelineSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MediaPipelineId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MediaPipelineArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMediaInsightsPipelineConfigurationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MediaInsightsPipelineConfigurationSummary[] MediaInsightsPipelineConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A summary of the media insights pipeline configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaInsightsPipelineConfigurationSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MediaInsightsPipelineConfigurationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MediaInsightsPipelineConfigurationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MediaInsightsPipelineConfigurationArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMediaPipelinesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MediaPipelineSummary[] MediaPipelines { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The summary of the media pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaPipelineSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MediaPipelineId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MediaPipelineArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateMediaInsightsPipelineConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MediaInsightsPipelineConfiguration MediaInsightsPipelineConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ActiveSpeakerPosition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TopLeft")]
		TopLeft = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TopRight")]
		TopRight = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BottomLeft")]
		BottomLeft = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BottomRight")]
		BottomRight = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ArtifactsConcatenationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Enabled")]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Disabled")]
		Disabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConcatenationSinkType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="S3Bucket")]
		S3Bucket = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateMediaCapturePipelineRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MediaPipelineSourceType SourceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MediaPipelineSinkType SinkType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SinkArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChimeSdkMeetingConfiguration ChimeSdkMeetingConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateMediaConcatenationPipelineRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConcatenationSource[] Sources { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConcatenationSink[] Sinks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateMediaInsightsPipelineConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MediaInsightsPipelineConfigurationName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RealTimeAlertConfiguration RealTimeAlertConfiguration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MediaInsightsPipelineConfigurationElement[] Elements { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateMediaInsightsPipelineRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MediaInsightsPipelineConfigurationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KinesisVideoStreamSourceRuntimeConfiguration KinesisVideoStreamSourceRuntimeConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaInsightsRuntimeMetadata MediaInsightsRuntimeMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KinesisVideoStreamRecordingSourceRuntimeConfiguration KinesisVideoStreamRecordingSourceRuntimeConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public S3RecordingSinkRuntimeConfiguration S3RecordingSinkRuntimeConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateMediaLiveConnectorPipelineRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LiveConnectorSourceConfiguration[] Sources { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LiveConnectorSinkConfiguration[] Sinks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteMediaCapturePipelineRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteMediaInsightsPipelineConfigurationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteMediaPipelineRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMediaCapturePipelineRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMediaInsightsPipelineConfigurationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMediaPipelineRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HighlightColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Black")]
		Black = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Blue")]
		Blue = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Red")]
		Red = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Green")]
		Green = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="White")]
		White = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Yellow")]
		Yellow = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMediaCapturePipelinesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMediaInsightsPipelineConfigurationsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMediaPipelinesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LiveConnectorSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ChimeSdkMeeting")]
		ChimeSdkMeeting = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MediaPipelineStatusUpdate
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pause")]
		Pause = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Resume")]
		Resume = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateMediaInsightsPipelineConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RealTimeAlertConfiguration RealTimeAlertConfiguration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MediaInsightsPipelineConfigurationElement[] Elements { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateMediaInsightsPipelineStatusRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MediaPipelineStatusUpdate UpdateStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VoiceAnalyticsConfigurationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Enabled")]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Disabled")]
		Disabled = 1,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates a media pipeline.
		/// CreateMediaCapturePipeline sdk-media-capture-pipelines
		/// </summary>
		public async Task CreateMediaCapturePipelineAsync(CreateMediaCapturePipelinePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sdk-media-capture-pipelines";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of media pipelines.
		/// ListMediaCapturePipelines sdk-media-capture-pipelines
		/// </summary>
		/// <param name="next_token">The token used to retrieve the next page of results.
		/// Max length: 4096
		// </param>
		/// <param name="max_results">The maximum number of results to return in a single call. Valid Range: 1 - 99.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListMediaCapturePipelinesResponse> ListMediaCapturePipelinesAsync(string next_token, int max_results, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sdk-media-capture-pipelines?next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&max-results="+max_results+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListMediaCapturePipelinesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a media concatenation pipeline.
		/// CreateMediaConcatenationPipeline sdk-media-concatenation-pipelines
		/// </summary>
		public async Task CreateMediaConcatenationPipelineAsync(CreateMediaConcatenationPipelinePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sdk-media-concatenation-pipelines";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a media insights pipeline.
		/// CreateMediaInsightsPipeline media-insights-pipelines
		/// </summary>
		public async Task CreateMediaInsightsPipelineAsync(CreateMediaInsightsPipelinePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "media-insights-pipelines";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// A structure that contains the static configurations for a media insights pipeline.
		/// CreateMediaInsightsPipelineConfiguration media-insights-pipeline-configurations
		/// </summary>
		public async Task CreateMediaInsightsPipelineConfigurationAsync(CreateMediaInsightsPipelineConfigurationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "media-insights-pipeline-configurations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the available media insights pipeline configurations.
		/// ListMediaInsightsPipelineConfigurations media-insights-pipeline-configurations
		/// </summary>
		/// <param name="next_token">The token used to return the next page of results.
		/// Max length: 4096
		// </param>
		/// <param name="max_results">The maximum number of results to return in a single call.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListMediaInsightsPipelineConfigurationsResponse> ListMediaInsightsPipelineConfigurationsAsync(string next_token, int max_results, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "media-insights-pipeline-configurations?next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&max-results="+max_results+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListMediaInsightsPipelineConfigurationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a media live connector pipeline in an Amazon Chime SDK meeting.
		/// CreateMediaLiveConnectorPipeline sdk-media-live-connector-pipelines
		/// </summary>
		public async Task CreateMediaLiveConnectorPipelineAsync(CreateMediaLiveConnectorPipelinePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sdk-media-live-connector-pipelines";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the media pipeline.
		/// DeleteMediaCapturePipeline sdk-media-capture-pipelines/{mediaPipelineId}
		/// </summary>
		/// <param name="mediaPipelineId">The ID of the media pipeline being deleted. 
		/// Max length: 36
		/// Min length: 36
		// </param>
		public async Task DeleteMediaCapturePipelineAsync(string mediaPipelineId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sdk-media-capture-pipelines/"+ (mediaPipelineId==null? "" : System.Uri.EscapeDataString(mediaPipelineId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an existing media pipeline.
		/// GetMediaCapturePipeline sdk-media-capture-pipelines/{mediaPipelineId}
		/// </summary>
		/// <param name="mediaPipelineId">The ID of the pipeline that you want to get.
		/// Max length: 36
		/// Min length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<GetMediaCapturePipelineResponse> GetMediaCapturePipelineAsync(string mediaPipelineId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sdk-media-capture-pipelines/"+ (mediaPipelineId==null? "" : System.Uri.EscapeDataString(mediaPipelineId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetMediaCapturePipelineResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified configuration settings.
		/// DeleteMediaInsightsPipelineConfiguration media-insights-pipeline-configurations/{identifier}
		/// </summary>
		/// <param name="identifier">The unique identifier of the resource to be deleted. Valid values include the name and ARN of the media insights pipeline configuration.
		/// Max length: 1024
		// </param>
		public async Task DeleteMediaInsightsPipelineConfigurationAsync(string identifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "media-insights-pipeline-configurations/"+ (identifier==null? "" : System.Uri.EscapeDataString(identifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the configuration settings for a media insights pipeline.
		/// GetMediaInsightsPipelineConfiguration media-insights-pipeline-configurations/{identifier}
		/// </summary>
		/// <param name="identifier">The unique identifier of the requested resource. Valid values include the name and ARN of the media insights pipeline configuration.
		/// Max length: 1024
		// </param>
		/// <returns>Success</returns>
		public async Task<GetMediaInsightsPipelineConfigurationResponse> GetMediaInsightsPipelineConfigurationAsync(string identifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "media-insights-pipeline-configurations/"+ (identifier==null? "" : System.Uri.EscapeDataString(identifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetMediaInsightsPipelineConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the media insights pipeline's configuration settings.
		/// UpdateMediaInsightsPipelineConfiguration media-insights-pipeline-configurations/{identifier}
		/// </summary>
		/// <param name="identifier">The unique identifier for the resource to be updated. Valid values include the name and ARN of the media insights pipeline configuration.
		/// Max length: 1024
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateMediaInsightsPipelineConfigurationResponse> UpdateMediaInsightsPipelineConfigurationAsync(string identifier, UpdateMediaInsightsPipelineConfigurationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "media-insights-pipeline-configurations/"+ (identifier==null? "" : System.Uri.EscapeDataString(identifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateMediaInsightsPipelineConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the media pipeline.
		/// DeleteMediaPipeline sdk-media-pipelines/{mediaPipelineId}
		/// </summary>
		/// <param name="mediaPipelineId">The ID of the media pipeline to delete.
		/// Max length: 36
		/// Min length: 36
		// </param>
		public async Task DeleteMediaPipelineAsync(string mediaPipelineId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sdk-media-pipelines/"+ (mediaPipelineId==null? "" : System.Uri.EscapeDataString(mediaPipelineId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an existing media pipeline.
		/// GetMediaPipeline sdk-media-pipelines/{mediaPipelineId}
		/// </summary>
		/// <param name="mediaPipelineId">The ID of the pipeline that you want to get.
		/// Max length: 36
		/// Min length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<GetMediaPipelineResponse> GetMediaPipelineAsync(string mediaPipelineId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sdk-media-pipelines/"+ (mediaPipelineId==null? "" : System.Uri.EscapeDataString(mediaPipelineId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetMediaPipelineResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of media pipelines.
		/// ListMediaPipelines sdk-media-pipelines
		/// </summary>
		/// <param name="next_token">The token used to retrieve the next page of results.
		/// Max length: 4096
		// </param>
		/// <param name="max_results">The maximum number of results to return in a single call. Valid Range: 1 - 99.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListMediaPipelinesResponse> ListMediaPipelinesAsync(string next_token, int max_results, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sdk-media-pipelines?next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&max-results="+max_results+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListMediaPipelinesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the tags available for a media pipeline.
		/// ListTagsForResource tags#arn
		/// </summary>
		/// <param name="arn">The ARN of the media pipeline associated with any tags. The ARN consists of the pipeline's region, resource ID, and pipeline ID.
		/// Max length: 1011
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string arn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags#arn?arn=" + (arn==null? "" : System.Uri.EscapeDataString(arn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The ARN of the media pipeline that you want to tag. Consists of the pipeline's endpoint region, resource ID, and pipeline ID.
		/// TagResource tags#operation=tag-resource
		/// </summary>
		public async Task TagResourceAsync(TagResourceOperation operation, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags#operation=tag-resource?operation=" + operation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes any tags from a media pipeline.
		/// UntagResource tags#operation=untag-resource
		/// </summary>
		public async Task UntagResourceAsync(UntagResourceOperation operation, UntagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags#operation=untag-resource?operation=" + operation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the status of a media insights pipeline.
		/// UpdateMediaInsightsPipelineStatus media-insights-pipeline-status/{identifier}
		/// </summary>
		/// <param name="identifier">The unique identifier of the resource to be updated. Valid values include the ID and ARN of the media insights pipeline.
		/// Max length: 1024
		// </param>
		/// <returns>Success</returns>
		public async Task UpdateMediaInsightsPipelineStatusAsync(string identifier, UpdateMediaInsightsPipelineStatusPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "media-insights-pipeline-status/"+ (identifier==null? "" : System.Uri.EscapeDataString(identifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public class CreateMediaCapturePipelinePostBody
	{
		
		/// <summary>
		/// Source type from which the media artifacts are captured. A Chime SDK Meeting is the only supported source.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MediaPipelineSourceType SourceType { get; set; }
		
		/// <summary>
		/// ARN of the source from which the media artifacts are captured.
		/// Required
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: ^arn[\/\:\-\_\.a-zA-Z0-9]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn[\/\:\-\_\.a-zA-Z0-9]+$")]
		public string SourceArn { get; set; }
		
		/// <summary>
		/// Destination type to which the media artifacts are saved. You must use an S3 bucket.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MediaPipelineSinkType SinkType { get; set; }
		
		/// <summary>
		/// The ARN of the sink type.
		/// Required
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: ^arn[\/\:\-\_\.a-zA-Z0-9]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn[\/\:\-\_\.a-zA-Z0-9]+$")]
		public string SinkArn { get; set; }
		
		/// <summary>
		/// The unique identifier for the client request. The token makes the API request idempotent. Use a unique token for each media pipeline request.
		/// Max length: 64
		/// Min length: 2
		/// Pattern: [-_a-zA-Z0-9]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[-_a-zA-Z0-9]*")]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// The configuration object of the Amazon Chime SDK meeting for a specified media pipeline. <code>SourceType</code> must be <code>ChimeSdkMeeting</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateMediaCapturePipelinePostBodyChimeSdkMeetingConfiguration ChimeSdkMeetingConfiguration { get; set; }
		
		/// <summary>
		/// The tag key-value pairs.
		/// Minimum items: 1
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	public class CreateMediaCapturePipelinePostBodyChimeSdkMeetingConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SourceConfiguration SourceConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ArtifactsConfiguration ArtifactsConfiguration { get; set; }
	}
	
	public class CreateMediaConcatenationPipelinePostBody
	{
		
		/// <summary>
		/// An object that specifies the sources for the media concatenation pipeline.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public ConcatenationSource[] Sources { get; set; }
		
		/// <summary>
		/// An object that specifies the data sinks for the media concatenation pipeline.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public ConcatenationSink[] Sinks { get; set; }
		
		/// <summary>
		/// The unique identifier for the client request. The token makes the API request idempotent. Use a unique token for each media concatenation pipeline request.
		/// Max length: 64
		/// Min length: 2
		/// Pattern: [-_a-zA-Z0-9]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[-_a-zA-Z0-9]*")]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// The tags associated with the media concatenation pipeline.
		/// Minimum items: 1
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	public class CreateMediaInsightsPipelinePostBody
	{
		
		/// <summary>
		/// The ARN of the pipeline's configuration.
		/// Required
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: ^arn[\/\:\-\_\.a-zA-Z0-9]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn[\/\:\-\_\.a-zA-Z0-9]+$")]
		public string MediaInsightsPipelineConfigurationArn { get; set; }
		
		/// <summary>
		/// The runtime configuration settings for the Kinesis video stream source.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateMediaInsightsPipelinePostBodyKinesisVideoStreamSourceRuntimeConfiguration KinesisVideoStreamSourceRuntimeConfiguration { get; set; }
		
		/// <summary>
		/// The runtime metadata for the media insights pipeline. Consists of a key-value map of strings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> MediaInsightsRuntimeMetadata { get; set; }
		
		/// <summary>
		/// A structure that contains the runtime settings for recording a Kinesis video stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateMediaInsightsPipelinePostBodyKinesisVideoStreamRecordingSourceRuntimeConfiguration KinesisVideoStreamRecordingSourceRuntimeConfiguration { get; set; }
		
		/// <summary>
		/// A structure that holds the settings for transmitting media files to the Amazon S3 bucket. If specified, the settings in this structure override any settings in <code>S3RecordingSinkConfiguration</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateMediaInsightsPipelinePostBodyS3RecordingSinkRuntimeConfiguration S3RecordingSinkRuntimeConfiguration { get; set; }
		
		/// <summary>
		/// The tags assigned to the media insights pipeline.
		/// Minimum items: 1
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// The unique identifier for the media insights pipeline request.
		/// Max length: 64
		/// Min length: 2
		/// Pattern: [-_a-zA-Z0-9]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[-_a-zA-Z0-9]*")]
		public string ClientRequestToken { get; set; }
	}
	
	public class CreateMediaInsightsPipelinePostBodyKinesisVideoStreamSourceRuntimeConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StreamConfiguration[] Streams { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaEncoding MediaEncoding { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MediaSampleRate { get; set; }
	}
	
	public class CreateMediaInsightsPipelinePostBodyKinesisVideoStreamRecordingSourceRuntimeConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RecordingStreamConfiguration[] Streams { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FragmentSelector FragmentSelector { get; set; }
	}
	
	public class CreateMediaInsightsPipelinePostBodyS3RecordingSinkRuntimeConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecordingFileFormat RecordingFileFormat { get; set; }
	}
	
	public class CreateMediaInsightsPipelineConfigurationPostBody
	{
		
		/// <summary>
		/// The name of the media insights pipeline configuration.
		/// Required
		/// Max length: 64
		/// Min length: 2
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9a-zA-Z._-]+")]
		public string MediaInsightsPipelineConfigurationName { get; set; }
		
		/// <summary>
		/// The ARN of the role used by the service to access Amazon Web Services resources, including <code>Transcribe</code> and <code>Transcribe Call Analytics</code>, on the caller’s behalf.
		/// Required
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: ^arn[\/\:\-\_\.a-zA-Z0-9]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn[\/\:\-\_\.a-zA-Z0-9]+$")]
		public string ResourceAccessRoleArn { get; set; }
		
		/// <summary>
		/// A structure that contains the configuration settings for real-time alerts.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateMediaInsightsPipelineConfigurationPostBodyRealTimeAlertConfiguration RealTimeAlertConfiguration { get; set; }
		
		/// <summary>
		/// The elements in the request, such as a processor for Amazon Transcribe or a sink for a Kinesis Data Stream.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MediaInsightsPipelineConfigurationElement[] Elements { get; set; }
		
		/// <summary>
		/// The tags assigned to the media insights pipeline configuration.
		/// Minimum items: 1
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// The unique identifier for the media insights pipeline configuration request.
		/// Max length: 64
		/// Min length: 2
		/// Pattern: [-_a-zA-Z0-9]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[-_a-zA-Z0-9]*")]
		public string ClientRequestToken { get; set; }
	}
	
	public class CreateMediaInsightsPipelineConfigurationPostBodyRealTimeAlertConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RealTimeAlertRule[] Rules { get; set; }
	}
	
	public class CreateMediaLiveConnectorPipelinePostBody
	{
		
		/// <summary>
		/// The media live connector pipeline's data sources.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public LiveConnectorSourceConfiguration[] Sources { get; set; }
		
		/// <summary>
		/// The media live connector pipeline's data sinks.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public LiveConnectorSinkConfiguration[] Sinks { get; set; }
		
		/// <summary>
		/// The token assigned to the client making the request.
		/// Max length: 64
		/// Min length: 2
		/// Pattern: [-_a-zA-Z0-9]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[-_a-zA-Z0-9]*")]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// The tags associated with the media live connector pipeline.
		/// Minimum items: 1
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	public class UpdateMediaInsightsPipelineConfigurationPutBody
	{
		
		/// <summary>
		/// The ARN of the role used by the service to access Amazon Web Services resources.
		/// Required
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: ^arn[\/\:\-\_\.a-zA-Z0-9]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn[\/\:\-\_\.a-zA-Z0-9]+$")]
		public string ResourceAccessRoleArn { get; set; }
		
		/// <summary>
		/// A structure that contains the configuration settings for real-time alerts.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateMediaInsightsPipelineConfigurationPutBodyRealTimeAlertConfiguration RealTimeAlertConfiguration { get; set; }
		
		/// <summary>
		/// The elements in the request, such as a processor for Amazon Transcribe or a sink for a Kinesis Data Stream..
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MediaInsightsPipelineConfigurationElement[] Elements { get; set; }
	}
	
	public class UpdateMediaInsightsPipelineConfigurationPutBodyRealTimeAlertConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RealTimeAlertRule[] Rules { get; set; }
	}
	
	public enum TagResourceOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tag-resource")]
		tagMinusresource = 0,
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// The ARN of the media pipeline associated with any tags. The ARN consists of the pipeline's endpoint region, resource ID, and pipeline ID.
		/// Required
		/// Max length: 1011
		/// Min length: 1
		/// Pattern: ^arn[\/\:\-\_\.a-zA-Z0-9]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1011)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn[\/\:\-\_\.a-zA-Z0-9]+$")]
		public string ResourceARN { get; set; }
		
		/// <summary>
		/// The tags associated with the specified media pipeline.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 200
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	public enum UntagResourceOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="untag-resource")]
		untagMinusresource = 0,
	}
	
	public class UntagResourcePostBody
	{
		
		/// <summary>
		/// The ARN of the pipeline that you want to untag.
		/// Required
		/// Max length: 1011
		/// Min length: 1
		/// Pattern: ^arn[\/\:\-\_\.a-zA-Z0-9]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1011)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn[\/\:\-\_\.a-zA-Z0-9]+$")]
		public string ResourceARN { get; set; }
		
		/// <summary>
		/// The key/value pairs in the tag that you want to remove.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 200
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string[] TagKeys { get; set; }
	}
	
	public class UpdateMediaInsightsPipelineStatusPutBody
	{
		
		/// <summary>
		/// The requested status of the media insights pipeline.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MediaPipelineStatusUpdate UpdateStatus { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
