//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Delete a Fact entry identified by the id.
		/// FactDeleteById fact
		/// </summary>
		/// <param name="id">Fact ID</param>
		/// <returns>200  response</returns>
		public async Task FactDeleteByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fact?id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a Fact belonging to the id.
		/// FactGetById fact
		/// </summary>
		/// <param name="id">ID of the fact to fetch</param>
		/// <returns>200  response</returns>
		public async Task FactGetByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fact?id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a Fact entry to the database (private collection).
		/// FactPutByFactAndCategoryAndSubcategoryAndTags fact
		/// </summary>
		/// <param name="fact">Fact Text</param>
		/// <param name="category">Category of the fact</param>
		/// <param name="subcategory">Sub Category of the fact</param>
		/// <param name="tags">Tags</param>
		/// <returns>200  response</returns>
		public async Task FactPutByFactAndCategoryAndSubcategoryAndTagsAsync(string fact, string category, string subcategory, string tags, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fact?fact=" + (fact==null? "" : System.Uri.EscapeDataString(fact))+"&category=" + (category==null? "" : System.Uri.EscapeDataString(category))+"&subcategory=" + (subcategory==null? "" : System.Uri.EscapeDataString(subcategory))+"&tags=" + (tags==null? "" : System.Uri.EscapeDataString(tags));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a random Fact.
		/// FactCategoriesGetByStart fact/categories
		/// </summary>
		/// <param name="start">start</param>
		/// <returns>200  response</returns>
		public async Task FactCategoriesGetByStartAsync(string start, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fact/categories?start=" + (start==null? "" : System.Uri.EscapeDataString(start));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get fact of the day for the given category.
		/// FactFodGetByCategory fact/fod
		/// </summary>
		/// <param name="category">Category to get the fact of the day from. Must be one from the list returned from /fact/fod/categories</param>
		/// <returns>200  response</returns>
		public async Task FactFodGetByCategoryAsync(string category, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fact/fod?category=" + (category==null? "" : System.Uri.EscapeDataString(category));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the list of supported fact of the day categories.
		/// FactFodCategoriesGet fact/fod/categories
		/// </summary>
		/// <returns>200  response</returns>
		public async Task FactFodCategoriesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fact/fod/categories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a random fact about a number
		/// FactNumbersGetByNumber fact/numbers
		/// </summary>
		/// <param name="number">Number value</param>
		/// <returns>200 Success response</returns>
		public async Task FactNumbersGetByNumberAsync(string number, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fact/numbers?number=" + (number==null? "" : System.Uri.EscapeDataString(number));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a random ( famous/ relatively famous ) person born on a given day and month
		/// FactOnthisdayBornGetByMonthAndDay fact/onthisday/born
		/// </summary>
		/// <param name="month">Optional month (1-12). Defaults to current month</param>
		/// <param name="day">Optional day of the month (1- 28/30/31 based on the month). Defaults to current day of the month.</param>
		/// <returns>200  response</returns>
		public async Task FactOnthisdayBornGetByMonthAndDayAsync(string month, string day, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fact/onthisday/born?month=" + (month==null? "" : System.Uri.EscapeDataString(month))+"&day=" + (day==null? "" : System.Uri.EscapeDataString(day));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a random ( famous/ relatively famous ) person died on a given day and month
		/// FactOnthisdayDiedGetByMonthAndDay fact/onthisday/died
		/// </summary>
		/// <param name="month">Optional month (1-12). Defaults to current month</param>
		/// <param name="day">Optional day of the month (1- 28/30/31 based on the month). Defaults to current day of the month.</param>
		/// <returns>200  response</returns>
		public async Task FactOnthisdayDiedGetByMonthAndDayAsync(string month, string day, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fact/onthisday/died?month=" + (month==null? "" : System.Uri.EscapeDataString(month))+"&day=" + (day==null? "" : System.Uri.EscapeDataString(day));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a random ( famous/ relatively famous ) historic event on a given day and month
		/// FactOnthisdayEventGetByMonthAndDay fact/onthisday/event
		/// </summary>
		/// <param name="month">Optional month (1-12). Defaults to current month</param>
		/// <param name="day">Optional day of the month (1- 28/30/31 based on the month). Defaults to current day of the month.</param>
		/// <returns>200  response</returns>
		public async Task FactOnthisdayEventGetByMonthAndDayAsync(string month, string day, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fact/onthisday/event?month=" + (month==null? "" : System.Uri.EscapeDataString(month))+"&day=" + (day==null? "" : System.Uri.EscapeDataString(day));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a random Fact for a given category(optional) and subcategory(optional).
		/// FactRandomGetByCategoryAndSubcategory fact/random
		/// </summary>
		/// <param name="category">Category to get the fact from</param>
		/// <param name="subcategory">Sub Category to get the fact from</param>
		/// <returns>200  response</returns>
		public async Task FactRandomGetByCategoryAndSubcategoryAsync(string category, string subcategory, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fact/random?category=" + (category==null? "" : System.Uri.EscapeDataString(category))+"&subcategory=" + (subcategory==null? "" : System.Uri.EscapeDataString(subcategory));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search for random Fact which has the text in the query, for a given category(optional) and subcategory(optional).
		/// FactSearchGetByQueryAndCategoryAndSubcategory fact/search
		/// </summary>
		/// <param name="query">Text to search for in the facts</param>
		/// <param name="category">Category to get the fact from</param>
		/// <param name="subcategory">Sub Category to get the fact from</param>
		/// <returns>200  response</returns>
		public async Task FactSearchGetByQueryAndCategoryAndSubcategoryAsync(string query, string category, string subcategory, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fact/search?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&category=" + (category==null? "" : System.Uri.EscapeDataString(category))+"&subcategory=" + (subcategory==null? "" : System.Uri.EscapeDataString(subcategory));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
