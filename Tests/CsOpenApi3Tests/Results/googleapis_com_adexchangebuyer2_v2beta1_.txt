//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An absolute date range, specified by its start date and end date. The supported range of dates begins 30 days before today and ends today. Validity checked upon filter set creation. If a filter set with an absolute date range is run at a later date more than 30 days after start_date, it will fail.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AbsoluteDateRange
	{
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public Date EndDate { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public Date StartDate { get; set; }
	}
	
	/// <summary>
	/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Date
	{
		
		/// <summary>
		/// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		/// <summary>
		/// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		/// <summary>
		/// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	/// <summary>
	/// Request to accept a proposal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AcceptProposalRequest
	{
		
		/// <summary>
		/// The last known client revision number of the proposal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proposalRevision")]
		public string ProposalRevision { get; set; }
	}
	
	/// <summary>
	/// Represents size of a single ad slot, or a creative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdSize
	{
		
		/// <summary>
		/// The height of the ad slot in pixels. This field will be present only when size type is `PIXEL`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public string Height { get; set; }
		
		/// <summary>
		/// The size type of the ad slot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeType")]
		public System.Nullable<AdSizeSizeType> SizeType { get; set; }
		
		/// <summary>
		/// The width of the ad slot in pixels. This field will be present only when size type is `PIXEL`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public string Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AdSizeSizeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIZE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PIXEL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERSTITIAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATIVE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLUID = 4,
	}
	
	/// <summary>
	/// Detected ad technology provider information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdTechnologyProviders
	{
		
		/// <summary>
		/// The detected ad technology provider IDs for this creative. See https://storage.googleapis.com/adx-rtb-dictionaries/providers.csv for mapping of provider ID to provided name, a privacy policy URL, and a list of domains which can be attributed to the provider. If the creative contains provider IDs that are outside of those listed in the `BidRequest.adslot.consented_providers_settings.consented_providers` field on the (Google bid protocol)[https://developers.google.com/authorized-buyers/rtb/downloads/realtime-bidding-proto] and the `BidRequest.user.ext.consented_providers_settings.consented_providers` field on the (OpenRTB protocol)[https://developers.google.com/authorized-buyers/rtb/downloads/openrtb-adx-proto], and a bid is submitted with that creative for an impression that will serve to an EEA user, the bid will be filtered before the auction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectedProviderIds")]
		public string[] DetectedProviderIds { get; set; }
		
		/// <summary>
		/// Whether the creative contains an unidentified ad technology provider. If true for a given creative, any bid submitted with that creative for an impression that will serve to an EEA user will be filtered before the auction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasUnidentifiedProvider")]
		public System.Nullable<System.Boolean> HasUnidentifiedProvider { get; set; }
	}
	
	/// <summary>
	/// A request for associating a deal and a creative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddDealAssociationRequest
	{
		
		/// <summary>
		/// The association between a creative and a deal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="association")]
		public CreativeDealAssociation Association { get; set; }
	}
	
	/// <summary>
	/// The association between a creative and a deal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreativeDealAssociation
	{
		
		/// <summary>
		/// The account the creative belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// The ID of the creative associated with the deal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeId")]
		public string CreativeId { get; set; }
		
		/// <summary>
		/// The externalDealId for the deal associated with the creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dealsId")]
		public string DealsId { get; set; }
	}
	
	/// <summary>
	/// Request message for adding a note to a given proposal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddNoteRequest
	{
		
		/// <summary>
		/// A proposal may be associated to several notes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public Note Note { get; set; }
	}
	
	/// <summary>
	/// A proposal may be associated to several notes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Note
	{
		
		/// <summary>
		/// Output only. The timestamp for when this note was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The role of the person (buyer/seller) creating the note.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creatorRole")]
		public System.Nullable<NoteCreatorRole> CreatorRole { get; set; }
		
		/// <summary>
		/// The actual note to attach. (max-length: 1024 unicode code units) Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note1 { get; set; }
		
		/// <summary>
		/// Output only. The unique ID for the note.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noteId")]
		public string NoteId { get; set; }
		
		/// <summary>
		/// Output only. The revision number of the proposal when the note is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proposalRevision")]
		public string ProposalRevision { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NoteCreatorRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUYER_SELLER_ROLE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUYER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELLER = 2,
	}
	
	/// <summary>
	/// Output only. The app type the restriction applies to for mobile device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppContext
	{
		
		/// <summary>
		/// The app types this restriction applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appTypes")]
		public string[] AppTypes { get; set; }
	}
	
	/// <summary>
	/// Output only. The auction type the restriction applies to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuctionContext
	{
		
		/// <summary>
		/// The auction types this restriction applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auctionTypes")]
		public string[] AuctionTypes { get; set; }
	}
	
	/// <summary>
	/// The set of metrics that are measured in numbers of bids, representing how many bids with the specified dimension values were considered eligible at each stage of the bidding funnel;
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BidMetricsRow
	{
		
		/// <summary>
		/// A metric value, with an expected value and a variance; represents a count that may be either exact or estimated (for example, when sampled).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bids")]
		public MetricValue Bids { get; set; }
		
		/// <summary>
		/// A metric value, with an expected value and a variance; represents a count that may be either exact or estimated (for example, when sampled).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bidsInAuction")]
		public MetricValue BidsInAuction { get; set; }
		
		/// <summary>
		/// A metric value, with an expected value and a variance; represents a count that may be either exact or estimated (for example, when sampled).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billedImpressions")]
		public MetricValue BilledImpressions { get; set; }
		
		/// <summary>
		/// A metric value, with an expected value and a variance; represents a count that may be either exact or estimated (for example, when sampled).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impressionsWon")]
		public MetricValue ImpressionsWon { get; set; }
		
		/// <summary>
		/// A metric value, with an expected value and a variance; represents a count that may be either exact or estimated (for example, when sampled).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="measurableImpressions")]
		public MetricValue MeasurableImpressions { get; set; }
		
		/// <summary>
		/// A metric value, with an expected value and a variance; represents a count that may be either exact or estimated (for example, when sampled).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reachedQueries")]
		public MetricValue ReachedQueries { get; set; }
		
		/// <summary>
		/// A response may include multiple rows, breaking down along various dimensions. Encapsulates the values of all dimensions for a given row.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowDimensions")]
		public RowDimensions RowDimensions { get; set; }
		
		/// <summary>
		/// A metric value, with an expected value and a variance; represents a count that may be either exact or estimated (for example, when sampled).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewableImpressions")]
		public MetricValue ViewableImpressions { get; set; }
	}
	
	/// <summary>
	/// A metric value, with an expected value and a variance; represents a count that may be either exact or estimated (for example, when sampled).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MetricValue
	{
		
		/// <summary>
		/// The expected value of the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
		
		/// <summary>
		/// The variance (for example, square of the standard deviation) of the metric value. If value is exact, variance is 0. Can be used to calculate margin of error as a percentage of value, using the following formula, where Z is the standard constant that depends on the preferred size of the confidence interval (for example, for 90% confidence interval, use Z = 1.645): marginOfError = 100 * Z * sqrt(variance) / value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variance")]
		public string Variance { get; set; }
	}
	
	/// <summary>
	/// A response may include multiple rows, breaking down along various dimensions. Encapsulates the values of all dimensions for a given row.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RowDimensions
	{
		
		/// <summary>
		/// The publisher identifier for this row, if a breakdown by [BreakdownDimension.PUBLISHER_IDENTIFIER](https://developers.google.com/authorized-buyers/apis/reference/rest/v2beta1/bidders.accounts.filterSets#FilterSet.BreakdownDimension) was requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherIdentifier")]
		public string PublisherIdentifier { get; set; }
		
		/// <summary>
		/// An interval of time, with an absolute start and end.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeInterval")]
		public TimeInterval TimeInterval { get; set; }
	}
	
	/// <summary>
	/// An interval of time, with an absolute start and end.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeInterval
	{
		
		/// <summary>
		/// The timestamp marking the end of the range (exclusive) for which data is included.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// The timestamp marking the start of the range (inclusive) for which data is included.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	/// <summary>
	/// The number of impressions with the specified dimension values that were considered to have no applicable bids, as described by the specified status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BidResponseWithoutBidsStatusRow
	{
		
		/// <summary>
		/// A metric value, with an expected value and a variance; represents a count that may be either exact or estimated (for example, when sampled).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impressionCount")]
		public MetricValue ImpressionCount { get; set; }
		
		/// <summary>
		/// A response may include multiple rows, breaking down along various dimensions. Encapsulates the values of all dimensions for a given row.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowDimensions")]
		public RowDimensions RowDimensions { get; set; }
		
		/// <summary>
		/// The status specifying why the bid responses were considered to have no applicable bids.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<BidResponseWithoutBidsStatusRowStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BidResponseWithoutBidsStatusRowStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESPONSES_WITHOUT_BIDS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESPONSES_WITHOUT_BIDS_FOR_ACCOUNT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESPONSES_WITHOUT_BIDS_FOR_DEAL = 3,
	}
	
	/// <summary>
	/// Represents a buyer of inventory. Each buyer is identified by a unique Authorized Buyers account ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Buyer
	{
		
		/// <summary>
		/// Authorized Buyers account ID of the buyer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
	}
	
	/// <summary>
	/// The number of impressions with the specified dimension values where the corresponding bid request or bid response was not successful, as described by the specified callout status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CalloutStatusRow
	{
		
		/// <summary>
		/// The ID of the callout status. See [callout-status-codes](https://developers.google.com/authorized-buyers/rtb/downloads/callout-status-codes).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calloutStatusId")]
		public System.Nullable<System.Int32> CalloutStatusId { get; set; }
		
		/// <summary>
		/// A metric value, with an expected value and a variance; represents a count that may be either exact or estimated (for example, when sampled).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impressionCount")]
		public MetricValue ImpressionCount { get; set; }
		
		/// <summary>
		/// A response may include multiple rows, breaking down along various dimensions. Encapsulates the values of all dimensions for a given row.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowDimensions")]
		public RowDimensions RowDimensions { get; set; }
	}
	
	/// <summary>
	/// Request to cancel an ongoing negotiation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelNegotiationRequest
	{
	}
	
	/// <summary>
	/// A client resource represents a client buyer—an agency, a brand, or an advertiser customer of the sponsor buyer. Users associated with the client buyer have restricted access to the Marketplace and certain other sections of the Authorized Buyers UI based on the role granted to the client buyer. All fields are required unless otherwise specified.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Client
	{
		
		/// <summary>
		/// The globally-unique numerical ID of the client. The value of this field is ignored in create and update operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientAccountId")]
		public string ClientAccountId { get; set; }
		
		/// <summary>
		/// Name used to represent this client to publishers. You may have multiple clients that map to the same entity, but for each client the combination of `clientName` and entity must be unique. You can specify this field as empty. Maximum length of 255 characters is allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientName")]
		public string ClientName { get; set; }
		
		/// <summary>
		/// Numerical identifier of the client entity. The entity can be an advertiser, a brand, or an agency. This identifier is unique among all the entities with the same type. The value of this field is ignored if the entity type is not provided. A list of all known advertisers with their identifiers is available in the [advertisers.txt](https://storage.googleapis.com/adx-rtb-dictionaries/advertisers.txt) file. A list of all known brands with their identifiers is available in the [brands.txt](https://storage.googleapis.com/adx-rtb-dictionaries/brands.txt) file. A list of all known agencies with their identifiers is available in the [agencies.txt](https://storage.googleapis.com/adx-rtb-dictionaries/agencies.txt) file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityId")]
		public string EntityId { get; set; }
		
		/// <summary>
		/// The name of the entity. This field is automatically fetched based on the type and ID. The value of this field is ignored in create and update operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityName")]
		public string EntityName { get; set; }
		
		/// <summary>
		/// An optional field for specifying the type of the client entity: `ADVERTISER`, `BRAND`, or `AGENCY`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityType")]
		public System.Nullable<ClientEntityType> EntityType { get; set; }
		
		/// <summary>
		/// Optional arbitrary unique identifier of this client buyer from the standpoint of its Ad Exchange sponsor buyer. This field can be used to associate a client buyer with the identifier in the namespace of its sponsor buyer, lookup client buyers by that identifier and verify whether an Ad Exchange counterpart of a given client buyer already exists. If present, must be unique among all the client buyers for its Ad Exchange sponsor buyer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerClientId")]
		public string PartnerClientId { get; set; }
		
		/// <summary>
		/// The role which is assigned to the client buyer. Each role implies a set of permissions granted to the client. Must be one of `CLIENT_DEAL_VIEWER`, `CLIENT_DEAL_NEGOTIATOR` or `CLIENT_DEAL_APPROVER`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public System.Nullable<ClientRole> Role { get; set; }
		
		/// <summary>
		/// The status of the client buyer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<ClientStatus> Status { get; set; }
		
		/// <summary>
		/// Whether the client buyer will be visible to sellers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibleToSeller")]
		public System.Nullable<System.Boolean> VisibleToSeller { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ClientEntityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTITY_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADVERTISER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRAND = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENCY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTITY_TYPE_UNCLASSIFIED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ClientRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLIENT_ROLE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLIENT_DEAL_VIEWER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLIENT_DEAL_NEGOTIATOR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLIENT_DEAL_APPROVER = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ClientStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLIENT_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 2,
	}
	
	/// <summary>
	/// A client user is created under a client buyer and has restricted access to the Marketplace and certain other sections of the Authorized Buyers UI based on the role granted to the associated client buyer. The only way a new client user can be created is through accepting an email invitation (see the accounts.clients.invitations.create method). All fields are required unless otherwise specified.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClientUser
	{
		
		/// <summary>
		/// Numerical account ID of the client buyer with which the user is associated; the buyer must be a client of the current sponsor buyer. The value of this field is ignored in an update operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientAccountId")]
		public string ClientAccountId { get; set; }
		
		/// <summary>
		/// User's email address. The value of this field is ignored in an update operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The status of the client user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<ClientUserStatus> Status { get; set; }
		
		/// <summary>
		/// The unique numerical ID of the client user that has accepted an invitation. The value of this field is ignored in an update operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ClientUserStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 3,
	}
	
	/// <summary>
	/// An invitation for a new client user to get access to the Authorized Buyers UI. All fields are required unless otherwise specified.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClientUserInvitation
	{
		
		/// <summary>
		/// Numerical account ID of the client buyer that the invited user is associated with. The value of this field is ignored in create operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientAccountId")]
		public string ClientAccountId { get; set; }
		
		/// <summary>
		/// The email address to which the invitation is sent. Email addresses should be unique among all client users under each sponsor buyer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The unique numerical ID of the invitation that is sent to the user. The value of this field is ignored in create operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invitationId")]
		public string InvitationId { get; set; }
	}
	
	/// <summary>
	/// Request message for indicating that the proposal's setup step is complete.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompleteSetupRequest
	{
	}
	
	/// <summary>
	/// Contains information on how a buyer or seller can be reached.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContactInformation
	{
		
		/// <summary>
		/// Email address for the contact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The name of the contact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Output only. Shows any corrections that were applied to this creative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Correction
	{
		
		/// <summary>
		/// The contexts for the correction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contexts")]
		public ServingContext[] Contexts { get; set; }
		
		/// <summary>
		/// Additional details about what was corrected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// The type of correction that was applied to the creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CorrectionType> Type { get; set; }
	}
	
	/// <summary>
	/// The serving context for this restriction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServingContext
	{
		
		/// <summary>
		/// Matches all contexts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="all")]
		public System.Nullable<ServingContextAll> All { get; set; }
		
		/// <summary>
		/// Output only. The app type the restriction applies to for mobile device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appType")]
		public AppContext AppType { get; set; }
		
		/// <summary>
		/// Output only. The auction type the restriction applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auctionType")]
		public AuctionContext AuctionType { get; set; }
		
		/// <summary>
		/// Output only. The Geo criteria the restriction applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public LocationContext Location { get; set; }
		
		/// <summary>
		/// Output only. The type of platform the restriction applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public PlatformContext Platform { get; set; }
		
		/// <summary>
		/// Output only. A security context.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityType")]
		public SecurityContext SecurityType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ServingContextAll
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIMPLE_CONTEXT = 0,
	}
	
	/// <summary>
	/// Output only. The Geo criteria the restriction applies to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LocationContext
	{
		
		/// <summary>
		/// IDs representing the geo location for this context. Refer to the [geo-table.csv](https://storage.googleapis.com/adx-rtb-dictionaries/geo-table.csv) file for different geo criteria IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCriteriaIds")]
		public int[] GeoCriteriaIds { get; set; }
	}
	
	/// <summary>
	/// Output only. The type of platform the restriction applies to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlatformContext
	{
		
		/// <summary>
		/// The platforms this restriction applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platforms")]
		public string[] Platforms { get; set; }
	}
	
	/// <summary>
	/// Output only. A security context.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SecurityContext
	{
		
		/// <summary>
		/// The security types in this context.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securities")]
		public string[] Securities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CorrectionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CORRECTION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VENDOR_IDS_ADDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSL_ATTRIBUTE_REMOVED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLASH_FREE_ATTRIBUTE_REMOVED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLASH_FREE_ATTRIBUTE_ADDED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUIRED_ATTRIBUTE_ADDED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUIRED_VENDOR_ADDED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSL_ATTRIBUTE_ADDED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_BANNER_VIDEO_ATTRIBUTE_ADDED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MRAID_ATTRIBUTE_ADDED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLASH_ATTRIBUTE_REMOVED = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_IN_SNIPPET_ATTRIBUTE_ADDED = 11,
	}
	
	/// <summary>
	/// A creative and its classification data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Creative
	{
		
		/// <summary>
		/// The account that this creative belongs to. Can be used to filter the response of the creatives.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// The link to AdChoices destination page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adChoicesDestinationUrl")]
		public string AdChoicesDestinationUrl { get; set; }
		
		/// <summary>
		/// Detected ad technology provider information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adTechnologyProviders")]
		public AdTechnologyProviders AdTechnologyProviders { get; set; }
		
		/// <summary>
		/// The name of the company being advertised in the creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserName")]
		public string AdvertiserName { get; set; }
		
		/// <summary>
		/// The agency ID for this creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agencyId")]
		public string AgencyId { get; set; }
		
		/// <summary>
		/// Output only. The last update timestamp of the creative through the API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiUpdateTime")]
		public string ApiUpdateTime { get; set; }
		
		/// <summary>
		/// All attributes for the ads that may be shown from this creative. Can be used to filter the response of the creatives.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string[] Attributes { get; set; }
		
		/// <summary>
		/// The set of destination URLs for the creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickThroughUrls")]
		public string[] ClickThroughUrls { get; set; }
		
		/// <summary>
		/// Output only. Shows any corrections that were applied to this creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corrections")]
		public Correction[] Corrections { get; set; }
		
		/// <summary>
		/// The buyer-defined creative ID of this creative. Can be used to filter the response of the creatives.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeId")]
		public string CreativeId { get; set; }
		
		/// <summary>
		/// Output only. The top-level deals status of this creative. If disapproved, an entry for 'auctionType=DIRECT_DEALS' (or 'ALL') in serving_restrictions will also exist. Note that this may be nuanced with other contextual restrictions, in which case, it may be preferable to read from serving_restrictions directly. Can be used to filter the response of the creatives.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dealsStatus")]
		public System.Nullable<CreativeDealsStatus> DealsStatus { get; set; }
		
		/// <summary>
		/// The set of declared destination URLs for the creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="declaredClickThroughUrls")]
		public string[] DeclaredClickThroughUrls { get; set; }
		
		/// <summary>
		/// Output only. Detected advertiser IDs, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectedAdvertiserIds")]
		public string[] DetectedAdvertiserIds { get; set; }
		
		/// <summary>
		/// Output only. The detected domains for this creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectedDomains")]
		public string[] DetectedDomains { get; set; }
		
		/// <summary>
		/// Output only. The detected languages for this creative. The order is arbitrary. The codes are 2 or 5 characters and are documented at https://developers.google.com/adwords/api/docs/appendix/languagecodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectedLanguages")]
		public string[] DetectedLanguages { get; set; }
		
		/// <summary>
		/// Output only. Detected product categories, if any. See the ad-product-categories.txt file in the technical documentation for a list of IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectedProductCategories")]
		public int[] DetectedProductCategories { get; set; }
		
		/// <summary>
		/// Output only. Detected sensitive categories, if any. See the ad-sensitive-categories.txt file in the technical documentation for a list of IDs. You should use these IDs along with the excluded-sensitive-category field in the bid request to filter your bids.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectedSensitiveCategories")]
		public int[] DetectedSensitiveCategories { get; set; }
		
		/// <summary>
		/// HTML content for a creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="html")]
		public HtmlContent Html { get; set; }
		
		/// <summary>
		/// The set of URLs to be called to record an impression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impressionTrackingUrls")]
		public string[] ImpressionTrackingUrls { get; set; }
		
		/// <summary>
		/// Native content for a creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="native")]
		public NativeContent Native { get; set; }
		
		/// <summary>
		/// Output only. The top-level open auction status of this creative. If disapproved, an entry for 'auctionType = OPEN_AUCTION' (or 'ALL') in serving_restrictions will also exist. Note that this may be nuanced with other contextual restrictions, in which case, it may be preferable to read from serving_restrictions directly. Can be used to filter the response of the creatives.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openAuctionStatus")]
		public CreativeDealsStatus OpenAuctionStatus { get; set; }
		
		/// <summary>
		/// All restricted categories for the ads that may be shown from this creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictedCategories")]
		public string[] RestrictedCategories { get; set; }
		
		/// <summary>
		/// Output only. The granular status of this ad in specific contexts. A context here relates to where something ultimately serves (for example, a physical location, a platform, an HTTPS versus HTTP request, or the type of auction).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servingRestrictions")]
		public ServingRestriction[] ServingRestrictions { get; set; }
		
		/// <summary>
		/// All vendor IDs for the ads that may be shown from this creative. See https://storage.googleapis.com/adx-rtb-dictionaries/vendors.txt for possible values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorIds")]
		public int[] VendorIds { get; set; }
		
		/// <summary>
		/// Output only. The version of this creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
		
		/// <summary>
		/// Video content for a creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="video")]
		public VideoContent Video { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeDealsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_CHECKED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONDITIONALLY_APPROVED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISAPPROVED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_REVIEW = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATUS_TYPE_UNSPECIFIED = 6,
	}
	
	/// <summary>
	/// HTML content for a creative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HtmlContent
	{
		
		/// <summary>
		/// The height of the HTML snippet in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// The HTML snippet that displays the ad when inserted in the web page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public string Snippet { get; set; }
		
		/// <summary>
		/// The width of the HTML snippet in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	/// <summary>
	/// Native content for a creative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NativeContent
	{
		
		/// <summary>
		/// The name of the advertiser or sponsor, to be displayed in the ad creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserName")]
		public string AdvertiserName { get; set; }
		
		/// <summary>
		/// An image resource. You may provide a larger image than was requested, so long as the aspect ratio is preserved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appIcon")]
		public Image AppIcon { get; set; }
		
		/// <summary>
		/// A long description of the ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// A label for the button that the user is supposed to click.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callToAction")]
		public string CallToAction { get; set; }
		
		/// <summary>
		/// The URL that the browser/SDK will load when the user clicks the ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickLinkUrl")]
		public string ClickLinkUrl { get; set; }
		
		/// <summary>
		/// The URL to use for click tracking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickTrackingUrl")]
		public string ClickTrackingUrl { get; set; }
		
		/// <summary>
		/// A short title for the ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headline")]
		public string Headline { get; set; }
		
		/// <summary>
		/// An image resource. You may provide a larger image than was requested, so long as the aspect ratio is preserved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public Image Image { get; set; }
		
		/// <summary>
		/// An image resource. You may provide a larger image than was requested, so long as the aspect ratio is preserved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public Image Logo { get; set; }
		
		/// <summary>
		/// The price of the promoted app including currency info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceDisplayText")]
		public string PriceDisplayText { get; set; }
		
		/// <summary>
		/// The app rating in the app store. Must be in the range [0-5].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="starRating")]
		public System.Nullable<System.Double> StarRating { get; set; }
		
		/// <summary>
		/// The URL to the app store to purchase/download the promoted app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeUrl")]
		public string StoreUrl { get; set; }
		
		/// <summary>
		/// The URL to fetch a native video ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoUrl")]
		public string VideoUrl { get; set; }
	}
	
	/// <summary>
	/// An image resource. You may provide a larger image than was requested, so long as the aspect ratio is preserved.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Image
	{
		
		/// <summary>
		/// Image height in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// The URL of the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Image width in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	/// <summary>
	/// Output only. A representation of the status of an ad in a specific context. A context here relates to where something ultimately serves (for example, a user or publisher geo, a platform, an HTTPS versus HTTP request, or the type of auction).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServingRestriction
	{
		
		/// <summary>
		/// The contexts for the restriction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contexts")]
		public ServingContext[] Contexts { get; set; }
		
		/// <summary>
		/// Output only. The reason and details for a disapproval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disapproval")]
		public Disapproval Disapproval { get; set; }
		
		/// <summary>
		/// Any disapprovals bound to this restriction. Only present if status=DISAPPROVED. Can be used to filter the response of the creatives.list method. Deprecated; use disapproval field instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disapprovalReasons")]
		public Disapproval[] DisapprovalReasons { get; set; }
		
		/// <summary>
		/// The status of the creative in this context (for example, it has been explicitly disapproved or is pending review).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<ServingRestrictionStatus> Status { get; set; }
	}
	
	/// <summary>
	/// Output only. The reason and details for a disapproval.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Disapproval
	{
		
		/// <summary>
		/// Additional details about the reason for disapproval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// The categorized reason for disapproval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public System.Nullable<DisapprovalReason> Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DisapprovalReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LENGTH_OF_IMAGE_ANIMATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BROKEN_URL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIA_NOT_FUNCTIONAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_FOURTH_PARTY_CALL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCORRECT_REMARKETING_DECLARATION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LANDING_PAGE_ERROR = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_SIZE_DOES_NOT_MATCH_AD_SLOT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_BORDER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOURTH_PARTY_BROWSER_COOKIES = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LSO_OBJECTS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLANK_CREATIVE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESTINATION_URLS_UNDECLARED = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROBLEM_WITH_CLICK_MACRO = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCORRECT_AD_TECHNOLOGY_DECLARATION = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCORRECT_DESTINATION_URL_DECLARATION = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPANDABLE_INCORRECT_DIRECTION = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPANDABLE_DIRECTION_NOT_SUPPORTED = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPANDABLE_INVALID_VENDOR = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPANDABLE_FUNCTIONALITY = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_INVALID_VENDOR = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_UNSUPPORTED_LENGTH = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_UNSUPPORTED_FORMAT = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_FUNCTIONALITY = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LANDING_PAGE_DISABLED = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MALWARE_SUSPECTED = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADULT_IMAGE_OR_VIDEO = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACCURATE_AD_TEXT = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COUNTERFEIT_DESIGNER_GOODS = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POP_UP = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_RTB_PROTOCOL_USAGE = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RAW_IP_ADDRESS_IN_SNIPPET = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNACCEPTABLE_CONTENT_SOFTWARE = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNAUTHORIZED_COOKIE_ON_GOOGLE_DOMAIN = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNDECLARED_FLASH_OBJECTS = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_SSL_DECLARATION = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIRECT_DOWNLOAD_IN_AD = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAXIMUM_DOWNLOAD_SIZE_EXCEEDED = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESTINATION_URL_SITE_NOT_CRAWLABLE = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BAD_URL_LEGAL_DISAPPROVAL = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHARMA_GAMBLING_ALCOHOL_NOT_ALLOWED = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DYNAMIC_DNS_AT_DESTINATION_URL = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POOR_IMAGE_OR_VIDEO_QUALITY = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNACCEPTABLE_IMAGE_CONTENT = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCORRECT_IMAGE_LAYOUT = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IRRELEVANT_IMAGE_OR_VIDEO = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESTINATION_SITE_DOES_NOT_ALLOW_GOING_BACK = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISLEADING_CLAIMS_IN_AD = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTRICTED_PRODUCTS = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNACCEPTABLE_CONTENT = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOMATED_AD_CLICKING = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_URL_PROTOCOL = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNDECLARED_RESTRICTED_CONTENT = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_REMARKETING_LIST_USAGE = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESTINATION_SITE_NOT_CRAWLABLE_ROBOTS_TXT = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLICK_TO_DOWNLOAD_NOT_AN_APP = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACCURATE_REVIEW_EXTENSION = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEXUALLY_EXPLICIT_CONTENT = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GAINING_AN_UNFAIR_ADVANTAGE = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GAMING_THE_GOOGLE_NETWORK = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DANGEROUS_PRODUCTS_KNIVES = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DANGEROUS_PRODUCTS_EXPLOSIVES = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DANGEROUS_PRODUCTS_GUNS = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DANGEROUS_PRODUCTS_DRUGS = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DANGEROUS_PRODUCTS_TOBACCO = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DANGEROUS_PRODUCTS_WEAPONS = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNCLEAR_OR_IRRELEVANT_AD = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROFESSIONAL_STANDARDS = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DYSFUNCTIONAL_PROMOTION = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_INTEREST_BASED_AD = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISUSE_OF_PERSONAL_INFORMATION = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OMISSION_OF_RELEVANT_INFORMATION = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNAVAILABLE_PROMOTIONS = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISLEADING_PROMOTIONS = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INAPPROPRIATE_CONTENT = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SENSITIVE_EVENTS = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHOCKING_CONTENT = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLING_DISHONEST_BEHAVIOR = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TECHNICAL_REQUIREMENTS = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTRICTED_POLITICAL_CONTENT = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSUPPORTED_CONTENT = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_BIDDING_METHOD = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_TOO_LONG = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIOLATES_JAPANESE_PHARMACY_LAW = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNACCREDITED_PET_PHARMACY = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABORTION = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTRACEPTIVES = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEED_CERTIFICATES_TO_ADVERTISE_IN_CHINA = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KCDSP_REGISTRATION = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_FAMILY_SAFE = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLINICAL_TRIAL_RECRUITMENT = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAXIMUM_NUMBER_OF_HTTP_CALLS_EXCEEDED = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAXIMUM_NUMBER_OF_COOKIES_EXCEEDED = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSONAL_LOANS = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSUPPORTED_FLASH_CONTENT = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISUSE_BY_OMID_SCRIPT = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_WHITELISTED_OMID_VENDOR = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESTINATION_EXPERIENCE = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSUPPORTED_LANGUAGE = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_SSL_COMPLIANT = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEMPORARY_PAUSE = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BAIL_BONDS = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPERIMENTAL_MEDICAL_TREATMENT = 101,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ServingRestrictionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISAPPROVAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_REVIEW = 2,
	}
	
	/// <summary>
	/// Video content for a creative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VideoContent
	{
		
		/// <summary>
		/// The URL to fetch a video ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoUrl")]
		public string VideoUrl { get; set; }
		
		/// <summary>
		/// The contents of a VAST document for a video ad. This document should conform to the VAST 2.0 or 3.0 standard.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoVastXml")]
		public string VideoVastXml { get; set; }
	}
	
	/// <summary>
	/// Represents creative restrictions associated to Programmatic Guaranteed/ Preferred Deal in Ad Manager. This doesn't apply to Private Auction and AdX Preferred Deals.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreativeRestrictions
	{
		
		/// <summary>
		/// The format of the environment that the creatives will be displayed in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeFormat")]
		public System.Nullable<CreativeRestrictionsCreativeFormat> CreativeFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creativeSpecifications")]
		public CreativeSpecification[] CreativeSpecifications { get; set; }
		
		/// <summary>
		/// Skippable video ads allow viewers to skip ads after 5 seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skippableAdType")]
		public System.Nullable<CreativeRestrictionsSkippableAdType> SkippableAdType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeRestrictionsCreativeFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_FORMAT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISPLAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO = 2,
	}
	
	/// <summary>
	/// Represents information for a creative that is associated with a Programmatic Guaranteed/Preferred Deal in Ad Manager.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreativeSpecification
	{
		
		/// <summary>
		/// Companion sizes may be filled in only when this is a video creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeCompanionSizes")]
		public AdSize[] CreativeCompanionSizes { get; set; }
		
		/// <summary>
		/// Represents size of a single ad slot, or a creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeSize")]
		public AdSize CreativeSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeRestrictionsSkippableAdType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIPPABLE_AD_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIPPABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTREAM_SELECT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_SKIPPABLE = 3,
	}
	
	/// <summary>
	/// Specifies the size of the creative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreativeSize
	{
		
		/// <summary>
		/// What formats are allowed by the publisher. If this repeated field is empty then all formats are allowed. For example, if this field contains AllowedFormatType.AUDIO then the publisher only allows an audio ad (without any video).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedFormats")]
		public string[] AllowedFormats { get; set; }
		
		/// <summary>
		/// For video creatives specifies the sizes of companion ads (if present). Companion sizes may be filled in only when creative_size_type = VIDEO
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="companionSizes")]
		public Size[] CompanionSizes { get; set; }
		
		/// <summary>
		/// The creative size type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeSizeType")]
		public System.Nullable<CreativeSizeCreativeSizeType> CreativeSizeType { get; set; }
		
		/// <summary>
		/// Output only. The native template for this creative. It will have a value only if creative_size_type = CreativeSizeType.NATIVE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nativeTemplate")]
		public System.Nullable<CreativeSizeNativeTemplate> NativeTemplate { get; set; }
		
		/// <summary>
		/// Message depicting the size of the creative. The units of width and height depend on the type of the targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public Size Size { get; set; }
		
		/// <summary>
		/// The type of skippable ad for this creative. It will have a value only if creative_size_type = CreativeSizeType.VIDEO.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skippableAdType")]
		public System.Nullable<CreativeSizeSkippableAdType> SkippableAdType { get; set; }
	}
	
	/// <summary>
	/// Message depicting the size of the creative. The units of width and height depend on the type of the targeting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Size
	{
		
		/// <summary>
		/// The height of the creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// The width of the creative
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeSizeCreativeSizeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_SIZE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGULAR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERSTITIAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATIVE = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeSizeNativeTemplate
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_NATIVE_TEMPLATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATIVE_CONTENT_AD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATIVE_APP_INSTALL_AD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATIVE_VIDEO_CONTENT_AD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATIVE_VIDEO_APP_INSTALL_AD = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeSizeSkippableAdType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIPPABLE_AD_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTREAM_SELECT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_SKIPPABLE = 3,
	}
	
	/// <summary>
	/// The number of bids with the specified dimension values that did not win the auction (either were filtered pre-auction or lost the auction), as described by the specified creative status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreativeStatusRow
	{
		
		/// <summary>
		/// A metric value, with an expected value and a variance; represents a count that may be either exact or estimated (for example, when sampled).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bidCount")]
		public MetricValue BidCount { get; set; }
		
		/// <summary>
		/// The ID of the creative status. See [creative-status-codes](https://developers.google.com/authorized-buyers/rtb/downloads/creative-status-codes).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeStatusId")]
		public System.Nullable<System.Int32> CreativeStatusId { get; set; }
		
		/// <summary>
		/// A response may include multiple rows, breaking down along various dimensions. Encapsulates the values of all dimensions for a given row.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowDimensions")]
		public RowDimensions RowDimensions { get; set; }
	}
	
	/// <summary>
	/// Generic targeting used for targeting dimensions that contains a list of included and excluded numeric IDs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CriteriaTargeting
	{
		
		/// <summary>
		/// A list of numeric IDs to be excluded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedCriteriaIds")]
		public string[] ExcludedCriteriaIds { get; set; }
		
		/// <summary>
		/// A list of numeric IDs to be included.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetedCriteriaIds")]
		public string[] TargetedCriteriaIds { get; set; }
	}
	
	/// <summary>
	/// Daypart targeting message that specifies if the ad can be shown only during certain parts of a day/week.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DayPart
	{
		
		/// <summary>
		/// The day of the week to target. If unspecified, applicable to all days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dayOfWeek")]
		public System.Nullable<DayPartDayOfWeek> DayOfWeek { get; set; }
		
		/// <summary>
		/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public TimeOfDay EndTime { get; set; }
		
		/// <summary>
		/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public TimeOfDay StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DayPartDayOfWeek
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAY_OF_WEEK_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONDAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TUESDAY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEDNESDAY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THURSDAY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRIDAY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SATURDAY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUNDAY = 7,
	}
	
	/// <summary>
	/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeOfDay
	{
		
		/// <summary>
		/// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hours")]
		public System.Nullable<System.Int32> Hours { get; set; }
		
		/// <summary>
		/// Minutes of hour of day. Must be from 0 to 59.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minutes")]
		public System.Nullable<System.Int32> Minutes { get; set; }
		
		/// <summary>
		/// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nanos")]
		public System.Nullable<System.Int32> Nanos { get; set; }
		
		/// <summary>
		/// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seconds")]
		public System.Nullable<System.Int32> Seconds { get; set; }
	}
	
	/// <summary>
	/// Specifies the day part targeting criteria.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DayPartTargeting
	{
		
		/// <summary>
		/// A list of day part targeting criterion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dayParts")]
		public DayPart[] DayParts { get; set; }
		
		/// <summary>
		/// The timezone to use for interpreting the day part targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZoneType")]
		public System.Nullable<DayPartTargetingTimeZoneType> TimeZoneType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DayPartTargetingTimeZoneType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_ZONE_SOURCE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLISHER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER = 2,
	}
	
	/// <summary>
	/// A deal represents a segment of inventory for displaying ads on. A proposal can contain multiple deals. A deal contains the terms and targeting information that is used for serving.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Deal
	{
		
		/// <summary>
		/// Proposed flight end time of the deal. This will generally be stored in a granularity of a second. A value is not required for Private Auction deals or Preferred Deals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableEndTime")]
		public string AvailableEndTime { get; set; }
		
		/// <summary>
		/// Optional. Proposed flight start time of the deal. This will generally be stored in the granularity of one second since deal serving starts at seconds boundary. Any time specified with more granularity (for example, in milliseconds) will be truncated towards the start of time in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableStartTime")]
		public string AvailableStartTime { get; set; }
		
		/// <summary>
		/// Buyers are allowed to store certain types of private data in a proposal/deal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyerPrivateData")]
		public PrivateData BuyerPrivateData { get; set; }
		
		/// <summary>
		/// The product ID from which this deal was created. Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createProductId")]
		public string CreateProductId { get; set; }
		
		/// <summary>
		/// Optional. Revision number of the product that the deal was created from. If present on create, and the server `product_revision` has advanced since the passed-in `create_product_revision`, an `ABORTED` error will be returned. Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createProductRevision")]
		public string CreateProductRevision { get; set; }
		
		/// <summary>
		/// Output only. The time of the deal creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. Specifies the creative pre-approval policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativePreApprovalPolicy")]
		public System.Nullable<DealCreativePreApprovalPolicy> CreativePreApprovalPolicy { get; set; }
		
		/// <summary>
		/// Represents creative restrictions associated to Programmatic Guaranteed/ Preferred Deal in Ad Manager. This doesn't apply to Private Auction and AdX Preferred Deals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeRestrictions")]
		public CreativeRestrictions CreativeRestrictions { get; set; }
		
		/// <summary>
		/// Output only. Specifies whether the creative is safeFrame compatible.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeSafeFrameCompatibility")]
		public System.Nullable<DealCreativeSafeFrameCompatibility> CreativeSafeFrameCompatibility { get; set; }
		
		/// <summary>
		/// Output only. A unique deal ID for the deal (server-assigned).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dealId")]
		public string DealId { get; set; }
		
		/// <summary>
		/// Message captures metadata about the serving status of a deal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dealServingMetadata")]
		public DealServingMetadata DealServingMetadata { get; set; }
		
		/// <summary>
		/// The deal terms specify the details of a Product/deal. They specify things like price per buyer, the type of pricing model (for example, fixed price, auction) and expected impressions from the publisher.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dealTerms")]
		public DealTerms DealTerms { get; set; }
		
		/// <summary>
		/// Message contains details about how the deals will be paced.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryControl")]
		public DeliveryControl DeliveryControl { get; set; }
		
		/// <summary>
		/// Description for the deal terms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The name of the deal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. The external deal ID assigned to this deal once the deal is finalized. This is the deal ID that shows up in serving/reporting etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalDealId")]
		public string ExternalDealId { get; set; }
		
		/// <summary>
		/// Output only. True, if the buyside inventory setup is complete for this deal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSetupComplete")]
		public System.Nullable<System.Boolean> IsSetupComplete { get; set; }
		
		/// <summary>
		/// Output only. Specifies the creative source for programmatic deals. PUBLISHER means creative is provided by seller and ADVERTISER means creative is provided by buyer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="programmaticCreativeSource")]
		public System.Nullable<DealProgrammaticCreativeSource> ProgrammaticCreativeSource { get; set; }
		
		/// <summary>
		/// Output only. ID of the proposal that this deal is part of.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proposalId")]
		public string ProposalId { get; set; }
		
		/// <summary>
		/// Output only. Seller contact information for the deal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellerContacts")]
		public ContactInformation[] SellerContacts { get; set; }
		
		/// <summary>
		/// The syndication product associated with the deal. Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syndicationProduct")]
		public System.Nullable<DealSyndicationProduct> SyndicationProduct { get; set; }
		
		/// <summary>
		/// Targeting represents different criteria that can be used by advertisers to target ad inventory. For example, they can choose to target ad requests only if the user is in the US. Multiple types of targeting are always applied as a logical AND, unless noted otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targeting")]
		public MarketplaceTargeting Targeting { get; set; }
		
		/// <summary>
		/// The shared targeting visible to buyers and sellers. Each shared targeting entity is AND'd together.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingCriterion")]
		public TargetingCriteria[] TargetingCriterion { get; set; }
		
		/// <summary>
		/// Output only. The time when the deal was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// The web property code for the seller copied over from the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webPropertyCode")]
		public string WebPropertyCode { get; set; }
	}
	
	/// <summary>
	/// Buyers are allowed to store certain types of private data in a proposal/deal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PrivateData
	{
		
		/// <summary>
		/// A buyer or seller specified reference ID. This can be queried in the list operations (max-length: 1024 unicode code units).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referenceId")]
		public string ReferenceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DealCreativePreApprovalPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_PRE_APPROVAL_POLICY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELLER_PRE_APPROVAL_REQUIRED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELLER_PRE_APPROVAL_NOT_REQUIRED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DealCreativeSafeFrameCompatibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_SAFE_FRAME_COMPATIBILITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPATIBLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCOMPATIBLE = 2,
	}
	
	/// <summary>
	/// Message captures metadata about the serving status of a deal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DealServingMetadata
	{
		
		/// <summary>
		/// Tracks which parties (if any) have paused a deal. The deal is considered paused if either hasBuyerPaused or hasSellPaused is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dealPauseStatus")]
		public DealPauseStatus DealPauseStatus { get; set; }
	}
	
	/// <summary>
	/// Tracks which parties (if any) have paused a deal. The deal is considered paused if either hasBuyerPaused or hasSellPaused is true.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DealPauseStatus
	{
		
		/// <summary>
		/// The buyer's reason for pausing, if the buyer paused the deal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyerPauseReason")]
		public string BuyerPauseReason { get; set; }
		
		/// <summary>
		/// The role of the person who first paused this deal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstPausedBy")]
		public NoteCreatorRole FirstPausedBy { get; set; }
		
		/// <summary>
		/// True, if the buyer has paused the deal unilaterally.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasBuyerPaused")]
		public System.Nullable<System.Boolean> HasBuyerPaused { get; set; }
		
		/// <summary>
		/// True, if the seller has paused the deal unilaterally.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasSellerPaused")]
		public System.Nullable<System.Boolean> HasSellerPaused { get; set; }
		
		/// <summary>
		/// The seller's reason for pausing, if the seller paused the deal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellerPauseReason")]
		public string SellerPauseReason { get; set; }
	}
	
	/// <summary>
	/// The deal terms specify the details of a Product/deal. They specify things like price per buyer, the type of pricing model (for example, fixed price, auction) and expected impressions from the publisher.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DealTerms
	{
		
		/// <summary>
		/// Visibility of the URL in bid requests. (default: BRANDED)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brandingType")]
		public System.Nullable<DealTermsBrandingType> BrandingType { get; set; }
		
		/// <summary>
		/// Publisher provided description for the terms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Represents a price and a pricing type for a product / deal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimatedGrossSpend")]
		public Price EstimatedGrossSpend { get; set; }
		
		/// <summary>
		/// Non-binding estimate of the impressions served per day. Can be set by buyer or seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimatedImpressionsPerDay")]
		public string EstimatedImpressionsPerDay { get; set; }
		
		/// <summary>
		/// Terms for Programmatic Guaranteed Deals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guaranteedFixedPriceTerms")]
		public GuaranteedFixedPriceTerms GuaranteedFixedPriceTerms { get; set; }
		
		/// <summary>
		/// Terms for Private Auctions. Note that Private Auctions can be created only by the seller, but they can be returned in a get or list request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonGuaranteedAuctionTerms")]
		public NonGuaranteedAuctionTerms NonGuaranteedAuctionTerms { get; set; }
		
		/// <summary>
		/// Terms for Preferred Deals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonGuaranteedFixedPriceTerms")]
		public NonGuaranteedFixedPriceTerms NonGuaranteedFixedPriceTerms { get; set; }
		
		/// <summary>
		/// The time zone name. For deals with Cost Per Day billing, defines the time zone used to mark the boundaries of a day. It should be an IANA TZ name, such as "America/Los_Angeles". For more information, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellerTimeZone")]
		public string SellerTimeZone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DealTermsBrandingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRANDING_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRANDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEMI_TRANSPARENT = 2,
	}
	
	/// <summary>
	/// Represents a price and a pricing type for a product / deal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Price
	{
		
		/// <summary>
		/// Represents an amount of money with its currency type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public Money Amount { get; set; }
		
		/// <summary>
		/// The pricing type for the deal/product. (default: CPM)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pricingType")]
		public System.Nullable<PricePricingType> PricingType { get; set; }
	}
	
	/// <summary>
	/// Represents an amount of money with its currency type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Money
	{
		
		/// <summary>
		/// The three-letter currency code defined in ISO 4217.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nanos")]
		public System.Nullable<System.Int32> Nanos { get; set; }
		
		/// <summary>
		/// The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PricePricingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRICING_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COST_PER_MILLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COST_PER_DAY = 2,
	}
	
	/// <summary>
	/// Terms for Programmatic Guaranteed Deals.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GuaranteedFixedPriceTerms
	{
		
		/// <summary>
		/// Fixed price for the specified buyer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedPrices")]
		public PricePerBuyer[] FixedPrices { get; set; }
		
		/// <summary>
		/// Guaranteed impressions as a percentage. This is the percentage of guaranteed looks that the buyer is guaranteeing to buy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guaranteedImpressions")]
		public string GuaranteedImpressions { get; set; }
		
		/// <summary>
		/// Count of guaranteed looks. Required for deal, optional for product. For CPD deals, buyer changes to guaranteed_looks will be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guaranteedLooks")]
		public string GuaranteedLooks { get; set; }
		
		/// <summary>
		/// The lifetime impression cap for CPM sponsorship deals. The deal will stop serving when the cap is reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impressionCap")]
		public string ImpressionCap { get; set; }
		
		/// <summary>
		/// Daily minimum looks for CPD deal types. For CPD deals, buyer should negotiate on this field instead of guaranteed_looks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumDailyLooks")]
		public string MinimumDailyLooks { get; set; }
		
		/// <summary>
		/// For sponsorship deals, this is the percentage of the seller's eligible impressions that the deal will serve until the cap is reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentShareOfVoice")]
		public string PercentShareOfVoice { get; set; }
		
		/// <summary>
		/// The reservation type for a Programmatic Guaranteed deal. This indicates whether the number of impressions is fixed, or a percent of available impressions. If not specified, the default reservation type is STANDARD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservationType")]
		public System.Nullable<GuaranteedFixedPriceTermsReservationType> ReservationType { get; set; }
	}
	
	/// <summary>
	/// Used to specify pricing rules for buyers/advertisers. Each PricePerBuyer in a product can become 0 or 1 deals. To check if there is a PricePerBuyer for a particular buyer or buyer/advertiser pair, we look for the most specific matching rule - we first look for a rule matching the buyer and advertiser, next a rule with the buyer but an empty advertiser list, and otherwise look for a matching rule where no buyer is set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PricePerBuyer
	{
		
		/// <summary>
		/// The list of advertisers for this price when associated with this buyer. If empty, all advertisers with this buyer pay this price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserIds")]
		public string[] AdvertiserIds { get; set; }
		
		/// <summary>
		/// Represents a buyer of inventory. Each buyer is identified by a unique Authorized Buyers account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer")]
		public Buyer Buyer { get; set; }
		
		/// <summary>
		/// Represents a price and a pricing type for a product / deal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Price Price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GuaranteedFixedPriceTermsReservationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESERVATION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPONSORSHIP = 2,
	}
	
	/// <summary>
	/// Terms for Private Auctions. Note that Private Auctions can be created only by the seller, but they can be returned in a get or list request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NonGuaranteedAuctionTerms
	{
		
		/// <summary>
		/// True if open auction buyers are allowed to compete with invited buyers in this private auction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoOptimizePrivateAuction")]
		public System.Nullable<System.Boolean> AutoOptimizePrivateAuction { get; set; }
		
		/// <summary>
		/// Reserve price for the specified buyer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservePricesPerBuyer")]
		public PricePerBuyer[] ReservePricesPerBuyer { get; set; }
	}
	
	/// <summary>
	/// Terms for Preferred Deals.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NonGuaranteedFixedPriceTerms
	{
		
		/// <summary>
		/// Fixed price for the specified buyer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedPrices")]
		public PricePerBuyer[] FixedPrices { get; set; }
	}
	
	/// <summary>
	/// Message contains details about how the deals will be paced.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeliveryControl
	{
		
		/// <summary>
		/// Output only. Specified the creative blocking levels to be applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeBlockingLevel")]
		public System.Nullable<DeliveryControlCreativeBlockingLevel> CreativeBlockingLevel { get; set; }
		
		/// <summary>
		/// Output only. Specifies how the impression delivery will be paced.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryRateType")]
		public System.Nullable<DeliveryControlDeliveryRateType> DeliveryRateType { get; set; }
		
		/// <summary>
		/// Output only. Specifies any frequency caps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frequencyCaps")]
		public FrequencyCap[] FrequencyCaps { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeliveryControlCreativeBlockingLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_BLOCKING_LEVEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLISHER_BLOCKING_RULES = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADX_POLICY_BLOCKING_ONLY = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeliveryControlDeliveryRateType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELIVERY_RATE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVENLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRONT_LOADED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AS_FAST_AS_POSSIBLE = 3,
	}
	
	/// <summary>
	/// Frequency cap.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FrequencyCap
	{
		
		/// <summary>
		/// The maximum number of impressions that can be served to a user within the specified time period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxImpressions")]
		public System.Nullable<System.Int32> MaxImpressions { get; set; }
		
		/// <summary>
		/// The amount of time, in the units specified by time_unit_type. Defines the amount of time over which impressions per user are counted and capped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numTimeUnits")]
		public System.Nullable<System.Int32> NumTimeUnits { get; set; }
		
		/// <summary>
		/// The time unit. Along with num_time_units defines the amount of time over which impressions per user are counted and capped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeUnitType")]
		public System.Nullable<FrequencyCapTimeUnitType> TimeUnitType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FrequencyCapTimeUnitType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_UNIT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MINUTE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOUR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEK = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTH = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIFETIME = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POD = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAM = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DealProgrammaticCreativeSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRAMMATIC_CREATIVE_SOURCE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADVERTISER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLISHER = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DealSyndicationProduct
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYNDICATION_PRODUCT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOBILE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GAMES = 4,
	}
	
	/// <summary>
	/// Targeting represents different criteria that can be used by advertisers to target ad inventory. For example, they can choose to target ad requests only if the user is in the US. Multiple types of targeting are always applied as a logical AND, unless noted otherwise.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MarketplaceTargeting
	{
		
		/// <summary>
		/// Generic targeting used for targeting dimensions that contains a list of included and excluded numeric IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoTargeting")]
		public CriteriaTargeting GeoTargeting { get; set; }
		
		/// <summary>
		/// Represents the size of an ad unit that can be targeted on an ad request. It only applies to Private Auction, AdX Preferred Deals and Auction Packages. This targeting does not apply to Programmatic Guaranteed and Preferred Deals in Ad Manager.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventorySizeTargeting")]
		public InventorySizeTargeting InventorySizeTargeting { get; set; }
		
		/// <summary>
		/// Represents targeting about where the ads can appear, for example, certain sites or mobile applications. Different placement targeting types will be logically OR'ed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placementTargeting")]
		public PlacementTargeting PlacementTargeting { get; set; }
		
		/// <summary>
		/// Represents targeting about various types of technology.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="technologyTargeting")]
		public TechnologyTargeting TechnologyTargeting { get; set; }
		
		/// <summary>
		/// Represents targeting information about video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoTargeting")]
		public VideoTargeting VideoTargeting { get; set; }
	}
	
	/// <summary>
	/// Represents the size of an ad unit that can be targeted on an ad request. It only applies to Private Auction, AdX Preferred Deals and Auction Packages. This targeting does not apply to Programmatic Guaranteed and Preferred Deals in Ad Manager.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InventorySizeTargeting
	{
		
		/// <summary>
		/// A list of inventory sizes to be excluded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedInventorySizes")]
		public AdSize[] ExcludedInventorySizes { get; set; }
		
		/// <summary>
		/// A list of inventory sizes to be included.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetedInventorySizes")]
		public AdSize[] TargetedInventorySizes { get; set; }
	}
	
	/// <summary>
	/// Represents targeting about where the ads can appear, for example, certain sites or mobile applications. Different placement targeting types will be logically OR'ed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlacementTargeting
	{
		
		/// <summary>
		/// Mobile application targeting settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileApplicationTargeting")]
		public MobileApplicationTargeting MobileApplicationTargeting { get; set; }
		
		/// <summary>
		/// Represents a list of targeted and excluded URLs (for example, google.com). For Private Auction and AdX Preferred Deals, URLs are either included or excluded. For Programmatic Guaranteed and Preferred Deals, this doesn't apply.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlTargeting")]
		public UrlTargeting UrlTargeting { get; set; }
	}
	
	/// <summary>
	/// Mobile application targeting settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MobileApplicationTargeting
	{
		
		/// <summary>
		/// Represents a list of targeted and excluded mobile application IDs that publishers own. Mobile application IDs are from App Store and Google Play Store. Android App ID, for example, com.google.android.apps.maps, can be found in Google Play Store URL. iOS App ID (which is a number) can be found at the end of iTunes store URL. First party mobile applications is either included or excluded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstPartyTargeting")]
		public FirstPartyMobileApplicationTargeting FirstPartyTargeting { get; set; }
	}
	
	/// <summary>
	/// Represents a list of targeted and excluded mobile application IDs that publishers own. Mobile application IDs are from App Store and Google Play Store. Android App ID, for example, com.google.android.apps.maps, can be found in Google Play Store URL. iOS App ID (which is a number) can be found at the end of iTunes store URL. First party mobile applications is either included or excluded.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FirstPartyMobileApplicationTargeting
	{
		
		/// <summary>
		/// A list of application IDs to be excluded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedAppIds")]
		public string[] ExcludedAppIds { get; set; }
		
		/// <summary>
		/// A list of application IDs to be included.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetedAppIds")]
		public string[] TargetedAppIds { get; set; }
	}
	
	/// <summary>
	/// Represents a list of targeted and excluded URLs (for example, google.com). For Private Auction and AdX Preferred Deals, URLs are either included or excluded. For Programmatic Guaranteed and Preferred Deals, this doesn't apply.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UrlTargeting
	{
		
		/// <summary>
		/// A list of URLs to be excluded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedUrls")]
		public string[] ExcludedUrls { get; set; }
		
		/// <summary>
		/// A list of URLs to be included.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetedUrls")]
		public string[] TargetedUrls { get; set; }
	}
	
	/// <summary>
	/// Represents targeting about various types of technology.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TechnologyTargeting
	{
		
		/// <summary>
		/// Generic targeting used for targeting dimensions that contains a list of included and excluded numeric IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceCapabilityTargeting")]
		public CriteriaTargeting DeviceCapabilityTargeting { get; set; }
		
		/// <summary>
		/// Generic targeting used for targeting dimensions that contains a list of included and excluded numeric IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceCategoryTargeting")]
		public CriteriaTargeting DeviceCategoryTargeting { get; set; }
		
		/// <summary>
		/// Represents targeting information for operating systems.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatingSystemTargeting")]
		public OperatingSystemTargeting OperatingSystemTargeting { get; set; }
	}
	
	/// <summary>
	/// Represents targeting information for operating systems.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OperatingSystemTargeting
	{
		
		/// <summary>
		/// Generic targeting used for targeting dimensions that contains a list of included and excluded numeric IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatingSystemCriteria")]
		public CriteriaTargeting OperatingSystemCriteria { get; set; }
		
		/// <summary>
		/// Generic targeting used for targeting dimensions that contains a list of included and excluded numeric IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatingSystemVersionCriteria")]
		public CriteriaTargeting OperatingSystemVersionCriteria { get; set; }
	}
	
	/// <summary>
	/// Represents targeting information about video.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VideoTargeting
	{
		
		/// <summary>
		/// A list of video positions to be excluded. Position types can either be included or excluded (XOR).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedPositionTypes")]
		public string[] ExcludedPositionTypes { get; set; }
		
		/// <summary>
		/// A list of video positions to be included. When the included list is present, the excluded list must be empty. When the excluded list is present, the included list must be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetedPositionTypes")]
		public string[] TargetedPositionTypes { get; set; }
	}
	
	/// <summary>
	/// Advertisers can target different attributes of an ad slot. For example, they can choose to show ads only if the user is in the U.S. Such targeting criteria can be specified as part of Shared Targeting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TargetingCriteria
	{
		
		/// <summary>
		/// The list of values to exclude from targeting. Each value is AND'd together.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exclusions")]
		public TargetingValue[] Exclusions { get; set; }
		
		/// <summary>
		/// The list of value to include as part of the targeting. Each value is OR'd together.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inclusions")]
		public TargetingValue[] Inclusions { get; set; }
		
		/// <summary>
		/// The key representing the shared targeting criterion. Targeting criteria defined by Google ad servers will begin with GOOG_. Third parties may define their own keys. A list of permissible keys along with the acceptable values will be provided as part of the external documentation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
	}
	
	/// <summary>
	/// A polymorphic targeting value used as part of Shared Targeting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TargetingValue
	{
		
		/// <summary>
		/// Specifies the size of the creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeSizeValue")]
		public CreativeSize CreativeSizeValue { get; set; }
		
		/// <summary>
		/// Specifies the day part targeting criteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dayPartTargetingValue")]
		public DayPartTargeting DayPartTargetingValue { get; set; }
		
		/// <summary>
		/// The long value to include/exclude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longValue")]
		public string LongValue { get; set; }
		
		/// <summary>
		/// The string value to include/exclude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stringValue")]
		public string StringValue { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// A set of filters that is applied to a request for data. Within a filter set, an AND operation is performed across the filters represented by each field. An OR operation is performed across the filters represented by the multiple values of a repeated field, for example, "format=VIDEO AND deal_id=12 AND (seller_network_id=34 OR seller_network_id=56)".
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FilterSet
	{
		
		/// <summary>
		/// An absolute date range, specified by its start date and end date. The supported range of dates begins 30 days before today and ends today. Validity checked upon filter set creation. If a filter set with an absolute date range is run at a later date more than 30 days after start_date, it will fail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="absoluteDateRange")]
		public AbsoluteDateRange AbsoluteDateRange { get; set; }
		
		/// <summary>
		/// The set of dimensions along which to break down the response; may be empty. If multiple dimensions are requested, the breakdown is along the Cartesian product of the requested dimensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="breakdownDimensions")]
		public string[] BreakdownDimensions { get; set; }
		
		/// <summary>
		/// The ID of the creative on which to filter; optional. This field may be set only for a filter set that accesses account-level troubleshooting data, for example, one whose name matches the `bidders/*/accounts/*/filterSets/*` pattern.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeId")]
		public string CreativeId { get; set; }
		
		/// <summary>
		/// The ID of the deal on which to filter; optional. This field may be set only for a filter set that accesses account-level troubleshooting data, for example, one whose name matches the `bidders/*/accounts/*/filterSets/*` pattern.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dealId")]
		public string DealId { get; set; }
		
		/// <summary>
		/// The environment on which to filter; optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public System.Nullable<FilterSetEnvironment> Environment { get; set; }
		
		/// <summary>
		/// Creative format bidded on or allowed to bid on, can be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public System.Nullable<FilterSetFormat> Format { get; set; }
		
		/// <summary>
		/// Creative formats bidded on or allowed to bid on, can be empty. Although this field is a list, it can only be populated with a single item. A HTTP 400 bad request error will be returned in the response if you specify multiple items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formats")]
		public FilterSetFormat[] Formats { get; set; }
		
		/// <summary>
		/// A user-defined name of the filter set. Filter set names must be unique globally and match one of the patterns: - `bidders/*/filterSets/*` (for accessing bidder-level troubleshooting data) - `bidders/*/accounts/*/filterSets/*` (for accessing account-level troubleshooting data) This field is required in create operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The list of platforms on which to filter; may be empty. The filters represented by multiple platforms are ORed together (for example, if non-empty, results must match any one of the platforms).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platforms")]
		public string[] Platforms { get; set; }
		
		/// <summary>
		/// For Open Bidding partners only. The list of publisher identifiers on which to filter; may be empty. The filters represented by multiple publisher identifiers are ORed together.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherIdentifiers")]
		public string[] PublisherIdentifiers { get; set; }
		
		/// <summary>
		/// An open-ended realtime time range specified by the start timestamp. For filter sets that specify a realtime time range RTB metrics continue to be aggregated throughout the lifetime of the filter set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="realtimeTimeRange")]
		public RealtimeTimeRange RealtimeTimeRange { get; set; }
		
		/// <summary>
		/// A relative date range, specified by an offset and a duration. The supported range of dates begins 30 days before today and ends today, for example, the limits for these values are: offset_days >= 0 duration_days >= 1 offset_days + duration_days <= 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relativeDateRange")]
		public RelativeDateRange RelativeDateRange { get; set; }
		
		/// <summary>
		/// For Authorized Buyers only. The list of IDs of the seller (publisher) networks on which to filter; may be empty. The filters represented by multiple seller network IDs are ORed together (for example, if non-empty, results must match any one of the publisher networks). See [seller-network-ids](https://developers.google.com/authorized-buyers/rtb/downloads/seller-network-ids) file for the set of existing seller network IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellerNetworkIds")]
		public int[] SellerNetworkIds { get; set; }
		
		/// <summary>
		/// The granularity of time intervals if a time series breakdown is preferred; optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeSeriesGranularity")]
		public System.Nullable<FilterSetTimeSeriesGranularity> TimeSeriesGranularity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FilterSetEnvironment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENVIRONMENT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FilterSetFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORMAT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATIVE_DISPLAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATIVE_VIDEO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_NATIVE_DISPLAY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_NATIVE_VIDEO = 4,
	}
	
	/// <summary>
	/// An open-ended realtime time range specified by the start timestamp. For filter sets that specify a realtime time range RTB metrics continue to be aggregated throughout the lifetime of the filter set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RealtimeTimeRange
	{
		
		/// <summary>
		/// The start timestamp of the real-time RTB metrics aggregation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTimestamp")]
		public string StartTimestamp { get; set; }
	}
	
	/// <summary>
	/// A relative date range, specified by an offset and a duration. The supported range of dates begins 30 days before today and ends today, for example, the limits for these values are: offset_days >= 0 duration_days >= 1 offset_days + duration_days <= 30
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RelativeDateRange
	{
		
		/// <summary>
		/// The number of days in the requested date range, for example, for a range spanning today: 1. For a range spanning the last 7 days: 7.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="durationDays")]
		public System.Nullable<System.Int32> DurationDays { get; set; }
		
		/// <summary>
		/// The end date of the filter set, specified as the number of days before today, for example, for a range where the last date is today: 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offsetDays")]
		public System.Nullable<System.Int32> OffsetDays { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FilterSetTimeSeriesGranularity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_SERIES_GRANULARITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOURLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY = 2,
	}
	
	/// <summary>
	/// The number of filtered bids with the specified dimension values that have the specified creative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FilteredBidCreativeRow
	{
		
		/// <summary>
		/// A metric value, with an expected value and a variance; represents a count that may be either exact or estimated (for example, when sampled).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bidCount")]
		public MetricValue BidCount { get; set; }
		
		/// <summary>
		/// The ID of the creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeId")]
		public string CreativeId { get; set; }
		
		/// <summary>
		/// A response may include multiple rows, breaking down along various dimensions. Encapsulates the values of all dimensions for a given row.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowDimensions")]
		public RowDimensions RowDimensions { get; set; }
	}
	
	/// <summary>
	/// The number of filtered bids with the specified dimension values, among those filtered due to the requested filtering reason (for example, creative status), that have the specified detail.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FilteredBidDetailRow
	{
		
		/// <summary>
		/// A metric value, with an expected value and a variance; represents a count that may be either exact or estimated (for example, when sampled).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bidCount")]
		public MetricValue BidCount { get; set; }
		
		/// <summary>
		/// The ID of the detail, can be numeric or text. The associated value can be looked up in the dictionary file corresponding to the DetailType in the response message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Note: this field will be deprecated, use "detail" field instead. When "detail" field represents an integer value, this field is populated as the same integer value "detail" field represents, otherwise this field will be 0. The ID of the detail. The associated value can be looked up in the dictionary file corresponding to the DetailType in the response message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detailId")]
		public System.Nullable<System.Int32> DetailId { get; set; }
		
		/// <summary>
		/// A response may include multiple rows, breaking down along various dimensions. Encapsulates the values of all dimensions for a given row.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowDimensions")]
		public RowDimensions RowDimensions { get; set; }
	}
	
	/// <summary>
	/// The set of metrics that are measured in numbers of impressions, representing how many impressions with the specified dimension values were considered eligible at each stage of the bidding funnel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImpressionMetricsRow
	{
		
		/// <summary>
		/// A metric value, with an expected value and a variance; represents a count that may be either exact or estimated (for example, when sampled).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableImpressions")]
		public MetricValue AvailableImpressions { get; set; }
		
		/// <summary>
		/// A metric value, with an expected value and a variance; represents a count that may be either exact or estimated (for example, when sampled).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bidRequests")]
		public MetricValue BidRequests { get; set; }
		
		/// <summary>
		/// A metric value, with an expected value and a variance; represents a count that may be either exact or estimated (for example, when sampled).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventoryMatches")]
		public MetricValue InventoryMatches { get; set; }
		
		/// <summary>
		/// A metric value, with an expected value and a variance; represents a count that may be either exact or estimated (for example, when sampled).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responsesWithBids")]
		public MetricValue ResponsesWithBids { get; set; }
		
		/// <summary>
		/// A response may include multiple rows, breaking down along various dimensions. Encapsulates the values of all dimensions for a given row.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowDimensions")]
		public RowDimensions RowDimensions { get; set; }
		
		/// <summary>
		/// A metric value, with an expected value and a variance; represents a count that may be either exact or estimated (for example, when sampled).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="successfulResponses")]
		public MetricValue SuccessfulResponses { get; set; }
	}
	
	/// <summary>
	/// Response message for listing the metrics that are measured in number of bids.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBidMetricsResponse
	{
		
		/// <summary>
		/// List of rows, each containing a set of bid metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bidMetricsRows")]
		public BidMetricsRow[] BidMetricsRows { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the ListBidMetricsRequest.pageToken field in the subsequent call to the bidMetrics.list method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for listing all reasons that bid responses resulted in an error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBidResponseErrorsResponse
	{
		
		/// <summary>
		/// List of rows, with counts of bid responses aggregated by callout status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calloutStatusRows")]
		public CalloutStatusRow[] CalloutStatusRows { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the ListBidResponseErrorsRequest.pageToken field in the subsequent call to the bidResponseErrors.list method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for listing all reasons that bid responses were considered to have no applicable bids.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBidResponsesWithoutBidsResponse
	{
		
		/// <summary>
		/// List of rows, with counts of bid responses without bids aggregated by status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bidResponseWithoutBidsStatusRows")]
		public BidResponseWithoutBidsStatusRow[] BidResponseWithoutBidsStatusRows { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the ListBidResponsesWithoutBidsRequest.pageToken field in the subsequent call to the bidResponsesWithoutBids.list method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListClientUserInvitationsResponse
	{
		
		/// <summary>
		/// The returned list of client users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invitations")]
		public ClientUserInvitation[] Invitations { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the ListClientUserInvitationsRequest.pageToken field in the subsequent call to the clients.invitations.list method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListClientUsersResponse
	{
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the ListClientUsersRequest.pageToken field in the subsequent call to the clients.invitations.list method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The returned list of client users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="users")]
		public ClientUser[] Users { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListClientsResponse
	{
		
		/// <summary>
		/// The returned list of clients.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clients")]
		public Client[] Clients { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the ListClientsRequest.pageToken field in the subsequent call to the accounts.clients.list method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for listing all creatives associated with a given filtered bid reason.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCreativeStatusBreakdownByCreativeResponse
	{
		
		/// <summary>
		/// List of rows, with counts of bids with a given creative status aggregated by creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filteredBidCreativeRows")]
		public FilteredBidCreativeRow[] FilteredBidCreativeRows { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the ListCreativeStatusBreakdownByCreativeRequest.pageToken field in the subsequent call to the filteredBids.creatives.list method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for listing all details associated with a given filtered bid reason.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCreativeStatusBreakdownByDetailResponse
	{
		
		/// <summary>
		/// The type of detail that the detail IDs represent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detailType")]
		public System.Nullable<ListCreativeStatusBreakdownByDetailResponseDetailType> DetailType { get; set; }
		
		/// <summary>
		/// List of rows, with counts of bids with a given creative status aggregated by detail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filteredBidDetailRows")]
		public FilteredBidDetailRow[] FilteredBidDetailRows { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the ListCreativeStatusBreakdownByDetailRequest.pageToken field in the subsequent call to the filteredBids.details.list method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ListCreativeStatusBreakdownByDetailResponseDetailType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DETAIL_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_ATTRIBUTE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VENDOR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SENSITIVE_CATEGORY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCT_CATEGORY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISAPPROVAL_REASON = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POLICY_TOPIC = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATP_VENDOR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VENDOR_DOMAIN = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GVL_ID = 9,
	}
	
	/// <summary>
	/// A response for listing creatives.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCreativesResponse
	{
		
		/// <summary>
		/// The list of creatives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creatives")]
		public Creative[] Creatives { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the ListCreativesRequest.page_token field in the subsequent call to `ListCreatives` method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A response for listing creative and deal associations
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDealAssociationsResponse
	{
		
		/// <summary>
		/// The list of associations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="associations")]
		public CreativeDealAssociation[] Associations { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the ListDealAssociationsRequest.page_token field in the subsequent call to 'ListDealAssociation' method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for listing filter sets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListFilterSetsResponse
	{
		
		/// <summary>
		/// The filter sets belonging to the buyer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterSets")]
		public FilterSet[] FilterSets { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the ListFilterSetsRequest.pageToken field in the subsequent call to the accounts.filterSets.list method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for listing all reasons that bid requests were filtered and not sent to the buyer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListFilteredBidRequestsResponse
	{
		
		/// <summary>
		/// List of rows, with counts of filtered bid requests aggregated by callout status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calloutStatusRows")]
		public CalloutStatusRow[] CalloutStatusRows { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the ListFilteredBidRequestsRequest.pageToken field in the subsequent call to the filteredBidRequests.list method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for listing all reasons that bids were filtered from the auction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListFilteredBidsResponse
	{
		
		/// <summary>
		/// List of rows, with counts of filtered bids aggregated by filtering reason (for example, creative status).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeStatusRows")]
		public CreativeStatusRow[] CreativeStatusRows { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the ListFilteredBidsRequest.pageToken field in the subsequent call to the filteredBids.list method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for listing the metrics that are measured in number of impressions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListImpressionMetricsResponse
	{
		
		/// <summary>
		/// List of rows, each containing a set of impression metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impressionMetricsRows")]
		public ImpressionMetricsRow[] ImpressionMetricsRows { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the ListImpressionMetricsRequest.pageToken field in the subsequent call to the impressionMetrics.list method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for listing all reasons that bids lost in the auction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLosingBidsResponse
	{
		
		/// <summary>
		/// List of rows, with counts of losing bids aggregated by loss reason (for example, creative status).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeStatusRows")]
		public CreativeStatusRow[] CreativeStatusRows { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the ListLosingBidsRequest.pageToken field in the subsequent call to the losingBids.list method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for listing all reasons for which a buyer was not billed for a winning bid.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListNonBillableWinningBidsResponse
	{
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the ListNonBillableWinningBidsRequest.pageToken field in the subsequent call to the nonBillableWinningBids.list method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// List of rows, with counts of bids not billed aggregated by reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonBillableWinningBidStatusRows")]
		public NonBillableWinningBidStatusRow[] NonBillableWinningBidStatusRows { get; set; }
	}
	
	/// <summary>
	/// The number of winning bids with the specified dimension values for which the buyer was not billed, as described by the specified status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NonBillableWinningBidStatusRow
	{
		
		/// <summary>
		/// A metric value, with an expected value and a variance; represents a count that may be either exact or estimated (for example, when sampled).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bidCount")]
		public MetricValue BidCount { get; set; }
		
		/// <summary>
		/// A response may include multiple rows, breaking down along various dimensions. Encapsulates the values of all dimensions for a given row.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowDimensions")]
		public RowDimensions RowDimensions { get; set; }
		
		/// <summary>
		/// The status specifying why the winning bids were not billed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<NonBillableWinningBidStatusRowStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NonBillableWinningBidStatusRowStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_NOT_RENDERED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_IMPRESSION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FATAL_VAST_ERROR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOST_IN_MEDIATION = 4,
	}
	
	/// <summary>
	/// Response message for listing products visible to the buyer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListProductsResponse
	{
		
		/// <summary>
		/// List pagination support.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of matching products at their head revision number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="products")]
		public Product[] Products { get; set; }
	}
	
	/// <summary>
	/// A product is a segment of inventory that a seller wants to sell. It is associated with certain terms and targeting information which helps the buyer know more about the inventory.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Product
	{
		
		/// <summary>
		/// The proposed end time for the deal. The field will be truncated to the order of seconds during serving.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableEndTime")]
		public string AvailableEndTime { get; set; }
		
		/// <summary>
		/// Inventory availability dates. The start time will be truncated to seconds during serving. Thus, a field specified as 3:23:34.456 (HH:mm:ss.SSS) will be truncated to 3:23:34 when serving.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableStartTime")]
		public string AvailableStartTime { get; set; }
		
		/// <summary>
		/// Creation time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Optional contact information for the creator of this product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creatorContacts")]
		public ContactInformation[] CreatorContacts { get; set; }
		
		/// <summary>
		/// The display name for this product as set by the seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// If the creator has already signed off on the product, then the buyer can finalize the deal by accepting the product as is. When copying to a proposal, if any of the terms are changed, then auto_finalize is automatically set to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasCreatorSignedOff")]
		public System.Nullable<System.Boolean> HasCreatorSignedOff { get; set; }
		
		/// <summary>
		/// The unique ID for the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The revision number of the product (auto-assigned by Marketplace).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productRevision")]
		public string ProductRevision { get; set; }
		
		/// <summary>
		/// An ID which can be used by the Publisher Profile API to get more information about the seller that created this product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherProfileId")]
		public string PublisherProfileId { get; set; }
		
		/// <summary>
		/// Represents a seller of inventory. Each seller is identified by a unique Ad Manager account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seller")]
		public Seller Seller { get; set; }
		
		/// <summary>
		/// The syndication product associated with the deal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syndicationProduct")]
		public DealSyndicationProduct SyndicationProduct { get; set; }
		
		/// <summary>
		/// Targeting that is shared between the buyer and the seller. Each targeting criterion has a specified key and for each key there is a list of inclusion value or exclusion values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingCriterion")]
		public TargetingCriteria[] TargetingCriterion { get; set; }
		
		/// <summary>
		/// The deal terms specify the details of a Product/deal. They specify things like price per buyer, the type of pricing model (for example, fixed price, auction) and expected impressions from the publisher.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="terms")]
		public DealTerms Terms { get; set; }
		
		/// <summary>
		/// Time of last update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// The web-property code for the seller. This needs to be copied as is when adding a new deal to a proposal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webPropertyCode")]
		public string WebPropertyCode { get; set; }
	}
	
	/// <summary>
	/// Represents a seller of inventory. Each seller is identified by a unique Ad Manager account ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Seller
	{
		
		/// <summary>
		/// The unique ID for the seller. The seller fills in this field. The seller account ID is then available to buyer in the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Output only. Ad manager network code for the seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subAccountId")]
		public string SubAccountId { get; set; }
	}
	
	/// <summary>
	/// Response message for listing proposals.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListProposalsResponse
	{
		
		/// <summary>
		/// Continuation token for fetching the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of proposals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proposals")]
		public Proposal[] Proposals { get; set; }
	}
	
	/// <summary>
	/// Represents a proposal in the Marketplace. A proposal is the unit of negotiation between a seller and a buyer and contains deals which are served. Note: You can't update, create, or otherwise modify Private Auction deals through the API. Fields are updatable unless noted otherwise.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Proposal
	{
		
		/// <summary>
		/// Represents a buyer of inventory. Each buyer is identified by a unique Authorized Buyers account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billedBuyer")]
		public Buyer BilledBuyer { get; set; }
		
		/// <summary>
		/// Represents a buyer of inventory. Each buyer is identified by a unique Authorized Buyers account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer")]
		public Buyer Buyer { get; set; }
		
		/// <summary>
		/// Contact information for the buyer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyerContacts")]
		public ContactInformation[] BuyerContacts { get; set; }
		
		/// <summary>
		/// Buyers are allowed to store certain types of private data in a proposal/deal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyerPrivateData")]
		public PrivateData BuyerPrivateData { get; set; }
		
		/// <summary>
		/// The deals associated with this proposal. For Private Auction proposals (whose deals have NonGuaranteedAuctionTerms), there will only be one deal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deals")]
		public Deal[] Deals { get; set; }
		
		/// <summary>
		/// The name for the proposal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. True if the proposal is being renegotiated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isRenegotiating")]
		public System.Nullable<System.Boolean> IsRenegotiating { get; set; }
		
		/// <summary>
		/// Output only. True, if the buyside inventory setup is complete for this proposal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSetupComplete")]
		public System.Nullable<System.Boolean> IsSetupComplete { get; set; }
		
		/// <summary>
		/// Output only. The role of the last user that either updated the proposal or left a comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdaterOrCommentorRole")]
		public NoteCreatorRole LastUpdaterOrCommentorRole { get; set; }
		
		/// <summary>
		/// Output only. The notes associated with this proposal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public Note[] Notes { get; set; }
		
		/// <summary>
		/// Output only. Indicates whether the buyer/seller created the proposal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorRole")]
		public NoteCreatorRole OriginatorRole { get; set; }
		
		/// <summary>
		/// Output only. Private auction ID if this proposal is a private auction proposal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateAuctionId")]
		public string PrivateAuctionId { get; set; }
		
		/// <summary>
		/// Output only. The unique ID of the proposal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proposalId")]
		public string ProposalId { get; set; }
		
		/// <summary>
		/// Output only. The revision number for the proposal. Each update to the proposal or the deal causes the proposal revision number to auto-increment. The buyer keeps track of the last revision number they know of and pass it in when making an update. If the head revision number on the server has since incremented, then an ABORTED error is returned during the update operation to let the buyer know that a subsequent update was made.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proposalRevision")]
		public string ProposalRevision { get; set; }
		
		/// <summary>
		/// Output only. The current state of the proposal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proposalState")]
		public System.Nullable<ProposalProposalState> ProposalState { get; set; }
		
		/// <summary>
		/// Represents a seller of inventory. Each seller is identified by a unique Ad Manager account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seller")]
		public Seller Seller { get; set; }
		
		/// <summary>
		/// Output only. Contact information for the seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellerContacts")]
		public ContactInformation[] SellerContacts { get; set; }
		
		/// <summary>
		/// Output only. The terms and conditions set by the publisher for this proposal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="termsAndConditions")]
		public string TermsAndConditions { get; set; }
		
		/// <summary>
		/// Output only. The time when the proposal was last revised.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProposalProposalState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROPOSAL_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROPOSED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUYER_ACCEPTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELLER_ACCEPTED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINALIZED = 5,
	}
	
	/// <summary>
	/// Response message for profiles visible to the buyer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPublisherProfilesResponse
	{
		
		/// <summary>
		/// List pagination support
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of matching publisher profiles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherProfiles")]
		public PublisherProfile[] PublisherProfiles { get; set; }
	}
	
	/// <summary>
	/// Represents a publisher profile (https://support.google.com/admanager/answer/6035806) in Marketplace. All fields are read only. All string fields are free-form text entered by the publisher unless noted otherwise.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PublisherProfile
	{
		
		/// <summary>
		/// Description on the publisher's audience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audienceDescription")]
		public string AudienceDescription { get; set; }
		
		/// <summary>
		/// Statement explaining what's unique about publisher's business, and why buyers should partner with the publisher.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyerPitchStatement")]
		public string BuyerPitchStatement { get; set; }
		
		/// <summary>
		/// Contact information for direct reservation deals. This is free text entered by the publisher and may include information like names, phone numbers and email addresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directDealsContact")]
		public string DirectDealsContact { get; set; }
		
		/// <summary>
		/// Name of the publisher profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The list of domains represented in this publisher profile. Empty if this is a parent profile. These are top private domains, meaning that these will not contain a string like "photos.google.co.uk/123", but will instead contain "google.co.uk".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domains")]
		public string[] Domains { get; set; }
		
		/// <summary>
		/// URL to publisher's Google+ page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googlePlusUrl")]
		public string GooglePlusUrl { get; set; }
		
		/// <summary>
		/// Indicates if this profile is the parent profile of the seller. A parent profile represents all the inventory from the seller, as opposed to child profile that is created to brand a portion of inventory. One seller should have only one parent publisher profile, and can have multiple child profiles. Publisher profiles for the same seller will have same value of field google.ads.adexchange.buyer.v2beta1.PublisherProfile.seller. See https://support.google.com/admanager/answer/6035806 for details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isParent")]
		public System.Nullable<System.Boolean> IsParent { get; set; }
		
		/// <summary>
		/// A Google public URL to the logo for this publisher profile. The logo is stored as a PNG, JPG, or GIF image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logoUrl")]
		public string LogoUrl { get; set; }
		
		/// <summary>
		/// URL to additional marketing and sales materials.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaKitUrl")]
		public string MediaKitUrl { get; set; }
		
		/// <summary>
		/// The list of apps represented in this publisher profile. Empty if this is a parent profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileApps")]
		public PublisherProfileMobileApplication[] MobileApps { get; set; }
		
		/// <summary>
		/// Overview of the publisher.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overview")]
		public string Overview { get; set; }
		
		/// <summary>
		/// Contact information for programmatic deals. This is free text entered by the publisher and may include information like names, phone numbers and email addresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="programmaticDealsContact")]
		public string ProgrammaticDealsContact { get; set; }
		
		/// <summary>
		/// Unique ID for publisher profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherProfileId")]
		public string PublisherProfileId { get; set; }
		
		/// <summary>
		/// URL to a publisher rate card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rateCardInfoUrl")]
		public string RateCardInfoUrl { get; set; }
		
		/// <summary>
		/// URL to a sample content page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="samplePageUrl")]
		public string SamplePageUrl { get; set; }
		
		/// <summary>
		/// Represents a seller of inventory. Each seller is identified by a unique Ad Manager account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seller")]
		public Seller Seller { get; set; }
		
		/// <summary>
		/// Up to three key metrics and rankings. Max 100 characters each. For example "#1 Mobile News Site for 20 Straight Months".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topHeadlines")]
		public string[] TopHeadlines { get; set; }
	}
	
	/// <summary>
	/// A mobile application that contains a external app ID, name, and app store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PublisherProfileMobileApplication
	{
		
		/// <summary>
		/// The app store the app belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appStore")]
		public System.Nullable<PublisherProfileMobileApplicationAppStore> AppStore { get; set; }
		
		/// <summary>
		/// The external ID for the app from its app store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalAppId")]
		public string ExternalAppId { get; set; }
		
		/// <summary>
		/// The name of the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PublisherProfileMobileApplicationAppStore
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_STORE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPLE_ITUNES = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOOGLE_PLAY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROKU = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_FIRETV = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLAYSTATION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XBOX = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAMSUNG_TV = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPPO = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAMSUNG = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIVO = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XIAOMI = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LG_TV = 13,
	}
	
	/// <summary>
	/// Request message to pause serving for finalized deals.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PauseProposalDealsRequest
	{
		
		/// <summary>
		/// The external_deal_id's of the deals to be paused. If empty, all the deals in the proposal will be paused.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalDealIds")]
		public string[] ExternalDealIds { get; set; }
		
		/// <summary>
		/// The reason why the deals are being paused. This human readable message will be displayed in the seller's UI. (Max length: 1000 unicode code units.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	/// <summary>
	/// Request message to pause serving for an already-finalized proposal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PauseProposalRequest
	{
		
		/// <summary>
		/// The reason why the proposal is being paused. This human readable message will be displayed in the seller's UI. (Max length: 1000 unicode code units.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	/// <summary>
	/// A request for removing the association between a deal and a creative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RemoveDealAssociationRequest
	{
		
		/// <summary>
		/// The association between a creative and a deal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="association")]
		public CreativeDealAssociation Association { get; set; }
	}
	
	/// <summary>
	/// Request message to resume (unpause) serving for already-finalized deals.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResumeProposalDealsRequest
	{
		
		/// <summary>
		/// The external_deal_id's of the deals to resume. If empty, all the deals in the proposal will be resumed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalDealIds")]
		public string[] ExternalDealIds { get; set; }
	}
	
	/// <summary>
	/// Request message to resume (unpause) serving for an already-finalized proposal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResumeProposalRequest
	{
	}
	
	/// <summary>
	/// A request for stopping notifications for changes to creative Status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopWatchingCreativeRequest
	{
	}
	
	/// <summary>
	/// A request for watching changes to creative Status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WatchCreativeRequest
	{
		
		/// <summary>
		/// The Pub/Sub topic to publish notifications to. This topic must already exist and must give permission to ad-exchange-buyside-reports@google.com to write to the topic. This should be the full resource name in "projects/{project_id}/topics/{topic_id}" format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topic")]
		public string Topic { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all the clients for the current sponsor buyer.
		/// Adexchangebuyer2_accounts_clients_list v2beta1/accounts/{accountId}/clients
		/// </summary>
		/// <param name="accountId">Unique numerical account ID of the sponsor buyer to list the clients for.</param>
		/// <param name="pageSize">Requested page size. The server may return fewer clients than requested. If unspecified, the server will pick an appropriate default.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of ListClientsResponse.nextPageToken returned from the previous call to the accounts.clients.list method.</param>
		/// <param name="partnerClientId">Optional unique identifier (from the standpoint of an Ad Exchange sponsor buyer partner) of the client to return. If specified, at most one client will be returned in the response.</param>
		/// <returns>Successful response</returns>
		public async Task<ListClientsResponse> Adexchangebuyer2_accounts_clients_listAsync(string accountId, int pageSize, string pageToken, string partnerClientId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/clients&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&partnerClientId=" + (partnerClientId==null? "" : System.Uri.EscapeDataString(partnerClientId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListClientsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new client buyer.
		/// Adexchangebuyer2_accounts_clients_create v2beta1/accounts/{accountId}/clients
		/// </summary>
		/// <param name="accountId">Unique numerical account ID for the buyer of which the client buyer is a customer; the sponsor buyer to create a client for. (required)</param>
		/// <returns>Successful response</returns>
		public async Task<Client> Adexchangebuyer2_accounts_clients_createAsync(string accountId, Client requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/clients";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Client>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a client buyer with a given client account ID.
		/// Adexchangebuyer2_accounts_clients_get v2beta1/accounts/{accountId}/clients/{clientAccountId}
		/// </summary>
		/// <param name="accountId">Numerical account ID of the client's sponsor buyer. (required)</param>
		/// <param name="clientAccountId">Numerical account ID of the client buyer to retrieve. (required)</param>
		/// <returns>Successful response</returns>
		public async Task<Client> Adexchangebuyer2_accounts_clients_getAsync(string accountId, string clientAccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/clients/"+ (clientAccountId==null? "" : System.Uri.EscapeDataString(clientAccountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Client>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing client buyer.
		/// Adexchangebuyer2_accounts_clients_update v2beta1/accounts/{accountId}/clients/{clientAccountId}
		/// </summary>
		/// <param name="accountId">Unique numerical account ID for the buyer of which the client buyer is a customer; the sponsor buyer to update a client for. (required)</param>
		/// <param name="clientAccountId">Unique numerical account ID of the client to update. (required)</param>
		/// <returns>Successful response</returns>
		public async Task<Client> Adexchangebuyer2_accounts_clients_updateAsync(string accountId, string clientAccountId, Client requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/clients/"+ (clientAccountId==null? "" : System.Uri.EscapeDataString(clientAccountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Client>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the client users invitations for a client with a given account ID.
		/// Adexchangebuyer2_accounts_clients_invitations_list v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations
		/// </summary>
		/// <param name="accountId">Numerical account ID of the client's sponsor buyer. (required)</param>
		/// <param name="clientAccountId">Numerical account ID of the client buyer to list invitations for. (required) You must either specify a string representation of a numerical account identifier or the `-` character to list all the invitations for all the clients of a given sponsor buyer.</param>
		/// <param name="pageSize">Requested page size. Server may return fewer clients than requested. If unspecified, server will pick an appropriate default.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of ListClientUserInvitationsResponse.nextPageToken returned from the previous call to the clients.invitations.list method.</param>
		/// <returns>Successful response</returns>
		public async Task<ListClientUserInvitationsResponse> Adexchangebuyer2_accounts_clients_invitations_listAsync(string accountId, string clientAccountId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/clients/"+ (clientAccountId==null? "" : System.Uri.EscapeDataString(clientAccountId))+"/invitations&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListClientUserInvitationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates and sends out an email invitation to access an Ad Exchange client buyer account.
		/// Adexchangebuyer2_accounts_clients_invitations_create v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations
		/// </summary>
		/// <param name="accountId">Numerical account ID of the client's sponsor buyer. (required)</param>
		/// <param name="clientAccountId">Numerical account ID of the client buyer that the user should be associated with. (required)</param>
		/// <returns>Successful response</returns>
		public async Task<ClientUserInvitation> Adexchangebuyer2_accounts_clients_invitations_createAsync(string accountId, string clientAccountId, ClientUserInvitation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/clients/"+ (clientAccountId==null? "" : System.Uri.EscapeDataString(clientAccountId))+"/invitations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ClientUserInvitation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves an existing client user invitation.
		/// Adexchangebuyer2_accounts_clients_invitations_get v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations/{invitationId}
		/// </summary>
		/// <param name="accountId">Numerical account ID of the client's sponsor buyer. (required)</param>
		/// <param name="clientAccountId">Numerical account ID of the client buyer that the user invitation to be retrieved is associated with. (required)</param>
		/// <param name="invitationId">Numerical identifier of the user invitation to retrieve. (required)</param>
		/// <returns>Successful response</returns>
		public async Task<ClientUserInvitation> Adexchangebuyer2_accounts_clients_invitations_getAsync(string accountId, string clientAccountId, string invitationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/clients/"+ (clientAccountId==null? "" : System.Uri.EscapeDataString(clientAccountId))+"/invitations/"+ (invitationId==null? "" : System.Uri.EscapeDataString(invitationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ClientUserInvitation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the known client users for a specified sponsor buyer account ID.
		/// Adexchangebuyer2_accounts_clients_users_list v2beta1/accounts/{accountId}/clients/{clientAccountId}/users
		/// </summary>
		/// <param name="accountId">Numerical account ID of the sponsor buyer of the client to list users for. (required)</param>
		/// <param name="clientAccountId">The account ID of the client buyer to list users for. (required) You must specify either a string representation of a numerical account identifier or the `-` character to list all the client users for all the clients of a given sponsor buyer.</param>
		/// <param name="pageSize">Requested page size. The server may return fewer clients than requested. If unspecified, the server will pick an appropriate default.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of ListClientUsersResponse.nextPageToken returned from the previous call to the accounts.clients.users.list method.</param>
		/// <returns>Successful response</returns>
		public async Task<ListClientUsersResponse> Adexchangebuyer2_accounts_clients_users_listAsync(string accountId, string clientAccountId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/clients/"+ (clientAccountId==null? "" : System.Uri.EscapeDataString(clientAccountId))+"/users&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListClientUsersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves an existing client user.
		/// Adexchangebuyer2_accounts_clients_users_get v2beta1/accounts/{accountId}/clients/{clientAccountId}/users/{userId}
		/// </summary>
		/// <param name="accountId">Numerical account ID of the client's sponsor buyer. (required)</param>
		/// <param name="clientAccountId">Numerical account ID of the client buyer that the user to be retrieved is associated with. (required)</param>
		/// <param name="userId">Numerical identifier of the user to retrieve. (required)</param>
		/// <returns>Successful response</returns>
		public async Task<ClientUser> Adexchangebuyer2_accounts_clients_users_getAsync(string accountId, string clientAccountId, string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/clients/"+ (clientAccountId==null? "" : System.Uri.EscapeDataString(clientAccountId))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ClientUser>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing client user. Only the user status can be changed on update.
		/// Adexchangebuyer2_accounts_clients_users_update v2beta1/accounts/{accountId}/clients/{clientAccountId}/users/{userId}
		/// </summary>
		/// <param name="accountId">Numerical account ID of the client's sponsor buyer. (required)</param>
		/// <param name="clientAccountId">Numerical account ID of the client buyer that the user to be retrieved is associated with. (required)</param>
		/// <param name="userId">Numerical identifier of the user to retrieve. (required)</param>
		/// <returns>Successful response</returns>
		public async Task<ClientUser> Adexchangebuyer2_accounts_clients_users_updateAsync(string accountId, string clientAccountId, string userId, ClientUser requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/clients/"+ (clientAccountId==null? "" : System.Uri.EscapeDataString(clientAccountId))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ClientUser>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists creatives.
		/// Adexchangebuyer2_accounts_creatives_list v2beta1/accounts/{accountId}/creatives
		/// </summary>
		/// <param name="accountId">The account to list the creatives from. Specify "-" to list all creatives the current user has access to.</param>
		/// <param name="pageSize">Requested page size. The server may return fewer creatives than requested (due to timeout constraint) even if more are available through another call. If unspecified, server will pick an appropriate default. Acceptable values are 1 to 1000, inclusive.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of ListCreativesResponse.next_page_token returned from the previous call to 'ListCreatives' method.</param>
		/// <param name="query">An optional query string to filter creatives. If no filter is specified, all active creatives will be returned. Supported queries are: - accountId=*account_id_string* - creativeId=*creative_id_string* - dealsStatus: {approved, conditionally_approved, disapproved, not_checked} - openAuctionStatus: {approved, conditionally_approved, disapproved, not_checked} - attribute: {a numeric attribute from the list of attributes} - disapprovalReason: {a reason from DisapprovalReason} Example: 'accountId=12345 AND (dealsStatus:disapproved AND disapprovalReason:unacceptable_content) OR attribute:47'</param>
		/// <returns>Successful response</returns>
		public async Task<ListCreativesResponse> Adexchangebuyer2_accounts_creatives_listAsync(string accountId, int pageSize, string pageToken, string query, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/creatives&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListCreativesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a creative.
		/// Adexchangebuyer2_accounts_creatives_create v2beta1/accounts/{accountId}/creatives
		/// </summary>
		/// <param name="accountId">The account that this creative belongs to. Can be used to filter the response of the creatives.list method.</param>
		/// <param name="duplicateIdMode">Indicates if multiple creatives can share an ID or not. Default is NO_DUPLICATES (one ID per creative).</param>
		/// <returns>Successful response</returns>
		public async Task<Creative> Adexchangebuyer2_accounts_creatives_createAsync(string accountId, Adexchangebuyer2_accounts_creatives_createDuplicateIdMode duplicateIdMode, Creative requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/creatives&duplicateIdMode=" + duplicateIdMode;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Creative>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a creative.
		/// Adexchangebuyer2_accounts_creatives_get v2beta1/accounts/{accountId}/creatives/{creativeId}
		/// </summary>
		/// <param name="accountId">The account the creative belongs to.</param>
		/// <param name="creativeId">The ID of the creative to retrieve.</param>
		/// <returns>Successful response</returns>
		public async Task<Creative> Adexchangebuyer2_accounts_creatives_getAsync(string accountId, string creativeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/creatives/"+ (creativeId==null? "" : System.Uri.EscapeDataString(creativeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Creative>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a creative.
		/// Adexchangebuyer2_accounts_creatives_update v2beta1/accounts/{accountId}/creatives/{creativeId}
		/// </summary>
		/// <param name="accountId">The account that this creative belongs to. Can be used to filter the response of the creatives.list method.</param>
		/// <param name="creativeId">The buyer-defined creative ID of this creative. Can be used to filter the response of the creatives.list method.</param>
		/// <returns>Successful response</returns>
		public async Task<Creative> Adexchangebuyer2_accounts_creatives_updateAsync(string accountId, string creativeId, Creative requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/creatives/"+ (creativeId==null? "" : System.Uri.EscapeDataString(creativeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Creative>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all creative-deal associations.
		/// Adexchangebuyer2_accounts_creatives_dealAssociations_list v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations
		/// </summary>
		/// <param name="accountId">The account to list the associations from. Specify "-" to list all creatives the current user has access to.</param>
		/// <param name="creativeId">The creative ID to list the associations from. Specify "-" to list all creatives under the above account.</param>
		/// <param name="pageSize">Requested page size. Server may return fewer associations than requested. If unspecified, server will pick an appropriate default.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of ListDealAssociationsResponse.next_page_token returned from the previous call to 'ListDealAssociations' method.</param>
		/// <param name="query">An optional query string to filter deal associations. If no filter is specified, all associations will be returned. Supported queries are: - accountId=*account_id_string* - creativeId=*creative_id_string* - dealsId=*deals_id_string* - dealsStatus:{approved, conditionally_approved, disapproved, not_checked} - openAuctionStatus:{approved, conditionally_approved, disapproved, not_checked} Example: 'dealsId=12345 AND dealsStatus:disapproved'</param>
		/// <returns>Successful response</returns>
		public async Task<ListDealAssociationsResponse> Adexchangebuyer2_accounts_creatives_dealAssociations_listAsync(string accountId, string creativeId, int pageSize, string pageToken, string query, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/creatives/"+ (creativeId==null? "" : System.Uri.EscapeDataString(creativeId))+"/dealAssociations&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListDealAssociationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associate an existing deal with a creative.
		/// Adexchangebuyer2_accounts_creatives_dealAssociations_add v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations:add
		/// </summary>
		/// <param name="accountId">The account the creative belongs to.</param>
		/// <param name="creativeId">The ID of the creative associated with the deal.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Adexchangebuyer2_accounts_creatives_dealAssociations_addAsync(string accountId, string creativeId, AddDealAssociationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/creatives/"+ (creativeId==null? "" : System.Uri.EscapeDataString(creativeId))+"/dealAssociations:add";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove the association between a deal and a creative.
		/// Adexchangebuyer2_accounts_creatives_dealAssociations_remove v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations:remove
		/// </summary>
		/// <param name="accountId">The account the creative belongs to.</param>
		/// <param name="creativeId">The ID of the creative associated with the deal.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Adexchangebuyer2_accounts_creatives_dealAssociations_removeAsync(string accountId, string creativeId, RemoveDealAssociationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/creatives/"+ (creativeId==null? "" : System.Uri.EscapeDataString(creativeId))+"/dealAssociations:remove";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops watching a creative. Will stop push notifications being sent to the topics when the creative changes status.
		/// Adexchangebuyer2_accounts_creatives_stopWatching v2beta1/accounts/{accountId}/creatives/{creativeId}:stopWatching
		/// </summary>
		/// <param name="accountId">The account of the creative to stop notifications for.</param>
		/// <param name="creativeId">The creative ID of the creative to stop notifications for. Specify "-" to specify stopping account level notifications.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Adexchangebuyer2_accounts_creatives_stopWatchingAsync(string accountId, string creativeId, StopWatchingCreativeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/creatives/"+ (creativeId==null? "" : System.Uri.EscapeDataString(creativeId))+":stopWatching";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Watches a creative. Will result in push notifications being sent to the topic when the creative changes status.
		/// Adexchangebuyer2_accounts_creatives_watch v2beta1/accounts/{accountId}/creatives/{creativeId}:watch
		/// </summary>
		/// <param name="accountId">The account of the creative to watch.</param>
		/// <param name="creativeId">The creative ID to watch for status changes. Specify "-" to watch all creatives under the above account. If both creative-level and account-level notifications are sent, only a single notification will be sent to the creative-level notification topic.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Adexchangebuyer2_accounts_creatives_watchAsync(string accountId, string creativeId, WatchCreativeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/creatives/"+ (creativeId==null? "" : System.Uri.EscapeDataString(creativeId))+":watch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List finalized proposals, regardless if a proposal is being renegotiated. A filter expression (PQL query) may be specified to filter the results. The notes will not be returned.
		/// Adexchangebuyer2_accounts_finalizedProposals_list v2beta1/accounts/{accountId}/finalizedProposals
		/// </summary>
		/// <param name="accountId">Account ID of the buyer.</param>
		/// <param name="filter">An optional PQL filter query used to query for proposals. Nested repeated fields, such as proposal.deals.targetingCriterion, cannot be filtered.</param>
		/// <param name="filterSyntax">Syntax the filter is written in. Current implementation defaults to PQL but in the future it will be LIST_FILTER.</param>
		/// <param name="pageSize">Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.</param>
		/// <param name="pageToken">The page token as returned from ListProposalsResponse.</param>
		/// <returns>Successful response</returns>
		public async Task<ListProposalsResponse> Adexchangebuyer2_accounts_finalizedProposals_listAsync(string accountId, string filter, Adexchangebuyer2_accounts_finalizedProposals_listFilterSyntax filterSyntax, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/finalizedProposals&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&filterSyntax=" + filterSyntax+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListProposalsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update given deals to pause serving. This method will set the `DealServingMetadata.DealPauseStatus.has_buyer_paused` bit to true for all listed deals in the request. Currently, this method only applies to PG and PD deals. For PA deals, call accounts.proposals.pause endpoint. It is a no-op to pause already-paused deals. It is an error to call PauseProposalDeals for deals which are not part of the proposal of proposal_id or which are not finalized or renegotiating.
		/// Adexchangebuyer2_accounts_finalizedProposals_pause v2beta1/accounts/{accountId}/finalizedProposals/{proposalId}:pause
		/// </summary>
		/// <param name="accountId">Account ID of the buyer.</param>
		/// <param name="proposalId">The proposal_id of the proposal containing the deals.</param>
		/// <returns>Successful response</returns>
		public async Task<Proposal> Adexchangebuyer2_accounts_finalizedProposals_pauseAsync(string accountId, string proposalId, PauseProposalDealsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/finalizedProposals/"+ (proposalId==null? "" : System.Uri.EscapeDataString(proposalId))+":pause";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Proposal>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update given deals to resume serving. This method will set the `DealServingMetadata.DealPauseStatus.has_buyer_paused` bit to false for all listed deals in the request. Currently, this method only applies to PG and PD deals. For PA deals, call accounts.proposals.resume endpoint. It is a no-op to resume running deals or deals paused by the other party. It is an error to call ResumeProposalDeals for deals which are not part of the proposal of proposal_id or which are not finalized or renegotiating.
		/// Adexchangebuyer2_accounts_finalizedProposals_resume v2beta1/accounts/{accountId}/finalizedProposals/{proposalId}:resume
		/// </summary>
		/// <param name="accountId">Account ID of the buyer.</param>
		/// <param name="proposalId">The proposal_id of the proposal containing the deals.</param>
		/// <returns>Successful response</returns>
		public async Task<Proposal> Adexchangebuyer2_accounts_finalizedProposals_resumeAsync(string accountId, string proposalId, ResumeProposalDealsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/finalizedProposals/"+ (proposalId==null? "" : System.Uri.EscapeDataString(proposalId))+":resume";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Proposal>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all products visible to the buyer (optionally filtered by the specified PQL query).
		/// Adexchangebuyer2_accounts_products_list v2beta1/accounts/{accountId}/products
		/// </summary>
		/// <param name="accountId">Account ID of the buyer.</param>
		/// <param name="filter">An optional PQL query used to query for products. See https://developers.google.com/ad-manager/docs/pqlreference for documentation about PQL and examples. Nested repeated fields, such as product.targetingCriterion.inclusions, cannot be filtered.</param>
		/// <param name="pageSize">Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.</param>
		/// <param name="pageToken">The page token as returned from ListProductsResponse.</param>
		/// <returns>Successful response</returns>
		public async Task<ListProductsResponse> Adexchangebuyer2_accounts_products_listAsync(string accountId, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/products&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListProductsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the requested product by ID.
		/// Adexchangebuyer2_accounts_products_get v2beta1/accounts/{accountId}/products/{productId}
		/// </summary>
		/// <param name="accountId">Account ID of the buyer.</param>
		/// <param name="productId">The ID for the product to get the head revision for.</param>
		/// <returns>Successful response</returns>
		public async Task<Product> Adexchangebuyer2_accounts_products_getAsync(string accountId, string productId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Product>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List proposals. A filter expression (PQL query) may be specified to filter the results. To retrieve all finalized proposals, regardless if a proposal is being renegotiated, see the FinalizedProposals resource. Note that Bidder/ChildSeat relationships differ from the usual behavior. A Bidder account can only see its child seats' proposals by specifying the ChildSeat's accountId in the request path.
		/// Adexchangebuyer2_accounts_proposals_list v2beta1/accounts/{accountId}/proposals
		/// </summary>
		/// <param name="accountId">Account ID of the buyer.</param>
		/// <param name="filter">An optional PQL filter query used to query for proposals. Nested repeated fields, such as proposal.deals.targetingCriterion, cannot be filtered.</param>
		/// <param name="filterSyntax">Syntax the filter is written in. Current implementation defaults to PQL but in the future it will be LIST_FILTER.</param>
		/// <param name="pageSize">Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.</param>
		/// <param name="pageToken">The page token as returned from ListProposalsResponse.</param>
		/// <returns>Successful response</returns>
		public async Task<ListProposalsResponse> Adexchangebuyer2_accounts_proposals_listAsync(string accountId, string filter, Adexchangebuyer2_accounts_finalizedProposals_listFilterSyntax filterSyntax, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/proposals&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&filterSyntax=" + filterSyntax+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListProposalsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create the given proposal. Each created proposal and any deals it contains are assigned a unique ID by the server.
		/// Adexchangebuyer2_accounts_proposals_create v2beta1/accounts/{accountId}/proposals
		/// </summary>
		/// <param name="accountId">Account ID of the buyer.</param>
		/// <returns>Successful response</returns>
		public async Task<Proposal> Adexchangebuyer2_accounts_proposals_createAsync(string accountId, Proposal requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/proposals";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Proposal>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a proposal given its ID. The proposal is returned at its head revision.
		/// Adexchangebuyer2_accounts_proposals_get v2beta1/accounts/{accountId}/proposals/{proposalId}
		/// </summary>
		/// <param name="accountId">Account ID of the buyer.</param>
		/// <param name="proposalId">The unique ID of the proposal</param>
		/// <returns>Successful response</returns>
		public async Task<Proposal> Adexchangebuyer2_accounts_proposals_getAsync(string accountId, string proposalId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/proposals/"+ (proposalId==null? "" : System.Uri.EscapeDataString(proposalId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Proposal>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the given proposal at the client known revision number. If the server revision has advanced since the passed-in `proposal.proposal_revision`, an `ABORTED` error message will be returned. Only the buyer-modifiable fields of the proposal will be updated. Note that the deals in the proposal will be updated to match the passed-in copy. If a passed-in deal does not have a `deal_id`, the server will assign a new unique ID and create the deal. If passed-in deal has a `deal_id`, it will be updated to match the passed-in copy. Any existing deals not present in the passed-in proposal will be deleted. It is an error to pass in a deal with a `deal_id` not present at head.
		/// Adexchangebuyer2_accounts_proposals_update v2beta1/accounts/{accountId}/proposals/{proposalId}
		/// </summary>
		/// <param name="accountId">Account ID of the buyer.</param>
		/// <param name="proposalId">The unique ID of the proposal.</param>
		/// <returns>Successful response</returns>
		public async Task<Proposal> Adexchangebuyer2_accounts_proposals_updateAsync(string accountId, string proposalId, Proposal requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/proposals/"+ (proposalId==null? "" : System.Uri.EscapeDataString(proposalId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Proposal>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Mark the proposal as accepted at the given revision number. If the number does not match the server's revision number an `ABORTED` error message will be returned. This call updates the proposal_state from `PROPOSED` to `BUYER_ACCEPTED`, or from `SELLER_ACCEPTED` to `FINALIZED`. Upon calling this endpoint, the buyer implicitly agrees to the terms and conditions optionally set within the proposal by the publisher.
		/// Adexchangebuyer2_accounts_proposals_accept v2beta1/accounts/{accountId}/proposals/{proposalId}:accept
		/// </summary>
		/// <param name="accountId">Account ID of the buyer.</param>
		/// <param name="proposalId">The ID of the proposal to accept.</param>
		/// <returns>Successful response</returns>
		public async Task<Proposal> Adexchangebuyer2_accounts_proposals_acceptAsync(string accountId, string proposalId, AcceptProposalRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/proposals/"+ (proposalId==null? "" : System.Uri.EscapeDataString(proposalId))+":accept";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Proposal>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new note and attach it to the proposal. The note is assigned a unique ID by the server. The proposal revision number will not increase when associated with a new note.
		/// Adexchangebuyer2_accounts_proposals_addNote v2beta1/accounts/{accountId}/proposals/{proposalId}:addNote
		/// </summary>
		/// <param name="accountId">Account ID of the buyer.</param>
		/// <param name="proposalId">The ID of the proposal to attach the note to.</param>
		/// <returns>Successful response</returns>
		public async Task<Note> Adexchangebuyer2_accounts_proposals_addNoteAsync(string accountId, string proposalId, AddNoteRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/proposals/"+ (proposalId==null? "" : System.Uri.EscapeDataString(proposalId))+":addNote";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Note>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancel an ongoing negotiation on a proposal. This does not cancel or end serving for the deals if the proposal has been finalized, but only cancels a negotiation unilaterally.
		/// Adexchangebuyer2_accounts_proposals_cancelNegotiation v2beta1/accounts/{accountId}/proposals/{proposalId}:cancelNegotiation
		/// </summary>
		/// <param name="accountId">Account ID of the buyer.</param>
		/// <param name="proposalId">The ID of the proposal to cancel negotiation for.</param>
		/// <returns>Successful response</returns>
		public async Task<Proposal> Adexchangebuyer2_accounts_proposals_cancelNegotiationAsync(string accountId, string proposalId, CancelNegotiationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/proposals/"+ (proposalId==null? "" : System.Uri.EscapeDataString(proposalId))+":cancelNegotiation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Proposal>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// You can opt-in to manually update proposals to indicate that setup is complete. By default, proposal setup is automatically completed after their deals are finalized. Contact your Technical Account Manager to opt in. Buyers can call this method when the proposal has been finalized, and all the required creatives have been uploaded using the Creatives API. This call updates the `is_setup_completed` field on the deals in the proposal, and notifies the seller. The server then advances the revision number of the most recent proposal. To mark an individual deal as ready to serve, call `buyers.finalizedDeals.setReadyToServe` in the Marketplace API.
		/// Adexchangebuyer2_accounts_proposals_completeSetup v2beta1/accounts/{accountId}/proposals/{proposalId}:completeSetup
		/// </summary>
		/// <param name="accountId">Account ID of the buyer.</param>
		/// <param name="proposalId">The ID of the proposal to mark as setup completed.</param>
		/// <returns>Successful response</returns>
		public async Task<Proposal> Adexchangebuyer2_accounts_proposals_completeSetupAsync(string accountId, string proposalId, CompleteSetupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/proposals/"+ (proposalId==null? "" : System.Uri.EscapeDataString(proposalId))+":completeSetup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Proposal>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the given proposal to pause serving. This method will set the `DealServingMetadata.DealPauseStatus.has_buyer_paused` bit to true for all deals in the proposal. It is a no-op to pause an already-paused proposal. It is an error to call PauseProposal for a proposal that is not finalized or renegotiating.
		/// Adexchangebuyer2_accounts_proposals_pause v2beta1/accounts/{accountId}/proposals/{proposalId}:pause
		/// </summary>
		/// <param name="accountId">Account ID of the buyer.</param>
		/// <param name="proposalId">The ID of the proposal to pause.</param>
		/// <returns>Successful response</returns>
		public async Task<Proposal> Adexchangebuyer2_accounts_proposals_pauseAsync(string accountId, string proposalId, PauseProposalRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/proposals/"+ (proposalId==null? "" : System.Uri.EscapeDataString(proposalId))+":pause";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Proposal>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the given proposal to resume serving. This method will set the `DealServingMetadata.DealPauseStatus.has_buyer_paused` bit to false for all deals in the proposal. Note that if the `has_seller_paused` bit is also set, serving will not resume until the seller also resumes. It is a no-op to resume an already-running proposal. It is an error to call ResumeProposal for a proposal that is not finalized or renegotiating.
		/// Adexchangebuyer2_accounts_proposals_resume v2beta1/accounts/{accountId}/proposals/{proposalId}:resume
		/// </summary>
		/// <param name="accountId">Account ID of the buyer.</param>
		/// <param name="proposalId">The ID of the proposal to resume.</param>
		/// <returns>Successful response</returns>
		public async Task<Proposal> Adexchangebuyer2_accounts_proposals_resumeAsync(string accountId, string proposalId, ResumeProposalRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/proposals/"+ (proposalId==null? "" : System.Uri.EscapeDataString(proposalId))+":resume";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Proposal>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all publisher profiles visible to the buyer
		/// Adexchangebuyer2_accounts_publisherProfiles_list v2beta1/accounts/{accountId}/publisherProfiles
		/// </summary>
		/// <param name="accountId">Account ID of the buyer.</param>
		/// <param name="pageSize">Specify the number of results to include per page.</param>
		/// <param name="pageToken">The page token as return from ListPublisherProfilesResponse.</param>
		/// <returns>Successful response</returns>
		public async Task<ListPublisherProfilesResponse> Adexchangebuyer2_accounts_publisherProfiles_listAsync(string accountId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/publisherProfiles&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListPublisherProfilesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the requested publisher profile by id.
		/// Adexchangebuyer2_accounts_publisherProfiles_get v2beta1/accounts/{accountId}/publisherProfiles/{publisherProfileId}
		/// </summary>
		/// <param name="accountId">Account ID of the buyer.</param>
		/// <param name="publisherProfileId">The id for the publisher profile to get.</param>
		/// <returns>Successful response</returns>
		public async Task<PublisherProfile> Adexchangebuyer2_accounts_publisherProfiles_getAsync(string accountId, string publisherProfileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/publisherProfiles/"+ (publisherProfileId==null? "" : System.Uri.EscapeDataString(publisherProfileId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PublisherProfile>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all metrics that are measured in terms of number of bids.
		/// Adexchangebuyer2_buyers_filterSets_bidMetrics_list v2beta1/{filterSetName}/bidMetrics
		/// </summary>
		/// <param name="filterSetName">Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`</param>
		/// <param name="pageSize">Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of ListBidMetricsResponse.nextPageToken returned from the previous call to the bidMetrics.list method.</param>
		/// <returns>Successful response</returns>
		public async Task<ListBidMetricsResponse> Adexchangebuyer2_buyers_filterSets_bidMetrics_listAsync(string filterSetName, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/"+ (filterSetName==null? "" : System.Uri.EscapeDataString(filterSetName))+"/bidMetrics&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListBidMetricsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all errors that occurred in bid responses, with the number of bid responses affected for each reason.
		/// Adexchangebuyer2_buyers_filterSets_bidResponseErrors_list v2beta1/{filterSetName}/bidResponseErrors
		/// </summary>
		/// <param name="filterSetName">Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`</param>
		/// <param name="pageSize">Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of ListBidResponseErrorsResponse.nextPageToken returned from the previous call to the bidResponseErrors.list method.</param>
		/// <returns>Successful response</returns>
		public async Task<ListBidResponseErrorsResponse> Adexchangebuyer2_buyers_filterSets_bidResponseErrors_listAsync(string filterSetName, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/"+ (filterSetName==null? "" : System.Uri.EscapeDataString(filterSetName))+"/bidResponseErrors&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListBidResponseErrorsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all reasons for which bid responses were considered to have no applicable bids, with the number of bid responses affected for each reason.
		/// Adexchangebuyer2_buyers_filterSets_bidResponsesWithoutBids_list v2beta1/{filterSetName}/bidResponsesWithoutBids
		/// </summary>
		/// <param name="filterSetName">Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`</param>
		/// <param name="pageSize">Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of ListBidResponsesWithoutBidsResponse.nextPageToken returned from the previous call to the bidResponsesWithoutBids.list method.</param>
		/// <returns>Successful response</returns>
		public async Task<ListBidResponsesWithoutBidsResponse> Adexchangebuyer2_buyers_filterSets_bidResponsesWithoutBids_listAsync(string filterSetName, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/"+ (filterSetName==null? "" : System.Uri.EscapeDataString(filterSetName))+"/bidResponsesWithoutBids&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListBidResponsesWithoutBidsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all reasons that caused a bid request not to be sent for an impression, with the number of bid requests not sent for each reason.
		/// Adexchangebuyer2_buyers_filterSets_filteredBidRequests_list v2beta1/{filterSetName}/filteredBidRequests
		/// </summary>
		/// <param name="filterSetName">Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`</param>
		/// <param name="pageSize">Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of ListFilteredBidRequestsResponse.nextPageToken returned from the previous call to the filteredBidRequests.list method.</param>
		/// <returns>Successful response</returns>
		public async Task<ListFilteredBidRequestsResponse> Adexchangebuyer2_buyers_filterSets_filteredBidRequests_listAsync(string filterSetName, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/"+ (filterSetName==null? "" : System.Uri.EscapeDataString(filterSetName))+"/filteredBidRequests&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListFilteredBidRequestsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all reasons for which bids were filtered, with the number of bids filtered for each reason.
		/// Adexchangebuyer2_buyers_filterSets_filteredBids_list v2beta1/{filterSetName}/filteredBids
		/// </summary>
		/// <param name="filterSetName">Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`</param>
		/// <param name="pageSize">Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of ListFilteredBidsResponse.nextPageToken returned from the previous call to the filteredBids.list method.</param>
		/// <returns>Successful response</returns>
		public async Task<ListFilteredBidsResponse> Adexchangebuyer2_buyers_filterSets_filteredBids_listAsync(string filterSetName, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/"+ (filterSetName==null? "" : System.Uri.EscapeDataString(filterSetName))+"/filteredBids&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListFilteredBidsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all creatives associated with a specific reason for which bids were filtered, with the number of bids filtered for each creative.
		/// Adexchangebuyer2_buyers_filterSets_filteredBids_creatives_list v2beta1/{filterSetName}/filteredBids/{creativeStatusId}/creatives
		/// </summary>
		/// <param name="filterSetName">Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`</param>
		/// <param name="creativeStatusId">The ID of the creative status for which to retrieve a breakdown by creative. See [creative-status-codes](https://developers.google.com/authorized-buyers/rtb/downloads/creative-status-codes).</param>
		/// <param name="pageSize">Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of ListCreativeStatusBreakdownByCreativeResponse.nextPageToken returned from the previous call to the filteredBids.creatives.list method.</param>
		/// <returns>Successful response</returns>
		public async Task<ListCreativeStatusBreakdownByCreativeResponse> Adexchangebuyer2_buyers_filterSets_filteredBids_creatives_listAsync(string filterSetName, int creativeStatusId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/"+ (filterSetName==null? "" : System.Uri.EscapeDataString(filterSetName))+"/filteredBids/"+creativeStatusId+"/creatives&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListCreativeStatusBreakdownByCreativeResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all details associated with a specific reason for which bids were filtered, with the number of bids filtered for each detail.
		/// Adexchangebuyer2_buyers_filterSets_filteredBids_details_list v2beta1/{filterSetName}/filteredBids/{creativeStatusId}/details
		/// </summary>
		/// <param name="filterSetName">Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`</param>
		/// <param name="creativeStatusId">The ID of the creative status for which to retrieve a breakdown by detail. See [creative-status-codes](https://developers.google.com/authorized-buyers/rtb/downloads/creative-status-codes). Details are only available for statuses 10, 14, 15, 17, 18, 19, 86, and 87.</param>
		/// <param name="pageSize">Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of ListCreativeStatusBreakdownByDetailResponse.nextPageToken returned from the previous call to the filteredBids.details.list method.</param>
		/// <returns>Successful response</returns>
		public async Task<ListCreativeStatusBreakdownByDetailResponse> Adexchangebuyer2_buyers_filterSets_filteredBids_details_listAsync(string filterSetName, int creativeStatusId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/"+ (filterSetName==null? "" : System.Uri.EscapeDataString(filterSetName))+"/filteredBids/"+creativeStatusId+"/details&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListCreativeStatusBreakdownByDetailResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all metrics that are measured in terms of number of impressions.
		/// Adexchangebuyer2_buyers_filterSets_impressionMetrics_list v2beta1/{filterSetName}/impressionMetrics
		/// </summary>
		/// <param name="filterSetName">Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`</param>
		/// <param name="pageSize">Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of ListImpressionMetricsResponse.nextPageToken returned from the previous call to the impressionMetrics.list method.</param>
		/// <returns>Successful response</returns>
		public async Task<ListImpressionMetricsResponse> Adexchangebuyer2_buyers_filterSets_impressionMetrics_listAsync(string filterSetName, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/"+ (filterSetName==null? "" : System.Uri.EscapeDataString(filterSetName))+"/impressionMetrics&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListImpressionMetricsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all reasons for which bids lost in the auction, with the number of bids that lost for each reason.
		/// Adexchangebuyer2_buyers_filterSets_losingBids_list v2beta1/{filterSetName}/losingBids
		/// </summary>
		/// <param name="filterSetName">Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`</param>
		/// <param name="pageSize">Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of ListLosingBidsResponse.nextPageToken returned from the previous call to the losingBids.list method.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLosingBidsResponse> Adexchangebuyer2_buyers_filterSets_losingBids_listAsync(string filterSetName, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/"+ (filterSetName==null? "" : System.Uri.EscapeDataString(filterSetName))+"/losingBids&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListLosingBidsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all reasons for which winning bids were not billable, with the number of bids not billed for each reason.
		/// Adexchangebuyer2_buyers_filterSets_nonBillableWinningBids_list v2beta1/{filterSetName}/nonBillableWinningBids
		/// </summary>
		/// <param name="filterSetName">Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`</param>
		/// <param name="pageSize">Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of ListNonBillableWinningBidsResponse.nextPageToken returned from the previous call to the nonBillableWinningBids.list method.</param>
		/// <returns>Successful response</returns>
		public async Task<ListNonBillableWinningBidsResponse> Adexchangebuyer2_buyers_filterSets_nonBillableWinningBids_listAsync(string filterSetName, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/"+ (filterSetName==null? "" : System.Uri.EscapeDataString(filterSetName))+"/nonBillableWinningBids&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListNonBillableWinningBidsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the requested filter set from the account with the given account ID.
		/// Adexchangebuyer2_buyers_filterSets_delete v2beta1/{name}
		/// </summary>
		/// <param name="name">Full name of the resource to delete. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Adexchangebuyer2_buyers_filterSets_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the requested filter set for the account with the given account ID.
		/// Adexchangebuyer2_buyers_filterSets_get v2beta1/{name}
		/// </summary>
		/// <param name="name">Full name of the resource being requested. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`</param>
		/// <returns>Successful response</returns>
		public async Task<FilterSet> Adexchangebuyer2_buyers_filterSets_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FilterSet>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all filter sets for the account with the given account ID.
		/// Adexchangebuyer2_buyers_filterSets_list v2beta1/{ownerName}/filterSets
		/// </summary>
		/// <param name="ownerName">Name of the owner (bidder or account) of the filter sets to be listed. For example: - For a bidder-level filter set for bidder 123: `bidders/123` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456`</param>
		/// <param name="pageSize">Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of ListFilterSetsResponse.nextPageToken returned from the previous call to the accounts.filterSets.list method.</param>
		/// <returns>Successful response</returns>
		public async Task<ListFilterSetsResponse> Adexchangebuyer2_buyers_filterSets_listAsync(string ownerName, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/"+ (ownerName==null? "" : System.Uri.EscapeDataString(ownerName))+"/filterSets&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListFilterSetsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates the specified filter set for the account with the given account ID.
		/// Adexchangebuyer2_buyers_filterSets_create v2beta1/{ownerName}/filterSets
		/// </summary>
		/// <param name="ownerName">Name of the owner (bidder or account) of the filter set to be created. For example: - For a bidder-level filter set for bidder 123: `bidders/123` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456`</param>
		/// <param name="isTransient">Whether the filter set is transient, or should be persisted indefinitely. By default, filter sets are not transient. If transient, it will be available for at least 1 hour after creation.</param>
		/// <returns>Successful response</returns>
		public async Task<FilterSet> Adexchangebuyer2_buyers_filterSets_createAsync(string ownerName, bool isTransient, FilterSet requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2beta1/"+ (ownerName==null? "" : System.Uri.EscapeDataString(ownerName))+"/filterSets&isTransient="+isTransient;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FilterSet>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Adexchangebuyer2_accounts_creatives_createDuplicateIdMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_DUPLICATES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORCE_ENABLE_DUPLICATE_IDS = 1,
	}
	
	public enum Adexchangebuyer2_accounts_finalizedProposals_listFilterSyntax
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILTER_SYNTAX_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PQL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIST_FILTER = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
