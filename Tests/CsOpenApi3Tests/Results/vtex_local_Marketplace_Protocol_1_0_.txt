//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Approveorder
	{
		
		/// <summary>
		/// String that indicates which account made the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// String with a internal Channel Order API code that classifies the response. The possible values returned in this field are described in the Response Codes section of this API Reference.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// List with errors related to the response, if there is any.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public ApproveorderErrors[] ApproveorderErrors { get; set; }
		
		/// <summary>
		/// Structure with important fields for the connector. This structure is only returned if the response is successful. Includes the following fields: 
		///
		///`mainOrderId`: String with the order's ID inside the main seller account in VTEX. 
		///
		///`franchiseOrderId`: - String with the order's ID inside the franchise seller account in VTEX. Only returned if the order was integrated using the [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) feature, that is: 
		///
		///- `allowFranchises` field set to `true` when integrating the order 
		///
		///- `SLA` chosen for the order is from a franchise account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public ApproveorderFields Fields { get; set; }
		
		/// <summary>
		/// String containing the name of the flow responsible for the response. This field can contain the following values: 
		///
		///`PlaceOrder`: when integrating new orders. 
		///
		///`ApproveOrder`: when approving existing orders. 
		///
		///`Unknown`: when we’re not able to identify the flow.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="flow")]
		public string Flow { get; set; }
		
		/// <summary>
		/// String that indicates the order's ID in the marketplace.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplaceOrderId")]
		public string MarketplaceOrderId { get; set; }
		
		/// <summary>
		/// String with a message explaining the code returned in the response.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// String GUID that identifies the operation in our service. This field can be used to help us analyze unexpected errors or behaviors.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// Boolean that indicates if the response is successful or not.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="success")]
		public bool Success { get; set; }
	}
	
	public class ApproveorderErrors
	{
		
		/// <summary>
		/// String containing the code returned by the source. Example value: If the source is `Fulfillment`, the code can be FMT005 to indicate that the item(s) in the order are not available.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// String containing the error message/description returned by the source.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Includes the following fields pointing out the context of the error: 
		///
		///`Fulfillment` 
		///
		///`Checkout` 
		///
		///`Order Integration`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
	}
	
	public class ApproveorderFields
	{
		
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public ApproveorderFieldsFields Fields { get; set; }
	}
	
	public class ApproveorderFieldsFields
	{
		
		/// <summary>
		/// String with the order's ID inside the franchise seller account in VTEX. Only returned if the order was integrated using the [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) feature, that is: 
		///
		///- `allowFranchises` field set to `true` when integrating the order 
		///- SLA chosen for the order is from a franchise account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="franchiseOrderId")]
		public string FranchiseOrderId { get; set; }
		
		/// <summary>
		/// String with the order’s ID inside the main seller account in VTEX.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mainOrderId")]
		public string MainOrderId { get; set; }
	}
	
	/// <summary>
	/// Structure with the customer's information. An order will be identified as corporate if any of the corporate fields are filled out (`corporateDocument`, `corporatePhone`, `corporateName` or `tradeName`).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClientProfileData
	{
		
		/// <summary>
		/// String with the company’s document number, in case of corporate orders.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="corporateDocument")]
		public string CorporateDocument { get; set; }
		
		/// <summary>
		/// String with the company’s name, in case of corporate orders.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="corporateName")]
		public string CorporateName { get; set; }
		
		/// <summary>
		/// String with the company’s phone number, in case of corporate orders.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="corporatePhone")]
		public string CorporatePhone { get; set; }
		
		/// <summary>
		/// String with the customer’s document number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="document")]
		public string Document { get; set; }
		
		/// <summary>
		/// String with the customer's email.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// String with the customer's first name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// String with the customer’s surname.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// String with the customer’s phone number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// String with the company’s state registration, in case of corporate orders.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stateInscription")]
		public string StateInscription { get; set; }
		
		/// <summary>
		/// String with the company’s fantasy name, in case of corporate orders.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tradeName")]
		public string TradeName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomApp
	{
		
		/// <summary>
		/// String dictionary with the names of the fields and their respective values that must be inserted into the order.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public Fields Fields { get; set; }
		
		/// <summary>
		/// App's ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Integer with the major version of the app. Optional, defaulting to one.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="major")]
		public int Major { get; set; }
	}
	
	/// <summary>
	/// String dictionary with the names of the fields and their respective values that must be inserted into the order.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Fields
	{
		
		/// <summary>
		/// String with field's key and value.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplacePaymentMethod")]
		public string MarketplacePaymentMethod { get; set; }
	}
	
	/// <summary>
	/// Structure with the order's customizable fields. To insert custom fields in the order, you must first go through the process of [Creating an app](https://developers.vtex.com/vtex-rest-api/docs/external-marketplace-integration-app-template), and then adding the app, as well as the desired fields, within the seller's `orderForm`. More information on [Creating customizable fields in the cart with Checkout API](https://developers.vtex.com/vtex-rest-api/docs/customizable-fields-with-checkout-api).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customApps")]
		public CustomApp[] CustomApps { get; set; }
	}
	
	/// <summary>
	/// List of delivery IDs, used for orders where the marketplace is responsible for the fulfillment of the order, including keeping inventory at a warehouse as well as the delivery.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeliveryIds
	{
		
		/// <summary>
		/// String with the ID of the warehouse used for marketplace fulfillment. Required when `isFob` = `true` and `isMarketplaceFulfillment` = `true`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="warehouseId")]
		public string WarehouseId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Deliverybyfranchiseseller
	{
		
		/// <summary>
		/// String that indicates which account made the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// String with a internal Channel Order API code that classifies the response. The possible values returned in this field are described in the [Response Codes]() section.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// List with errors related to the response, if there's any.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public DeliverybyfranchisesellerErrors[] DeliverybyfranchisesellerErrors { get; set; }
		
		/// <summary>
		/// Structure with important fields for the connector. This structure is only returned if the response is successful. Includes the following fields: 
		///
		///`mainOrderId`: String with the order's ID inside the main seller account in VTEX. 
		///
		///`franchiseOrderId`: - String with the order's ID inside the franchise seller account in VTEX. Only returned if the order was integrated using the [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) feature, that is: 
		///
		///- `allowFranchises` field set to `true` when integrating the order 
		///
		///- `SLA` chosen for the order is from a franchise account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public DeliverybyfranchisesellerFields Fields { get; set; }
		
		/// <summary>
		/// String containing the name of the flow responsible for the response. This field can contain the following values: 
		///
		///`PlaceOrder`: when integrating new orders 
		///
		///`ApproveOrder`: when approving existing orders 
		///
		///`Unknown`: when we’re not able to identify the flow
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="flow")]
		public string Flow { get; set; }
		
		/// <summary>
		/// String that indicates the order's ID in the marketplace.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplaceOrderId")]
		public string MarketplaceOrderId { get; set; }
		
		/// <summary>
		/// String with a message explaining the code returned in the response. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// String GUID that identifies the operation in our service. This field can be used to help us analyze unexpected errors or behaviors.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// Boolean that indicates if the response is successful or not.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="success")]
		public bool Success { get; set; }
	}
	
	public class DeliverybyfranchisesellerErrors
	{
		
		/// <summary>
		/// String containing the code returned by the source. Example value: If the source is `Fulfillment`, the code can be FMT005 to indicate that the item(s) in the order are not available.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// String containing the error message/description returned by the source.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Includes the following fields pointing out the context of the error: 
		///
		///`Fulfillment` 
		///
		///`Checkout` 
		///
		///`Order Integration`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
	}
	
	public class DeliverybyfranchisesellerFields
	{
		
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public DeliverybyfranchisesellerFieldsFields Fields { get; set; }
	}
	
	public class DeliverybyfranchisesellerFieldsFields
	{
		
		/// <summary>
		/// String with the order's ID inside the franchise seller account in VTEX. Only returned if the order was integrated using the [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) feature, that is: 
		///
		///- `allowFranchises` field set to `true` when integrating the order 
		///- SLA chosen for the order is from a franchise account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="franchiseOrderId")]
		public string FranchiseOrderId { get; set; }
		
		/// <summary>
		/// String with the order’s ID inside the main seller account in VTEX.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mainOrderId")]
		public string MainOrderId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Deliverybyseller
	{
		
		/// <summary>
		/// String that indicates which account made the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// String with a internal Channel Order API code that classifies the response. The possible values returned in this field are described in the [Response Codes]() section.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// List with errors related to the response, if there's any.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public DeliverybysellerErrors[] DeliverybysellerErrors { get; set; }
		
		/// <summary>
		/// Structure with important fields for the connector. This structure is only returned if the response is successful. Includes the following fields: 
		///
		///`mainOrderId`: String with the order's ID inside the main seller account in VTEX. 
		///
		///`franchiseOrderId`: - String with the order's ID inside the franchise seller account in VTEX. Only returned if the order was integrated using the [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) feature, that is: 
		///
		///- `allowFranchises` field set to `true` when integrating the order 
		///
		///- `SLA` chosen for the order is from a franchise account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public DeliverybysellerFields Fields { get; set; }
		
		/// <summary>
		/// String containing the name of the flow responsible for the response. This field can contain the following values: 
		///
		///`PlaceOrder`: when integrating new orders 
		///
		///`ApproveOrder`: when approving existing orders 
		///
		///`Unknown`: when we’re not able to identify the flow
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="flow")]
		public string Flow { get; set; }
		
		/// <summary>
		/// String that indicates the order's ID in the marketplace.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplaceOrderId")]
		public string MarketplaceOrderId { get; set; }
		
		/// <summary>
		/// String with a message explaining the code returned in the response. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// String GUID that identifies the operation in our service. This field can be used to help us analyze unexpected errors or behaviors.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// Boolean that indicates if the response is successful or not.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="success")]
		public bool Success { get; set; }
	}
	
	public class DeliverybysellerErrors
	{
		
		/// <summary>
		/// String containing the code returned by the source. Example value: If the source is `Fulfillment`, the code can be FMT005 to indicate that the item(s) in the order are not available.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// String containing the error message/description returned by the source.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Includes the following fields pointing out the context of the error: 
		///
		///`Fulfillment` 
		///
		///`Checkout` 
		///
		///`Order Integration`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
	}
	
	public class DeliverybysellerFields
	{
		
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public DeliverybysellerFieldsFields Fields { get; set; }
	}
	
	public class DeliverybysellerFieldsFields
	{
		
		/// <summary>
		/// String with the order's ID inside the franchise seller account in VTEX. Only returned if the order was integrated using the [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) feature, that is: 
		///
		///- `allowFranchises` field set to `true` when integrating the order 
		///- SLA chosen for the order is from a franchise account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="franchiseOrderId")]
		public string FranchiseOrderId { get; set; }
		
		/// <summary>
		/// String with the order’s ID inside the main seller account in VTEX.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mainOrderId")]
		public string MainOrderId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnqueueNewOrderRequest
	{
		
		/// <summary>
		/// Boolean indicating whether franchise accounts linked to the main seller should be considered. That is, if the order delivery pickup/SLA can belong to a [franchise account](https://help.vtex.com/en/tutorial/what-is-a-franchise-account--kWQC6RkFSCUFGgY5gSjdl), for example. This field is optional and defaults to `false`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allowFranchises")]
		public bool AllowFranchises { get; set; }
		
		/// <summary>
		/// Structure with the customer's information. An order will be identified as corporate if any of the corporate fields are filled out (`corporateDocument`, `corporatePhone`, `corporateName` or `tradeName`).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientProfileData")]
		public ClientProfileData ClientProfileData { get; set; }
		
		/// <summary>
		/// String with the connector's base endpoint that will receive notifications about the orders processing results, as well as status updates from VTEX OMS. This field accepts query strings. You can use the models below:  
		///
		///- `https://{{externalconnector}}.com`  
		///
		///- `https://{{externalconnector.com}}/api/vtex` if you additionaly want to send a relative URL with the endpoint. 
		///
		///This field is optional if the connector uses the [App Template](https://developers.vtex.com/vtex-rest-api/docs/external-marketplace-integration-app-template) and authenticates on our request via `VtexIdclientAutCookie`.  
		///
		///It is required if the connector is native or does not use the App Template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorEndpoint")]
		public string ConnectorEndpoint { get; set; }
		
		/// <summary>
		/// String with the identifier code of the connector responsible for the order.  
		///
		///This field is optional if the connector uses the [App Template](https://developers.vtex.com/vtex-rest-api/docs/external-marketplace-integration-app-template) and authenticates on our request via `VtexIdclientAutCookie`.  
		///
		///It is required if the connector is native or does not use the App Template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorName")]
		public string ConnectorName { get; set; }
		
		/// <summary>
		/// Structure with the order's customizable fields. To insert custom fields in the order, you must first go through the process of [Creating an app](https://developers.vtex.com/vtex-rest-api/docs/external-marketplace-integration-app-template), and then adding the app, as well as the desired fields, within the seller's `orderForm`. More information on [Creating customizable fields in the cart with Checkout API](https://developers.vtex.com/vtex-rest-api/docs/customizable-fields-with-checkout-api).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customData")]
		public CustomData CustomData { get; set; }
		
		/// <summary>
		/// Object with the order's billing data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="invoiceData")]
		public InvoiceData InvoiceData { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Item[] Items { get; set; }
		
		/// <summary>
		/// String that indicates the order's ID in the marketplace.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplaceOrderId")]
		public string MarketplaceOrderId { get; set; }
		
		/// <summary>
		/// Required field including a string with the order’s status in the marketplace. If you send an order with the status APPROVED to integrate, our service will automatically try to advance it’s status in VTEX after integrating it. This field accepts the following values:  
		///
		///- `new`  
		///
		///- `approved`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplaceOrderStatus")]
		public string MarketplaceOrderStatus { get; set; }
		
		/// <summary>
		/// Integer that indicates the order’s total value, which the marketplace will pay to the seller. It’s important to note that this value should include interest, if that’s the case. If the value is `USD110.50`, convert it to the format → `11050`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplacePaymentValue")]
		public int MarketplacePaymentValue { get; set; }
		
		/// <summary>
		/// String that indicates the name of the account responsible for the order’s pickup point. It is only required for pickup-in-point orders from franchise accounts, when franchise accounts `allowFranchises` is `true` and the order in question has a `pickup-in-point` delivery type. It is optional otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupAccountName")]
		public string PickupAccountName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shippingData")]
		public ShippingData ShippingData { get; set; }
	}
	
	/// <summary>
	/// Object with the order's billing data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvoiceData
	{
		
		/// <summary>
		/// Structure with the order’s payment data. Required only if `invoiceData` is defined.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userPaymentInfo")]
		public UserPaymentInfo UserPaymentInfo { get; set; }
	}
	
	/// <summary>
	/// Structure with the order’s payment data. Required only if `invoiceData` is defined.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserPaymentInfo
	{
		
		/// <summary>
		/// List of strings with the payment methods used in the order. Required only if invoiceData is defined. The format and some possible values of payment methods accepted in this list can be found in the call [Fetching marketplace information with the Orders API](https://developers.vtex.com/vtex-rest-api/docs/get-marketplace-data-orders-api).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="paymentMethods")]
		public string[] PaymentMethods { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Item
	{
		
		/// <summary>
		/// String with the SKU ID in VTEX’s catalog.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Integer with the SKU’s unit price. If the value is `USD110.50`, convert it to the format → `11050`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="price")]
		public int Price { get; set; }
		
		/// <summary>
		/// Integer with the quantity of the SKU present in the order. The value should be greater than zero.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public int Quantity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShippingData
	{
		
		/// <summary>
		/// Boolean that indicates whether the order's delivery is the marketplace responsibility. Optional, defaulting to false.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isFob")]
		public bool IsFob { get; set; }
		
		/// <summary>
		/// Boolean that indicates whether the order's inventory in warehouse is the marketplace's responsibility. Optional, defaulting to false.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isMarketplaceFulfillment")]
		public bool IsMarketplaceFulfillment { get; set; }
		
		/// <summary>
		/// List that references the SLAs responsible for delivering each item in the order.  
		///
		///This list must contain the same number of items as the `items` list, previously defined. For example: if the order contains 3 SKUs, you must describe 3 SLAs in this list, one for each SKU (even in cases where the same SLA will deliver all of them).  
		///
		///The order of the SLAs in this list must also follow the same order as in the `items` list. For example: if the SLA named **Correios Express** will be responsible for delivering the SKU with ID equal to **1015**, which is found at index 0 of the `items` list, it must be in index 0 of the `logisticsInfo` list as well.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="logisticsInfo")]
		public LogisticsInfo[] LogisticsInfo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="selectedAddresses")]
		public SelectedAddress[] SelectedAddresses { get; set; }
	}
	
	/// <summary>
	/// List that references the SLAs responsible for delivering each item in the order.  
	///
	///This list must contain the same number of items as the `items` list, previously defined. For example: if the order contains 3 SKUs, you must describe 3 SLAs in this list, one for each SKU (even in cases where the same SLA will deliver all of them).  
	///
	///The order of the SLAs in this list must also follow the same order as in the `items` list. For example: if the SLA named **Correios Express** will be responsible for delivering the SKU with ID equal to **1015**, which is found at index 0 of the `items` list, it must be in index 0 of the `logisticsInfo` list as well.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LogisticsInfo
	{
		
		/// <summary>
		/// List of delivery IDs, used for orders where the marketplace is responsible for the fulfillment of the order, including keeping inventory at a warehouse as well as the delivery.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deliveryIds")]
		public DeliveryIds DeliveryIds { get; set; }
		
		/// <summary>
		/// String with the inventory reservation period in VTEX's logistics system. To fill in this field insert the number of days, followed by the letter for the chosen unit. 
		///
		///- Days: `d` 
		///
		///- Business days: `bd`. 
		///
		///Example formats: `12d`, `5d`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lockTTL")]
		public string LockTTL { get; set; }
		
		/// <summary>
		/// Integer indicating the shipping price for this SKU. If the value is `USD20.50`, convert it to the format → `2050`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="price")]
		public int Price { get; set; }
		
		/// <summary>
		/// String with the selected delivery channel. This field supports the following values:  
		///
		///- `delivery`,  
		///
		///- `pickup-in-point`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="selectedDeliveryChannel")]
		public string SelectedDeliveryChannel { get; set; }
		
		/// <summary>
		/// String with the selected delivery SLA.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="selectedSla")]
		public string SelectedSla { get; set; }
		
		/// <summary>
		/// String with the order's estimated delivery time. To fill in this field, insert a number,  followed by the letter for the chosen unit. 
		///
		///- Days: `d` 
		///
		///- Business days: `bd`. 
		///
		///- Hours: `h` 
		///
		///- Minutes: `m`. 
		///
		///Example formats: `12d`, `5bd`, `3h`, `50m`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shippingEstimate")]
		public string ShippingEstimate { get; set; }
	}
	
	/// <summary>
	/// List with the delivery addresses selected for the order. We currently only support a single delivery address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SelectedAddress
	{
		
		/// <summary>
		/// String with the address identifier. Optional for `delivery` type orders, and required for `pickup-in-point` orders.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="addressId")]
		public string AddressId { get; set; }
		
		/// <summary>
		/// String with the address type. The field supports the values: `residential`, `commercial`, `pickup`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="addressType")]
		public string AddressType { get; set; }
		
		/// <summary>
		/// String with the city’s name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// String with the address' complement, like building name, or extra number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; }
		
		/// <summary>
		/// String with the state's name, filled in with three letter code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Structure with the address geocoordinates. Optional for `delivery` orders, required for `pickup-in-point` orders.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public GeoCoordinates GeoCoordinates { get; set; }
		
		/// <summary>
		/// String with the neighborhood's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="neighborhood")]
		public string Neighborhood { get; set; }
		
		/// <summary>
		/// String with the street's number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// String with the address' postal code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// String with the name of the person responsible for receiving the order.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiverName")]
		public string ReceiverName { get; set; }
		
		/// <summary>
		/// String with the state's name, filled in with two letter code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// String with the street's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
	}
	
	/// <summary>
	/// Structure with the address geocoordinates. Optional for `delivery` orders, required for `pickup-in-point` orders.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GeoCoordinates
	{
		
		/// <summary>
		/// Double value with the latitude coordinates of the address. Required only if the geoCoordinates field is defined. 
		///
		///Example format: `-25.4158764`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public string Latitude { get; set; }
		
		/// <summary>
		/// Double value with the longitude coordinates of the address. Required only if the geoCoordinates field is defined. Example format: `-49.342759`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public string Longitude { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Pickup_in_point
	{
		
		/// <summary>
		/// String that indicates which account made the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// String with a internal Channel Order API code that classifies the response. The possible values returned in this field are described in the [Response Codes]() section.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// List with errors related to the response, if there's any.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Pickup_in_pointErrors[] Pickup_in_pointErrors { get; set; }
		
		/// <summary>
		/// Structure with important fields for the connector. This structure is only returned if the response is successful. Includes the following fields: 
		///
		///`mainOrderId`: String with the order's ID inside the main seller account in VTEX. 
		///
		///`franchiseOrderId`: - String with the order's ID inside the franchise seller account in VTEX. Only returned if the order was integrated using the [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) feature, that is: 
		///
		///- `allowFranchises` field set to `true` when integrating the order 
		///
		///- `SLA` chosen for the order is from a franchise account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public Pickup_in_pointFields Fields { get; set; }
		
		/// <summary>
		/// String containing the name of the flow responsible for the response. This field can contain the following values: 
		///
		///`PlaceOrder`: when integrating new orders 
		///
		///`ApproveOrder`: when approving existing orders 
		///
		///`Unknown`: when we’re not able to identify the flow
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="flow")]
		public string Flow { get; set; }
		
		/// <summary>
		/// String that indicates the order's ID in the marketplace.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplaceOrderId")]
		public string MarketplaceOrderId { get; set; }
		
		/// <summary>
		/// String with a message explaining the code returned in the response. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// String GUID that identifies the operation in our service. This field can be used to help us analyze unexpected errors or behaviors.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// Boolean that indicates if the response is successful or not.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="success")]
		public bool Success { get; set; }
	}
	
	public class Pickup_in_pointErrors
	{
		
		/// <summary>
		/// String containing the code returned by the source. Example value: If the source is `Fulfillment`, the code can be FMT005 to indicate that the item(s) in the order are not available.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// String containing the error message/description returned by the source.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Includes the following fields pointing out the context of the error: 
		///
		///`Fulfillment` 
		///
		///`Checkout` 
		///
		///`Order Integration`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
	}
	
	public class Pickup_in_pointFields
	{
		
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public Pickup_in_pointFieldsFields Fields { get; set; }
	}
	
	public class Pickup_in_pointFieldsFields
	{
		
		/// <summary>
		/// String with the order's ID inside the franchise seller account in VTEX. Only returned if the order was integrated using the [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) feature, that is: 
		///
		///- `allowFranchises` field set to `true` when integrating the order 
		///- SLA chosen for the order is from a franchise account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="franchiseOrderId")]
		public string FranchiseOrderId { get; set; }
		
		/// <summary>
		/// String with the order's ID inside the main seller account in VTEX.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mainOrderId")]
		public string MainOrderId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Pickup_in_pointfranchise
	{
		
		/// <summary>
		/// String that indicates which account made the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// String with a internal Channel Order API code that classifies the response. The possible values returned in this field are described in the [Response Codes]() section.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// List with errors related to the response, if there's any.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Pickup_in_pointfranchiseErrors[] Pickup_in_pointfranchiseErrors { get; set; }
		
		/// <summary>
		/// Structure with important fields for the connector. This structure is only returned if the response is successful. Includes the following fields: 
		///
		///`mainOrderId`: String with the order's ID inside the main seller account in VTEX. 
		///
		///`franchiseOrderId`: - String with the order's ID inside the franchise seller account in VTEX. Only returned if the order was integrated using the [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) feature, that is: 
		///
		///- `allowFranchises` field set to `true` when integrating the order 
		///
		///- `SLA` chosen for the order is from a franchise account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public Pickup_in_pointfranchiseFields Fields { get; set; }
		
		/// <summary>
		/// String containing the name of the flow responsible for the response. This field can contain the following values: 
		///
		///`PlaceOrder`: when integrating new orders 
		///
		///`ApproveOrder`: when approving existing orders 
		///
		///`Unknown`: when we’re not able to identify the flow
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="flow")]
		public string Flow { get; set; }
		
		/// <summary>
		/// String that indicates the order's ID in the marketplace.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplaceOrderId")]
		public string MarketplaceOrderId { get; set; }
		
		/// <summary>
		/// String with a message explaining the code returned in the response. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// String GUID that identifies the operation in our service. This field can be used to help us analyze unexpected errors or behaviors.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// Boolean that indicates if the response is successful or not.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="success")]
		public bool Success { get; set; }
	}
	
	public class Pickup_in_pointfranchiseErrors
	{
		
		/// <summary>
		/// String containing the code returned by the source. Example value: If the source is `Fulfillment`, the code can be FMT005 to indicate that the item(s) in the order are not available.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// String containing the error message/description returned by the source.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Includes the following fields pointing out the context of the error: 
		///
		///`Fulfillment` 
		///
		///`Checkout` 
		///
		///`Order Integration`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
	}
	
	public class Pickup_in_pointfranchiseFields
	{
		
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public Pickup_in_pointfranchiseFieldsFields Fields { get; set; }
	}
	
	public class Pickup_in_pointfranchiseFieldsFields
	{
		
		/// <summary>
		/// String with the order's ID inside the franchise seller account in VTEX. Only returned if the order was integrated using the [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) feature, that is: 
		///
		///- `allowFranchises` field set to `true` when integrating the order 
		///- SLA chosen for the order is from a franchise account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="franchiseOrderId")]
		public string FranchiseOrderId { get; set; }
		
		/// <summary>
		/// String with the order’s ID inside the main seller account in VTEX.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mainOrderId")]
		public string MainOrderId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateOrderStatusRequest
	{
		
		/// <summary>
		/// String with the connector's base endpoint that will receive notifications about the orders processing results, as well as status updates from VTEX OMS. This field does not accept query strings. You can use the models below:  
		///
		///- `https://{{externalconnector}}.com`  
		///
		///- `https://{{externalconnector.com}}/api/vtex` if you additionaly want to send a relative URL with the endpoint. 
		///
		///This field is optional if the connector uses the [App Template](https://developers.vtex.com/vtex-rest-api/docs/external-marketplace-integration-app-template) and authenticates on our request via `VtexIdclientAutCookie`.  
		///
		///It is required if the connector is native or does not use the App Template.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectorEndpoint")]
		public string ConnectorEndpoint { get; set; }
		
		/// <summary>
		/// String with the identifier code of the connector responsible for the order.  
		///
		///This field is optional if the connector uses the [App Template](https://developers.vtex.com/vtex-rest-api/docs/external-marketplace-integration-app-template) and authenticates on our request via `VtexIdclientAutCookie`.  
		///
		///It is required if the connector is native or does not use the App Template.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectorName")]
		public string ConnectorName { get; set; }
		
		/// <summary>
		/// String that indicates the order's ID in the marketplace.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplaceOrderId")]
		public string MarketplaceOrderId { get; set; }
		
		/// <summary>
		/// Required field including a string with the order’s status in the marketplace. If you send an order with the status APPROVED to integrate, our service will automatically try to advance its status in VTEX after integrating it. This field accepts the following values:  
		///
		///- `new`  
		///
		///- `approved`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplaceOrderStatus")]
		public string MarketplaceOrderStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VtexMapperRegistration
	{
		
		/// <summary>
		/// The `CategoryTreeProcessingNotificationEndpoint` is optional, and should be an endpoint from the external marketplace, that will be notified after the marketplace's category tree is successfully processed or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CategoryTreeProcessingNotificationEndpoint { get; set; }
		
		/// <summary>
		/// Endpoint that returns categories and attributes according to VTEX  Mapper specifications.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categoryTreeEndPoint")]
		public string CategoryTreeEndPoint { get; set; }
		
		/// <summary>
		/// Marketplace Name, that will be displayed in VTEX Mapper.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Secure endpoint that will receive the category mapping sent by VTEX Mapper.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mappingEndPoint")]
		public string MappingEndPoint { get; set; }
		
		/// <summary>
		/// Refers to the `allowsRemap` property.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public string Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BundleItemsItem
	{
		
		/// <summary>
		/// Service identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Service name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Service price. The last two digits are the cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Service type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FulfillmentItem
	{
		
		/// <summary>
		/// SKU ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Quantity of items of the SKU in the cart.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public int Quantity { get; set; }
		
		/// <summary>
		/// ID of the seller registered in VTEX.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="seller")]
		public string Seller { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ItemAttachment
	{
		
		/// <summary>
		/// Content referring to the customization requested by the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// Attachment name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderPlacement
	{
		
		/// <summary>
		/// Customer's profile information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientProfileData")]
		public OrderPlacementClientProfileData ClientProfileData { get; set; }
		
		/// <summary>
		/// Array of objects containing data about each SKU in the cart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public OrderPlacementItems[] OrderPlacementItems { get; set; }
		
		/// <summary>
		/// Marketing tracking data. If the order has no tracking data, the value will be `null`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketingData")]
		public OrderPlacementMarketingData MarketingData { get; set; }
		
		/// <summary>
		/// Identifies the order in the marketplace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketplaceOrderId")]
		public string MarketplaceOrderId { get; set; }
		
		/// <summary>
		/// Amount that the marketplace agrees to pay to the seller. The last two digits are the cents. For example, $24.99 is represented 2499.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketplacePaymentValue")]
		public System.Nullable<System.Int32> MarketplacePaymentValue { get; set; }
		
		/// <summary>
		/// Endpoint sent by VTEX to the seller, that will be used to send the invoice and tracking data to the marketplace. This endpoint will also be used in [change order in Multilevel Omnichannel Inventory](https://developers.vtex.com/docs/guides/change-orders-multilevel-omnichannel-inventory-external-marketplaces#implementators) operations in external marketplaces.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketplaceServicesEndpoint")]
		public string MarketplaceServicesEndpoint { get; set; }
		
		/// <summary>
		/// Optional field meant to hold additional information about the order. We recommend using this field for text, not data formats such as `json` even if escaped. For that purpose, see [Creating customizable fields](https://developers.vtex.com/vtex-rest-api/docs/creating-customizable-fields-in-the-cart-with-checkout-api-1)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openTextField")]
		public string OpenTextField { get; set; }
		
		/// <summary>
		/// In other contexts, this field tipically holds an object with payment information. However, since the payment is processed by the marketplace, it will be sent to the seller as `null` in this context.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentData")]
		public string PaymentData { get; set; }
		
		/// <summary>
		/// Shipping information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingData")]
		public OrderPlacementShippingData ShippingData { get; set; }
	}
	
	public class OrderPlacementClientProfileData
	{
		
		/// <summary>
		/// Corporate document, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporateDocument")]
		public string CorporateDocument { get; set; }
		
		/// <summary>
		/// Company name, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporateName")]
		public string CorporateName { get; set; }
		
		/// <summary>
		/// Corporate phone number, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporatePhone")]
		public string CorporatePhone { get; set; }
		
		/// <summary>
		/// Document number informed by the customer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="document")]
		public string Document { get; set; }
		
		/// <summary>
		/// Type of the document informed by the customer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="documentType")]
		public string DocumentType { get; set; }
		
		/// <summary>
		/// Customer's email address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Customer's first name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// `true` if the customer is a legal entity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isCorporate")]
		public System.Nullable<System.Boolean> IsCorporate { get; set; }
		
		/// <summary>
		/// Customer's last name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// Customer's phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// State inscription, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateInscription")]
		public string StateInscription { get; set; }
		
		/// <summary>
		/// Trade name, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tradeName")]
		public string TradeName { get; set; }
	}
	
	public class OrderPlacementItems
	{
		
		/// <summary>
		/// Array containing information on attachments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public string[] Attachments { get; set; }
		
		/// <summary>
		/// Information on services sold along with the SKU. Example: a gift package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bundleItems")]
		public BundleItemsItem[] BundleItems { get; set; }
		
		/// <summary>
		/// Comission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commission")]
		public System.Nullable<System.Int32> Commission { get; set; }
		
		/// <summary>
		/// Freight comission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freightCommission")]
		public System.Nullable<System.Int32> FreightCommission { get; set; }
		
		/// <summary>
		/// SKU ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// `true` if the item is a gift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isGift")]
		public System.Nullable<System.Boolean> IsGift { get; set; }
		
		/// <summary>
		/// Attachments sold with the SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsAttachment")]
		public ItemAttachment[] ItemsAttachment { get; set; }
		
		/// <summary>
		/// SKU measurement unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="measurementUnit")]
		public string MeasurementUnit { get; set; }
		
		/// <summary>
		/// SKU price. The last two digits are the cents. For example, $24.99 is represented 2499.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Array of price tags, each of which, modifies the price in some way, like discounts or rates that apply to the item in the context of the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceTags")]
		public OrderPlacementItemsPriceTags[] OrderPlacementItemsPriceTags { get; set; }
		
		/// <summary>
		/// Quantity of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// ID of the seller registered in VTEX.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seller")]
		public string Seller { get; set; }
		
		/// <summary>
		/// SKU unit multiplier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitMultiplier")]
		public System.Nullable<System.Int32> UnitMultiplier { get; set; }
	}
	
	public class OrderPlacementItemsPriceTags
	{
		
		/// <summary>
		/// Price tag identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		/// <summary>
		/// `true` if price tag value is applied through a percentage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPercentual")]
		public System.Nullable<System.Boolean> IsPercentual { get; set; }
		
		/// <summary>
		/// Price tag name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Price tag value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rawValue")]
		public System.Nullable<System.Int32> RawValue { get; set; }
		
		/// <summary>
		/// Price tag raw value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class OrderPlacementMarketingData
	{
		
		/// <summary>
		/// UTM campaign
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utmCampaign")]
		public string UtmCampaign { get; set; }
		
		/// <summary>
		/// UTM medium.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utmMedium")]
		public string UtmMedium { get; set; }
		
		/// <summary>
		/// UTM source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utmSource")]
		public string UtmSource { get; set; }
		
		/// <summary>
		/// utmi_campaign (internal utm)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utmiCampaign")]
		public string UtmiCampaign { get; set; }
		
		/// <summary>
		/// utmi_page (internal utm)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utmiPage")]
		public string UtmiPage { get; set; }
		
		/// <summary>
		/// utmi_part (internal utm)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utmiPart")]
		public string UtmiPart { get; set; }
	}
	
	public class OrderPlacementShippingData
	{
		
		/// <summary>
		/// Shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public OrderPlacementShippingDataAddress Address { get; set; }
		
		/// <summary>
		/// Array of objects containing logistics information of each item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logisticsInfo")]
		public OrderPlacementShippingDataLogisticsInfo[] OrderPlacementShippingDataLogisticsInfo { get; set; }
		
		/// <summary>
		/// Indicate whether this object's information is up to date according to the order's items. An order can not be placed if `"outdated"`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateStatus")]
		public string UpdateStatus { get; set; }
	}
	
	public class OrderPlacementShippingDataAddress
	{
		
		/// <summary>
		/// Address ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressId")]
		public string AddressId { get; set; }
		
		/// <summary>
		/// Type of address. For example, `Residential` or `Pickup`, among others.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="addressType")]
		public string AddressType { get; set; }
		
		/// <summary>
		/// City of the shipping address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Complement to the shipping address in case it applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; }
		
		/// <summary>
		/// Three letter ISO code of the country of the shipping address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Array with two strings with geocoordinates, first latitude, then longitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public string[] GeoCoordinates { get; set; }
		
		/// <summary>
		/// Neighborhood of the shipping address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="neighborhood")]
		public string Neighborhood { get; set; }
		
		/// <summary>
		/// Number of the building, house or apartment in the shipping address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Postal Code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Name of the person who is going to receive the order.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiverName")]
		public string ReceiverName { get; set; }
		
		/// <summary>
		/// Complement that might help locate the shipping address more precisely in case of delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		/// <summary>
		/// State of the shipping address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Street of the shipping address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
	}
	
	public class OrderPlacementShippingDataLogisticsInfo
	{
		
		/// <summary>
		/// Scheduled delivery window information, in case it applies to the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryWindow")]
		public OrderPlacementShippingDataLogisticsInfoDeliveryWindow DeliveryWindow { get; set; }
		
		/// <summary>
		/// Index of the item in the `items` array, starting from 0.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="itemIndex")]
		public int ItemIndex { get; set; }
		
		/// <summary>
		/// Logistics reservation waiting time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lockTTL")]
		public string LockTTL { get; set; }
		
		/// <summary>
		/// Shipping price for the item. Does not account for the whole order's shipping price.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="price")]
		public int Price { get; set; }
		
		/// <summary>
		/// Selected shipping option
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="selectedSla")]
		public string SelectedSla { get; set; }
		
		/// <summary>
		/// Estimated time until delivery for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingEstimate")]
		public string ShippingEstimate { get; set; }
	}
	
	public class OrderPlacementShippingDataLogisticsInfoDeliveryWindow
	{
		
		/// <summary>
		/// Scheduled delivery window end date in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDateUtc")]
		public string EndDateUtc { get; set; }
		
		/// <summary>
		/// Scheduled delivery window list price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listPrice")]
		public System.Nullable<System.Double> ListPrice { get; set; }
		
		/// <summary>
		/// Scheduled delivery window start date in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDateUtc")]
		public string StartDateUtc { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SendCategoryMappingToVtexMapper
	{
		
		/// <summary>
		/// Array with Marketplace parent categories and their information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public SendCategoryMappingToVtexMapperCategories[] SendCategoryMappingToVtexMapperCategories { get; set; }
	}
	
	public class SendCategoryMappingToVtexMapperCategories
	{
		
		/// <summary>
		/// Array with children categories in the marketplace, and their information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="children")]
		public SendCategoryMappingToVtexMapperCategoriesChildren[] SendCategoryMappingToVtexMapperCategoriesChildren { get; set; }
		
		/// <summary>
		/// ID of the parent category in the marketplace.
		/// </summary>
		[System.ComponentModel.DefaultValue("1")]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; } = "1";
		
		/// <summary>
		/// Name of the parent category in the marketplace.
		/// </summary>
		[System.ComponentModel.DefaultValue("Appliances")]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; } = "Appliances";
	}
	
	public class SendCategoryMappingToVtexMapperCategoriesChildren
	{
		
		/// <summary>
		/// Grandchildren categories in the marketplace. Send as array of `ID`, `name` and `specifications`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="children")]
		public string[] Children { get; set; }
		
		/// <summary>
		/// ID of the child  category in the marketplace.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("1a")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; } = "1a";
		
		/// <summary>
		/// Name of the child  category in the marketplace.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("Kitchen")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; } = "Kitchen";
		
		/// <summary>
		/// Specifications for the Product or SKU
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="specifications")]
		public SendCategoryMappingToVtexMapperCategoriesChildrenSpecifications[] SendCategoryMappingToVtexMapperCategoriesChildrenSpecifications { get; set; }
	}
	
	public class SendCategoryMappingToVtexMapperCategoriesChildrenSpecifications
	{
		
		/// <summary>
		/// Name of the attribute sent as a specification.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("Color")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributeName")]
		public string AttributeName { get; set; } = "Color";
		
		/// <summary>
		/// Values of the atttribute specified.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributeValues")]
		public SendCategoryMappingToVtexMapperCategoriesChildrenSpecificationsAttributeValues[] SendCategoryMappingToVtexMapperCategoriesChildrenSpecificationsAttributeValues { get; set; }
		
		/// <summary>
		/// If the specification is required, mark this flag as `true`. If not, mark it as `false`.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(false)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="required")]
		public bool Required { get; set; } = false;
	}
	
	public class SendCategoryMappingToVtexMapperCategoriesChildrenSpecificationsAttributeValues
	{
		
		/// <summary>
		/// Name of the value
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("Red")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="valueName")]
		public string ValueName { get; set; } = "Red";
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Fulfillment simulation - External Marketplace
		/// This endpoint can be triggered by marketplaces to simulate the fulfillment of an item in the cart.
		/// 
		/// The fulfillment information is useful whenever you need to know the availability of fulfilling an order for a specific cart setting, since the API response will let you know the updated price, inventory and shipping data.
		/// Fulfillment_simulation_external_marketplace api/checkout/pub/orderForms/simulation
		/// </summary>
		/// <param name="affiliateId">The affiliate ID code created by the seller.</param>
		/// <param name="sc">Trade Policy (Sales Channel) identification.</param>
		/// <returns>OK</returns>
		public async Task<Fulfillment_simulation_external_marketplaceReturn> Fulfillment_simulation_external_marketplaceAsync(string affiliateId, int sc, Fulfillment_simulation_external_marketplacePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/checkout/pub/orderForms/simulation?affiliateId=" + (affiliateId==null? "" : System.Uri.EscapeDataString(affiliateId))+"&sc="+sc;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Fulfillment_simulation_external_marketplaceReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Send Category Mapping to VTEX Mapper
		/// Mapping categories guarantees that the VTEX category tree has a correct association with the marketplace’s category tree.
		/// 
		/// To perform this association, VTEX made VTEX Mapper available. It is a tool integrated to the VTEX platform that allows the user to relate categories created in VTEX to categories from the marketplace.
		/// 
		/// This endpoint allows connectors to send the marketplace's category tree mapped in the integration.
		/// 
		/// Connectors should send the payload compacted in .gzip format.
		/// 
		/// For a detailed explanation of the steps required to develop a custom connector to become an external marketplace for VTEX sellers, check out our complete [External Marketplace Integration Guide](https://developers.vtex.com/vtex-rest-api/docs/external-marketplace-integration-guide).
		/// Send_category_mapping_vtex_mapper portal.vtexcommercestable.com.br/api/mkp-category-mapper/categories/marketplace/{id}
		/// </summary>
		/// <param name="id">Code identifying returned in the *VTEX Mapper Registration* endpoint.</param>
		/// <returns>OK</returns>
		public async Task Send_category_mapping_vtex_mapperAsync(string id, SendCategoryMappingToVtexMapper requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portal.vtexcommercestable.com.br/api/mkp-category-mapper/categories/marketplace/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// VTEX Mapper Registration
		/// Mapping categories guarantees that the VTEX category tree has a correct association with the marketplace’s category tree.
		/// 
		/// To perform this association, VTEX made VTEX Mapper available. It is a tool integrated to the VTEX platform that allows the user to relate categories created in VTEX to categories from the marketplace.
		/// 
		/// This endpoint allows connectors to register the external marketplace integration in VTEX Mapper.
		/// 
		/// In case VTEX Mapper detects an error and the call fails, the connector should check if mandatory information was sent correctly. Ex. are URLs correctly registered in the properties categoryTreeEndPoint and mappingEndPoint?
		/// 
		/// For a detailed explanation of the steps required to develop a custom connector to become an external marketplace for VTEX sellers, check out our complete [External Marketplace Integration Guide](https://developers.vtex.com/vtex-rest-api/docs/external-marketplace-integration-guide).
		/// Vtex_mapper_registration portal.vtexcommercestable.com.br/api/mkp-category-mapper/connector/register
		/// </summary>
		/// <param name="an">Name of the VTEX account. Used as part of the URL.</param>
		/// <returns>OK</returns>
		public async Task Vtex_mapper_registrationAsync(string an, VtexMapperRegistration requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portal.vtexcommercestable.com.br/api/mkp-category-mapper/connector/register?an=" + (an==null? "" : System.Uri.EscapeDataString(an));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// New Order Integration
		/// API to integrate an external channel's order into the VTEX plataform.
		/// 
		/// This process is asynchronous and a notification with the order's integration results will be sent to the endpoint specified in the **connectorEndpoint** field in [App Template](https://developers.vtex.com/vtex-rest-api/docs/external-marketplace-integration-app-template), if the connector uses our App template. The field **connectorName** is also optional for connectors that use our App Template and authenticate using the app's auth cookie. If the account is not informed in the URL host, it should also be defined as a query string parameter in the route: `an={account}`.
		/// 
		/// For a detailed explanation of the steps required to develop a custom connector to become an external marketplace for VTEX sellers, check out our complete [External Marketplace Integration Guide](https://developers.vtex.com/vtex-rest-api/docs/external-marketplace-integration-guide).
		/// EnqueueNewOrder {accountName}.vtexcommercestable.com.br/api/order-integration/orders
		/// </summary>
		/// <param name="an">Parameter should indicate the name of the VTEX account where the order is being integrated or updated, meaning the seller responsible for the order.</param>
		/// <param name="accountName">Parameter should indicate the name of the VTEX account where the order is being integrated or updated, meaning the seller responsible for the order.</param>
		/// <param name="affiliateId">ID identifying the marketplace where the order originates. This ID is configured in the seller's VTEX account, and should be informed to the marketplace.</param>
		/// <returns>OK</returns>
		public async Task<Deliverybyseller> EnqueueNewOrderAsync(string an, string accountName, string affiliateId, EnqueueNewOrderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+".vtexcommercestable.com.br/api/order-integration/orders?an=" + (an==null? "" : System.Uri.EscapeDataString(an))+"&affiliateId=" + (affiliateId==null? "" : System.Uri.EscapeDataString(affiliateId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Deliverybyseller>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Order Status
		/// API request used to update an order status in VTEX.
		/// 
		/// This process is asynchronous and a notification with the order's integration results will be sent to the endpoint specified in the **connectiorEndpoint** field or the **connectiorEndpoint** [App Template](https://developers.vtex.com/vtex-rest-api/docs/external-marketplace-integration-app-template), if the connector uses our App template. The field **connectorName** is also optional for connectors that use our App Template and authenticate using the app's auth cookie.
		/// 
		/// For a detailed explanation of the steps required to develop a custom connector to become an external marketplace for VTEX sellers, check out our complete [External Marketplace Integration Guide](https://developers.vtex.com/vtex-rest-api/docs/external-marketplace-integration-guide).
		/// UpdateOrderStatus {accountName}.vtexcommercestable.com.br/api/order-integration/orders/status
		/// </summary>
		/// <param name="an">Parameter should indicate the name of the VTEX account where the order is being integrated or updated, meaning the seller responsible for the order.</param>
		/// <param name="accountName">Parameter should indicate the name of the VTEX account where the order is being integrated or updated, meaning the seller responsible for the order.</param>
		/// <returns>OK</returns>
		public async Task<Approveorder> UpdateOrderStatusAsync(string an, string accountName, UpdateOrderStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+".vtexcommercestable.com.br/api/order-integration/orders/status?an=" + (an==null? "" : System.Uri.EscapeDataString(an));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Approveorder>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Place fulfillment order
		/// Creates fulfillment order, meaning that it is an order for the seller's side in a sale made through a marketplace. This order assumes the transaction itself has already happened on the marketplace's side and, therfore, cares only about the fulfillment side.
		/// 
		/// > If you plan to integrate external orders with possible [Price divergence](https://help.vtex.com/en/tutorial/price-divergence-rule--6RlFLhD1rIRRshl83KnCjW#) be mindful of the `isCreatedAsync` request body field.
		/// 
		/// For a detailed explanation of the steps required to develop a custom connector to become an external marketplace for VTEX sellers, check out our complete [External Marketplace Integration Guide](https://developers.vtex.com/vtex-rest-api/docs/external-marketplace-integration-guide).
		/// PlaceFulfillmentOrder {accountName}.{environment}.com.br/api/fulfillment/pvt/orders
		/// </summary>
		/// <param name="accountName">Name of the VTEX account. Used as part of the URL.</param>
		/// <param name="environment">Environment to be used. It is passed as part of the URL.</param>
		/// <param name="sc">Sales channel.</param>
		/// <param name="affiliateId">ID identifying the marketplace where the order originates. This ID is configured in the seller's VTEX account, and should be informed to the marketplace.</param>
		/// <returns>OK</returns>
		public async Task PlaceFulfillmentOrderAsync(string accountName, string environment, string sc, string affiliateId, PlaceFulfillmentOrderPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"."+ (environment==null? "" : System.Uri.EscapeDataString(environment))+".com.br/api/fulfillment/pvt/orders&sc=" + (sc==null? "" : System.Uri.EscapeDataString(sc))+"&affiliateId=" + (affiliateId==null? "" : System.Uri.EscapeDataString(affiliateId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Authorize dispatch for fulfillment order
		/// Creates fulfillment order, meaning that it is an order for the seller's side in a sale made through a marketplace. This order assumes the transaction itself has already happened on the marketplace's side and, therfore, cares only about the fulfillment side.
		/// 
		/// For a detailed explanation of the steps required to develop a custom connector to become an external marketplace for VTEX sellers, check out our complete [External Marketplace Integration Guide](https://developers.vtex.com/vtex-rest-api/docs/external-marketplace-integration-guide).
		/// AuthorizeDispatchForFulfillmentOrder {accountName}.{environment}.com.br/api/fulfillment/pvt/orders/{orderId}/fulfill
		/// </summary>
		/// <param name="accountName">Name of the VTEX account. Used as part of the URL.</param>
		/// <param name="environment">Environment to be used. It is passed as part of the URL.</param>
		/// <param name="orderId">ID of the order that is to be authorized. It is composed of the `afilliateId` and the `marketplaceOrderId` joined with a `-`. For instance, an order with an ID `"123"` coming from the marketplace `"MKP"` has an `orderId` of `"MKP-123"`.</param>
		/// <param name="sc">Sales channel.</param>
		/// <param name="affiliateId">ID identifying the marketplace where the order originates. This ID is configured in the seller's VTEX account, and should be informed to the marketplace.</param>
		/// <returns>OK</returns>
		public async Task AuthorizeDispatchForFulfillmentOrderAsync(string accountName, string environment, string orderId, string sc, string affiliateId, AuthorizeDispatchForFulfillmentOrderPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"."+ (environment==null? "" : System.Uri.EscapeDataString(environment))+".com.br/api/fulfillment/pvt/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/fulfill&sc=" + (sc==null? "" : System.Uri.EscapeDataString(sc))+"&affiliateId=" + (affiliateId==null? "" : System.Uri.EscapeDataString(affiliateId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fulfillment simulation - External Seller
		/// This endpoint may be called upon by VTEX for fulfillment simulation in the external seller different contexts. See examples below.
		/// 
		/// When a [price](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price) or [inventory](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory) notification request returns a response with status `200 OK`, it means that the SKU already exists in the marketplace. Whenever this happens, the marketplace will call the seller to get two updated information about the SKU: Price and Inventory.
		/// 
		/// The seller needs to have an endpoint implemented in order to receive this call and send a response containing the requested information to the marketplace. We call it the Fulfillment Simulation endpoint.
		/// 
		/// If the seller wishes to include other parameters in this call (like account name, or [sales channel](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV) ID), this should be done within their {fulfillmentEndpoint}. This path is then inserted in the marketplace's VTEX admin when [configuring a seller](https://help.vtex.com/en/tutorial/configurando-seller--tutorials_392).
		/// 
		/// The marketplace will send an object containing an array of items. The seller must use this list to get the updated information about the referred SKUs and send them back to the marketplace, following the response format explained in the API Reference.
		/// 
		/// This call is also applied in the Storefront simulation scenario, in which case the request from VTEX does not send the paramenters `country` and `postalCode`.
		/// The call's payload can be adapted into two scenarios:
		/// 
		/// - **Displaying items in the storefront**: the address information can be nulled in the request, since they are not mandatory data for this context.
		/// - **Making a shopping cart simulation during checkout**: address information must be sent, since this data is needed to calculate freight values. If the address information (including `postalCode` and `country`) is not sent through the call, VTEX interprets the stock balance as zero. Without a valid stock balance, the seller will not be shown as an option during checkout.
		/// 
		/// ## Request body example - Indexing simulation
		/// 
		/// ```
		/// {
		/// "items": [
		/// {
		/// "id": "7908010136043",
		/// "quantity": 1,
		/// "seller": "1",
		/// }
		/// ],
		/// "isCheckedIn": false,
		/// }
		/// ```
		/// ## Request body example - Checkout simulation
		/// 
		/// ```
		/// {
		/// "items": [
		/// {
		/// "id": "7908010136043",
		/// "quantity": 1,
		/// "seller": "1",
		/// }
		/// ],
		/// "postalCode": "22270-030",
		/// "country": "BRA",
		/// }
		/// ```
		/// Fulfillment_simulation {fulfillmentEndpoint}/pvt/orderForms/simulation
		/// </summary>
		/// <param name="fulfillmentEndpoint">This is the fulfillment endpoint registered for each specific external seller in the **seller management** section of VTEX's admin panel.</param>
		/// <returns>OK</returns>
		public async Task<Fulfillment_simulationReturn> Fulfillment_simulationAsync(string fulfillmentEndpoint, Fulfillment_simulationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (fulfillmentEndpoint==null? "" : System.Uri.EscapeDataString(fulfillmentEndpoint))+"/pvt/orderForms/simulation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Fulfillment_simulationReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Order placement
		/// This request is sent by VTEX to the external seller once the customer finishes their checkout, to let the seller know there is a newly placed order. It does that by calling the **Order Placement** endpoint, which needs to be implemented by the seller.
		/// 
		/// The marketplace will send information such as the items contained in the cart, the client’s profile data, the shipping data, and the payment data. With all that, the seller will be able to create the order in their own store.
		/// Order_placement {fulfillmentEndpoint}/pvt/orders
		/// </summary>
		/// <param name="fulfillmentEndpoint">This is the fulfillment endpoint registered for each specific external seller in the **seller management** section of VTEX's admin panel.</param>
		/// <returns>OK</returns>
		public async Task Order_placementAsync(string fulfillmentEndpoint, OrderPlacement requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (fulfillmentEndpoint==null? "" : System.Uri.EscapeDataString(fulfillmentEndpoint))+"/pvt/orders";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Marketplace order cancellation
		/// This request may be sent from VTEX to the external seller in case of order cancelation. For that, the seller will need to implement the Marketplace order cancellation endpoint. Whenever this request is received by the seler, the order should be canceled and the fulfillment flow should not proceed.
		/// 
		/// For the seller to:
		/// 
		/// - **Evaluate a cancellation request:** it is possible to send an empty body as a response to the cancellation request, meaning that the seller is evaluating whether to proceed with the cancellation or not.
		/// 
		/// - **Confirm the cancellation request:** it is possible to confirm the order cancellation by the marketplace by responding to the call with a body including only one information: the `marketplaceOrderId`, which identifies the order in the marketplace. The seller should use this ID to trigger the cancellation of the corresponding order. The seller should then respond with the same `marketplaceOrderId` and also with the `orderId`, which identifies the order in the seller, the date and time of the notification receipt, and a protocol code that confirms the receipt of the request (which may have the value `null`).
		/// 
		/// - **Refuse a cancellation request:** it is possible to to [send the Invoice](https://developers.vtex.com/vtex-rest-api/reference/external-seller#send-invoice), meaning that the cancellation has been denied, and the flow continues to the [Order Invoicing](https://developers.vtex.com/vtex-rest-api/docs/external-seller-integration-connector#order-invoicing) step, and the ones that follow it.
		/// 
		/// This call should be made twice: once for the *Evaluate cancellation request* scenario, and a second time to *Confirm cancellation* or *Refuse cancellation*.
		/// Mkp_order_cancellation {fulfillmentEndpoint}/pvt/orders/{orderId}/cancel
		/// </summary>
		/// <param name="fulfillmentEndpoint">This is the fulfillment endpoint registered for each specific external seller in the **seller management** section of VTEX's admin panel.</param>
		/// <param name="orderId">ID of the order being fulfilled</param>
		/// <returns>OK</returns>
		public async Task Mkp_order_cancellationAsync(string fulfillmentEndpoint, string orderId, Mkp_order_cancellationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (fulfillmentEndpoint==null? "" : System.Uri.EscapeDataString(fulfillmentEndpoint))+"/pvt/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Authorize fulfillment
		/// This request is sent from VTEX to the seller after the payment is approved, to notify them that the fulfillment process can start.
		/// Authorize_fulfillment {fulfillmentEndpoint}/pvt/orders/{sellerOrderId}/fulfill
		/// </summary>
		/// <param name="fulfillmentEndpoint">This is the fulfillment endpoint registered for each specific external seller in the **seller management** section of VTEX's admin panel.</param>
		/// <param name="sellerOrderId">Seller's order ID of the order ready for fulfillment. The seller can be a VTEX seller or an external one.</param>
		/// <returns>OK</returns>
		public async Task Authorize_fulfillmentAsync(string fulfillmentEndpoint, string sellerOrderId, Authorize_fulfillmentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (fulfillmentEndpoint==null? "" : System.Uri.EscapeDataString(fulfillmentEndpoint))+"/pvt/orders/"+ (sellerOrderId==null? "" : System.Uri.EscapeDataString(sellerOrderId))+"/fulfill";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancel order in marketplace
		/// This request is sent by the external seller to the VTEX marketplace to cancel an order.
		/// Cancel_order_in_marketplace {marketplaceServicesEndpoint}/pvt/orders/{marketplaceOrderId}/cancel
		/// </summary>
		/// <param name="marketplaceServicesEndpoint">This is an endpoint sent from VTEX to the external seller in the [Order placement request](https://developers.vtex.com/vtex-rest-api/reference/external-seller#order-placement).</param>
		/// <param name="marketplaceOrderId">Identifies the order in the marketplace.</param>
		/// <returns>OK</returns>
		public async Task Cancel_order_in_marketplaceAsync(string marketplaceServicesEndpoint, string marketplaceOrderId, Cancel_order_in_marketplacePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (marketplaceServicesEndpoint==null? "" : System.Uri.EscapeDataString(marketplaceServicesEndpoint))+"/pvt/orders/"+ (marketplaceOrderId==null? "" : System.Uri.EscapeDataString(marketplaceOrderId))+"/cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Send invoice
		/// This request is sent by the external seller to the VTEX marketplace to send invoice information.
		/// 
		/// This can be necessary in a regular order or in the case of a return. The `type` field is used to indicate which of these is the case.
		/// Send_invoice {marketplaceServicesEndpoint}/pvt/orders/{marketplaceOrderId}/invoice
		/// </summary>
		/// <param name="marketplaceServicesEndpoint">This is an endpoint sent from VTEX to the external seller in the [Order placement request](https://developers.vtex.com/vtex-rest-api/reference/external-seller#order-placement).</param>
		/// <param name="marketplaceOrderId">Identifies the order in the marketplace.</param>
		/// <returns>OK</returns>
		public async Task Send_invoiceAsync(string marketplaceServicesEndpoint, string marketplaceOrderId, Send_invoicePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (marketplaceServicesEndpoint==null? "" : System.Uri.EscapeDataString(marketplaceServicesEndpoint))+"/pvt/orders/"+ (marketplaceOrderId==null? "" : System.Uri.EscapeDataString(marketplaceOrderId))+"/invoice";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Send tracking information
		/// This request is sent by the external seller to the VTEX marketplace to add tracking information to a given order's invoice, in case it is necessary to do so after the invoice has been sent.
		/// Send_tracking_information {marketplaceServicesEndpoint}/pvt/orders/{marketplaceOrderId}/invoice/{invoiceNumber}
		/// </summary>
		/// <param name="marketplaceServicesEndpoint">This is an endpoint sent from VTEX to the external seller in the [Order placement request](https://developers.vtex.com/vtex-rest-api/reference/external-seller#order-placement).</param>
		/// <param name="marketplaceOrderId">Identifies the order in the marketplace.</param>
		/// <param name="invoiceNumber">Invoice number.</param>
		/// <returns>OK</returns>
		public async Task Send_tracking_informationAsync(string marketplaceServicesEndpoint, string marketplaceOrderId, string invoiceNumber, Send_tracking_informationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (marketplaceServicesEndpoint==null? "" : System.Uri.EscapeDataString(marketplaceServicesEndpoint))+"/pvt/orders/"+ (marketplaceOrderId==null? "" : System.Uri.EscapeDataString(marketplaceOrderId))+"/invoice/"+ (invoiceNumber==null? "" : System.Uri.EscapeDataString(invoiceNumber));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update tracking status
		/// This request is sent by the external seller to the VTEX marketplace to update a given order's tracking status.
		/// Update_tracking_status {marketplaceServicesEndpoint}/pvt/orders/{marketplaceOrderId}/invoice/{invoiceNumber}/tracking
		/// </summary>
		/// <param name="marketplaceServicesEndpoint">This is an endpoint sent from VTEX to the external seller in the [Order placement request](https://developers.vtex.com/vtex-rest-api/reference/external-seller#order-placement).</param>
		/// <param name="marketplaceOrderId">Identifies the order in the marketplace.</param>
		/// <param name="invoiceNumber">Invoice number.</param>
		/// <returns>OK</returns>
		public async Task Update_tracking_statusAsync(string marketplaceServicesEndpoint, string marketplaceOrderId, string invoiceNumber, Update_tracking_statusPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (marketplaceServicesEndpoint==null? "" : System.Uri.EscapeDataString(marketplaceServicesEndpoint))+"/pvt/orders/"+ (marketplaceOrderId==null? "" : System.Uri.EscapeDataString(marketplaceOrderId))+"/invoice/"+ (invoiceNumber==null? "" : System.Uri.EscapeDataString(invoiceNumber))+"/tracking";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class Fulfillment_simulation_external_marketplacePostBody
	{
		
		/// <summary>
		/// Customer's profile information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientProfileData")]
		public Fulfillment_simulation_external_marketplacePostBodyClientProfileData ClientProfileData { get; set; }
		
		/// <summary>
		/// Three letter ISO code of the country of the shipping address. This value must be sent along with the `postalCode` or `geoCoordinates` values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Array containing two floats with geocoordinates, first longitude, then latitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public double[] GeoCoordinates { get; set; }
		
		/// <summary>
		/// Indicates whether order is checked in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCheckedIn")]
		public System.Nullable<System.Boolean> IsCheckedIn { get; set; }
		
		/// <summary>
		/// Array containing information about the SKUs inside the cart to be simulated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Fulfillment_simulation_external_marketplacePostBodyItems[] Fulfillment_simulation_external_marketplacePostBodyItems { get; set; }
		
		/// <summary>
		/// Object containing promotion data such as coupon tracking information and internal or external UTMs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketingData")]
		public Fulfillment_simulation_external_marketplacePostBodyMarketingData MarketingData { get; set; }
		
		/// <summary>
		/// Postal code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// SLA selected by the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectedSla")]
		public string SelectedSla { get; set; }
		
		/// <summary>
		/// ID of the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeId")]
		public string StoreId { get; set; }
	}
	
	public class Fulfillment_simulation_external_marketplacePostBodyClientProfileData
	{
		
		/// <summary>
		/// Corporate document, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporateDocument")]
		public string CorporateDocument { get; set; }
		
		/// <summary>
		/// Company name, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporateName")]
		public string CorporateName { get; set; }
		
		/// <summary>
		/// Corporate phone number, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporatePhone")]
		public string CorporatePhone { get; set; }
		
		/// <summary>
		/// Customer class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerClass")]
		public string CustomerClass { get; set; }
		
		/// <summary>
		/// Document informed by the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document")]
		public string Document { get; set; }
		
		/// <summary>
		/// Type of the document informed by the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentType")]
		public string DocumentType { get; set; }
		
		/// <summary>
		/// Email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// First name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Indicates whether the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCorporate")]
		public System.Nullable<System.Boolean> IsCorporate { get; set; }
		
		/// <summary>
		/// Last name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// Phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// Indicates whether profile is complete on loading.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileCompleteOnLoading")]
		public System.Nullable<System.Boolean> ProfileCompleteOnLoading { get; set; }
		
		/// <summary>
		/// Indicates whether profile presents error on loading.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileErrorOnLoading")]
		public System.Nullable<System.Boolean> ProfileErrorOnLoading { get; set; }
		
		/// <summary>
		/// State inscription, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateInscription")]
		public string StateInscription { get; set; }
		
		/// <summary>
		/// Trade name, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tradeName")]
		public string TradeName { get; set; }
	}
	
	public class Fulfillment_simulation_external_marketplacePostBodyItems
	{
		
		/// <summary>
		/// The SKU ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The quantity of items of this specific SKU in the cart to be simulated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// The ID of the seller responsible for this SKU. This ID can be found in your VTEX Admin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seller")]
		public string Seller { get; set; }
	}
	
	public class Fulfillment_simulation_external_marketplacePostBodyMarketingData
	{
		
		/// <summary>
		/// Sending an existing coupon code in this field will return the corresponding discount in the purchase. Use the [cart simulation](https://developers.vtex.com/vtex-rest-api/reference/orderform#orderformsimulation) request to check which coupons might apply before placing the order.
		/// </summary>
		[System.ComponentModel.DefaultValue("free-shipping")]
		[System.Runtime.Serialization.DataMember(Name="coupon")]
		public string Coupon { get; set; } = "free-shipping";
		
		/// <summary>
		/// UTM campaign
		/// </summary>
		[System.ComponentModel.DefaultValue("Black friday")]
		[System.Runtime.Serialization.DataMember(Name="utmCampaign")]
		public string UtmCampaign { get; set; } = "Black friday";
		
		/// <summary>
		/// UTM medium.
		/// </summary>
		[System.ComponentModel.DefaultValue("CPC")]
		[System.Runtime.Serialization.DataMember(Name="utmMedium")]
		public string UtmMedium { get; set; } = "CPC";
		
		/// <summary>
		/// UTM source.
		/// </summary>
		[System.ComponentModel.DefaultValue("Facebook")]
		[System.Runtime.Serialization.DataMember(Name="utmSource")]
		public string UtmSource { get; set; } = "Facebook";
		
		/// <summary>
		/// utmi_campaign (internal utm).
		/// </summary>
		[System.ComponentModel.DefaultValue("utmi_campaign-example")]
		[System.Runtime.Serialization.DataMember(Name="utmiCampaign")]
		public string UtmiCampaign { get; set; } = "utmi_campaign-example";
		
		/// <summary>
		/// utmi_page (internal utm).
		/// </summary>
		[System.ComponentModel.DefaultValue("utmi_page-example")]
		[System.Runtime.Serialization.DataMember(Name="utmiPage")]
		public string UtmiPage { get; set; } = "utmi_page-example";
		
		/// <summary>
		/// utmi_part (internal utm).
		/// </summary>
		[System.ComponentModel.DefaultValue("utmi_part-example")]
		[System.Runtime.Serialization.DataMember(Name="utmiPart")]
		public string UtmiPart { get; set; } = "utmi_part-example";
	}
	
	public class Fulfillment_simulation_external_marketplaceReturn
	{
		
		/// <summary>
		/// Three letter ISO code of the country of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Information on each item in the cart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Fulfillment_simulation_external_marketplaceReturnItems[] Fulfillment_simulation_external_marketplaceReturnItems { get; set; }
		
		/// <summary>
		/// Array with logistics information on each item of the `items` array in the `orderForm`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logisticsInfo")]
		public Fulfillment_simulation_external_marketplaceReturnLogisticsInfo[] Fulfillment_simulation_external_marketplaceReturnLogisticsInfo { get; set; }
		
		/// <summary>
		/// Object containing promotion data such as coupon tracking information and internal or external UTMs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketingData")]
		public string MarketingData { get; set; }
		
		/// <summary>
		/// Payment data information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentData")]
		public Fulfillment_simulation_external_marketplaceReturnPaymentData PaymentData { get; set; }
		
		/// <summary>
		/// Postal Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Information on rates and benefits that apply to the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ratesAndBenefitsData")]
		public Fulfillment_simulation_external_marketplaceReturnRatesAndBenefitsData RatesAndBenefitsData { get; set; }
		
		/// <summary>
		/// Array containing the data of the item selected as a gift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectableGifts")]
		public string[] SelectableGifts { get; set; }
	}
	
	public class Fulfillment_simulation_external_marketplaceReturnItems
	{
		
		/// <summary>
		/// Availability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public string Availability { get; set; }
		
		/// <summary>
		/// ID of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// List price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listPrice")]
		public System.Nullable<System.Int32> ListPrice { get; set; }
		
		/// <summary>
		/// Measurement unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="measurementUnit")]
		public string MeasurementUnit { get; set; }
		
		/// <summary>
		/// Array containing offering information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerings")]
		public string[] Offerings { get; set; }
		
		/// <summary>
		/// Parent assembly binding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentAssemblyBinding")]
		public string ParentAssemblyBinding { get; set; }
		
		/// <summary>
		/// Parent item index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentItemIndex")]
		public System.Nullable<System.Int32> ParentItemIndex { get; set; }
		
		/// <summary>
		/// Price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Price information for all units of a specific item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceDefinition")]
		public Fulfillment_simulation_external_marketplaceReturnItemsPriceDefinition PriceDefinition { get; set; }
		
		/// <summary>
		/// Array of price tags, each of which, modifies the price in some way, like discounts or rates that apply to the item in the context of the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceTags")]
		public Fulfillment_simulation_external_marketplaceReturnItemsPriceTags[] Fulfillment_simulation_external_marketplaceReturnItemsPriceTags { get; set; }
		
		/// <summary>
		/// Price expiration date and time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceValidUntil")]
		public string PriceValidUntil { get; set; }
		
		/// <summary>
		/// The quantity of the item the cart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// Request index information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestIndex")]
		public System.Nullable<System.Int32> RequestIndex { get; set; }
		
		/// <summary>
		/// Reward value in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewardValue")]
		public System.Nullable<System.Int32> RewardValue { get; set; }
		
		/// <summary>
		/// The seller responsible for the SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seller")]
		public string Seller { get; set; }
		
		/// <summary>
		/// Sellers involved in the chain. The list should contain only one seller, unless it is a [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellerChain")]
		public string[] SellerChain { get; set; }
		
		/// <summary>
		/// Selling price in cents. Note that this field may be subject to rounding discrepancies. We recommend retrieving data from the `priceDefinition` data structure instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellingPrice")]
		public System.Nullable<System.Int32> SellingPrice { get; set; }
		
		/// <summary>
		/// Tax value in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public System.Nullable<System.Int32> Tax { get; set; }
		
		/// <summary>
		/// Unit multiplier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitMultiplier")]
		public System.Nullable<System.Int32> UnitMultiplier { get; set; }
	}
	
	public class Fulfillment_simulation_external_marketplaceReturnItemsPriceDefinition
	{
		
		/// <summary>
		/// Item's calculated unitary selling price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calculatedSellingPrice")]
		public System.Nullable<System.Int32> CalculatedSellingPrice { get; set; }
		
		/// <summary>
		/// Array of objects, each containing value (in cents) and quantity for the different rounding instances that can be combined to form the correctly rounded total.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellingPrices")]
		public Fulfillment_simulation_external_marketplaceReturnItemsPriceDefinitionSellingPrices[] Fulfillment_simulation_external_marketplaceReturnItemsPriceDefinitionSellingPrices { get; set; }
		
		/// <summary>
		/// Total value for all units of the item in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	public class Fulfillment_simulation_external_marketplaceReturnItemsPriceDefinitionSellingPrices
	{
		
		/// <summary>
		/// Rounding quantity, meaning how many items are rounded to this value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// Value in cents for that specific rounding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class Fulfillment_simulation_external_marketplaceReturnItemsPriceTags
	{
		
		/// <summary>
		/// Price tag identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		/// <summary>
		/// Indicates whether price tag value is applied through a percentage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPercentual")]
		public System.Nullable<System.Boolean> IsPercentual { get; set; }
		
		/// <summary>
		/// Price tag name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Identification of the responsible for the price tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		/// <summary>
		/// Price tag raw value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rawValue")]
		public System.Nullable<System.Int32> RawValue { get; set; }
		
		/// <summary>
		/// Price tag value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class Fulfillment_simulation_external_marketplaceReturnLogisticsInfo
	{
		
		/// <summary>
		/// Address ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressId")]
		public string AddressId { get; set; }
		
		/// <summary>
		/// List of available delivery channels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryChannels")]
		public Fulfillment_simulation_external_marketplaceReturnLogisticsInfoDeliveryChannels[] Fulfillment_simulation_external_marketplaceReturnLogisticsInfoDeliveryChannels { get; set; }
		
		/// <summary>
		/// Index of item in items array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemIndex")]
		public System.Nullable<System.Int32> ItemIndex { get; set; }
		
		/// <summary>
		/// Item metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemMetadata")]
		public Fulfillment_simulation_external_marketplaceReturnLogisticsInfoItemMetadata ItemMetadata { get; set; }
		
		/// <summary>
		/// Array containing an object for each message generated by our servers while processing the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public string[] Messages { get; set; }
		
		/// <summary>
		/// Array containing pickup points information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupPoints")]
		public string[] PickupPoints { get; set; }
		
		/// <summary>
		/// Purchase conditions information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchaseConditions")]
		public Fulfillment_simulation_external_marketplaceReturnLogisticsInfoPurchaseConditions PurchaseConditions { get; set; }
		
		/// <summary>
		/// Quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// Delivery channel selected by the customer. For example, `"delivery"` or `"pickup-in-point"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectedDeliveryChannel")]
		public string SelectedDeliveryChannel { get; set; }
		
		/// <summary>
		/// Selected SLA. For example, `"normal"` or `"express"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectedSla")]
		public string SelectedSla { get; set; }
		
		/// <summary>
		/// List of countries that the item may be shipped to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipsTo")]
		public string[] ShipsTo { get; set; }
		
		/// <summary>
		/// Information on available SLAs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slas")]
		public Fulfillment_simulation_external_marketplaceReturnLogisticsInfoSlas[] Fulfillment_simulation_external_marketplaceReturnLogisticsInfoSlas { get; set; }
		
		/// <summary>
		/// Subscription information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionData")]
		public string SubscriptionData { get; set; }
		
		/// <summary>
		/// Information on order totals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totals")]
		public Fulfillment_simulation_external_marketplaceReturnLogisticsInfoTotals[] Fulfillment_simulation_external_marketplaceReturnLogisticsInfoTotals { get; set; }
	}
	
	public class Fulfillment_simulation_external_marketplaceReturnLogisticsInfoDeliveryChannels
	{
		
		/// <summary>
		/// Delivery channel ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class Fulfillment_simulation_external_marketplaceReturnLogisticsInfoItemMetadata
	{
		
		/// <summary>
		/// List of objects containing metadata on each item in the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Fulfillment_simulation_external_marketplaceReturnLogisticsInfoItemMetadataItems[] Fulfillment_simulation_external_marketplaceReturnLogisticsInfoItemMetadataItems { get; set; }
	}
	
	public class Fulfillment_simulation_external_marketplaceReturnLogisticsInfoItemMetadataItems
	{
		
		/// <summary>
		/// Assembly options information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assemblyOptions")]
		public string[] AssemblyOptions { get; set; }
		
		/// <summary>
		/// Item ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seller")]
		public string Seller { get; set; }
	}
	
	public class Fulfillment_simulation_external_marketplaceReturnLogisticsInfoPurchaseConditions
	{
		
		/// <summary>
		/// List of objects containing purchase condition information on each item in the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemPurchaseConditions")]
		public Fulfillment_simulation_external_marketplaceReturnLogisticsInfoPurchaseConditionsItemPurchaseConditions[] Fulfillment_simulation_external_marketplaceReturnLogisticsInfoPurchaseConditionsItemPurchaseConditions { get; set; }
	}
	
	public class Fulfillment_simulation_external_marketplaceReturnLogisticsInfoPurchaseConditionsItemPurchaseConditions
	{
		
		/// <summary>
		/// Item ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// List price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listPrice")]
		public System.Nullable<System.Int32> ListPrice { get; set; }
		
		/// <summary>
		/// Price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seller")]
		public string Seller { get; set; }
		
		/// <summary>
		/// Sellers involved in the chain. The list should contain only one seller, unless it is a [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellerChain")]
		public string[] SellerChain { get; set; }
		
		/// <summary>
		/// Information on available SLAs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slas")]
		public Fulfillment_simulation_external_marketplaceReturnLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlas[] Fulfillment_simulation_external_marketplaceReturnLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlas { get; set; }
	}
	
	public class Fulfillment_simulation_external_marketplaceReturnLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlas
	{
		
		/// <summary>
		/// This object contains information about the delivery window available to the shopper.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableDeliveryWindows")]
		public Fulfillment_simulation_external_marketplaceReturnLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasAvailableDeliveryWindows AvailableDeliveryWindows { get; set; }
		
		/// <summary>
		/// Delivery channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryChannel")]
		public string DeliveryChannel { get; set; }
		
		/// <summary>
		/// Information on each delivery ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryIds")]
		public Fulfillment_simulation_external_marketplaceReturnLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasDeliveryIds[] Fulfillment_simulation_external_marketplaceReturnLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasDeliveryIds { get; set; }
		
		/// <summary>
		/// In case of scheduled delivery, this object will contain information on the delivery window selected by the shopper.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryWindow")]
		public Fulfillment_simulation_external_marketplaceReturnLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasDeliveryWindow DeliveryWindow { get; set; }
		
		/// <summary>
		/// SLA ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// List price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listPrice")]
		public System.Nullable<System.Int32> ListPrice { get; set; }
		
		/// <summary>
		/// Estimate date of delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lockTTL")]
		public string LockTTL { get; set; }
		
		/// <summary>
		/// SLA name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Pickup point distance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupDistance")]
		public System.Nullable<System.Int32> PickupDistance { get; set; }
		
		/// <summary>
		/// Pickup point ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupPointId")]
		public string PickupPointId { get; set; }
		
		/// <summary>
		/// Information on the pickup store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupStoreInfo")]
		public Fulfillment_simulation_external_marketplaceReturnLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasPickupStoreInfo PickupStoreInfo { get; set; }
		
		/// <summary>
		/// Polygon name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="polygonName")]
		public string PolygonName { get; set; }
		
		/// <summary>
		/// Price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Shipping estimate. For instance, "three business days" will be represented as `3bd`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingEstimate")]
		public string ShippingEstimate { get; set; }
		
		/// <summary>
		/// Shipping estimate date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingEstimateDate")]
		public string ShippingEstimateDate { get; set; }
		
		/// <summary>
		/// Tax in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public System.Nullable<System.Int32> Tax { get; set; }
		
		/// <summary>
		/// Transit time. For instance, "three business days" is represented as `3bd`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transitTime")]
		public string TransitTime { get; set; }
	}
	
	public class Fulfillment_simulation_external_marketplaceReturnLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasAvailableDeliveryWindows
	{
		
		/// <summary>
		/// Delivery window ending day and time in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDateUtc")]
		public string EndDateUtc { get; set; }
		
		/// <summary>
		/// Delivery window list price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lisPrice")]
		public System.Nullable<System.Int32> LisPrice { get; set; }
		
		/// <summary>
		/// Delivery window price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Delivery window starting day and time in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDateUtc")]
		public string StartDateUtc { get; set; }
		
		/// <summary>
		/// Delivery window tax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public System.Nullable<System.Int32> Tax { get; set; }
	}
	
	public class Fulfillment_simulation_external_marketplaceReturnLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasDeliveryIds
	{
		
		/// <summary>
		/// Courier ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courierId")]
		public string CourierId { get; set; }
		
		/// <summary>
		/// Courier name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courierName")]
		public string CourierName { get; set; }
		
		/// <summary>
		/// Warehouse ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dockId")]
		public string DockId { get; set; }
		
		/// <summary>
		/// Quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// Warehouse ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warehouseId")]
		public string WarehouseId { get; set; }
	}
	
	public class Fulfillment_simulation_external_marketplaceReturnLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasDeliveryWindow
	{
		
		/// <summary>
		/// Delivery window ending day and time in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDateUtc")]
		public string EndDateUtc { get; set; }
		
		/// <summary>
		/// Delivery window list price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lisPrice")]
		public System.Nullable<System.Int32> LisPrice { get; set; }
		
		/// <summary>
		/// Delivery window price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Delivery window starting day and time in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDateUtc")]
		public string StartDateUtc { get; set; }
		
		/// <summary>
		/// Delivery window tax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public System.Nullable<System.Int32> Tax { get; set; }
	}
	
	public class Fulfillment_simulation_external_marketplaceReturnLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasPickupStoreInfo
	{
		
		/// <summary>
		/// Additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalInfo")]
		public string AdditionalInfo { get; set; }
		
		/// <summary>
		/// Address information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Corresponding dock ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dockId")]
		public string DockId { get; set; }
		
		/// <summary>
		/// Friendly name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		/// <summary>
		/// Indicates whether it is the pickup store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPickupStore")]
		public System.Nullable<System.Boolean> IsPickupStore { get; set; }
	}
	
	public class Fulfillment_simulation_external_marketplaceReturnLogisticsInfoSlas
	{
		
		/// <summary>
		/// This object contains information about the delivery window available to the shopper.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableDeliveryWindows")]
		public Fulfillment_simulation_external_marketplaceReturnLogisticsInfoSlasAvailableDeliveryWindows AvailableDeliveryWindows { get; set; }
		
		/// <summary>
		/// Delivery channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryChannel")]
		public string DeliveryChannel { get; set; }
		
		/// <summary>
		/// Information on each delivery ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryIds")]
		public Fulfillment_simulation_external_marketplaceReturnLogisticsInfoSlasDeliveryIds[] Fulfillment_simulation_external_marketplaceReturnLogisticsInfoSlasDeliveryIds { get; set; }
		
		/// <summary>
		/// In case of scheduled delivery, this object will contain information on the delivery window selected by the shopper.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryWindow")]
		public Fulfillment_simulation_external_marketplaceReturnLogisticsInfoSlasDeliveryWindow DeliveryWindow { get; set; }
		
		/// <summary>
		/// SLA ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// List price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listPrice")]
		public System.Nullable<System.Int32> ListPrice { get; set; }
		
		/// <summary>
		/// Estimate date of delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lockTTL")]
		public string LockTTL { get; set; }
		
		/// <summary>
		/// SLA name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Pickup point distance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupDistance")]
		public System.Nullable<System.Int32> PickupDistance { get; set; }
		
		/// <summary>
		/// Pickup point ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupPointId")]
		public string PickupPointId { get; set; }
		
		/// <summary>
		/// Information on the pickup store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupStoreInfo")]
		public Fulfillment_simulation_external_marketplaceReturnLogisticsInfoSlasPickupStoreInfo PickupStoreInfo { get; set; }
		
		/// <summary>
		/// Polygon name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="polygonName")]
		public string PolygonName { get; set; }
		
		/// <summary>
		/// Price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Shipping estimate. For instance, "three business days" will be represented as `3bd`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingEstimate")]
		public string ShippingEstimate { get; set; }
		
		/// <summary>
		/// Shipping estimate date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingEstimateDate")]
		public string ShippingEstimateDate { get; set; }
		
		/// <summary>
		/// Tax in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public System.Nullable<System.Int32> Tax { get; set; }
		
		/// <summary>
		/// Transit time. For instance, "three business days" is represented as `3bd`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transitTime")]
		public string TransitTime { get; set; }
	}
	
	public class Fulfillment_simulation_external_marketplaceReturnLogisticsInfoSlasAvailableDeliveryWindows
	{
		
		/// <summary>
		/// Delivery window ending day and time in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDateUtc")]
		public string EndDateUtc { get; set; }
		
		/// <summary>
		/// Delivery window list price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lisPrice")]
		public System.Nullable<System.Int32> LisPrice { get; set; }
		
		/// <summary>
		/// Delivery window price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Delivery window starting day and time in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDateUtc")]
		public string StartDateUtc { get; set; }
		
		/// <summary>
		/// Delivery window tax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public System.Nullable<System.Int32> Tax { get; set; }
	}
	
	public class Fulfillment_simulation_external_marketplaceReturnLogisticsInfoSlasDeliveryIds
	{
		
		/// <summary>
		/// Courier ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courierId")]
		public string CourierId { get; set; }
		
		/// <summary>
		/// Courier name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courierName")]
		public string CourierName { get; set; }
		
		/// <summary>
		/// Warehouse ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dockId")]
		public string DockId { get; set; }
		
		/// <summary>
		/// Quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// Warehouse ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warehouseId")]
		public string WarehouseId { get; set; }
	}
	
	public class Fulfillment_simulation_external_marketplaceReturnLogisticsInfoSlasDeliveryWindow
	{
		
		/// <summary>
		/// Delivery window ending day and time in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDateUtc")]
		public string EndDateUtc { get; set; }
		
		/// <summary>
		/// Delivery window list price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lisPrice")]
		public System.Nullable<System.Int32> LisPrice { get; set; }
		
		/// <summary>
		/// Delivery window price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Delivery window starting day and time in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDateUtc")]
		public string StartDateUtc { get; set; }
		
		/// <summary>
		/// Delivery window tax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public System.Nullable<System.Int32> Tax { get; set; }
	}
	
	public class Fulfillment_simulation_external_marketplaceReturnLogisticsInfoSlasPickupStoreInfo
	{
		
		/// <summary>
		/// Additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalInfo")]
		public string AdditionalInfo { get; set; }
		
		/// <summary>
		/// Address information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Corresponding dock ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dockId")]
		public string DockId { get; set; }
		
		/// <summary>
		/// Friendly name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		/// <summary>
		/// Indicates whether it is the pickup store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPickupStore")]
		public System.Nullable<System.Boolean> IsPickupStore { get; set; }
	}
	
	public class Fulfillment_simulation_external_marketplaceReturnLogisticsInfoTotals
	{
		
		/// <summary>
		/// Total ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Total name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Total value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class Fulfillment_simulation_external_marketplaceReturnPaymentData
	{
		
		/// <summary>
		/// Available accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableAccounts")]
		public string[] AvailableAccounts { get; set; }
		
		/// <summary>
		/// Available associations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableAssociations")]
		public string AvailableAssociations { get; set; }
		
		/// <summary>
		/// Available tokens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableTokens")]
		public string[] AvailableTokens { get; set; }
		
		/// <summary>
		/// Array of gift card messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="giftCardMessages")]
		public string[] GiftCardMessages { get; set; }
		
		/// <summary>
		/// Gift card information, if it applies to the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="giftCards")]
		public string[] GiftCards { get; set; }
		
		/// <summary>
		/// Installment options information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installmentOptions")]
		public string[] InstallmentOptions { get; set; }
		
		/// <summary>
		/// Information on payment systems.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentSystems")]
		public Fulfillment_simulation_external_marketplaceReturnPaymentDataPaymentSystems[] Fulfillment_simulation_external_marketplaceReturnPaymentDataPaymentSystems { get; set; }
		
		/// <summary>
		/// Information on each payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payments")]
		public string[] Payments { get; set; }
	}
	
	public class Fulfillment_simulation_external_marketplaceReturnPaymentDataPaymentSystems
	{
		
		/// <summary>
		/// Availability of payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availablePayments")]
		public string AvailablePayments { get; set; }
		
		/// <summary>
		/// Description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Indicates whether a document is shown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayDocument")]
		public System.Nullable<System.Boolean> DisplayDocument { get; set; }
		
		/// <summary>
		/// Payment due date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dueDate")]
		public string DueDate { get; set; }
		
		/// <summary>
		/// Payment group name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupName")]
		public string GroupName { get; set; }
		
		/// <summary>
		/// Payment system ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Indicates whether it is custom.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCustom")]
		public System.Nullable<System.Boolean> IsCustom { get; set; }
		
		/// <summary>
		/// Payment system name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Indicates whether a authentication is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiresAuthentication")]
		public System.Nullable<System.Boolean> RequiresAuthentication { get; set; }
		
		/// <summary>
		/// Indicates whether a document is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiresDocument")]
		public System.Nullable<System.Boolean> RequiresDocument { get; set; }
		
		/// <summary>
		/// String ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stringId")]
		public string StringId { get; set; }
		
		/// <summary>
		/// Template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="template")]
		public string Template { get; set; }
		
		/// <summary>
		/// Payment system validator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validator")]
		public string Validator { get; set; }
	}
	
	public class Fulfillment_simulation_external_marketplaceReturnRatesAndBenefitsData
	{
		
		/// <summary>
		/// List with rates and benefits identifiers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rateAndBenefitsIdentifiers")]
		public string[] RateAndBenefitsIdentifiers { get; set; }
		
		/// <summary>
		/// List with rates and benefits teasers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teaser")]
		public string[] Teaser { get; set; }
	}
	
	public class PlaceFulfillmentOrderPostBody
	{
		
		/// <summary>
		/// Customer's profile information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientProfileData")]
		public PlaceFulfillmentOrderPostBodyClientProfileData ClientProfileData { get; set; }
		
		/// <summary>
		/// Indicates whether an order is created. It must be `true` if an order is being placed with [Price divergence](https://help.vtex.com/en/tutorial/price-divergence-rule--6RlFLhD1rIRRshl83KnCjW#), otherwise the request will not work.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCreatedAsync")]
		public System.Nullable<System.Boolean> IsCreatedAsync { get; set; }
		
		/// <summary>
		/// Array of objects containing information on each of the order's items.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public PlaceFulfillmentOrderPostBodyItems[] PlaceFulfillmentOrderPostBodyItems { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marketingData")]
		public PlaceFulfillmentOrderPostBodyMarketingData MarketingData { get; set; }
		
		/// <summary>
		/// ID of the order in the marketplace.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplaceOrderId")]
		public string MarketplaceOrderId { get; set; }
		
		/// <summary>
		/// Value of the payment made to the marketplace.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplacePaymentValue")]
		public int MarketplacePaymentValue { get; set; }
		
		/// <summary>
		/// Endpoint provided by the marketplace for post purchase communication. Should be an URL, containing protocol, host, path and query string (in case it applies).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplaceServicesEndpoint")]
		public string MarketplaceServicesEndpoint { get; set; }
		
		/// <summary>
		/// Optional field meant to hold additional information about the order. We recommend using this field for text, not data formats such as `JSON` even if escaped. For that purpose, see [Creating customizable fields](https://developers.vtex.com/vtex-rest-api/docs/creating-customizable-fields-in-the-cart-with-checkout-api-1)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openTextField")]
		public string OpenTextField { get; set; }
		
		/// <summary>
		/// In other contexts, this field tipically holds an object with payment information. However, since the payment is processed by the marketplace, it will be sent to the seller as `null` in this context.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentData")]
		public string PaymentData { get; set; }
		
		/// <summary>
		/// Shipping information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shippingData")]
		public PlaceFulfillmentOrderPostBodyShippingData ShippingData { get; set; }
	}
	
	public class PlaceFulfillmentOrderPostBodyClientProfileData
	{
		
		/// <summary>
		/// Corporate document, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporateDocument")]
		public string CorporateDocument { get; set; }
		
		/// <summary>
		/// Company name, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporateName")]
		public string CorporateName { get; set; }
		
		/// <summary>
		/// Corporate phone number, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporatePhone")]
		public string CorporatePhone { get; set; }
		
		/// <summary>
		/// Document informed by the customer. Validation depends on the country.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="document")]
		public string Document { get; set; }
		
		/// <summary>
		/// Type of the document informed by the customer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="documentType")]
		public string DocumentType { get; set; }
		
		/// <summary>
		/// Customer's email address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Customer's first name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// `true` if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCorporate")]
		public System.Nullable<System.Boolean> IsCorporate { get; set; }
		
		/// <summary>
		/// Customer's last name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// Customer's phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// State inscription, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateInscription")]
		public string StateInscription { get; set; }
		
		/// <summary>
		/// Trade name, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tradeName")]
		public string TradeName { get; set; }
	}
	
	public class PlaceFulfillmentOrderPostBodyItems
	{
		
		/// <summary>
		/// Array containing information on attachments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public string[] Attachments { get; set; }
		
		/// <summary>
		/// Information on services sold along with the SKU. Example: a gift package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bundleItems")]
		public PlaceFulfillmentOrderPostBodyItemsBundleItems[] PlaceFulfillmentOrderPostBodyItemsBundleItems { get; set; }
		
		/// <summary>
		/// Comission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commission")]
		public System.Nullable<System.Int32> Commission { get; set; }
		
		/// <summary>
		/// Freight comission
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freightCommission")]
		public System.Nullable<System.Int32> FreightCommission { get; set; }
		
		/// <summary>
		/// The SKU ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Indicates whether the order is a gift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isGift")]
		public System.Nullable<System.Boolean> IsGift { get; set; }
		
		/// <summary>
		/// Item attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemAttachment")]
		public PlaceFulfillmentOrderPostBodyItemsItemAttachment ItemAttachment { get; set; }
		
		/// <summary>
		/// SKU measurement unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="measurementUnit")]
		public string MeasurementUnit { get; set; }
		
		/// <summary>
		/// Item price within the context of the order without separating cents. For example, $24.99 is represented `2499`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Array of price tags, each of which, modifies the price in some way, like discounts or rates that apply to the item in the context of the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceTags")]
		public PlaceFulfillmentOrderPostBodyItemsPriceTags[] PlaceFulfillmentOrderPostBodyItemsPriceTags { get; set; }
		
		/// <summary>
		/// The quantity of items of this specific SKU in the cart to be simulated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public int Quantity { get; set; }
		
		/// <summary>
		/// The ID of the seller responsible for this SKU. This ID can be found in your VTEX Admin.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="seller")]
		public string Seller { get; set; }
		
		/// <summary>
		/// SKU unit multiplier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitMultiplier")]
		public System.Nullable<System.Int32> UnitMultiplier { get; set; }
	}
	
	public class PlaceFulfillmentOrderPostBodyItemsBundleItems
	{
		
		/// <summary>
		/// Service identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Service name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Service price. The last two digits are the cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Service type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class PlaceFulfillmentOrderPostBodyItemsItemAttachment
	{
		
		/// <summary>
		/// Content referring to the customization requested by the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// Attachment name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class PlaceFulfillmentOrderPostBodyItemsPriceTags
	{
		
		/// <summary>
		/// Price tag identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		/// <summary>
		/// `true` if price tag value is applied through a percentage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPercentual")]
		public System.Nullable<System.Boolean> IsPercentual { get; set; }
		
		/// <summary>
		/// Price tag name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Price tag value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rawValue")]
		public System.Nullable<System.Int32> RawValue { get; set; }
		
		/// <summary>
		/// Price tag raw value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class PlaceFulfillmentOrderPostBodyMarketingData
	{
		
		/// <summary>
		/// UTM campaign
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utmCampaign")]
		public string UtmCampaign { get; set; }
		
		/// <summary>
		/// UTM medium.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utmMedium")]
		public string UtmMedium { get; set; }
		
		/// <summary>
		/// UTM source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utmSource")]
		public string UtmSource { get; set; }
		
		/// <summary>
		/// utmi_campaign (internal utm)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utmiCampaign")]
		public string UtmiCampaign { get; set; }
		
		/// <summary>
		/// utmi_page (internal utm)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utmiPage")]
		public string UtmiPage { get; set; }
		
		/// <summary>
		/// utmi_part (internal utm)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utmiPart")]
		public string UtmiPart { get; set; }
	}
	
	public class PlaceFulfillmentOrderPostBodyShippingData
	{
		
		/// <summary>
		/// Shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public PlaceFulfillmentOrderPostBodyShippingDataAddress Address { get; set; }
		
		/// <summary>
		/// Array of objects containing logistics information of each item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logisticsInfo")]
		public PlaceFulfillmentOrderPostBodyShippingDataLogisticsInfo[] PlaceFulfillmentOrderPostBodyShippingDataLogisticsInfo { get; set; }
		
		/// <summary>
		/// Indicate whether this object's information is up to date according to the order's items. An order can not be placed if `"outdated"`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateStatus")]
		public string UpdateStatus { get; set; }
	}
	
	public class PlaceFulfillmentOrderPostBodyShippingDataAddress
	{
		
		/// <summary>
		/// Address ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressId")]
		public string AddressId { get; set; }
		
		/// <summary>
		/// Type of address. For example, `Residential` or `Pickup`, among others.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="addressType")]
		public string AddressType { get; set; }
		
		/// <summary>
		/// City of the shipping address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Complement to the shipping address in case it applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; }
		
		/// <summary>
		/// Three letter ISO code of the country of the shipping address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Array with two strings with geocoordinates, first latitude, then longitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public string[] GeoCoordinates { get; set; }
		
		/// <summary>
		/// Neighborhood of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="neighborhood")]
		public string Neighborhood { get; set; }
		
		/// <summary>
		/// Number of the building, house or apartment in the shipping address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Postal Code. Validation depends on the country.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Name of the person who is going to receive the order.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiverName")]
		public string ReceiverName { get; set; }
		
		/// <summary>
		/// Complement that might help locate the shipping address more precisely in case of delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		/// <summary>
		/// State of the shipping address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Street of the shipping address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
	}
	
	public class PlaceFulfillmentOrderPostBodyShippingDataLogisticsInfo
	{
		
		/// <summary>
		/// In case of scheduled delivery, this object will contain information on the delivery window selected by the shopper.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryWindow")]
		public PlaceFulfillmentOrderPostBodyShippingDataLogisticsInfoDeliveryWindow DeliveryWindow { get; set; }
		
		/// <summary>
		/// Index of the item in the `items` array, starting from 0.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="itemIndex")]
		public int ItemIndex { get; set; }
		
		/// <summary>
		/// Logistics reservation waiting time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lockTTL")]
		public string LockTTL { get; set; }
		
		/// <summary>
		/// Shipping price for the item. Does not account for the whole order's shipping price.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="price")]
		public int Price { get; set; }
		
		/// <summary>
		/// Selected shipping option
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="selectedSla")]
		public string SelectedSla { get; set; }
		
		/// <summary>
		/// Estimated time until delivery for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingEstimate")]
		public string ShippingEstimate { get; set; }
	}
	
	public class PlaceFulfillmentOrderPostBodyShippingDataLogisticsInfoDeliveryWindow
	{
		
		/// <summary>
		/// Delivery window ending day and time in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDateUtc")]
		public string EndDateUtc { get; set; }
		
		/// <summary>
		/// Delivery window list price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lisPrice")]
		public System.Nullable<System.Int32> LisPrice { get; set; }
		
		/// <summary>
		/// Delivery window price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Delivery window starting day and time in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDateUtc")]
		public string StartDateUtc { get; set; }
		
		/// <summary>
		/// Delivery window tax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public System.Nullable<System.Int32> Tax { get; set; }
	}
	
	public class AuthorizeDispatchForFulfillmentOrderPostBody
	{
		
		/// <summary>
		/// ID of the order in the marketplace. It is the same as the `orderId` without the `afilliateId` at the beginning. For instance, if the `orderId` is `"MKP-123"`, the `marketplaceOrderId` is `"123"`.
		/// </summary>
		[System.ComponentModel.DefaultValue("123")]
		[System.Runtime.Serialization.DataMember(Name="marketplaceOrderId")]
		public string MarketplaceOrderId { get; set; } = "123";
	}
	
	public class Fulfillment_simulationPostBody
	{
		
		/// <summary>
		/// ISO 3-digit code of the country where the delivery address is located.  This field is mandatory, for shopping carts simulations, where both Country and Postal Code are required. This field should be sent as `null` for storefront simulations, where the information is not necessary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Geographic coordinates of the delivery address. This may be used instead of the postalCode, in case the marketplace is configured to accept geolocation. Example of value: `[-22.9443504,-43.1825635]`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public string[] GeoCoordinates { get; set; }
		
		/// <summary>
		/// Array containing the cart items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public FulfillmentItem[] Items { get; set; }
		
		/// <summary>
		/// Delivery address postal code. This field is mandatory for shopping carts simulations, where both Country and Postal Code are required. This field should be sent as `null` for storefront simulations, where the information is not necessary.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) associated to the seller account created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sc")]
		public string Sc { get; set; }
	}
	
	public class Fulfillment_simulationReturn
	{
		
		/// <summary>
		/// ISO 3-digit code of the country where the delivery address is located. If you don’t want to send it, use the value null.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Contains the data about each SKU in the cart.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Fulfillment_simulationReturnItems[] Fulfillment_simulationReturnItems { get; set; }
		
		/// <summary>
		/// Array that contains the data regarding the delivery methods and stock for each item. If all products are unavailable, this field should return empty.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="logisticsInfo")]
		public Fulfillment_simulationReturnLogisticsInfo[] Fulfillment_simulationReturnLogisticsInfo { get; set; }
		
		/// <summary>
		/// Postal code of the delivery address. This field is mandatory, for shopping carts simulations, where both Country and Postal Code are required. This field should be sent as `null` for storefront simulations, where the information is not necessary.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
	}
	
	public class Fulfillment_simulationReturnItems
	{
		
		/// <summary>
		/// SKU ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// List price. It’s the amount presented to the customer as a “previous” price that has been lowered due to a discount. Don’t separate the decimal places. The last two digits are the cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="listPrice")]
		public int ListPrice { get; set; }
		
		/// <summary>
		/// SKU’s measurement unit.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="measurementUnit")]
		public string MeasurementUnit { get; set; }
		
		/// <summary>
		/// Name of the marketplace, used to guide payments. This field should be nulled if the marketplace is responsible for processing payments. Check out our [​​Payments in VTEX marketplaces](https://help.vtex.com/en/tutorial/payments-in-vtex-marketplaces--2kYOfWCZYweJkYl18bw9yD) article to know more.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchantName")]
		public string MerchantName { get; set; }
		
		/// <summary>
		/// Services that may be offered for this SKU. example are the assembly of a piece of furniture or warranty. In case these information are sent, the following fields are mandatory. If you don’t want to send it, use an empty array.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="offerings")]
		public Fulfillment_simulationReturnItemsOfferings[] Fulfillment_simulationReturnItemsOfferings { get; set; }
		
		/// <summary>
		/// Actual selling price of the SKU. Don’t separate the decimal places. The last two digits are the cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="price")]
		public int Price { get; set; }
		
		/// <summary>
		/// List with the promotions applied to the SKU.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="priceTags")]
		public string[] PriceTags { get; set; }
		
		/// <summary>
		/// Expiration date of the SKU price. Example: `2014-03-01T22:58:28.143`. In case you don’t want to send it, use the value null.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="priceValidUntil")]
		public string PriceValidUntil { get; set; }
		
		/// <summary>
		/// Quantity of the item. The seller should send the quantity that was indicated in the request, or the maximum quantity possible.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(0)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public int Quantity { get; set; } = 0;
		
		/// <summary>
		/// Position of this item in the original array (request).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestIndex")]
		public int RequestIndex { get; set; }
		
		/// <summary>
		/// ID of the seller as registered in VTEX. You should send the same value that came in the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="seller")]
		public string Seller { get; set; }
		
		/// <summary>
		/// SKU unit multiplier. The default value is 1.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unitMultiplier")]
		public int UnitMultiplier { get; set; }
	}
	
	public class Fulfillment_simulationReturnItemsOfferings
	{
		
		/// <summary>
		/// Service ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Service name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Service price. The last two digits are the cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="price")]
		public int Price { get; set; }
		
		/// <summary>
		/// Type of the service.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class Fulfillment_simulationReturnLogisticsInfo
	{
		
		/// <summary>
		/// Array contains the stock balance for each channel.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deliveryChannels")]
		public Fulfillment_simulationReturnLogisticsInfoDeliveryChannels[] Fulfillment_simulationReturnLogisticsInfoDeliveryChannels { get; set; }
		
		/// <summary>
		/// Position of this item in the original array, i.e., in the array that came with the request. This index is what identifies which SKU you are referring to for each object inside the logisticsInfo.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="itemIndex")]
		public int ItemIndex { get; set; }
		
		/// <summary>
		/// Quantity of the item. The seller should send the quantity that was indicated in the request, or the maximum quantity possible.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public int Quantity { get; set; }
		
		/// <summary>
		/// ISO 3-digit code of the countries to where the SKU is delivered.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shipsTo")]
		public string[] ShipsTo { get; set; }
		
		/// <summary>
		/// Contains the available delivery methods.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slas")]
		public Fulfillment_simulationReturnLogisticsInfoSlas[] Fulfillment_simulationReturnLogisticsInfoSlas { get; set; }
		
		/// <summary>
		/// Stock balance of the SKU.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stockBalance")]
		public int StockBalance { get; set; }
	}
	
	public class Fulfillment_simulationReturnLogisticsInfoDeliveryChannels
	{
		
		/// <summary>
		/// Identifies the channel type whose stock balance will be informed in the next field. Possible values are: pickup-in-point for pickup point and delivery for regular delivery.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Stock balance for the channel type selected in the previous field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stockBalance")]
		public int StockBalance { get; set; }
	}
	
	public class Fulfillment_simulationReturnLogisticsInfoSlas
	{
		
		/// <summary>
		/// Contains the delivery windows available for the SLA.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="availableDeliveryWindows")]
		public Fulfillment_simulationReturnLogisticsInfoSlasAvailableDeliveryWindows[] Fulfillment_simulationReturnLogisticsInfoSlasAvailableDeliveryWindows { get; set; }
		
		/// <summary>
		/// Type of delivery channel. The values that are possible are: `pickup-in-point` for pickup point and `delivery` for regular delivery.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deliveryChannel")]
		public string DeliveryChannel { get; set; }
		
		/// <summary>
		/// Identifier of the delivery method.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the delivery method.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Contains the data about the pickup point. If you don’t want to send this, use the value `null`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pickupStoreInfo")]
		public Fulfillment_simulationReturnLogisticsInfoSlasPickupStoreInfo PickupStoreInfo { get; set; }
		
		/// <summary>
		/// Delivery price. The two last digits are the cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="price")]
		public int Price { get; set; }
		
		/// <summary>
		/// Time estimated for the delivery. Possible suffixes are `bd` for *business day* , `h` for *hours*, and `m` for *minutes*.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shippingEstimate")]
		public string ShippingEstimate { get; set; }
	}
	
	public class Fulfillment_simulationReturnLogisticsInfoSlasAvailableDeliveryWindows
	{
		
		/// <summary>
		/// End date of the delivery window.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endDateUtc")]
		public string EndDateUtc { get; set; }
		
		/// <summary>
		/// Extra price for scheduled delivery. The last two digits are the cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="price")]
		public int Price { get; set; }
		
		/// <summary>
		/// Start date of the delivery window.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDateUtc")]
		public string StartDateUtc { get; set; }
	}
	
	public class Fulfillment_simulationReturnLogisticsInfoSlasPickupStoreInfo
	{
		
		/// <summary>
		/// Description or extra information about the pickup point.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="additionalInfo")]
		public string AdditionalInfo { get; set; }
		
		/// <summary>
		/// Address data of the pickup point.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public Fulfillment_simulationReturnLogisticsInfoSlasPickupStoreInfoAddress Address { get; set; }
		
		/// <summary>
		/// Friendly name of the pickup point.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		/// <summary>
		/// `true` if it is a pickup point.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isPickupStore")]
		public bool IsPickupStore { get; set; }
	}
	
	public class Fulfillment_simulationReturnLogisticsInfoSlasPickupStoreInfoAddress
	{
		
		/// <summary>
		/// Identifies the pickup point.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="addressId")]
		public string AddressId { get; set; }
		
		/// <summary>
		/// The possible value is pickup.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="addressType")]
		public string AddressType { get; set; }
		
		/// <summary>
		/// Pickup point's city.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Complement of the pickup point address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; }
		
		/// <summary>
		/// 3-digit ISO code of the country where the pickup point is located.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Contains the geographic coordinates of the pickup point.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public double[] GeoCoordinates { get; set; }
		
		/// <summary>
		/// Neighborhood where the pickup point is located.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="neighborhood")]
		public string Neighborhood { get; set; }
		
		/// <summary>
		/// Address number of the pickup point.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Postal code of the pickup point. This field is mandatory, for shopping carts simulations, where both Country and Postal Code are required. This field should be sent as `null` for storefront simulations, where the information is not necessary.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Name of the person who will receive the product. May be sent as `null`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiverName")]
		public string ReceiverName { get; set; }
		
		/// <summary>
		/// A reference for the pickup point address. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		/// <summary>
		/// Pickup point's state.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Street where the pickup point is located.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
	}
	
	public class Mkp_order_cancellationPostBody
	{
		
		/// <summary>
		/// Identifies the order. The seller should use this ID to trigger the cancellation of the corresponding order.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("1138342255777-01")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplaceOrderId")]
		public string MarketplaceOrderId { get; set; } = "1138342255777-01";
	}
	
	public class Authorize_fulfillmentPostBody
	{
		
		/// <summary>
		/// Identifies the order. The seller should use this ID to trigger the fulfillment process of the corresponding order.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplaceOrderId")]
		public string MarketplaceOrderId { get; set; }
	}
	
	public class Cancel_order_in_marketplacePostBody
	{
		
		/// <summary>
		/// Insert here the reason for the order's cancellation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	public class Send_invoicePostBody
	{
		
		/// <summary>
		/// Courier, if available on invoice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courier")]
		public string Courier { get; set; }
		
		/// <summary>
		/// Invoice number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="invoiceNumber")]
		public string InvoiceNumber { get; set; }
		
		/// <summary>
		/// Invoice value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceValue")]
		public System.Nullable<System.Int32> InvoiceValue { get; set; }
		
		/// <summary>
		/// Issuance date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issuanceDate")]
		public string IssuanceDate { get; set; }
		
		/// <summary>
		/// Array containing the order items.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Send_invoicePostBodyItems[] Send_invoicePostBodyItems { get; set; }
		
		/// <summary>
		/// Tracking number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingNumber")]
		public string TrackingNumber { get; set; }
		
		/// <summary>
		/// Tracking URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingUrl")]
		public string TrackingUrl { get; set; }
		
		/// <summary>
		/// Indicates the type of the invoice. Use `"Output"` for regular orders and `"Input"` for returns.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class Send_invoicePostBodyItems
	{
		
		/// <summary>
		/// SKU ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Price of the item.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="price")]
		public int Price { get; set; }
		
		/// <summary>
		/// Quantity of items of the SKU in the cart.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public int Quantity { get; set; }
	}
	
	public class Send_tracking_informationPostBody
	{
		
		/// <summary>
		/// Courier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courier")]
		public string Courier { get; set; }
		
		/// <summary>
		/// Date of order dispatch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dispatchedDate")]
		public string DispatchedDate { get; set; }
		
		/// <summary>
		/// Tracking number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingNumber")]
		public string TrackingNumber { get; set; }
		
		/// <summary>
		/// Tracking URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingUrl")]
		public string TrackingUrl { get; set; }
	}
	
	public class Update_tracking_statusPostBody
	{
		
		/// <summary>
		/// Array containing information on each tracking event received.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="events")]
		public Update_tracking_statusPostBodyEvents[] Update_tracking_statusPostBodyEvents { get; set; }
		
		/// <summary>
		/// Indicates if order has been delivered. `false` if it is in transit.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isDelivered")]
		public bool IsDelivered { get; set; }
	}
	
	public class Update_tracking_statusPostBodyEvents
	{
		
		/// <summary>
		/// City where the event ocurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Date when event ocurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		/// <summary>
		/// Description of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// State where the event ocurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
