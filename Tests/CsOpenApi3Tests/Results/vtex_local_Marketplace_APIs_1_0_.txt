//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AcceptSellerLeadRequest
	{
		
		/// <summary>
		/// Marketplace's account ID
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("5fb38ace-d95e-45ad-970d-ee97cce9fbcd")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; } = "5fb38ace-d95e-45ad-970d-ee97cce9fbcd";
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountable")]
		public Accountable Accountable { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public Address Address { get; set; }
		
		/// <summary>
		/// Company's legal document code.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("12345671000")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="document")]
		public string Document { get; set; } = "12345671000";
		
		/// <summary>
		/// email of the admin responsible for the seller.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("seller@email.com")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; } = "seller@email.com";
		
		/// <summary>
		/// Indicates if the seller has accepted the platform's legal terms and conditions.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(true)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hasAcceptedLegalTerms")]
		public bool HasAcceptedLegalTerms { get; set; } = true;
		
		/// <summary>
		/// Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) associated to the seller account created.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("1")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="salesChannel")]
		public string SalesChannel { get; set; } = "1";
		
		/// <summary>
		/// Name of the seller's account, part of the url of their VTEX Admin.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("seller123")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sellerAccountName")]
		public string SellerAccountName { get; set; } = "seller123";
		
		/// <summary>
		/// Seller's contact email.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("selleremail@email.com")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sellerEmail")]
		public string SellerEmail { get; set; } = "selleremail@email.com";
		
		/// <summary>
		/// Seller's store's name.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("Seller Name")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sellerName")]
		public string SellerName { get; set; } = "Seller Name";
		
		/// <summary>
		/// Type of seller, including: 
		///
		///`1`: regular seller 
		///
		///`2`: whitelabel seller
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(1)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sellerType")]
		public int SellerType { get; set; } = 1;
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Accountable
	{
		
		/// <summary>
		/// Email address of the person responsible for the seller.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("email@email.com")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; } = "email@email.com";
		
		/// <summary>
		/// Name of the person responsible for the seller.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("Jane Smith")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; } = "Jane Smith";
		
		/// <summary>
		/// Phone number of the person responsible for the seller.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("1234567890")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; } = "1234567890";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Address
	{
		
		/// <summary>
		/// City name, from the seller's address.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("Rio de Janeiro")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; } = "Rio de Janeiro";
		
		/// <summary>
		/// Seller's address complement.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("Appartment 1234")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; } = "Appartment 1234";
		
		/// <summary>
		/// Seller's address neighborhood.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("VTEX quarter")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="neighborhood")]
		public string Neighborhood { get; set; } = "VTEX quarter";
		
		/// <summary>
		/// Street's number, from the seller's address.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("25")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; } = "25";
		
		/// <summary>
		/// Postal code from the seller's address.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("12345678")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="postalcode")]
		public string Postalcode { get; set; } = "12345678";
		
		/// <summary>
		/// State, from the seller's address.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("RJ")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; } = "RJ";
		
		/// <summary>
		/// Street information, from the seller's address.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("VTEX street")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; } = "VTEX street";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AvailableSalesChannel
	{
		
		/// <summary>
		/// Sales Channel's ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(1)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public int Id { get; set; } = 1;
		
		/// <summary>
		/// Flag defining if the sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) is selected or not.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(true)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isSelected")]
		public bool IsSelected { get; set; } = true;
		
		/// <summary>
		/// Name of the Sales Channel.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("Main Store")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; } = "Main Store";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BulkUpsertSellerCommissionsRequest
	{
		
		/// <summary>
		/// Full path to the SKU's category. It should be written as {department}/{category}. For example: if the department is **Appliances** and the category is **Oven**, the full path should be 'Appliances/Oven'.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("Appliances/Oven")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categoryFullPath")]
		public string CategoryFullPath { get; set; } = "Appliances/Oven";
		
		/// <summary>
		/// Marketplace's Category ID that the product belongs to, configured in the Catalog.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("6")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categoryId")]
		public string CategoryId { get; set; } = "6";
		
		/// <summary>
		/// Percentage of the comission applied to the freight in decimals.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(2.43)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freightCommissionPercentage")]
		public double FreightCommissionPercentage { get; set; } = 2.43;
		
		/// <summary>
		/// Percentage of the comission applied to the product in decimals.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(9.85)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="productCommissionPercentage")]
		public double ProductCommissionPercentage { get; set; } = 9.85;
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSellerLeadRequest
	{
		
		/// <summary>
		/// Marketplace's account ID
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("5fb38ace-d95e-45ad-970d-ee97cce9fbcd")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; } = "5fb38ace-d95e-45ad-970d-ee97cce9fbcd";
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountable")]
		public Accountable Accountable { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public Address Address { get; set; }
		
		/// <summary>
		/// Company's legal document code.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("12345671000")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="document")]
		public string Document { get; set; } = "12345671000";
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("email@email.com")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; } = "email@email.com";
		
		/// <summary>
		/// Indicates if the seller has accepted the platform's legal terms and conditions.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(true)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hasAcceptedLegalTerms")]
		public bool HasAcceptedLegalTerms { get; set; } = true;
		
		/// <summary>
		/// Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) associated to the seller account created.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("1")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="salesChannel")]
		public string SalesChannel { get; set; } = "1";
		
		/// <summary>
		/// Name of the seller's account, part of the url of their VTEX Admin.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("seller123")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sellerAccountName")]
		public string SellerAccountName { get; set; } = "seller123";
		
		/// <summary>
		/// Seller's contact email;
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("selleremail@email.com")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sellerEmail")]
		public string SellerEmail { get; set; } = "selleremail@email.com";
		
		/// <summary>
		/// Seller's store's name.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("Seller Name")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sellerName")]
		public string SellerName { get; set; } = "Seller Name";
		
		/// <summary>
		/// Type of seller, including: 
		///
		///`1`: regular seller 
		///
		///`2`: whitelabel seller
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(1)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sellerType")]
		public int SellerType { get; set; } = 1;
	}
	
	/// <summary>
	/// Array of groups attached to the seller. Groups are defined by key-words that group sellers into categories defined by the marketplace when adding a new seller through the [Configure Seller Account](https://developers.vtex.com/vtex-rest-api/reference/sellers#putupsertseller) endpoint. It is possible to filter sellers by group in the Seller Management page in your VTEX Admin. Know more about groups through our [Seller Management](https://help.vtex.com/en/tutorial/gerenciamento-de-sellers-beta--6eEiOISwxuAWJ8w6MtK7iv#groups) documentation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Groups
	{
		
		/// <summary>
		/// Group's unique identifier code.
		/// </summary>
		[System.ComponentModel.DefaultValue("8d845239bf1448dc8bc3ed3121837511")]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; } = "8d845239bf1448dc8bc3ed3121837511";
		
		/// <summary>
		/// Name of the tag chosen to identify the group.
		/// </summary>
		[System.ComponentModel.DefaultValue("franchise Accounts")]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; } = "franchise Accounts";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MainImage
	{
		
		/// <summary>
		/// Code identifying the image's file.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("53878805")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; } = "53878805";
		
		/// <summary>
		/// Image's label.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("Image 1")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageLabel { get; set; } = "Image 1";
		
		/// <summary>
		/// Path for the image's file.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("~/archives/ids/155411-#width#-#height#/Webp.net-resizeimage.jpg")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImagePath { get; set; } = "~/archives/ids/155411-#width#-#height#/Webp.net-resizeimage.jpg";
		
		/// <summary>
		/// HTML tag for the selected image.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("<img src=\"~/archives/ids/155411-#width#-#height#/Webp.net-resizeimage.jpg\" width=\"#width#\" height=\"#height#\" alt=\"Image name and description\" id=\"\" />")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageTag { get; set; } = "<img src=\"~/archives/ids/155411-#width#-#height#/Webp.net-resizeimage.jpg\" width=\"#width#\" height=\"#height#\" alt=\"Image name and description\" id=\"\" />";
		
		/// <summary>
		/// Alt text for the image.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("Image name and description")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageText { get; set; } = "Image name and description";
		
		/// <summary>
		/// Whether the image is the main one or not.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(true)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool IsMain { get; set; } = true;
		
		/// <summary>
		/// If zoom can be applied to the image.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(true)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool IsZoomSize { get; set; } = true;
		
		/// <summary>
		/// Date of the last changed made to the offer.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("2021-05-06T21:37:24.262529")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LastModified { get; set; } = "2021-05-06T21:37:24.262529";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Offer
	{
		
		/// <summary>
		/// The sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) ID in which the SKU is available.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("1")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AvailableSalesChannels { get; set; } = "1";
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OffersPerSalesChannel[] OffersPerSalesChannel { get; set; }
		
		/// <summary>
		/// ID of the seller in the marketplace. This ID must be created by the marketplace.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("1")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SellerId { get; set; } = "1";
		
		/// <summary>
		/// A string that identifies the SKU in the seller. This is the ID that the marketplace will use for future references to this SKU, such as price and inventory notifications.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("1070268")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SellerSkuId { get; set; } = "1070268";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OffersPerSalesChannel
	{
		
		/// <summary>
		/// Available SKU stock quantity
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(30)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int AvailableQuantity { get; set; } = 30;
		
		/// <summary>
		/// SKU's suggested selling price
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(1200)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ListPrice { get; set; } = 1200;
		
		/// <summary>
		/// SKU's price.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(1300)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Price { get; set; } = 1300;
		
		/// <summary>
		/// SKU's price without discount applied.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(1400)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int PriceWithoutDiscount { get; set; } = 1400;
		
		/// <summary>
		/// The sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) of the SKU.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(1)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int SaleChannel { get; set; } = 1;
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResendSellerLeadRequestRequest
	{
		
		/// <summary>
		/// Seller Lead's status. Includes `accepted`, `connected` or `invited`.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("accepted")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; } = "accepted";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SellerCommissionConfiguration
	{
		
		/// <summary>
		/// Array with percentage of the comission applied to categories in decimals.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categoriesCommissionConfiguration")]
		public string[] CategoriesCommissionConfiguration { get; set; }
		
		/// <summary>
		/// Percentage of the comission applied to the freight in decimals.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(2.43)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freightCommissionPercentage")]
		public double FreightCommissionPercentage { get; set; } = 2.43;
		
		/// <summary>
		/// Percentage of the comission applied to the product in decimals.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(9.85)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="productCommissionPercentage")]
		public double ProductCommissionPercentage { get; set; } = 9.85;
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Sku2
	{
		
		/// <summary>
		/// EAN's unique identifier number
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("768655")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EanId { get; set; } = "768655";
		
		/// <summary>
		/// Whether the SKU is active in the sales channel (true), or not (false).
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(true)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool IsActive { get; set; } = true;
		
		/// <summary>
		/// Main image's information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MainImage { get; set; }
		
		/// <summary>
		/// Summarized name of the SKU
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("Color: Black")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; } = "Color: Black";
		
		/// <summary>
		/// Complete name of the SKU
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("Name of the Product - 123 Color: Black")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NameComplete { get; set; } = "Name of the Product - 123 Color: Black";
		
		/// <summary>
		/// Array with offers
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Offer[] Offers { get; set; }
		
		/// <summary>
		/// SKU's Reference ID
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("1234")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RefId { get; set; } = "1234";
		
		/// <summary>
		/// SKU's unique identifier number
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("1070268")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SkuId { get; set; } = "1070268";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpsertMappingRequest
	{
		
		/// <summary>
		/// Marketplace's sales channel that will be associated to the seller's [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187).
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(1)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplaceSalesChannel")]
		public int MarketplaceSalesChannel { get; set; } = 1;
		
		/// <summary>
		/// Seller's [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) that will be associated with the marketplace's sales channel. Through the affiliate, the seller determines which of his sales channel will be used for the mapping.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("GCB")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sellerChannel")]
		public string SellerChannel { get; set; } = "GCB";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpsertSellerCommissionsRequest
	{
		
		/// <summary>
		/// Full path to the SKU's category. It should be written as {department}/{category}. For example: if the department is **Appliances** and the category is **Oven**, the full path should be 'Appliances/Oven'.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("Appliances/Oven")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categoryFullPath")]
		public string CategoryFullPath { get; set; } = "Appliances/Oven";
		
		/// <summary>
		/// Marketplace's Category ID that the product belongs to, configured in the Catalog.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("6")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categoryId")]
		public string CategoryId { get; set; } = "6";
		
		/// <summary>
		/// Percentage of the comission applied to the freight in decimals.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(2.43)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freightCommissionPercentage")]
		public double FreightCommissionPercentage { get; set; } = 2.43;
		
		/// <summary>
		/// Percentage of the comission applied to the product in decimals.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(9.85)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="productCommissionPercentage")]
		public double ProductCommissionPercentage { get; set; } = 9.85;
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpsertSellerRequest
	{
		
		/// <summary>
		/// SKU Seller Identification
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("cscidentification 123")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CSCIdentification { get; set; } = "cscidentification 123";
		
		/// <summary>
		/// Seller's account name
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("partner01")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account")]
		public string Account { get; set; } = "partner01";
		
		/// <summary>
		/// Flag that allows customers to use gift cards from the seller to buy their products on the marketplace. It identifies purchases made with a gift card so that only the final price (with discounts applied) is paid to the seller.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(false)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allowHybridPayments")]
		public bool AllowHybridPayments { get; set; } = false;
		
		/// <summary>
		/// Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) available.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="availableSalesChannels")]
		public AvailableSalesChannel[] AvailableSalesChannels { get; set; }
		
		/// <summary>
		/// URL of the endpoint of the seller's catalog. This field will only be displayed if the seller type is VTEX Store. The field format will be as follows: `https://{sellerName}.vtexcommercestable.com.br/api/catalog_system/.`
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("https://pedrostore.vtexcommercestable.com.br/api/catalog_system/")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="catalogSystemEndpoint")]
		public string CatalogSystemEndpoint { get; set; } = "https://pedrostore.vtexcommercestable.com.br/api/catalog_system/";
		
		/// <summary>
		/// Channel's name.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("channel name")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public string Channel { get; set; } = "channel name";
		
		/// <summary>
		/// Text describing the delivery policy previously agreed between the marketplace and the seller.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("Describe delivery policy")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deliveryPolicy")]
		public string DeliveryPolicy { get; set; } = "Describe delivery policy";
		
		/// <summary>
		/// String describing the seller
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("Seller A, from the B industry.")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; } = "Seller A, from the B industry.";
		
		/// <summary>
		/// email of the admin responsible for the seller.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("seller@email.com")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; } = "seller@email.com";
		
		/// <summary>
		/// Text describing the exchange and return policy previously agreed between the marketplace and the seller.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("Describe exchange and returns policy")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="exchangeReturnPolicy")]
		public string ExchangeReturnPolicy { get; set; } = "Describe exchange and returns policy";
		
		/// <summary>
		/// URL of the endpoint for fulfillment of seller's orders, which the marketplace will use to communicate with the seller. 
		///
		///For **external sellers**, please include the URL of the seller's endpoint. External sellers have different endpoint standards. The seller must inform this endpoint to the marketplace so that the marketplace can complete the configuration process. 
		///
		///For **VTEX Stores**, the field format will be as follows: `https://{SellerName}.vtexcommercestable.com.br/api/fulfillment?&sc={TradePolicyID}`. 
		///
		///The value `SellerName` corresponds to the store name if the seller is a VTEX store. 
		///
		///The value `TradePolicyID` corresponds to the [trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV#master-data) created by the seller in their own VTEX environment. The seller must inform this ID to the marketplace so that the marketplace can complete the configuration process. 
		///
		///The value `AffiliateID` corresponds to the 3-digit affiliate identification code created by the seller. The seller must inform this ID to the marketplace so that the marketplace can complete the configuration process. 
		///
		///To configure the [Multilevel Omnichannel Inventory](https://developers.vtex.com/vtex-rest-api/docs/multilevel-omnichannel-inventory) feature, fill in this field with the checkout endpoint following this example: `https://{{sellerAccount}}.vtexcommercestable.com.br/api/checkout?affiliateid={{affiliateId}}&sc={{salesChannel`
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("http://{SellerName}.vtexcommercestable.com.br/api/fulfillment?&sc={TradePolicyID}")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fulfillmentEndpoint")]
		public string FulfillmentEndpoint { get; set; } = "http://{SellerName}.vtexcommercestable.com.br/api/fulfillment?&sc={TradePolicyID}";
		
		/// <summary>
		///  Identification code of the seller responsible for fulfilling the order. This is an optional field used when a seller sells SKUs from another seller. If the seller sells their own SKUs, it must be nulled.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("seller1")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fulfillmentSellerId")]
		public string FulfillmentSellerId { get; set; } = "seller1";
		
		/// <summary>
		/// Array of groups attached to the seller. Groups are defined by key-words that group sellers into categories defined by the marketplace when adding a new seller through the [Configure Seller Account](https://developers.vtex.com/vtex-rest-api/reference/sellers#putupsertseller) endpoint. It is possible to filter sellers by group in the Seller Management page in your VTEX Admin. Know more about groups through our [Seller Management](https://help.vtex.com/en/tutorial/gerenciamento-de-sellers-beta--6eEiOISwxuAWJ8w6MtK7iv#groups) documentation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public Groups[] Groups { get; set; }
		
		/// <summary>
		/// Seller ID assigned by the marketplace. We recommend filling it in with the seller's account name.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("seller123")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; } = "seller123";
		
		/// <summary>
		/// Whether the seller is active on the marketplace or not.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(true)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public bool IsActive { get; set; } = true;
		
		/// <summary>
		/// Flag used by the VTEX Checkout to simmulate shopping carts, products and shipping only in sellers with the boolean set as `true`, avoiding performance issues.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(true)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isBetterScope")]
		public bool IsBetterScope { get; set; } = true;
		
		/// <summary>
		/// Flag determining whether the seller configured is a VTEX store or not.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(true)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isVtex")]
		public bool IsVtex { get; set; } = true;
		
		/// <summary>
		/// Name of the seller's store, configured in the seller's environment.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("Seller Name")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; } = "Seller Name";
		
		/// <summary>
		/// User password, if you are using a hub to integrate with the external seller.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("integrationHubPassword")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; } = "integrationHubPassword";
		
		/// <summary>
		/// Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) associated to the seller account created. If no value is specified, the system will automatically use the sales channel configured in the seller's [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("1")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="salesChannel")]
		public string SalesChannel { get; set; } = "1";
		
		/// <summary>
		/// Score attributed to this seller.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(0)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="score")]
		public double Score { get; set; } = 0;
		
		/// <summary>
		///  Text describing the security policy previously agreed between the marketplace and the seller.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("Describe privacy and security policy")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="securityPrivacyPolicy")]
		public string SecurityPrivacyPolicy { get; set; } = "Describe privacy and security policy";
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sellerCommissionConfiguration")]
		public string SellerCommissionConfiguration { get; set; }
		
		/// <summary>
		/// Type of seller, including: 
		///
		///`1`: regular seller 
		///
		///`2`: whitelabel seller
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(1)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sellerType")]
		public int SellerType { get; set; } = 1;
		
		/// <summary>
		/// This code is the Identity Number for the legal entity and is linked to information in its base country.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("34444")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taxCode")]
		public string TaxCode { get; set; } = "34444";
		
		/// <summary>
		///  the marketplace must first allow VTEX to share clients’ email addresses with the seller. To do so, it is necessary to set 'AllowEmailSharing' as the value for the TrustPolicy field
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("AllowEmailSharing")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trustPolicy")]
		public string TrustPolicy { get; set; } = "AllowEmailSharing";
		
		/// <summary>
		/// Username, if you are using a hub to integrate with the external seller.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("integrationHubUserName")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; } = "integrationHubUserName";
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Notify marketplace of inventory update
		/// This endpoint is used by *sellers* to notify marketplaces that the inventory level has changed for one of their SKUs.
		/// 
		/// There is no request body in this call, indicating the new inventory level, for instance. It only notifies a specific marketplace (`accountName`) that a seller (`sellerId`) has changed the inventory level of an SKU (`skuId`).
		/// 
		/// *Marketplaces* will then call the [fulfillment endpoint](https://developers.vtex.com/vtex-rest-api/reference/fulfillment-simulation) provided in the seller registration form to get the updated inventory  information.
		/// InventoryNotification notificator/{sellerId}/changenotification/{skuId}/inventory
		/// </summary>
		/// <param name="accountName">Name of the VTEX account that belongs to the marketplace. The notification will be posted into this account.</param>
		/// <param name="environment">Environment to use. Used as part of the URL.</param>
		/// <param name="sellerId">A string that identifies the seller in the marketplace. This ID must be created by the marketplace and informed to the seller before the integration is built.</param>
		/// <param name="skuId">A string that identifies the SKU in the seller, that suffered the change. This is the ID that the marketplace will use for all  references to this SKU, such as price and inventory notifications.</param>
		public async Task InventoryNotificationAsync(string accountName, string environment, string sellerId, string skuId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "notificator/"+ (sellerId==null? "" : System.Uri.EscapeDataString(sellerId))+"/changenotification/"+ (skuId==null? "" : System.Uri.EscapeDataString(skuId))+"/inventory?accountName=" + (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&environment=" + (environment==null? "" : System.Uri.EscapeDataString(environment));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Notify marketplace of price update
		/// This endpoint is used by *sellers* to notify marketplaces that the price has changed for one of their SKUs.
		/// 
		/// There is no request body in this call, indicating the new price value, for instance. It only notifies a specific marketplace (`accountName`) that a seller (`sellerId`) has changed the price of an SKU (`skuId`).
		/// 
		/// *Marketplaces* will then call the [fulfillment endpoint](https://developers.vtex.com/vtex-rest-api/reference/fulfillment-simulation) provided in the seller registration form to get the updated price information.
		/// PriceNotification notificator/{sellerId}/changenotification/{skuId}/price
		/// </summary>
		/// <param name="accountName">Name of the VTEX account that belongs to the marketplace. The notification will be posted into this account.</param>
		/// <param name="environment">Environment to use. Used as part of the URL.</param>
		/// <param name="sellerId">A string that identifies the seller in the marketplace. This ID must be created by the marketplace and informed to the seller before the integration is built.</param>
		/// <param name="skuId">A string that identifies the seller's SKU that suffered the change. This is the ID that the marketplace will use for all  references to this SKU, such as price and inventory notifications.</param>
		public async Task PriceNotificationAsync(string accountName, string environment, string sellerId, string skuId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "notificator/"+ (sellerId==null? "" : System.Uri.EscapeDataString(sellerId))+"/changenotification/"+ (skuId==null? "" : System.Uri.EscapeDataString(skuId))+"/price?accountName=" + (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&environment=" + (environment==null? "" : System.Uri.EscapeDataString(environment));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Matched Offers List
		/// Offers are seller's products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.
		/// 
		/// This endpoint retrieves the available offers in a marketplace. It differs from the Get Suggestions endpoints, since it retrieves products that were already matched by the marketplace, and are currently in its catalog.
		/// 
		/// It is possible to filter the search through the following parameters:
		/// 
		/// - rows
		/// - sort
		/// 
		/// - start
		/// 
		/// - fq
		/// Getofferslist offer-manager/pvt/offers
		/// </summary>
		/// <param name="sort">Criteria used to sort the list of offers. For sorting values in ascending order, use `asc`, while for descending order, use `desc`. To fill in the field, insert the sorting criteria, followed by 'asc', or 'desc', separated by a comma. You can sort by the following criteria: 
		///
		///- **price:** sorts offers by price. *Ascending* goes from lowest to highest price, while *Descending* goes from highest to lowest price. 
		///
		///- **name:** sorts offers by *productName*, in alphabetical order. *Ascending* goes from *A* to *Z*, while *Descending* goes from *Z* to *A*. 
		///
		///- **availability:** availability in the sales channel (sc). The default value is 1. 
		///
		///Ex. sort=availability,desc 
		///
		///Ex. sort=name,asc 
		///
		///Ex. price,desc</param>
		/// <param name="rows">Number of rows included in the response. Each row corresponds to a single offer. The default amount of rows in the response is 1, and the maximum amount is 50. To have more than one offer listed in the response, please add the `rows` parameter with a number greater than 1.</param>
		/// <param name="start">Number corresponding to the row from which the offer list will begin, used for pagination. Filters the list of offers by retrieving the offers starting from the row defined. The default value is 0, if the param is not included in the call.</param>
		/// <param name="fq">This filter query can be used to filter offers by the criteria described below. It should be filled in by following the format: `fq={{criteriaName}}:{{criteriaValue}}`. 
		///
		///- **productId:** integer of the product ID 
		///
		///- **productName:** string of the product's name 
		///
		///- **skuId:** integer of the SKU ID 
		///
		///- **eanId:** string of the EAN ID 
		///
		///- **refId:** string of the Ref ID 
		///
		///- **categoryId:** integer of the category ID 
		///
		///- **brandId:** integer of the brand ID 
		///
		///- **sellerId:** string of the seller ID 
		///
		///- **sc:** integer of the sales channel's ID (trade policy in VTEX) 
		///
		///Ex: skuId:172 
		///
		///Ex: categoryId:13 
		///
		///Ex. productName:Product example-123</param>
		/// <param name="accountName">Name of the VTEX account. Used as part of the URL</param>
		/// <param name="environment">Environment to use. Used as part of the URL.</param>
		/// <returns>OK</returns>
		public async Task<GetofferslistReturn[]> GetofferslistAsync(string sort, int rows, int start, string fq, string accountName, string environment, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offer-manager/pvt/offers?sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&rows="+rows+"&start="+start+"&fq=" + (fq==null? "" : System.Uri.EscapeDataString(fq))+"&accountName=" + (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&environment=" + (environment==null? "" : System.Uri.EscapeDataString(environment));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetofferslistReturn[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Matched Offer's Data by Product ID
		/// Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.
		/// 
		/// This endpoint retrieves the available offers for a speciic Product ID in the marketplace's catalog. It differs from the Get Suggestions endpoints, since it retrieves products that were already matched by the marketplace operator, and are currently active in its catalog.
		/// 
		/// The call returns a list of offers for that ID, that contain the following data:
		/// 
		/// - Seller that sells the SKU
		/// 
		/// - Correspondent SKU ID
		/// 
		/// - SKU's price value
		/// 
		/// - Inventory level
		/// 
		/// - Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) that it is available at.
		/// GetProductoffers offer-manager/pvt/product/{productId}
		/// </summary>
		/// <param name="accountName">Name of the VTEX account. Used as part of the URL.</param>
		/// <param name="environment">Environment to use. Used as part of the URL.</param>
		/// <param name="productId">A string that identifies the seller's product. This is the ID that the marketplace will use for all references to this product, such as price and inventory notifications.</param>
		/// <returns>OK</returns>
		public async Task GetProductoffersAsync(string accountName, string environment, string productId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offer-manager/pvt/product/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"?accountName=" + (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&environment=" + (environment==null? "" : System.Uri.EscapeDataString(environment));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Matched Offer's Data by SKU ID
		/// Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.
		/// 
		/// This endpoint retrieves the available offers for a speciic SKU ID in the marketplace's catalog. It differs from the Get Suggestions endpoints, since it retrieves products that were already matched by the marketplace operator, and are currently active in its catalog.
		/// 
		/// The call returns a list of offers for that ID, that contain the following data:
		/// 
		/// - Seller that sells the SKU
		/// 
		/// - Correspondent SKU ID
		/// 
		/// - SKU's price value
		/// 
		/// - Inventory level
		/// 
		/// - Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) that it is available at.
		/// GetSKUoffers offer-manager/pvt/product/{productId}/sku/{skuId}
		/// </summary>
		/// <param name="accountName">Name of the VTEX account. Used as part of the URL.</param>
		/// <param name="environment">Environment to use. Used as part of the URL.</param>
		/// <param name="productId">A string that identifies the seller's product. This is the ID that the marketplace will use for all references to this product, such as price and inventory notifications.</param>
		/// <param name="skuId">A string that identifies the seller's SKU. This is the ID that the marketplace will use for all references to this SKU, such as price and inventory notifications.</param>
		/// <returns>OK</returns>
		public async Task GetSKUoffersAsync(string accountName, string environment, string productId, string skuId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offer-manager/pvt/product/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/sku/"+ (skuId==null? "" : System.Uri.EscapeDataString(skuId))+"?accountName=" + (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&environment=" + (environment==null? "" : System.Uri.EscapeDataString(environment));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List Seller Leads
		/// This call's response includes a list of all sellers invited by the marketplace operator to join them. Retrieved results can be filtered by adding optional query fields to the request. Each seller listed includes the following information:
		/// 
		/// - `id`
		/// 
		/// - `createdAt`
		/// 
		/// - `status`
		/// 
		/// - `isConnected`
		/// 
		/// - `sellerEmail`
		/// 
		/// - `sellerName`
		/// 
		/// - `salesChannel`
		/// 
		/// - `email`
		/// ListSellerLeads seller-register/pvt/seller-leads
		/// </summary>
		/// <param name="accountName">Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account.</param>
		/// <param name="environment">Environment to use. Used as part of the URL.</param>
		/// <param name="offset">This field determines the limit used to retrieve the list of sellers. The response includes objects starting `from` the value inputted here.</param>
		/// <param name="limit">This field determines the limit used to retrieve the list of sellers. The response includes objects until the value inputted here.            </param>
		/// <param name="isConnected">Query param that enables results to be filter by whether the seller lead is already connected to the marketplace or not.</param>
		/// <param name="search">Custom search field, that filters sellers invited by specific marketplace operator's  email.</param>
		/// <param name="status">Seller Lead's status. Includes `accepted`, `connected` or `invited`.</param>
		/// <param name="orderBy">Query param determining how data will be ordered in the response, ordering by name or ID in descending our ascending order. Includes the following values: 
		///
		///`namesort` = desc/asc 
		///
		///`idsort` = desc/asc</param>
		/// <returns>OK</returns>
		public async Task ListSellerLeadsAsync(string accountName, string environment, int offset, int limit, string isConnected, string search, string status, string orderBy, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "seller-register/pvt/seller-leads?accountName=" + (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&environment=" + (environment==null? "" : System.Uri.EscapeDataString(environment))+"&offset="+offset+"&limit="+limit+"&isConnected=" + (isConnected==null? "" : System.Uri.EscapeDataString(isConnected))+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&status=" + (status==null? "" : System.Uri.EscapeDataString(status))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Invite Seller Lead
		/// This API is used by marketplace operators to invite sellers to join their marketplace. The request sends an email to the seller, inviting sellers to activate their store. The invitation's link in the email is unique per user, and available for only seven days for the seller to click and begin activating their store.
		/// 
		/// The email template is completely customizable. All email templates that VTEX sends to seller leads can be found and edited in the marketplace's VTEX Admin, on the Message Center section.
		/// CreateSellerLead seller-register/pvt/seller-leads
		/// </summary>
		/// <param name="accountName">Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account.</param>
		/// <param name="environment">Environment to use. Used as part of the URL.</param>
		/// <returns>OK</returns>
		public async Task CreateSellerLeadAsync(string accountName, string environment, CreateSellerLeadRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "seller-register/pvt/seller-leads?accountName=" + (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&environment=" + (environment==null? "" : System.Uri.EscapeDataString(environment));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete Seller Lead
		/// This endpoint permanently deletes a seller previously invited to the marketplace, if the seller has not already accepted the invitation.
		/// RemoveSellerLead seller-register/pvt/seller-leads/{sellerLeadId}
		/// </summary>
		/// <param name="accountName">Name of the VTEX account that belongs to the marketplace.</param>
		/// <param name="environment">Environment to use. Used as part of the URL.</param>
		/// <param name="sellerLeadId">ID of the Seller Lead invited to the marketplace.</param>
		/// <returns>OK</returns>
		public async Task RemoveSellerLeadAsync(string accountName, string environment, string sellerLeadId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "seller-register/pvt/seller-leads/"+ (sellerLeadId==null? "" : System.Uri.EscapeDataString(sellerLeadId))+"?accountName=" + (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&environment=" + (environment==null? "" : System.Uri.EscapeDataString(environment));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Seller Lead's Data by Id
		/// Marketplace operators may call this endpoint to retrieve information about a specific seller invited to the Seller Portal, by searching through their `Seller Lead Id`. To know the chosen seller's `sellerLeadId`, marketplace operators can count on the *List Sellers* endpoint's response as well. Each seller listed includes the following information:
		/// 
		/// - `id`
		/// 
		/// - `createdAt`
		/// 
		/// - `status`
		/// 
		/// - `isConnected`
		/// 
		/// - `sellerEmail`
		/// 
		/// - `sellerName`
		/// 
		/// - `salesChannel`
		/// 
		/// - `email`
		/// RetrieveSellerLead seller-register/pvt/seller-leads/{sellerLeadId}
		/// </summary>
		/// <param name="accountName">Name of the VTEX account that belongs to the marketplace.</param>
		/// <param name="environment">Environment to use. Used as part of the URL.</param>
		/// <param name="sellerLeadId">ID of the Seller Lead invited to the marketplace.</param>
		/// <returns>OK</returns>
		public async Task RetrieveSellerLeadAsync(string accountName, string environment, string sellerLeadId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "seller-register/pvt/seller-leads/"+ (sellerLeadId==null? "" : System.Uri.EscapeDataString(sellerLeadId))+"?accountName=" + (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&environment=" + (environment==null? "" : System.Uri.EscapeDataString(environment));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Accept Seller Lead
		/// This endpoint is triggered by the seller onboarding wizard, once the seller confirms their invitation. It can be used by marketplace operators to manually accept seller leads, and carry on with their onboarding process.
		/// 
		/// Note that there's no specific API call that allows status changes. The operations only allow the seller lead to move forward:
		/// 
		/// From `invite` > to `Accept` > closing on `Create Seller`.
		/// 
		/// If you want to change the status, you can start the process again, by deleting that lead through the *Delete Seller Lead* endpoint, and resending the invite through the *Resend Seller Lead's Invite* endpoint.
		/// AcceptSellerLead seller-register/pvt/seller-leads/{sellerLeadId}
		/// </summary>
		/// <param name="accountName">Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account.</param>
		/// <param name="environment">Environment to use. Used as part of the URL.</param>
		/// <param name="sellerLeadId">ID of the Seller Lead invited to the marketplace.</param>
		/// <returns>OK</returns>
		public async Task AcceptSellerLeadAsync(string accountName, string environment, string sellerLeadId, AcceptSellerLeadRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "seller-register/pvt/seller-leads/"+ (sellerLeadId==null? "" : System.Uri.EscapeDataString(sellerLeadId))+"?accountName=" + (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&environment=" + (environment==null? "" : System.Uri.EscapeDataString(environment));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create Seller From Lead
		/// This endpoint is used by marketplace operators to create seller accounts. The request will only accept Seller Leads whose status is `accepted`. If they are already `connected` or `invited`, the call will not be fulfilled.
		/// 
		/// The creation of the account at VTEX is done by an internal Billing service. There is no seller account and marketplace affiliation if you do not go through this step.
		/// 
		/// Note that there's no specific API call that allows status changes. The operations only allow the seller lead to move forward:
		/// 
		/// From `invite` > to `Accept` > closing on `Create Seller`.
		/// 
		/// If you want to change the status, you can start the process again, by deleting that lead through the *Delete Seller Lead* endpoint, and resending the invite through the *Resend Seller Lead's Invite* endpoint.
		/// CreateSellerFromSellerLead seller-register/pvt/seller-leads/{sellerLeadId}/seller
		/// </summary>
		/// <param name="accountName">Marketplace's account name, the same one inputted on the endpoint's path.</param>
		/// <param name="environment">Environment to use. Used as part of the URL.</param>
		/// <param name="isActive">Whether the Seller Lead is `active` or not in Seller Portal. This request only supports the value `false` in this field. If that´s not the case, the request will respond with an internal error.</param>
		/// <param name="sellerLeadId">ID of the Seller Lead invited to the marketplace.</param>
		/// <returns>OK</returns>
		public async Task CreateSellerFromSellerLeadAsync(string accountName, string environment, bool isActive, string sellerLeadId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "seller-register/pvt/seller-leads/"+ (sellerLeadId==null? "" : System.Uri.EscapeDataString(sellerLeadId))+"/seller?accountName=" + (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&environment=" + (environment==null? "" : System.Uri.EscapeDataString(environment))+"&isActive="+isActive;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Resend Seller Lead Invite
		/// This endpoint allows marketplace operators to resend an invitation to a seller lead, previously invited to join their marketplace. The request will only accept Seller Leads whose status is `invited`. If they are already `connected` or `accepted`, the call will not be fulfilled.
		/// ResendSellerLeadRequest seller-register/pvt/seller-leads/{sellerLeadId}/status
		/// </summary>
		/// <param name="accountName">Name of the VTEX account that belongs to the marketplace.</param>
		/// <param name="environment">Environment to use. Used as part of the URL.</param>
		/// <param name="sellerLeadId">ID of the Seller Lead invited to the marketplace.</param>
		/// <returns>OK</returns>
		public async Task ResendSellerLeadRequestAsync(string accountName, string environment, string sellerLeadId, ResendSellerLeadRequestRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "seller-register/pvt/seller-leads/"+ (sellerLeadId==null? "" : System.Uri.EscapeDataString(sellerLeadId))+"/status?accountName=" + (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&environment=" + (environment==null? "" : System.Uri.EscapeDataString(environment));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List Sellers
		/// This endpoint lists all Sellers. This call's results can be filtered by [trade policies](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data) through the `sc` query param.
		/// GetListSellers seller-register/pvt/sellers
		/// </summary>
		/// <param name="accountName">Name of the VTEX account that belongs to the marketplace.</param>
		/// <param name="environment">Environment to use. Used as part of the URL.</param>
		/// <param name="from">The start number of pagination, being `0` the default value.</param>
		/// <param name="to">The end number of pagination, being `100` the default value.</param>
		/// <param name="keyword">Search sellers by a keyword in `sellerId` or `sellerName`.</param>
		/// <param name="integration">Filters sellers by the name of who made the integration, if VTEX or an external hub. The possible values for VTEX integrations are: `vtex-sellerportal`, `vtex-seller` and `vtex-franchise`.</param>
		/// <param name="group ">Groups are defined by keywords that group sellers into categories defined by the marketplace.</param>
		/// <param name="isActive">Enables to filter sellers that are active (`true`) or unactive (`false`) in the marketplace.</param>
		/// <param name="isBetterScope">The flag `isBetterScope` is used by the VTEX Checkout to simulate shopping carts, products, and shipping only in sellers with the field set as `true`, avoiding performance issues. When used as a query param, `isBetterScope` filters sellers that have the flag set as `true` or `false`.</param>
		/// <param name="isVtex">When set as `true`, the list returned will be of sellers who have a VTEX store configured. When set as `false`, the list will be of sellers who do not have a VTEX store configured.</param>
		/// <param name="sc">Filters sellers available for the marketplace's sales channel (or [trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) indicated in this field.</param>
		/// <param name="sellerType">Filters sellers by their type, which can be regular seller (`1`) or whitelabel seller (`2`).</param>
		/// <param name="sort">Narrow the search filtering by the fields: `id`, `name` or `pendingoffers`. The list retrieved can be organized in an ascending (`asc`) or descending (`desc`) order. The standardized format is `{field}:{order}`, and the default value is `id:asc`.</param>
		/// <returns>OK</returns>
		public async Task GetListSellersAsync(string accountName, string environment, double from, double to, string keyword, string integration, string group , bool isActive, bool isBetterScope, bool isVtex, string sc, int sellerType, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "seller-register/pvt/sellers?accountName=" + (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&environment=" + (environment==null? "" : System.Uri.EscapeDataString(environment))+"&from="+from+"&to="+to+"&keyword=" + (keyword==null? "" : System.Uri.EscapeDataString(keyword))+"&integration=" + (integration==null? "" : System.Uri.EscapeDataString(integration))+"&group =" + (group ==null? "" : System.Uri.EscapeDataString(group ))+"&isActive="+isActive+"&isBetterScope="+isBetterScope+"&isVtex="+isVtex+"&sc=" + (sc==null? "" : System.Uri.EscapeDataString(sc))+"&sellerType="+sellerType+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Configure Seller Account
		/// This endpoint is used by marketplace operators to configure the accounts of sellers that have already accepted the invitation to join their marketplaces.
		/// 
		/// For marketplaces to [add sellers](https://help.vtex.com/en/tutorial/adding-a-seller--tutorials_392) without the [Seller Invite](https://help.vtex.com/en/tutorial/marketplace-invited-sellers--6rb2FkcslmDueJ689Ulb9A) feature, call this endpoint directly.
		/// 
		/// This call includes all the information a seller needs to activate their account.
		/// UpsertSellerRequest seller-register/pvt/sellers
		/// </summary>
		/// <param name="accountName">Marketplace's account name, the same one inputted on the endpoint's path.</param>
		/// <param name="environment">Environment to use. Used as part of the URL.</param>
		/// <returns>OK</returns>
		public async Task UpsertSellerRequestAsync(string accountName, string environment, UpsertSellerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "seller-register/pvt/sellers?accountName=" + (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&environment=" + (environment==null? "" : System.Uri.EscapeDataString(environment));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Seller data by ID
		/// Marketplace operator may call this endpoint to retrieve information about a specific seller by filtering by ID. It is also possible to filter results by sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) through the `sc` query param.
		/// GetRetrieveSeller seller-register/pvt/sellers/{sellerId}
		/// </summary>
		/// <param name="accountName">Name of the VTEX account that belongs to the marketplace.</param>
		/// <param name="environment">Environment to use. Used as part of the URL.</param>
		/// <param name="sc">Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) associated to the seller account created.</param>
		/// <param name="sellerId">A string that identifies the seller in the marketplace. This ID must be created by the marketplace</param>
		/// <returns>OK</returns>
		public async Task GetRetrieveSellerAsync(string accountName, string environment, string sc, string sellerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "seller-register/pvt/sellers/"+ (sellerId==null? "" : System.Uri.EscapeDataString(sellerId))+"?accountName=" + (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&environment=" + (environment==null? "" : System.Uri.EscapeDataString(environment))+"&sc=" + (sc==null? "" : System.Uri.EscapeDataString(sc));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update Seller by Seller ID
		/// This endpoint allows marketplace operators to update the information of sellers connected to their account. You can replace a path's value with another value in order to update that single information. There is no need to fill all the body params available, only the one you wish to update.
		/// UpdateSeller seller-register/pvt/sellers/{sellerId}
		/// </summary>
		/// <param name="accountName">Name of the VTEX account that belongs to the marketplace.</param>
		/// <param name="environment">Environment to use. Used as part of the URL.</param>
		/// <param name="sellerId">A string that identifies the seller in the marketplace. This ID must be created by the marketplace</param>
		/// <param name="requestBody">array of objects</param>
		/// <returns>OK</returns>
		public async Task UpdateSellerAsync(string accountName, string environment, string sellerId, UpdateSellerPatchBody[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "seller-register/pvt/sellers/"+ (sellerId==null? "" : System.Uri.EscapeDataString(sellerId))+"?accountName=" + (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&environment=" + (environment==null? "" : System.Uri.EscapeDataString(environment));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List Seller Commissions by seller ID
		/// This endpoint retrieves all comissions configured for a specific seller.
		/// ListSellerCommissions seller-register/pvt/sellers/{sellerId}/commissions
		/// </summary>
		/// <param name="accountName">Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account.</param>
		/// <param name="environment">Environment to use. Used as part of the URL.</param>
		/// <param name="sellerId">A string that identifies the seller in the marketplace. This ID must be created by the marketplace.</param>
		/// <returns>OK</returns>
		public async Task ListSellerCommissionsAsync(string accountName, string environment, string sellerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "seller-register/pvt/sellers/"+ (sellerId==null? "" : System.Uri.EscapeDataString(sellerId))+"/commissions?accountName=" + (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&environment=" + (environment==null? "" : System.Uri.EscapeDataString(environment));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Upsert Seller Commissions in Bulk
		/// This endpoint is used by marketplace operators to define comissions for multiple categories.
		/// BulkUpsertSellerCommissions seller-register/pvt/sellers/{sellerId}/commissions/categories
		/// </summary>
		/// <param name="accountName">Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account.</param>
		/// <param name="environment">Environment to use. Used as part of the URL.</param>
		/// <param name="sellerId">A string that identifies the seller in the marketplace. This ID must be created by the marketplace.</param>
		/// <returns>OK</returns>
		public async Task BulkUpsertSellerCommissionsAsync(string accountName, string environment, string sellerId, BulkUpsertSellerCommissionsRequest[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "seller-register/pvt/sellers/"+ (sellerId==null? "" : System.Uri.EscapeDataString(sellerId))+"/commissions/categories?accountName=" + (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&environment=" + (environment==null? "" : System.Uri.EscapeDataString(environment));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Remove Seller Commissions by Category ID
		/// This endpoint removes a seller comission on the selected category.
		/// RemoveSellerCommissions seller-register/pvt/sellers/{sellerId}/commissions/{categoryId}
		/// </summary>
		/// <param name="accountName">Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account.</param>
		/// <param name="environment">Environment to use. Used as part of the URL.</param>
		/// <param name="sellerId">A string that identifies the seller in the marketplace. This ID must be created by the marketplace.</param>
		/// <param name="categoryId">ID of the category in which the comission was applied</param>
		/// <returns>OK</returns>
		public async Task RemoveSellerCommissionsAsync(string accountName, string environment, string sellerId, string categoryId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "seller-register/pvt/sellers/"+ (sellerId==null? "" : System.Uri.EscapeDataString(sellerId))+"/commissions/"+ (categoryId==null? "" : System.Uri.EscapeDataString(categoryId))+"?accountName=" + (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&environment=" + (environment==null? "" : System.Uri.EscapeDataString(environment));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Seller Commissions by Category ID
		/// This endpoint retrieves seller comissions applied to the selected category.
		/// RetrieveSellerCommissions seller-register/pvt/sellers/{sellerId}/commissions/{categoryId}
		/// </summary>
		/// <param name="accountName">Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account.</param>
		/// <param name="environment">Environment to use. Used as part of the URL.</param>
		/// <param name="sellerId">A string that identifies the seller in the marketplace. This ID must be created by the marketplace.</param>
		/// <param name="categoryId">ID of the category in which the comission was applied</param>
		/// <returns>OK</returns>
		public async Task RetrieveSellerCommissionsAsync(string accountName, string environment, string sellerId, string categoryId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "seller-register/pvt/sellers/"+ (sellerId==null? "" : System.Uri.EscapeDataString(sellerId))+"/commissions/"+ (categoryId==null? "" : System.Uri.EscapeDataString(categoryId))+"?accountName=" + (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&environment=" + (environment==null? "" : System.Uri.EscapeDataString(environment));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Upsert Seller Commissions by Category ID
		/// This endpoint is used by marketplace operators to define comissions for a single category, by ID.
		/// UpsertSellerCommissions seller-register/pvt/sellers/{sellerId}/commissions/{categoryId}
		/// </summary>
		/// <param name="accountName">Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account.</param>
		/// <param name="environment">Environment to use. Used as part of the URL.</param>
		/// <param name="sellerId">A string that identifies the seller in the marketplace. This ID must be created by the marketplace.</param>
		/// <param name="categoryId">ID of the category in which the comission will be applied.</param>
		/// <returns>OK</returns>
		public async Task UpsertSellerCommissionsAsync(string accountName, string environment, string sellerId, string categoryId, UpsertSellerCommissionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "seller-register/pvt/sellers/"+ (sellerId==null? "" : System.Uri.EscapeDataString(sellerId))+"/commissions/"+ (categoryId==null? "" : System.Uri.EscapeDataString(categoryId))+"?accountName=" + (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&environment=" + (environment==null? "" : System.Uri.EscapeDataString(environment));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Sales Channel Mapping Data
		/// Retrieves information about the mapping between marketplace's sales channels and a specific seller.
		/// RetrieveMapping seller-register/pvt/sellers/{sellerId}/sales-channel/mapping
		/// </summary>
		/// <param name="accountName">Name of the VTEX account that belongs to the marketplace. Used as part of the URL</param>
		/// <param name="environment">Environment to use. Used as part of the URL.</param>
		/// <param name="an">Marketplace's account name, the same one inputted on the endpoint's path.</param>
		/// <param name="sellerId">A string that identifies the seller in the marketplace. This ID must be created by the marketplace.</param>
		/// <returns>OK</returns>
		public async Task<RetrieveMappingReturn[]> RetrieveMappingAsync(string accountName, string environment, string an, string sellerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "seller-register/pvt/sellers/"+ (sellerId==null? "" : System.Uri.EscapeDataString(sellerId))+"/sales-channel/mapping?accountName=" + (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&environment=" + (environment==null? "" : System.Uri.EscapeDataString(environment))+"&an=" + (an==null? "" : System.Uri.EscapeDataString(an));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RetrieveMappingReturn[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Upsert Sales Channel Mapping
		/// This endpoint allows the marketplace to map its sales channels with a seller's [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187). The seller can have multiple sales channels associated with the same marketplace, by creating different affiliates. The mapping enables the seller to segment catalog, prices, inventory, logistics, and payments in the marketplace.
		/// UpsertMapping seller-register/pvt/sellers/{sellerId}/sales-channel/mapping
		/// </summary>
		/// <param name="accountName">Name of the VTEX account that belongs to the marketplace. Used as part of the URL.</param>
		/// <param name="environment">Environment to use. Used as part of the URL.</param>
		/// <param name="an">Marketplace's account name, the same one inputted on the endpoint's path.</param>
		/// <param name="sellerId">A string that identifies the seller in the marketplace. This ID must be created by the marketplace.</param>
		/// <returns>OK</returns>
		public async Task<UpsertMappingReturn[]> UpsertMappingAsync(string accountName, string environment, string an, string sellerId, UpsertMappingRequest[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "seller-register/pvt/sellers/"+ (sellerId==null? "" : System.Uri.EscapeDataString(sellerId))+"/sales-channel/mapping?accountName=" + (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&environment=" + (environment==null? "" : System.Uri.EscapeDataString(environment))+"&an=" + (an==null? "" : System.Uri.EscapeDataString(an));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpsertMappingReturn[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public class GetofferslistReturn
	{
		
		/// <summary>
		/// Offer's brand ID that the product belongs to, configured in the Catalog. It should be the marketplace's brand chosen for the offer to be matched with.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(2004291)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int BrandId { get; set; } = 2004291;
		
		/// <summary>
		/// Offer's Category ID that the product belongs to, configured in the Catalog. It should be the marketplace's category chosen for the offer to be matched with.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(1563)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int CategoryId { get; set; } = 1563;
		
		/// <summary>
		/// Last date the offer was modified.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("2021-05-06T21:37:24.262529")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LastModified { get; set; } = "2021-05-06T21:37:24.262529";
		
		/// <summary>
		/// A string that identifies the seller's product. This is the ID that the marketplace will use for all references to this product.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("941947")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; } = "941947";
		
		/// <summary>
		/// Name of the offer's product.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("Name of the Product - 123")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProductName { get; set; } = "Name of the Product - 123";
		
		/// <summary>
		/// Array of SKUs in the offer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Sku2[] Skus { get; set; }
	}
	
	public class UpdateSellerPatchBody
	{
		
		/// <summary>
		/// The action being performed, which is always going to be `replace`.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("replace")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; } = "replace";
		
		/// <summary>
		/// The path in which the value is being updated. It follows the standardized format `/{field}`, where `{field}` is the path's name.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("/field")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; } = "/field";
		
		/// <summary>
		/// The value that is being updated. Notice that the type will depend on the path that is being updated.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(false)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public bool Value { get; set; } = false;
	}
	
	public class RetrieveMappingReturn
	{
		
		/// <summary>
		/// Marketplace's sales channel that will be associated to the seller's [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187).
		/// </summary>
		[System.ComponentModel.DefaultValue("1")]
		[System.Runtime.Serialization.DataMember(Name="marketplaceSalesChannel")]
		public string MarketplaceSalesChannel { get; set; } = "1";
		
		/// <summary>
		/// Seller's [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) that will be associated with the marketplace's sales channel. Through the affiliate, the seller determines which of his sales channel will be used for the mapping.
		/// </summary>
		[System.ComponentModel.DefaultValue("GCB")]
		[System.Runtime.Serialization.DataMember(Name="sellerChannel")]
		public string SellerChannel { get; set; } = "GCB";
	}
	
	public class UpsertMappingReturn
	{
		
		/// <summary>
		/// Marketplace's sales channel that will be associated to the seller's [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187).
		/// </summary>
		[System.ComponentModel.DefaultValue("1")]
		[System.Runtime.Serialization.DataMember(Name="marketplaceSalesChannel")]
		public string MarketplaceSalesChannel { get; set; } = "1";
		
		/// <summary>
		/// Seller's [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) that will be associated with the marketplace's sales channel. Through the affiliate, the seller determines which of his sales channel will be used for the mapping.
		/// </summary>
		[System.ComponentModel.DefaultValue("GCB")]
		[System.Runtime.Serialization.DataMember(Name="sellerChannel")]
		public string SellerChannel { get; set; } = "GCB";
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
