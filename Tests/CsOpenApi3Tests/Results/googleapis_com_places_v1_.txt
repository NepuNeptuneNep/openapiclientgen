//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// A latitude-longitude viewport, represented as two diagonally opposite `low` and `high` points. A viewport is considered a closed region, i.e. it includes its boundary. The latitude bounds must range between -90 to 90 degrees inclusive, and the longitude bounds must range between -180 to 180 degrees inclusive. Various cases include: - If `low` = `high`, the viewport consists of that single point. - If `low.longitude` > `high.longitude`, the longitude range is inverted (the viewport crosses the 180 degree longitude line). - If `low.longitude` = -180 degrees and `high.longitude` = 180 degrees, the viewport includes all longitudes. - If `low.longitude` = 180 degrees and `high.longitude` = -180 degrees, the longitude range is empty. - If `low.latitude` > `high.latitude`, the latitude range is empty. Both `low` and `high` must be populated, and the represented box cannot be empty (as specified by the definitions above). An empty viewport will result in an error. For example, this viewport fully encloses New York City: { "low": { "latitude": 40.477398, "longitude": -74.259087 }, "high": { "latitude": 40.91618, "longitude": -73.70018 } }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleGeoTypeViewport
	{
		
		/// <summary>
		/// An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="high")]
		public GoogleTypeLatLng High { get; set; }
		
		/// <summary>
		/// An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="low")]
		public GoogleTypeLatLng Low { get; set; }
	}
	
	/// <summary>
	/// An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleTypeLatLng
	{
		
		/// <summary>
		/// The latitude in degrees. It must be in the range [-90.0, +90.0].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// The longitude in degrees. It must be in the range [-180.0, +180.0].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
	}
	
	/// <summary>
	/// Information about the author of the UGC data. Used in Photo, and Review.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleMapsPlacesV1AuthorAttribution
	{
		
		/// <summary>
		/// Name of the author of the Photo or Review.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Profile photo URI of the author of the Photo or Review.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photoUri")]
		public string PhotoUri { get; set; }
		
		/// <summary>
		/// URI of the author of the Photo or Review.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// Circle with a LatLng as center and radius.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleMapsPlacesV1Circle
	{
		
		/// <summary>
		/// An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="center")]
		public GoogleTypeLatLng Center { get; set; }
		
		/// <summary>
		/// Required. Radius measured in meters. The radius must be within [0.0, 50000.0].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="radius")]
		public System.Nullable<System.Double> Radius { get; set; }
	}
	
	/// <summary>
	/// Information about the EV Charge Station hosted in Place. Terminology follows https://afdc.energy.gov/fuels/electricity_infrastructure.html One port could charge one car at a time. One port has one or more connectors. One station has one or more ports.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleMapsPlacesV1EVChargeOptions
	{
		
		/// <summary>
		/// A list of EV charging connector aggregations that contain connectors of the same type and same charge rate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorAggregation")]
		public GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation[] ConnectorAggregation { get; set; }
		
		/// <summary>
		/// Number of connectors at this station. However, because some ports can have multiple connectors but only be able to charge one car at a time (e.g.) the number of connectors may be greater than the total number of cars which can charge simultaneously.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorCount")]
		public System.Nullable<System.Int32> ConnectorCount { get; set; }
	}
	
	/// <summary>
	/// EV charging information grouped by [type, max_charge_rate_kw]. Shows EV charge aggregation of connectors that have the same type and max charge rate in kw.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation
	{
		
		/// <summary>
		/// The timestamp when the connector availability information in this aggregation was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availabilityLastUpdateTime")]
		public string AvailabilityLastUpdateTime { get; set; }
		
		/// <summary>
		/// Number of connectors in this aggregation that are currently available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableCount")]
		public System.Nullable<System.Int32> AvailableCount { get; set; }
		
		/// <summary>
		/// Number of connectors in this aggregation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// The static max charging rate in kw of each connector in the aggregation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxChargeRateKw")]
		public System.Nullable<System.Double> MaxChargeRateKw { get; set; }
		
		/// <summary>
		/// Number of connectors in this aggregation that are currently out of service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outOfServiceCount")]
		public System.Nullable<System.Int32> OutOfServiceCount { get; set; }
		
		/// <summary>
		/// The connector type of this aggregation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<GoogleMapsPlacesV1EVChargeOptionsConnectorAggregationType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleMapsPlacesV1EVChargeOptionsConnectorAggregationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EV_CONNECTOR_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EV_CONNECTOR_TYPE_OTHER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EV_CONNECTOR_TYPE_J1772 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EV_CONNECTOR_TYPE_TYPE_2 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EV_CONNECTOR_TYPE_CHADEMO = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EV_CONNECTOR_TYPE_CCS_COMBO_1 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EV_CONNECTOR_TYPE_CCS_COMBO_2 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EV_CONNECTOR_TYPE_TESLA = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EV_CONNECTOR_TYPE_UNSPECIFIED_GB_T = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EV_CONNECTOR_TYPE_UNSPECIFIED_WALL_OUTLET = 9,
	}
	
	/// <summary>
	/// The most recent information about fuel options in a gas station. This information is updated regularly.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleMapsPlacesV1FuelOptions
	{
		
		/// <summary>
		/// The last known fuel price for each type of fuel this station has. There is one entry per fuel type this station has. Order is not important.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fuelPrices")]
		public GoogleMapsPlacesV1FuelOptionsFuelPrice[] FuelPrices { get; set; }
	}
	
	/// <summary>
	/// Fuel price information for a given type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleMapsPlacesV1FuelOptionsFuelPrice
	{
		
		/// <summary>
		/// Represents an amount of money with its currency type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public GoogleTypeMoney Price { get; set; }
		
		/// <summary>
		/// The type of fuel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<GoogleMapsPlacesV1FuelOptionsFuelPriceType> Type { get; set; }
		
		/// <summary>
		/// The time the fuel price was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Represents an amount of money with its currency type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleTypeMoney
	{
		
		/// <summary>
		/// The three-letter currency code defined in ISO 4217.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nanos")]
		public System.Nullable<System.Int32> Nanos { get; set; }
		
		/// <summary>
		/// The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleMapsPlacesV1FuelOptionsFuelPriceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FUEL_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIESEL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGULAR_UNLEADED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIDGRADE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREMIUM = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SP91 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SP91_E10 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SP92 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SP95 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SP95_E10 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SP98 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SP99 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SP100 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LPG = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		E80 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		E85 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		METHANE = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIO_DIESEL = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRUCK_DIESEL = 18,
	}
	
	/// <summary>
	/// Information about a photo of a place.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleMapsPlacesV1Photo
	{
		
		/// <summary>
		/// This photo's authors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorAttributions")]
		public GoogleMapsPlacesV1AuthorAttribution[] AuthorAttributions { get; set; }
		
		/// <summary>
		/// The maximum available height, in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heightPx")]
		public System.Nullable<System.Int32> HeightPx { get; set; }
		
		/// <summary>
		/// Identifier. A reference representing this place photo which may be used to look up this place photo again (also called the API "resource" name: `places/{place_id}/photos/{photo}`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The maximum available width, in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="widthPx")]
		public System.Nullable<System.Int32> WidthPx { get; set; }
	}
	
	/// <summary>
	/// A photo media from Places API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleMapsPlacesV1PhotoMedia
	{
		
		/// <summary>
		/// The resource name of a photo media in the format: `places/{place_id}/photos/{photo_reference}/media`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A short-lived uri that can be used to render the photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photoUri")]
		public string PhotoUri { get; set; }
	}
	
	/// <summary>
	/// All the information representing a Place.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleMapsPlacesV1Place
	{
		
		/// <summary>
		/// Information about the accessibility options a place offers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessibilityOptions")]
		public GoogleMapsPlacesV1PlaceAccessibilityOptions AccessibilityOptions { get; set; }
		
		/// <summary>
		/// Repeated components for each locality level. Note the following facts about the address_components[] array: - The array of address components may contain more components than the formatted_address. - The array does not necessarily include all the political entities that contain an address, apart from those included in the formatted_address. To retrieve all the political entities that contain a specific address, you should use reverse geocoding, passing the latitude/longitude of the address as a parameter to the request. - The format of the response is not guaranteed to remain the same between requests. In particular, the number of address_components varies based on the address requested and can change over time for the same address. A component can change position in the array. The type of the component can change. A particular component may be missing in a later response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressComponents")]
		public GoogleMapsPlacesV1PlaceAddressComponent[] AddressComponents { get; set; }
		
		/// <summary>
		/// The place's address in adr microformat: http://microformats.org/wiki/adr.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adrFormatAddress")]
		public string AdrFormatAddress { get; set; }
		
		/// <summary>
		/// Place allows dogs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowsDogs")]
		public System.Nullable<System.Boolean> AllowsDogs { get; set; }
		
		/// <summary>
		/// A set of data provider that must be shown with this result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributions")]
		public GoogleMapsPlacesV1PlaceAttribution[] Attributions { get; set; }
		
		/// <summary>
		/// The business status for the place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="businessStatus")]
		public System.Nullable<GoogleMapsPlacesV1PlaceBusinessStatus> BusinessStatus { get; set; }
		
		/// <summary>
		/// Specifies if the business supports curbside pickup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="curbsidePickup")]
		public System.Nullable<System.Boolean> CurbsidePickup { get; set; }
		
		/// <summary>
		/// Information about business hour of the place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentOpeningHours")]
		public GoogleMapsPlacesV1PlaceOpeningHours CurrentOpeningHours { get; set; }
		
		/// <summary>
		/// Contains an array of entries for the next seven days including information about secondary hours of a business. Secondary hours are different from a business's main hours. For example, a restaurant can specify drive through hours or delivery hours as its secondary hours. This field populates the type subfield, which draws from a predefined list of opening hours types (such as DRIVE_THROUGH, PICKUP, or TAKEOUT) based on the types of the place. This field includes the special_days subfield of all hours, set for dates that have exceptional hours.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentSecondaryOpeningHours")]
		public GoogleMapsPlacesV1PlaceOpeningHours[] CurrentSecondaryOpeningHours { get; set; }
		
		/// <summary>
		/// Specifies if the business supports delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delivery")]
		public System.Nullable<System.Boolean> Delivery { get; set; }
		
		/// <summary>
		/// Specifies if the business supports indoor or outdoor seating options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dineIn")]
		public System.Nullable<System.Boolean> DineIn { get; set; }
		
		/// <summary>
		/// Localized variant of a text in a particular language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public GoogleTypeLocalizedText DisplayName { get; set; }
		
		/// <summary>
		/// Localized variant of a text in a particular language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="editorialSummary")]
		public GoogleTypeLocalizedText EditorialSummary { get; set; }
		
		/// <summary>
		/// Information about the EV Charge Station hosted in Place. Terminology follows https://afdc.energy.gov/fuels/electricity_infrastructure.html One port could charge one car at a time. One port has one or more connectors. One station has one or more ports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evChargeOptions")]
		public GoogleMapsPlacesV1EVChargeOptions EvChargeOptions { get; set; }
		
		/// <summary>
		/// A full, human-readable address for this place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formattedAddress")]
		public string FormattedAddress { get; set; }
		
		/// <summary>
		/// The most recent information about fuel options in a gas station. This information is updated regularly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fuelOptions")]
		public GoogleMapsPlacesV1FuelOptions FuelOptions { get; set; }
		
		/// <summary>
		/// Place is good for children.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="goodForChildren")]
		public System.Nullable<System.Boolean> GoodForChildren { get; set; }
		
		/// <summary>
		/// Place accommodates groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="goodForGroups")]
		public System.Nullable<System.Boolean> GoodForGroups { get; set; }
		
		/// <summary>
		/// Place is suitable for watching sports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="goodForWatchingSports")]
		public System.Nullable<System.Boolean> GoodForWatchingSports { get; set; }
		
		/// <summary>
		/// A URL providing more information about this place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleMapsUri")]
		public string GoogleMapsUri { get; set; }
		
		/// <summary>
		/// Background color for icon_mask in hex format, e.g. #909CE1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconBackgroundColor")]
		public string IconBackgroundColor { get; set; }
		
		/// <summary>
		/// A truncated URL to an icon mask. User can access different icon type by appending type suffix to the end (eg, ".svg" or ".png").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconMaskBaseUri")]
		public string IconMaskBaseUri { get; set; }
		
		/// <summary>
		/// The unique identifier of a place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A human-readable phone number for the place, in international format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internationalPhoneNumber")]
		public string InternationalPhoneNumber { get; set; }
		
		/// <summary>
		/// Place provides live music.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="liveMusic")]
		public System.Nullable<System.Boolean> LiveMusic { get; set; }
		
		/// <summary>
		/// An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public GoogleTypeLatLng Location { get; set; }
		
		/// <summary>
		/// Place has a children's menu.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="menuForChildren")]
		public System.Nullable<System.Boolean> MenuForChildren { get; set; }
		
		/// <summary>
		/// An ID representing this place which may be used to look up this place again (a.k.a. the API "resource" name: places/place_id).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A human-readable phone number for the place, in national format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nationalPhoneNumber")]
		public string NationalPhoneNumber { get; set; }
		
		/// <summary>
		/// Place provides outdoor seating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outdoorSeating")]
		public System.Nullable<System.Boolean> OutdoorSeating { get; set; }
		
		/// <summary>
		/// Information about parking options for the place. A parking lot could support more than one option at the same time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parkingOptions")]
		public GoogleMapsPlacesV1PlaceParkingOptions ParkingOptions { get; set; }
		
		/// <summary>
		/// Payment options the place accepts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentOptions")]
		public GoogleMapsPlacesV1PlacePaymentOptions PaymentOptions { get; set; }
		
		/// <summary>
		/// Information (including references) about photos of this place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photos")]
		public GoogleMapsPlacesV1Photo[] Photos { get; set; }
		
		/// <summary>
		/// Plus code (http://plus.codes) is a location reference with two formats: global code defining a 14mx14m (1/8000th of a degree) or smaller rectangle, and compound code, replacing the prefix with a reference location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plusCode")]
		public GoogleMapsPlacesV1PlacePlusCode PlusCode { get; set; }
		
		/// <summary>
		/// Price level of the place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceLevel")]
		public System.Nullable<GoogleMapsPlacesV1PlacePriceLevel> PriceLevel { get; set; }
		
		/// <summary>
		/// The primary type of the given result. This type must one of the Places API supported types. For example, "restaurant", "cafe", "airport", etc. A place can only have a single primary type. For the complete list of possible values, see Table A and Table B at https://developers.google.com/maps/documentation/places/web-service/place-types
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryType")]
		public string PrimaryType { get; set; }
		
		/// <summary>
		/// Localized variant of a text in a particular language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryTypeDisplayName")]
		public GoogleTypeLocalizedText PrimaryTypeDisplayName { get; set; }
		
		/// <summary>
		/// A rating between 1.0 and 5.0, based on user reviews of this place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rating")]
		public System.Nullable<System.Double> Rating { get; set; }
		
		/// <summary>
		/// Information about business hour of the place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regularOpeningHours")]
		public GoogleMapsPlacesV1PlaceOpeningHours RegularOpeningHours { get; set; }
		
		/// <summary>
		/// Contains an array of entries for information about regular secondary hours of a business. Secondary hours are different from a business's main hours. For example, a restaurant can specify drive through hours or delivery hours as its secondary hours. This field populates the type subfield, which draws from a predefined list of opening hours types (such as DRIVE_THROUGH, PICKUP, or TAKEOUT) based on the types of the place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regularSecondaryOpeningHours")]
		public GoogleMapsPlacesV1PlaceOpeningHours[] RegularSecondaryOpeningHours { get; set; }
		
		/// <summary>
		/// Specifies if the place supports reservations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservable")]
		public System.Nullable<System.Boolean> Reservable { get; set; }
		
		/// <summary>
		/// Place has restroom.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restroom")]
		public System.Nullable<System.Boolean> Restroom { get; set; }
		
		/// <summary>
		/// List of reviews about this place, sorted by relevance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviews")]
		public GoogleMapsPlacesV1Review[] Reviews { get; set; }
		
		/// <summary>
		/// Specifies if the place serves beer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servesBeer")]
		public System.Nullable<System.Boolean> ServesBeer { get; set; }
		
		/// <summary>
		/// Specifies if the place serves breakfast.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servesBreakfast")]
		public System.Nullable<System.Boolean> ServesBreakfast { get; set; }
		
		/// <summary>
		/// Specifies if the place serves brunch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servesBrunch")]
		public System.Nullable<System.Boolean> ServesBrunch { get; set; }
		
		/// <summary>
		/// Place serves cocktails.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servesCocktails")]
		public System.Nullable<System.Boolean> ServesCocktails { get; set; }
		
		/// <summary>
		/// Place serves coffee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servesCoffee")]
		public System.Nullable<System.Boolean> ServesCoffee { get; set; }
		
		/// <summary>
		/// Place serves dessert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servesDessert")]
		public System.Nullable<System.Boolean> ServesDessert { get; set; }
		
		/// <summary>
		/// Specifies if the place serves dinner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servesDinner")]
		public System.Nullable<System.Boolean> ServesDinner { get; set; }
		
		/// <summary>
		/// Specifies if the place serves lunch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servesLunch")]
		public System.Nullable<System.Boolean> ServesLunch { get; set; }
		
		/// <summary>
		/// Specifies if the place serves vegetarian food.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servesVegetarianFood")]
		public System.Nullable<System.Boolean> ServesVegetarianFood { get; set; }
		
		/// <summary>
		/// Specifies if the place serves wine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servesWine")]
		public System.Nullable<System.Boolean> ServesWine { get; set; }
		
		/// <summary>
		/// A short, human-readable address for this place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortFormattedAddress")]
		public string ShortFormattedAddress { get; set; }
		
		/// <summary>
		/// A list of sub destinations related to the place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subDestinations")]
		public GoogleMapsPlacesV1PlaceSubDestination[] SubDestinations { get; set; }
		
		/// <summary>
		/// Specifies if the business supports takeout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="takeout")]
		public System.Nullable<System.Boolean> Takeout { get; set; }
		
		/// <summary>
		/// A set of type tags for this result. For example, "political" and "locality". For the complete list of possible values, see Table A and Table B at https://developers.google.com/maps/documentation/places/web-service/place-types
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="types")]
		public string[] Types { get; set; }
		
		/// <summary>
		/// The total number of reviews (with or without text) for this place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userRatingCount")]
		public System.Nullable<System.Int32> UserRatingCount { get; set; }
		
		/// <summary>
		/// Number of minutes this place's timezone is currently offset from UTC. This is expressed in minutes to support timezones that are offset by fractions of an hour, e.g. X hours and 15 minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utcOffsetMinutes")]
		public System.Nullable<System.Int32> UtcOffsetMinutes { get; set; }
		
		/// <summary>
		/// A latitude-longitude viewport, represented as two diagonally opposite `low` and `high` points. A viewport is considered a closed region, i.e. it includes its boundary. The latitude bounds must range between -90 to 90 degrees inclusive, and the longitude bounds must range between -180 to 180 degrees inclusive. Various cases include: - If `low` = `high`, the viewport consists of that single point. - If `low.longitude` > `high.longitude`, the longitude range is inverted (the viewport crosses the 180 degree longitude line). - If `low.longitude` = -180 degrees and `high.longitude` = 180 degrees, the viewport includes all longitudes. - If `low.longitude` = 180 degrees and `high.longitude` = -180 degrees, the longitude range is empty. - If `low.latitude` > `high.latitude`, the latitude range is empty. Both `low` and `high` must be populated, and the represented box cannot be empty (as specified by the definitions above). An empty viewport will result in an error. For example, this viewport fully encloses New York City: { "low": { "latitude": 40.477398, "longitude": -74.259087 }, "high": { "latitude": 40.91618, "longitude": -73.70018 } }
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewport")]
		public GoogleGeoTypeViewport Viewport { get; set; }
		
		/// <summary>
		/// The authoritative website for this place, e.g. a business' homepage. Note that for places that are part of a chain (e.g. an IKEA store), this will usually be the website for the individual store, not the overall chain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="websiteUri")]
		public string WebsiteUri { get; set; }
	}
	
	/// <summary>
	/// Information about the accessibility options a place offers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleMapsPlacesV1PlaceAccessibilityOptions
	{
		
		/// <summary>
		/// Places has wheelchair accessible entrance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wheelchairAccessibleEntrance")]
		public System.Nullable<System.Boolean> WheelchairAccessibleEntrance { get; set; }
		
		/// <summary>
		/// Place offers wheelchair accessible parking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wheelchairAccessibleParking")]
		public System.Nullable<System.Boolean> WheelchairAccessibleParking { get; set; }
		
		/// <summary>
		/// Place has wheelchair accessible restroom.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wheelchairAccessibleRestroom")]
		public System.Nullable<System.Boolean> WheelchairAccessibleRestroom { get; set; }
		
		/// <summary>
		/// Place has wheelchair accessible seating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wheelchairAccessibleSeating")]
		public System.Nullable<System.Boolean> WheelchairAccessibleSeating { get; set; }
	}
	
	/// <summary>
	/// The structured components that form the formatted address, if this information is available.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleMapsPlacesV1PlaceAddressComponent
	{
		
		/// <summary>
		/// The language used to format this components, in CLDR notation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// The full text description or name of the address component. For example, an address component for the country Australia may have a long_name of "Australia".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longText")]
		public string LongText { get; set; }
		
		/// <summary>
		/// An abbreviated textual name for the address component, if available. For example, an address component for the country of Australia may have a short_name of "AU".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortText")]
		public string ShortText { get; set; }
		
		/// <summary>
		/// An array indicating the type(s) of the address component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="types")]
		public string[] Types { get; set; }
	}
	
	/// <summary>
	/// Information about data providers of this place.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleMapsPlacesV1PlaceAttribution
	{
		
		/// <summary>
		/// Name of the Place's data provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// URI to the Place's data provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerUri")]
		public string ProviderUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleMapsPlacesV1PlaceBusinessStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUSINESS_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATIONAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOSED_TEMPORARILY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOSED_PERMANENTLY = 3,
	}
	
	/// <summary>
	/// Information about business hour of the place.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleMapsPlacesV1PlaceOpeningHours
	{
		
		/// <summary>
		/// Is this place open right now? Always present unless we lack time-of-day or timezone data for these opening hours.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openNow")]
		public System.Nullable<System.Boolean> OpenNow { get; set; }
		
		/// <summary>
		/// The periods that this place is open during the week. The periods are in chronological order, starting with Sunday in the place-local timezone. An empty (but not absent) value indicates a place that is never open, e.g. because it is closed temporarily for renovations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="periods")]
		public GoogleMapsPlacesV1PlaceOpeningHoursPeriod[] Periods { get; set; }
		
		/// <summary>
		/// A type string used to identify the type of secondary hours.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryHoursType")]
		public System.Nullable<GoogleMapsPlacesV1PlaceOpeningHoursSecondaryHoursType> SecondaryHoursType { get; set; }
		
		/// <summary>
		/// Structured information for special days that fall within the period that the returned opening hours cover. Special days are days that could impact the business hours of a place, e.g. Christmas day. Set for current_opening_hours and current_secondary_opening_hours if there are exceptional hours.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="specialDays")]
		public GoogleMapsPlacesV1PlaceOpeningHoursSpecialDay[] SpecialDays { get; set; }
		
		/// <summary>
		/// Localized strings describing the opening hours of this place, one string for each day of the week. Will be empty if the hours are unknown or could not be converted to localized text. Example: "Sun: 18:00–06:00"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weekdayDescriptions")]
		public string[] WeekdayDescriptions { get; set; }
	}
	
	/// <summary>
	/// A period the place remains in open_now status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleMapsPlacesV1PlaceOpeningHoursPeriod
	{
		
		/// <summary>
		/// Status changing points.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="close")]
		public GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint Close { get; set; }
		
		/// <summary>
		/// Status changing points.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="open")]
		public GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint Open { get; set; }
	}
	
	/// <summary>
	/// Status changing points.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint
	{
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public GoogleTypeDate Date { get; set; }
		
		/// <summary>
		/// A day of the week, as an integer in the range 0-6. 0 is Sunday, 1 is Monday, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		/// <summary>
		/// The hour in 2 digits. Ranges from 00 to 23.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hour")]
		public System.Nullable<System.Int32> Hour { get; set; }
		
		/// <summary>
		/// The minute in 2 digits. Ranges from 00 to 59.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minute")]
		public System.Nullable<System.Int32> Minute { get; set; }
		
		/// <summary>
		/// Whether or not this endpoint was truncated. Truncation occurs when the real hours are outside the times we are willing to return hours between, so we truncate the hours back to these boundaries. This ensures that at most 24 * 7 hours from midnight of the day of the request are returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="truncated")]
		public System.Nullable<System.Boolean> Truncated { get; set; }
	}
	
	/// <summary>
	/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleTypeDate
	{
		
		/// <summary>
		/// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		/// <summary>
		/// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		/// <summary>
		/// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleMapsPlacesV1PlaceOpeningHoursSecondaryHoursType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDARY_HOURS_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRIVE_THROUGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HAPPY_HOUR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELIVERY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAKEOUT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KITCHEN = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BREAKFAST = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LUNCH = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DINNER = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRUNCH = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PICKUP = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCESS = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SENIOR_HOURS = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONLINE_SERVICE_HOURS = 13,
	}
	
	/// <summary>
	/// Structured information for special days that fall within the period that the returned opening hours cover. Special days are days that could impact the business hours of a place, e.g. Christmas day.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleMapsPlacesV1PlaceOpeningHoursSpecialDay
	{
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public GoogleTypeDate Date { get; set; }
	}
	
	/// <summary>
	/// Localized variant of a text in a particular language.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleTypeLocalizedText
	{
		
		/// <summary>
		/// The text's BCP-47 language code, such as "en-US" or "sr-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Localized string in the language corresponding to language_code below.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	/// <summary>
	/// Information about parking options for the place. A parking lot could support more than one option at the same time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleMapsPlacesV1PlaceParkingOptions
	{
		
		/// <summary>
		/// Place offers free garage parking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeGarageParking")]
		public System.Nullable<System.Boolean> FreeGarageParking { get; set; }
		
		/// <summary>
		/// Place offers free parking lots.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeParkingLot")]
		public System.Nullable<System.Boolean> FreeParkingLot { get; set; }
		
		/// <summary>
		/// Place offers free street parking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeStreetParking")]
		public System.Nullable<System.Boolean> FreeStreetParking { get; set; }
		
		/// <summary>
		/// Place offers paid garage parking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paidGarageParking")]
		public System.Nullable<System.Boolean> PaidGarageParking { get; set; }
		
		/// <summary>
		/// Place offers paid parking lots.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paidParkingLot")]
		public System.Nullable<System.Boolean> PaidParkingLot { get; set; }
		
		/// <summary>
		/// Place offers paid street parking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paidStreetParking")]
		public System.Nullable<System.Boolean> PaidStreetParking { get; set; }
		
		/// <summary>
		/// Place offers valet parking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valetParking")]
		public System.Nullable<System.Boolean> ValetParking { get; set; }
	}
	
	/// <summary>
	/// Payment options the place accepts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleMapsPlacesV1PlacePaymentOptions
	{
		
		/// <summary>
		/// Place accepts cash only as payment. Places with this attribute may still accept other payment methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acceptsCashOnly")]
		public System.Nullable<System.Boolean> AcceptsCashOnly { get; set; }
		
		/// <summary>
		/// Place accepts credit cards as payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acceptsCreditCards")]
		public System.Nullable<System.Boolean> AcceptsCreditCards { get; set; }
		
		/// <summary>
		/// Place accepts debit cards as payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acceptsDebitCards")]
		public System.Nullable<System.Boolean> AcceptsDebitCards { get; set; }
		
		/// <summary>
		/// Place accepts NFC payments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acceptsNfc")]
		public System.Nullable<System.Boolean> AcceptsNfc { get; set; }
	}
	
	/// <summary>
	/// Plus code (http://plus.codes) is a location reference with two formats: global code defining a 14mx14m (1/8000th of a degree) or smaller rectangle, and compound code, replacing the prefix with a reference location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleMapsPlacesV1PlacePlusCode
	{
		
		/// <summary>
		/// Place's compound code, such as "33GV+HQ, Ramberg, Norway", containing the suffix of the global code and replacing the prefix with a formatted name of a reference entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compoundCode")]
		public string CompoundCode { get; set; }
		
		/// <summary>
		/// Place's global (full) code, such as "9FWM33GV+HQ", representing an 1/8000 by 1/8000 degree area (~14 by 14 meters).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="globalCode")]
		public string GlobalCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleMapsPlacesV1PlacePriceLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRICE_LEVEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRICE_LEVEL_FREE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRICE_LEVEL_INEXPENSIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRICE_LEVEL_MODERATE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRICE_LEVEL_EXPENSIVE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRICE_LEVEL_VERY_EXPENSIVE = 5,
	}
	
	/// <summary>
	/// Information about a review of a place.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleMapsPlacesV1Review
	{
		
		/// <summary>
		/// Information about the author of the UGC data. Used in Photo, and Review.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorAttribution")]
		public GoogleMapsPlacesV1AuthorAttribution AuthorAttribution { get; set; }
		
		/// <summary>
		/// A reference representing this place review which may be used to look up this place review again (also called the API "resource" name: `places/{place_id}/reviews/{review}`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Localized variant of a text in a particular language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalText")]
		public GoogleTypeLocalizedText OriginalText { get; set; }
		
		/// <summary>
		/// Timestamp for the review.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishTime")]
		public string PublishTime { get; set; }
		
		/// <summary>
		/// A number between 1.0 and 5.0, also called the number of stars.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rating")]
		public System.Nullable<System.Double> Rating { get; set; }
		
		/// <summary>
		/// A string of formatted recent time, expressing the review time relative to the current time in a form appropriate for the language and country.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relativePublishTimeDescription")]
		public string RelativePublishTimeDescription { get; set; }
		
		/// <summary>
		/// Localized variant of a text in a particular language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public GoogleTypeLocalizedText Text { get; set; }
	}
	
	/// <summary>
	/// Place resource name and id of sub destinations that relate to the place. For example, different terminals are different destinations of an airport.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleMapsPlacesV1PlaceSubDestination
	{
		
		/// <summary>
		/// The place id of the sub destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The resource name of the sub destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Request proto for Search Nearby. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleMapsPlacesV1SearchNearbyRequest
	{
		
		/// <summary>
		/// Excluded primary Place type (e.g. "restaurant" or "gas_station") from https://developers.google.com/maps/documentation/places/web-service/place-types. Up to 50 types from [Table A](https://developers.google.com/maps/documentation/places/web-service/place-types#table-a) may be specified. If there are any conflicting primary types, i.e. a type appears in both included_primary_types and excluded_primary_types, an INVALID_ARGUMENT error is returned. If a Place type is specified with multiple type restrictions, only places that satisfy all of the restrictions are returned. For example, if we have {included_types = ["restaurant"], excluded_primary_types = ["restaurant"]}, the returned places provide "restaurant" related services but do not operate primarily as "restaurants".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedPrimaryTypes")]
		public string[] ExcludedPrimaryTypes { get; set; }
		
		/// <summary>
		/// Excluded Place type (eg, "restaurant" or "gas_station") from https://developers.google.com/maps/documentation/places/web-service/place-types. Up to 50 types from [Table A](https://developers.google.com/maps/documentation/places/web-service/place-types#table-a) may be specified. If the client provides both included_types (e.g. restaurant) and excluded_types (e.g. cafe), then the response should include places that are restaurant but not cafe. The response includes places that match at least one of the included_types and none of the excluded_types. If there are any conflicting types, i.e. a type appears in both included_types and excluded_types, an INVALID_ARGUMENT error is returned. If a Place type is specified with multiple type restrictions, only places that satisfy all of the restrictions are returned. For example, if we have {included_types = ["restaurant"], excluded_primary_types = ["restaurant"]}, the returned places provide "restaurant" related services but do not operate primarily as "restaurants".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedTypes")]
		public string[] ExcludedTypes { get; set; }
		
		/// <summary>
		/// Included primary Place type (e.g. "restaurant" or "gas_station") from https://developers.google.com/maps/documentation/places/web-service/place-types. A place can only have a single primary type from the supported types table associated with it. Up to 50 types from [Table A](https://developers.google.com/maps/documentation/places/web-service/place-types#table-a) may be specified. If there are any conflicting primary types, i.e. a type appears in both included_primary_types and excluded_primary_types, an INVALID_ARGUMENT error is returned. If a Place type is specified with multiple type restrictions, only places that satisfy all of the restrictions are returned. For example, if we have {included_types = ["restaurant"], excluded_primary_types = ["restaurant"]}, the returned places provide "restaurant" related services but do not operate primarily as "restaurants".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedPrimaryTypes")]
		public string[] IncludedPrimaryTypes { get; set; }
		
		/// <summary>
		/// Included Place type (eg, "restaurant" or "gas_station") from https://developers.google.com/maps/documentation/places/web-service/place-types. Up to 50 types from [Table A](https://developers.google.com/maps/documentation/places/web-service/place-types#table-a) may be specified. If there are any conflicting types, i.e. a type appears in both included_types and excluded_types, an INVALID_ARGUMENT error is returned. If a Place type is specified with multiple type restrictions, only places that satisfy all of the restrictions are returned. For example, if we have {included_types = ["restaurant"], excluded_primary_types = ["restaurant"]}, the returned places provide "restaurant" related services but do not operate primarily as "restaurants".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedTypes")]
		public string[] IncludedTypes { get; set; }
		
		/// <summary>
		/// Place details will be displayed with the preferred language if available. If the language code is unspecified or unrecognized, place details of any language may be returned, with a preference for English if such details exist. Current list of supported languages: https://developers.google.com/maps/faq#languagesupport.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// The region to search.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationRestriction")]
		public GoogleMapsPlacesV1SearchNearbyRequestLocationRestriction LocationRestriction { get; set; }
		
		/// <summary>
		/// Maximum number of results to return. It must be between 1 and 20 (default), inclusively. If the number is unset, it falls back to the upper limit. If the number is set to negative or exceeds the upper limit, an INVALID_ARGUMENT error is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResultCount")]
		public System.Nullable<System.Int32> MaxResultCount { get; set; }
		
		/// <summary>
		/// How results will be ranked in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rankPreference")]
		public System.Nullable<GoogleMapsPlacesV1SearchNearbyRequestRankPreference> RankPreference { get; set; }
		
		/// <summary>
		/// The Unicode country/region code (CLDR) of the location where the request is coming from. This parameter is used to display the place details, like region-specific place name, if available. The parameter can affect results based on applicable law. For more information, see https://www.unicode.org/cldr/charts/latest/supplemental/territory_language_information.html. Note that 3-digit region codes are not currently supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionCode")]
		public string RegionCode { get; set; }
	}
	
	/// <summary>
	/// The region to search.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleMapsPlacesV1SearchNearbyRequestLocationRestriction
	{
		
		/// <summary>
		/// Circle with a LatLng as center and radius.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="circle")]
		public GoogleMapsPlacesV1Circle Circle { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleMapsPlacesV1SearchNearbyRequestRankPreference
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RANK_PREFERENCE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISTANCE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POPULARITY = 2,
	}
	
	/// <summary>
	/// Response proto for Search Nearby. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleMapsPlacesV1SearchNearbyResponse
	{
		
		/// <summary>
		/// A list of places that meets user's requirements like places types, number of places and specific location restriction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="places")]
		public GoogleMapsPlacesV1Place[] Places { get; set; }
	}
	
	/// <summary>
	/// Request proto for SearchText. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleMapsPlacesV1SearchTextRequest
	{
		
		/// <summary>
		/// The requested place type. Full list of types supported: https://developers.google.com/maps/documentation/places/web-service/place-types. Only support one included type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedType")]
		public string IncludedType { get; set; }
		
		/// <summary>
		/// Place details will be displayed with the preferred language if available. If the language code is unspecified or unrecognized, place details of any language may be returned, with a preference for English if such details exist. Current list of supported languages: https://developers.google.com/maps/faq#languagesupport.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// The region to search. This location serves as a bias which means results around given location might be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationBias")]
		public GoogleMapsPlacesV1SearchTextRequestLocationBias LocationBias { get; set; }
		
		/// <summary>
		/// The region to search. This location serves as a restriction which means results outside given location will not be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationRestriction")]
		public GoogleMapsPlacesV1SearchTextRequestLocationRestriction LocationRestriction { get; set; }
		
		/// <summary>
		/// Maximum number of results to return. It must be between 1 and 20, inclusively. The default is 20. If the number is unset, it falls back to the upper limit. If the number is set to negative or exceeds the upper limit, an INVALID_ARGUMENT error is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResultCount")]
		public System.Nullable<System.Int32> MaxResultCount { get; set; }
		
		/// <summary>
		/// Filter out results whose average user rating is strictly less than this limit. A valid value must be a float between 0 and 5 (inclusively) at a 0.5 cadence i.e. [0, 0.5, 1.0, ... , 5.0] inclusively. The input rating will round up to the nearest 0.5(ceiling). For instance, a rating of 0.6 will eliminate all results with a less than 1.0 rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minRating")]
		public System.Nullable<System.Double> MinRating { get; set; }
		
		/// <summary>
		/// Used to restrict the search to places that are currently open. The default is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openNow")]
		public System.Nullable<System.Boolean> OpenNow { get; set; }
		
		/// <summary>
		/// Used to restrict the search to places that are marked as certain price levels. Users can choose any combinations of price levels. Default to select all price levels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceLevels")]
		public GoogleMapsPlacesV1PlacePriceLevel[] PriceLevels { get; set; }
		
		/// <summary>
		/// How results will be ranked in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rankPreference")]
		public System.Nullable<GoogleMapsPlacesV1SearchTextRequestRankPreference> RankPreference { get; set; }
		
		/// <summary>
		/// The Unicode country/region code (CLDR) of the location where the request is coming from. This parameter is used to display the place details, like region-specific place name, if available. The parameter can affect results based on applicable law. For more information, see https://www.unicode.org/cldr/charts/latest/supplemental/territory_language_information.html. Note that 3-digit region codes are not currently supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionCode")]
		public string RegionCode { get; set; }
		
		/// <summary>
		/// Used to set strict type filtering for included_type. If set to true, only results of the same type will be returned. Default to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="strictTypeFiltering")]
		public System.Nullable<System.Boolean> StrictTypeFiltering { get; set; }
		
		/// <summary>
		/// Required. The text query for textual search.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textQuery")]
		public string TextQuery { get; set; }
	}
	
	/// <summary>
	/// The region to search. This location serves as a bias which means results around given location might be returned.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleMapsPlacesV1SearchTextRequestLocationBias
	{
		
		/// <summary>
		/// Circle with a LatLng as center and radius.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="circle")]
		public GoogleMapsPlacesV1Circle Circle { get; set; }
		
		/// <summary>
		/// A latitude-longitude viewport, represented as two diagonally opposite `low` and `high` points. A viewport is considered a closed region, i.e. it includes its boundary. The latitude bounds must range between -90 to 90 degrees inclusive, and the longitude bounds must range between -180 to 180 degrees inclusive. Various cases include: - If `low` = `high`, the viewport consists of that single point. - If `low.longitude` > `high.longitude`, the longitude range is inverted (the viewport crosses the 180 degree longitude line). - If `low.longitude` = -180 degrees and `high.longitude` = 180 degrees, the viewport includes all longitudes. - If `low.longitude` = 180 degrees and `high.longitude` = -180 degrees, the longitude range is empty. - If `low.latitude` > `high.latitude`, the latitude range is empty. Both `low` and `high` must be populated, and the represented box cannot be empty (as specified by the definitions above). An empty viewport will result in an error. For example, this viewport fully encloses New York City: { "low": { "latitude": 40.477398, "longitude": -74.259087 }, "high": { "latitude": 40.91618, "longitude": -73.70018 } }
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rectangle")]
		public GoogleGeoTypeViewport Rectangle { get; set; }
	}
	
	/// <summary>
	/// The region to search. This location serves as a restriction which means results outside given location will not be returned.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleMapsPlacesV1SearchTextRequestLocationRestriction
	{
		
		/// <summary>
		/// A latitude-longitude viewport, represented as two diagonally opposite `low` and `high` points. A viewport is considered a closed region, i.e. it includes its boundary. The latitude bounds must range between -90 to 90 degrees inclusive, and the longitude bounds must range between -180 to 180 degrees inclusive. Various cases include: - If `low` = `high`, the viewport consists of that single point. - If `low.longitude` > `high.longitude`, the longitude range is inverted (the viewport crosses the 180 degree longitude line). - If `low.longitude` = -180 degrees and `high.longitude` = 180 degrees, the viewport includes all longitudes. - If `low.longitude` = 180 degrees and `high.longitude` = -180 degrees, the longitude range is empty. - If `low.latitude` > `high.latitude`, the latitude range is empty. Both `low` and `high` must be populated, and the represented box cannot be empty (as specified by the definitions above). An empty viewport will result in an error. For example, this viewport fully encloses New York City: { "low": { "latitude": 40.477398, "longitude": -74.259087 }, "high": { "latitude": 40.91618, "longitude": -73.70018 } }
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rectangle")]
		public GoogleGeoTypeViewport Rectangle { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleMapsPlacesV1SearchTextRequestRankPreference
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RANK_PREFERENCE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISTANCE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RELEVANCE = 2,
	}
	
	/// <summary>
	/// Response proto for SearchText. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleMapsPlacesV1SearchTextResponse
	{
		
		/// <summary>
		/// A list of places that meet the user's text search criteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="places")]
		public GoogleMapsPlacesV1Place[] Places { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Search for places near locations.
		/// Places_places_searchNearby v1/places:searchNearby
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<GoogleMapsPlacesV1SearchNearbyResponse> Places_places_searchNearbyAsync(GoogleMapsPlacesV1SearchNearbyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/places:searchNearby";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleMapsPlacesV1SearchNearbyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Text query based place search.
		/// Places_places_searchText v1/places:searchText
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<GoogleMapsPlacesV1SearchTextResponse> Places_places_searchTextAsync(GoogleMapsPlacesV1SearchTextRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/places:searchText";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleMapsPlacesV1SearchTextResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a photo media with a photo reference string.
		/// Places_places_photos_getMedia v1/{name}
		/// </summary>
		/// <param name="name">Required. The resource name of a photo media in the format: `places/{place_id}/photos/{photo_reference}/media`. The resource name of a photo as returned in a Place object's `photos.name` field comes with the format `places/{place_id}/photos/{photo_reference}`. You need to append `/media` at the end of the photo resource to get the photo media resource name.</param>
		/// <param name="maxHeightPx">Optional. Specifies the maximum desired height, in pixels, of the image. If the image is smaller than the values specified, the original image will be returned. If the image is larger in either dimension, it will be scaled to match the smaller of the two dimensions, restricted to its original aspect ratio. Both the max_height_px and max_width_px properties accept an integer between 1 and 4800, inclusively. If the value is not within the allowed range, an INVALID_ARGUMENT error will be returned. At least one of max_height_px or max_width_px needs to be specified. If neither max_height_px nor max_width_px is specified, an INVALID_ARGUMENT error will be returned.</param>
		/// <param name="maxWidthPx">Optional. Specifies the maximum desired width, in pixels, of the image. If the image is smaller than the values specified, the original image will be returned. If the image is larger in either dimension, it will be scaled to match the smaller of the two dimensions, restricted to its original aspect ratio. Both the max_height_px and max_width_px properties accept an integer between 1 and 4800, inclusively. If the value is not within the allowed range, an INVALID_ARGUMENT error will be returned. At least one of max_height_px or max_width_px needs to be specified. If neither max_height_px nor max_width_px is specified, an INVALID_ARGUMENT error will be returned.</param>
		/// <param name="skipHttpRedirect">Optional. If set, skip the default HTTP redirect behavior and render a text format (for example, in JSON format for HTTP use case) response. If not set, an HTTP redirect will be issued to redirect the call to the image media. This option is ignored for non-HTTP requests.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleMapsPlacesV1PhotoMedia> Places_places_photos_getMediaAsync(string name, int maxHeightPx, int maxWidthPx, bool skipHttpRedirect, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&maxHeightPx="+maxHeightPx+"&maxWidthPx="+maxWidthPx+"&skipHttpRedirect="+skipHttpRedirect;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleMapsPlacesV1PhotoMedia>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
