//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Spec for App Dev Experience Feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppDevExperienceFeatureSpec
	{
	}
	
	/// <summary>
	/// State for App Dev Exp Feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppDevExperienceFeatureState
	{
		
		/// <summary>
		/// Status specifies state for the subcomponent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkingInstallSucceeded")]
		public Status NetworkingInstallSucceeded { get; set; }
	}
	
	/// <summary>
	/// Status specifies state for the subcomponent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Status
	{
		
		/// <summary>
		/// Code specifies AppDevExperienceFeature's subcomponent ready state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<StatusCode> Code { get; set; }
		
		/// <summary>
		/// Description is populated if Code is Failed, explaining why it has failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum StatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CODE_UNSPECIFIED")]
		CODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OK")]
		OK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN")]
		UNKNOWN = 3,
	}
	
	/// <summary>
	/// ApplianceCluster contains information specific to GDC Edge Appliance Clusters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApplianceCluster
	{
		
		/// <summary>
		/// Immutable. Self-link of the Google Cloud resource for the Appliance Cluster. For example: //transferappliance.googleapis.com/projects/my-project/locations/us-west1-a/appliances/my-appliance
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceLink")]
		public string ResourceLink { get; set; }
	}
	
	/// <summary>
	/// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditConfig
	{
		
		/// <summary>
		/// The configuration for logging of each type of permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auditLogConfigs")]
		public AuditLogConfig[] AuditLogConfigs { get; set; }
		
		/// <summary>
		/// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
	}
	
	/// <summary>
	/// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditLogConfig
	{
		
		/// <summary>
		/// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptedMembers")]
		public string[] ExemptedMembers { get; set; }
		
		/// <summary>
		/// The log type that this config enables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logType")]
		public System.Nullable<AuditLogConfigLogType> LogType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AuditLogConfigLogType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOG_TYPE_UNSPECIFIED")]
		LOG_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADMIN_READ")]
		ADMIN_READ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DATA_WRITE")]
		DATA_WRITE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DATA_READ")]
		DATA_READ = 3,
	}
	
	/// <summary>
	/// Authority encodes how Google will recognize identities from this Membership. See the workload identity documentation for more details: https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Authority
	{
		
		/// <summary>
		/// Output only. An identity provider that reflects the `issuer` in the workload identity pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identityProvider")]
		public string IdentityProvider { get; set; }
		
		/// <summary>
		/// Optional. A JSON Web Token (JWT) issuer URI. `issuer` must start with `https://` and be a valid URL with length <2000 characters, it must use `location` rather than `zone` for GKE clusters. If set, then Google will allow valid OIDC tokens from this issuer to authenticate within the workload_identity_pool. OIDC discovery will be performed on this URI to validate tokens from the issuer. Clearing `issuer` disables Workload Identity. `issuer` cannot be directly modified; it must be cleared (and Workload Identity disabled) before using a new issuer (and re-enabling Workload Identity).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issuer")]
		public string Issuer { get; set; }
		
		/// <summary>
		/// Optional. OIDC verification keys for this Membership in JWKS format (RFC 7517). When this field is set, OIDC discovery will NOT be performed on `issuer`, and instead OIDC tokens will be validated using this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oidcJwks")]
		public string OidcJwks { get; set; }
		
		/// <summary>
		/// Output only. The name of the workload identity pool in which `issuer` will be recognized. There is a single Workload Identity Pool per Hub that is shared between all Memberships that belong to that Hub. For a Hub hosted in {PROJECT_ID}, the workload pool format is `{PROJECT_ID}.hub.id.goog`, although this is subject to change in newer versions of this API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workloadIdentityPool")]
		public string WorkloadIdentityPool { get; set; }
	}
	
	/// <summary>
	/// BinaryAuthorizationConfig defines the fleet level configuration of binary authorization feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BinaryAuthorizationConfig
	{
		
		/// <summary>
		/// Optional. Mode of operation for binauthz policy evaluation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evaluationMode")]
		public System.Nullable<BinaryAuthorizationConfigEvaluationMode> EvaluationMode { get; set; }
		
		/// <summary>
		/// Optional. Binauthz policies that apply to this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyBindings")]
		public PolicyBinding[] PolicyBindings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BinaryAuthorizationConfigEvaluationMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EVALUATION_MODE_UNSPECIFIED")]
		EVALUATION_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POLICY_BINDINGS")]
		POLICY_BINDINGS = 2,
	}
	
	/// <summary>
	/// Binauthz policy that applies to this cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyBinding
	{
		
		/// <summary>
		/// The relative resource name of the binauthz platform policy to audit. GKE platform policies have the following format: `projects/{project_number}/platforms/gke/policies/{policy_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Associates `members`, or principals, with a `role`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Binding
	{
		
		/// <summary>
		/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public Expr Condition { get; set; }
		
		/// <summary>
		/// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string[] Members { get; set; }
		
		/// <summary>
		/// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
	}
	
	/// <summary>
	/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Expr
	{
		
		/// <summary>
		/// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Textual representation of an expression in Common Expression Language syntax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
		
		/// <summary>
		/// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// The request message for Operations.CancelOperation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelOperationRequest
	{
	}
	
	/// <summary>
	/// **ClusterUpgrade**: The configuration for the fleet-level ClusterUpgrade feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterUpgradeFleetSpec
	{
		
		/// <summary>
		/// Allow users to override some properties of each GKE upgrade.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gkeUpgradeOverrides")]
		public ClusterUpgradeGKEUpgradeOverride[] GkeUpgradeOverrides { get; set; }
		
		/// <summary>
		/// Post conditional checks after an upgrade has been applied on all eligible clusters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postConditions")]
		public ClusterUpgradePostConditions PostConditions { get; set; }
		
		/// <summary>
		/// This fleet consumes upgrades that have COMPLETE status code in the upstream fleets. See UpgradeStatus.Code for code definitions. The fleet name should be either fleet project number or id. This is defined as repeated for future proof reasons. Initial implementation will enforce at most one upstream fleet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upstreamFleets")]
		public string[] UpstreamFleets { get; set; }
	}
	
	/// <summary>
	/// Properties of a GKE upgrade that can be overridden by the user. For example, a user can skip soaking by overriding the soaking to 0.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterUpgradeGKEUpgradeOverride
	{
		
		/// <summary>
		/// Post conditional checks after an upgrade has been applied on all eligible clusters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postConditions")]
		public ClusterUpgradePostConditions PostConditions { get; set; }
		
		/// <summary>
		/// GKEUpgrade represents a GKE provided upgrade, e.g., control plane upgrade.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upgrade")]
		public ClusterUpgradeGKEUpgrade Upgrade { get; set; }
	}
	
	/// <summary>
	/// Post conditional checks after an upgrade has been applied on all eligible clusters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterUpgradePostConditions
	{
		
		/// <summary>
		/// Required. Amount of time to "soak" after a rollout has been finished before marking it COMPLETE. Cannot exceed 30 days. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="soaking")]
		public string Soaking { get; set; }
	}
	
	/// <summary>
	/// GKEUpgrade represents a GKE provided upgrade, e.g., control plane upgrade.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterUpgradeGKEUpgrade
	{
		
		/// <summary>
		/// Name of the upgrade, e.g., "k8s_control_plane". It should be a valid upgrade name. It must not exceet 99 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Version of the upgrade, e.g., "1.22.1-gke.100". It should be a valid version. It must not exceet 99 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// **ClusterUpgrade**: The state for the fleet-level ClusterUpgrade feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterUpgradeFleetState
	{
		
		/// <summary>
		/// This fleets whose upstream_fleets contain the current fleet. The fleet name should be either fleet project number or id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downstreamFleets")]
		public string[] DownstreamFleets { get; set; }
		
		/// <summary>
		/// GKEUpgradeFeatureState contains feature states for GKE clusters in the scope.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gkeState")]
		public ClusterUpgradeGKEUpgradeFeatureState GkeState { get; set; }
		
		/// <summary>
		/// A list of memberships ignored by the feature. For example, manually upgraded clusters can be ignored if they are newer than the default versions of its release channel. The membership resource is in the format: `projects/{p}/locations/{l}/membership/{m}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignored")]
		public System.Collections.Generic.Dictionary<string, ClusterUpgradeIgnoredMembership> Ignored { get; set; }
	}
	
	/// <summary>
	/// GKEUpgradeFeatureState contains feature states for GKE clusters in the scope.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterUpgradeGKEUpgradeFeatureState
	{
		
		/// <summary>
		/// Current conditions of the feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conditions")]
		public ClusterUpgradeGKEUpgradeFeatureCondition[] Conditions { get; set; }
		
		/// <summary>
		/// Upgrade state. It will eventually replace `state`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upgradeState")]
		public ClusterUpgradeGKEUpgradeState[] UpgradeState { get; set; }
	}
	
	/// <summary>
	/// GKEUpgradeFeatureCondition describes the condition of the feature for GKE clusters at a certain point of time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterUpgradeGKEUpgradeFeatureCondition
	{
		
		/// <summary>
		/// Reason why the feature is in this status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// Status of the condition, one of True, False, Unknown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Type of the condition, for example, "ready".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Last timestamp the condition was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// GKEUpgradeState is a GKEUpgrade and its state at the scope and fleet level.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterUpgradeGKEUpgradeState
	{
		
		/// <summary>
		/// Number of GKE clusters in each status code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public System.Collections.Generic.Dictionary<string, string> Stats { get; set; }
		
		/// <summary>
		/// UpgradeStatus provides status information for each upgrade.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ClusterUpgradeUpgradeStatus Status { get; set; }
		
		/// <summary>
		/// GKEUpgrade represents a GKE provided upgrade, e.g., control plane upgrade.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upgrade")]
		public ClusterUpgradeGKEUpgrade Upgrade { get; set; }
	}
	
	/// <summary>
	/// UpgradeStatus provides status information for each upgrade.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterUpgradeUpgradeStatus
	{
		
		/// <summary>
		/// Status code of the upgrade.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<ClusterUpgradeUpgradeStatusCode> Code { get; set; }
		
		/// <summary>
		/// Reason for this status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// Last timestamp the status was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ClusterUpgradeUpgradeStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CODE_UNSPECIFIED")]
		CODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INELIGIBLE")]
		INELIGIBLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SOAKING")]
		SOAKING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FORCED_SOAKING")]
		FORCED_SOAKING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETE")]
		COMPLETE = 6,
	}
	
	/// <summary>
	/// IgnoredMembership represents a membership ignored by the feature. A membership can be ignored because it was manually upgraded to a newer version than RC default.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterUpgradeIgnoredMembership
	{
		
		/// <summary>
		/// Time when the membership was first set to ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoredTime")]
		public string IgnoredTime { get; set; }
		
		/// <summary>
		/// Reason why the membership is ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	/// <summary>
	/// ScopeGKEUpgradeState is a GKEUpgrade and its state per-membership.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterUpgradeMembershipGKEUpgradeState
	{
		
		/// <summary>
		/// UpgradeStatus provides status information for each upgrade.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ClusterUpgradeUpgradeStatus Status { get; set; }
		
		/// <summary>
		/// GKEUpgrade represents a GKE provided upgrade, e.g., control plane upgrade.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upgrade")]
		public ClusterUpgradeGKEUpgrade Upgrade { get; set; }
	}
	
	/// <summary>
	/// Per-membership state for this feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterUpgradeMembershipState
	{
		
		/// <summary>
		/// IgnoredMembership represents a membership ignored by the feature. A membership can be ignored because it was manually upgraded to a newer version than RC default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignored")]
		public ClusterUpgradeIgnoredMembership Ignored { get; set; }
		
		/// <summary>
		/// Actual upgrade state against desired.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upgrades")]
		public ClusterUpgradeMembershipGKEUpgradeState[] Upgrades { get; set; }
	}
	
	/// <summary>
	/// CommonFeatureSpec contains Hub-wide configuration information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommonFeatureSpec
	{
		
		/// <summary>
		/// Spec for App Dev Experience Feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appdevexperience")]
		public AppDevExperienceFeatureSpec Appdevexperience { get; set; }
		
		/// <summary>
		/// **ClusterUpgrade**: The configuration for the fleet-level ClusterUpgrade feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterupgrade")]
		public ClusterUpgradeFleetSpec Clusterupgrade { get; set; }
		
		/// <summary>
		/// **Fleet Observability**: The Hub-wide input for the FleetObservability feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fleetobservability")]
		public FleetObservabilityFeatureSpec Fleetobservability { get; set; }
		
		/// <summary>
		/// **Multi-cluster Ingress**: The configuration for the MultiClusterIngress feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiclusteringress")]
		public MultiClusterIngressFeatureSpec Multiclusteringress { get; set; }
	}
	
	/// <summary>
	/// **Fleet Observability**: The Hub-wide input for the FleetObservability feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FleetObservabilityFeatureSpec
	{
		
		/// <summary>
		/// LoggingConfig defines the configuration for different types of logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loggingConfig")]
		public FleetObservabilityLoggingConfig LoggingConfig { get; set; }
	}
	
	/// <summary>
	/// LoggingConfig defines the configuration for different types of logs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FleetObservabilityLoggingConfig
	{
		
		/// <summary>
		/// RoutingConfig configures the behaviour of fleet logging feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultConfig")]
		public FleetObservabilityRoutingConfig DefaultConfig { get; set; }
		
		/// <summary>
		/// RoutingConfig configures the behaviour of fleet logging feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fleetScopeLogsConfig")]
		public FleetObservabilityRoutingConfig FleetScopeLogsConfig { get; set; }
	}
	
	/// <summary>
	/// RoutingConfig configures the behaviour of fleet logging feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FleetObservabilityRoutingConfig
	{
		
		/// <summary>
		/// mode configures the logs routing mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public System.Nullable<FleetObservabilityRoutingConfigMode> Mode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FleetObservabilityRoutingConfigMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MODE_UNSPECIFIED")]
		MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COPY")]
		COPY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MOVE")]
		MOVE = 2,
	}
	
	/// <summary>
	/// **Multi-cluster Ingress**: The configuration for the MultiClusterIngress feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MultiClusterIngressFeatureSpec
	{
		
		/// <summary>
		/// Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configMembership")]
		public string ConfigMembership { get; set; }
	}
	
	/// <summary>
	/// CommonFeatureState contains Hub-wide Feature status information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommonFeatureState
	{
		
		/// <summary>
		/// State for App Dev Exp Feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appdevexperience")]
		public AppDevExperienceFeatureState Appdevexperience { get; set; }
		
		/// <summary>
		/// **ClusterUpgrade**: The state for the fleet-level ClusterUpgrade feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterupgrade")]
		public ClusterUpgradeFleetState Clusterupgrade { get; set; }
		
		/// <summary>
		/// **FleetObservability**: Hub-wide Feature for FleetObservability feature. state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fleetobservability")]
		public FleetObservabilityFeatureState Fleetobservability { get; set; }
		
		/// <summary>
		/// FeatureState describes the high-level state of a Feature. It may be used to describe a Feature's state at the environ-level, or per-membershop, depending on the context.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public FeatureState State { get; set; }
	}
	
	/// <summary>
	/// **FleetObservability**: Hub-wide Feature for FleetObservability feature. state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FleetObservabilityFeatureState
	{
		
		/// <summary>
		/// Feature state for logging feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logging")]
		public FleetObservabilityFleetObservabilityLoggingState Logging { get; set; }
		
		/// <summary>
		/// Feature state for monitoring feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitoring")]
		public FleetObservabilityFleetObservabilityMonitoringState Monitoring { get; set; }
	}
	
	/// <summary>
	/// Feature state for logging feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FleetObservabilityFleetObservabilityLoggingState
	{
		
		/// <summary>
		/// Base state for fleet observability feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultLog")]
		public FleetObservabilityFleetObservabilityBaseFeatureState DefaultLog { get; set; }
		
		/// <summary>
		/// Base state for fleet observability feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scopeLog")]
		public FleetObservabilityFleetObservabilityBaseFeatureState ScopeLog { get; set; }
	}
	
	/// <summary>
	/// Base state for fleet observability feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FleetObservabilityFleetObservabilityBaseFeatureState
	{
		
		/// <summary>
		/// The high-level, machine-readable status of this Feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<FleetObservabilityFleetObservabilityBaseFeatureStateCode> Code { get; set; }
		
		/// <summary>
		/// Errors after reconciling the monitoring and logging feature if the code is not OK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public FleetObservabilityFeatureError[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FleetObservabilityFleetObservabilityBaseFeatureStateCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CODE_UNSPECIFIED")]
		CODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OK")]
		OK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR")]
		ERROR = 2,
	}
	
	/// <summary>
	/// All error details of the fleet observability feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FleetObservabilityFeatureError
	{
		
		/// <summary>
		/// The code of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A human-readable description of the current status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// Feature state for monitoring feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FleetObservabilityFleetObservabilityMonitoringState
	{
		
		/// <summary>
		/// Base state for fleet observability feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public FleetObservabilityFleetObservabilityBaseFeatureState State { get; set; }
	}
	
	/// <summary>
	/// FeatureState describes the high-level state of a Feature. It may be used to describe a Feature's state at the environ-level, or per-membershop, depending on the context.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FeatureState
	{
		
		/// <summary>
		/// The high-level, machine-readable status of this Feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<FeatureStateCode> Code { get; set; }
		
		/// <summary>
		/// A human-readable description of the current status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The time this status and any related Feature-specific details were updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FeatureStateCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CODE_UNSPECIFIED")]
		CODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OK")]
		OK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WARNING")]
		WARNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR")]
		ERROR = 3,
	}
	
	/// <summary>
	/// CommonFleetDefaultMemberConfigSpec contains default configuration information for memberships of a fleet
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommonFleetDefaultMemberConfigSpec
	{
		
		/// <summary>
		/// **Anthos Config Management**: Configuration for a single cluster. Intended to parallel the ConfigManagement CR.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configmanagement")]
		public ConfigManagementMembershipSpec Configmanagement { get; set; }
		
		/// <summary>
		/// **Anthos Identity Service**: Configuration for a single Membership.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identityservice")]
		public IdentityServiceMembershipSpec Identityservice { get; set; }
		
		/// <summary>
		/// **Service Mesh**: Spec for a single Membership for the servicemesh feature
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mesh")]
		public ServiceMeshMembershipSpec Mesh { get; set; }
		
		/// <summary>
		/// **Policy Controller**: Configuration for a single cluster. Intended to parallel the PolicyController CR.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policycontroller")]
		public PolicyControllerMembershipSpec Policycontroller { get; set; }
	}
	
	/// <summary>
	/// **Anthos Config Management**: Configuration for a single cluster. Intended to parallel the ConfigManagement CR.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigManagementMembershipSpec
	{
		
		/// <summary>
		/// The user-specified cluster name used by Config Sync cluster-name-selector annotation or ClusterSelector, for applying configs to only a subset of clusters. Omit this field if the cluster's fleet membership name is used by Config Sync cluster-name-selector annotation or ClusterSelector. Set this field if a name different from the cluster's fleet membership name is used by Config Sync cluster-name-selector annotation or ClusterSelector.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cluster")]
		public string Cluster { get; set; }
		
		/// <summary>
		/// Configuration for Config Sync
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configSync")]
		public ConfigManagementConfigSync ConfigSync { get; set; }
		
		/// <summary>
		/// Configuration for Hierarchy Controller
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hierarchyController")]
		public ConfigManagementHierarchyControllerConfig HierarchyController { get; set; }
		
		/// <summary>
		/// Configuration for Policy Controller
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyController")]
		public ConfigManagementPolicyController PolicyController { get; set; }
		
		/// <summary>
		/// Version of ACM installed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Configuration for Config Sync
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigManagementConfigSync
	{
		
		/// <summary>
		/// Set to true to allow the vertical scaling. Defaults to false which disallows vertical scaling. This field is deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowVerticalScale")]
		public System.Nullable<System.Boolean> AllowVerticalScale { get; set; }
		
		/// <summary>
		/// Enables the installation of ConfigSync. If set to true, ConfigSync resources will be created and the other ConfigSync fields will be applied if exist. If set to false, all other ConfigSync fields will be ignored, ConfigSync resources will be deleted. If omitted, ConfigSync resources will be managed depends on the presence of the git or oci field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Git repo configuration for a single cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="git")]
		public ConfigManagementGitConfig Git { get; set; }
		
		/// <summary>
		/// The Email of the Google Cloud Service Account (GSA) used for exporting Config Sync metrics to Cloud Monitoring and Cloud Monarch when Workload Identity is enabled. The GSA should have the Monitoring Metric Writer (roles/monitoring.metricWriter) IAM role. The Kubernetes ServiceAccount `default` in the namespace `config-management-monitoring` should be bound to the GSA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricsGcpServiceAccountEmail")]
		public string MetricsGcpServiceAccountEmail { get; set; }
		
		/// <summary>
		/// OCI repo configuration for a single cluster
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oci")]
		public ConfigManagementOciConfig Oci { get; set; }
		
		/// <summary>
		/// Set to true to enable the Config Sync admission webhook to prevent drifts. If set to `false`, disables the Config Sync admission webhook and does not prevent drifts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preventDrift")]
		public System.Nullable<System.Boolean> PreventDrift { get; set; }
		
		/// <summary>
		/// Specifies whether the Config Sync Repo is in "hierarchical" or "unstructured" mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceFormat")]
		public string SourceFormat { get; set; }
	}
	
	/// <summary>
	/// Git repo configuration for a single cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigManagementGitConfig
	{
		
		/// <summary>
		/// The Google Cloud Service Account Email used for auth when secret_type is gcpServiceAccount.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcpServiceAccountEmail")]
		public string GcpServiceAccountEmail { get; set; }
		
		/// <summary>
		/// URL for the HTTPS proxy to be used when communicating with the Git repo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpsProxy")]
		public string HttpsProxy { get; set; }
		
		/// <summary>
		/// The path within the Git repository that represents the top level of the repo to sync. Default: the root directory of the repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyDir")]
		public string PolicyDir { get; set; }
		
		/// <summary>
		/// Type of secret configured for access to the Git repo. Must be one of ssh, cookiefile, gcenode, token, gcpserviceaccount or none. The validation of this is case-sensitive. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretType")]
		public string SecretType { get; set; }
		
		/// <summary>
		/// The branch of the repository to sync from. Default: master.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syncBranch")]
		public string SyncBranch { get; set; }
		
		/// <summary>
		/// The URL of the Git repository to use as the source of truth.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syncRepo")]
		public string SyncRepo { get; set; }
		
		/// <summary>
		/// Git revision (tag or hash) to check out. Default HEAD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syncRev")]
		public string SyncRev { get; set; }
		
		/// <summary>
		/// Period in seconds between consecutive syncs. Default: 15.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syncWaitSecs")]
		public string SyncWaitSecs { get; set; }
	}
	
	/// <summary>
	/// OCI repo configuration for a single cluster
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigManagementOciConfig
	{
		
		/// <summary>
		/// The Google Cloud Service Account Email used for auth when secret_type is gcpServiceAccount.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcpServiceAccountEmail")]
		public string GcpServiceAccountEmail { get; set; }
		
		/// <summary>
		/// The absolute path of the directory that contains the local resources. Default: the root directory of the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyDir")]
		public string PolicyDir { get; set; }
		
		/// <summary>
		/// Type of secret configured for access to the Git repo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretType")]
		public string SecretType { get; set; }
		
		/// <summary>
		/// The OCI image repository URL for the package to sync from. e.g. `LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY_NAME/PACKAGE_NAME`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syncRepo")]
		public string SyncRepo { get; set; }
		
		/// <summary>
		/// Period in seconds between consecutive syncs. Default: 15.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syncWaitSecs")]
		public string SyncWaitSecs { get; set; }
	}
	
	/// <summary>
	/// Configuration for Hierarchy Controller
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigManagementHierarchyControllerConfig
	{
		
		/// <summary>
		/// Whether hierarchical resource quota is enabled in this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableHierarchicalResourceQuota")]
		public System.Nullable<System.Boolean> EnableHierarchicalResourceQuota { get; set; }
		
		/// <summary>
		/// Whether pod tree labels are enabled in this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enablePodTreeLabels")]
		public System.Nullable<System.Boolean> EnablePodTreeLabels { get; set; }
		
		/// <summary>
		/// Whether Hierarchy Controller is enabled in this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Configuration for Policy Controller
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigManagementPolicyController
	{
		
		/// <summary>
		/// Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auditIntervalSeconds")]
		public string AuditIntervalSeconds { get; set; }
		
		/// <summary>
		/// Enables the installation of Policy Controller. If false, the rest of PolicyController fields take no effect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptableNamespaces")]
		public string[] ExemptableNamespaces { get; set; }
		
		/// <summary>
		/// Logs all denies and dry run failures.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logDeniesEnabled")]
		public System.Nullable<System.Boolean> LogDeniesEnabled { get; set; }
		
		/// <summary>
		/// PolicyControllerMonitoring specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: ["cloudmonitoring", "prometheus"]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitoring")]
		public ConfigManagementPolicyControllerMonitoring Monitoring { get; set; }
		
		/// <summary>
		/// Enable or disable mutation in policy controller. If true, mutation CRDs, webhook and controller deployment will be deployed to the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mutationEnabled")]
		public System.Nullable<System.Boolean> MutationEnabled { get; set; }
		
		/// <summary>
		/// Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referentialRulesEnabled")]
		public System.Nullable<System.Boolean> ReferentialRulesEnabled { get; set; }
		
		/// <summary>
		/// Installs the default template library along with Policy Controller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="templateLibraryInstalled")]
		public System.Nullable<System.Boolean> TemplateLibraryInstalled { get; set; }
		
		/// <summary>
		/// Output only. Last time this membership spec was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// PolicyControllerMonitoring specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: ["cloudmonitoring", "prometheus"]
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigManagementPolicyControllerMonitoring
	{
		
		/// <summary>
		/// Specifies the list of backends Policy Controller will export to. An empty list would effectively disable metrics export.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backends")]
		public string[] Backends { get; set; }
	}
	
	/// <summary>
	/// **Anthos Identity Service**: Configuration for a single Membership.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IdentityServiceMembershipSpec
	{
		
		/// <summary>
		/// A member may support multiple auth methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authMethods")]
		public IdentityServiceAuthMethod[] AuthMethods { get; set; }
	}
	
	/// <summary>
	/// Configuration of an auth method for a member/cluster. Only one authentication method (e.g., OIDC and LDAP) can be set per AuthMethod.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IdentityServiceAuthMethod
	{
		
		/// <summary>
		/// Configuration for the AzureAD Auth flow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="azureadConfig")]
		public IdentityServiceAzureADConfig AzureadConfig { get; set; }
		
		/// <summary>
		/// Configuration for the Google Plugin Auth flow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleConfig")]
		public IdentityServiceGoogleConfig GoogleConfig { get; set; }
		
		/// <summary>
		/// Identifier for auth config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Configuration for OIDC Auth flow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oidcConfig")]
		public IdentityServiceOidcConfig OidcConfig { get; set; }
		
		/// <summary>
		/// Proxy server address to use for auth method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proxy")]
		public string Proxy { get; set; }
	}
	
	/// <summary>
	/// Configuration for the AzureAD Auth flow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IdentityServiceAzureADConfig
	{
		
		/// <summary>
		/// ID for the registered client application that makes authentication requests to the Azure AD identity provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Input only. Unencrypted AzureAD client secret will be passed to the GKE Hub CLH.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientSecret")]
		public string ClientSecret { get; set; }
		
		/// <summary>
		/// Output only. Encrypted AzureAD client secret.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptedClientSecret")]
		public string EncryptedClientSecret { get; set; }
		
		/// <summary>
		/// The redirect URL that kubectl uses for authorization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kubectlRedirectUri")]
		public string KubectlRedirectUri { get; set; }
		
		/// <summary>
		/// Kind of Azure AD account to be authenticated. Supported values are or for accounts belonging to a specific tenant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenant")]
		public string Tenant { get; set; }
	}
	
	/// <summary>
	/// Configuration for the Google Plugin Auth flow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IdentityServiceGoogleConfig
	{
		
		/// <summary>
		/// Disable automatic configuration of Google Plugin on supported platforms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disable")]
		public System.Nullable<System.Boolean> Disable { get; set; }
	}
	
	/// <summary>
	/// Configuration for OIDC Auth flow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IdentityServiceOidcConfig
	{
		
		/// <summary>
		/// PEM-encoded CA for OIDC provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateAuthorityData")]
		public string CertificateAuthorityData { get; set; }
		
		/// <summary>
		/// ID for OIDC client application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Input only. Unencrypted OIDC client secret will be passed to the GKE Hub CLH.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientSecret")]
		public string ClientSecret { get; set; }
		
		/// <summary>
		/// Flag to denote if reverse proxy is used to connect to auth provider. This flag should be set to true when provider is not reachable by Google Cloud Console.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deployCloudConsoleProxy")]
		public System.Nullable<System.Boolean> DeployCloudConsoleProxy { get; set; }
		
		/// <summary>
		/// Enable access token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableAccessToken")]
		public System.Nullable<System.Boolean> EnableAccessToken { get; set; }
		
		/// <summary>
		/// Output only. Encrypted OIDC Client secret
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptedClientSecret")]
		public string EncryptedClientSecret { get; set; }
		
		/// <summary>
		/// Comma-separated list of key-value pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extraParams")]
		public string ExtraParams { get; set; }
		
		/// <summary>
		/// Prefix to prepend to group name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupPrefix")]
		public string GroupPrefix { get; set; }
		
		/// <summary>
		/// Claim in OIDC ID token that holds group information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupsClaim")]
		public string GroupsClaim { get; set; }
		
		/// <summary>
		/// URI for the OIDC provider. This should point to the level below .well-known/openid-configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issuerUri")]
		public string IssuerUri { get; set; }
		
		/// <summary>
		/// Registered redirect uri to redirect users going through OAuth flow using kubectl plugin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kubectlRedirectUri")]
		public string KubectlRedirectUri { get; set; }
		
		/// <summary>
		/// Comma-separated list of identifiers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scopes")]
		public string Scopes { get; set; }
		
		/// <summary>
		/// Claim in OIDC ID token that holds username.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userClaim")]
		public string UserClaim { get; set; }
		
		/// <summary>
		/// Prefix to prepend to user name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userPrefix")]
		public string UserPrefix { get; set; }
	}
	
	/// <summary>
	/// **Service Mesh**: Spec for a single Membership for the servicemesh feature
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceMeshMembershipSpec
	{
		
		/// <summary>
		/// Deprecated: use `management` instead Enables automatic control plane management.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="controlPlane")]
		public System.Nullable<ServiceMeshMembershipSpecControlPlane> ControlPlane { get; set; }
		
		/// <summary>
		/// Enables automatic Service Mesh management.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="management")]
		public System.Nullable<ServiceMeshMembershipSpecManagement> Management { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ServiceMeshMembershipSpecControlPlane
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONTROL_PLANE_MANAGEMENT_UNSPECIFIED")]
		CONTROL_PLANE_MANAGEMENT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTOMATIC")]
		AUTOMATIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MANUAL")]
		MANUAL = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ServiceMeshMembershipSpecManagement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MANAGEMENT_UNSPECIFIED")]
		MANAGEMENT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MANAGEMENT_AUTOMATIC")]
		MANAGEMENT_AUTOMATIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MANAGEMENT_MANUAL")]
		MANAGEMENT_MANUAL = 2,
	}
	
	/// <summary>
	/// **Policy Controller**: Configuration for a single cluster. Intended to parallel the PolicyController CR.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyControllerMembershipSpec
	{
		
		/// <summary>
		/// Configuration for Policy Controller
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyControllerHubConfig")]
		public PolicyControllerHubConfig PolicyControllerHubConfig { get; set; }
		
		/// <summary>
		/// Version of Policy Controller installed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Configuration for Policy Controller
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyControllerHubConfig
	{
		
		/// <summary>
		/// Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auditIntervalSeconds")]
		public string AuditIntervalSeconds { get; set; }
		
		/// <summary>
		/// The maximum number of audit violations to be stored in a constraint. If not set, the internal default (currently 20) will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="constraintViolationLimit")]
		public string ConstraintViolationLimit { get; set; }
		
		/// <summary>
		/// Map of deployment configs to deployments ("admission", "audit", "mutation').
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deploymentConfigs")]
		public System.Collections.Generic.Dictionary<string, PolicyControllerPolicyControllerDeploymentConfig> DeploymentConfigs { get; set; }
		
		/// <summary>
		/// The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptableNamespaces")]
		public string[] ExemptableNamespaces { get; set; }
		
		/// <summary>
		/// The install_spec represents the intended state specified by the latest request that mutated install_spec in the feature spec, not the lifecycle state of the feature observed by the Hub feature controller that is reported in the feature state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installSpec")]
		public System.Nullable<PolicyControllerHubConfigInstallSpec> InstallSpec { get; set; }
		
		/// <summary>
		/// Logs all denies and dry run failures.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logDeniesEnabled")]
		public System.Nullable<System.Boolean> LogDeniesEnabled { get; set; }
		
		/// <summary>
		/// MonitoringConfig specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: ["cloudmonitoring", "prometheus"]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitoring")]
		public PolicyControllerMonitoringConfig Monitoring { get; set; }
		
		/// <summary>
		/// Enables the ability to mutate resources using Policy Controller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mutationEnabled")]
		public System.Nullable<System.Boolean> MutationEnabled { get; set; }
		
		/// <summary>
		/// PolicyContentSpec defines the user's desired content configuration on the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyContent")]
		public PolicyControllerPolicyContentSpec PolicyContent { get; set; }
		
		/// <summary>
		/// Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referentialRulesEnabled")]
		public System.Nullable<System.Boolean> ReferentialRulesEnabled { get; set; }
	}
	
	/// <summary>
	/// Deployment-specific configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyControllerPolicyControllerDeploymentConfig
	{
		
		/// <summary>
		/// ResourceRequirements describes the compute resource requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerResources")]
		public PolicyControllerResourceRequirements ContainerResources { get; set; }
		
		/// <summary>
		/// Pod affinity configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="podAffinity")]
		public System.Nullable<PolicyControllerPolicyControllerDeploymentConfigPodAffinity> PodAffinity { get; set; }
		
		/// <summary>
		/// Pod anti-affinity enablement. Deprecated: use `pod_affinity` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="podAntiAffinity")]
		public System.Nullable<System.Boolean> PodAntiAffinity { get; set; }
		
		/// <summary>
		/// Pod tolerations of node taints.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="podTolerations")]
		public PolicyControllerToleration[] PodTolerations { get; set; }
		
		/// <summary>
		/// Pod replica count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicaCount")]
		public string ReplicaCount { get; set; }
	}
	
	/// <summary>
	/// ResourceRequirements describes the compute resource requirements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyControllerResourceRequirements
	{
		
		/// <summary>
		/// ResourceList contains container resource requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limits")]
		public PolicyControllerResourceList Limits { get; set; }
		
		/// <summary>
		/// ResourceList contains container resource requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public PolicyControllerResourceList Requests { get; set; }
	}
	
	/// <summary>
	/// ResourceList contains container resource requirements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyControllerResourceList
	{
		
		/// <summary>
		/// CPU requirement expressed in Kubernetes resource units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpu")]
		public string Cpu { get; set; }
		
		/// <summary>
		/// Memory requirement expressed in Kubernetes resource units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memory")]
		public string Memory { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PolicyControllerPolicyControllerDeploymentConfigPodAffinity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AFFINITY_UNSPECIFIED")]
		AFFINITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_AFFINITY")]
		NO_AFFINITY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ANTI_AFFINITY")]
		ANTI_AFFINITY = 2,
	}
	
	/// <summary>
	/// Toleration of a node taint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyControllerToleration
	{
		
		/// <summary>
		/// Matches a taint effect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effect")]
		public string Effect { get; set; }
		
		/// <summary>
		/// Matches a taint key (not necessarily unique).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Matches a taint operator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public string Operator { get; set; }
		
		/// <summary>
		/// Matches a taint value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PolicyControllerHubConfigInstallSpec
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSTALL_SPEC_UNSPECIFIED")]
		INSTALL_SPEC_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSTALL_SPEC_NOT_INSTALLED")]
		INSTALL_SPEC_NOT_INSTALLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSTALL_SPEC_ENABLED")]
		INSTALL_SPEC_ENABLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSTALL_SPEC_SUSPENDED")]
		INSTALL_SPEC_SUSPENDED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSTALL_SPEC_DETACHED")]
		INSTALL_SPEC_DETACHED = 4,
	}
	
	/// <summary>
	/// MonitoringConfig specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: ["cloudmonitoring", "prometheus"]
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyControllerMonitoringConfig
	{
		
		/// <summary>
		/// Specifies the list of backends Policy Controller will export to. An empty list would effectively disable metrics export.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backends")]
		public string[] Backends { get; set; }
	}
	
	/// <summary>
	/// PolicyContentSpec defines the user's desired content configuration on the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyControllerPolicyContentSpec
	{
		
		/// <summary>
		/// map of bundle name to BundleInstallSpec. The bundle name maps to the `bundleName` key in the `policycontroller.gke.io/constraintData` annotation on a constraint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bundles")]
		public System.Collections.Generic.Dictionary<string, PolicyControllerBundleInstallSpec> Bundles { get; set; }
		
		/// <summary>
		/// The config specifying which default library templates to install.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="templateLibrary")]
		public PolicyControllerTemplateLibraryConfig TemplateLibrary { get; set; }
	}
	
	/// <summary>
	/// BundleInstallSpec is the specification configuration for a single managed bundle.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyControllerBundleInstallSpec
	{
		
		/// <summary>
		/// The set of namespaces to be exempted from the bundle.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptedNamespaces")]
		public string[] ExemptedNamespaces { get; set; }
	}
	
	/// <summary>
	/// The config specifying which default library templates to install.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyControllerTemplateLibraryConfig
	{
		
		/// <summary>
		/// Configures the manner in which the template library is installed on the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installation")]
		public System.Nullable<PolicyControllerTemplateLibraryConfigInstallation> Installation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PolicyControllerTemplateLibraryConfigInstallation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSTALLATION_UNSPECIFIED")]
		INSTALLATION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_INSTALLED")]
		NOT_INSTALLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALL")]
		ALL = 2,
	}
	
	/// <summary>
	/// The state of ConfigSync's deployment on a cluster
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigManagementConfigSyncDeploymentState
	{
		
		/// <summary>
		/// Deployment state of admission-webhook
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="admissionWebhook")]
		public System.Nullable<ConfigManagementConfigSyncDeploymentStateAdmissionWebhook> AdmissionWebhook { get; set; }
		
		/// <summary>
		/// Deployment state of the git-sync pod
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gitSync")]
		public ConfigManagementConfigSyncDeploymentStateAdmissionWebhook GitSync { get; set; }
		
		/// <summary>
		/// Deployment state of the importer pod
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="importer")]
		public ConfigManagementConfigSyncDeploymentStateAdmissionWebhook Importer { get; set; }
		
		/// <summary>
		/// Deployment state of the monitor pod
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitor")]
		public ConfigManagementConfigSyncDeploymentStateAdmissionWebhook Monitor { get; set; }
		
		/// <summary>
		/// Deployment state of reconciler-manager pod
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reconcilerManager")]
		public ConfigManagementConfigSyncDeploymentStateAdmissionWebhook ReconcilerManager { get; set; }
		
		/// <summary>
		/// Deployment state of root-reconciler
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rootReconciler")]
		public ConfigManagementConfigSyncDeploymentStateAdmissionWebhook RootReconciler { get; set; }
		
		/// <summary>
		/// Deployment state of the syncer pod
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syncer")]
		public ConfigManagementConfigSyncDeploymentStateAdmissionWebhook Syncer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConfigManagementConfigSyncDeploymentStateAdmissionWebhook
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEPLOYMENT_STATE_UNSPECIFIED")]
		DEPLOYMENT_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_INSTALLED")]
		NOT_INSTALLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSTALLED")]
		INSTALLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR")]
		ERROR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 4,
	}
	
	/// <summary>
	/// Errors pertaining to the installation of Config Sync
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigManagementConfigSyncError
	{
		
		/// <summary>
		/// A string representing the user facing error message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
	}
	
	/// <summary>
	/// State information for ConfigSync
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigManagementConfigSyncState
	{
		
		/// <summary>
		/// The state of ConfigSync's deployment on a cluster
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deploymentState")]
		public ConfigManagementConfigSyncDeploymentState DeploymentState { get; set; }
		
		/// <summary>
		/// Errors pertaining to the installation of Config Sync.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public ConfigManagementConfigSyncError[] Errors { get; set; }
		
		/// <summary>
		/// State indicating an ACM's progress syncing configurations to a cluster
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syncState")]
		public ConfigManagementSyncState SyncState { get; set; }
		
		/// <summary>
		/// Specific versioning information pertaining to ConfigSync's Pods
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public ConfigManagementConfigSyncVersion Version { get; set; }
	}
	
	/// <summary>
	/// State indicating an ACM's progress syncing configurations to a cluster
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigManagementSyncState
	{
		
		/// <summary>
		/// Sync status code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<ConfigManagementSyncStateCode> Code { get; set; }
		
		/// <summary>
		/// A list of errors resulting from problematic configs. This list will be truncated after 100 errors, although it is unlikely for that many errors to simultaneously exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public ConfigManagementSyncError[] Errors { get; set; }
		
		/// <summary>
		/// Token indicating the state of the importer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="importToken")]
		public string ImportToken { get; set; }
		
		/// <summary>
		/// Deprecated: use last_sync_time instead. Timestamp of when ACM last successfully synced the repo The time format is specified in https://golang.org/pkg/time/#Time.String
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastSync")]
		public string LastSync { get; set; }
		
		/// <summary>
		/// Timestamp type of when ACM last successfully synced the repo
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastSyncTime")]
		public string LastSyncTime { get; set; }
		
		/// <summary>
		/// Token indicating the state of the repo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceToken")]
		public string SourceToken { get; set; }
		
		/// <summary>
		/// Token indicating the state of the syncer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syncToken")]
		public string SyncToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConfigManagementSyncStateCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SYNC_CODE_UNSPECIFIED")]
		SYNC_CODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SYNCED")]
		SYNCED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR")]
		ERROR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_CONFIGURED")]
		NOT_CONFIGURED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_INSTALLED")]
		NOT_INSTALLED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNAUTHORIZED")]
		UNAUTHORIZED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNREACHABLE")]
		UNREACHABLE = 7,
	}
	
	/// <summary>
	/// An ACM created error representing a problem syncing configurations
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigManagementSyncError
	{
		
		/// <summary>
		/// An ACM defined error code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A description of the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// A list of config(s) associated with the error, if any
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorResources")]
		public ConfigManagementErrorResource[] ErrorResources { get; set; }
	}
	
	/// <summary>
	/// Model for a config file in the git repo with an associated Sync error
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigManagementErrorResource
	{
		
		/// <summary>
		/// A Kubernetes object's GVK
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceGvk")]
		public ConfigManagementGroupVersionKind ResourceGvk { get; set; }
		
		/// <summary>
		/// Metadata name of the resource that is causing an error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// Namespace of the resource that is causing an error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceNamespace")]
		public string ResourceNamespace { get; set; }
		
		/// <summary>
		/// Path in the git repo of the erroneous config
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourcePath")]
		public string SourcePath { get; set; }
	}
	
	/// <summary>
	/// A Kubernetes object's GVK
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigManagementGroupVersionKind
	{
		
		/// <summary>
		/// Kubernetes Group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group")]
		public string Group { get; set; }
		
		/// <summary>
		/// Kubernetes Kind
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Kubernetes Version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Specific versioning information pertaining to ConfigSync's Pods
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigManagementConfigSyncVersion
	{
		
		/// <summary>
		/// Version of the deployed admission_webhook pod
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="admissionWebhook")]
		public string AdmissionWebhook { get; set; }
		
		/// <summary>
		/// Version of the deployed git-sync pod
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gitSync")]
		public string GitSync { get; set; }
		
		/// <summary>
		/// Version of the deployed importer pod
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="importer")]
		public string Importer { get; set; }
		
		/// <summary>
		/// Version of the deployed monitor pod
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitor")]
		public string Monitor { get; set; }
		
		/// <summary>
		/// Version of the deployed reconciler-manager pod
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reconcilerManager")]
		public string ReconcilerManager { get; set; }
		
		/// <summary>
		/// Version of the deployed reconciler container in root-reconciler pod
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rootReconciler")]
		public string RootReconciler { get; set; }
		
		/// <summary>
		/// Version of the deployed syncer pod
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syncer")]
		public string Syncer { get; set; }
	}
	
	/// <summary>
	/// State of Policy Controller installation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigManagementGatekeeperDeploymentState
	{
		
		/// <summary>
		/// Status of gatekeeper-audit deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gatekeeperAudit")]
		public ConfigManagementConfigSyncDeploymentStateAdmissionWebhook GatekeeperAudit { get; set; }
		
		/// <summary>
		/// Status of gatekeeper-controller-manager pod.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gatekeeperControllerManagerState")]
		public ConfigManagementConfigSyncDeploymentStateAdmissionWebhook GatekeeperControllerManagerState { get; set; }
		
		/// <summary>
		/// Status of the pod serving the mutation webhook.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gatekeeperMutation")]
		public ConfigManagementConfigSyncDeploymentStateAdmissionWebhook GatekeeperMutation { get; set; }
	}
	
	/// <summary>
	/// Deployment state for Hierarchy Controller
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigManagementHierarchyControllerDeploymentState
	{
		
		/// <summary>
		/// The deployment state for Hierarchy Controller extension (e.g. v0.7.0-hc.1)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extension")]
		public ConfigManagementConfigSyncDeploymentStateAdmissionWebhook Extension { get; set; }
		
		/// <summary>
		/// The deployment state for open source HNC (e.g. v0.7.0-hc.0)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hnc")]
		public ConfigManagementConfigSyncDeploymentStateAdmissionWebhook Hnc { get; set; }
	}
	
	/// <summary>
	/// State for Hierarchy Controller
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigManagementHierarchyControllerState
	{
		
		/// <summary>
		/// Deployment state for Hierarchy Controller
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public ConfigManagementHierarchyControllerDeploymentState State { get; set; }
		
		/// <summary>
		/// Version for Hierarchy Controller
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public ConfigManagementHierarchyControllerVersion Version { get; set; }
	}
	
	/// <summary>
	/// Version for Hierarchy Controller
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigManagementHierarchyControllerVersion
	{
		
		/// <summary>
		/// Version for Hierarchy Controller extension
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extension")]
		public string Extension { get; set; }
		
		/// <summary>
		/// Version for open source HNC
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hnc")]
		public string Hnc { get; set; }
	}
	
	/// <summary>
	/// Errors pertaining to the installation of ACM
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigManagementInstallError
	{
		
		/// <summary>
		/// A string representing the user facing error message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
	}
	
	/// <summary>
	/// **Anthos Config Management**: State for a single cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigManagementMembershipState
	{
		
		/// <summary>
		/// This field is set to the `cluster_name` field of the Membership Spec if it is not empty. Otherwise, it is set to the cluster's fleet membership name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterName")]
		public string ClusterName { get; set; }
		
		/// <summary>
		/// State information for ConfigSync
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configSyncState")]
		public ConfigManagementConfigSyncState ConfigSyncState { get; set; }
		
		/// <summary>
		/// State for Hierarchy Controller
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hierarchyControllerState")]
		public ConfigManagementHierarchyControllerState HierarchyControllerState { get; set; }
		
		/// <summary>
		/// **Anthos Config Management**: Configuration for a single cluster. Intended to parallel the ConfigManagement CR.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membershipSpec")]
		public ConfigManagementMembershipSpec MembershipSpec { get; set; }
		
		/// <summary>
		/// State information for an ACM's Operator
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatorState")]
		public ConfigManagementOperatorState OperatorState { get; set; }
		
		/// <summary>
		/// State for PolicyControllerState.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyControllerState")]
		public ConfigManagementPolicyControllerState PolicyControllerState { get; set; }
	}
	
	/// <summary>
	/// State information for an ACM's Operator
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigManagementOperatorState
	{
		
		/// <summary>
		/// The state of the Operator's deployment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deploymentState")]
		public ConfigManagementConfigSyncDeploymentStateAdmissionWebhook DeploymentState { get; set; }
		
		/// <summary>
		/// Install errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public ConfigManagementInstallError[] Errors { get; set; }
		
		/// <summary>
		/// The semenatic version number of the operator
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// State for PolicyControllerState.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigManagementPolicyControllerState
	{
		
		/// <summary>
		/// State of Policy Controller installation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deploymentState")]
		public ConfigManagementGatekeeperDeploymentState DeploymentState { get; set; }
		
		/// <summary>
		/// State for the migration of PolicyController from ACM -> PoCo Hub.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="migration")]
		public ConfigManagementPolicyControllerMigration Migration { get; set; }
		
		/// <summary>
		/// The build version of Gatekeeper Policy Controller is using.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public ConfigManagementPolicyControllerVersion Version { get; set; }
	}
	
	/// <summary>
	/// State for the migration of PolicyController from ACM -> PoCo Hub.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigManagementPolicyControllerMigration
	{
		
		/// <summary>
		/// Last time this membership spec was copied to PoCo feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copyTime")]
		public string CopyTime { get; set; }
		
		/// <summary>
		/// Stage of the migration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stage")]
		public System.Nullable<ConfigManagementPolicyControllerMigrationStage> Stage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConfigManagementPolicyControllerMigrationStage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STAGE_UNSPECIFIED")]
		STAGE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACM_MANAGED")]
		ACM_MANAGED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POCO_MANAGED")]
		POCO_MANAGED = 2,
	}
	
	/// <summary>
	/// The build version of Gatekeeper Policy Controller is using.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigManagementPolicyControllerVersion
	{
		
		/// <summary>
		/// The gatekeeper image tag that is composed of ACM version, git tag, build number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// ConnectAgentResource represents a Kubernetes resource manifest for Connect Agent deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectAgentResource
	{
		
		/// <summary>
		/// YAML manifest of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manifest")]
		public string Manifest { get; set; }
		
		/// <summary>
		/// TypeMeta is the type information needed for content unmarshalling of Kubernetes resources in the manifest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TypeMeta Type { get; set; }
	}
	
	/// <summary>
	/// TypeMeta is the type information needed for content unmarshalling of Kubernetes resources in the manifest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TypeMeta
	{
		
		/// <summary>
		/// APIVersion of the resource (e.g. v1).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// Kind of the resource (e.g. Deployment).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// DefaultClusterConfig describes the default cluster configurations to be applied to all clusters born-in-fleet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DefaultClusterConfig
	{
		
		/// <summary>
		/// BinaryAuthorizationConfig defines the fleet level configuration of binary authorization feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="binaryAuthorizationConfig")]
		public BinaryAuthorizationConfig BinaryAuthorizationConfig { get; set; }
		
		/// <summary>
		/// SecurityPostureConfig defines the flags needed to enable/disable features for the Security Posture API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityPostureConfig")]
		public SecurityPostureConfig SecurityPostureConfig { get; set; }
	}
	
	/// <summary>
	/// SecurityPostureConfig defines the flags needed to enable/disable features for the Security Posture API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SecurityPostureConfig
	{
		
		/// <summary>
		/// Sets which mode to use for Security Posture features.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public System.Nullable<SecurityPostureConfigMode> Mode { get; set; }
		
		/// <summary>
		/// Sets which mode to use for vulnerability scanning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vulnerabilityMode")]
		public System.Nullable<SecurityPostureConfigVulnerabilityMode> VulnerabilityMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SecurityPostureConfigMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MODE_UNSPECIFIED")]
		MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BASIC")]
		BASIC = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SecurityPostureConfigVulnerabilityMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VULNERABILITY_MODE_UNSPECIFIED")]
		VULNERABILITY_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VULNERABILITY_DISABLED")]
		VULNERABILITY_DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VULNERABILITY_BASIC")]
		VULNERABILITY_BASIC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VULNERABILITY_ENTERPRISE")]
		VULNERABILITY_ENTERPRISE = 3,
	}
	
	/// <summary>
	/// EdgeCluster contains information specific to Google Edge Clusters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EdgeCluster
	{
		
		/// <summary>
		/// Immutable. Self-link of the Google Cloud resource for the Edge Cluster. For example: //edgecontainer.googleapis.com/projects/my-project/locations/us-west1-a/clusters/my-cluster
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceLink")]
		public string ResourceLink { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Empty
	{
	}
	
	/// <summary>
	/// Feature represents the settings and status of any Hub Feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Feature
	{
		
		/// <summary>
		/// Output only. When the Feature resource was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. When the Feature resource was deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteTime")]
		public string DeleteTime { get; set; }
		
		/// <summary>
		/// CommonFleetDefaultMemberConfigSpec contains default configuration information for memberships of a fleet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fleetDefaultMemberConfig")]
		public CommonFleetDefaultMemberConfigSpec FleetDefaultMemberConfig { get; set; }
		
		/// <summary>
		/// Labels for this Feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Optional. Membership-specific configuration for this Feature. If this Feature does not support any per-Membership configuration, this field may be unused. The keys indicate which Membership the configuration is for, in the form: `projects/{p}/locations/{l}/memberships/{m}` Where {p} is the project, {l} is a valid location and {m} is a valid Membership in this project at that location. {p} WILL match the Feature's project. {p} will always be returned as the project number, but the project ID is also accepted during input. If the same Membership is specified in the map twice (using the project ID form, and the project number form), exactly ONE of the entries will be saved, with no guarantees as to which. For this reason, it is recommended the same format be used for all entries when mutating a Feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membershipSpecs")]
		public System.Collections.Generic.Dictionary<string, MembershipFeatureSpec> MembershipSpecs { get; set; }
		
		/// <summary>
		/// Output only. Membership-specific Feature status. If this Feature does report any per-Membership status, this field may be unused. The keys indicate which Membership the state is for, in the form: `projects/{p}/locations/{l}/memberships/{m}` Where {p} is the project number, {l} is a valid location and {m} is a valid Membership in this project at that location. {p} MUST match the Feature's project number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membershipStates")]
		public System.Collections.Generic.Dictionary<string, MembershipFeatureState> MembershipStates { get; set; }
		
		/// <summary>
		/// Output only. The full, unique name of this Feature resource in the format `projects/*/locations/*/features/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// FeatureResourceState describes the state of a Feature *resource* in the GkeHub API. See `FeatureState` for the "running state" of the Feature in the Hub and across Memberships.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceState")]
		public FeatureResourceState ResourceState { get; set; }
		
		/// <summary>
		/// Optional. Scope-specific configuration for this Feature. If this Feature does not support any per-Scope configuration, this field may be unused. The keys indicate which Scope the configuration is for, in the form: `projects/{p}/locations/global/scopes/{s}` Where {p} is the project, {s} is a valid Scope in this project. {p} WILL match the Feature's project. {p} will always be returned as the project number, but the project ID is also accepted during input. If the same Scope is specified in the map twice (using the project ID form, and the project number form), exactly ONE of the entries will be saved, with no guarantees as to which. For this reason, it is recommended the same format be used for all entries when mutating a Feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scopeSpecs")]
		public System.Collections.Generic.Dictionary<string, ScopeFeatureSpec> ScopeSpecs { get; set; }
		
		/// <summary>
		/// Output only. Scope-specific Feature status. If this Feature does report any per-Scope status, this field may be unused. The keys indicate which Scope the state is for, in the form: `projects/{p}/locations/global/scopes/{s}` Where {p} is the project, {s} is a valid Scope in this project. {p} WILL match the Feature's project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scopeStates")]
		public System.Collections.Generic.Dictionary<string, ScopeFeatureState> ScopeStates { get; set; }
		
		/// <summary>
		/// CommonFeatureSpec contains Hub-wide configuration information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public CommonFeatureSpec Spec { get; set; }
		
		/// <summary>
		/// CommonFeatureState contains Hub-wide Feature status information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public CommonFeatureState State { get; set; }
		
		/// <summary>
		/// Output only. When the Feature resource was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// MembershipFeatureSpec contains configuration information for a single Membership. NOTE: Please use snake case in your feature name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MembershipFeatureSpec
	{
		
		/// <summary>
		/// **Anthos Config Management**: Configuration for a single cluster. Intended to parallel the ConfigManagement CR.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configmanagement")]
		public ConfigManagementMembershipSpec Configmanagement { get; set; }
		
		/// <summary>
		/// **FleetObservability**: The membership-specific input for FleetObservability feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fleetobservability")]
		public FleetObservabilityMembershipSpec Fleetobservability { get; set; }
		
		/// <summary>
		/// **Anthos Identity Service**: Configuration for a single Membership.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identityservice")]
		public IdentityServiceMembershipSpec Identityservice { get; set; }
		
		/// <summary>
		/// **Service Mesh**: Spec for a single Membership for the servicemesh feature
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mesh")]
		public ServiceMeshMembershipSpec Mesh { get; set; }
		
		/// <summary>
		/// Origin defines where this MembershipFeatureSpec originated from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public Origin Origin { get; set; }
		
		/// <summary>
		/// **Policy Controller**: Configuration for a single cluster. Intended to parallel the PolicyController CR.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policycontroller")]
		public PolicyControllerMembershipSpec Policycontroller { get; set; }
	}
	
	/// <summary>
	/// **FleetObservability**: The membership-specific input for FleetObservability feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FleetObservabilityMembershipSpec
	{
	}
	
	/// <summary>
	/// Origin defines where this MembershipFeatureSpec originated from.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Origin
	{
		
		/// <summary>
		/// Type specifies which type of origin is set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<OriginType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OriginType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPE_UNSPECIFIED")]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FLEET")]
		FLEET = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FLEET_OUT_OF_SYNC")]
		FLEET_OUT_OF_SYNC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USER")]
		USER = 3,
	}
	
	/// <summary>
	/// MembershipFeatureState contains Feature status information for a single Membership.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MembershipFeatureState
	{
		
		/// <summary>
		/// State for App Dev Exp Feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appdevexperience")]
		public AppDevExperienceFeatureState Appdevexperience { get; set; }
		
		/// <summary>
		/// Per-membership state for this feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterupgrade")]
		public ClusterUpgradeMembershipState Clusterupgrade { get; set; }
		
		/// <summary>
		/// **Anthos Config Management**: State for a single cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configmanagement")]
		public ConfigManagementMembershipState Configmanagement { get; set; }
		
		/// <summary>
		/// **FleetObservability**: Membership-specific Feature state for fleetobservability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fleetobservability")]
		public FleetObservabilityMembershipState Fleetobservability { get; set; }
		
		/// <summary>
		/// **Anthos Identity Service**: State for a single Membership.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identityservice")]
		public IdentityServiceMembershipState Identityservice { get; set; }
		
		/// <summary>
		/// **Policy Controller**: State for a single cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policycontroller")]
		public PolicyControllerMembershipState Policycontroller { get; set; }
		
		/// <summary>
		/// **Service Mesh**: State for a single Membership, as analyzed by the Service Mesh Hub Controller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servicemesh")]
		public ServiceMeshMembershipState Servicemesh { get; set; }
		
		/// <summary>
		/// FeatureState describes the high-level state of a Feature. It may be used to describe a Feature's state at the environ-level, or per-membershop, depending on the context.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public FeatureState State { get; set; }
	}
	
	/// <summary>
	/// **FleetObservability**: Membership-specific Feature state for fleetobservability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FleetObservabilityMembershipState
	{
	}
	
	/// <summary>
	/// **Anthos Identity Service**: State for a single Membership.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IdentityServiceMembershipState
	{
		
		/// <summary>
		/// The reason of the failure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureReason")]
		public string FailureReason { get; set; }
		
		/// <summary>
		/// Installed AIS version. This is the AIS version installed on this member. The values makes sense iff state is OK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installedVersion")]
		public string InstalledVersion { get; set; }
		
		/// <summary>
		/// **Anthos Identity Service**: Configuration for a single Membership.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memberConfig")]
		public IdentityServiceMembershipSpec MemberConfig { get; set; }
		
		/// <summary>
		/// Deployment state on this member
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<IdentityServiceMembershipStateState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum IdentityServiceMembershipStateState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEPLOYMENT_STATE_UNSPECIFIED")]
		DEPLOYMENT_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OK")]
		OK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR")]
		ERROR = 2,
	}
	
	/// <summary>
	/// **Policy Controller**: State for a single cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyControllerMembershipState
	{
		
		/// <summary>
		/// Currently these include (also serving as map keys): 1. "admission" 2. "audit" 3. "mutation"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="componentStates")]
		public System.Collections.Generic.Dictionary<string, PolicyControllerOnClusterState> ComponentStates { get; set; }
		
		/// <summary>
		/// The state of the policy controller policy content
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyContentState")]
		public PolicyControllerPolicyContentState PolicyContentState { get; set; }
		
		/// <summary>
		/// The overall Policy Controller lifecycle state observed by the Hub Feature controller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public PolicyControllerOnClusterStateState State { get; set; }
	}
	
	/// <summary>
	/// OnClusterState represents the state of a sub-component of Policy Controller.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyControllerOnClusterState
	{
		
		/// <summary>
		/// Surface potential errors or information logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// The lifecycle state of this component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<PolicyControllerOnClusterStateState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PolicyControllerOnClusterStateState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LIFECYCLE_STATE_UNSPECIFIED")]
		LIFECYCLE_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_INSTALLED")]
		NOT_INSTALLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSTALLING")]
		INSTALLING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATING")]
		UPDATING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DECOMMISSIONING")]
		DECOMMISSIONING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLUSTER_ERROR")]
		CLUSTER_ERROR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HUB_ERROR")]
		HUB_ERROR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUSPENDED")]
		SUSPENDED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DETACHED")]
		DETACHED = 9,
	}
	
	/// <summary>
	/// The state of the policy controller policy content
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyControllerPolicyContentState
	{
		
		/// <summary>
		/// The state of the any bundles included in the chosen version of the manifest
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bundleStates")]
		public System.Collections.Generic.Dictionary<string, PolicyControllerOnClusterState> BundleStates { get; set; }
		
		/// <summary>
		/// OnClusterState represents the state of a sub-component of Policy Controller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referentialSyncConfigState")]
		public PolicyControllerOnClusterState ReferentialSyncConfigState { get; set; }
		
		/// <summary>
		/// OnClusterState represents the state of a sub-component of Policy Controller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="templateLibraryState")]
		public PolicyControllerOnClusterState TemplateLibraryState { get; set; }
	}
	
	/// <summary>
	/// **Service Mesh**: State for a single Membership, as analyzed by the Service Mesh Hub Controller.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceMeshMembershipState
	{
		
		/// <summary>
		/// Status of control plane management.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="controlPlaneManagement")]
		public ServiceMeshControlPlaneManagement ControlPlaneManagement { get; set; }
		
		/// <summary>
		/// Status of data plane management. Only reported per-member.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataPlaneManagement")]
		public ServiceMeshDataPlaneManagement DataPlaneManagement { get; set; }
	}
	
	/// <summary>
	/// Status of control plane management.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceMeshControlPlaneManagement
	{
		
		/// <summary>
		/// Explanation of state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public ServiceMeshStatusDetails[] Details { get; set; }
		
		/// <summary>
		/// LifecycleState of control plane management.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ServiceMeshControlPlaneManagementState> State { get; set; }
	}
	
	/// <summary>
	/// Structured and human-readable details for a status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceMeshStatusDetails
	{
		
		/// <summary>
		/// A machine-readable code that further describes a broad status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Human-readable explanation of code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ServiceMeshControlPlaneManagementState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LIFECYCLE_STATE_UNSPECIFIED")]
		LIFECYCLE_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED_PRECONDITION")]
		FAILED_PRECONDITION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROVISIONING")]
		PROVISIONING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STALLED")]
		STALLED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NEEDS_ATTENTION")]
		NEEDS_ATTENTION = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEGRADED")]
		DEGRADED = 7,
	}
	
	/// <summary>
	/// Status of data plane management. Only reported per-member.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceMeshDataPlaneManagement
	{
		
		/// <summary>
		/// Explanation of the status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public ServiceMeshStatusDetails[] Details { get; set; }
		
		/// <summary>
		/// Lifecycle status of data plane management.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public ServiceMeshControlPlaneManagementState State { get; set; }
	}
	
	/// <summary>
	/// FeatureResourceState describes the state of a Feature *resource* in the GkeHub API. See `FeatureState` for the "running state" of the Feature in the Hub and across Memberships.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FeatureResourceState
	{
		
		/// <summary>
		/// The current state of the Feature resource in the Hub API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<FeatureResourceStateState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FeatureResourceStateState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STATE_UNSPECIFIED")]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLING")]
		ENABLING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLING")]
		DISABLING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATING")]
		UPDATING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SERVICE_UPDATING")]
		SERVICE_UPDATING = 5,
	}
	
	/// <summary>
	/// ScopeFeatureSpec contains feature specs for a fleet scope.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScopeFeatureSpec
	{
	}
	
	/// <summary>
	/// ScopeFeatureState contains Scope-wide Feature status information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScopeFeatureState
	{
		
		/// <summary>
		/// FeatureState describes the high-level state of a Feature. It may be used to describe a Feature's state at the environ-level, or per-membershop, depending on the context.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public FeatureState State { get; set; }
	}
	
	/// <summary>
	/// Fleet contains the Fleet-wide metadata and configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Fleet
	{
		
		/// <summary>
		/// Output only. When the Fleet was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// DefaultClusterConfig describes the default cluster configurations to be applied to all clusters born-in-fleet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultClusterConfig")]
		public DefaultClusterConfig DefaultClusterConfig { get; set; }
		
		/// <summary>
		/// Output only. When the Fleet was deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteTime")]
		public string DeleteTime { get; set; }
		
		/// <summary>
		/// Optional. A user-assigned display name of the Fleet. When present, it must be between 4 to 30 characters. Allowed characters are: lowercase and uppercase letters, numbers, hyphen, single-quote, double-quote, space, and exclamation point. Example: `Production Fleet`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Optional. Labels for this Fleet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Output only. The full, unique resource name of this fleet in the format of `projects/{project}/locations/{location}/fleets/{fleet}`. Each Google Cloud project can have at most one fleet resource, named "default".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// FleetLifecycleState describes the state of a Fleet resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public FleetLifecycleState State { get; set; }
		
		/// <summary>
		/// Output only. Google-generated UUID for this resource. This is unique across all Fleet resources. If a Fleet resource is deleted and another resource with the same name is created, it gets a different uid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
		
		/// <summary>
		/// Output only. When the Fleet was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// FleetLifecycleState describes the state of a Fleet resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FleetLifecycleState
	{
		
		/// <summary>
		/// Output only. The current state of the Fleet resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<FleetLifecycleStateCode> Code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FleetLifecycleStateCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CODE_UNSPECIFIED")]
		CODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATING")]
		CREATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="READY")]
		READY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETING")]
		DELETING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATING")]
		UPDATING = 4,
	}
	
	/// <summary>
	/// GenerateConnectManifestResponse contains manifest information for installing/upgrading a Connect agent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GenerateConnectManifestResponse
	{
		
		/// <summary>
		/// The ordered list of Kubernetes resources that need to be applied to the cluster for GKE Connect agent installation/upgrade.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manifest")]
		public ConnectAgentResource[] Manifest { get; set; }
	}
	
	/// <summary>
	/// GkeCluster contains information specific to GKE clusters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GkeCluster
	{
		
		/// <summary>
		/// Output only. If cluster_missing is set then it denotes that the GKE cluster no longer exists in the GKE Control Plane.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterMissing")]
		public System.Nullable<System.Boolean> ClusterMissing { get; set; }
		
		/// <summary>
		/// Immutable. Self-link of the Google Cloud resource for the GKE cluster. For example: //container.googleapis.com/projects/my-project/locations/us-west1-a/clusters/my-cluster Zonal clusters are also supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceLink")]
		public string ResourceLink { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleRpcStatus
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// KubernetesMetadata provides informational metadata for Memberships representing Kubernetes clusters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KubernetesMetadata
	{
		
		/// <summary>
		/// Output only. Kubernetes API server version string as reported by `/version`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kubernetesApiServerVersion")]
		public string KubernetesApiServerVersion { get; set; }
		
		/// <summary>
		/// Output only. The total memory capacity as reported by the sum of all Kubernetes nodes resources, defined in MB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memoryMb")]
		public System.Nullable<System.Int32> MemoryMb { get; set; }
		
		/// <summary>
		/// Output only. Node count as reported by Kubernetes nodes resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeCount")]
		public System.Nullable<System.Int32> NodeCount { get; set; }
		
		/// <summary>
		/// Output only. Node providerID as reported by the first node in the list of nodes on the Kubernetes endpoint. On Kubernetes platforms that support zero-node clusters (like GKE-on-GCP), the node_count will be zero and the node_provider_id will be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeProviderId")]
		public string NodeProviderId { get; set; }
		
		/// <summary>
		/// Output only. The time at which these details were last updated. This update_time is different from the Membership-level update_time since EndpointDetails are updated internally for API consumers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// Output only. vCPU count as reported by Kubernetes nodes resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vcpuCount")]
		public System.Nullable<System.Int32> VcpuCount { get; set; }
	}
	
	/// <summary>
	/// KubernetesResource contains the YAML manifests and configuration for Membership Kubernetes resources in the cluster. After CreateMembership or UpdateMembership, these resources should be re-applied in the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KubernetesResource
	{
		
		/// <summary>
		/// Output only. The Kubernetes resources for installing the GKE Connect agent This field is only populated in the Membership returned from a successful long-running operation from CreateMembership or UpdateMembership. It is not populated during normal GetMembership or ListMemberships requests. To get the resource manifest after the initial registration, the caller should make a UpdateMembership call with an empty field mask.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectResources")]
		public ResourceManifest[] ConnectResources { get; set; }
		
		/// <summary>
		/// Input only. The YAML representation of the Membership CR. This field is ignored for GKE clusters where Hub can read the CR directly. Callers should provide the CR that is currently present in the cluster during CreateMembership or UpdateMembership, or leave this field empty if none exists. The CR manifest is used to validate the cluster has not been registered with another Membership.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membershipCrManifest")]
		public string MembershipCrManifest { get; set; }
		
		/// <summary>
		/// Output only. Additional Kubernetes resources that need to be applied to the cluster after Membership creation, and after every update. This field is only populated in the Membership returned from a successful long-running operation from CreateMembership or UpdateMembership. It is not populated during normal GetMembership or ListMemberships requests. To get the resource manifest after the initial registration, the caller should make a UpdateMembership call with an empty field mask.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membershipResources")]
		public ResourceManifest[] MembershipResources { get; set; }
		
		/// <summary>
		/// ResourceOptions represent options for Kubernetes resource generation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOptions")]
		public ResourceOptions ResourceOptions { get; set; }
	}
	
	/// <summary>
	/// ResourceManifest represents a single Kubernetes resource to be applied to the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceManifest
	{
		
		/// <summary>
		/// Whether the resource provided in the manifest is `cluster_scoped`. If unset, the manifest is assumed to be namespace scoped. This field is used for REST mapping when applying the resource in a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterScoped")]
		public System.Nullable<System.Boolean> ClusterScoped { get; set; }
		
		/// <summary>
		/// YAML manifest of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manifest")]
		public string Manifest { get; set; }
	}
	
	/// <summary>
	/// ResourceOptions represent options for Kubernetes resource generation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceOptions
	{
		
		/// <summary>
		/// Optional. The Connect agent version to use for connect_resources. Defaults to the latest GKE Connect version. The version must be a currently supported version, obsolete versions will be rejected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectVersion")]
		public string ConnectVersion { get; set; }
		
		/// <summary>
		/// Optional. Major version of the Kubernetes cluster. This is only used to determine which version to use for the CustomResourceDefinition resources, `apiextensions/v1beta1` or`apiextensions/v1`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="k8sVersion")]
		public string K8sVersion { get; set; }
		
		/// <summary>
		/// Optional. Use `apiextensions/v1beta1` instead of `apiextensions/v1` for CustomResourceDefinition resources. This option should be set for clusters with Kubernetes apiserver versions <1.16.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="v1beta1Crd")]
		public System.Nullable<System.Boolean> V1beta1Crd { get; set; }
	}
	
	/// <summary>
	/// Response message for the `GkeHub.ListFeatures` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListFeaturesResponse
	{
		
		/// <summary>
		/// A token to request the next page of resources from the `ListFeatures` method. The value of an empty string means that there are no more resources to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of matching Features
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public Feature[] Resources { get; set; }
	}
	
	/// <summary>
	/// Response message for the `GkeHub.ListFleetsResponse` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListFleetsResponse
	{
		
		/// <summary>
		/// The list of matching fleets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fleets")]
		public Fleet[] Fleets { get; set; }
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages. The token is only valid for 1h.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The response message for Locations.ListLocations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLocationsResponse
	{
		
		/// <summary>
		/// A list of locations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public Location[] Locations { get; set; }
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A resource that represents a Google Cloud location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Location
	{
		
		/// <summary>
		/// The friendly name for this location, typically a nearby city name. For example, "Tokyo".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The canonical id for this location. For example: `"us-east1"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		/// <summary>
		/// Service-specific metadata. For example the available capacity at the given location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// List of MembershipBindings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMembershipBindingsResponse
	{
		
		/// <summary>
		/// The list of membership_bindings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membershipBindings")]
		public MembershipBinding[] MembershipBindings { get; set; }
		
		/// <summary>
		/// A token to request the next page of resources from the `ListMembershipBindings` method. The value of an empty string means that there are no more resources to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// MembershipBinding is a subresource of a Membership, representing what Fleet Scopes (or other, future Fleet resources) a Membership is bound to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MembershipBinding
	{
		
		/// <summary>
		/// Output only. When the membership binding was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. When the membership binding was deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteTime")]
		public string DeleteTime { get; set; }
		
		/// <summary>
		/// Optional. Labels for this MembershipBinding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The resource name for the membershipbinding itself `projects/{project}/locations/{location}/memberships/{membership}/bindings/{membershipbinding}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A Scope resource name in the format `projects/*/locations/*/scopes/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
		
		/// <summary>
		/// MembershipBindingLifecycleState describes the state of a Binding resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public MembershipBindingLifecycleState State { get; set; }
		
		/// <summary>
		/// Output only. Google-generated UUID for this resource. This is unique across all membershipbinding resources. If a membershipbinding resource is deleted and another resource with the same name is created, it gets a different uid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
		
		/// <summary>
		/// Output only. When the membership binding was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// MembershipBindingLifecycleState describes the state of a Binding resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MembershipBindingLifecycleState
	{
		
		/// <summary>
		/// Output only. The current state of the MembershipBinding resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public FleetLifecycleStateCode Code { get; set; }
	}
	
	/// <summary>
	/// Response message for the `GkeHub.ListMemberships` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMembershipsResponse
	{
		
		/// <summary>
		/// A token to request the next page of resources from the `ListMemberships` method. The value of an empty string means that there are no more resources to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of matching Memberships.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public Membership[] Resources { get; set; }
		
		/// <summary>
		/// List of locations that could not be reached while fetching this list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// Membership contains information about a member cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Membership
	{
		
		/// <summary>
		/// Authority encodes how Google will recognize identities from this Membership. See the workload identity documentation for more details: https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authority")]
		public Authority Authority { get; set; }
		
		/// <summary>
		/// Output only. When the Membership was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. When the Membership was deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteTime")]
		public string DeleteTime { get; set; }
		
		/// <summary>
		/// Output only. Description of this membership, limited to 63 characters. Must match the regex: `a-zA-Z0-9*` This field is present for legacy purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// MembershipEndpoint contains information needed to contact a Kubernetes API, endpoint and any additional Kubernetes metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public MembershipEndpoint Endpoint { get; set; }
		
		/// <summary>
		/// Optional. An externally-generated and managed ID for this Membership. This ID may be modified after creation, but this is not recommended. The ID must match the regex: `a-zA-Z0-9*` If this Membership represents a Kubernetes cluster, this value should be set to the UID of the `kube-system` namespace object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalId")]
		public string ExternalId { get; set; }
		
		/// <summary>
		/// Optional. Labels for this membership.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Output only. For clusters using Connect, the timestamp of the most recent connection established with Google Cloud. This time is updated every several minutes, not continuously. For clusters that do not use GKE Connect, or that have never connected successfully, this field will be unset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastConnectionTime")]
		public string LastConnectionTime { get; set; }
		
		/// <summary>
		/// MonitoringConfig informs Fleet-based applications/services/UIs how the metrics for the underlying cluster is reported to cloud monitoring services. It can be set from empty to non-empty, but can't be mutated directly to prevent accidentally breaking the constinousty of metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitoringConfig")]
		public MonitoringConfig MonitoringConfig { get; set; }
		
		/// <summary>
		/// Output only. The full, unique name of this Membership resource in the format `projects/*/locations/*/memberships/{membership_id}`, set during creation. `membership_id` must be a valid RFC 1123 compliant DNS label: 1. At most 63 characters in length 2. It must consist of lower case alphanumeric characters or `-` 3. It must start and end with an alphanumeric character Which can be expressed as the regex: `[a-z0-9]([-a-z0-9]*[a-z0-9])?`, with a maximum length of 63 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// MembershipState describes the state of a Membership resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public MembershipState State { get; set; }
		
		/// <summary>
		/// Output only. Google-generated UUID for this resource. This is unique across all Membership resources. If a Membership resource is deleted and another resource with the same name is created, it gets a different unique_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueId")]
		public string UniqueId { get; set; }
		
		/// <summary>
		/// Output only. When the Membership was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// MembershipEndpoint contains information needed to contact a Kubernetes API, endpoint and any additional Kubernetes metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MembershipEndpoint
	{
		
		/// <summary>
		/// ApplianceCluster contains information specific to GDC Edge Appliance Clusters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applianceCluster")]
		public ApplianceCluster ApplianceCluster { get; set; }
		
		/// <summary>
		/// EdgeCluster contains information specific to Google Edge Clusters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="edgeCluster")]
		public EdgeCluster EdgeCluster { get; set; }
		
		/// <summary>
		/// GkeCluster contains information specific to GKE clusters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gkeCluster")]
		public GkeCluster GkeCluster { get; set; }
		
		/// <summary>
		/// Output only. Whether the lifecycle of this membership is managed by a google cluster platform service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleManaged")]
		public System.Nullable<System.Boolean> GoogleManaged { get; set; }
		
		/// <summary>
		/// KubernetesMetadata provides informational metadata for Memberships representing Kubernetes clusters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kubernetesMetadata")]
		public KubernetesMetadata KubernetesMetadata { get; set; }
		
		/// <summary>
		/// KubernetesResource contains the YAML manifests and configuration for Membership Kubernetes resources in the cluster. After CreateMembership or UpdateMembership, these resources should be re-applied in the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kubernetesResource")]
		public KubernetesResource KubernetesResource { get; set; }
		
		/// <summary>
		/// MultiCloudCluster contains information specific to GKE Multi-Cloud clusters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiCloudCluster")]
		public MultiCloudCluster MultiCloudCluster { get; set; }
		
		/// <summary>
		/// OnPremCluster contains information specific to GKE On-Prem clusters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onPremCluster")]
		public OnPremCluster OnPremCluster { get; set; }
	}
	
	/// <summary>
	/// MultiCloudCluster contains information specific to GKE Multi-Cloud clusters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MultiCloudCluster
	{
		
		/// <summary>
		/// Output only. If cluster_missing is set then it denotes that API(gkemulticloud.googleapis.com) resource for this GKE Multi-Cloud cluster no longer exists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterMissing")]
		public System.Nullable<System.Boolean> ClusterMissing { get; set; }
		
		/// <summary>
		/// Immutable. Self-link of the Google Cloud resource for the GKE Multi-Cloud cluster. For example: //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/awsClusters/my-cluster //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/azureClusters/my-cluster //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/attachedClusters/my-cluster
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceLink")]
		public string ResourceLink { get; set; }
	}
	
	/// <summary>
	/// OnPremCluster contains information specific to GKE On-Prem clusters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OnPremCluster
	{
		
		/// <summary>
		/// Immutable. Whether the cluster is an admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminCluster")]
		public System.Nullable<System.Boolean> AdminCluster { get; set; }
		
		/// <summary>
		/// Output only. If cluster_missing is set then it denotes that API(gkeonprem.googleapis.com) resource for this GKE On-Prem cluster no longer exists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterMissing")]
		public System.Nullable<System.Boolean> ClusterMissing { get; set; }
		
		/// <summary>
		/// Immutable. The on prem cluster's type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterType")]
		public System.Nullable<OnPremClusterClusterType> ClusterType { get; set; }
		
		/// <summary>
		/// Immutable. Self-link of the Google Cloud resource for the GKE On-Prem cluster. For example: //gkeonprem.googleapis.com/projects/my-project/locations/us-west1-a/vmwareClusters/my-cluster //gkeonprem.googleapis.com/projects/my-project/locations/us-west1-a/bareMetalClusters/my-cluster
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceLink")]
		public string ResourceLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OnPremClusterClusterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLUSTERTYPE_UNSPECIFIED")]
		CLUSTERTYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BOOTSTRAP")]
		BOOTSTRAP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HYBRID")]
		HYBRID = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STANDALONE")]
		STANDALONE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USER")]
		USER = 4,
	}
	
	/// <summary>
	/// MonitoringConfig informs Fleet-based applications/services/UIs how the metrics for the underlying cluster is reported to cloud monitoring services. It can be set from empty to non-empty, but can't be mutated directly to prevent accidentally breaking the constinousty of metrics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitoringConfig
	{
		
		/// <summary>
		/// Optional. Cluster name used to report metrics. For Anthos on VMWare/Baremetal/MultiCloud clusters, it would be in format {cluster_type}/{cluster_name}, e.g., "awsClusters/cluster_1".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cluster")]
		public string Cluster { get; set; }
		
		/// <summary>
		/// Optional. For GKE and Multicloud clusters, this is the UUID of the cluster resource. For VMWare and Baremetal clusters, this is the kube-system UID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterHash")]
		public string ClusterHash { get; set; }
		
		/// <summary>
		/// Optional. Kubernetes system metrics, if available, are written to this prefix. This defaults to kubernetes.io for GKE, and kubernetes.io/anthos for Anthos eventually. Noted: Anthos MultiCloud will have kubernetes.io prefix today but will migration to be under kubernetes.io/anthos.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kubernetesMetricsPrefix")]
		public string KubernetesMetricsPrefix { get; set; }
		
		/// <summary>
		/// Optional. Location used to report Metrics
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Optional. Project used to report Metrics
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
	}
	
	/// <summary>
	/// MembershipState describes the state of a Membership resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MembershipState
	{
		
		/// <summary>
		/// Output only. The current state of the Membership resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<MembershipStateCode> Code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MembershipStateCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CODE_UNSPECIFIED")]
		CODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATING")]
		CREATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="READY")]
		READY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETING")]
		DELETING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATING")]
		UPDATING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SERVICE_UPDATING")]
		SERVICE_UPDATING = 5,
	}
	
	/// <summary>
	/// The response message for Operations.ListOperations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOperationsResponse
	{
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of operations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Operation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public GoogleRpcStatus Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// List of fleet namespaces.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListScopeNamespacesResponse
	{
		
		/// <summary>
		/// A token to request the next page of resources from the `ListNamespaces` method. The value of an empty string means that there are no more resources to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of fleet namespaces
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scopeNamespaces")]
		public Namespace[] ScopeNamespaces { get; set; }
	}
	
	/// <summary>
	/// Namespace represents a namespace across the Fleet
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Namespace
	{
		
		/// <summary>
		/// Output only. When the namespace was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. When the namespace was deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteTime")]
		public string DeleteTime { get; set; }
		
		/// <summary>
		/// Optional. Labels for this Namespace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The resource name for the namespace `projects/{project}/locations/{location}/namespaces/{namespace}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Optional. Namespace-level cluster namespace labels. These labels are applied to the related namespace of the member clusters bound to the parent Scope. Scope-level labels (`namespace_labels` in the Fleet Scope resource) take precedence over Namespace-level labels if they share a key. Keys and values must be Kubernetes-conformant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namespaceLabels")]
		public System.Collections.Generic.Dictionary<string, string> NamespaceLabels { get; set; }
		
		/// <summary>
		/// Required. Scope associated with the namespace
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
		
		/// <summary>
		/// NamespaceLifecycleState describes the state of a Namespace resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public NamespaceLifecycleState State { get; set; }
		
		/// <summary>
		/// Output only. Google-generated UUID for this resource. This is unique across all namespace resources. If a namespace resource is deleted and another resource with the same name is created, it gets a different uid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
		
		/// <summary>
		/// Output only. When the namespace was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// NamespaceLifecycleState describes the state of a Namespace resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NamespaceLifecycleState
	{
		
		/// <summary>
		/// Output only. The current state of the Namespace resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public FleetLifecycleStateCode Code { get; set; }
	}
	
	/// <summary>
	/// List of Scope RBACRoleBindings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListScopeRBACRoleBindingsResponse
	{
		
		/// <summary>
		/// A token to request the next page of resources from the `ListScopeRBACRoleBindings` method. The value of an empty string means that there are no more resources to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of Scope RBACRoleBindings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rbacrolebindings")]
		public RBACRoleBinding[] Rbacrolebindings { get; set; }
	}
	
	/// <summary>
	/// RBACRoleBinding represents a rbacrolebinding across the Fleet
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RBACRoleBinding
	{
		
		/// <summary>
		/// Output only. When the rbacrolebinding was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. When the rbacrolebinding was deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteTime")]
		public string DeleteTime { get; set; }
		
		/// <summary>
		/// group is the group, as seen by the kubernetes cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group")]
		public string Group { get; set; }
		
		/// <summary>
		/// Optional. Labels for this RBACRolebinding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The resource name for the rbacrolebinding `projects/{project}/locations/{location}/scopes/{scope}/rbacrolebindings/{rbacrolebinding}` or `projects/{project}/locations/{location}/memberships/{membership}/rbacrolebindings/{rbacrolebinding}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Role is the type for Kubernetes roles
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public Role Role { get; set; }
		
		/// <summary>
		/// RBACRoleBindingLifecycleState describes the state of a RbacRoleBinding resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public RBACRoleBindingLifecycleState State { get; set; }
		
		/// <summary>
		/// Output only. Google-generated UUID for this resource. This is unique across all rbacrolebinding resources. If a rbacrolebinding resource is deleted and another resource with the same name is created, it gets a different uid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
		
		/// <summary>
		/// Output only. When the rbacrolebinding was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// user is the name of the user as seen by the kubernetes cluster, example "alice" or "alice@domain.tld"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
	}
	
	/// <summary>
	/// Role is the type for Kubernetes roles
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Role
	{
		
		/// <summary>
		/// predefined_role is the Kubernetes default role to use
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predefinedRole")]
		public System.Nullable<RolePredefinedRole> PredefinedRole { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RolePredefinedRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN")]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADMIN")]
		ADMIN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EDIT")]
		EDIT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VIEW")]
		VIEW = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ANTHOS_SUPPORT")]
		ANTHOS_SUPPORT = 4,
	}
	
	/// <summary>
	/// RBACRoleBindingLifecycleState describes the state of a RbacRoleBinding resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RBACRoleBindingLifecycleState
	{
		
		/// <summary>
		/// Output only. The current state of the rbacrolebinding resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public FleetLifecycleStateCode Code { get; set; }
	}
	
	/// <summary>
	/// List of Scopes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListScopesResponse
	{
		
		/// <summary>
		/// A token to request the next page of resources from the `ListScopes` method. The value of an empty string means that there are no more resources to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of Scopes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scopes")]
		public Scope[] Scopes { get; set; }
	}
	
	/// <summary>
	/// Scope represents a Scope in a Fleet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Scope
	{
		
		/// <summary>
		/// Output only. When the scope was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. When the scope was deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteTime")]
		public string DeleteTime { get; set; }
		
		/// <summary>
		/// Optional. Labels for this Scope.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The resource name for the scope `projects/{project}/locations/{location}/scopes/{scope}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Optional. Scope-level cluster namespace labels. For the member clusters bound to the Scope, these labels are applied to each namespace under the Scope. Scope-level labels take precedence over Namespace-level labels (`namespace_labels` in the Fleet Namespace resource) if they share a key. Keys and values must be Kubernetes-conformant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namespaceLabels")]
		public System.Collections.Generic.Dictionary<string, string> NamespaceLabels { get; set; }
		
		/// <summary>
		/// ScopeLifecycleState describes the state of a Scope resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public ScopeLifecycleState State { get; set; }
		
		/// <summary>
		/// Output only. Google-generated UUID for this resource. This is unique across all scope resources. If a scope resource is deleted and another resource with the same name is created, it gets a different uid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
		
		/// <summary>
		/// Output only. When the scope was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// ScopeLifecycleState describes the state of a Scope resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScopeLifecycleState
	{
		
		/// <summary>
		/// Output only. The current state of the scope resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public FleetLifecycleStateCode Code { get; set; }
	}
	
	/// <summary>
	/// Represents the metadata of the long-running operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OperationMetadata
	{
		
		/// <summary>
		/// Output only. API version used to start the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancelRequested")]
		public System.Nullable<System.Boolean> CancelRequested { get; set; }
		
		/// <summary>
		/// Output only. The time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The time the operation finished running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Output only. Human-readable status of the operation, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusDetail")]
		public string StatusDetail { get; set; }
		
		/// <summary>
		/// Output only. Server-defined resource path for the target of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// Output only. Name of the verb executed by the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verb")]
		public string Verb { get; set; }
	}
	
	/// <summary>
	/// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Policy
	{
		
		/// <summary>
		/// Specifies cloud audit logging configuration for this policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auditConfigs")]
		public AuditConfig[] AuditConfigs { get; set; }
		
		/// <summary>
		/// Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bindings")]
		public Binding[] Bindings { get; set; }
		
		/// <summary>
		/// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// Request message for `SetIamPolicy` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetIamPolicyRequest
	{
		
		/// <summary>
		/// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public Policy Policy { get; set; }
		
		/// <summary>
		/// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateMask")]
		public string UpdateMask { get; set; }
	}
	
	/// <summary>
	/// Request message for `TestIamPermissions` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestIamPermissionsRequest
	{
		
		/// <summary>
		/// The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	/// <summary>
	/// Response message for `TestIamPermissions` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestIamPermissionsResponse
	{
		
		/// <summary>
		/// A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Deletes a Scope RBACRoleBinding.
		/// Gkehub_projects_locations_scopes_rbacrolebindings_delete v1/{name}
		/// </summary>
		/// <param name="name">Required. The RBACRoleBinding resource name in the format `projects/*/locations/*/scopes/*/rbacrolebindings/*`.</param>
		/// <param name="force">Optional. If set to true, any subresource from this Membership will also be deleted. Otherwise, the request will only work if the Membership has no subresource.</param>
		/// <param name="requestId">Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Gkehub_projects_locations_scopes_rbacrolebindings_deleteAsync(string name, bool force, string requestId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&force="+force+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the details of a Scope RBACRoleBinding.
		/// Gkehub_projects_locations_scopes_rbacrolebindings_get v1/{name}
		/// </summary>
		/// <param name="name">Required. The RBACRoleBinding resource name in the format `projects/*/locations/*/scopes/*/rbacrolebindings/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<RBACRoleBinding> Gkehub_projects_locations_scopes_rbacrolebindings_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RBACRoleBinding>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a Scope RBACRoleBinding.
		/// Gkehub_projects_locations_scopes_rbacrolebindings_patch v1/{name}
		/// </summary>
		/// <param name="name">The resource name for the rbacrolebinding `projects/{project}/locations/{location}/scopes/{scope}/rbacrolebindings/{rbacrolebinding}` or `projects/{project}/locations/{location}/memberships/{membership}/rbacrolebindings/{rbacrolebinding}`</param>
		/// <param name="updateMask">Required. The fields to be updated.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Gkehub_projects_locations_scopes_rbacrolebindings_patchAsync(string name, string updateMask, RBACRoleBinding requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists information about the supported locations for this service.
		/// Gkehub_projects_locations_list v1/{name}/locations
		/// </summary>
		/// <param name="name">The resource that owns the locations collection, if applicable.</param>
		/// <param name="filter">A filter to narrow down results to a preferred subset. The filtering language accepts strings like `"displayName=tokyo"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).</param>
		/// <param name="pageSize">The maximum number of results to return. If not set, the service selects a default.</param>
		/// <param name="pageToken">A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLocationsResponse> Gkehub_projects_locations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/locations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListLocationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
		/// Gkehub_projects_locations_operations_list v1/{name}/operations
		/// </summary>
		/// <param name="name">The name of the operation's parent resource.</param>
		/// <param name="filter">The standard list filter.</param>
		/// <param name="pageSize">The standard list page size.</param>
		/// <param name="pageToken">The standard list page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListOperationsResponse> Gkehub_projects_locations_operations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/operations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListOperationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// Gkehub_projects_locations_operations_cancel v1/{name}:cancel
		/// </summary>
		/// <param name="name">The name of the operation resource to be cancelled.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Gkehub_projects_locations_operations_cancelAsync(string name, CancelOperationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generates the manifest for deployment of the GKE connect agent. **This method is used internally by Google-provided libraries.** Most clients should not need to call this method directly.
		/// Gkehub_projects_locations_memberships_generateConnectManifest v1/{name}:generateConnectManifest
		/// </summary>
		/// <param name="name">Required. The Membership resource name the Agent will associate with, in the format `projects/*/locations/*/memberships/*`.</param>
		/// <param name="imagePullSecretContent">Optional. The image pull secret content for the registry, if not public.</param>
		/// <param name="isUpgrade">Optional. If true, generate the resources for upgrade only. Some resources generated only for installation (e.g. secrets) will be excluded.</param>
		/// <param name="_namespace">Optional. Namespace for GKE Connect agent resources. Defaults to `gke-connect`. The Connect Agent is authorized automatically when run in the default namespace. Otherwise, explicit authorization must be granted with an additional IAM binding.</param>
		/// <param name="proxy">Optional. URI of a proxy if connectivity from the agent to gkeconnect.googleapis.com requires the use of a proxy. Format must be in the form `http(s)://{proxy_address}`, depending on the HTTP/HTTPS protocol supported by the proxy. This will direct the connect agent's outbound traffic through a HTTP(S) proxy.</param>
		/// <param name="registry">Optional. The registry to fetch the connect agent image from. Defaults to gcr.io/gkeconnect.</param>
		/// <param name="version">Optional. The Connect agent version to use. Defaults to the most current version.</param>
		/// <returns>Successful response</returns>
		public async Task<GenerateConnectManifestResponse> Gkehub_projects_locations_memberships_generateConnectManifestAsync(string name, string imagePullSecretContent, bool isUpgrade, string _namespace, string proxy, string registry, string version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":generateConnectManifest&imagePullSecretContent=" + (imagePullSecretContent==null? "" : System.Uri.EscapeDataString(imagePullSecretContent))+"&isUpgrade="+isUpgrade+"&namespace=" + (_namespace==null? "" : System.Uri.EscapeDataString(_namespace))+"&proxy=" + (proxy==null? "" : System.Uri.EscapeDataString(proxy))+"&registry=" + (registry==null? "" : System.Uri.EscapeDataString(registry))+"&version=" + (version==null? "" : System.Uri.EscapeDataString(version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GenerateConnectManifestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists MembershipBindings.
		/// Gkehub_projects_locations_memberships_bindings_list v1/{parent}/bindings
		/// </summary>
		/// <param name="parent">Required. The parent Membership for which the MembershipBindings will be listed. Specified in the format `projects/*/locations/*/memberships/*`.</param>
		/// <param name="filter">Optional. Lists MembershipBindings that match the filter expression, following the syntax outlined in https://google.aip.dev/160.</param>
		/// <param name="pageSize">Optional. When requesting a 'page' of resources, `page_size` specifies number of resources to return. If unspecified or set to 0, all resources will be returned.</param>
		/// <param name="pageToken">Optional. Token returned by previous call to `ListMembershipBindings` which specifies the position in the list from where to continue listing the resources.</param>
		/// <returns>Successful response</returns>
		public async Task<ListMembershipBindingsResponse> Gkehub_projects_locations_memberships_bindings_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/bindings&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListMembershipBindingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a MembershipBinding.
		/// Gkehub_projects_locations_memberships_bindings_create v1/{parent}/bindings
		/// </summary>
		/// <param name="parent">Required. The parent (project and location) where the MembershipBinding will be created. Specified in the format `projects/*/locations/*/memberships/*`.</param>
		/// <param name="membershipBindingId">Required. The ID to use for the MembershipBinding.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Gkehub_projects_locations_memberships_bindings_createAsync(string parent, string membershipBindingId, MembershipBinding requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/bindings&membershipBindingId=" + (membershipBindingId==null? "" : System.Uri.EscapeDataString(membershipBindingId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists Features in a given project and location.
		/// Gkehub_projects_locations_features_list v1/{parent}/features
		/// </summary>
		/// <param name="parent">Required. The parent (project and location) where the Features will be listed. Specified in the format `projects/*/locations/*`.</param>
		/// <param name="filter">Lists Features that match the filter expression, following the syntax outlined in https://google.aip.dev/160. Examples: - Feature with the name "servicemesh" in project "foo-proj": name = "projects/foo-proj/locations/global/features/servicemesh" - Features that have a label called `foo`: labels.foo:* - Features that have a label called `foo` whose value is `bar`: labels.foo = bar</param>
		/// <param name="orderBy">One or more fields to compare and use to sort the output. See https://google.aip.dev/132#ordering.</param>
		/// <param name="pageSize">When requesting a 'page' of resources, `page_size` specifies number of resources to return. If unspecified or set to 0, all resources will be returned.</param>
		/// <param name="pageToken">Token returned by previous call to `ListFeatures` which specifies the position in the list from where to continue listing the resources.</param>
		/// <returns>Successful response</returns>
		public async Task<ListFeaturesResponse> Gkehub_projects_locations_features_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/features&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListFeaturesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a new Feature.
		/// Gkehub_projects_locations_features_create v1/{parent}/features
		/// </summary>
		/// <param name="parent">Required. The parent (project and location) where the Feature will be created. Specified in the format `projects/*/locations/*`.</param>
		/// <param name="featureId">The ID of the feature to create.</param>
		/// <param name="requestId">A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Gkehub_projects_locations_features_createAsync(string parent, string featureId, string requestId, Feature requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/features&featureId=" + (featureId==null? "" : System.Uri.EscapeDataString(featureId))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns all fleets within an organization or a project that the caller has access to.
		/// Gkehub_projects_locations_fleets_list v1/{parent}/fleets
		/// </summary>
		/// <param name="parent">Required. The organization or project to list for Fleets under, in the format `organizations/*/locations/*` or `projects/*/locations/*`.</param>
		/// <param name="pageSize">Optional. The maximum number of fleets to return. The service may return fewer than this value. If unspecified, at most 200 fleets will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.</param>
		/// <param name="pageToken">Optional. A page token, received from a previous `ListFleets` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListFleets` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListFleetsResponse> Gkehub_projects_locations_fleets_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/fleets&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListFleetsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a fleet.
		/// Gkehub_projects_locations_fleets_create v1/{parent}/fleets
		/// </summary>
		/// <param name="parent">Required. The parent (project and location) where the Fleet will be created. Specified in the format `projects/*/locations/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Gkehub_projects_locations_fleets_createAsync(string parent, Fleet requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/fleets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists Memberships in a given project and location.
		/// Gkehub_projects_locations_memberships_list v1/{parent}/memberships
		/// </summary>
		/// <param name="parent">Required. The parent (project and location) where the Memberships will be listed. Specified in the format `projects/*/locations/*`. `projects/*/locations/-` list memberships in all the regions.</param>
		/// <param name="filter">Optional. Lists Memberships that match the filter expression, following the syntax outlined in https://google.aip.dev/160. Examples: - Name is `bar` in project `foo-proj` and location `global`: name = "projects/foo-proj/locations/global/membership/bar" - Memberships that have a label called `foo`: labels.foo:* - Memberships that have a label called `foo` whose value is `bar`: labels.foo = bar - Memberships in the CREATING state: state = CREATING</param>
		/// <param name="orderBy">Optional. One or more fields to compare and use to sort the output. See https://google.aip.dev/132#ordering.</param>
		/// <param name="pageSize">Optional. When requesting a 'page' of resources, `page_size` specifies number of resources to return. If unspecified or set to 0, all resources will be returned.</param>
		/// <param name="pageToken">Optional. Token returned by previous call to `ListMemberships` which specifies the position in the list from where to continue listing the resources.</param>
		/// <returns>Successful response</returns>
		public async Task<ListMembershipsResponse> Gkehub_projects_locations_memberships_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/memberships&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListMembershipsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Membership. **This is currently only supported for GKE clusters on Google Cloud**. To register other clusters, follow the instructions at https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster.
		/// Gkehub_projects_locations_memberships_create v1/{parent}/memberships
		/// </summary>
		/// <param name="parent">Required. The parent (project and location) where the Memberships will be created. Specified in the format `projects/*/locations/*`.</param>
		/// <param name="membershipId">Required. Client chosen ID for the membership. `membership_id` must be a valid RFC 1123 compliant DNS label: 1. At most 63 characters in length 2. It must consist of lower case alphanumeric characters or `-` 3. It must start and end with an alphanumeric character Which can be expressed as the regex: `[a-z0-9]([-a-z0-9]*[a-z0-9])?`, with a maximum length of 63 characters.</param>
		/// <param name="requestId">Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Gkehub_projects_locations_memberships_createAsync(string parent, string membershipId, string requestId, Membership requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/memberships&membershipId=" + (membershipId==null? "" : System.Uri.EscapeDataString(membershipId))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists fleet namespaces.
		/// Gkehub_projects_locations_scopes_namespaces_list v1/{parent}/namespaces
		/// </summary>
		/// <param name="parent">Required. The parent (project and location) where the Features will be listed. Specified in the format `projects/*/locations/*/scopes/*`.</param>
		/// <param name="pageSize">Optional. When requesting a 'page' of resources, `page_size` specifies number of resources to return. If unspecified or set to 0, all resources will be returned.</param>
		/// <param name="pageToken">Optional. Token returned by previous call to `ListFeatures` which specifies the position in the list from where to continue listing the resources.</param>
		/// <returns>Successful response</returns>
		public async Task<ListScopeNamespacesResponse> Gkehub_projects_locations_scopes_namespaces_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/namespaces&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListScopeNamespacesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a fleet namespace.
		/// Gkehub_projects_locations_scopes_namespaces_create v1/{parent}/namespaces
		/// </summary>
		/// <param name="parent">Required. The parent (project and location) where the Namespace will be created. Specified in the format `projects/*/locations/*/scopes/*`.</param>
		/// <param name="scopeNamespaceId">Required. Client chosen ID for the Namespace. `namespace_id` must be a valid RFC 1123 compliant DNS label: 1. At most 63 characters in length 2. It must consist of lower case alphanumeric characters or `-` 3. It must start and end with an alphanumeric character Which can be expressed as the regex: `[a-z0-9]([-a-z0-9]*[a-z0-9])?`, with a maximum length of 63 characters.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Gkehub_projects_locations_scopes_namespaces_createAsync(string parent, string scopeNamespaceId, Namespace requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/namespaces&scopeNamespaceId=" + (scopeNamespaceId==null? "" : System.Uri.EscapeDataString(scopeNamespaceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all Scope RBACRoleBindings.
		/// Gkehub_projects_locations_scopes_rbacrolebindings_list v1/{parent}/rbacrolebindings
		/// </summary>
		/// <param name="parent">Required. The parent (project and location) where the Features will be listed. Specified in the format `projects/*/locations/*/scopes/*`.</param>
		/// <param name="pageSize">Optional. When requesting a 'page' of resources, `page_size` specifies number of resources to return. If unspecified or set to 0, all resources will be returned.</param>
		/// <param name="pageToken">Optional. Token returned by previous call to `ListScopeRBACRoleBindings` which specifies the position in the list from where to continue listing the resources.</param>
		/// <returns>Successful response</returns>
		public async Task<ListScopeRBACRoleBindingsResponse> Gkehub_projects_locations_scopes_rbacrolebindings_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/rbacrolebindings&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListScopeRBACRoleBindingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Scope RBACRoleBinding.
		/// Gkehub_projects_locations_scopes_rbacrolebindings_create v1/{parent}/rbacrolebindings
		/// </summary>
		/// <param name="parent">Required. The parent (project and location) where the RBACRoleBinding will be created. Specified in the format `projects/*/locations/*/scopes/*`.</param>
		/// <param name="rbacrolebindingId">Required. Client chosen ID for the RBACRoleBinding. `rbacrolebinding_id` must be a valid RFC 1123 compliant DNS label: 1. At most 63 characters in length 2. It must consist of lower case alphanumeric characters or `-` 3. It must start and end with an alphanumeric character Which can be expressed as the regex: `[a-z0-9]([-a-z0-9]*[a-z0-9])?`, with a maximum length of 63 characters.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Gkehub_projects_locations_scopes_rbacrolebindings_createAsync(string parent, string rbacrolebindingId, RBACRoleBinding requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/rbacrolebindings&rbacrolebindingId=" + (rbacrolebindingId==null? "" : System.Uri.EscapeDataString(rbacrolebindingId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists Scopes.
		/// Gkehub_projects_locations_scopes_list v1/{parent}/scopes
		/// </summary>
		/// <param name="parent">Required. The parent (project and location) where the Scope will be listed. Specified in the format `projects/*/locations/*`.</param>
		/// <param name="pageSize">Optional. When requesting a 'page' of resources, `page_size` specifies number of resources to return. If unspecified or set to 0, all resources will be returned.</param>
		/// <param name="pageToken">Optional. Token returned by previous call to `ListScopes` which specifies the position in the list from where to continue listing the resources.</param>
		/// <returns>Successful response</returns>
		public async Task<ListScopesResponse> Gkehub_projects_locations_scopes_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/scopes&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListScopesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Scope.
		/// Gkehub_projects_locations_scopes_create v1/{parent}/scopes
		/// </summary>
		/// <param name="parent">Required. The parent (project and location) where the Scope will be created. Specified in the format `projects/*/locations/*`.</param>
		/// <param name="scopeId">Required. Client chosen ID for the Scope. `scope_id` must be a ????</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Gkehub_projects_locations_scopes_createAsync(string parent, string scopeId, Scope requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/scopes&scopeId=" + (scopeId==null? "" : System.Uri.EscapeDataString(scopeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
		/// Gkehub_projects_locations_scopes_getIamPolicy v1/{resource}:getIamPolicy
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <param name="options_requestedPolicyVersion">Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Gkehub_projects_locations_scopes_getIamPolicyAsync(string resource, int options_requestedPolicyVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":getIamPolicy&options.requestedPolicyVersion="+options_requestedPolicyVersion;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Policy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
		/// Gkehub_projects_locations_scopes_setIamPolicy v1/{resource}:setIamPolicy
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Gkehub_projects_locations_scopes_setIamPolicyAsync(string resource, SetIamPolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":setIamPolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Policy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
		/// Gkehub_projects_locations_scopes_testIamPermissions v1/{resource}:testIamPermissions
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task<TestIamPermissionsResponse> Gkehub_projects_locations_scopes_testIamPermissionsAsync(string resource, TestIamPermissionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":testIamPermissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestIamPermissionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
