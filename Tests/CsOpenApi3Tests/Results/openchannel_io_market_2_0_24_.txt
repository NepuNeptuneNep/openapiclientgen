//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Access
	{
		
		/// <summary>
		/// The approved access restrictions for this app
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="access")]
		public string[] Access1 { get; set; }
		
		/// <summary>
		/// The id of the app that owns this access key
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// The time (in milliseconds) of when the user agreed to the access request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date")]
		public long Date { get; set; }
		
		/// <summary>
		/// The ip address of the user agreeing to the access request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ip")]
		public string Ip { get; set; }
		
		/// <summary>
		/// True if this access is up to date with the current version of the app
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isValid")]
		public bool IsValid { get; set; }
		
		/// <summary>
		/// The id for this user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	/// <summary>
	/// The connected Stripe account for a developer
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Account
	{
		
		/// <summary>
		/// The name of the Stripe account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// The country for this Stripe account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The default currency for this Stripe account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defaultCurrency")]
		public string DefaultCurrency { get; set; }
		
		/// <summary>
		/// The id of the Stripe account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stripeId")]
		public string StripeId { get; set; }
	}
	
	/// <summary>
	/// A developer's connected Stripe accounts
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Accounts
	{
		
		/// <summary>
		/// An array of connected Stripe accounts
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accounts")]
		public Account[] Accounts1 { get; set; }
		
		/// <summary>
		/// The id of the developer
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="developerId")]
		public string DeveloperId { get; set; }
	}
	
	/// <summary>
	/// An app
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class App
	{
		
		/// <summary>
		/// A custom defined list of access requirements
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access")]
		public string[] Access { get; set; }
		
		/// <summary>
		/// Resticts users from accessing this app
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allow")]
		public Restrictions Allow { get; set; }
		
		/// <summary>
		/// The id of this app
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// A custom defined list of app attributes
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string Attributes { get; set; }
		
		/// <summary>
		/// The date (in millis) that this app was created
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created")]
		public long Created { get; set; }
		
		/// <summary>
		/// A custom JSON object that you can create and attach to this record
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customData")]
		public string CustomData { get; set; }
		
		/// <summary>
		/// The id of the developer that owns this app
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="developerId")]
		public string DeveloperId { get; set; }
		
		/// <summary>
		/// True if this is the live version of the app
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isLive")]
		public bool IsLive { get; set; }
		
		/// <summary>
		/// The date (in millis) that this app was last modified
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public long LastUpdated { get; set; }
		
		/// <summary>
		/// The models that describes the cost and pricing for this app
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="model")]
		public Model[] Model { get; set; }
		
		/// <summary>
		/// The name of this app
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ownership")]
		public Ownership Ownership { get; set; }
		
		/// <summary>
		/// A random number that changes hourly and is used for achieving a random sort order when displaying apps
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="randomize")]
		public int Randomize { get; set; }
		
		/// <summary>
		/// The average review rating for this app. Reviews are rated from 100 (one star) to 500 (five star)
		/// Required
		/// Minimum: 0
		/// Maximum: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rating")]
		[System.ComponentModel.DataAnnotations.Range(0, 500)]
		public int Rating { get; set; }
		
		/// <summary>
		/// Resticts users from accessing this app
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="restrict")]
		public Restrictions Restrict { get; set; }
		
		/// <summary>
		/// The number of approved reviews for this app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewCount")]
		public System.Nullable<System.Int32> ReviewCount { get; set; }
		
		/// <summary>
		/// URL safe aliases that can be used to identify this app even after name changes. The current alias is always at position 0.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="safeName")]
		public string[] SafeName { get; set; }
		
		/// <summary>
		/// A field containing summary stats about the app and is specially designed to allow apps to be sorted by popularity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public string Statistics { get; set; }
		
		/// <summary>
		/// The current status of this review
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
		
		/// <summary>
		/// The date (in millis) that this app was submitted for approval
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="submittedDate")]
		public System.Nullable<System.Int64> SubmittedDate { get; set; }
		
		/// <summary>
		/// The type for this app
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The version number for this app
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public int Version { get; set; }
	}
	
	/// <summary>
	/// The model that describes the cost and pricing for apps
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Model
	{
		
		/// <summary>
		/// The billingPeriod along with the billingPeriodUnit make up the time between billing cycles
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingPeriod")]
		public System.Nullable<ModelBillingPeriod> BillingPeriod { get; set; }
		
		/// <summary>
		/// The billingPeriod along with the billingPeriodUnit make up the time between billing cycles
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingPeriodUnit")]
		public System.Nullable<System.Int32> BillingPeriodUnit { get; set; }
		
		/// <summary>
		/// The marketplace commission applied to this app's model multiplied by 100 to include two digits for fractions of a percent
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="commission")]
		public int Commission { get; set; }
		
		/// <summary>
		/// The ISO 4217 currency code for this price
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// A custom JSON object that you can create and attach to this record
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customData")]
		public string CustomData { get; set; }
		
		/// <summary>
		/// The payee that will be paying for any payment processing fees
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="feePayer")]
		public ModelFeePayer FeePayer { get; set; }
		
		/// <summary>
		/// The license model type. Single allows a purchase to a single user or organization
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="license")]
		public ModelLicense License { get; set; }
		
		/// <summary>
		/// The id that uniquely identifies this model
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modelId")]
		public string ModelId { get; set; }
		
		/// <summary>
		/// The price of this app in cents
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="price")]
		public int Price { get; set; }
		
		/// <summary>
		/// The pricing model subtype
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subtype")]
		public System.Nullable<ModelSubtype> Subtype { get; set; }
		
		/// <summary>
		/// The maximum number of free trial days available
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trial")]
		public int Trial { get; set; }
		
		/// <summary>
		/// The pricing model type. Free has no cost, single has a one time purchase cost and recurring requires a monthly subscription
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ModelType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ModelBillingPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="daily")]
		daily = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="weekly")]
		weekly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="monthly")]
		monthly = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="annually")]
		annually = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ModelFeePayer
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="developer")]
		developer = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="marketplace")]
		marketplace = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ModelLicense
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="single")]
		single = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ModelSubtype
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="usage")]
		usage = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="seat")]
		seat = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ModelType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="free")]
		free = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="single")]
		single = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="recurring")]
		recurring = 2,
	}
	
	/// <summary>
	/// Pages of app results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppPages
	{
		
		/// <summary>
		/// The total number of results
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public int Count { get; set; }
		
		/// <summary>
		/// An array of apps for the current page
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="list")]
		public App[] List { get; set; }
		
		/// <summary>
		/// The current page number for this result set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		/// <summary>
		/// The total number of pages available for this result set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pages")]
		public System.Nullable<System.Int32> Pages { get; set; }
	}
	
	/// <summary>
	/// The totals for the app
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppTotal
	{
		
		/// <summary>
		/// The totals for the field
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="$appId")]
		public DataTotal AppId { get; set; }
	}
	
	/// <summary>
	/// An AppVersion
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppVersion
	{
		
		/// <summary>
		/// A custom defined list of access requirements
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access")]
		public string[] Access { get; set; }
		
		/// <summary>
		/// Resticts users from accessing this app
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allow")]
		public Restrictions Allow { get; set; }
		
		/// <summary>
		/// The id of this app
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// A custom defined list of app attributes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string Attributes { get; set; }
		
		/// <summary>
		/// The date (in millis) that this app was created
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created")]
		public long Created { get; set; }
		
		/// <summary>
		/// A custom JSON object that you can create and attach to this record
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customData")]
		public string CustomData { get; set; }
		
		/// <summary>
		/// The id of the developer that owns this app
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="developerId")]
		public string DeveloperId { get; set; }
		
		/// <summary>
		/// True if this is the latest version of this app
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isLatestVersion")]
		public bool IsLatestVersion { get; set; }
		
		/// <summary>
		/// True if this is the live version of the app
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isLive")]
		public bool IsLive { get; set; }
		
		/// <summary>
		/// The date (in millis) that this app was last modified
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public long LastUpdated { get; set; }
		
		/// <summary>
		/// The models that describes the cost and pricing for this app
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="model")]
		public Model[] Model { get; set; }
		
		/// <summary>
		/// The name of this app
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Details of the live version of this app
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public Parent Parent { get; set; }
		
		/// <summary>
		/// The average review rating for this app. Reviews are rated from 100 (one star) to 500 (five star)
		/// Minimum: 0
		/// Maximum: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rating")]
		[System.ComponentModel.DataAnnotations.Range(0, 500)]
		public System.Nullable<System.Int32> Rating { get; set; }
		
		/// <summary>
		/// Resticts users from accessing this app
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="restrict")]
		public Restrictions Restrict { get; set; }
		
		/// <summary>
		/// The number of approved reviews for this app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewCount")]
		public System.Nullable<System.Int32> ReviewCount { get; set; }
		
		/// <summary>
		/// URL safe aliases that can be used to identify this app even after name changes. The current alias is always at position 0.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="safeName")]
		public string[] SafeName { get; set; }
		
		/// <summary>
		/// The current status of this review
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
		
		/// <summary>
		/// The type for this app
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The version number for this app
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public int Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class App_Entry
	{
		
		/// <summary>
		/// The id of the app involved in this action
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// The date (in millis) of when this action was performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date")]
		public long Date { get; set; }
	}
	
	/// <summary>
	/// An app attribute
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Attributes
	{
		
		/// <summary>
		/// The name of this attribute
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of this attribute
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public AttributesType Type { get; set; }
		
		/// <summary>
		/// A comma seperated list of values allowed for this attribute
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AttributesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="text")]
		text = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="select")]
		select = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="multi")]
		multi = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Card
	{
		
		/// <summary>
		/// The card holder's city
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_city")]
		public string Address_city { get; set; }
		
		/// <summary>
		/// The card holder's country
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_country")]
		public string Address_country { get; set; }
		
		/// <summary>
		/// The card holder's street address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_line1")]
		public string Address_line1 { get; set; }
		
		/// <summary>
		/// The card holder's street address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_line2")]
		public string Address_line2 { get; set; }
		
		/// <summary>
		/// The card holder's city state/province
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_state")]
		public string Address_state { get; set; }
		
		/// <summary>
		/// The card holder's zip/postal code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_zip")]
		public string Address_zip { get; set; }
		
		/// <summary>
		/// The brand of the credit card. Example: Visa
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="brand")]
		public string Brand { get; set; }
		
		/// <summary>
		/// The id for this credit card
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cardId")]
		public string CardId { get; set; }
		
		/// <summary>
		/// The two digit expiration month
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="exp_month")]
		public int Exp_month { get; set; }
		
		/// <summary>
		/// The four digit expiration year
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="exp_year")]
		public int Exp_year { get; set; }
		
		/// <summary>
		/// True if this is the default credit card
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public bool IsDefault { get; set; }
		
		/// <summary>
		/// The last 4 digits of the credit card number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="last4")]
		public string Last4 { get; set; }
		
		/// <summary>
		/// The card holder's full name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A User's credit card details
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Cards
	{
		
		/// <summary>
		/// An array of credit cards added by this user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cards")]
		public Card[] Cards1 { get; set; }
		
		/// <summary>
		/// The id of this user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	/// <summary>
	/// The category supported by this category group
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Category
	{
		
		/// <summary>
		/// The description of this category
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The name of this category
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The category groups supported by this marketplace
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CategoryGroups
	{
		
		/// <summary>
		/// The categories supported by this category group
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public Category[] Categories { get; set; }
		
		/// <summary>
		/// The name of this category group
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The totals for the field
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataTotal
	{
		
		/// <summary>
		/// The totals for the field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="$field")]
		public System.Nullable<System.Int32> Field { get; set; }
	}
	
	/// <summary>
	/// A Developer
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Developer
	{
		
		/// <summary>
		/// The time (in millis) of when this developer was created
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created")]
		public int Created { get; set; }
		
		/// <summary>
		/// A custom JSON object that you can create and attach to this record
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customData")]
		public string CustomData { get; set; }
		
		/// <summary>
		/// The id of this developer
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="developerId")]
		public string DeveloperId { get; set; }
		
		/// <summary>
		/// The developer's email
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The developer's name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type for this developer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A Developer Account
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeveloperAccount
	{
		
		/// <summary>
		/// A custom JSON object that you can create and attach to this record
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customData")]
		public string CustomData { get; set; }
		
		/// <summary>
		/// The id of this developer account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="developerAccountId")]
		public string DeveloperAccountId { get; set; }
		
		/// <summary>
		/// The id of the developer that this account belongs to
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="developerId")]
		public string DeveloperId { get; set; }
		
		/// <summary>
		/// The contact email address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The name for the account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Pages of developerAccount results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeveloperAccountPages
	{
		
		/// <summary>
		/// The total number of results
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public int Count { get; set; }
		
		/// <summary>
		/// An array of developerAccounts for the current page
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="list")]
		public DeveloperAccount[] List { get; set; }
		
		/// <summary>
		/// The current page number for this result set
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// The total number of pages available for this result set
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pages")]
		public int Pages { get; set; }
	}
	
	/// <summary>
	/// Pages of developer results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeveloperPages
	{
		
		/// <summary>
		/// The total number of results
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public int Count { get; set; }
		
		/// <summary>
		/// An array of developers for the current page
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="list")]
		public Developer[] List { get; set; }
		
		/// <summary>
		/// The current page number for this result set
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// The total number of pages available for this result set
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pages")]
		public int Pages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeveloperToken
	{
		
		/// <summary>
		/// The id of the developer connecting their Stripe account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="developerId")]
		public string DeveloperId { get; set; }
		
		/// <summary>
		/// The time (in milliseconds) when this URL expires
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expires")]
		public long Expires { get; set; }
		
		/// <summary>
		/// The URL that this developer can use to connect their Stripe account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetUrl")]
		public string TargetUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Event
	{
		
		/// <summary>
		/// An app
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="app")]
		public App App { get; set; }
		
		/// <summary>
		/// The date (in millis) of when this event occurred
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public long CreatedDate { get; set; }
		
		/// <summary>
		/// A description of the event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// A Developer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="developer")]
		public Developer Developer { get; set; }
		
		/// <summary>
		/// The id of the event
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// The current event type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		public EventEventType EventType { get; set; }
		
		/// <summary>
		/// The id of the marketplace that owns this event
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplaceId")]
		public string MarketplaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ownership")]
		public Ownership Ownership { get; set; }
		
		/// <summary>
		/// A Review
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="review")]
		public Review Review { get; set; }
		
		/// <summary>
		/// A transaction for an app initiated by a user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public Transaction Transaction { get; set; }
		
		/// <summary>
		/// A User
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EventEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="app.submitted")]
		app_submitted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="app.approved")]
		app_approved = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="app.suspended")]
		app_suspended = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="app.unsuspended")]
		app_unsuspended = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="app.rejected")]
		app_rejected = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="app.inReview")]
		app_inReview = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="app.installed")]
		app_installed = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="app.uninstalled")]
		app_uninstalled = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="review.created")]
		review_created = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="review.updated")]
		review_updated = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="review.approved")]
		review_approved = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="review.spam")]
		review_spam = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="review.removed")]
		review_removed = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="user.created")]
		user_created = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="user.updated")]
		user_updated = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="user.removed")]
		user_removed = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="user.invalidPaymentDetails")]
		user_invalidPaymentDetails = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="user.paymentDetailsRequired")]
		user_paymentDetailsRequired = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="developer.created")]
		developer_created = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="developer.updated")]
		developer_updated = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="developer.removed")]
		developer_removed = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="developer.paymentDetailsRequired")]
		developer_paymentDetailsRequired = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="permission.added")]
		permission_added = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="permission.removed")]
		permission_removed = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="payment.complete")]
		payment_complete = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="payment.refunded")]
		payment_refunded = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="payment.required")]
		payment_required = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ownership.expired")]
		ownership_expired = 27,
	}
	
	/// <summary>
	/// The file ids of the uploaded file
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class File
	{
		
		/// <summary>
		/// The internet media type of the file
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		/// <summary>
		/// The id of the uploaded file
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileId")]
		public string FileId { get; set; }
		
		/// <summary>
		/// The path where the file can be located.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileUrl")]
		public string FileUrl { get; set; }
		
		/// <summary>
		/// The hashes requested for the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public Hash Hash { get; set; }
		
		/// <summary>
		/// The mime type validation check to see if the extension of this file matches it's content. Can be PASSED or FAILED
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeCheck")]
		public System.Nullable<FileMimeCheck> MimeCheck { get; set; }
		
		/// <summary>
		/// The name of the uploaded file
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The number of bytes in the uploaded file
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="size")]
		public int Size { get; set; }
		
		/// <summary>
		/// The time in milliseconds when the file was uploaded
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uploadDate")]
		public long UploadDate { get; set; }
		
		/// <summary>
		/// The virus scan results for this file
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virusScan")]
		public VirusScan VirusScan { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FileMimeCheck
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PASSED")]
		PASSED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 1,
	}
	
	/// <summary>
	/// The signed URL for downloading a private file
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileDownload
	{
		
		/// <summary>
		/// The signed URL for downloading a private file
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Pages of file results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class File_Pages
	{
		
		/// <summary>
		/// The total number of results
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public int Count { get; set; }
		
		/// <summary>
		/// An array of users for the current page
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="list")]
		public File[] List { get; set; }
		
		/// <summary>
		/// The current page number for this result set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		/// <summary>
		/// The total number of pages available for this result set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pages")]
		public System.Nullable<System.Int32> Pages { get; set; }
	}
	
	/// <summary>
	/// The virus found within this file
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FoundVirus
	{
		
		/// <summary>
		/// The name of the file
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileName")]
		public string FileName { get; set; }
		
		/// <summary>
		/// The name of the virus
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virusName")]
		public string VirusName { get; set; }
	}
	
	/// <summary>
	/// The hashes requested for the file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Hash
	{
		
		/// <summary>
		/// The MD5 hash for this uploaded file.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MD5 { get; set; }
		
		/// <summary>
		/// The SHA-1 hash for this uploaded file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="SHA-1")]
		public string SHA_1 { get; set; }
		
		/// <summary>
		/// The SHA-256 hash for this uploaded file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="SHA-256")]
		public string SHA_256 { get; set; }
	}
	
	/// <summary>
	/// A marketplace
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Market
	{
		
		/// <summary>
		/// The different app attributes supported by this marketplace
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public Attributes[] Attributes { get; set; }
		
		/// <summary>
		/// The category groups supported by this marketplace
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryGroups")]
		public CategoryGroups[] CategoryGroups { get; set; }
		
		/// <summary>
		/// The id of this marketplace
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marketplaceId")]
		public string MarketplaceId { get; set; }
		
		/// <summary>
		/// The URL template for previewing apps on this marketplace
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previewAppUrl")]
		public string PreviewAppUrl { get; set; }
		
		/// <summary>
		/// The URL template for viewing apps on this marketplace
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="viewAppUrl")]
		public string ViewAppUrl { get; set; }
	}
	
	/// <summary>
	/// Pages of marketplace results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Market_Pages
	{
		
		/// <summary>
		/// The total number of results
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public int Count { get; set; }
		
		/// <summary>
		/// An array of markets for the current page
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="list")]
		public Market[] List { get; set; }
		
		/// <summary>
		/// The current page number for this result set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		/// <summary>
		/// The total number of pages available for this result set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pages")]
		public System.Nullable<System.Int32> Pages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Ownership
	{
		
		/// <summary>
		/// The id of the app that is owned
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// A custom JSON object that you can create and attach to this record
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customData")]
		public string CustomData { get; set; }
		
		/// <summary>
		/// The date (in millis) of when this app was owned
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date")]
		public long Date { get; set; }
		
		/// <summary>
		/// The id of the developer for this app
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="developerId")]
		public string DeveloperId { get; set; }
		
		/// <summary>
		/// The date (in millis) of when this app ownership expires
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires")]
		public System.Nullable<System.Int64> Expires { get; set; }
		
		/// <summary>
		/// The model that describes the cost and pricing for apps
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="model")]
		public Model Model { get; set; }
		
		/// <summary>
		/// The id of this ownership
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ownershipId")]
		public string OwnershipId { get; set; }
		
		/// <summary>
		/// The current ownership status for this app
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ownershipStatus")]
		public OwnershipOwnershipStatus OwnershipStatus { get; set; }
		
		/// <summary>
		/// The current ownership type for this app
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ownershipType")]
		public OwnershipOwnershipType OwnershipType { get; set; }
		
		/// <summary>
		/// The date (in millis) of when this app was uninstalled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uninstallDate")]
		public System.Nullable<System.Int64> UninstallDate { get; set; }
		
		/// <summary>
		/// The id of the user that owns this app
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OwnershipOwnershipStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending")]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="active")]
		active = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="uninstalled")]
		uninstalled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cancelled")]
		cancelled = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OwnershipOwnershipType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="full")]
		full = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="subscription")]
		subscription = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="trial")]
		trial = 2,
	}
	
	/// <summary>
	/// Pages of ownership results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OwnershipPages
	{
		
		/// <summary>
		/// The total number of results
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public int Count { get; set; }
		
		/// <summary>
		/// An array of ownership records for the current page
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="list")]
		public Ownership[] List { get; set; }
		
		/// <summary>
		/// The current page number for this result set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		/// <summary>
		/// The total number of pages available for this result set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pages")]
		public System.Nullable<System.Int32> Pages { get; set; }
	}
	
	/// <summary>
	/// Details of the live version of this app
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Parent
	{
		
		/// <summary>
		/// The current status of this review
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
	}
	
	/// <summary>
	/// Profanity found in this review
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Profanity
	{
		
		/// <summary>
		/// The ending location of the profanity
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="end")]
		public int End { get; set; }
		
		/// <summary>
		/// The starting location of the profanity
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="start")]
		public int Start { get; set; }
		
		/// <summary>
		/// The profane word
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="word")]
		public string Word { get; set; }
	}
	
	/// <summary>
	/// Resticts users from accessing this app
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Restrictions
	{
		
		/// <summary>
		/// A custom object containing fields paired with an array value of restrictions. Restricts the users that may own this app. Example: {'country':['Canada','Mexico']}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="own")]
		public string Own { get; set; }
		
		/// <summary>
		/// A custom object containing fields paired with an array value of restrictions. Restricts the users that may view this app. Example: {'country':['Canada','Mexico']}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="view")]
		public string View { get; set; }
	}
	
	/// <summary>
	/// The revenue generated by this app
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Revenue
	{
		
		/// <summary>
		/// The total revenue generated for the developer by this app in cents
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="developer")]
		public int Developer { get; set; }
		
		/// <summary>
		/// The total revenue generated by this app in cents
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public int Total { get; set; }
	}
	
	/// <summary>
	/// A Review
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Review
	{
		
		/// <summary>
		/// The Id of the App that owns this review
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// A custom JSON object that you can create and attach to this record
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customData")]
		public string CustomData { get; set; }
		
		/// <summary>
		/// The review's description. Limited to 2000 characters.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The review's headline. Limited to 50 characters.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="headline")]
		public string Headline { get; set; }
		
		/// <summary>
		/// The rating given within this review. The rating is represented as an integer between 100 and 500 (1 - 5 stars)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rating")]
		public int Rating { get; set; }
		
		/// <summary>
		/// The date (in millis) this Review was posted
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reportDate")]
		public long ReportDate { get; set; }
		
		/// <summary>
		/// The id for this review.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reviewId")]
		public string ReviewId { get; set; }
		
		/// <summary>
		/// The current status of this review
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
		
		/// <summary>
		/// The type for this review
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// A User
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
		
		/// <summary>
		/// A User Account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAccount")]
		public UserAccount UserAccount { get; set; }
		
		/// <summary>
		/// The id of the user account that posted this review
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAccountId")]
		public string UserAccountId { get; set; }
		
		/// <summary>
		/// The id of the User that posted this review
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	/// <summary>
	/// Pages of review results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReviewPages
	{
		
		/// <summary>
		/// The total number of results
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public int Count { get; set; }
		
		/// <summary>
		/// An array of reviews for the current page
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="list")]
		public Review[] List { get; set; }
		
		/// <summary>
		/// The current page number for this result set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		/// <summary>
		/// The total number of pages available for this result set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pages")]
		public System.Nullable<System.Int32> Pages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Review_Entry
	{
		
		/// <summary>
		/// The date (in millis) of when this action was performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date")]
		public long Date { get; set; }
		
		/// <summary>
		/// The id of the review involved in this action
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reviewId")]
		public string ReviewId { get; set; }
	}
	
	/// <summary>
	/// Pages of search results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchPages
	{
		
		/// <summary>
		/// The total number of results
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public int Count { get; set; }
		
		/// <summary>
		/// An array of results for the current page
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="list")]
		public App[] List { get; set; }
		
		/// <summary>
		/// The current page number for this result set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		/// <summary>
		/// The total number of pages available for this result set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pages")]
		public System.Nullable<System.Int32> Pages { get; set; }
	}
	
	/// <summary>
	/// The statistic value
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Stat
	{
		
		/// <summary>
		/// The statistic value
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public long Value { get; set; }
	}
	
	/// <summary>
	/// The current status of this review
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Status
	{
		
		/// <summary>
		/// A list of profanity found in this review
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="profanity")]
		public Profanity[] Profanity { get; set; }
		
		/// <summary>
		/// Text describing the reason for the current status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public StatusReason Reason { get; set; }
		
		/// <summary>
		/// The current status value
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public StatusValue Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum StatusReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="profanity")]
		profanity = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="spam")]
		spam = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum StatusValue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending")]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="spam")]
		spam = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="flagged")]
		flagged = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="approved")]
		approved = 3,
	}
	
	/// <summary>
	/// The total number of events for a particular field
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Total
	{
		
		/// <summary>
		/// The totals for the app
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="apps")]
		public AppTotal Apps { get; set; }
		
		/// <summary>
		/// The end date for this total (in millis)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.Nullable<System.Int64> End { get; set; }
		
		/// <summary>
		/// The start date for this total (in millis)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.Int64> Start { get; set; }
		
		/// <summary>
		/// The totals for the field
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totals")]
		public DataTotal Totals { get; set; }
	}
	
	/// <summary>
	/// A transaction for an app initiated by a user
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Transaction
	{
		
		/// <summary>
		/// The total amount paid in cents
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The id of the app involved with this transaction
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// A custom JSON object that you can create and attach to this record
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customData")]
		public string CustomData { get; set; }
		
		/// <summary>
		/// The date (in millis) of when this transaction occurred
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date")]
		public long Date { get; set; }
		
		/// <summary>
		/// The total amount paid to the developer in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="developerAmount")]
		public System.Nullable<System.Int32> DeveloperAmount { get; set; }
		
		/// <summary>
		/// The id of the developer involved with this transaction
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="developerId")]
		public string DeveloperId { get; set; }
		
		/// <summary>
		/// The total amount paid to payment processing fees in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feeAmount")]
		public System.Nullable<System.Int32> FeeAmount { get; set; }
		
		/// <summary>
		/// The total amount paid to the marketplace owner in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketplaceAmount")]
		public System.Nullable<System.Int32> MarketplaceAmount { get; set; }
		
		/// <summary>
		/// The id for the ownership associated with this transaction
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ownershipId")]
		public string OwnershipId { get; set; }
		
		/// <summary>
		/// The id for this transaction
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
		
		/// <summary>
		/// The type for this transaction
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TransactionType Type { get; set; }
		
		/// <summary>
		/// The id of the user making the transaction
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TransactionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="payment")]
		payment = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="refund")]
		refund = 1,
	}
	
	/// <summary>
	/// Pages of transaction results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransactionPages
	{
		
		/// <summary>
		/// The total number of results
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public int Count { get; set; }
		
		/// <summary>
		/// An array of paymnets for the current page
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="list")]
		public Transaction[] List { get; set; }
		
		/// <summary>
		/// The current page number for this result set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		/// <summary>
		/// The total number of pages available for this result set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pages")]
		public System.Nullable<System.Int32> Pages { get; set; }
	}
	
	/// <summary>
	/// A User
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class User
	{
		
		/// <summary>
		/// The date (in millis) of when this user was created
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created")]
		public long Created { get; set; }
		
		/// <summary>
		/// A custom JSON object that you can create and attach to this record
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customData")]
		public string CustomData { get; set; }
		
		/// <summary>
		/// The user's email
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The user's name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type for this user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The id of this user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	/// <summary>
	/// A User Account
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserAccount
	{
		
		/// <summary>
		/// A custom JSON object that you can create and attach to this record
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customData")]
		public string CustomData { get; set; }
		
		/// <summary>
		/// The contact email address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The name for the account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The id of this user account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userAccountId")]
		public string UserAccountId { get; set; }
		
		/// <summary>
		/// The id of this user that this account belongs to
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	/// <summary>
	/// Pages of userAccount results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserAccountPages
	{
		
		/// <summary>
		/// The total number of results
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public int Count { get; set; }
		
		/// <summary>
		/// An array of userAccounts for the current page
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="list")]
		public UserAccount[] List { get; set; }
		
		/// <summary>
		/// The current page number for this result set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		/// <summary>
		/// The total number of pages available for this result set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pages")]
		public System.Nullable<System.Int32> Pages { get; set; }
	}
	
	/// <summary>
	/// Pages of user results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserPages
	{
		
		/// <summary>
		/// The total number of results
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public int Count { get; set; }
		
		/// <summary>
		/// An array of users for the current page
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="list")]
		public User[] List { get; set; }
		
		/// <summary>
		/// The current page number for this result set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		/// <summary>
		/// The total number of pages available for this result set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pages")]
		public System.Nullable<System.Int32> Pages { get; set; }
	}
	
	/// <summary>
	/// Pages of AppVersion results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VersionPages
	{
		
		/// <summary>
		/// The total number of results
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public int Count { get; set; }
		
		/// <summary>
		/// An array of apps for the current page
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="list")]
		public AppVersion[] List { get; set; }
		
		/// <summary>
		/// The current page number for this result set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		/// <summary>
		/// The total number of pages available for this result set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pages")]
		public System.Nullable<System.Int32> Pages { get; set; }
	}
	
	/// <summary>
	/// The virus scan results for this file
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VirusScan
	{
		
		/// <summary>
		/// The date (in milliseconds) when this file finished it's scan
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finished")]
		public System.Nullable<System.Int64> Finished { get; set; }
		
		/// <summary>
		/// The list of viruses found in this file
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="foundViruses")]
		public FoundVirus[] FoundViruses { get; set; }
		
		/// <summary>
		/// The date (in milliseconds) when this file started it's scan
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="started")]
		public System.Nullable<System.Int64> Started { get; set; }
		
		/// <summary>
		/// The status of this scan. Can be NOT_SCANNED, CLEAN or DIRTY
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns a paginated list of APPROVED or SUSPENDED apps
		/// - Results are paginated and the default is value is 1000 if no limit is provided
		/// - If no query is specified, returns all APPROVED or SUSPENDED apps within the marketplace
		/// 
		/// AppsGetByQueryAndSortAndPageNumberAndLimitAndUserIdAndIsOwner apps
		/// </summary>
		/// <param name="query">A query document. Example: {'name':'MyApp'} matches all the apps that have the name 'MyApp'</param>
		/// <param name="sort">A sort document. Example: {'name':1} sorts the results by name in ascending order</param>
		/// <param name="pageNumber">The result set page number to be returned</param>
		/// <param name="limit">The maximum number of results to return per page</param>
		/// <param name="userId">The unique id of the user requesting this resource</param>
		/// <param name="isOwner">Whether this result should only contain apps that are owned by this user</param>
		public async Task AppsGetByQueryAndSortAndPageNumberAndLimitAndUserIdAndIsOwnerAsync(string query, string sort, int pageNumber, int limit, string userId, bool isOwner, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&pageNumber="+pageNumber+"&limit="+limit+"&userId=" + (userId==null? "" : System.Uri.EscapeDataString(userId))+"&isOwner="+isOwner;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a new app for this developer
		/// - This method is called on behalf of a developer.
		/// - Price is required if the model is 'single' or 'recurring'
		/// - Returns the newly created app
		/// 
		/// AppsPostByDeveloperIdAndNameAndTypeAndModelAndCustomDataAndAttributesAndRestrictAndAllowAndAccess apps
		/// </summary>
		/// <param name="developerId">The unique id of the developer that is adding this app</param>
		/// <param name="name">The name of the app</param>
		/// <param name="type">The type for this app</param>
		/// <param name="model">A JSON object representing the pricing model type for this app</param>
		/// <param name="customData">A custom JSON object that you can create and attach to this record</param>
		/// <param name="attributes">A custom set of app attributes defined by the administrator and attached to this app</param>
		/// <param name="restrict">JSON object to restrict users from owning or viewing this app. Example: {'view':{'country':['Canada','Mexico']},'own':{'country':['Canada','Mexico']}} restricts users from canada and mexico from viewing or owning this app</param>
		/// <param name="allow">JSON object to restrict users from owning or viewing this app. Example: {'view':{'country':['Canada','Mexico']},'own':{'country':['Canada','Mexico']}} restricts users from canada and mexico from viewing or owning this app</param>
		/// <param name="access">JSON array of data access requirements</param>
		public async Task AppsPostByDeveloperIdAndNameAndTypeAndModelAndCustomDataAndAttributesAndRestrictAndAllowAndAccessAsync(string developerId, string name, string type, string model, string customData, string attributes, string restrict, string allow, string access, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps?developerId=" + (developerId==null? "" : System.Uri.EscapeDataString(developerId))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&type=" + (type==null? "" : System.Uri.EscapeDataString(type))+"&model=" + (model==null? "" : System.Uri.EscapeDataString(model))+"&customData=" + (customData==null? "" : System.Uri.EscapeDataString(customData))+"&attributes=" + (attributes==null? "" : System.Uri.EscapeDataString(attributes))+"&restrict=" + (restrict==null? "" : System.Uri.EscapeDataString(restrict))+"&allow=" + (allow==null? "" : System.Uri.EscapeDataString(allow))+"&access=" + (access==null? "" : System.Uri.EscapeDataString(access));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a single APPROVED or SUSPENDED app
		/// - A 'view' event is recorded when trackViews is set to true
		/// 
		/// AppsBySafeName_safeNameGetByUserIdAndTrackViews apps/bySafeName/{safeName}
		/// </summary>
		/// <param name="safeName">The safeName of the App to be located</param>
		/// <param name="userId">The unique id of the user that is requesting this resource</param>
		/// <param name="trackViews">Whether this call should be tracked as a 'view' for this app. Default is false.</param>
		public async Task AppsBySafeName_safeNameGetByUserIdAndTrackViewsAsync(string safeName, string userId, bool trackViews, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/bySafeName/"+ (safeName==null? "" : System.Uri.EscapeDataString(safeName))+"&userId=" + (userId==null? "" : System.Uri.EscapeDataString(userId))+"&trackViews="+trackViews;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Searches through the text of fields to find APPROVED or SUSPENDED apps
		/// - Results are returned for the market provided within the basic authentication credentials
		/// 
		/// AppsTextSearchGetByQueryAndTextAndFieldsAndPageNumberAndLimitAndUserIdAndIsOwned apps/textSearch
		/// </summary>
		/// <param name="query">A query document. Example: {'name':'MyApp'} matches all the documents that have the name 'MyApp'</param>
		/// <param name="text">The text to search for.</param>
		/// <param name="fields">A JSON array containing all the fields to be searched through. Example: ['name', 'customData.description']</param>
		/// <param name="pageNumber">The result set page number to be returned</param>
		/// <param name="limit">The maximum number of results to return per page</param>
		/// <param name="userId">The unique id of the user requesting this resource</param>
		/// <param name="isOwned">Whether this result should only contain apps that are owned by this user</param>
		public async Task AppsTextSearchGetByQueryAndTextAndFieldsAndPageNumberAndLimitAndUserIdAndIsOwnedAsync(string query, string text, string fields, int pageNumber, int limit, string userId, bool isOwned, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/textSearch?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&pageNumber="+pageNumber+"&limit="+limit+"&userId=" + (userId==null? "" : System.Uri.EscapeDataString(userId))+"&isOwned="+isOwned;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a paginated list of AppVersions
		/// - Results are paginated when limit is set, otherwise all results are returned
		/// - If no query is specified, returns all AppVersions within the marketplace
		/// - Only returns AppVersions owned by this developer
		/// 
		/// AppsVersionsGetByQueryAndSortAndPageNumberAndLimitAndDeveloperId apps/versions
		/// </summary>
		/// <param name="query">A query document. Example: {'name':'MyApp'} matches all the apps that have the name 'MyApp'</param>
		/// <param name="sort">A sort document. Example: {'name':1} sorts the results by name in ascending order</param>
		/// <param name="pageNumber">The result set page number to be returned</param>
		/// <param name="limit">The maximum number of results to return per page</param>
		/// <param name="developerId">The unique id of the developer requesting this resource</param>
		public async Task AppsVersionsGetByQueryAndSortAndPageNumberAndLimitAndDeveloperIdAsync(string query, string sort, int pageNumber, int limit, string developerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/versions?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&pageNumber="+pageNumber+"&limit="+limit+"&developerId=" + (developerId==null? "" : System.Uri.EscapeDataString(developerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes app and all versions
		/// - This method is called on behalf of a developer.
		/// 
		/// Apps_appIdDeleteByDeveloperId apps/{appId}
		/// </summary>
		/// <param name="appId">The id of the App to be removed</param>
		/// <param name="developerId">The unique id of the developer that is removing this app</param>
		public async Task Apps_appIdDeleteByDeveloperIdAsync(string appId, string developerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"&developerId=" + (developerId==null? "" : System.Uri.EscapeDataString(developerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a single APPROVED or SUSPENDED app
		/// - A 'view' event is recorded when trackViews is set to true
		/// 
		/// Apps_appIdGetByUserIdAndTrackViews apps/{appId}
		/// </summary>
		/// <param name="appId">The id of the App to be located</param>
		/// <param name="userId">The unique id of the user that is requesting this resource</param>
		/// <param name="trackViews">Whether this call should be tracked as a 'view' for this app. Default is false.</param>
		public async Task Apps_appIdGetByUserIdAndTrackViewsAsync(string appId, string userId, bool trackViews, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"&userId=" + (userId==null? "" : System.Uri.EscapeDataString(userId))+"&trackViews="+trackViews;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Change the live app to another, previously approved version
		/// - This method is called on behalf of a developer.
		/// 
		/// Apps_appIdLivePostByDeveloperIdAndVersion apps/{appId}/live
		/// </summary>
		/// <param name="appId">The id of the App to be changed</param>
		/// <param name="developerId">The unique id of the developer that is changing this AppVersion</param>
		/// <param name="version">The new version of the live App</param>
		public async Task Apps_appIdLivePostByDeveloperIdAndVersionAsync(string appId, string developerId, string version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/live&developerId=" + (developerId==null? "" : System.Uri.EscapeDataString(developerId))+"&version=" + (version==null? "" : System.Uri.EscapeDataString(version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Publishes the current working version of the app to the marketplace
		/// - This method is called on behalf of a developer.
		/// - Only effects the current working version of the app.
		/// 
		/// Apps_appIdPublishPostByDeveloperIdAndVersionAndAutoApprove apps/{appId}/publish
		/// </summary>
		/// <param name="appId">The id of the app to be published</param>
		/// <param name="developerId">The unique id of the developer that is modifying this app</param>
		/// <param name="version">The version of the app to be published</param>
		/// <param name="autoApprove">If true, this AppVersion is automatically approved and becomes immediately available to end users</param>
		public async Task Apps_appIdPublishPostByDeveloperIdAndVersionAndAutoApproveAsync(string appId, string developerId, int version, bool autoApprove, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/publish&developerId=" + (developerId==null? "" : System.Uri.EscapeDataString(developerId))+"&version="+version+"&autoApprove="+autoApprove;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes AppVersion
		/// - This method is called on behalf of a developer.
		/// 
		/// Apps_appIdVersions_versionDeleteByDeveloperId apps/{appId}/versions/{version}
		/// </summary>
		/// <param name="appId">The id of the App to be removed</param>
		/// <param name="version">The version of the App to be removed</param>
		/// <param name="developerId">The unique id of the developer that is removing this app</param>
		public async Task Apps_appIdVersions_versionDeleteByDeveloperIdAsync(string appId, string version, string developerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/versions/"+ (version==null? "" : System.Uri.EscapeDataString(version))+"&developerId=" + (developerId==null? "" : System.Uri.EscapeDataString(developerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a single AppVersion
		/// - Only returns AppVersions owned by this developer
		/// 
		/// Apps_appIdVersions_versionGetByDeveloperId apps/{appId}/versions/{version}
		/// </summary>
		/// <param name="appId">The id of the App to be located</param>
		/// <param name="version">The version number of the app</param>
		/// <param name="developerId">The unique id of the developer that is requesting this resource</param>
		public async Task Apps_appIdVersions_versionGetByDeveloperIdAsync(string appId, int version, string developerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/versions/"+version+"&developerId=" + (developerId==null? "" : System.Uri.EscapeDataString(developerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the app fields or creates a new version
		/// - This method is called on behalf of a developer.
		/// - Price and is required if the model is 'single' or 'recurring'
		/// - Returns the newly updated app
		/// - This endpoint updates only the fields provided in the request (relative update). In contrast, the POST version of this method replaces the entire object to match the request (absolute update).
		/// 
		/// Apps_appIdVersions_versionPatchByDeveloperIdAndNameAndTypeAndModelAndCustomDataAndAttributesAndRestrictAndAllowAndAccessAndApprovalRequired apps/{appId}/versions/{version}
		/// </summary>
		/// <param name="appId">The id of the App to be updated</param>
		/// <param name="version">The version of the App to be updated</param>
		/// <param name="developerId">The unique id of the developer that is updating this app</param>
		/// <param name="name">The name of the app</param>
		/// <param name="type">The type for this app</param>
		/// <param name="model">A JSON object representing the pricing model type for this app</param>
		/// <param name="customData">A custom JSON object that you can create and attach to this record</param>
		/// <param name="attributes">A custom set of app attributes defined by the administrator and attached to this app</param>
		/// <param name="restrict">JSON object to restrict users from purchasing or viewing this app. Example: {'view':{'country':['Canada','Mexico']},'purchase':{'country':['Canada','Mexico']}} restricts users from canada and mexico from viewing or purchasing this app</param>
		/// <param name="allow">JSON object to allow users to purchase or view this app. Example: {'purchase':{'country':['Canada','Mexico']}} allows only users from canada and mexico to purchase this app</param>
		/// <param name="access">JSON array of data access requirements</param>
		/// <param name="approvalRequired">False if updates should skip the approval process and be available immediately. Default is True</param>
		public async Task Apps_appIdVersions_versionPatchByDeveloperIdAndNameAndTypeAndModelAndCustomDataAndAttributesAndRestrictAndAllowAndAccessAndApprovalRequiredAsync(string appId, string version, string developerId, string name, string type, string model, string customData, string attributes, string restrict, string allow, string access, string approvalRequired, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/versions/"+ (version==null? "" : System.Uri.EscapeDataString(version))+"&developerId=" + (developerId==null? "" : System.Uri.EscapeDataString(developerId))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&type=" + (type==null? "" : System.Uri.EscapeDataString(type))+"&model=" + (model==null? "" : System.Uri.EscapeDataString(model))+"&customData=" + (customData==null? "" : System.Uri.EscapeDataString(customData))+"&attributes=" + (attributes==null? "" : System.Uri.EscapeDataString(attributes))+"&restrict=" + (restrict==null? "" : System.Uri.EscapeDataString(restrict))+"&allow=" + (allow==null? "" : System.Uri.EscapeDataString(allow))+"&access=" + (access==null? "" : System.Uri.EscapeDataString(access))+"&approvalRequired=" + (approvalRequired==null? "" : System.Uri.EscapeDataString(approvalRequired));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the app or creates a new version
		/// - This method is called on behalf of a developer.
		/// - Price and is required if the model is 'single' or 'recurring'
		/// - Returns the newly updated app
		/// - This endpoint replaces the entire object to match the request (absolute update). In contrast, the PATCH version of this endpoint updates only the fields provided in the request (relative update).
		/// 
		/// Apps_appIdVersions_versionPostByDeveloperIdAndNameAndTypeAndModelAndCustomDataAndAttributesAndRestrictAndAllowAndAccessAndApprovalRequired apps/{appId}/versions/{version}
		/// </summary>
		/// <param name="appId">The id of the App to be updated</param>
		/// <param name="version">The version of the App to be updated</param>
		/// <param name="developerId">The unique id of the developer that is updating this app</param>
		/// <param name="name">The name of the app</param>
		/// <param name="type">The type for this app</param>
		/// <param name="model">A JSON object representing the pricing model type for this app</param>
		/// <param name="customData">A custom JSON object that you can create and attach to this record</param>
		/// <param name="attributes">A custom set of app attributes defined by the administrator and attached to this app</param>
		/// <param name="restrict">JSON object to restrict users from purchasing or viewing this app. Example: {'view':{'country':['Canada','Mexico']},'purchase':{'country':['Canada','Mexico']}} restricts users from canada and mexico from viewing or purchasing this app</param>
		/// <param name="allow">JSON object to allow users to purchase or view this app. Example: {'purchase':{'country':['Canada','Mexico']}} allows only users from canada and mexico to purchase this app</param>
		/// <param name="access">JSON array of data access requirements</param>
		/// <param name="approvalRequired">False if updates should skip the approval process and be available immediately. Default is True</param>
		public async Task Apps_appIdVersions_versionPostByDeveloperIdAndNameAndTypeAndModelAndCustomDataAndAttributesAndRestrictAndAllowAndAccessAndApprovalRequiredAsync(string appId, string version, string developerId, string name, string type, string model, string customData, string attributes, string restrict, string allow, string access, string approvalRequired, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/versions/"+ (version==null? "" : System.Uri.EscapeDataString(version))+"&developerId=" + (developerId==null? "" : System.Uri.EscapeDataString(developerId))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&type=" + (type==null? "" : System.Uri.EscapeDataString(type))+"&model=" + (model==null? "" : System.Uri.EscapeDataString(model))+"&customData=" + (customData==null? "" : System.Uri.EscapeDataString(customData))+"&attributes=" + (attributes==null? "" : System.Uri.EscapeDataString(attributes))+"&restrict=" + (restrict==null? "" : System.Uri.EscapeDataString(restrict))+"&allow=" + (allow==null? "" : System.Uri.EscapeDataString(allow))+"&access=" + (access==null? "" : System.Uri.EscapeDataString(access))+"&approvalRequired=" + (approvalRequired==null? "" : System.Uri.EscapeDataString(approvalRequired));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows a developer or administrator to change the status of apps
		/// Only certain status changes are allowed. For instance, a developer is only able to suspend and unsuspend their app (which must already be approved). See here for a state change diagram of allowed status changes for administrators: https://support.openchannel.io/documentation/api/#415-apps-status-change
		/// 
		/// Apps_appIdVersions_versionStatusPostByDeveloperIdAndStatusAndModifiedByAndReason apps/{appId}/versions/{version}/status
		/// </summary>
		/// <param name="appId">The id of the App to be updated</param>
		/// <param name="version">The version of the App to be updated</param>
		/// <param name="developerId">The unique id of the developer that is modifying this app</param>
		/// <param name="status">The new status for this app. Can be either 'inReview', 'approved', 'suspended' or 'rejected'</param>
		/// <param name="modifiedBy">The role initiating this status change. Can be either 'developer' or 'administrator' (default)</param>
		/// <param name="reason">The reason for this status change</param>
		public async Task Apps_appIdVersions_versionStatusPostByDeveloperIdAndStatusAndModifiedByAndReasonAsync(string appId, int version, string developerId, Apps_appIdVersions_versionStatusPostByDeveloperIdAndStatusAndModifiedByAndReasonStatus status, Apps_appIdVersions_versionStatusPostByDeveloperIdAndStatusAndModifiedByAndReasonModifiedBy modifiedBy, string reason, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/versions/"+version+"/status&developerId=" + (developerId==null? "" : System.Uri.EscapeDataString(developerId))+"&status=" + status+"&modifiedBy=" + modifiedBy+"&reason=" + (reason==null? "" : System.Uri.EscapeDataString(reason));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a payment for an app on behalf of a user
		/// - Results are returned for the market provided within the basic authentication credentials
		/// - Payments must be enabled and 'Custom' must be selected as the gateway in order to use this API endpoint
		/// 
		/// Custom_gatewayPayment_ownershipIdPostByAmountAndDateAndFeeAmountAndMarketplaceAmountAndDeveloperAmountAndCustomData custom-gateway/payment/{ownershipId}
		/// </summary>
		/// <param name="ownershipId">The id of the ownership record involved in this transaction</param>
		/// <param name="amount">The total amount paid in cents</param>
		/// <param name="date">The date (in milliseconds) of when this payment was made</param>
		/// <param name="feeAmount">The fee (in cents) paid to a payment processors or third parties to process this payment. Default is 0.</param>
		/// <param name="marketplaceAmount">The amount (in cents) paid to the marketplace owner as a commission for the purchase of this app. Defaults based on the commission amount configured for this marketplace.</param>
		/// <param name="developerAmount">The amount (in cents) paid to the owner of the app. Defaults based on the commission amount configured for this marketplace.</param>
		/// <param name="customData">A custom JSON object to attach to this transaction</param>
		public async Task Custom_gatewayPayment_ownershipIdPostByAmountAndDateAndFeeAmountAndMarketplaceAmountAndDeveloperAmountAndCustomDataAsync(string ownershipId, int amount, long date, int feeAmount, int marketplaceAmount, int developerAmount, string customData, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "custom-gateway/payment/"+ (ownershipId==null? "" : System.Uri.EscapeDataString(ownershipId))+"&amount="+amount+"&date="+date+"&feeAmount="+feeAmount+"&marketplaceAmount="+marketplaceAmount+"&developerAmount="+developerAmount+"&customData=" + (customData==null? "" : System.Uri.EscapeDataString(customData));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fully or partially refund payment for an app on behalf of a user
		/// - Results are returned for the market provided within the basic authentication credentials
		/// - Payments must be enabled and 'Custom' must be selected as the gateway in order to use this API endpoint
		/// 
		/// Custom_gatewayRefund_ownershipIdPostByAmountAndDateAndFeeAmountAndMarketplaceAmountAndDeveloperAmountAndCustomData custom-gateway/refund/{ownershipId}
		/// </summary>
		/// <param name="ownershipId">The id of the ownership record involved in this transaction</param>
		/// <param name="amount">The total amount refunded in cents</param>
		/// <param name="date">The date (in milliseconds) of when this refund was made</param>
		/// <param name="feeAmount">The fee (in cents) recovered from a payment processor or third party to process this payment. The default value is 0</param>
		/// <param name="marketplaceAmount">The amount (in cents) recovered from the marketplace owner as a commission refund for the purchase of this app</param>
		/// <param name="developerAmount">The amount (in cents) recovered from the owner of the app</param>
		/// <param name="customData">A custom JSON object to attach to this transaction</param>
		public async Task Custom_gatewayRefund_ownershipIdPostByAmountAndDateAndFeeAmountAndMarketplaceAmountAndDeveloperAmountAndCustomDataAsync(string ownershipId, int amount, long date, int feeAmount, int marketplaceAmount, int developerAmount, string customData, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "custom-gateway/refund/"+ (ownershipId==null? "" : System.Uri.EscapeDataString(ownershipId))+"&amount="+amount+"&date="+date+"&feeAmount="+feeAmount+"&marketplaceAmount="+marketplaceAmount+"&developerAmount="+developerAmount+"&customData=" + (customData==null? "" : System.Uri.EscapeDataString(customData));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a paginated list of developerAccounts
		/// - Results are paginated and the default is value is 1000 if no limit is provided
		/// 
		/// DeveloperAccountsGetByQueryAndSortAndPageNumberAndLimit developerAccounts
		/// </summary>
		/// <param name="query">A query document. Example: {'name':'NASA'} matches all the developerAccounts that have the name 'NASA'</param>
		/// <param name="sort">A sort document. Example: {'name':1} sorts the results by name in ascending order</param>
		/// <param name="pageNumber">The result set page number to be returned</param>
		/// <param name="limit">The maximum number of results to return per page</param>
		public async Task DeveloperAccountsGetByQueryAndSortAndPageNumberAndLimitAsync(string query, string sort, int pageNumber, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "developerAccounts?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&pageNumber="+pageNumber+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes the developer account
		/// DeveloperAccounts_developerAccountIdDelete developerAccounts/{developerAccountId}
		/// </summary>
		/// <param name="developerAccountId">The id of the developer account to be updated</param>
		public async Task DeveloperAccounts_developerAccountIdDeleteAsync(string developerAccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "developerAccounts/"+ (developerAccountId==null? "" : System.Uri.EscapeDataString(developerAccountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a single developer account
		/// DeveloperAccounts_developerAccountIdGet developerAccounts/{developerAccountId}
		/// </summary>
		/// <param name="developerAccountId">The id of the developer account to be located</param>
		public async Task DeveloperAccounts_developerAccountIdGetAsync(string developerAccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "developerAccounts/"+ (developerAccountId==null? "" : System.Uri.EscapeDataString(developerAccountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the developer account fields
		/// DeveloperAccounts_developerAccountIdPatchByDeveloperIdAndEmailAndNameAndCustomData developerAccounts/{developerAccountId}
		/// </summary>
		/// <param name="developerAccountId">The id of the developer account to be updated</param>
		/// <param name="developerId">The id of the developer that this account belongs to</param>
		/// <param name="email">The contact email address</param>
		/// <param name="name">The name for the account</param>
		/// <param name="customData">A custom JSON object that you can create and attach to this record</param>
		public async Task DeveloperAccounts_developerAccountIdPatchByDeveloperIdAndEmailAndNameAndCustomDataAsync(string developerAccountId, string developerId, string email, string name, string customData, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "developerAccounts/"+ (developerAccountId==null? "" : System.Uri.EscapeDataString(developerAccountId))+"&developerId=" + (developerId==null? "" : System.Uri.EscapeDataString(developerId))+"&email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&customData=" + (customData==null? "" : System.Uri.EscapeDataString(customData));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the developer account or adds the developer account if it doesn't exist
		/// DeveloperAccounts_developerAccountIdPostByDeveloperIdAndEmailAndNameAndCustomData developerAccounts/{developerAccountId}
		/// </summary>
		/// <param name="developerAccountId">The id of the developer account to be updated</param>
		/// <param name="developerId">The id of the developer that this account belongs to</param>
		/// <param name="email">The contact email address</param>
		/// <param name="name">The name for the account</param>
		/// <param name="customData">A custom JSON object that you can create and attach to this record</param>
		public async Task DeveloperAccounts_developerAccountIdPostByDeveloperIdAndEmailAndNameAndCustomDataAsync(string developerAccountId, string developerId, string email, string name, string customData, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "developerAccounts/"+ (developerAccountId==null? "" : System.Uri.EscapeDataString(developerAccountId))+"&developerId=" + (developerId==null? "" : System.Uri.EscapeDataString(developerId))+"&email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&customData=" + (customData==null? "" : System.Uri.EscapeDataString(customData));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a paginated list of developers
		/// - Results are paginated and the default is value is 100 if no limit is provided
		/// 
		/// DevelopersGetByQueryAndSortAndPageNumberAndLimit developers
		/// </summary>
		/// <param name="query">A query document. Example: {'name':'John'} matches all the developers that have the name 'John'</param>
		/// <param name="sort">A sort document. Example: {'name':1} sorts the results by name in ascending order</param>
		/// <param name="pageNumber">The result set page number to be returned</param>
		/// <param name="limit">The maximum number of results to return per page</param>
		public async Task DevelopersGetByQueryAndSortAndPageNumberAndLimitAsync(string query, string sort, int pageNumber, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "developers?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&pageNumber="+pageNumber+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a single developer
		/// Developers_developerIdDelete developers/{developerId}
		/// </summary>
		/// <param name="developerId">The id of the developer to be removed</param>
		public async Task Developers_developerIdDeleteAsync(string developerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "developers/"+ (developerId==null? "" : System.Uri.EscapeDataString(developerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a single developer
		/// Developers_developerIdGet developers/{developerId}
		/// </summary>
		/// <param name="developerId">The id of the developer to be located</param>
		public async Task Developers_developerIdGetAsync(string developerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "developers/"+ (developerId==null? "" : System.Uri.EscapeDataString(developerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the developer fields
		/// Developers_developerIdPatchByTypeAndEmailAndUsernameAndNameAndCustomData developers/{developerId}
		/// </summary>
		/// <param name="developerId">The id of the developer to be located</param>
		/// <param name="type">The type for this developer</param>
		/// <param name="email">The developer's email</param>
		/// <param name="username">The developer's username</param>
		/// <param name="name">The developer's name</param>
		/// <param name="customData">A custom JSON object that you can create and attach to this record</param>
		public async Task Developers_developerIdPatchByTypeAndEmailAndUsernameAndNameAndCustomDataAsync(string developerId, string type, string email, string username, string name, string customData, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "developers/"+ (developerId==null? "" : System.Uri.EscapeDataString(developerId))+"&type=" + (type==null? "" : System.Uri.EscapeDataString(type))+"&email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&username=" + (username==null? "" : System.Uri.EscapeDataString(username))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&customData=" + (customData==null? "" : System.Uri.EscapeDataString(customData));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the developer record or adds the developer if it doesn't exist
		/// Developers_developerIdPostByTypeAndEmailAndUsernameAndNameAndCustomData developers/{developerId}
		/// </summary>
		/// <param name="developerId">The id of the developer to be located</param>
		/// <param name="type">The type for this developer</param>
		/// <param name="email">The developer's email</param>
		/// <param name="username">The developer's username</param>
		/// <param name="name">The developer's name</param>
		/// <param name="customData">A custom JSON object that you can create and attach to this record</param>
		public async Task Developers_developerIdPostByTypeAndEmailAndUsernameAndNameAndCustomDataAsync(string developerId, string type, string email, string username, string name, string customData, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "developers/"+ (developerId==null? "" : System.Uri.EscapeDataString(developerId))+"&type=" + (type==null? "" : System.Uri.EscapeDataString(type))+"&email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&username=" + (username==null? "" : System.Uri.EscapeDataString(username))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&customData=" + (customData==null? "" : System.Uri.EscapeDataString(customData));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an event
		/// - Results are returned for the market provided within the basic authentication credentials
		/// 
		/// Events_eventIdGet events/{eventId}
		/// </summary>
		/// <param name="eventId">The id of the event</param>
		public async Task Events_eventIdGetAsync(string eventId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "events/"+ (eventId==null? "" : System.Uri.EscapeDataString(eventId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a paginated list of files
		/// FilesGetByQueryAndSortAndPageNumberAndLimit files
		/// </summary>
		/// <param name="query">A query document. Example: {'name':'file.txt'} matches all the files that have the name 'file.txt'</param>
		/// <param name="sort">A sort document. Example: {'name':1} sorts the results by name in ascending order</param>
		/// <param name="pageNumber">The result set page number to be returned</param>
		/// <param name="limit">The maximum number of results to return per page</param>
		public async Task FilesGetByQueryAndSortAndPageNumberAndLimitAsync(string query, string sort, int pageNumber, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&pageNumber="+pageNumber+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the details for a file.
		/// FilesByIdOrUrlGetByFileIdOrUrl files/byIdOrUrl
		/// </summary>
		/// <param name="fileIdOrUrl">The fileId or fileUrl of the file to be returned</param>
		public async Task FilesByIdOrUrlGetByFileIdOrUrlAsync(string fileIdOrUrl, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/byIdOrUrl?fileIdOrUrl=" + (fileIdOrUrl==null? "" : System.Uri.EscapeDataString(fileIdOrUrl));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// A signed URL for downloading a private file can be returned by providing the fileId.
		/// FilesDownloadGetByFileIdAndValidSeconds files/download
		/// </summary>
		/// <param name="fileId">The URL of the file to be uploaded</param>
		/// <param name="validSeconds">The number of seconds that this signed URL should be valid for. The default is 60.</param>
		public async Task FilesDownloadGetByFileIdAndValidSecondsAsync(string fileId, int validSeconds, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/download?fileId=" + (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"&validSeconds="+validSeconds;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Uploads a file from a URL
		/// - WARNING: File URLs or fileIds must be stored somewhere within the customData field for an app, review, developer or user. Unused files will be removed after a few days.
		/// - This method is called on behalf of a developer.
		/// 
		/// FilesUrlPostByUrlAndIsPrivate files/url
		/// </summary>
		/// <param name="url">The URL of the file to be uploaded</param>
		/// <param name="isPrivate">If true, this file will be protected as a private file and require the generation of a signed URL in order to download using the Download File API. The default is false.</param>
		public async Task FilesUrlPostByUrlAndIsPrivateAsync(string url, bool isPrivate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/url?url=" + (url==null? "" : System.Uri.EscapeDataString(url))+"&isPrivate="+isPrivate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the current marketplace
		/// MarketsThisGet markets/this
		/// </summary>
		public async Task MarketsThisGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "markets/this";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a paginated list of app licenses
		/// - Results are returned for the market provided within the basic authentication credentials
		/// OwnershipGetByQueryAndSortAndPageNumberAndLimit ownership
		/// </summary>
		/// <param name="query">A query document. Example: {'userId':'12'} matches all the ownership records that have the userId '12'.</param>
		/// <param name="sort">A sort document. Example: {'date':1} sorts the results by date in ascending order</param>
		/// <param name="pageNumber">The result set page number to be returned</param>
		/// <param name="limit">The maximum number of results to return per page</param>
		public async Task OwnershipGetByQueryAndSortAndPageNumberAndLimitAsync(string query, string sort, int pageNumber, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ownership?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&pageNumber="+pageNumber+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Aquires an app license for a user (installs app)
		/// - This method is called on behalf of a user - This method requires either a modelId from the app or a custom model - User data and statistics are recorded when this method is called
		/// OwnershipInstallPostByAppIdAndUserIdAndModelIdAndModelAndCustomData ownership/install
		/// </summary>
		/// <param name="appId">The id of the App being owned</param>
		/// <param name="userId">The id of the User requesting to own the App</param>
		/// <param name="modelId">The id of the model associated with this ownership request</param>
		/// <param name="model">A custom model that will override the app's default model for this install</param>
		/// <param name="customData">A custom JSON object to attach to this ownership record</param>
		public async Task OwnershipInstallPostByAppIdAndUserIdAndModelIdAndModelAndCustomDataAsync(string appId, string userId, string modelId, string model, string customData, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ownership/install?appId=" + (appId==null? "" : System.Uri.EscapeDataString(appId))+"&userId=" + (userId==null? "" : System.Uri.EscapeDataString(userId))+"&modelId=" + (modelId==null? "" : System.Uri.EscapeDataString(modelId))+"&model=" + (model==null? "" : System.Uri.EscapeDataString(model))+"&customData=" + (customData==null? "" : System.Uri.EscapeDataString(customData));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Uninstalls a license for a particular user and app (uninstalls app)
		/// - This method is called on behalf of a user - User data and statistics are recorded when this method is called
		/// OwnershipUninstall_ownershipIdPostByUserIdAndCancelOwnershipAndCustomData ownership/uninstall/{ownershipId}
		/// </summary>
		/// <param name="ownershipId">The id of the ownership to be unintalled</param>
		/// <param name="userId">The id of the User requesting to uninstall the App</param>
		/// <param name="cancelOwnership">True if this app will require payment to be re-installed. Default is false</param>
		/// <param name="customData">A custom JSON object to attach to this ownership record</param>
		public async Task OwnershipUninstall_ownershipIdPostByUserIdAndCancelOwnershipAndCustomDataAsync(string ownershipId, string userId, bool cancelOwnership, string customData, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ownership/uninstall/"+ (ownershipId==null? "" : System.Uri.EscapeDataString(ownershipId))+"&userId=" + (userId==null? "" : System.Uri.EscapeDataString(userId))+"&cancelOwnership="+cancelOwnership+"&customData=" + (customData==null? "" : System.Uri.EscapeDataString(customData));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an ownership record
		/// - Results are returned for the market provided within the basic authentication credentials
		/// Ownership_ownershipIdGet ownership/{ownershipId}
		/// </summary>
		/// <param name="ownershipId">The id belonging to the ownership record</param>
		public async Task Ownership_ownershipIdGetAsync(string ownershipId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ownership/"+ (ownershipId==null? "" : System.Uri.EscapeDataString(ownershipId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates ownership fields
		/// - Results are returned for the market provided within the basic authentication credentials
		/// Ownership_ownershipIdPatchByCustomDataAndExpires ownership/{ownershipId}
		/// </summary>
		/// <param name="ownershipId">The id of the ownership to be updated</param>
		/// <param name="customData">Custom JSON object that will be attached to this ownership record</param>
		/// <param name="expires">The date (in millis) of when this app ownership expires</param>
		public async Task Ownership_ownershipIdPatchByCustomDataAndExpiresAsync(string ownershipId, string customData, long expires, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ownership/"+ (ownershipId==null? "" : System.Uri.EscapeDataString(ownershipId))+"&customData=" + (customData==null? "" : System.Uri.EscapeDataString(customData))+"&expires="+expires;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an ownership record
		/// - Results are returned for the market provided within the basic authentication credentials
		/// Ownership_ownershipIdPostByCustomDataAndExpires ownership/{ownershipId}
		/// </summary>
		/// <param name="ownershipId">The id of the ownership to be updated</param>
		/// <param name="customData">Custom JSON object that will be attached to this ownership record</param>
		/// <param name="expires">The date (in millis) of when this app ownership expires</param>
		public async Task Ownership_ownershipIdPostByCustomDataAndExpiresAsync(string ownershipId, string customData, long expires, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ownership/"+ (ownershipId==null? "" : System.Uri.EscapeDataString(ownershipId))+"&customData=" + (customData==null? "" : System.Uri.EscapeDataString(customData))+"&expires="+expires;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes permission that allows the app to access this user's data
		/// PermissionApps_appIdDeleteByUserId permission/apps/{appId}
		/// </summary>
		/// <param name="appId">The id of the app</param>
		/// <param name="userId">The id of the user</param>
		public async Task PermissionApps_appIdDeleteByUserIdAsync(string appId, string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "permission/apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"&userId=" + (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns permission that allows the app to access this user's data
		/// PermissionApps_appIdGetByUserId permission/apps/{appId}
		/// </summary>
		/// <param name="appId">The id of the app</param>
		/// <param name="userId">The id of the user</param>
		public async Task PermissionApps_appIdGetByUserIdAsync(string appId, string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "permission/apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"&userId=" + (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds permission to allow the app to access this user's data
		/// PermissionApps_appIdPostByUserIdAndDateAndIp permission/apps/{appId}
		/// </summary>
		/// <param name="appId">The id of the app</param>
		/// <param name="userId">The id of the user</param>
		/// <param name="date">The time (in milliseconds) of when the user agreed to the access request</param>
		/// <param name="ip">The ip address of the user agreeing to the access request</param>
		public async Task PermissionApps_appIdPostByUserIdAndDateAndIpAsync(string appId, string userId, long date, string ip, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "permission/apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"&userId=" + (userId==null? "" : System.Uri.EscapeDataString(userId))+"&date="+date+"&ip=" + (ip==null? "" : System.Uri.EscapeDataString(ip));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find reviews for a particular App and marketplace. Results are automatically paginated when limit is set
		/// - Results are paginated and the default is value is 100 if no limit is provided
		/// 
		/// ReviewsGetByQueryAndSortAndPageNumberAndLimit reviews
		/// </summary>
		/// <param name="query">A query document. Example: {'rating': 500} matches all the reviews that have a rating of 500. </param>
		/// <param name="sort">A sort document. Example: {'rating':1} sorts the results by rating in ascending order</param>
		/// <param name="pageNumber">The result set page number to be returned</param>
		/// <param name="limit">The maximum number of results to return per page</param>
		public async Task ReviewsGetByQueryAndSortAndPageNumberAndLimitAsync(string query, string sort, int pageNumber, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reviews?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&pageNumber="+pageNumber+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Post a review from a User and returns the new post
		/// - Only authenticated users are able to post reviews
		/// - Returns the newly created review
		/// 
		/// ReviewsPostByAppIdAndUserIdAndUserAccountIdAndHeadlineAndRatingAndDescriptionAndTypeAndMustOwnAppAndAutoApproveAndCustomData reviews
		/// </summary>
		/// <param name="appId">The id of the App that will own this review</param>
		/// <param name="userId">The id of the User that is posting this review</param>
		/// <param name="userAccountId">The id of the User account that is posting this review</param>
		/// <param name="headline">The review's headline. Limited to 50 characters.</param>
		/// <param name="rating">The rating given within this review. The rating is represented as an integer between 0 and 500 (0 - 5 stars)</param>
		/// <param name="description">The review's description. Limited to 2000 characters.</param>
		/// <param name="type">The type for this review</param>
		/// <param name="mustOwnApp">True if a review can be created only by a user that has owned the app. The default is True.</param>
		/// <param name="autoApprove">True if the review should be automatically approved. The default is False.</param>
		/// <param name="customData">A custom JSON object that you can create and attach to this record</param>
		public async Task ReviewsPostByAppIdAndUserIdAndUserAccountIdAndHeadlineAndRatingAndDescriptionAndTypeAndMustOwnAppAndAutoApproveAndCustomDataAsync(string appId, string userId, string userAccountId, string headline, int rating, string description, string type, bool mustOwnApp, bool autoApprove, string customData, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reviews?appId=" + (appId==null? "" : System.Uri.EscapeDataString(appId))+"&userId=" + (userId==null? "" : System.Uri.EscapeDataString(userId))+"&userAccountId=" + (userAccountId==null? "" : System.Uri.EscapeDataString(userAccountId))+"&headline=" + (headline==null? "" : System.Uri.EscapeDataString(headline))+"&rating="+rating+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&type=" + (type==null? "" : System.Uri.EscapeDataString(type))+"&mustOwnApp="+mustOwnApp+"&autoApprove="+autoApprove+"&customData=" + (customData==null? "" : System.Uri.EscapeDataString(customData));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a review
		/// - Only the review author is able to remove their review
		/// 
		/// Reviews_reviewIdDeleteByUserIdAndUserAccountId reviews/{reviewId}
		/// </summary>
		/// <param name="reviewId">The id of the Review to be updated</param>
		/// <param name="userId">The id of the User that is removing this review</param>
		/// <param name="userAccountId">The id of the User account that is emoving this review</param>
		public async Task Reviews_reviewIdDeleteByUserIdAndUserAccountIdAsync(string reviewId, string userId, string userAccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reviews/"+ (reviewId==null? "" : System.Uri.EscapeDataString(reviewId))+"&userId=" + (userId==null? "" : System.Uri.EscapeDataString(userId))+"&userAccountId=" + (userAccountId==null? "" : System.Uri.EscapeDataString(userAccountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find a Review within a particular App and marketplace
		/// Reviews_reviewIdGet reviews/{reviewId}
		/// </summary>
		/// <param name="reviewId">The id of the review to be located</param>
		public async Task Reviews_reviewIdGetAsync(string reviewId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reviews/"+ (reviewId==null? "" : System.Uri.EscapeDataString(reviewId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a review fields
		/// - Only the review author is able to update their review
		/// - Returns the newly updated review
		/// 
		/// Reviews_reviewIdPatchByUserIdAndUserAccountIdAndHeadlineAndRatingAndDescriptionAndCustomData reviews/{reviewId}
		/// </summary>
		/// <param name="reviewId">The id of the Review to be updated</param>
		/// <param name="userId">The id of the User that is updating this review</param>
		/// <param name="userAccountId">The id of the User account that is posting this review</param>
		/// <param name="headline">The review's headline. Limited to 50 characters.</param>
		/// <param name="rating">The rating given within this review. The rating is represented as an integer between 0 and 500 (0 - 5 stars)</param>
		/// <param name="description">The review's description. Limited to 2000 characters.</param>
		/// <param name="customData">A custom JSON object that you can create and attach to this record</param>
		public async Task Reviews_reviewIdPatchByUserIdAndUserAccountIdAndHeadlineAndRatingAndDescriptionAndCustomDataAsync(string reviewId, string userId, string userAccountId, string headline, int rating, string description, string customData, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reviews/"+ (reviewId==null? "" : System.Uri.EscapeDataString(reviewId))+"&userId=" + (userId==null? "" : System.Uri.EscapeDataString(userId))+"&userAccountId=" + (userAccountId==null? "" : System.Uri.EscapeDataString(userAccountId))+"&headline=" + (headline==null? "" : System.Uri.EscapeDataString(headline))+"&rating="+rating+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&customData=" + (customData==null? "" : System.Uri.EscapeDataString(customData));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a review from a User and returns the new post
		/// - Only the review author is able to update their review
		/// - Returns the newly updated review
		/// 
		/// Reviews_reviewIdPostByUserIdAndUserAccountIdAndHeadlineAndRatingAndDescriptionAndCustomData reviews/{reviewId}
		/// </summary>
		/// <param name="reviewId">The id of the Review to be updated</param>
		/// <param name="userId">The id of the User that is updating this review</param>
		/// <param name="userAccountId">The id of the User account that is posting this review</param>
		/// <param name="headline">The review's headline. Limited to 50 characters.</param>
		/// <param name="rating">The rating given within this review. The rating is represented as an integer between 0 and 500 (0 - 5 stars)</param>
		/// <param name="description">The review's description. Limited to 2000 characters.</param>
		/// <param name="customData">A custom JSON object that you can create and attach to this record</param>
		public async Task Reviews_reviewIdPostByUserIdAndUserAccountIdAndHeadlineAndRatingAndDescriptionAndCustomDataAsync(string reviewId, string userId, string userAccountId, string headline, int rating, string description, string customData, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reviews/"+ (reviewId==null? "" : System.Uri.EscapeDataString(reviewId))+"&userId=" + (userId==null? "" : System.Uri.EscapeDataString(userId))+"&userAccountId=" + (userAccountId==null? "" : System.Uri.EscapeDataString(userAccountId))+"&headline=" + (headline==null? "" : System.Uri.EscapeDataString(headline))+"&rating="+rating+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&customData=" + (customData==null? "" : System.Uri.EscapeDataString(customData));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Increments a statistics field
		/// increment a statistics field
		/// StatsIncrement_fieldPostByAppIdAndUserIdAndValueAndDate stats/increment/{field}
		/// </summary>
		/// <param name="field">The field to be incremented</param>
		/// <param name="appId">The id of the app associated with this statistic value</param>
		/// <param name="userId">The id of the user that is performing the action</param>
		/// <param name="value">The increment amount. Default is 1 if no value is provided.</param>
		/// <param name="date">The date (in millis) for when this increment occurred. The default is the current date if no value is provided.</param>
		public async Task StatsIncrement_fieldPostByAppIdAndUserIdAndValueAndDateAsync(string field, string appId, string userId, int value, long date, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/increment/"+ (field==null? "" : System.Uri.EscapeDataString(field))+"&appId=" + (appId==null? "" : System.Uri.EscapeDataString(appId))+"&userId=" + (userId==null? "" : System.Uri.EscapeDataString(userId))+"&value="+value+"&date="+date;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a timeseries for a particular field
		/// Return a timeseries nested array containing date and value. Example: [[1406520000000,2],[1406606400000,34],[1406692800000,245],...]
		/// StatsSeries_period_fieldsGetByStartAndEndAndQuery stats/series/{period}/{fields}
		/// </summary>
		/// <param name="period">The period for the series (day or month)</param>
		/// <param name="fields">The field to be graphed. This also be a comma separated list of fields and the result will be a single timeseries containing the sum of all fields.</param>
		/// <param name="start">The start date for this series (in millis)</param>
		/// <param name="end">The end date for this series (in millis)</param>
		/// <param name="query">A query document. Example: {'developerId': '112'} matches all the apps that have the developer with id 112</param>
		public async Task StatsSeries_period_fieldsGetByStartAndEndAndQueryAsync(StatsSeries_period_fieldsGetByStartAndEndAndQueryPeriod period, string fields, long start, long end, string query, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/series/"+period+"/"+ (fields==null? "" : System.Uri.EscapeDataString(fields))+"&start="+start+"&end="+end+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the total number of events for a particular field.
		/// StatsTotalGetByFieldsAndQueryAndStartAndEnd stats/total
		/// </summary>
		/// <param name="fields">A comma seperated list of all the fields to be returned in the total (available by default: dislikes, likes, reviews, totalSales, developerSales, marketplaceSales, downloads, ownerships, views)</param>
		/// <param name="query">A query document. Example: {'developerId': '112'} matches all the apps that have the developer with id 112</param>
		/// <param name="start">The start date for this total (in millis)</param>
		/// <param name="end">The end date for this total (in millis)</param>
		public async Task StatsTotalGetByFieldsAndQueryAndStartAndEndAsync(string fields, string query, long start, long end, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/total?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&start="+start+"&end="+end;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a developers connected Stripe accounts
		/// - Results are returned for the market provided within the basic authentication credentials
		/// 
		/// Stripe_gatewayDeveloper_developerIdAccountsGet stripe-gateway/developer/{developerId}/accounts
		/// </summary>
		/// <param name="developerId">The id of the developer connecting their Stripe account</param>
		public async Task Stripe_gatewayDeveloper_developerIdAccountsGetAsync(string developerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stripe-gateway/developer/"+ (developerId==null? "" : System.Uri.EscapeDataString(developerId))+"/accounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate a temporary URL to allow a developer to connect their Stripe account
		/// - Results are returned for the market provided within the basic authentication credentials
		/// - The URL generated by this method is only valid for 48 hours.
		/// 
		/// Stripe_gatewayDeveloper_developerIdAccountsPostByRedirectUrl stripe-gateway/developer/{developerId}/accounts
		/// </summary>
		/// <param name="developerId">The id of the developer connecting their Stripe account</param>
		/// <param name="redirectUrl">The URL to redirect this developer after they have connected their Stripe account</param>
		public async Task Stripe_gatewayDeveloper_developerIdAccountsPostByRedirectUrlAsync(string developerId, string redirectUrl, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stripe-gateway/developer/"+ (developerId==null? "" : System.Uri.EscapeDataString(developerId))+"/accounts&redirectUrl=" + (redirectUrl==null? "" : System.Uri.EscapeDataString(redirectUrl));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disconnects a developer's Stripe account
		/// 
		/// - Results are returned for the market provided within the basic authentication credentials
		/// 
		/// Stripe_gatewayDeveloper_developerIdAccounts_stripeIdDelete stripe-gateway/developer/{developerId}/accounts/{stripeId}
		/// </summary>
		/// <param name="developerId">The id of the developer disconnecting their Stripe account</param>
		/// <param name="stripeId">The id of the stripe account to disconnect</param>
		public async Task Stripe_gatewayDeveloper_developerIdAccounts_stripeIdDeleteAsync(string developerId, string stripeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stripe-gateway/developer/"+ (developerId==null? "" : System.Uri.EscapeDataString(developerId))+"/accounts/"+ (stripeId==null? "" : System.Uri.EscapeDataString(stripeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns credit cards for this user
		/// - Results are returned for the market provided within the basic authentication credentials
		/// 
		/// Stripe_gatewayUser_userIdCardsGet stripe-gateway/user/{userId}/cards
		/// </summary>
		/// <param name="userId">The id of the user requesting their credit cards</param>
		public async Task Stripe_gatewayUser_userIdCardsGetAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stripe-gateway/user/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/cards";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds credit card for this user
		/// - Results are returned for the market provided within the basic authentication credentials
		/// 
		/// Stripe_gatewayUser_userIdCardsPostByTokenAndIsDefault stripe-gateway/user/{userId}/cards
		/// </summary>
		/// <param name="userId">The id of the user adding their credit card</param>
		/// <param name="token">The Stripe token returned by the Stripe.js Stripe.card.createToken call</param>
		/// <param name="isDefault">Set to true if this should be set to be the default credit card</param>
		public async Task Stripe_gatewayUser_userIdCardsPostByTokenAndIsDefaultAsync(string userId, string token, bool isDefault, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stripe-gateway/user/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/cards&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&isDefault="+isDefault;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a credit card for a user
		/// Stripe_gatewayUser_userIdCards_cardIdDelete stripe-gateway/user/{userId}/cards/{cardId}
		/// </summary>
		/// <param name="userId">The id of the user removing their credit card</param>
		/// <param name="cardId">The id of the credit card to remove</param>
		public async Task Stripe_gatewayUser_userIdCards_cardIdDeleteAsync(string userId, string cardId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stripe-gateway/user/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/cards/"+ (cardId==null? "" : System.Uri.EscapeDataString(cardId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a credit card for this user
		/// 
		/// - Results are returned for the market provided within the basic authentication credentials
		/// 
		/// Stripe_gatewayUser_userIdCards_cardIdPostByIsDefaultAndAddress_cityAndAddress_countryAndAddress_line1AndAddress_line2AndAddress_stateAndAddress_zip stripe-gateway/user/{userId}/cards/{cardId}
		/// </summary>
		/// <param name="userId">The id of the user adding their credit card</param>
		/// <param name="cardId">The id of the card to be updated</param>
		/// <param name="isDefault">Set to true if this should be set to be the default credit card</param>
		/// <param name="address_city">The card holder's city</param>
		/// <param name="address_country">The card holder's country</param>
		/// <param name="address_line1">The card holder's street address</param>
		/// <param name="address_line2">The card holder's street address</param>
		/// <param name="address_state">The card holder's city state/province</param>
		/// <param name="address_zip">The card holder's zip/postal code</param>
		public async Task Stripe_gatewayUser_userIdCards_cardIdPostByIsDefaultAndAddress_cityAndAddress_countryAndAddress_line1AndAddress_line2AndAddress_stateAndAddress_zipAsync(string userId, string cardId, bool isDefault, string address_city, string address_country, string address_line1, string address_line2, string address_state, string address_zip, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stripe-gateway/user/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/cards/"+ (cardId==null? "" : System.Uri.EscapeDataString(cardId))+"&isDefault="+isDefault+"&address_city=" + (address_city==null? "" : System.Uri.EscapeDataString(address_city))+"&address_country=" + (address_country==null? "" : System.Uri.EscapeDataString(address_country))+"&address_line1=" + (address_line1==null? "" : System.Uri.EscapeDataString(address_line1))+"&address_line2=" + (address_line2==null? "" : System.Uri.EscapeDataString(address_line2))+"&address_state=" + (address_state==null? "" : System.Uri.EscapeDataString(address_state))+"&address_zip=" + (address_zip==null? "" : System.Uri.EscapeDataString(address_zip));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a paginated list of transactions
		/// - Results are paginated and the default is value is 100 if no limit is provided
		/// 
		/// TransactionsGetByQueryAndSortAndPageNumberAndLimit transactions
		/// </summary>
		/// <param name="query">A query document. Example: {'userId':'1'} matches all the transactions that have the userId '1'.</param>
		/// <param name="sort">A sort document. Example: {'date':1} sorts the results by total in ascending order</param>
		/// <param name="pageNumber">The result set page number to be returned</param>
		/// <param name="limit">The maximum number of results to return per page</param>
		public async Task TransactionsGetByQueryAndSortAndPageNumberAndLimitAsync(string query, string sort, int pageNumber, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transactions?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&pageNumber="+pageNumber+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deleted a transaction
		/// - Results are returned for the market provided within the basic authentication credentials
		/// 
		/// Transactions_transactionIdDelete transactions/{transactionId}
		/// </summary>
		/// <param name="transactionId">The id of the transaction to be deleted</param>
		public async Task Transactions_transactionIdDeleteAsync(string transactionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transactions/"+ (transactionId==null? "" : System.Uri.EscapeDataString(transactionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a transaction
		/// - Results are returned for the market provided within the basic authentication credentials
		/// 
		/// Transactions_transactionIdGet transactions/{transactionId}
		/// </summary>
		/// <param name="transactionId">The id of the transaction to return</param>
		public async Task Transactions_transactionIdGetAsync(string transactionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transactions/"+ (transactionId==null? "" : System.Uri.EscapeDataString(transactionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a transaction
		/// - Results are returned for the market provided within the basic authentication credentials
		/// 
		/// Transactions_transactionIdPostByCustomData transactions/{transactionId}
		/// </summary>
		/// <param name="transactionId">The id of the transaction to be updated</param>
		/// <param name="customData">A custom JSON object that you can create and attach to this record</param>
		public async Task Transactions_transactionIdPostByCustomDataAsync(string transactionId, string customData, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transactions/"+ (transactionId==null? "" : System.Uri.EscapeDataString(transactionId))+"&customData=" + (customData==null? "" : System.Uri.EscapeDataString(customData));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a paginated list of userAccounts
		/// - Results are paginated and the default is value is 1000 if no limit is provided
		/// 
		/// UserAccountsGetByQueryAndSortAndPageNumberAndLimit userAccounts
		/// </summary>
		/// <param name="query">A query document. Example: {'name':'NASA'} matches all the userAccounts that have the name 'NASA'</param>
		/// <param name="sort">A sort document. Example: {'name':1} sorts the results by name in ascending order</param>
		/// <param name="pageNumber">The result set page number to be returned</param>
		/// <param name="limit">The maximum number of results to return per page</param>
		public async Task UserAccountsGetByQueryAndSortAndPageNumberAndLimitAsync(string query, string sort, int pageNumber, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userAccounts?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&pageNumber="+pageNumber+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes the user account
		/// UserAccounts_userAccountIdDelete userAccounts/{userAccountId}
		/// </summary>
		/// <param name="userAccountId">The id of the user account to be removed</param>
		public async Task UserAccounts_userAccountIdDeleteAsync(string userAccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userAccounts/"+ (userAccountId==null? "" : System.Uri.EscapeDataString(userAccountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a single user account
		/// UserAccounts_userAccountIdGet userAccounts/{userAccountId}
		/// </summary>
		/// <param name="userAccountId">The id of the user account to be located</param>
		public async Task UserAccounts_userAccountIdGetAsync(string userAccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userAccounts/"+ (userAccountId==null? "" : System.Uri.EscapeDataString(userAccountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the user account fields
		/// UserAccounts_userAccountIdPatchByUserIdAndEmailAndNameAndCustomData userAccounts/{userAccountId}
		/// </summary>
		/// <param name="userAccountId">The id of the user account to be updated</param>
		/// <param name="userId">The Id of the user that this account belongs to</param>
		/// <param name="email">The contact email address</param>
		/// <param name="name">The user account name</param>
		/// <param name="customData">A custom JSON object that you can create and attach to this record</param>
		public async Task UserAccounts_userAccountIdPatchByUserIdAndEmailAndNameAndCustomDataAsync(string userAccountId, string userId, string email, string name, string customData, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userAccounts/"+ (userAccountId==null? "" : System.Uri.EscapeDataString(userAccountId))+"&userId=" + (userId==null? "" : System.Uri.EscapeDataString(userId))+"&email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&customData=" + (customData==null? "" : System.Uri.EscapeDataString(customData));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the user account or adds the user account if it doesn't exist
		/// UserAccounts_userAccountIdPostByUserIdAndEmailAndNameAndCustomData userAccounts/{userAccountId}
		/// </summary>
		/// <param name="userAccountId">The id of the user account to be updated</param>
		/// <param name="userId">The Id of the user that this account belongs to</param>
		/// <param name="email">The contact email address</param>
		/// <param name="name">The user account name</param>
		/// <param name="customData">A custom JSON object that you can create and attach to this record</param>
		public async Task UserAccounts_userAccountIdPostByUserIdAndEmailAndNameAndCustomDataAsync(string userAccountId, string userId, string email, string name, string customData, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userAccounts/"+ (userAccountId==null? "" : System.Uri.EscapeDataString(userAccountId))+"&userId=" + (userId==null? "" : System.Uri.EscapeDataString(userId))+"&email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&customData=" + (customData==null? "" : System.Uri.EscapeDataString(customData));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a paginated list of users
		/// - Results are paginated and the default is value is 100 if no limit is provided
		/// 
		/// UsersGetByQueryAndSortAndPageNumberAndLimit users
		/// </summary>
		/// <param name="query">A query document. Example: {'name':'John'} matches all the users that have the name 'John'</param>
		/// <param name="sort">A sort document. Example: {'name':1} sorts the results by name in ascending order</param>
		/// <param name="pageNumber">The result set page number to be returned</param>
		/// <param name="limit">The maximum number of results to return per page</param>
		public async Task UsersGetByQueryAndSortAndPageNumberAndLimitAsync(string query, string sort, int pageNumber, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&pageNumber="+pageNumber+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a single user
		/// - Results are returned for the market provided within the basic authentication credentials
		/// 
		/// Users_userIdDelete users/{userId}
		/// </summary>
		/// <param name="userId">The id of the user to be removed</param>
		public async Task Users_userIdDeleteAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a single user
		/// - Results are returned for the market provided within the basic authentication credentials
		/// 
		/// Users_userIdGet users/{userId}
		/// </summary>
		/// <param name="userId">The id of the user to be located</param>
		public async Task Users_userIdGetAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates user fields
		/// Users_userIdPatchByTypeAndEmailAndUsernameAndNameAndCustomData users/{userId}
		/// </summary>
		/// <param name="userId">The id of the user to be updated</param>
		/// <param name="type">The type for this user</param>
		/// <param name="email">The user's email</param>
		/// <param name="username">The user's username</param>
		/// <param name="name">The user's name</param>
		/// <param name="customData">A custom JSON object that you can create and attach to this record</param>
		public async Task Users_userIdPatchByTypeAndEmailAndUsernameAndNameAndCustomDataAsync(string userId, string type, string email, string username, string name, string customData, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"&type=" + (type==null? "" : System.Uri.EscapeDataString(type))+"&email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&username=" + (username==null? "" : System.Uri.EscapeDataString(username))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&customData=" + (customData==null? "" : System.Uri.EscapeDataString(customData));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a single user or adds the user if they don't exist
		/// Users_userIdPostByTypeAndEmailAndUsernameAndNameAndCustomData users/{userId}
		/// </summary>
		/// <param name="userId">The id of the user to be updated</param>
		/// <param name="type">The type for this user</param>
		/// <param name="email">The user's email</param>
		/// <param name="username">The user's username</param>
		/// <param name="name">The user's name</param>
		/// <param name="customData">A custom JSON object that you can create and attach to this record</param>
		public async Task Users_userIdPostByTypeAndEmailAndUsernameAndNameAndCustomDataAsync(string userId, string type, string email, string username, string name, string customData, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"&type=" + (type==null? "" : System.Uri.EscapeDataString(type))+"&email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&username=" + (username==null? "" : System.Uri.EscapeDataString(username))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&customData=" + (customData==null? "" : System.Uri.EscapeDataString(customData));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Apps_appIdVersions_versionStatusPostByDeveloperIdAndStatusAndModifiedByAndReasonStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inReview")]
		inReview = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="approved")]
		approved = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="suspended")]
		suspended = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rejected")]
		rejected = 3,
	}
	
	public enum Apps_appIdVersions_versionStatusPostByDeveloperIdAndStatusAndModifiedByAndReasonModifiedBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="developer")]
		developer = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="administrator")]
		administrator = 1,
	}
	
	public enum StatsSeries_period_fieldsGetByStartAndEndAndQueryPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="day")]
		day = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="month")]
		month = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
