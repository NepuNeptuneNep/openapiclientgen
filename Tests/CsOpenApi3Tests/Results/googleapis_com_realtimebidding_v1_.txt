//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// A request to activate a pretargeting configuration. Sets the configuration's state to ACTIVE.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivatePretargetingConfigRequest
	{
	}
	
	/// <summary>
	/// The list of detected Ad Technology Providers for this creative. Bids placed for inventory that will serve to EEA or UK users are expected to comply with GDPR requirements. You must ensure that the creatives used in such bids should contain only user consented ad technology providers as indicated in the bid request. Google reserves the right to filter non-compliant bids. User consented ad technology providers can be found in the [Google Protocol](https://developers.google.com/authorized-buyers/rtb/downloads/realtime-bidding-proto) with the `BidRequest.adslot.consented_providers_settings` field, and can be found as an [OpenRTB extension](https://developers.google.com/authorized-buyers/rtb/downloads/openrtb-adx-proto) with the `BidRequest.user.ext.consented_providers_settings` and `BidRequest.user.ext.consent` fields. See https://support.google.com/authorizedbuyers/answer/9789378 for additional information about the Google TCF v2 integration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AdTechnologyProviders
	{
		
		/// <summary>
		/// The detected IAB Global Vendor List (GVL) IDs for this creative. See the IAB Global Vendor List at https://vendor-list.consensu.org/v2/vendor-list.json for details about the vendors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectedGvlIds")]
		public string[] DetectedGvlIds { get; set; }
		
		/// <summary>
		/// The detected [Google Ad Tech Providers (ATP)](https://support.google.com/admanager/answer/9012903) for this creative. See https://storage.googleapis.com/adx-rtb-dictionaries/providers.csv for mapping of provider ID to provided name, a privacy policy URL, and a list of domains which can be attributed to the provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectedProviderIds")]
		public string[] DetectedProviderIds { get; set; }
		
		/// <summary>
		/// Domains of detected unidentified ad technology providers (if any). You must ensure that the creatives used in bids placed for inventory that will serve to EEA or UK users does not contain unidentified ad technology providers. Google reserves the right to filter non-compliant bids.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unidentifiedProviderDomains")]
		public string[] UnidentifiedProviderDomains { get; set; }
	}
	
	/// <summary>
	/// A request to start targeting the provided app IDs in a specific pretargeting configuration. The pretargeting configuration itself specifies how these apps are targeted. in PretargetingConfig.appTargeting.mobileAppTargeting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddTargetedAppsRequest
	{
		
		/// <summary>
		/// A list of app IDs to target in the pretargeting configuration. These values will be added to the list of targeted app IDs in PretargetingConfig.appTargeting.mobileAppTargeting.values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appIds")]
		public string[] AppIds { get; set; }
		
		/// <summary>
		/// Required. The targeting mode that should be applied to the list of app IDs. If there are existing targeted app IDs, must be equal to the existing PretargetingConfig.appTargeting.mobileAppTargeting.targetingMode or a 400 bad request error will be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingMode")]
		public System.Nullable<AddTargetedAppsRequestTargetingMode> TargetingMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AddTargetedAppsRequestTargetingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUSIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUSIVE = 2,
	}
	
	/// <summary>
	/// A request to start targeting the provided publishers in a specific pretargeting configuration. The pretargeting configuration itself specifies how these publishers are targeted in PretargetingConfig.publisherTargeting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddTargetedPublishersRequest
	{
		
		/// <summary>
		/// A list of publisher IDs to target in the pretargeting configuration. These values will be added to the list of targeted publisher IDs in PretargetingConfig.publisherTargeting.values. Publishers are identified by their publisher ID from ads.txt / app-ads.txt. See https://iabtechlab.com/ads-txt/ and https://iabtechlab.com/app-ads-txt/ for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherIds")]
		public string[] PublisherIds { get; set; }
		
		/// <summary>
		/// Required. The targeting mode that should be applied to the list of publisher IDs. If are existing publisher IDs, must be equal to the existing PretargetingConfig.publisherTargeting.targetingMode or a 400 bad request error will be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingMode")]
		public AddTargetedAppsRequestTargetingMode TargetingMode { get; set; }
	}
	
	/// <summary>
	/// A request to start targeting the provided sites in a specific pretargeting configuration. The pretargeting configuration itself specifies how these sites are targeted in PretargetingConfig.webTargeting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddTargetedSitesRequest
	{
		
		/// <summary>
		/// A list of site URLs to target in the pretargeting configuration. These values will be added to the list of targeted URLs in PretargetingConfig.webTargeting.values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sites")]
		public string[] Sites { get; set; }
		
		/// <summary>
		/// Required. The targeting mode that should be applied to the list of site URLs. If there are existing targeted sites, must be equal to the existing PretargetingConfig.webTargeting.targetingMode or a 400 bad request error will be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingMode")]
		public AddTargetedAppsRequestTargetingMode TargetingMode { get; set; }
	}
	
	/// <summary>
	/// Detected advertiser and brand information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AdvertiserAndBrand
	{
		
		/// <summary>
		/// See https://storage.googleapis.com/adx-rtb-dictionaries/advertisers.txt for the list of possible values. Can be used to filter the response of the creatives.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// Advertiser name. Can be used to filter the response of the creatives.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserName")]
		public string AdvertiserName { get; set; }
		
		/// <summary>
		/// Detected brand ID or zero if no brand has been detected. See https://storage.googleapis.com/adx-rtb-dictionaries/brands.txt for the list of possible values. Can be used to filter the response of the creatives.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brandId")]
		public string BrandId { get; set; }
		
		/// <summary>
		/// Brand name. Can be used to filter the response of the creatives.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brandName")]
		public string BrandName { get; set; }
	}
	
	/// <summary>
	/// A subset of app inventory to target. Bid requests that match criteria in at least one of the specified dimensions will be sent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppTargeting
	{
		
		/// <summary>
		/// Generic targeting used for targeting dimensions that contain a list of included and excluded numeric IDs used in app, user list, geo, and vertical id targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileAppCategoryTargeting")]
		public NumericTargetingDimension MobileAppCategoryTargeting { get; set; }
		
		/// <summary>
		/// Generic targeting with string values used in app, website and publisher targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileAppTargeting")]
		public StringTargetingDimension MobileAppTargeting { get; set; }
	}
	
	/// <summary>
	/// Generic targeting used for targeting dimensions that contain a list of included and excluded numeric IDs used in app, user list, geo, and vertical id targeting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NumericTargetingDimension
	{
		
		/// <summary>
		/// The IDs excluded in a configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedIds")]
		public string[] ExcludedIds { get; set; }
		
		/// <summary>
		/// The IDs included in a configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedIds")]
		public string[] IncludedIds { get; set; }
	}
	
	/// <summary>
	/// Generic targeting with string values used in app, website and publisher targeting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StringTargetingDimension
	{
		
		/// <summary>
		/// How the items in this list should be targeted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingMode")]
		public AddTargetedAppsRequestTargetingMode TargetingMode { get; set; }
		
		/// <summary>
		/// The values specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// A request to approve a batch of publisher connections.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchApprovePublisherConnectionsRequest
	{
		
		/// <summary>
		/// Required. The names of the publishers with which connections will be approved. In the pattern `bidders/{bidder}/publisherConnections/{publisher}` where `{bidder}` is the account ID of the bidder, and `{publisher}` is the ads.txt/app-ads.txt publisher ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="names")]
		public string[] Names { get; set; }
	}
	
	/// <summary>
	/// A response for the request to approve a batch of publisher connections.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchApprovePublisherConnectionsResponse
	{
		
		/// <summary>
		/// The publisher connections that have been approved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherConnections")]
		public PublisherConnection[] PublisherConnections { get; set; }
	}
	
	/// <summary>
	/// An Open Bidding exchange's connection to a publisher. This is initiated by the publisher for the bidder to review. If approved by the bidder, this means that the bidder agrees to receive bid requests from the publisher.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublisherConnection
	{
		
		/// <summary>
		/// Whether the publisher has been approved by the bidder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="biddingState")]
		public System.Nullable<PublisherConnectionBiddingState> BiddingState { get; set; }
		
		/// <summary>
		/// Output only. The time at which the publisher initiated a connection with the bidder (irrespective of if or when the bidder approves it). This is subsequently updated if the publisher revokes and re-initiates the connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. Publisher display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. Name of the publisher connection. This follows the pattern `bidders/{bidder}/publisherConnections/{publisher}`, where `{bidder}` represents the account ID of the bidder, and `{publisher}` is the ads.txt/app-ads.txt publisher ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Whether the publisher is an Ad Manager or AdMob publisher.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherPlatform")]
		public System.Nullable<PublisherConnectionPublisherPlatform> PublisherPlatform { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PublisherConnectionBiddingState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PublisherConnectionPublisherPlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLISHER_PLATFORM_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOOGLE_AD_MANAGER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMOB = 2,
	}
	
	/// <summary>
	/// A request to reject a batch of publisher connections.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchRejectPublisherConnectionsRequest
	{
		
		/// <summary>
		/// Required. The names of the publishers with whom connection will be rejected. In the pattern `bidders/{bidder}/publisherConnections/{publisher}` where `{bidder}` is the account ID of the bidder, and `{publisher}` is the ads.txt/app-ads.txt publisher ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="names")]
		public string[] Names { get; set; }
	}
	
	/// <summary>
	/// A response for the request to reject a batch of publisher connections.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchRejectPublisherConnectionsResponse
	{
		
		/// <summary>
		/// The publisher connections that have been rejected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherConnections")]
		public PublisherConnection[] PublisherConnections { get; set; }
	}
	
	/// <summary>
	/// Bidder settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Bidder
	{
		
		/// <summary>
		/// Output only. An option to bypass pretargeting for private auctions and preferred deals. When true, bid requests from these nonguaranteed deals will always be sent. When false, bid requests will be subject to regular pretargeting configurations. Programmatic Guaranteed deals will always be sent to the bidder, regardless of the value for this flag. Auction packages are not impacted by this value and are subject to the regular pretargeting configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bypassNonguaranteedDealsPretargeting")]
		public System.Nullable<System.Boolean> BypassNonguaranteedDealsPretargeting { get; set; }
		
		/// <summary>
		/// Output only. The buyer's network ID used for cookie matching. This ID corresponds to the `google_nid` parameter in the URL used in cookie match requests. Refer to https://developers.google.com/authorized-buyers/rtb/cookie-guide for further information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookieMatchingNetworkId")]
		public string CookieMatchingNetworkId { get; set; }
		
		/// <summary>
		/// Output only. The base URL used in cookie match requests. Refer to https://developers.google.com/authorized-buyers/rtb/cookie-guide for further information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookieMatchingUrl")]
		public string CookieMatchingUrl { get; set; }
		
		/// <summary>
		/// Output only. The billing ID for the deals pretargeting config. This billing ID is sent on the bid request for guaranteed and nonguaranteed deals matched in pretargeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dealsBillingId")]
		public string DealsBillingId { get; set; }
		
		/// <summary>
		/// Output only. Name of the bidder resource that must follow the pattern `bidders/{bidderAccountId}`, where `{bidderAccountId}` is the account ID of the bidder whose information is to be received. One can get their account ID on the Authorized Buyers or Open Bidding UI, or by contacting their Google account manager.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// RTB Buyer account information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Buyer
	{
		
		/// <summary>
		/// Output only. The number of creatives that this buyer submitted through the API or bid with in the last 30 days. This is counted against the maximum number of active creatives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeCreativeCount")]
		public string ActiveCreativeCount { get; set; }
		
		/// <summary>
		/// Output only. The name of the bidder resource that is responsible for receiving bidding traffic for this account. The bidder name must follow the pattern `bidders/{bidderAccountId}`, where `{bidderAccountId}` is the account ID of the bidder receiving traffic for this buyer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bidder")]
		public string Bidder { get; set; }
		
		/// <summary>
		/// Output only. A list of billing IDs associated with this account. These IDs appear on: 1. A bid request, to signal which buyers are eligible to bid on a given opportunity, and which pretargeting configurations were matched for each eligible buyer. 2. The bid response, to attribute a winning impression to a specific account for billing, reporting, policy and publisher block enforcement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingIds")]
		public string[] BillingIds { get; set; }
		
		/// <summary>
		/// Output only. The diplay name associated with this buyer account, as visible to sellers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. The maximum number of active creatives that this buyer can have.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumActiveCreativeCount")]
		public string MaximumActiveCreativeCount { get; set; }
		
		/// <summary>
		/// Output only. Name of the buyer resource that must follow the pattern `buyers/{buyerAccountId}`, where `{buyerAccountId}` is the account ID of the buyer account whose information is to be received. One can get their account ID on the Authorized Buyers or Open Bidding UI, or by contacting their Google account manager.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A request to close a specified user list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CloseUserListRequest
	{
	}
	
	/// <summary>
	/// A creative and its classification data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Creative
	{
		
		/// <summary>
		/// Output only. ID of the buyer account that this creative is owned by. Can be used to filter the response of the creatives.list method with equality and inequality check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// The link to AdChoices destination page. This is only supported for native ads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adChoicesDestinationUrl")]
		public string AdChoicesDestinationUrl { get; set; }
		
		/// <summary>
		/// The name of the company being advertised in the creative. Can be used to filter the response of the creatives.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserName")]
		public string AdvertiserName { get; set; }
		
		/// <summary>
		/// The agency ID for this creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agencyId")]
		public string AgencyId { get; set; }
		
		/// <summary>
		/// Output only. The last update timestamp of the creative through the API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiUpdateTime")]
		public string ApiUpdateTime { get; set; }
		
		/// <summary>
		/// Output only. The format of this creative. Can be used to filter the response of the creatives.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeFormat")]
		public System.Nullable<CreativeCreativeFormat> CreativeFormat { get; set; }
		
		/// <summary>
		/// Buyer-specific creative ID that references this creative in bid responses. This field is Ignored in update operations. Can be used to filter the response of the creatives.list method. The maximum length of the creative ID is 128 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeId")]
		public string CreativeId { get; set; }
		
		/// <summary>
		/// Top level status and detected attributes of a creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeServingDecision")]
		public CreativeServingDecision CreativeServingDecision { get; set; }
		
		/// <summary>
		/// Output only. IDs of all of the deals with which this creative has been used in bidding. Can be used to filter the response of the creatives.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dealIds")]
		public string[] DealIds { get; set; }
		
		/// <summary>
		/// All declared attributes for the ads that may be shown from this creative. Can be used to filter the response of the creatives.list method. If the `excluded_attribute` field of a [bid request](https://developers.google.com/authorized-buyers/rtb/downloads/realtime-bidding-proto") contains one of the attributes that were declared or detected for a given creative, and a bid is submitted with that creative, the bid will be filtered before the auction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="declaredAttributes")]
		public string[] DeclaredAttributes { get; set; }
		
		/// <summary>
		/// The set of declared destination URLs for the creative. Can be used to filter the response of the creatives.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="declaredClickThroughUrls")]
		public string[] DeclaredClickThroughUrls { get; set; }
		
		/// <summary>
		/// All declared restricted categories for the ads that may be shown from this creative. Can be used to filter the response of the creatives.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="declaredRestrictedCategories")]
		public string[] DeclaredRestrictedCategories { get; set; }
		
		/// <summary>
		/// IDs for the declared ad technology vendors that may be used by this creative. See https://storage.googleapis.com/adx-rtb-dictionaries/vendors.txt for possible values. Can be used to filter the response of the creatives.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="declaredVendorIds")]
		public int[] DeclaredVendorIds { get; set; }
		
		/// <summary>
		/// HTML content for a creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="html")]
		public HtmlContent Html { get; set; }
		
		/// <summary>
		/// The set of URLs to be called to record an impression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impressionTrackingUrls")]
		public string[] ImpressionTrackingUrls { get; set; }
		
		/// <summary>
		/// Output only. Name of the creative. Follows the pattern `buyers/{buyer}/creatives/{creative}`, where `{buyer}` represents the account ID of the buyer who owns the creative, and `{creative}` is the buyer-specific creative ID that references this creative in the bid response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Native content for a creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="native")]
		public NativeContent Native { get; set; }
		
		/// <summary>
		/// Experimental field that can be used during the [FLEDGE Origin Trial](/authorized-buyers/rtb/fledge-origin-trial). The URL to fetch an interest group ad used in [TURTLEDOVE on-device auction](https://github.com/WICG/turtledove/blob/main/FLEDGE.md#1-browsers-record-interest-groups"). This should be unique among all creatives for a given `accountId`. This URL should be the same as the URL returned by [generateBid()](https://github.com/WICG/turtledove/blob/main/FLEDGE.md#32-on-device-bidding).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="renderUrl")]
		public string RenderUrl { get; set; }
		
		/// <summary>
		/// All restricted categories for the ads that may be shown from this creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictedCategories")]
		public string[] RestrictedCategories { get; set; }
		
		/// <summary>
		/// Output only. The version of the creative. Version for a new creative is 1 and it increments during subsequent creative updates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
		
		/// <summary>
		/// Video content for a creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="video")]
		public VideoContent Video { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CreativeCreativeFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_FORMAT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTML = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATIVE = 3,
	}
	
	/// <summary>
	/// Top level status and detected attributes of a creative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreativeServingDecision
	{
		
		/// <summary>
		/// The list of detected Ad Technology Providers for this creative. Bids placed for inventory that will serve to EEA or UK users are expected to comply with GDPR requirements. You must ensure that the creatives used in such bids should contain only user consented ad technology providers as indicated in the bid request. Google reserves the right to filter non-compliant bids. User consented ad technology providers can be found in the [Google Protocol](https://developers.google.com/authorized-buyers/rtb/downloads/realtime-bidding-proto) with the `BidRequest.adslot.consented_providers_settings` field, and can be found as an [OpenRTB extension](https://developers.google.com/authorized-buyers/rtb/downloads/openrtb-adx-proto) with the `BidRequest.user.ext.consented_providers_settings` and `BidRequest.user.ext.consent` fields. See https://support.google.com/authorizedbuyers/answer/9789378 for additional information about the Google TCF v2 integration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adTechnologyProviders")]
		public AdTechnologyProviders AdTechnologyProviders { get; set; }
		
		/// <summary>
		/// Policy compliance of the creative for a transaction type or a region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chinaPolicyCompliance")]
		public PolicyCompliance ChinaPolicyCompliance { get; set; }
		
		/// <summary>
		/// Policy compliance of the creative for a transaction type or a region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dealsPolicyCompliance")]
		public PolicyCompliance DealsPolicyCompliance { get; set; }
		
		/// <summary>
		/// Detected advertisers and brands.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectedAdvertisers")]
		public AdvertiserAndBrand[] DetectedAdvertisers { get; set; }
		
		/// <summary>
		/// Publisher-excludable attributes that were detected for this creative. Can be used to filter the response of the creatives.list method. If the `excluded_attribute` field of a [bid request](https://developers.google.com/authorized-buyers/rtb/downloads/realtime-bidding-proto) contains one of the attributes that were declared or detected for a given creative, and a bid is submitted with that creative, the bid will be filtered before the auction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectedAttributes")]
		public string[] DetectedAttributes { get; set; }
		
		/// <summary>
		/// The set of detected destination URLs for the creative. Can be used to filter the response of the creatives.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectedClickThroughUrls")]
		public string[] DetectedClickThroughUrls { get; set; }
		
		/// <summary>
		/// The detected domains for this creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectedDomains")]
		public string[] DetectedDomains { get; set; }
		
		/// <summary>
		/// The detected languages for this creative. The order is arbitrary. The codes are 2 or 5 characters and are documented at https://developers.google.com/adwords/api/docs/appendix/languagecodes. Can be used to filter the response of the creatives.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectedLanguages")]
		public string[] DetectedLanguages { get; set; }
		
		/// <summary>
		/// Detected product categories, if any. See the ad-product-categories.txt file in the technical documentation for a list of IDs. Can be used to filter the response of the creatives.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectedProductCategories")]
		public int[] DetectedProductCategories { get; set; }
		
		/// <summary>
		/// Detected sensitive categories, if any. Can be used to filter the response of the creatives.list method. See the ad-sensitive-categories.txt file in the technical documentation for a list of IDs. You should use these IDs along with the excluded-sensitive-category field in the bid request to filter your bids.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectedSensitiveCategories")]
		public int[] DetectedSensitiveCategories { get; set; }
		
		/// <summary>
		/// IDs of the ad technology vendors that were detected to be used by this creative. See https://storage.googleapis.com/adx-rtb-dictionaries/vendors.txt for possible values. Can be used to filter the response of the creatives.list method. If the `allowed_vendor_type` field of a [bid request](https://developers.google.com/authorized-buyers/rtb/downloads/realtime-bidding-proto) does not contain one of the vendor type IDs that were declared or detected for a given creative, and a bid is submitted with that creative, the bid will be filtered before the auction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectedVendorIds")]
		public int[] DetectedVendorIds { get; set; }
		
		/// <summary>
		/// The last time the creative status was updated. Can be used to filter the response of the creatives.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastStatusUpdate")]
		public string LastStatusUpdate { get; set; }
		
		/// <summary>
		/// Policy compliance of the creative for a transaction type or a region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkPolicyCompliance")]
		public PolicyCompliance NetworkPolicyCompliance { get; set; }
		
		/// <summary>
		/// Policy compliance of the creative for a transaction type or a region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platformPolicyCompliance")]
		public PolicyCompliance PlatformPolicyCompliance { get; set; }
		
		/// <summary>
		/// Policy compliance of the creative for a transaction type or a region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="russiaPolicyCompliance")]
		public PolicyCompliance RussiaPolicyCompliance { get; set; }
	}
	
	/// <summary>
	/// Policy compliance of the creative for a transaction type or a region.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyCompliance
	{
		
		/// <summary>
		/// Serving status for the given transaction type (for example, open auction, deals) or region (for example, China, Russia). Can be used to filter the response of the creatives.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<PolicyComplianceStatus> Status { get; set; }
		
		/// <summary>
		/// Topics related to the policy compliance for this transaction type (for example, open auction, deals) or region (for example, China, Russia). Topics may be present only if status is DISAPPROVED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topics")]
		public PolicyTopicEntry[] Topics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PolicyComplianceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_REVIEW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISAPPROVED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERTIFICATE_REQUIRED = 4,
	}
	
	/// <summary>
	/// Each policy topic entry will represent a violation of a policy topic for a creative, with the policy topic information and optional evidence for the policy violation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyTopicEntry
	{
		
		/// <summary>
		/// Pieces of evidence associated with this policy topic entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evidences")]
		public PolicyTopicEvidence[] Evidences { get; set; }
		
		/// <summary>
		/// URL of the help center article describing this policy topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="helpCenterUrl")]
		public string HelpCenterUrl { get; set; }
		
		/// <summary>
		/// Whether or not the policy topic is missing a certificate. Some policy topics require a certificate to unblock serving in some regions. For more information about creative certification, refer to: https://support.google.com/authorizedbuyers/answer/7450776
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="missingCertificate")]
		public System.Nullable<System.Boolean> MissingCertificate { get; set; }
		
		/// <summary>
		/// Policy topic this entry refers to. For example, "ALCOHOL", "TRADEMARKS_IN_AD_TEXT", or "DESTINATION_NOT_WORKING". The set of possible policy topics is not fixed for a particular API version and may change at any time. Can be used to filter the response of the creatives.list method
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyTopic")]
		public string PolicyTopic { get; set; }
	}
	
	/// <summary>
	/// Evidence associated with a policy topic entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyTopicEvidence
	{
		
		/// <summary>
		/// Evidence that the creative's destination URL was not crawlable by Google.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationNotCrawlable")]
		public DestinationNotCrawlableEvidence DestinationNotCrawlable { get; set; }
		
		/// <summary>
		/// Evidence of the creative's destination URL not functioning properly or having been incorrectly set up.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationNotWorking")]
		public DestinationNotWorkingEvidence DestinationNotWorking { get; set; }
		
		/// <summary>
		/// The full landing page URL of the destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationUrl")]
		public DestinationUrlEvidence DestinationUrl { get; set; }
		
		/// <summary>
		/// Number of HTTP calls made by a creative, broken down by domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainCall")]
		public DomainCallEvidence DomainCall { get; set; }
		
		/// <summary>
		/// Total download size and URL-level download size breakdown for resources in a creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadSize")]
		public DownloadSizeEvidence DownloadSize { get; set; }
		
		/// <summary>
		/// HTTP calls made by a creative that resulted in policy violations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpCall")]
		public HttpCallEvidence HttpCall { get; set; }
		
		/// <summary>
		/// Evidence for HTTP cookie-related policy violations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpCookie")]
		public HttpCookieEvidence HttpCookie { get; set; }
	}
	
	/// <summary>
	/// Evidence that the creative's destination URL was not crawlable by Google.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinationNotCrawlableEvidence
	{
		
		/// <summary>
		/// Approximate time of the crawl.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crawlTime")]
		public string CrawlTime { get; set; }
		
		/// <summary>
		/// Destination URL that was attempted to be crawled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crawledUrl")]
		public string CrawledUrl { get; set; }
		
		/// <summary>
		/// Reason of destination not crawlable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public System.Nullable<DestinationNotCrawlableEvidenceReason> Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DestinationNotCrawlableEvidenceReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REASON_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNREACHABLE_ROBOTS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMEOUT_ROBOTS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROBOTED_DENIED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 4,
	}
	
	/// <summary>
	/// Evidence of the creative's destination URL not functioning properly or having been incorrectly set up.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinationNotWorkingEvidence
	{
		
		/// <summary>
		/// DNS lookup errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dnsError")]
		public System.Nullable<DestinationNotWorkingEvidenceDnsError> DnsError { get; set; }
		
		/// <summary>
		/// The full non-working URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expandedUrl")]
		public string ExpandedUrl { get; set; }
		
		/// <summary>
		/// HTTP error code (for example, 404 or 5xx)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpError")]
		public System.Nullable<System.Int32> HttpError { get; set; }
		
		/// <summary>
		/// Page was crawled successfully, but was detected as either a page with no content or an error page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invalidPage")]
		public System.Nullable<DestinationNotWorkingEvidenceInvalidPage> InvalidPage { get; set; }
		
		/// <summary>
		/// Approximate time when the ad destination was last checked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastCheckTime")]
		public string LastCheckTime { get; set; }
		
		/// <summary>
		/// Platform of the non-working URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public System.Nullable<DestinationNotWorkingEvidencePlatform> Platform { get; set; }
		
		/// <summary>
		/// HTTP redirect chain error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirectionError")]
		public System.Nullable<DestinationNotWorkingEvidenceRedirectionError> RedirectionError { get; set; }
		
		/// <summary>
		/// Rejected because of malformed URLs or invalid requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlRejected")]
		public System.Nullable<DestinationNotWorkingEvidenceUrlRejected> UrlRejected { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DestinationNotWorkingEvidenceDnsError
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DNS_ERROR_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR_DNS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOOGLE_CRAWLER_DNS_ISSUE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DestinationNotWorkingEvidenceInvalidPage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_PAGE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMPTY_OR_ERROR_PAGE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DestinationNotWorkingEvidencePlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLATFORM_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSONAL_COMPUTER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANDROID = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IOS = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DestinationNotWorkingEvidenceRedirectionError
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDIRECTION_ERROR_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOO_MANY_REDIRECTS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_REDIRECT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMPTY_REDIRECT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDIRECT_ERROR_UNKNOWN = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DestinationNotWorkingEvidenceUrlRejected
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		URL_REJECTED_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BAD_REQUEST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MALFORMED_URL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		URL_REJECTED_UNKNOWN = 3,
	}
	
	/// <summary>
	/// The full landing page URL of the destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinationUrlEvidence
	{
		
		/// <summary>
		/// The full landing page URL of the destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationUrl")]
		public string DestinationUrl { get; set; }
	}
	
	/// <summary>
	/// Number of HTTP calls made by a creative, broken down by domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DomainCallEvidence
	{
		
		/// <summary>
		/// Breakdown of the most frequent domains called through HTTP by the creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topHttpCallDomains")]
		public DomainCalls[] TopHttpCallDomains { get; set; }
		
		/// <summary>
		/// The total number of HTTP calls made by the creative, including but not limited to the number of calls in the top_http_call_domains.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalHttpCallCount")]
		public System.Nullable<System.Int32> TotalHttpCallCount { get; set; }
	}
	
	/// <summary>
	/// The number of HTTP calls made to the given domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DomainCalls
	{
		
		/// <summary>
		/// The domain name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// Number of HTTP calls made to the domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpCallCount")]
		public System.Nullable<System.Int32> HttpCallCount { get; set; }
	}
	
	/// <summary>
	/// Total download size and URL-level download size breakdown for resources in a creative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DownloadSizeEvidence
	{
		
		/// <summary>
		/// Download size broken down by URLs with the top download size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topUrlDownloadSizeBreakdowns")]
		public UrlDownloadSize[] TopUrlDownloadSizeBreakdowns { get; set; }
		
		/// <summary>
		/// Total download size (in kilobytes) for all the resources in the creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalDownloadSizeKb")]
		public System.Nullable<System.Int32> TotalDownloadSizeKb { get; set; }
	}
	
	/// <summary>
	/// The URL-level breakdown for the download size.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UrlDownloadSize
	{
		
		/// <summary>
		/// Download size of the URL in kilobytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadSizeKb")]
		public System.Nullable<System.Int32> DownloadSizeKb { get; set; }
		
		/// <summary>
		/// The normalized URL with query parameters and fragment removed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="normalizedUrl")]
		public string NormalizedUrl { get; set; }
	}
	
	/// <summary>
	/// HTTP calls made by a creative that resulted in policy violations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HttpCallEvidence
	{
		
		/// <summary>
		/// URLs of HTTP calls made by the creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urls")]
		public string[] Urls { get; set; }
	}
	
	/// <summary>
	/// Evidence for HTTP cookie-related policy violations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HttpCookieEvidence
	{
		
		/// <summary>
		/// Names of cookies that violate Google policies. For TOO_MANY_COOKIES policy, this will be the cookie names of top domains with the largest number of cookies. For other policies, this will be all the cookie names that violate the policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookieNames")]
		public string[] CookieNames { get; set; }
		
		/// <summary>
		/// The largest number of cookies set by a creative. If this field is set, cookie_names above will be set to the cookie names of top domains with the largest number of cookies. This field will only be set for TOO_MANY_COOKIES policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxCookieCount")]
		public System.Nullable<System.Int32> MaxCookieCount { get; set; }
	}
	
	/// <summary>
	/// HTML content for a creative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HtmlContent
	{
		
		/// <summary>
		/// The height of the HTML snippet in pixels. Can be used to filter the response of the creatives.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// The HTML snippet that displays the ad when inserted in the web page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public string Snippet { get; set; }
		
		/// <summary>
		/// The width of the HTML snippet in pixels. Can be used to filter the response of the creatives.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	/// <summary>
	/// Native content for a creative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NativeContent
	{
		
		/// <summary>
		/// The name of the advertiser or sponsor, to be displayed in the ad creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserName")]
		public string AdvertiserName { get; set; }
		
		/// <summary>
		/// An image resource. You may provide a larger image than was requested, so long as the aspect ratio is preserved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appIcon")]
		public Image AppIcon { get; set; }
		
		/// <summary>
		/// A long description of the ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// A label for the button that the user is supposed to click.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callToAction")]
		public string CallToAction { get; set; }
		
		/// <summary>
		/// The URL that the browser/SDK will load when the user clicks the ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickLinkUrl")]
		public string ClickLinkUrl { get; set; }
		
		/// <summary>
		/// The URL to use for click tracking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickTrackingUrl")]
		public string ClickTrackingUrl { get; set; }
		
		/// <summary>
		/// A short title for the ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headline")]
		public string Headline { get; set; }
		
		/// <summary>
		/// An image resource. You may provide a larger image than was requested, so long as the aspect ratio is preserved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public Image Image { get; set; }
		
		/// <summary>
		/// An image resource. You may provide a larger image than was requested, so long as the aspect ratio is preserved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public Image Logo { get; set; }
		
		/// <summary>
		/// The price of the promoted app including currency info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceDisplayText")]
		public string PriceDisplayText { get; set; }
		
		/// <summary>
		/// The app rating in the app store. Must be in the range [0-5].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="starRating")]
		public System.Nullable<System.Double> StarRating { get; set; }
		
		/// <summary>
		/// The URL to fetch a native video ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoUrl")]
		public string VideoUrl { get; set; }
		
		/// <summary>
		/// The contents of a VAST document for a native video ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoVastXml")]
		public string VideoVastXml { get; set; }
	}
	
	/// <summary>
	/// An image resource. You may provide a larger image than was requested, so long as the aspect ratio is preserved.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Image
	{
		
		/// <summary>
		/// Image height in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// The URL of the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Image width in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	/// <summary>
	/// Video content for a creative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoContent
	{
		
		/// <summary>
		/// Video metadata for a creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoMetadata")]
		public VideoMetadata VideoMetadata { get; set; }
		
		/// <summary>
		/// The URL to fetch a video ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoUrl")]
		public string VideoUrl { get; set; }
		
		/// <summary>
		/// The contents of a VAST document for a video ad. This document should conform to the VAST 2.0 or 3.0 standard.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoVastXml")]
		public string VideoVastXml { get; set; }
	}
	
	/// <summary>
	/// Video metadata for a creative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoMetadata
	{
		
		/// <summary>
		/// The duration of the ad. Can be used to filter the response of the creatives.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public string Duration { get; set; }
		
		/// <summary>
		/// Is this a valid VAST ad? Can be used to filter the response of the creatives.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isValidVast")]
		public System.Nullable<System.Boolean> IsValidVast { get; set; }
		
		/// <summary>
		/// Is this a VPAID ad? Can be used to filter the response of the creatives.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isVpaid")]
		public System.Nullable<System.Boolean> IsVpaid { get; set; }
		
		/// <summary>
		/// The list of all media files declared in the VAST. If there are multiple VASTs in a wrapper chain, this includes the media files from the deepest one in the chain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaFiles")]
		public MediaFile[] MediaFiles { get; set; }
		
		/// <summary>
		/// The minimum duration that the user has to watch before being able to skip this ad. If the field is not set, the ad is not skippable. If the field is set, the ad is skippable. Can be used to filter the response of the creatives.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipOffset")]
		public string SkipOffset { get; set; }
		
		/// <summary>
		/// The maximum VAST version across all wrapped VAST documents. Can be used to filter the response of the creatives.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vastVersion")]
		public System.Nullable<VideoMetadataVastVersion> VastVersion { get; set; }
	}
	
	/// <summary>
	/// Information about each media file in the VAST.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaFile
	{
		
		/// <summary>
		/// Bitrate of the video file, in Kbps. Can be used to filter the response of the creatives.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bitrate")]
		public string Bitrate { get; set; }
		
		/// <summary>
		/// The MIME type of this media file. Can be used to filter the response of the creatives.list method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public System.Nullable<MediaFileMimeType> MimeType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MediaFileMimeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_MIME_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIME_VIDEO_XFLV = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIME_VIDEO_WEBM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIME_VIDEO_MP4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIME_VIDEO_OGG = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIME_VIDEO_YT_HOSTED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIME_VIDEO_X_MS_WMV = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIME_VIDEO_3GPP = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIME_VIDEO_MOV = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIME_APPLICATION_SWF = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIME_APPLICATION_SURVEY = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIME_APPLICATION_JAVASCRIPT = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIME_APPLICATION_SILVERLIGHT = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIME_APPLICATION_MPEGURL = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIME_APPLICATION_MPEGDASH = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIME_AUDIO_MP4A = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIME_AUDIO_MP3 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIME_AUDIO_OGG = 17,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum VideoMetadataVastVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VAST_VERSION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VAST_VERSION_1_0 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VAST_VERSION_2_0 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VAST_VERSION_3_0 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VAST_VERSION_4_0 = 4,
	}
	
	/// <summary>
	/// The dimensions of a creative. This applies to only HTML and Native creatives.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreativeDimensions
	{
		
		/// <summary>
		/// The height of the creative in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public string Height { get; set; }
		
		/// <summary>
		/// The width of the creative in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public string Width { get; set; }
	}
	
	/// <summary>
	/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Date
	{
		
		/// <summary>
		/// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		/// <summary>
		/// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		/// <summary>
		/// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Empty
	{
	}
	
	/// <summary>
	/// Bidder endpoint that receives bid requests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Endpoint
	{
		
		/// <summary>
		/// The protocol that the bidder endpoint is using.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bidProtocol")]
		public System.Nullable<EndpointBidProtocol> BidProtocol { get; set; }
		
		/// <summary>
		/// The maximum number of queries per second allowed to be sent to this server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumQps")]
		public string MaximumQps { get; set; }
		
		/// <summary>
		/// Output only. Name of the endpoint resource that must follow the pattern `bidders/{bidderAccountId}/endpoints/{endpointId}`, where {bidderAccountId} is the account ID of the bidder who operates this endpoint, and {endpointId} is a unique ID assigned by the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The trading location that bid requests should be sent from. See https://developers.google.com/authorized-buyers/rtb/peer-guide#trading-locations for further information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tradingLocation")]
		public System.Nullable<EndpointTradingLocation> TradingLocation { get; set; }
		
		/// <summary>
		/// Output only. The URL that bid requests should be sent to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum EndpointBidProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BID_PROTOCOL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOOGLE_RTB = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPENRTB_JSON = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPENRTB_PROTOBUF = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum EndpointTradingLocation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRADING_LOCATION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		US_WEST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		US_EAST = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EUROPE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASIA = 4,
	}
	
	/// <summary>
	/// This has been sunset as of October 2023, and will return an error response if called. For more information, see the release notes: https://developers.google.com/authorized-buyers/apis/relnotes#real-time-bidding-api Response for a request to get remarketing tag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRemarketingTagResponse
	{
		
		/// <summary>
		/// An HTML tag that can be placed on the advertiser's page to add users to a user list. For more information and code samples on using snippets on your website, refer to [Tag your site for remarketing](https://support.google.com/google-ads/answer/2476688).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public string Snippet { get; set; }
	}
	
	/// <summary>
	/// A response containing bidders.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListBiddersResponse
	{
		
		/// <summary>
		/// List of bidders.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bidders")]
		public Bidder[] Bidders { get; set; }
		
		/// <summary>
		/// A token which can be passed to a subsequent call to the `ListBidders` method to retrieve the next page of results in ListBiddersRequest.pageToken.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A response containing buyer account information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListBuyersResponse
	{
		
		/// <summary>
		/// List of buyers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyers")]
		public Buyer[] Buyers { get; set; }
		
		/// <summary>
		/// A token which can be passed to a subsequent call to the `ListBuyers` method to retrieve the next page of results in ListBuyersRequest.pageToken.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A response for listing creatives.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCreativesResponse
	{
		
		/// <summary>
		/// The list of creatives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creatives")]
		public Creative[] Creatives { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the ListCreativesRequest.pageToken field in the subsequent call to the `ListCreatives` method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A response containing bidder endpoints.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListEndpointsResponse
	{
		
		/// <summary>
		/// List of bidder endpoints.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoints")]
		public Endpoint[] Endpoints { get; set; }
		
		/// <summary>
		/// A token which can be passed to a subsequent call to the `ListEndpoints` method to retrieve the next page of results in ListEndpointsRequest.pageToken.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A response containing pretargeting configurations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPretargetingConfigsResponse
	{
		
		/// <summary>
		/// A token which can be passed to a subsequent call to the `ListPretargetingConfigs` method to retrieve the next page of results in ListPretargetingConfigsRequest.pageToken.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// List of pretargeting configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pretargetingConfigs")]
		public PretargetingConfig[] PretargetingConfigs { get; set; }
	}
	
	/// <summary>
	/// Pretargeting configuration: a set of targeting dimensions applied at the pretargeting stage of the RTB funnel. These control which inventory a bidder will receive bid requests for.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PretargetingConfig
	{
		
		/// <summary>
		/// Targeting modes included by this configuration. A bid request must allow all the specified targeting modes. An unset value allows all bid requests to be sent, regardless of which targeting modes they allow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedUserTargetingModes")]
		public string[] AllowedUserTargetingModes { get; set; }
		
		/// <summary>
		/// A subset of app inventory to target. Bid requests that match criteria in at least one of the specified dimensions will be sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appTargeting")]
		public AppTargeting AppTargeting { get; set; }
		
		/// <summary>
		/// Output only. The identifier that corresponds to this pretargeting configuration that helps buyers track and attribute their spend across their own arbitrary divisions. If a bid request matches more than one configuration, the buyer chooses which billing_id to attribute each of their bids.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingId")]
		public string BillingId { get; set; }
		
		/// <summary>
		/// The diplay name associated with this configuration. This name must be unique among all the pretargeting configurations a bidder has.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The sensitive content category label IDs excluded in this configuration. Bid requests for inventory with any of the specified content label IDs will not be sent. Refer to this file https://storage.googleapis.com/adx-rtb-dictionaries/content-labels.txt for category IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedContentLabelIds")]
		public string[] ExcludedContentLabelIds { get; set; }
		
		/// <summary>
		/// Generic targeting used for targeting dimensions that contain a list of included and excluded numeric IDs used in app, user list, geo, and vertical id targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoTargeting")]
		public NumericTargetingDimension GeoTargeting { get; set; }
		
		/// <summary>
		/// Creative dimensions included by this configuration. Only bid requests eligible for at least one of the specified creative dimensions will be sent. An unset value allows all bid requests to be sent, regardless of creative dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedCreativeDimensions")]
		public CreativeDimensions[] IncludedCreativeDimensions { get; set; }
		
		/// <summary>
		/// Environments that are being included. Bid requests will not be sent for a given environment if it is not included. Further restrictions can be applied to included environments to target only a subset of its inventory. An unset value includes all environments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedEnvironments")]
		public string[] IncludedEnvironments { get; set; }
		
		/// <summary>
		/// Creative formats included by this configuration. Only bid requests eligible for at least one of the specified creative formats will be sent. An unset value will allow all bid requests to be sent, regardless of format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedFormats")]
		public string[] IncludedFormats { get; set; }
		
		/// <summary>
		/// The languages included in this configuration, represented by their language code. See https://developers.google.com/adwords/api/docs/appendix/languagecodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedLanguages")]
		public string[] IncludedLanguages { get; set; }
		
		/// <summary>
		/// The mobile operating systems included in this configuration as defined in https://storage.googleapis.com/adx-rtb-dictionaries/mobile-os.csv
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedMobileOperatingSystemIds")]
		public string[] IncludedMobileOperatingSystemIds { get; set; }
		
		/// <summary>
		/// The platforms included by this configration. Bid requests for devices with the specified platform types will be sent. An unset value allows all bid requests to be sent, regardless of platform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedPlatforms")]
		public string[] IncludedPlatforms { get; set; }
		
		/// <summary>
		/// User identifier types included in this configuration. At least one of the user identifier types specified in this list must be available for the bid request to be sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedUserIdTypes")]
		public string[] IncludedUserIdTypes { get; set; }
		
		/// <summary>
		/// The interstitial targeting specified for this configuration. The unset value will allow bid requests to be sent regardless of whether they are for interstitials or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interstitialTargeting")]
		public System.Nullable<PretargetingConfigInterstitialTargeting> InterstitialTargeting { get; set; }
		
		/// <summary>
		/// Output only. Existing included or excluded geos that are invalid. Previously targeted geos may become invalid due to privacy restrictions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invalidGeoIds")]
		public string[] InvalidGeoIds { get; set; }
		
		/// <summary>
		/// The maximum QPS threshold for this configuration. The bidder should receive no more than this number of bid requests matching this configuration per second across all their bidding endpoints among all trading locations. Further information available at https://developers.google.com/authorized-buyers/rtb/peer-guide
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumQps")]
		public string MaximumQps { get; set; }
		
		/// <summary>
		/// The targeted minimum viewability decile, ranging in values [0, 10]. A value of 5 means that the configuration will only match adslots for which we predict at least 50% viewability. Values > 10 will be rounded down to 10. An unset value or a value of 0 indicates that bid requests will be sent regardless of viewability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumViewabilityDecile")]
		public System.Nullable<System.Int32> MinimumViewabilityDecile { get; set; }
		
		/// <summary>
		/// Output only. Name of the pretargeting configuration that must follow the pattern `bidders/{bidder_account_id}/pretargetingConfigs/{config_id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Generic targeting with string values used in app, website and publisher targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherTargeting")]
		public StringTargetingDimension PublisherTargeting { get; set; }
		
		/// <summary>
		/// Output only. The state of this pretargeting configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<PretargetingConfigState> State { get; set; }
		
		/// <summary>
		/// Generic targeting used for targeting dimensions that contain a list of included and excluded numeric IDs used in app, user list, geo, and vertical id targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userListTargeting")]
		public NumericTargetingDimension UserListTargeting { get; set; }
		
		/// <summary>
		/// Generic targeting used for targeting dimensions that contain a list of included and excluded numeric IDs used in app, user list, geo, and vertical id targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verticalTargeting")]
		public NumericTargetingDimension VerticalTargeting { get; set; }
		
		/// <summary>
		/// Generic targeting with string values used in app, website and publisher targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webTargeting")]
		public StringTargetingDimension WebTargeting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PretargetingConfigInterstitialTargeting
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERSTITIAL_TARGETING_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONLY_INTERSTITIAL_REQUESTS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONLY_NON_INTERSTITIAL_REQUESTS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PretargetingConfigState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSPENDED = 2,
	}
	
	/// <summary>
	/// A response to a request for listing publisher connections.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPublisherConnectionsResponse
	{
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the ListPublisherConnectionsRequest.pageToken field in the subsequent call to the `ListPublisherConnections` method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of publisher connections.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherConnections")]
		public PublisherConnection[] PublisherConnections { get; set; }
	}
	
	/// <summary>
	/// The list user list response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListUserListsResponse
	{
		
		/// <summary>
		/// The continuation page token to send back to the server in a subsequent request. Due to a currently known issue, it is recommended that the caller keep invoking the list method until the time a next page token is not returned, even if the result set is empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// List of user lists from the search.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userLists")]
		public UserList[] UserLists { get; set; }
	}
	
	/// <summary>
	/// Represents an Authorized Buyers user list. Authorized Buyers can create/update/list user lists. Once a user list is created in the system, Authorized Buyers can add users to the user list using the bulk uploader API. Alternatively, users can be added by hosting a tag on the advertiser's page.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserList
	{
		
		/// <summary>
		/// The description for the user list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required. Display name of the user list. This must be unique across all user lists for a given account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Required. The number of days a user's cookie stays on the user list. The field must be between 0 and 540 inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membershipDurationDays")]
		public string MembershipDurationDays { get; set; }
		
		/// <summary>
		/// Output only. Name of the user list that must follow the pattern `buyers/{buyer}/userLists/{user_list}`, where `{buyer}` represents the account ID of the buyer who owns the user list. For a bidder accessing user lists on behalf of a child seat buyer, `{buyer}` represents the account ID of the child seat buyer. `{user_list}` is an int64 identifier assigned by Google to uniquely identify a user list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The status of the user list. A new user list starts out as open.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<UserListStatus> Status { get; set; }
		
		/// <summary>
		/// Deprecated. This will be removed in October 2023. For more information, see the release notes: https://developers.google.com/authorized-buyers/apis/relnotes#real-time-bidding-api Represents the URL restriction (for the URL captured by the pixel callback) for a user list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlRestriction")]
		public UrlRestriction UrlRestriction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum UserListStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOSED = 2,
	}
	
	/// <summary>
	/// Deprecated. This will be removed in October 2023. For more information, see the release notes: https://developers.google.com/authorized-buyers/apis/relnotes#real-time-bidding-api Represents the URL restriction (for the URL captured by the pixel callback) for a user list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UrlRestriction
	{
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public Date EndDate { get; set; }
		
		/// <summary>
		/// The restriction type for the specified URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictionType")]
		public System.Nullable<UrlRestrictionRestrictionType> RestrictionType { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public Date StartDate { get; set; }
		
		/// <summary>
		/// Required. The URL to use for applying the restriction on the user list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum UrlRestrictionRestrictionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTRICTION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTAINS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQUALS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTS_WITH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENDS_WITH = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOES_NOT_EQUAL = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOES_NOT_CONTAIN = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOES_NOT_START_WITH = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOES_NOT_END_WITH = 8,
	}
	
	/// <summary>
	/// A request to open a specified user list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OpenUserListRequest
	{
	}
	
	/// <summary>
	/// A request to stop targeting the provided apps in a specific pretargeting configuration. The pretargeting configuration itself specifies how these apps are targeted. in PretargetingConfig.appTargeting.mobileAppTargeting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveTargetedAppsRequest
	{
		
		/// <summary>
		/// A list of app IDs to stop targeting in the pretargeting configuration. These values will be removed from the list of targeted app IDs in PretargetingConfig.appTargeting.mobileAppTargeting.values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appIds")]
		public string[] AppIds { get; set; }
	}
	
	/// <summary>
	/// A request to stop targeting publishers in a specific configuration. The pretargeting configuration itself specifies how these publishers are targeted in PretargetingConfig.publisherTargeting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveTargetedPublishersRequest
	{
		
		/// <summary>
		/// A list of publisher IDs to stop targeting in the pretargeting configuration. These values will be removed from the list of targeted publisher IDs in PretargetingConfig.publisherTargeting.values. Publishers are identified by their publisher ID from ads.txt / app-ads.txt. See https://iabtechlab.com/ads-txt/ and https://iabtechlab.com/app-ads-txt/ for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherIds")]
		public string[] PublisherIds { get; set; }
	}
	
	/// <summary>
	/// A request to stop targeting sites in a specific pretargeting configuration. The pretargeting configuration itself specifies how these sites are targeted in PretargetingConfig.webTargeting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveTargetedSitesRequest
	{
		
		/// <summary>
		/// A list of site URLs to stop targeting in the pretargeting configuration. These values will be removed from the list of targeted URLs in PretargetingConfig.webTargeting.values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sites")]
		public string[] Sites { get; set; }
	}
	
	/// <summary>
	/// A request to suspend a pretargeting configuration. Sets the configuration's state to SUSPENDED.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SuspendPretargetingConfigRequest
	{
	}
	
	/// <summary>
	/// A request to receive push notifications when any of the creatives belonging to the bidder changes status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WatchCreativesRequest
	{
	}
	
	/// <summary>
	/// A response for the request to receive push notification when a bidder's creatives change status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WatchCreativesResponse
	{
		
		/// <summary>
		/// The Pub/Sub subscription that can be used to pull creative status notifications. This would be of the format `projects/{project_id}/subscriptions/{subscription_id}`. Subscription is created with pull delivery. All service accounts belonging to the bidder will have read access to this subscription. Subscriptions that are inactive for more than 90 days will be disabled. Use watchCreatives to re-enable the subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscription")]
		public string Subscription { get; set; }
		
		/// <summary>
		/// The Pub/Sub topic that will be used to publish creative serving status notifications. This would be of the format `projects/{project_id}/topics/{topic_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topic")]
		public string Topic { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all the bidder accounts that belong to the caller.
		/// Realtimebidding_bidders_list v1/bidders
		/// </summary>
		/// <param name="pageSize">The maximum number of bidders to return. If unspecified, at most 100 bidders will be returned. The maximum value is 500; values above 500 will be coerced to 500.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. This value is received from a previous `ListBidders` call in ListBiddersResponse.nextPageToken.</param>
		/// <returns>Successful response</returns>
		public async Task<ListBiddersResponse> Realtimebidding_bidders_listAsync(int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/bidders?pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListBiddersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all buyer account information the calling buyer user or service account is permissioned to manage.
		/// Realtimebidding_buyers_list v1/buyers
		/// </summary>
		/// <param name="pageSize">The maximum number of buyers to return. If unspecified, at most 100 buyers will be returned. The maximum value is 500; values above 500 will be coerced to 500.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. This value is received from a previous `ListBuyers` call in ListBuyersResponse.nextPageToken.</param>
		/// <returns>Successful response</returns>
		public async Task<ListBuyersResponse> Realtimebidding_buyers_listAsync(int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/buyers?pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListBuyersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a pretargeting configuration.
		/// Realtimebidding_bidders_pretargetingConfigs_delete v1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the pretargeting configuration to delete. Format: bidders/{bidderAccountId}/pretargetingConfig/{configId}</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Realtimebidding_bidders_pretargetingConfigs_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a user list by its name.
		/// Realtimebidding_buyers_userLists_get v1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the user list to be retrieved. See UserList.name.</param>
		/// <param name="view">Controls the amount of information included in the response. By default only creativeServingDecision is included. To retrieve the entire creative resource (including the declared fields and the creative content) specify the view as "FULL".</param>
		/// <returns>Successful response</returns>
		public async Task<UserList> Realtimebidding_buyers_userLists_getAsync(string name, Realtimebidding_buyers_userLists_getView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a creative.
		/// Realtimebidding_buyers_creatives_patch v1/{name}
		/// </summary>
		/// <param name="name">Output only. Name of the creative. Follows the pattern `buyers/{buyer}/creatives/{creative}`, where `{buyer}` represents the account ID of the buyer who owns the creative, and `{creative}` is the buyer-specific creative ID that references this creative in the bid response.</param>
		/// <param name="updateMask">Field mask to use for partial in-place updates.</param>
		/// <returns>Successful response</returns>
		public async Task<Creative> Realtimebidding_buyers_creatives_patchAsync(string name, string updateMask, Creative requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Creative>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the given user list. Only user lists with URLRestrictions can be updated.
		/// Realtimebidding_buyers_userLists_update v1/{name}
		/// </summary>
		/// <param name="name">Output only. Name of the user list that must follow the pattern `buyers/{buyer}/userLists/{user_list}`, where `{buyer}` represents the account ID of the buyer who owns the user list. For a bidder accessing user lists on behalf of a child seat buyer, `{buyer}` represents the account ID of the child seat buyer. `{user_list}` is an int64 identifier assigned by Google to uniquely identify a user list.</param>
		/// <returns>Successful response</returns>
		public async Task<UserList> Realtimebidding_buyers_userLists_updateAsync(string name, UserList requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Activates a pretargeting configuration.
		/// Realtimebidding_bidders_pretargetingConfigs_activate v1/{name}:activate
		/// </summary>
		/// <param name="name">Required. The name of the pretargeting configuration. Format: bidders/{bidderAccountId}/pretargetingConfig/{configId}</param>
		/// <returns>Successful response</returns>
		public async Task<PretargetingConfig> Realtimebidding_bidders_pretargetingConfigs_activateAsync(string name, ActivatePretargetingConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":activate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PretargetingConfig>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Changes the status of a user list to CLOSED. This prevents new users from being added to the user list.
		/// Realtimebidding_buyers_userLists_close v1/{name}:close
		/// </summary>
		/// <param name="name">Required. The name of the user list to close. See UserList.name</param>
		/// <returns>Successful response</returns>
		public async Task<UserList> Realtimebidding_buyers_userLists_closeAsync(string name, CloseUserListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":close";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This has been sunset as of October 2023, and will return an error response if called. For more information, see the release notes: https://developers.google.com/authorized-buyers/apis/relnotes#real-time-bidding-api Gets remarketing tag for a buyer. A remarketing tag is a piece of JavaScript code that can be placed on a web page. When a user visits a page containing a remarketing tag, Google adds the user to a user list.
		/// Realtimebidding_buyers_userLists_getRemarketingTag v1/{name}:getRemarketingTag
		/// </summary>
		/// <param name="name">Required. To fetch the remarketing tag for an account, the name must follow the pattern `buyers/{accountId}`, where `{accountId}` represents the ID of the buyer that owns the remarketing tag. For a bidder accessing the remarketing tag on behalf of a child seat buyer, `{accountId}` should represent the ID of the child seat buyer. To fetch the remarketing tag for a specific user list, the name must follow the pattern `buyers/{accountId}/userLists/{userListId}`. See UserList.name.</param>
		/// <returns>Successful response</returns>
		public async Task<GetRemarketingTagResponse> Realtimebidding_buyers_userLists_getRemarketingTagAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":getRemarketingTag";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetRemarketingTagResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Changes the status of a user list to OPEN. This allows new users to be added to the user list.
		/// Realtimebidding_buyers_userLists_open v1/{name}:open
		/// </summary>
		/// <param name="name">Required. The name of the user list to open. See UserList.name</param>
		/// <returns>Successful response</returns>
		public async Task<UserList> Realtimebidding_buyers_userLists_openAsync(string name, OpenUserListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":open";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Suspends a pretargeting configuration.
		/// Realtimebidding_bidders_pretargetingConfigs_suspend v1/{name}:suspend
		/// </summary>
		/// <param name="name">Required. The name of the pretargeting configuration. Format: bidders/{bidderAccountId}/pretargetingConfig/{configId}</param>
		/// <returns>Successful response</returns>
		public async Task<PretargetingConfig> Realtimebidding_bidders_pretargetingConfigs_suspendAsync(string name, SuspendPretargetingConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":suspend";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PretargetingConfig>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists creatives as they are at the time of the initial request. This call may take multiple hours to complete. For large, paginated requests, this method returns a snapshot of creatives at the time of request for the first page. `lastStatusUpdate` and `creativeServingDecision` may be outdated for creatives on sequential pages. We recommend [Google Cloud Pub/Sub](//cloud.google.com/pubsub/docs/overview) to view the latest status.
		/// Realtimebidding_buyers_creatives_list v1/{parent}/creatives
		/// </summary>
		/// <param name="parent">Required. Name of the parent buyer that owns the creatives. The pattern for this resource is either `buyers/{buyerAccountId}` or `bidders/{bidderAccountId}`. For `buyers/{buyerAccountId}`, the `buyerAccountId` can be one of the following: 1. The ID of the buyer that is accessing their own creatives. 2. The ID of the child seat buyer under a bidder account. So for listing creatives pertaining to the child seat buyer (`456`) under bidder account (`123`), you would use the pattern: `buyers/456`. 3. The ID of the bidder itself. So for listing creatives pertaining to bidder (`123`), you would use `buyers/123`. If you want to access all creatives pertaining to both the bidder and all of its child seat accounts, you would use `bidders/{bidderAccountId}`, for example, for all creatives pertaining to bidder (`123`), use `bidders/123`.</param>
		/// <param name="filter">Query string to filter creatives. If no filter is specified, all active creatives will be returned. Example: 'accountId=12345 AND (dealsStatus:DISAPPROVED AND disapprovalReason:UNACCEPTABLE_CONTENT) OR declaredAttributes:IS_COOKIE_TARGETED'</param>
		/// <param name="pageSize">Requested page size. The server may return fewer creatives than requested (due to timeout constraint) even if more are available through another call. If unspecified, server will pick an appropriate default. Acceptable values are 1 to 1000, inclusive.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of ListCreativesResponse.nextPageToken returned from the previous call to the 'ListCreatives' method. Page tokens for continued pages are valid for up to five hours, counting from the call to 'ListCreatives' for the first page.</param>
		/// <param name="view">Controls the amount of information included in the response. By default only creativeServingDecision is included. To retrieve the entire creative resource (including the declared fields and the creative content) specify the view as "FULL".</param>
		/// <returns>Successful response</returns>
		public async Task<ListCreativesResponse> Realtimebidding_buyers_creatives_listAsync(string parent, string filter, int pageSize, string pageToken, Realtimebidding_buyers_userLists_getView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/creatives&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCreativesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a creative.
		/// Realtimebidding_buyers_creatives_create v1/{parent}/creatives
		/// </summary>
		/// <param name="parent">Required. The name of the parent buyer that the new creative belongs to that must follow the pattern `buyers/{buyerAccountId}`, where `{buyerAccountId}` represents the account ID of the buyer who owns a creative. For a bidder accessing creatives on behalf of a child seat buyer, `{buyerAccountId}` should represent the account ID of the child seat buyer.</param>
		/// <returns>Successful response</returns>
		public async Task<Creative> Realtimebidding_buyers_creatives_createAsync(string parent, Creative requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/creatives";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Creative>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Watches all creatives pertaining to a bidder. It is sufficient to invoke this endpoint once per bidder. A Pub/Sub topic will be created and notifications will be pushed to the topic when any of the bidder's creatives change status. All of the bidder's service accounts will have access to read from the topic. Subsequent invocations of this method will return the existing Pub/Sub configuration.
		/// Realtimebidding_bidders_creatives_watch v1/{parent}/creatives:watch
		/// </summary>
		/// <param name="parent">Required. To watch all creatives pertaining to the bidder and all its child seat accounts, the bidder must follow the pattern `bidders/{bidderAccountId}`.</param>
		/// <returns>Successful response</returns>
		public async Task<WatchCreativesResponse> Realtimebidding_bidders_creatives_watchAsync(string parent, WatchCreativesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/creatives:watch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WatchCreativesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all the bidder's endpoints.
		/// Realtimebidding_bidders_endpoints_list v1/{parent}/endpoints
		/// </summary>
		/// <param name="parent">Required. Name of the bidder whose endpoints will be listed. Format: `bidders/{bidderAccountId}`</param>
		/// <param name="pageSize">The maximum number of endpoints to return. If unspecified, at most 100 endpoints will be returned. The maximum value is 500; values above 500 will be coerced to 500.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. This value is received from a previous `ListEndpoints` call in ListEndpointsResponse.nextPageToken.</param>
		/// <returns>Successful response</returns>
		public async Task<ListEndpointsResponse> Realtimebidding_bidders_endpoints_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/endpoints&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListEndpointsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all pretargeting configurations for a single bidder.
		/// Realtimebidding_bidders_pretargetingConfigs_list v1/{parent}/pretargetingConfigs
		/// </summary>
		/// <param name="parent">Required. Name of the bidder whose pretargeting configurations will be listed. Format: bidders/{bidderAccountId}</param>
		/// <param name="pageSize">The maximum number of pretargeting configurations to return. If unspecified, at most 10 pretargeting configurations will be returned. The maximum value is 100; values above 100 will be coerced to 100.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. This value is received from a previous `ListPretargetingConfigs` call in ListPretargetingConfigsResponse.nextPageToken.</param>
		/// <returns>Successful response</returns>
		public async Task<ListPretargetingConfigsResponse> Realtimebidding_bidders_pretargetingConfigs_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/pretargetingConfigs&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPretargetingConfigsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a pretargeting configuration. A pretargeting configuration's state (PretargetingConfig.state) is active upon creation, and it will start to affect traffic shortly after. A bidder may create a maximum of 10 pretargeting configurations. Attempts to exceed this maximum results in a 400 bad request error.
		/// Realtimebidding_bidders_pretargetingConfigs_create v1/{parent}/pretargetingConfigs
		/// </summary>
		/// <param name="parent">Required. Name of the bidder to create the pretargeting configuration for. Format: bidders/{bidderAccountId}</param>
		/// <returns>Successful response</returns>
		public async Task<PretargetingConfig> Realtimebidding_bidders_pretargetingConfigs_createAsync(string parent, PretargetingConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/pretargetingConfigs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PretargetingConfig>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists publisher connections for a given bidder.
		/// Realtimebidding_bidders_publisherConnections_list v1/{parent}/publisherConnections
		/// </summary>
		/// <param name="parent">Required. Name of the bidder for which publishers have initiated connections. The pattern for this resource is `bidders/{bidder}` where `{bidder}` represents the account ID of the bidder.</param>
		/// <param name="filter">Query string to filter publisher connections. Connections can be filtered by `displayName`, `publisherPlatform`, and `biddingState`. If no filter is specified, all publisher connections will be returned. Example: 'displayName="Great Publisher*" AND publisherPlatform=ADMOB AND biddingState != PENDING' See https://google.aip.dev/160 for more information about filtering syntax.</param>
		/// <param name="orderBy">Order specification by which results should be sorted. If no sort order is specified, the results will be returned in alphabetic order based on the publisher's publisher code. Results can be sorted by `createTime`. Example: 'createTime DESC'.</param>
		/// <param name="pageSize">Requested page size. The server may return fewer results than requested (due to timeout constraint) even if more are available through another call. If unspecified, the server will pick an appropriate default. Acceptable values are 1 to 5000, inclusive.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of ListPublisherConnectionsResponse.nextPageToken returned from the previous call to the 'ListPublisherConnections' method.</param>
		/// <returns>Successful response</returns>
		public async Task<ListPublisherConnectionsResponse> Realtimebidding_bidders_publisherConnections_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/publisherConnections&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPublisherConnectionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Batch approves multiple publisher connections.
		/// Realtimebidding_bidders_publisherConnections_batchApprove v1/{parent}/publisherConnections:batchApprove
		/// </summary>
		/// <param name="parent">Required. The bidder for whom publisher connections will be approved. Format: `bidders/{bidder}` where `{bidder}` is the account ID of the bidder.</param>
		/// <returns>Successful response</returns>
		public async Task<BatchApprovePublisherConnectionsResponse> Realtimebidding_bidders_publisherConnections_batchApproveAsync(string parent, BatchApprovePublisherConnectionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/publisherConnections:batchApprove";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchApprovePublisherConnectionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Batch rejects multiple publisher connections.
		/// Realtimebidding_bidders_publisherConnections_batchReject v1/{parent}/publisherConnections:batchReject
		/// </summary>
		/// <param name="parent">Required. The bidder for whom publisher connections will be rejected. Format: `bidders/{bidder}` where `{bidder}` is the account ID of the bidder.</param>
		/// <returns>Successful response</returns>
		public async Task<BatchRejectPublisherConnectionsResponse> Realtimebidding_bidders_publisherConnections_batchRejectAsync(string parent, BatchRejectPublisherConnectionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/publisherConnections:batchReject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchRejectPublisherConnectionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the user lists visible to the current user.
		/// Realtimebidding_buyers_userLists_list v1/{parent}/userLists
		/// </summary>
		/// <param name="parent">Required. The name of the parent buyer for the user lists to be returned that must follow the pattern `buyers/{buyerAccountId}`, where `{buyerAccountId}` represents the account ID of the buyer who owns user lists. For a bidder accessing user lists on behalf of a child seat buyer , `{buyerAccountId}` should represent the account ID of the child seat buyer.</param>
		/// <param name="pageSize">The number of results to return per page.</param>
		/// <param name="pageToken">Continuation page token as received from a previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<ListUserListsResponse> Realtimebidding_buyers_userLists_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/userLists&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListUserListsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new user list.
		/// Realtimebidding_buyers_userLists_create v1/{parent}/userLists
		/// </summary>
		/// <param name="parent">Required. The name of the parent buyer of the user list to be retrieved, which must follow the pattern `buyers/{buyerAccountId}`, where `{buyerAccountId}` represents the account ID of the buyer who owns the user list. For a bidder accessing user lists on behalf of a child seat buyer, `{buyerAccountId}` should represent the account ID of the child seat buyer.</param>
		/// <returns>Successful response</returns>
		public async Task<UserList> Realtimebidding_buyers_userLists_createAsync(string parent, UserList requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/userLists";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds targeted apps to the pretargeting configuration.
		/// Realtimebidding_bidders_pretargetingConfigs_addTargetedApps v1/{pretargetingConfig}:addTargetedApps
		/// </summary>
		/// <param name="pretargetingConfig">Required. The name of the pretargeting configuration. Format: bidders/{bidderAccountId}/pretargetingConfig/{configId}</param>
		/// <returns>Successful response</returns>
		public async Task<PretargetingConfig> Realtimebidding_bidders_pretargetingConfigs_addTargetedAppsAsync(string pretargetingConfig, AddTargetedAppsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (pretargetingConfig==null? "" : System.Uri.EscapeDataString(pretargetingConfig))+":addTargetedApps";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PretargetingConfig>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds targeted publishers to the pretargeting config.
		/// Realtimebidding_bidders_pretargetingConfigs_addTargetedPublishers v1/{pretargetingConfig}:addTargetedPublishers
		/// </summary>
		/// <param name="pretargetingConfig">Required. The name of the pretargeting configuration. Format: bidders/{bidderAccountId}/pretargetingConfig/{configId}</param>
		/// <returns>Successful response</returns>
		public async Task<PretargetingConfig> Realtimebidding_bidders_pretargetingConfigs_addTargetedPublishersAsync(string pretargetingConfig, AddTargetedPublishersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (pretargetingConfig==null? "" : System.Uri.EscapeDataString(pretargetingConfig))+":addTargetedPublishers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PretargetingConfig>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds targeted sites to the pretargeting configuration.
		/// Realtimebidding_bidders_pretargetingConfigs_addTargetedSites v1/{pretargetingConfig}:addTargetedSites
		/// </summary>
		/// <param name="pretargetingConfig">Required. The name of the pretargeting configuration. Format: bidders/{bidderAccountId}/pretargetingConfig/{configId}</param>
		/// <returns>Successful response</returns>
		public async Task<PretargetingConfig> Realtimebidding_bidders_pretargetingConfigs_addTargetedSitesAsync(string pretargetingConfig, AddTargetedSitesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (pretargetingConfig==null? "" : System.Uri.EscapeDataString(pretargetingConfig))+":addTargetedSites";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PretargetingConfig>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes targeted apps from the pretargeting configuration.
		/// Realtimebidding_bidders_pretargetingConfigs_removeTargetedApps v1/{pretargetingConfig}:removeTargetedApps
		/// </summary>
		/// <param name="pretargetingConfig">Required. The name of the pretargeting configuration. Format: bidders/{bidderAccountId}/pretargetingConfig/{configId}</param>
		/// <returns>Successful response</returns>
		public async Task<PretargetingConfig> Realtimebidding_bidders_pretargetingConfigs_removeTargetedAppsAsync(string pretargetingConfig, RemoveTargetedAppsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (pretargetingConfig==null? "" : System.Uri.EscapeDataString(pretargetingConfig))+":removeTargetedApps";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PretargetingConfig>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes targeted publishers from the pretargeting config.
		/// Realtimebidding_bidders_pretargetingConfigs_removeTargetedPublishers v1/{pretargetingConfig}:removeTargetedPublishers
		/// </summary>
		/// <param name="pretargetingConfig">Required. The name of the pretargeting configuration. Format: bidders/{bidderAccountId}/pretargetingConfig/{configId}</param>
		/// <returns>Successful response</returns>
		public async Task<PretargetingConfig> Realtimebidding_bidders_pretargetingConfigs_removeTargetedPublishersAsync(string pretargetingConfig, RemoveTargetedPublishersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (pretargetingConfig==null? "" : System.Uri.EscapeDataString(pretargetingConfig))+":removeTargetedPublishers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PretargetingConfig>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes targeted sites from the pretargeting configuration.
		/// Realtimebidding_bidders_pretargetingConfigs_removeTargetedSites v1/{pretargetingConfig}:removeTargetedSites
		/// </summary>
		/// <param name="pretargetingConfig">Required. The name of the pretargeting configuration. Format: bidders/{bidderAccountId}/pretargetingConfig/{configId}</param>
		/// <returns>Successful response</returns>
		public async Task<PretargetingConfig> Realtimebidding_bidders_pretargetingConfigs_removeTargetedSitesAsync(string pretargetingConfig, RemoveTargetedSitesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (pretargetingConfig==null? "" : System.Uri.EscapeDataString(pretargetingConfig))+":removeTargetedSites";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PretargetingConfig>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum Realtimebidding_buyers_userLists_getView
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_VIEW_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVING_DECISION_ONLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
