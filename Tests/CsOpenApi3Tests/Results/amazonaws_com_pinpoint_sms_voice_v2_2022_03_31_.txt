//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateOriginationIdentityResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PoolArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OriginationIdentityArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OriginationIdentity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IsoCountryCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateOriginationIdentityRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PoolId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OriginationIdentity { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IsoCountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateConfigurationSetResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
	}
	
	/// <summary>
	/// The list of tags to be added to the specified topic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tag
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateConfigurationSetRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateEventDestinationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventDestination EventDestination { get; set; }
	}
	
	/// <summary>
	/// <p>Contains information about an event destination.</p> <p>Event destinations are associated with configuration sets, which enable you to publish message sending events to Amazon CloudWatch, Amazon Kinesis Data Firehose, or Amazon SNS.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventDestination
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EventDestinationName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Enabled { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EventType[] MatchingEventTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchLogsDestination CloudWatchLogsDestination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KinesisFirehoseDestination KinesisFirehoseDestination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SnsDestination SnsDestination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALL")]
		ALL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TEXT_ALL")]
		TEXT_ALL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TEXT_SENT")]
		TEXT_SENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TEXT_PENDING")]
		TEXT_PENDING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TEXT_QUEUED")]
		TEXT_QUEUED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TEXT_SUCCESSFUL")]
		TEXT_SUCCESSFUL = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TEXT_DELIVERED")]
		TEXT_DELIVERED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TEXT_INVALID")]
		TEXT_INVALID = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TEXT_INVALID_MESSAGE")]
		TEXT_INVALID_MESSAGE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TEXT_UNREACHABLE")]
		TEXT_UNREACHABLE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TEXT_CARRIER_UNREACHABLE")]
		TEXT_CARRIER_UNREACHABLE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TEXT_BLOCKED")]
		TEXT_BLOCKED = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TEXT_CARRIER_BLOCKED")]
		TEXT_CARRIER_BLOCKED = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TEXT_SPAM")]
		TEXT_SPAM = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TEXT_UNKNOWN")]
		TEXT_UNKNOWN = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TEXT_TTL_EXPIRED")]
		TEXT_TTL_EXPIRED = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VOICE_ALL")]
		VOICE_ALL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VOICE_INITIATED")]
		VOICE_INITIATED = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VOICE_RINGING")]
		VOICE_RINGING = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VOICE_ANSWERED")]
		VOICE_ANSWERED = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VOICE_COMPLETED")]
		VOICE_COMPLETED = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VOICE_BUSY")]
		VOICE_BUSY = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VOICE_NO_ANSWER")]
		VOICE_NO_ANSWER = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VOICE_FAILED")]
		VOICE_FAILED = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VOICE_TTL_EXPIRED")]
		VOICE_TTL_EXPIRED = 24,
	}
	
	/// <summary>
	/// Contains the destination configuration to use when publishing message sending events. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CloudWatchLogsDestination
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IamRoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LogGroupArn { get; set; }
	}
	
	/// <summary>
	/// <p>Contains the delivery stream Amazon Resource Name (ARN), and the ARN of the Identity and Access Management (IAM) role associated with an Kinesis Data Firehose event destination.</p> <p>Event destinations, such as Kinesis Data Firehose, are associated with configuration sets, which enable you to publish message sending events.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KinesisFirehoseDestination
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IamRoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeliveryStreamArn { get; set; }
	}
	
	/// <summary>
	/// An object that defines an Amazon SNS destination for events. You can use Amazon SNS to send notification when certain events occur.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SnsDestination
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TopicArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateEventDestinationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EventDestinationName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EventType[] MatchingEventTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchLogsDestination CloudWatchLogsDestination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KinesisFirehoseDestination KinesisFirehoseDestination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SnsDestination SnsDestination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateOptOutListResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OptOutListArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptOutListName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateOptOutListRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OptOutListName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePoolResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PoolArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PoolStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MessageType MessageType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TwoWayEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TwoWayChannelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SelfManagedOptOutsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptOutListName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SharedRoutesEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeletionProtectionEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PoolStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATING")]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETING")]
		DELETING = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MessageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRANSACTIONAL")]
		TRANSACTIONAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROMOTIONAL")]
		PROMOTIONAL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePoolRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OriginationIdentity { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IsoCountryCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MessageType MessageType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeletionProtectionEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteConfigurationSetResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventDestination[] EventDestinations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MessageType DefaultMessageType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultSenderId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteConfigurationSetRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDefaultMessageTypeResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MessageType MessageType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDefaultMessageTypeRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDefaultSenderIdResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SenderId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDefaultSenderIdRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteEventDestinationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventDestination EventDestination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteEventDestinationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EventDestinationName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteKeywordResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OriginationIdentityArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OriginationIdentity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Keyword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KeywordMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KeywordAction KeywordAction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum KeywordAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTOMATIC_RESPONSE")]
		AUTOMATIC_RESPONSE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPT_OUT")]
		OPT_OUT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPT_IN")]
		OPT_IN = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteKeywordRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OriginationIdentity { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Keyword { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteOptOutListResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OptOutListArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptOutListName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteOptOutListRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OptOutListName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteOptedOutNumberResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OptOutListArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptOutListName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptedOutNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset OptedOutTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EndUserOptedOut { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteOptedOutNumberRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OptOutListName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OptedOutNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletePoolResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PoolArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PoolStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MessageType MessageType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TwoWayEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TwoWayChannelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SelfManagedOptOutsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptOutListName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SharedRoutesEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletePoolRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PoolId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteTextMessageSpendLimitOverrideResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MonthlyLimit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteTextMessageSpendLimitOverrideRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteVoiceMessageSpendLimitOverrideResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MonthlyLimit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteVoiceMessageSpendLimitOverrideRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAccountAttributesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AccountAttribute[] AccountAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Displays the attributes associated with a single Amazon Web Services account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountAttribute
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountAttributeName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AccountAttributeName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACCOUNT_TIER")]
		ACCOUNT_TIER = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAccountAttributesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAccountLimitsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AccountLimit[] AccountLimits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The current resource quotas associated with an Amazon Web Services account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountLimit
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountLimitName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Used { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Max { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AccountLimitName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PHONE_NUMBERS")]
		PHONE_NUMBERS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POOLS")]
		POOLS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONFIGURATION_SETS")]
		CONFIGURATION_SETS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPT_OUT_LISTS")]
		OPT_OUT_LISTS = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAccountLimitsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeConfigurationSetsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationSetInformation[] ConfigurationSets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Information related to a given configuration set in your Amazon Web Services account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigurationSetInformation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EventDestination[] EventDestinations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MessageType DefaultMessageType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultSenderId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeConfigurationSetsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ConfigurationSetNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationSetFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// The information for configuration sets that meet a specified criteria.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigurationSetFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationSetFilterName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConfigurationSetFilterName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="event-destination-name")]
		eventMinusdestinationMinusname = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="matching-event-types")]
		matchingMinuseventMinustypes = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default-message-type")]
		defaultMinusmessageMinustype = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default-sender-id")]
		defaultMinussenderMinusid = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeKeywordsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OriginationIdentityArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OriginationIdentity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KeywordInformation[] Keywords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The information for all keywords in a pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeywordInformation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Keyword { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string KeywordMessage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public KeywordAction KeywordAction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeKeywordsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OriginationIdentity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Keywords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KeywordFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// The information for keywords that meet a specified criteria.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeywordFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public KeywordFilterName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum KeywordFilterName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="keyword-action")]
		keywordMinusaction = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeOptOutListsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OptOutListInformation[] OptOutLists { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The information for all OptOutList in an Amazon Web Services account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OptOutListInformation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OptOutListArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OptOutListName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeOptOutListsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] OptOutListNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeOptedOutNumbersResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OptOutListArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptOutListName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OptedOutNumberInformation[] OptedOutNumbers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The information for an opted out number in an Amazon Web Services account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OptedOutNumberInformation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OptedOutNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset OptedOutTimestamp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool EndUserOptedOut { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeOptedOutNumbersRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OptOutListName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] OptedOutNumbers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OptedOutFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// The information for opted out numbers that meet a specified criteria.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OptedOutFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OptedOutFilterName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OptedOutFilterName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="end-user-opted-out")]
		endMinususerMinusoptedMinusout = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribePhoneNumbersResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberInformation[] PhoneNumbers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The information for a phone number in an Amazon Web Services account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhoneNumberInformation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumberArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumberId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NumberStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IsoCountryCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MessageType MessageType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NumberCapability[] NumberCapabilities { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NumberType NumberType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MonthlyLeasingPrice { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool TwoWayEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TwoWayChannelArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool SelfManagedOptOutsEnabled { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OptOutListName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool DeletionProtectionEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PoolId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NumberStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ASSOCIATING")]
		ASSOCIATING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISASSOCIATING")]
		DISASSOCIATING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETED")]
		DELETED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NumberCapability
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SMS")]
		SMS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VOICE")]
		VOICE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NumberType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SHORT_CODE")]
		SHORT_CODE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LONG_CODE")]
		LONG_CODE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TOLL_FREE")]
		TOLL_FREE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TEN_DLC")]
		TEN_DLC = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribePhoneNumbersRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PhoneNumberIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// The information for a phone number that meets a specified criteria.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhoneNumberFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberFilterName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PhoneNumberFilterName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="status")]
		status = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="iso-country-code")]
		isoMinuscountryMinuscode = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="message-type")]
		messageMinustype = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="number-capability")]
		numberMinuscapability = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="number-type")]
		numberMinustype = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="two-way-enabled")]
		twoMinuswayMinusenabled = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="self-managed-opt-outs-enabled")]
		selfMinusmanagedMinusoptMinusoutsMinusenabled = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="opt-out-list-name")]
		optMinusoutMinuslistMinusname = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deletion-protection-enabled")]
		deletionMinusprotectionMinusenabled = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribePoolsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PoolInformation[] Pools { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The information for a pool in an Amazon Web Services account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PoolInformation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PoolArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PoolId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PoolStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MessageType MessageType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool TwoWayEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TwoWayChannelArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool SelfManagedOptOutsEnabled { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OptOutListName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool SharedRoutesEnabled { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool DeletionProtectionEnabled { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribePoolsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PoolIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PoolFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// The information for a pool that meets a specified criteria.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PoolFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PoolFilterName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PoolFilterName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="status")]
		status = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="message-type")]
		messageMinustype = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="two-way-enabled")]
		twoMinuswayMinusenabled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="self-managed-opt-outs-enabled")]
		selfMinusmanagedMinusoptMinusoutsMinusenabled = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="opt-out-list-name")]
		optMinusoutMinuslistMinusname = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="shared-routes-enabled")]
		sharedMinusroutesMinusenabled = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deletion-protection-enabled")]
		deletionMinusprotectionMinusenabled = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeSenderIdsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SenderIdInformation[] SenderIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The information for all SenderIds in an Amazon Web Services account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SenderIdInformation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SenderIdArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SenderId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IsoCountryCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MessageType[] MessageTypes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MonthlyLeasingPrice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeSenderIdsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SenderIdAndCountry[] SenderIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SenderIdFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	///  The alphanumeric sender ID in a specific country that you want to describe. For more information on sender IDs see <a href="https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-sms-awssupport-sender-id.html">Requesting sender IDs for SMS messaging with Amazon Pinpoint </a> in the <i>Amazon Pinpoint User Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SenderIdAndCountry
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SenderId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IsoCountryCode { get; set; }
	}
	
	/// <summary>
	/// The information for a sender ID that meets a specified criteria.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SenderIdFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SenderIdFilterName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SenderIdFilterName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sender-id")]
		senderMinusid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="iso-country-code")]
		isoMinuscountryMinuscode = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="message-type")]
		messageMinustype = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeSpendLimitsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SpendLimit[] SpendLimits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes the current Amazon Pinpoint monthly spend limits for sending voice and text messages. For more information on increasing your monthly spend limit, see <a href="https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-sms-awssupport-spend-threshold.html"> Requesting increases to your monthly SMS spending quota for Amazon Pinpoint </a> in the <i>Amazon Pinpoint User Guide</i>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SpendLimit
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SpendLimitName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int EnforcedLimit { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MaxLimit { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Overridden { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SpendLimitName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TEXT_MESSAGE_MONTHLY_SPEND_LIMIT")]
		TEXT_MESSAGE_MONTHLY_SPEND_LIMIT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VOICE_MESSAGE_MONTHLY_SPEND_LIMIT")]
		VOICE_MESSAGE_MONTHLY_SPEND_LIMIT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeSpendLimitsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateOriginationIdentityResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PoolArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OriginationIdentityArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OriginationIdentity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IsoCountryCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateOriginationIdentityRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PoolId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OriginationIdentity { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IsoCountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPoolOriginationIdentitiesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PoolArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OriginationIdentityMetadata[] OriginationIdentities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The metadata for an origination identity associated with a pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OriginationIdentityMetadata
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OriginationIdentityArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OriginationIdentity { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IsoCountryCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NumberCapability[] NumberCapabilities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPoolOriginationIdentitiesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PoolOriginationIdentitiesFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// Information about origination identities associated with a pool that meets a specified criteria.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PoolOriginationIdentitiesFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PoolOriginationIdentitiesFilterName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PoolOriginationIdentitiesFilterName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="iso-country-code")]
		isoMinuscountryMinuscode = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="number-capability")]
		numberMinuscapability = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutKeywordResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OriginationIdentityArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OriginationIdentity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Keyword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KeywordMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KeywordAction KeywordAction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutKeywordRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OriginationIdentity { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Keyword { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string KeywordMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KeywordAction KeywordAction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutOptedOutNumberResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OptOutListArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptOutListName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptedOutNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset OptedOutTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EndUserOptedOut { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutOptedOutNumberRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OptOutListName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OptedOutNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReleasePhoneNumberResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumberArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumberId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NumberStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IsoCountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MessageType MessageType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NumberCapability[] NumberCapabilities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NumberType NumberType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MonthlyLeasingPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TwoWayEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TwoWayChannelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SelfManagedOptOutsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptOutListName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReleasePhoneNumberRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumberId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RequestPhoneNumberResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumberArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumberId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NumberStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IsoCountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MessageType MessageType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NumberCapability[] NumberCapabilities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RequestableNumberType NumberType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MonthlyLeasingPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TwoWayEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TwoWayChannelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SelfManagedOptOutsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptOutListName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeletionProtectionEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RequestableNumberType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LONG_CODE")]
		LONG_CODE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TOLL_FREE")]
		TOLL_FREE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TEN_DLC")]
		TEN_DLC = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RequestPhoneNumberRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IsoCountryCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MessageType MessageType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NumberCapability[] NumberCapabilities { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RequestableNumberType NumberType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptOutListName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RegistrationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeletionProtectionEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SendTextMessageResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MessageId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SendTextMessageRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationPhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OriginationIdentity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MessageBody { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MessageType MessageType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Keyword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaxPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimeToLive { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContextMap Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DestinationCountryParameters DestinationCountryParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContextMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinationCountryParameters
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SendVoiceMessageResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MessageId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SendVoiceMessageRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationPhoneNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OriginationIdentity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MessageBody { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceMessageBodyTextType MessageBodyTextType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceId VoiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaxPricePerMinute { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimeToLive { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContextMap Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VoiceMessageBodyTextType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TEXT")]
		TEXT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SSML")]
		SSML = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VoiceId
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AMY")]
		AMY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ASTRID")]
		ASTRID = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BIANCA")]
		BIANCA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BRIAN")]
		BRIAN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CAMILA")]
		CAMILA = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CARLA")]
		CARLA = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CARMEN")]
		CARMEN = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CELINE")]
		CELINE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHANTAL")]
		CHANTAL = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONCHITA")]
		CONCHITA = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CRISTIANO")]
		CRISTIANO = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DORA")]
		DORA = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EMMA")]
		EMMA = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENRIQUE")]
		ENRIQUE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EWA")]
		EWA = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FILIZ")]
		FILIZ = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GERAINT")]
		GERAINT = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GIORGIO")]
		GIORGIO = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GWYNETH")]
		GWYNETH = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HANS")]
		HANS = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INES")]
		INES = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IVY")]
		IVY = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JACEK")]
		JACEK = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JAN")]
		JAN = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JOANNA")]
		JOANNA = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JOEY")]
		JOEY = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JUSTIN")]
		JUSTIN = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KARL")]
		KARL = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KENDRA")]
		KENDRA = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KIMBERLY")]
		KIMBERLY = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LEA")]
		LEA = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LIV")]
		LIV = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOTTE")]
		LOTTE = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LUCIA")]
		LUCIA = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LUPE")]
		LUPE = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MADS")]
		MADS = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MAJA")]
		MAJA = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MARLENE")]
		MARLENE = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MATHIEU")]
		MATHIEU = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MATTHEW")]
		MATTHEW = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MAXIM")]
		MAXIM = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MIA")]
		MIA = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MIGUEL")]
		MIGUEL = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MIZUKI")]
		MIZUKI = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NAJA")]
		NAJA = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NICOLE")]
		NICOLE = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENELOPE")]
		PENELOPE = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RAVEENA")]
		RAVEENA = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RICARDO")]
		RICARDO = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RUBEN")]
		RUBEN = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RUSSELL")]
		RUSSELL = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SALLI")]
		SALLI = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SEOYEON")]
		SEOYEON = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TAKUMI")]
		TAKUMI = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TATYANA")]
		TATYANA = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VICKI")]
		VICKI = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VITORIA")]
		VITORIA = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ZEINA")]
		ZEINA = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ZHIYU")]
		ZHIYU = 58,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetDefaultMessageTypeResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MessageType MessageType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetDefaultMessageTypeRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MessageType MessageType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetDefaultSenderIdResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SenderId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetDefaultSenderIdRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SenderId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetTextMessageSpendLimitOverrideResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MonthlyLimit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetTextMessageSpendLimitOverrideRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MonthlyLimit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetVoiceMessageSpendLimitOverrideResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MonthlyLimit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetVoiceMessageSpendLimitOverrideRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MonthlyLimit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceResult
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceResult
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateEventDestinationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventDestination EventDestination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateEventDestinationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EventDestinationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventType[] MatchingEventTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchLogsDestination CloudWatchLogsDestination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KinesisFirehoseDestination KinesisFirehoseDestination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SnsDestination SnsDestination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePhoneNumberResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumberArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumberId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NumberStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IsoCountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MessageType MessageType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NumberCapability[] NumberCapabilities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NumberType NumberType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MonthlyLeasingPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TwoWayEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TwoWayChannelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SelfManagedOptOutsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptOutListName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeletionProtectionEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePhoneNumberRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumberId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TwoWayEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TwoWayChannelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SelfManagedOptOutsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptOutListName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeletionProtectionEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePoolResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PoolArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PoolStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MessageType MessageType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TwoWayEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TwoWayChannelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SelfManagedOptOutsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptOutListName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SharedRoutesEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeletionProtectionEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePoolRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TwoWayEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TwoWayChannelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SelfManagedOptOutsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptOutListName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SharedRoutesEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeletionProtectionEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinationCountryParameterKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_TEMPLATE_ID")]
		IN_TEMPLATE_ID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_ENTITY_ID")]
		IN_ENTITY_ID = 1,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Associates the specified origination identity with a pool.</p> <p>If the origination identity is a phone number and is already associated with another pool, an Error is returned. A sender ID can be associated with multiple pools.</p> <p>If the origination identity configuration doesn't match the pool's configuration, an Error is returned.</p>
		/// AssociateOriginationIdentity #X-Amz-Target=PinpointSMSVoiceV2.AssociateOriginationIdentity
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AssociateOriginationIdentityResult> AssociateOriginationIdentityAsync(AssociateOriginationIdentityRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.AssociateOriginationIdentity";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociateOriginationIdentityResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new configuration set. After you create the configuration set, you can add one or more event destinations to it.</p> <p>A configuration set is a set of rules that you apply to the SMS and voice messages that you send.</p> <p>When you send a message, you can optionally specify a single configuration set.</p>
		/// CreateConfigurationSet #X-Amz-Target=PinpointSMSVoiceV2.CreateConfigurationSet
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateConfigurationSetResult> CreateConfigurationSetAsync(CreateConfigurationSetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.CreateConfigurationSet";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateConfigurationSetResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new event destination in a configuration set.</p> <p>An event destination is a location where you send message events. The event options are Amazon CloudWatch, Amazon Kinesis Data Firehose, or Amazon SNS. For example, when a message is delivered successfully, you can send information about that event to an event destination, or send notifications to endpoints that are subscribed to an Amazon SNS topic.</p> <p>Each configuration set can contain between 0 and 5 event destinations. Each event destination can contain a reference to a single destination, such as a CloudWatch or Kinesis Data Firehose destination.</p>
		/// CreateEventDestination #X-Amz-Target=PinpointSMSVoiceV2.CreateEventDestination
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateEventDestinationResult> CreateEventDestinationAsync(CreateEventDestinationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.CreateEventDestination";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateEventDestinationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new opt-out list.</p> <p>If the opt-out list name already exists, an Error is returned.</p> <p>An opt-out list is a list of phone numbers that are opted out, meaning you can't send SMS or voice messages to them. If end user replies with the keyword "STOP," an entry for the phone number is added to the opt-out list. In addition to STOP, your recipients can use any supported opt-out keyword, such as CANCEL or OPTOUT. For a list of supported opt-out keywords, see <a href="https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-sms-manage.html#channels-sms-manage-optout"> SMS opt out </a> in the <i>Amazon Pinpoint User Guide</i>.</p>
		/// CreateOptOutList #X-Amz-Target=PinpointSMSVoiceV2.CreateOptOutList
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateOptOutListResult> CreateOptOutListAsync(CreateOptOutListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.CreateOptOutList";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateOptOutListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new pool and associates the specified origination identity to the pool. A pool can include one or more phone numbers and SenderIds that are associated with your Amazon Web Services account.</p> <p>The new pool inherits its configuration from the specified origination identity. This includes keywords, message type, opt-out list, two-way configuration, and self-managed opt-out configuration. Deletion protection isn't inherited from the origination identity and defaults to false.</p> <p>If the origination identity is a phone number and is already associated with another pool, an Error is returned. A sender ID can be associated with multiple pools.</p>
		/// CreatePool #X-Amz-Target=PinpointSMSVoiceV2.CreatePool
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreatePoolResult> CreatePoolAsync(CreatePoolRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.CreatePool";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreatePoolResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an existing configuration set.</p> <p>A configuration set is a set of rules that you apply to voice and SMS messages that you send. In a configuration set, you can specify a destination for specific types of events related to voice and SMS messages. </p>
		/// DeleteConfigurationSet #X-Amz-Target=PinpointSMSVoiceV2.DeleteConfigurationSet
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteConfigurationSetResult> DeleteConfigurationSetAsync(DeleteConfigurationSetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.DeleteConfigurationSet";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteConfigurationSetResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an existing default message type on a configuration set.</p> <p> A message type is a type of messages that you plan to send. If you send account-related messages or time-sensitive messages such as one-time passcodes, choose <b>Transactional</b>. If you plan to send messages that contain marketing material or other promotional content, choose <b>Promotional</b>. This setting applies to your entire Amazon Web Services account. </p>
		/// DeleteDefaultMessageType #X-Amz-Target=PinpointSMSVoiceV2.DeleteDefaultMessageType
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteDefaultMessageTypeResult> DeleteDefaultMessageTypeAsync(DeleteDefaultMessageTypeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.DeleteDefaultMessageType";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteDefaultMessageTypeResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an existing default sender ID on a configuration set.</p> <p>A default sender ID is the identity that appears on recipients' devices when they receive SMS messages. Support for sender ID capabilities varies by country or region.</p>
		/// DeleteDefaultSenderId #X-Amz-Target=PinpointSMSVoiceV2.DeleteDefaultSenderId
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteDefaultSenderIdResult> DeleteDefaultSenderIdAsync(DeleteDefaultSenderIdRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.DeleteDefaultSenderId";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteDefaultSenderIdResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an existing event destination.</p> <p>An event destination is a location where you send response information about the messages that you send. For example, when a message is delivered successfully, you can send information about that event to an Amazon CloudWatch destination, or send notifications to endpoints that are subscribed to an Amazon SNS topic.</p>
		/// DeleteEventDestination #X-Amz-Target=PinpointSMSVoiceV2.DeleteEventDestination
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteEventDestinationResult> DeleteEventDestinationAsync(DeleteEventDestinationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.DeleteEventDestination";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteEventDestinationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an existing keyword from an origination phone number or pool.</p> <p>A keyword is a word that you can search for on a particular phone number or pool. It is also a specific word or phrase that an end user can send to your number to elicit a response, such as an informational message or a special offer. When your number receives a message that begins with a keyword, Amazon Pinpoint responds with a customizable message.</p> <p>Keywords "HELP" and "STOP" can't be deleted or modified.</p>
		/// DeleteKeyword #X-Amz-Target=PinpointSMSVoiceV2.DeleteKeyword
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteKeywordResult> DeleteKeywordAsync(DeleteKeywordRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.DeleteKeyword";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteKeywordResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an existing opt-out list. All opted out phone numbers in the opt-out list are deleted.</p> <p>If the specified opt-out list name doesn't exist or is in-use by an origination phone number or pool, an Error is returned.</p>
		/// DeleteOptOutList #X-Amz-Target=PinpointSMSVoiceV2.DeleteOptOutList
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteOptOutListResult> DeleteOptOutListAsync(DeleteOptOutListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.DeleteOptOutList";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteOptOutListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an existing opted out destination phone number from the specified opt-out list.</p> <p>Each destination phone number can only be deleted once every 30 days.</p> <p>If the specified destination phone number doesn't exist or if the opt-out list doesn't exist, an Error is returned.</p>
		/// DeleteOptedOutNumber #X-Amz-Target=PinpointSMSVoiceV2.DeleteOptedOutNumber
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteOptedOutNumberResult> DeleteOptedOutNumberAsync(DeleteOptedOutNumberRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.DeleteOptedOutNumber";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteOptedOutNumberResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an existing pool. Deleting a pool disassociates all origination identities from that pool.</p> <p>If the pool status isn't active or if deletion protection is enabled, an Error is returned.</p> <p>A pool is a collection of phone numbers and SenderIds. A pool can include one or more phone numbers and SenderIds that are associated with your Amazon Web Services account.</p>
		/// DeletePool #X-Amz-Target=PinpointSMSVoiceV2.DeletePool
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeletePoolResult> DeletePoolAsync(DeletePoolRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.DeletePool";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeletePoolResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an account-level monthly spending limit override for sending text messages. Deleting a spend limit override will set the <code>EnforcedLimit</code> to equal the <code>MaxLimit</code>, which is controlled by Amazon Web Services. For more information on spend limits (quotas) see <a href="https://docs.aws.amazon.com/pinpoint/latest/developerguide/quotas.html">Amazon Pinpoint quotas </a> in the <i>Amazon Pinpoint Developer Guide</i>.
		/// DeleteTextMessageSpendLimitOverride #X-Amz-Target=PinpointSMSVoiceV2.DeleteTextMessageSpendLimitOverride
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteTextMessageSpendLimitOverrideResult> DeleteTextMessageSpendLimitOverrideAsync(DeleteTextMessageSpendLimitOverrideRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.DeleteTextMessageSpendLimitOverride";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteTextMessageSpendLimitOverrideResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an account level monthly spend limit override for sending voice messages. Deleting a spend limit override sets the <code>EnforcedLimit</code> equal to the <code>MaxLimit</code>, which is controlled by Amazon Web Services. For more information on spending limits (quotas) see <a href="https://docs.aws.amazon.com/pinpoint/latest/developerguide/quotas.html">Amazon Pinpoint quotas</a> in the <i>Amazon Pinpoint Developer Guide</i>.
		/// DeleteVoiceMessageSpendLimitOverride #X-Amz-Target=PinpointSMSVoiceV2.DeleteVoiceMessageSpendLimitOverride
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteVoiceMessageSpendLimitOverrideResult> DeleteVoiceMessageSpendLimitOverrideAsync(DeleteVoiceMessageSpendLimitOverrideRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.DeleteVoiceMessageSpendLimitOverride";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteVoiceMessageSpendLimitOverrideResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Describes attributes of your Amazon Web Services account. The supported account attributes include account tier, which indicates whether your account is in the sandbox or production environment. When you're ready to move your account out of the sandbox, create an Amazon Web Services Support case for a service limit increase request.</p> <p>New Amazon Pinpoint accounts are placed into an SMS or voice sandbox. The sandbox protects both Amazon Web Services end recipients and SMS or voice recipients from fraud and abuse. </p>
		/// DescribeAccountAttributes #X-Amz-Target=PinpointSMSVoiceV2.DescribeAccountAttributes
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeAccountAttributesResult> DescribeAccountAttributesAsync(string MaxResults, string NextToken, DescribeAccountAttributesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.DescribeAccountAttributes?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeAccountAttributesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the current Amazon Pinpoint SMS Voice V2 resource quotas for your account. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>When you establish an Amazon Web Services account, the account has initial quotas on the maximum number of configuration sets, opt-out lists, phone numbers, and pools that you can create in a given Region. For more information see <a href="https://docs.aws.amazon.com/pinpoint/latest/developerguide/quotas.html"> Amazon Pinpoint quotas </a> in the <i>Amazon Pinpoint Developer Guide</i>.</p>
		/// DescribeAccountLimits #X-Amz-Target=PinpointSMSVoiceV2.DescribeAccountLimits
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeAccountLimitsResult> DescribeAccountLimitsAsync(string MaxResults, string NextToken, DescribeAccountLimitsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.DescribeAccountLimits?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeAccountLimitsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified configuration sets or all in your account.</p> <p>If you specify configuration set names, the output includes information for only the specified configuration sets. If you specify filters, the output includes information for only those configuration sets that meet the filter criteria. If you don't specify configuration set names or filters, the output includes information for all configuration sets.</p> <p>If you specify a configuration set name that isn't valid, an error is returned.</p>
		/// DescribeConfigurationSets #X-Amz-Target=PinpointSMSVoiceV2.DescribeConfigurationSets
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeConfigurationSetsResult> DescribeConfigurationSetsAsync(string MaxResults, string NextToken, DescribeConfigurationSetsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.DescribeConfigurationSets?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeConfigurationSetsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified keywords or all keywords on your origination phone number or pool.</p> <p>A keyword is a word that you can search for on a particular phone number or pool. It is also a specific word or phrase that an end user can send to your number to elicit a response, such as an informational message or a special offer. When your number receives a message that begins with a keyword, Amazon Pinpoint responds with a customizable message.</p> <p>If you specify a keyword that isn't valid, an Error is returned.</p>
		/// DescribeKeywords #X-Amz-Target=PinpointSMSVoiceV2.DescribeKeywords
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeKeywordsResult> DescribeKeywordsAsync(string MaxResults, string NextToken, DescribeKeywordsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.DescribeKeywords?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeKeywordsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified opt-out list or all opt-out lists in your account.</p> <p>If you specify opt-out list names, the output includes information for only the specified opt-out lists. Opt-out lists include only those that meet the filter criteria. If you don't specify opt-out list names or filters, the output includes information for all opt-out lists.</p> <p>If you specify an opt-out list name that isn't valid, an Error is returned.</p>
		/// DescribeOptOutLists #X-Amz-Target=PinpointSMSVoiceV2.DescribeOptOutLists
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeOptOutListsResult> DescribeOptOutListsAsync(string MaxResults, string NextToken, DescribeOptOutListsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.DescribeOptOutLists?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeOptOutListsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified opted out destination numbers or all opted out destination numbers in an opt-out list.</p> <p>If you specify opted out numbers, the output includes information for only the specified opted out numbers. If you specify filters, the output includes information for only those opted out numbers that meet the filter criteria. If you don't specify opted out numbers or filters, the output includes information for all opted out destination numbers in your opt-out list.</p> <p>If you specify an opted out number that isn't valid, an Error is returned.</p>
		/// DescribeOptedOutNumbers #X-Amz-Target=PinpointSMSVoiceV2.DescribeOptedOutNumbers
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeOptedOutNumbersResult> DescribeOptedOutNumbersAsync(string MaxResults, string NextToken, DescribeOptedOutNumbersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.DescribeOptedOutNumbers?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeOptedOutNumbersResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified origination phone number, or all the phone numbers in your account.</p> <p>If you specify phone number IDs, the output includes information for only the specified phone numbers. If you specify filters, the output includes information for only those phone numbers that meet the filter criteria. If you don't specify phone number IDs or filters, the output includes information for all phone numbers.</p> <p>If you specify a phone number ID that isn't valid, an Error is returned.</p>
		/// DescribePhoneNumbers #X-Amz-Target=PinpointSMSVoiceV2.DescribePhoneNumbers
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribePhoneNumbersResult> DescribePhoneNumbersAsync(string MaxResults, string NextToken, DescribePhoneNumbersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.DescribePhoneNumbers?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribePhoneNumbersResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves the specified pools or all pools associated with your Amazon Web Services account.</p> <p>If you specify pool IDs, the output includes information for only the specified pools. If you specify filters, the output includes information for only those pools that meet the filter criteria. If you don't specify pool IDs or filters, the output includes information for all pools.</p> <p>If you specify a pool ID that isn't valid, an Error is returned.</p> <p>A pool is a collection of phone numbers and SenderIds. A pool can include one or more phone numbers and SenderIds that are associated with your Amazon Web Services account.</p>
		/// DescribePools #X-Amz-Target=PinpointSMSVoiceV2.DescribePools
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribePoolsResult> DescribePoolsAsync(string MaxResults, string NextToken, DescribePoolsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.DescribePools?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribePoolsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified SenderIds or all SenderIds associated with your Amazon Web Services account.</p> <p>If you specify SenderIds, the output includes information for only the specified SenderIds. If you specify filters, the output includes information for only those SenderIds that meet the filter criteria. If you don't specify SenderIds or filters, the output includes information for all SenderIds.</p> <p>f you specify a sender ID that isn't valid, an Error is returned.</p>
		/// DescribeSenderIds #X-Amz-Target=PinpointSMSVoiceV2.DescribeSenderIds
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeSenderIdsResult> DescribeSenderIdsAsync(string MaxResults, string NextToken, DescribeSenderIdsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.DescribeSenderIds?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeSenderIdsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the current Amazon Pinpoint monthly spend limits for sending voice and text messages.</p> <p>When you establish an Amazon Web Services account, the account has initial monthly spend limit in a given Region. For more information on increasing your monthly spend limit, see <a href="https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-sms-awssupport-spend-threshold.html"> Requesting increases to your monthly SMS spending quota for Amazon Pinpoint </a> in the <i>Amazon Pinpoint User Guide</i>.</p>
		/// DescribeSpendLimits #X-Amz-Target=PinpointSMSVoiceV2.DescribeSpendLimits
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeSpendLimitsResult> DescribeSpendLimitsAsync(string MaxResults, string NextToken, DescribeSpendLimitsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.DescribeSpendLimits?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeSpendLimitsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Removes the specified origination identity from an existing pool.</p> <p>If the origination identity isn't associated with the specified pool, an Error is returned.</p>
		/// DisassociateOriginationIdentity #X-Amz-Target=PinpointSMSVoiceV2.DisassociateOriginationIdentity
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisassociateOriginationIdentityResult> DisassociateOriginationIdentityAsync(DisassociateOriginationIdentityRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.DisassociateOriginationIdentity";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DisassociateOriginationIdentityResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists all associated origination identities in your pool.</p> <p>If you specify filters, the output includes information for only those origination identities that meet the filter criteria.</p>
		/// ListPoolOriginationIdentities #X-Amz-Target=PinpointSMSVoiceV2.ListPoolOriginationIdentities
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPoolOriginationIdentitiesResult> ListPoolOriginationIdentitiesAsync(string MaxResults, string NextToken, ListPoolOriginationIdentitiesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.ListPoolOriginationIdentities?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPoolOriginationIdentitiesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all tags associated with a resource.
		/// ListTagsForResource #X-Amz-Target=PinpointSMSVoiceV2.ListTagsForResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResult> ListTagsForResourceAsync(ListTagsForResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.ListTagsForResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates or updates a keyword configuration on an origination phone number or pool.</p> <p> A keyword is a word that you can search for on a particular phone number or pool. It is also a specific word or phrase that an end user can send to your number to elicit a response, such as an informational message or a special offer. When your number receives a message that begins with a keyword, Amazon Pinpoint responds with a customizable message.</p> <p>If you specify a keyword that isn't valid, an Error is returned.</p>
		/// PutKeyword #X-Amz-Target=PinpointSMSVoiceV2.PutKeyword
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutKeywordResult> PutKeywordAsync(PutKeywordRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.PutKeyword";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutKeywordResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an opted out destination phone number in the opt-out list.</p> <p>If the destination phone number isn't valid or if the specified opt-out list doesn't exist, an Error is returned.</p>
		/// PutOptedOutNumber #X-Amz-Target=PinpointSMSVoiceV2.PutOptedOutNumber
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutOptedOutNumberResult> PutOptedOutNumberAsync(PutOptedOutNumberRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.PutOptedOutNumber";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutOptedOutNumberResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Releases an existing origination phone number in your account. Once released, a phone number is no longer available for sending messages.</p> <p>If the origination phone number has deletion protection enabled or is associated with a pool, an Error is returned.</p>
		/// ReleasePhoneNumber #X-Amz-Target=PinpointSMSVoiceV2.ReleasePhoneNumber
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ReleasePhoneNumberResult> ReleasePhoneNumberAsync(ReleasePhoneNumberRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.ReleasePhoneNumber";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReleasePhoneNumberResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Request an origination phone number for use in your account. For more information on phone number request see <a href="https://docs.aws.amazon.com/pinpoint/latest/userguide/settings-sms-request-number.html"> Requesting a number </a> in the <i>Amazon Pinpoint User Guide</i>.
		/// RequestPhoneNumber #X-Amz-Target=PinpointSMSVoiceV2.RequestPhoneNumber
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RequestPhoneNumberResult> RequestPhoneNumberAsync(RequestPhoneNumberRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.RequestPhoneNumber";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RequestPhoneNumberResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new text message and sends it to a recipient's phone number.</p> <p>SMS throughput limits are measured in Message Parts per Second (MPS). Your MPS limit depends on the destination country of your messages, as well as the type of phone number (origination number) that you use to send the message. For more information, see <a href="https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-sms-limitations-mps.html">Message Parts per Second (MPS) limits</a> in the <i>Amazon Pinpoint User Guide</i>.</p>
		/// SendTextMessage #X-Amz-Target=PinpointSMSVoiceV2.SendTextMessage
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SendTextMessageResult> SendTextMessageAsync(SendTextMessageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.SendTextMessage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SendTextMessageResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to send a request that sends a text message through Amazon Pinpoint. This operation uses <a href="http://aws.amazon.com/polly/">Amazon Polly</a> to convert a text script into a voice message.
		/// SendVoiceMessage #X-Amz-Target=PinpointSMSVoiceV2.SendVoiceMessage
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SendVoiceMessageResult> SendVoiceMessageAsync(SendVoiceMessageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.SendVoiceMessage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SendVoiceMessageResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Sets the default message type on a configuration set.</p> <p>Choose the category of SMS messages that you plan to send from this account. If you send account-related messages or time-sensitive messages such as one-time passcodes, choose <b>Transactional</b>. If you plan to send messages that contain marketing material or other promotional content, choose <b>Promotional</b>. This setting applies to your entire Amazon Web Services account.</p>
		/// SetDefaultMessageType #X-Amz-Target=PinpointSMSVoiceV2.SetDefaultMessageType
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SetDefaultMessageTypeResult> SetDefaultMessageTypeAsync(SetDefaultMessageTypeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.SetDefaultMessageType";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SetDefaultMessageTypeResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Sets default sender ID on a configuration set.</p> <p>When sending a text message to a destination country that supports sender IDs, the default sender ID on the configuration set specified will be used if no dedicated origination phone numbers or registered sender IDs are available in your account.</p>
		/// SetDefaultSenderId #X-Amz-Target=PinpointSMSVoiceV2.SetDefaultSenderId
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SetDefaultSenderIdResult> SetDefaultSenderIdAsync(SetDefaultSenderIdRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.SetDefaultSenderId";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SetDefaultSenderIdResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sets an account level monthly spend limit override for sending text messages. The requested spend limit must be less than or equal to the <code>MaxLimit</code>, which is set by Amazon Web Services.
		/// SetTextMessageSpendLimitOverride #X-Amz-Target=PinpointSMSVoiceV2.SetTextMessageSpendLimitOverride
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SetTextMessageSpendLimitOverrideResult> SetTextMessageSpendLimitOverrideAsync(SetTextMessageSpendLimitOverrideRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.SetTextMessageSpendLimitOverride";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SetTextMessageSpendLimitOverrideResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sets an account level monthly spend limit override for sending voice messages. The requested spend limit must be less than or equal to the <code>MaxLimit</code>, which is set by Amazon Web Services.
		/// SetVoiceMessageSpendLimitOverride #X-Amz-Target=PinpointSMSVoiceV2.SetVoiceMessageSpendLimitOverride
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SetVoiceMessageSpendLimitOverrideResult> SetVoiceMessageSpendLimitOverrideAsync(SetVoiceMessageSpendLimitOverrideRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.SetVoiceMessageSpendLimitOverride";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SetVoiceMessageSpendLimitOverrideResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds or overwrites only the specified tags for the specified Amazon Pinpoint SMS Voice, version 2 resource. When you specify an existing tag key, the value is overwritten with the new value. Each resource can have a maximum of 50 tags. Each tag consists of a key and an optional value. Tag keys must be unique per resource. For more information about tags, see <a href="https://docs.aws.amazon.com/pinpoint/latest/developerguide/tagging-resources.html"> Tagging Amazon Pinpoint resources</a> in the <i>Amazon Pinpoint Developer Guide</i>.
		/// TagResource #X-Amz-Target=PinpointSMSVoiceV2.TagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TagResourceResult> TagResourceAsync(TagResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.TagResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagResourceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes the association of the specified tags from an Amazon Pinpoint SMS Voice V2 resource. For more information on tags see <a href="https://docs.aws.amazon.com/pinpoint/latest/developerguide/tagging-resources.html"> Tagging Amazon Pinpoint resources</a> in the <i>Amazon Pinpoint Developer Guide</i>.
		/// UntagResource #X-Amz-Target=PinpointSMSVoiceV2.UntagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UntagResourceResult> UntagResourceAsync(UntagResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.UntagResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UntagResourceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates an existing event destination in a configuration set. You can update the IAM role ARN for CloudWatch Logs and Kinesis Data Firehose. You can also enable or disable the event destination.</p> <p>You may want to update an event destination to change its matching event types or updating the destination resource ARN. You can't change an event destination's type between CloudWatch Logs, Kinesis Data Firehose, and Amazon SNS.</p>
		/// UpdateEventDestination #X-Amz-Target=PinpointSMSVoiceV2.UpdateEventDestination
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateEventDestinationResult> UpdateEventDestinationAsync(UpdateEventDestinationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.UpdateEventDestination";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateEventDestinationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the configuration of an existing origination phone number. You can update the opt-out list, enable or disable two-way messaging, change the TwoWayChannelArn, enable or disable self-managed opt-outs, and enable or disable deletion protection.</p> <p>If the origination phone number is associated with a pool, an Error is returned.</p>
		/// UpdatePhoneNumber #X-Amz-Target=PinpointSMSVoiceV2.UpdatePhoneNumber
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdatePhoneNumberResult> UpdatePhoneNumberAsync(UpdatePhoneNumberRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.UpdatePhoneNumber";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdatePhoneNumberResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the configuration of an existing pool. You can update the opt-out list, enable or disable two-way messaging, change the <code>TwoWayChannelArn</code>, enable or disable self-managed opt-outs, enable or disable deletion protection, and enable or disable shared routes.
		/// UpdatePool #X-Amz-Target=PinpointSMSVoiceV2.UpdatePool
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdatePoolResult> UpdatePoolAsync(UpdatePoolRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=PinpointSMSVoiceV2.UpdatePool";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdatePoolResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum AssociateOriginationIdentityX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.AssociateOriginationIdentity")]
		PinpointSMSVoiceV2_AssociateOriginationIdentity = 0,
	}
	
	public enum CreateConfigurationSetX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.CreateConfigurationSet")]
		PinpointSMSVoiceV2_CreateConfigurationSet = 0,
	}
	
	public enum CreateEventDestinationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.CreateEventDestination")]
		PinpointSMSVoiceV2_CreateEventDestination = 0,
	}
	
	public enum CreateOptOutListX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.CreateOptOutList")]
		PinpointSMSVoiceV2_CreateOptOutList = 0,
	}
	
	public enum CreatePoolX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.CreatePool")]
		PinpointSMSVoiceV2_CreatePool = 0,
	}
	
	public enum DeleteConfigurationSetX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.DeleteConfigurationSet")]
		PinpointSMSVoiceV2_DeleteConfigurationSet = 0,
	}
	
	public enum DeleteDefaultMessageTypeX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.DeleteDefaultMessageType")]
		PinpointSMSVoiceV2_DeleteDefaultMessageType = 0,
	}
	
	public enum DeleteDefaultSenderIdX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.DeleteDefaultSenderId")]
		PinpointSMSVoiceV2_DeleteDefaultSenderId = 0,
	}
	
	public enum DeleteEventDestinationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.DeleteEventDestination")]
		PinpointSMSVoiceV2_DeleteEventDestination = 0,
	}
	
	public enum DeleteKeywordX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.DeleteKeyword")]
		PinpointSMSVoiceV2_DeleteKeyword = 0,
	}
	
	public enum DeleteOptOutListX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.DeleteOptOutList")]
		PinpointSMSVoiceV2_DeleteOptOutList = 0,
	}
	
	public enum DeleteOptedOutNumberX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.DeleteOptedOutNumber")]
		PinpointSMSVoiceV2_DeleteOptedOutNumber = 0,
	}
	
	public enum DeletePoolX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.DeletePool")]
		PinpointSMSVoiceV2_DeletePool = 0,
	}
	
	public enum DeleteTextMessageSpendLimitOverrideX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.DeleteTextMessageSpendLimitOverride")]
		PinpointSMSVoiceV2_DeleteTextMessageSpendLimitOverride = 0,
	}
	
	public enum DeleteVoiceMessageSpendLimitOverrideX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.DeleteVoiceMessageSpendLimitOverride")]
		PinpointSMSVoiceV2_DeleteVoiceMessageSpendLimitOverride = 0,
	}
	
	public enum DescribeAccountAttributesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.DescribeAccountAttributes")]
		PinpointSMSVoiceV2_DescribeAccountAttributes = 0,
	}
	
	public enum DescribeAccountLimitsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.DescribeAccountLimits")]
		PinpointSMSVoiceV2_DescribeAccountLimits = 0,
	}
	
	public enum DescribeConfigurationSetsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.DescribeConfigurationSets")]
		PinpointSMSVoiceV2_DescribeConfigurationSets = 0,
	}
	
	public enum DescribeKeywordsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.DescribeKeywords")]
		PinpointSMSVoiceV2_DescribeKeywords = 0,
	}
	
	public enum DescribeOptOutListsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.DescribeOptOutLists")]
		PinpointSMSVoiceV2_DescribeOptOutLists = 0,
	}
	
	public enum DescribeOptedOutNumbersX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.DescribeOptedOutNumbers")]
		PinpointSMSVoiceV2_DescribeOptedOutNumbers = 0,
	}
	
	public enum DescribePhoneNumbersX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.DescribePhoneNumbers")]
		PinpointSMSVoiceV2_DescribePhoneNumbers = 0,
	}
	
	public enum DescribePoolsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.DescribePools")]
		PinpointSMSVoiceV2_DescribePools = 0,
	}
	
	public enum DescribeSenderIdsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.DescribeSenderIds")]
		PinpointSMSVoiceV2_DescribeSenderIds = 0,
	}
	
	public enum DescribeSpendLimitsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.DescribeSpendLimits")]
		PinpointSMSVoiceV2_DescribeSpendLimits = 0,
	}
	
	public enum DisassociateOriginationIdentityX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.DisassociateOriginationIdentity")]
		PinpointSMSVoiceV2_DisassociateOriginationIdentity = 0,
	}
	
	public enum ListPoolOriginationIdentitiesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.ListPoolOriginationIdentities")]
		PinpointSMSVoiceV2_ListPoolOriginationIdentities = 0,
	}
	
	public enum ListTagsForResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.ListTagsForResource")]
		PinpointSMSVoiceV2_ListTagsForResource = 0,
	}
	
	public enum PutKeywordX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.PutKeyword")]
		PinpointSMSVoiceV2_PutKeyword = 0,
	}
	
	public enum PutOptedOutNumberX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.PutOptedOutNumber")]
		PinpointSMSVoiceV2_PutOptedOutNumber = 0,
	}
	
	public enum ReleasePhoneNumberX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.ReleasePhoneNumber")]
		PinpointSMSVoiceV2_ReleasePhoneNumber = 0,
	}
	
	public enum RequestPhoneNumberX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.RequestPhoneNumber")]
		PinpointSMSVoiceV2_RequestPhoneNumber = 0,
	}
	
	public enum SendTextMessageX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.SendTextMessage")]
		PinpointSMSVoiceV2_SendTextMessage = 0,
	}
	
	public enum SendVoiceMessageX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.SendVoiceMessage")]
		PinpointSMSVoiceV2_SendVoiceMessage = 0,
	}
	
	public enum SetDefaultMessageTypeX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.SetDefaultMessageType")]
		PinpointSMSVoiceV2_SetDefaultMessageType = 0,
	}
	
	public enum SetDefaultSenderIdX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.SetDefaultSenderId")]
		PinpointSMSVoiceV2_SetDefaultSenderId = 0,
	}
	
	public enum SetTextMessageSpendLimitOverrideX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.SetTextMessageSpendLimitOverride")]
		PinpointSMSVoiceV2_SetTextMessageSpendLimitOverride = 0,
	}
	
	public enum SetVoiceMessageSpendLimitOverrideX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.SetVoiceMessageSpendLimitOverride")]
		PinpointSMSVoiceV2_SetVoiceMessageSpendLimitOverride = 0,
	}
	
	public enum TagResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.TagResource")]
		PinpointSMSVoiceV2_TagResource = 0,
	}
	
	public enum UntagResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.UntagResource")]
		PinpointSMSVoiceV2_UntagResource = 0,
	}
	
	public enum UpdateEventDestinationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.UpdateEventDestination")]
		PinpointSMSVoiceV2_UpdateEventDestination = 0,
	}
	
	public enum UpdatePhoneNumberX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.UpdatePhoneNumber")]
		PinpointSMSVoiceV2_UpdatePhoneNumber = 0,
	}
	
	public enum UpdatePoolX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PinpointSMSVoiceV2.UpdatePool")]
		PinpointSMSVoiceV2_UpdatePool = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
