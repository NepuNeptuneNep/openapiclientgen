//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddSalesOrderLinesCommand
	{
		
		[System.Runtime.Serialization.DataMember(Name="lines")]
		public NewSalesOrderLineDto[] Lines { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NewSalesOrderLineDto
	{
		
		/// <summary>
		/// The branch with which this line is associated.
		///If no `BranchId` is provided, default is set from order `BranchId`
		/// Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="branchId")]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string BranchId { get; set; }
		
		/// <summary>
		/// Indicates if line is comissionable.
		///If not set, the default value is picked from the inventory item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commissionable")]
		public System.Nullable<System.Boolean> Commissionable { get; set; }
		
		/// <summary>
		/// Sets the description of the order line item. This will override the default description from the inventory item
		///<br>Note that text fields should not contain any personally identifiable or otherwise sensitive data
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Description { get; set; }
		
		/// <summary>
		/// Sets the manual currency discount amount for the line.
		///<remarks>
		///Note that the behavior of the 'discountAmount' field is affected by the 'hasManualDiscount' option.
		///If 'hasManualDiscount' is provided and set to "false", and 'discountAmount' is provided, the system will set the discountAmount according to the predefined rules.
		///</remarks>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discountAmount")]
		public System.Nullable<System.Double> DiscountAmount { get; set; }
		
		/// <summary>
		/// Sets the discount for the line if applicable. This must be one of the selectable discount codes.
		///<remarks>
		///Note that the behavior of the 'discountCode' field is affected by the 'hasManualDiscount' option.
		///If 'hasManualDiscount' is provided and set to "false", and 'discountCode' is provided, the system will set the discountCode according to the predefined rules.
		///</remarks>
		/// Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discountCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string DiscountCode { get; set; }
		
		/// <summary>
		/// Sets the manual percentage discount for the line.
		///<remarks>
		///Note that the behavior of the 'discountPercent' field is affected by the 'hasManualDiscount' option.
		///If 'hasManualDiscount' is provided and set to "false", and 'discountPercent' is provided, the system will set the discountPercent according to the predefined rules.
		///</remarks>
		/// Minimum: -100
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discountPercent")]
		[System.ComponentModel.DataAnnotations.Range(-100, 100)]
		public System.Nullable<System.Double> DiscountPercent { get; set; }
		
		/// <summary>
		/// Sets the external link for the line
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalLink")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ExternalLink { get; set; }
		
		/// <summary>
		/// Indicates that line level discount is applied manually.
		///<remarks>
		///Note that the behavior of the fields 'discountCode', 'discountPercent' and 'discountAmount' is affected by this option.
		///If 'hasManualDiscount' is provided and set to "false", and discount field(s) is provided, the system will set the line level discounts according to the predefined rules.
		///</remarks>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasManualDiscount")]
		public System.Nullable<System.Boolean> HasManualDiscount { get; set; }
		
		/// <summary>
		/// Indicates that the `unitPrice` in this line has been specified manually.
		///If set to "false", the system updates the unit price in the line according to predefined rules.
		///Note that the behavior of the field `unitPrice` is affected by this option.
		///If `hasManualPrice` is provided and set to "false", and `unitPrice` is provided, the system will set the `unitPrice` according to the predefined rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasManualPrice")]
		public System.Nullable<System.Boolean> HasManualPrice { get; set; }
		
		/// <summary>
		/// The Inventory Id of the item to add
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inventoryId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string InventoryId { get; set; }
		
		/// <summary>
		/// Adds a text note to the sales order line.
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Note { get; set; }
		
		/// <summary>
		/// The type of operation the line represents to the order. Acceptable values are 'Issue' or 'Receipt'. This must be a valid operation for sales order type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Sets the overship threshold in percent. If not set, information from the inventory item is used
		/// Minimum: 100
		/// Maximum: 999
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overshipThreshold")]
		[System.ComponentModel.DataAnnotations.Range(100, 999)]
		public System.Nullable<System.Double> OvershipThreshold { get; set; }
		
		/// <summary>
		/// The project task with which this sales order line is associated
		/// Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectTaskId")]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string ProjectTaskId { get; set; }
		
		/// <summary>
		/// Sets the purchase source of the line.
		///Accepted values are `dropShip` or `purchaseToOrder`, when no value provided, the default value is picked from the inventory item.
		///If the value was provided as '' (empty string), the value will set to null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchaseOrderSource")]
		public string PurchaseOrderSource { get; set; }
		
		/// <summary>
		/// Sets the quantity of items on the order line
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		/// <summary>
		/// Sets the reason code for the line. This must be one of the selectable reason codes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonCode")]
		public string ReasonCode { get; set; }
		
		/// <summary>
		/// Sets the date the order line is requested (Requested On)
		///Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestDate")]
		public System.Nullable<System.DateTimeOffset> RequestDate { get; set; }
		
		/// <summary>
		/// Overrides the Sales Account Id of the line. The value must be one of the selectable Accounts.
		///If not set, a value based on the rules is used
		/// Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="salesAccountId")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string SalesAccountId { get; set; }
		
		/// <summary>
		/// Sets the sales person for the line.
		///If `SalesPersonId` is provided as (null), the value will be set from from order `SalesPersonId`
		/// Max length: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="salesPersonId")]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string SalesPersonId { get; set; }
		
		/// <summary>
		/// Sets the day the order line should be shipped, so that the customer gets it on the requested date (Ship On).
		///Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipDate")]
		public System.Nullable<System.DateTimeOffset> ShipDate { get; set; }
		
		/// <summary>
		/// The way the line item should be shipped. This will override the default or the one set on the order head.
		///<br>One of the following options can be set:<br><list type="bullet"><item><term>CancelRemainder: </term><description>The ordered quantity should be delivered in one shipment</description></item><item><term>BackOrderAllowed: </term><description>The ordered quantity can be delivered in multiple shipments.</description></item><item><term>ShipComplete: </term><description>The ordered quantity should be delivered in one shipment.</description></item></list>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingRule")]
		public string ShippingRule { get; set; }
		
		/// <summary>
		/// Overrides the Subaccount setup for the line.
		///Each entry corresponds to a subaccount id/value pair
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subaccount")]
		public System.Collections.Generic.Dictionary<string, string> Subaccount { get; set; }
		
		/// <summary>
		/// <remarks>
		///            If the actual value was provided as (null), the value will be set from the inventory item preferred supplier,
		///            can be set only if the Purchase Order Source is set to `dropShip` or `purchaseToOrder`
		///            </remarks>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supplierId")]
		public string SupplierId { get; set; }
		
		/// <summary>
		/// Sets the supplier price for the line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supplierPrice")]
		public System.Nullable<System.Double> SupplierPrice { get; set; }
		
		/// <summary>
		/// Overrides the default tax category id (from customer's class). The value must be one of the selectable Tax Categories
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxCategoryId")]
		public string TaxCategoryId { get; set; }
		
		/// <summary>
		/// Sets the undership threshold in percent. If not set, information from the inventory item is used
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="undershipThreshold")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Double> UndershipThreshold { get; set; }
		
		/// <summary>
		/// Sets the unit cost of the product on the line. If no cost is set (null or omitted) the cost will be set
		///according to predefined rules
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitCost")]
		public System.Nullable<System.Double> UnitCost { get; set; }
		
		/// <summary>
		/// Sets the Unit of measure for the line item. This will override the default UOM for the inventory item
		/// Max length: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitOfMeasure")]
		[System.ComponentModel.DataAnnotations.MaxLength(6)]
		public string UnitOfMeasure { get; set; }
		
		/// <summary>
		/// Sets the unit price for the product on the line.
		///If no price is set(null or omitted) the price will be set according to predefined rules based on the inventoryId and the customer.
		///Note that the behavior of the `unitPrice` field is affected by the `hasManualPrice` option.
		///If `hasManualPrice` is provided and set to "false", and `unitPrice` is provided, the system will set the `unitPrice` according to the predefined rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitPrice")]
		public System.Nullable<System.Double> UnitPrice { get; set; }
		
		/// <summary>
		/// Sets the warehouse the item should be shipped from. This will override the default, or the one set on the order head.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warehouseId")]
		public string WarehouseId { get; set; }
		
		/// <summary>
		/// Sets the warehouse location that will be used for the shipment generated for the order the warehouse location Id for this line. This must be a valid location for `warehouseId` and will override the default if set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warehouseLocationId")]
		public string WarehouseLocationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddressDto
	{
		
		/// <summary>
		/// The city
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public CdNamePairDto Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="county")]
		public CdNamePairDto County { get; set; }
		
		/// <summary>
		/// The address id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Address line 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line1")]
		public string Line1 { get; set; }
		
		/// <summary>
		/// Address line 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line2")]
		public string Line2 { get; set; }
		
		/// <summary>
		/// Address line 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line3")]
		public string Line3 { get; set; }
		
		/// <summary>
		/// Whether this address overrides the default address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overridesDefault")]
		public System.Nullable<System.Boolean> OverridesDefault { get; set; }
		
		/// <summary>
		/// The postal code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CdNamePairDto
	{
		
		/// <summary>
		/// The id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttachmentDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public System.Nullable<System.Int32> Revision { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CdDescriptionPairDto
	{
		
		/// <summary>
		/// The description
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContactDto
	{
		
		/// <summary>
		/// Any attention for the contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attention")]
		public string Attention { get; set; }
		
		/// <summary>
		/// The e-mail address of the contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The fax number of the contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fax")]
		public string Fax { get; set; }
		
		/// <summary>
		/// The id of the contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// The name of the contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Whether this overrides the default contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overridesDefault")]
		public System.Nullable<System.Boolean> OverridesDefault { get; set; }
		
		/// <summary>
		/// The phone number of the contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone1")]
		public string Phone1 { get; set; }
		
		/// <summary>
		/// The secondary phone number of the contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone2")]
		public string Phone2 { get; set; }
	}
	
	/// <summary>
	/// The Visma.net.ERP.SalesOrders.Api.Dto.CustomerDto class Defines a customer
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomerDto
	{
		
		/// <summary>
		/// The customer's first address line
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressLine1")]
		public string AddressLine1 { get; set; }
		
		/// <summary>
		/// The customer's second address line
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressLine2")]
		public string AddressLine2 { get; set; }
		
		/// <summary>
		/// The customer's country code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The currency Id used by the customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyId")]
		public string CurrencyId { get; set; }
		
		/// <summary>
		/// The class of the customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerClassId")]
		public string CustomerClassId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultLocation")]
		public CustomerLocationDto DefaultLocation { get; set; }
		
		/// <summary>
		/// Unique id for the customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// An internal unique id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalId")]
		public System.Nullable<System.Int32> InternalId { get; set; }
		
		/// <summary>
		/// The name of the customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The customer's postal code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// The customer's salutation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="salutation")]
		public string Salutation { get; set; }
		
		/// <summary>
		/// The customer's status code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomerLocationDto
	{
		
		/// <summary>
		/// The corporate id of the location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporateId")]
		public string CorporateId { get; set; }
		
		/// <summary>
		/// The country code of the location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryId")]
		public string CountryId { get; set; }
		
		/// <summary>
		/// The global localization number of the location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gln")]
		public string Gln { get; set; }
		
		/// <summary>
		/// Location id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// An internal id of the customer location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalId")]
		public System.Nullable<System.Int32> InternalId { get; set; }
		
		/// <summary>
		/// Location description
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The tax registration id of the location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxRegistrationId")]
		public string TaxRegistrationId { get; set; }
		
		/// <summary>
		/// The site id of the location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warehouseId")]
		public string WarehouseId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomerDtoPagedResult
	{
		
		/// <summary>
		/// Gets or sets the link to the next page with more results. If set to null then no more records are present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPage")]
		public string NextPage { get; set; }
		
		/// <summary>
		/// Gets or sets the total number of items available. If set to null, then the total number of items cannot be determined
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
		
		/// <summary>
		/// Gets or sets the items that are paged
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public CustomerDto[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomerLocationItemDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public AddressDto Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public ContactDto Contact { get; set; }
		
		/// <summary>
		/// The corporate id of the location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporateId")]
		public string CorporateId { get; set; }
		
		/// <summary>
		/// The country code of the location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryId")]
		public string CountryId { get; set; }
		
		/// <summary>
		/// Default FobPointId
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fobPointId")]
		public string FobPointId { get; set; }
		
		/// <summary>
		/// The global localization number of the location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gln")]
		public string Gln { get; set; }
		
		/// <summary>
		/// Location id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Default Insurance
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insurance")]
		public System.Nullable<System.Boolean> Insurance { get; set; }
		
		/// <summary>
		/// An internal id of the customer location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalId")]
		public System.Nullable<System.Int32> InternalId { get; set; }
		
		/// <summary>
		/// The number of days required for the shipped goods to reach the customer.
		///Used in the calculation of the scheduled shipment date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leadTime")]
		public System.Nullable<System.Int32> LeadTime { get; set; }
		
		/// <summary>
		/// Location description
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The preferred shipping warehouse of the customer set default for the order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preferredWarehouseId")]
		public string PreferredWarehouseId { get; set; }
		
		/// <summary>
		/// Price class
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceClassId")]
		public string PriceClassId { get; set; }
		
		/// <summary>
		/// Default Priority
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// Default ResidentialDelivery.<br />
		///This field will be removed with due date 1.12.2023. It is recommended to use <see cref="P:Visma.net.ERP.SalesOrders.Api.Dto.CustomerLocationItemDto.ResidentialDelivery">ResidentialDelivery</see> instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resedentialDelivery")]
		public System.Nullable<System.Boolean> ResedentialDelivery { get; set; }
		
		/// <summary>
		/// Default ResidentialDelivery
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="residentialDelivery")]
		public System.Nullable<System.Boolean> ResidentialDelivery { get; set; }
		
		/// <summary>
		/// Default SaturdayDelivery
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="saturdayDelivery")]
		public System.Nullable<System.Boolean> SaturdayDelivery { get; set; }
		
		/// <summary>
		/// Default ShipTermsId
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipTermsId")]
		public string ShipTermsId { get; set; }
		
		/// <summary>
		/// The ship via id that represents the carrier and its service to be used for shipping the ordered goods
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipViaId")]
		public string ShipViaId { get; set; }
		
		/// <summary>
		/// Default ShipZoneId
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipZoneId")]
		public string ShipZoneId { get; set; }
		
		/// <summary>
		/// Shipping rule of the customer set default for the order
		///<br>Is one of the following options:<br><list type="bullet"><item><term>CancelRemainder: </term><description>The ordered quantity should be delivered in one shipment</description></item><item><term>BackOrderAllowed: </term><description>The ordered quantity can be delivered in multiple shipments.</description></item><item><term>ShipComplete: </term><description>The ordered quantity should be delivered in one shipment.</description></item></list>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingRule")]
		public string ShippingRule { get; set; }
		
		/// <summary>
		/// The tax registration id of the location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxRegistrationId")]
		public string TaxRegistrationId { get; set; }
		
		/// <summary>
		/// The location tax/VAT zone id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxZoneId")]
		public string TaxZoneId { get; set; }
		
		/// <summary>
		/// The site id of the location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warehouseId")]
		public string WarehouseId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DtoLink
	{
		
		/// <summary>
		/// A link to the item in question
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EmployeeDto
	{
		
		/// <summary>
		/// The identifier of the employee
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The internal unique identifier of the employee
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalId")]
		public string InternalId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdDescriptionPairDto
	{
		
		/// <summary>
		/// The description
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
	}
	
	/// <summary>
	/// Defines expansion options for the inventory summary endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InventoryAvailabilityExpansions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Location = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Attribute = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 3,
	}
	
	/// <summary>
	/// Inventory summary for a specific inventory item
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InventoryItemAvailabilityDto
	{
		
		/// <summary>
		/// Attributes applied to the inventory item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public System.Collections.Generic.Dictionary<string, string> Attributes { get; set; }
		
		/// <summary>
		/// Warehouse information for the inventory item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public WarehouseAvailabilityDto[] Availability { get; set; }
		
		/// <summary>
		/// The base unit for the inventory item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseUnit")]
		public string BaseUnit { get; set; }
		
		/// <summary>
		/// The description of the inventory item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The internal Id used by the system to identify the inventory item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalId")]
		public System.Nullable<System.Int32> InternalId { get; set; }
		
		/// <summary>
		/// The inventory id (InventoryCd)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventoryId")]
		public string InventoryId { get; set; }
	}
	
	/// <summary>
	/// Warehouse information for a specific inventory item
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WarehouseAvailabilityDto
	{
		
		/// <summary>
		/// The description of the warehouse
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The total cost for the QuantityOnHand
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimatedTotalCost")]
		public System.Nullable<System.Double> EstimatedTotalCost { get; set; }
		
		/// <summary>
		/// The estimated cost per unit, calculated as EstimatedTotalCost/QuantityOnHand
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimatedUnitCost")]
		public System.Nullable<System.Double> EstimatedUnitCost { get; set; }
		
		/// <summary>
		/// The internal id used by the system for the warehouse
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalWarehouseId")]
		public System.Nullable<System.Int32> InternalWarehouseId { get; set; }
		
		/// <summary>
		/// The date and time the entry for this warehouse was modified
		///Unless a specific time zone offset is included (e.g. '2012-12-24T12:15:14+02:00'), the date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		/// <summary>
		/// List of locations in the warehouse for the specific inventory item.
		///Note that this is not returned as part of the response unless expand=Location is specified with the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public LocationAvailabilityDto[] Locations { get; set; }
		
		/// <summary>
		/// You can configure the way this estimated quantity is calculated by using availability
		///calculation rules. The available quantity may include anticipated transactions and therefore
		///may be less than or greater than the QuantityOnHand. Anticipated transactions correspond
		///to the documents and transactions that have been entered in the system but not yet
		///processed to the end.
		///In the availability calculation settings of an item class, you specify which anticipated
		///transactions affect the available quantity. Thus, the available quantity may include
		///goods on purchase orders and exclude the goods allocated for sales orders. You can use
		///the available quantity as an indicator of demand
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantityAvailable")]
		public System.Nullable<System.Double> QuantityAvailable { get; set; }
		
		/// <summary>
		/// Estimated quantity calculated by using the following formula: the QuantityOnHand minus the quantity on unreleased inventory
		///issues, minus the quantity allocated for shipping. Thus, the QuantityAvailableForShipment can be less than the QuantityOnHand
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantityAvailableForShipment")]
		public System.Nullable<System.Double> QuantityAvailableForShipment { get; set; }
		
		/// <summary>
		/// The quantity stored at locations not included in the availability calculation.
		///For each warehouse location, the 'Include in Qty. Available' check box on the
		///Warehouses(IN204000) screen defines whether the quantity of items stored at this
		///location is included in the quantity of available items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantityNotAvailable")]
		public System.Nullable<System.Double> QuantityNotAvailable { get; set; }
		
		/// <summary>
		/// Physical quantity on-hand of items in the specific warehouse
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantityOnHand")]
		public System.Nullable<System.Double> QuantityOnHand { get; set; }
		
		/// <summary>
		/// The quantity of the inventory item included in open purchase orders.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantityPurchaseOrders")]
		public System.Nullable<System.Double> QuantityPurchaseOrders { get; set; }
		
		/// <summary>
		/// The id (SiteCd) of the warehouse
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warehouseId")]
		public string WarehouseId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LocationAvailabilityDto
	{
		
		/// <summary>
		/// The description of the location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The internal id used by the sytem for this location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalLocationId")]
		public System.Nullable<System.Int32> InternalLocationId { get; set; }
		
		/// <summary>
		/// Date and time this entry for this location was modified
		///Unless a specific time zone offset is included (e.g. '2012-12-24T12:15:14+02:00'), the date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		/// <summary>
		/// The location id (LocationCd) for this location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		/// <summary>
		/// You can configure the way this estimated quantity is calculated by using availability
		///calculation rules. The available quantity may include anticipated transactions and therefore
		///may be less than or greater than the QuantityOnHand. Anticipated transactions correspond
		///to the documents and transactions that have been entered in the system but not yet
		///processed to the end.
		///In the availability calculation settings of an item class, you specify which anticipated
		///transactions affect the available quantity. Thus, the available quantity may include
		///goods on purchase orders and exclude the goods allocated for sales orders. You can use
		///the available quantity as an indicator of demand.
		///Note: For quantities on warehouse location level, only quantities added specifically for the location are taken into consideration in quantityAvailable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantityAvailable")]
		public System.Nullable<System.Double> QuantityAvailable { get; set; }
		
		/// <summary>
		/// Estimated quantity calculated by using the following formula: the QuantityOnHand minus the quantity on unreleased inventory
		///issues, minus the quantity allocated for shipping. Thus, the QuantityAvailableForShipment can be less than the QuantityOnHand.
		///Note: For quantities on warehouse location level, only quantities added specifically for the location are taken into consideration in quantityAvailableForShipment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantityAvailableForShipment")]
		public System.Nullable<System.Double> QuantityAvailableForShipment { get; set; }
		
		/// <summary>
		/// The quantity stored at locations not included in the availability calculation.
		///For each warehouse location, the 'Include in Qty. Available' check box on the
		///Warehouses(IN204000) screen defines whether the quantity of items stored at this
		///location is included in the quantity of available items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantityNotAvailable")]
		public System.Nullable<System.Double> QuantityNotAvailable { get; set; }
		
		/// <summary>
		/// Physical quantity on-hand of items in the specific location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantityOnHand")]
		public System.Nullable<System.Double> QuantityOnHand { get; set; }
		
		/// <summary>
		/// The quantity of the inventory item included in open purchase orders.
		///Note: For quantities on warehouse location level, only quantities added specifically for the location are taken into consideration
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantityPurchaseOrders")]
		public System.Nullable<System.Double> QuantityPurchaseOrders { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InventoryItemAvailabilityDtoPagedResult
	{
		
		/// <summary>
		/// Gets or sets the link to the next page with more results. If set to null then no more records are present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPage")]
		public string NextPage { get; set; }
		
		/// <summary>
		/// Gets or sets the total number of items available. If set to null, then the total number of items cannot be determined
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
		
		/// <summary>
		/// Gets or sets the items that are paged
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public InventoryItemAvailabilityDto[] Value { get; set; }
	}
	
	/// <summary>
	/// Defines a warehouse location
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LocationDto
	{
		
		/// <summary>
		/// The description
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Defines a new address when creating a sales order.
	///When the address information is provided, it is expected to provide all needed fields for the address(line1, line2, countryId etc).
	///No default values from the customer will be set for the non defined address fields.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NewSalesOrderAddressDto
	{
		
		/// <summary>
		/// The city
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string City { get; set; }
		
		/// <summary>
		/// The country. Required when setting the address.
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryId")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string CountryId { get; set; }
		
		/// <summary>
		/// Address line 1
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line1")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Line1 { get; set; }
		
		/// <summary>
		/// Address line 2
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line2")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Line2 { get; set; }
		
		/// <summary>
		/// Address line 3
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line3")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Line3 { get; set; }
		
		/// <summary>
		/// The postal code
		/// Max length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// The state
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateId")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string StateId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NewSalesOrderBillingDto
	{
		
		/// <summary>
		/// Defines a new address when creating a sales order.
		///When the address information is provided, it is expected to provide all needed fields for the address(line1, line2, countryId etc).
		///No default values from the customer will be set for the non defined address fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public NewSalesOrderAddressDto Address { get; set; }
		
		/// <summary>
		/// Defines a new contact when creating a new sales order.
		///When the contact information is provided, it is expected to provide all needed fields for the contact(name, attention etc).
		///No default values from the customer will be set for the non defined contact fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public NewSalesOrderContactDto Contact { get; set; }
	}
	
	/// <summary>
	/// Defines a new contact when creating a new sales order.
	///When the contact information is provided, it is expected to provide all needed fields for the contact(name, attention etc).
	///No default values from the customer will be set for the non defined contact fields.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NewSalesOrderContactDto
	{
		
		/// <summary>
		/// Sets any attention for the contact
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attention")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Attention { get; set; }
		
		/// <summary>
		/// Sets the e-mail address of the contact
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Email { get; set; }
		
		/// <summary>
		/// Sets the full name of the contact
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Sets the primary phone number of the contact
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone1")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Phone1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NewSalesOrderCommand
	{
		
		[System.Runtime.Serialization.DataMember(Name="billing")]
		public NewSalesOrderBillingDto Billing { get; set; }
		
		/// <summary>
		/// The branch with which this order is associated. Prio for setting the Branch ID being:
		///<list type="number"><item>BranchID set in body</item><item>BranchID from call header</item><item>BranchID from customer location</item><item>Company's default branch ID</item></list>
		/// Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="branchId")]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string BranchId { get; set; }
		
		/// <summary>
		/// Sets the cancel by date for the order to create. If not supplied, the order type's days to keep will be added to the current date to determine the value of this field
		///Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancelBy")]
		public System.Nullable<System.DateTimeOffset> CancelBy { get; set; }
		
		/// <summary>
		/// Override the CurrencyId for the order. Must be a valid currency Id. If not specified, the customer's currency is used if not null. If null, company base currency is used
		/// Max length: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyId")]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string CurrencyId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public NewSalesOrderCustomerDto Customer { get; set; }
		
		/// <summary>
		/// Sets the order date of the order to create. If not supplied, the current date will be used
		///Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// Sets the description for the order to create
		///<br>Note that text fields should not contain any personally identifiable or otherwise sensitive data
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="financialInformation")]
		public NewSalesOrderFinancialInfoDto FinancialInformation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="freight")]
		public NewSalesOrderFreightDto Freight { get; set; }
		
		/// <summary>
		/// Any note to apply to the order header.
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Note { get; set; }
		
		/// <summary>
		/// Sets the new id that should be assigned to the new sales order.
		///This is required if the specified Visma.net.ERP.SalesOrders.Api.Application.Commands.NewSalesOrder.NewSalesOrderCommand.Type has manual numbering set up. If not it should be null or empty.
		/// Max length: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderId")]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string OrderId { get; set; }
		
		/// <summary>
		/// The lines that are added to the order upon creation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderLines")]
		public NewSalesOrderLineDto[] OrderLines { get; set; }
		
		/// <summary>
		/// Sets the unique identifier of the original order
		/// Max length: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalOrderId")]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string OriginalOrderId { get; set; }
		
		/// <summary>
		/// Sets the type code for the original sales order
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalOrderType")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string OriginalOrderType { get; set; }
		
		/// <summary>
		/// Sets the owner (employee) for the order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerId")]
		public string OwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentSettings")]
		public NewSalesOrderPaymentSettings PaymentSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="print")]
		public SalesOrderPrintDto Print { get; set; }
		
		/// <summary>
		/// The project with which this sales order is associated
		/// Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Sets the requested on date for the order to create. If not supplied, the current date will be used
		///Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestOn")]
		public System.Nullable<System.DateTimeOffset> RequestOn { get; set; }
		
		/// <summary>
		/// Sets default sales person for the order
		/// Max length: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="salesPersonId")]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string SalesPersonId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shipping")]
		public NewSalesOrderShippingDto Shipping { get; set; }
		
		/// <summary>
		/// Sets the initial status code for the order. Must be null, empty or one of "Open" or "Hold". If not supplied the value will be determined by the sales order type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Override the TaxZoneId for the order. If not specified, the customer's location's TaxZoneId will be used
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxZoneId")]
		public string TaxZoneId { get; set; }
		
		/// <summary>
		/// Sets the type id of an active sales order type to create
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Type { get; set; }
		
		/// <summary>
		/// When this option is set to `true`, the `costTotal` of the order will be calculated based on `replacementUnitCost`.
		///If option is set to `false`, the `costTotal` will be calculated based on `unitCost`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useReplacementCostForMarginAndProfit")]
		public System.Nullable<System.Boolean> UseReplacementCostForMarginAndProfit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NewSalesOrderCustomerDto
	{
		
		/// <summary>
		/// The contact id for the customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactId")]
		public System.Nullable<System.Int32> ContactId { get; set; }
		
		/// <summary>
		/// The unique global location number of the customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gln")]
		public string Gln { get; set; }
		
		/// <summary>
		/// The unique id of the the customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Sets the location for the customer supplied to use on the order.
		///Must be a valid active location for the customer supplied in Visma.net.ERP.SalesOrders.Api.Dto.NewSalesOrder.NewSalesOrderCustomerDto.Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		/// <summary>
		/// The customer order text
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Order { get; set; }
		
		/// <summary>
		/// The customer ref number text
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refNo")]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string RefNo { get; set; }
		
		/// <summary>
		/// Sets the terms to use for the sales order.
		///Must be a valid terms identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="termsId")]
		public string TermsId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NewSalesOrderFinancialInfoDto
	{
		
		/// <summary>
		/// The date when the cash discount is available for the invoice created for the order. Default date is set based on the terms selected in the order.
		///Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cashDiscountDate")]
		public System.Nullable<System.DateTimeOffset> CashDiscountDate { get; set; }
		
		/// <summary>
		/// The due date for the invoice created for the order. Default due date is set according to the credit terms.
		///Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dueDate")]
		public System.Nullable<System.DateTimeOffset> DueDate { get; set; }
		
		/// <summary>
		/// Sets the invoice date of the invoice that will be generated for the order.
		///Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceDate")]
		public System.Nullable<System.DateTimeOffset> InvoiceDate { get; set; }
		
		/// <summary>
		/// The reference number of the invoice generated for this order.
		///This can be used if the numbering sequence assigned to invoices is configured for manual numbering.
		/// Max length: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceId")]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string InvoiceId { get; set; }
		
		/// <summary>
		/// Sets if the order should be invoiced/billed separately
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceSeparately")]
		public System.Nullable<System.Boolean> InvoiceSeparately { get; set; }
		
		/// <summary>
		/// The post period for the invoice. This can be used to override the financial period. Must be a valid existing financial period.
		/// Max length: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postPeriod")]
		[System.ComponentModel.DataAnnotations.MaxLength(6)]
		public string PostPeriod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NewSalesOrderFreightDto
	{
		
		/// <summary>
		/// The freight cost calculated for the sales order, can be manually set if orders Ship via code allows it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cost")]
		public System.Nullable<System.Double> Cost { get; set; }
		
		/// <summary>
		/// The additional freight charges for handling the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="premiumAmount")]
		public System.Nullable<System.Double> PremiumAmount { get; set; }
		
		/// <summary>
		/// The tax category that applies to the freight amount.
		///By default, it is the tax category associated with the ship via code selected for the order.
		/// Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxCategoryId")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string TaxCategoryId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NewSalesOrderPaymentSettings
	{
		
		/// <summary>
		/// The cash account associated with the set payment method.
		/// Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cashAccountId")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string CashAccountId { get; set; }
		
		/// <summary>
		/// Overrides the default payment method set on the customer. This must be a valid and active payment method id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentMethodId")]
		public string PaymentMethodId { get; set; }
		
		/// <summary>
		/// Sets the external reference number for the order. This must be set if order type requires it.
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentReference")]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string PaymentReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SalesOrderPrintDto
	{
		
		/// <summary>
		/// Set to true to print description on the invoice
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="descriptionOnInvoice")]
		public System.Nullable<System.Boolean> DescriptionOnInvoice { get; set; }
		
		/// <summary>
		/// Set to true to print note on external documents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noteOnExternalDocuments")]
		public System.Nullable<System.Boolean> NoteOnExternalDocuments { get; set; }
		
		/// <summary>
		/// Set to true to print note on internal documents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noteOnInternalDocuments")]
		public System.Nullable<System.Boolean> NoteOnInternalDocuments { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NewSalesOrderShippingDto
	{
		
		/// <summary>
		/// Defines a new address when creating a sales order.
		///When the address information is provided, it is expected to provide all needed fields for the address(line1, line2, countryId etc).
		///No default values from the customer will be set for the non defined address fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public NewSalesOrderAddressDto Address { get; set; }
		
		/// <summary>
		/// Defines a new contact when creating a new sales order.
		///When the contact information is provided, it is expected to provide all needed fields for the contact(name, attention etc).
		///No default values from the customer will be set for the non defined contact fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public NewSalesOrderContactDto Contact { get; set; }
		
		/// <summary>
		/// The identifier of the point (such as a city or town) where the title of goods passes from the company to the customer.
		/// Max length: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fobPointId")]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string FobPointId { get; set; }
		
		/// <summary>
		/// Sets whether insurance applies to this shipping
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insurance")]
		public System.Nullable<System.Boolean> Insurance { get; set; }
		
		/// <summary>
		/// Sets the intrastat transaction type id for the sales order, if not supplied the default value from the ordertype will be used. Must be a valid intrastat transaction type id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intrastatTransactionTypeId")]
		public System.Nullable<System.Int32> IntrastatTransactionTypeId { get; set; }
		
		/// <summary>
		/// Sets the default site for the customer supplied to use on the order. Must be a valid site id
		/// Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preferredWarehouseId")]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string PreferredWarehouseId { get; set; }
		
		/// <summary>
		/// Sets priority of the order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// Sets whether this is residential delivery
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="residentialDelivery")]
		public System.Nullable<System.Boolean> ResidentialDelivery { get; set; }
		
		/// <summary>
		/// Sets the shipping rule for the order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rule")]
		public string Rule { get; set; }
		
		/// <summary>
		/// Sets whether this is a saturday delivery
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="saturdayDelivery")]
		public System.Nullable<System.Boolean> SaturdayDelivery { get; set; }
		
		/// <summary>
		/// Sets the date the shipment is scheduled for
		///Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledDate")]
		public System.Nullable<System.DateTimeOffset> ScheduledDate { get; set; }
		
		/// <summary>
		/// Sets whether the order should be shipped separately or included in a batch segment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipSeparately")]
		public System.Nullable<System.Boolean> ShipSeparately { get; set; }
		
		/// <summary>
		/// Sets the unique id that represents the carrier and its service to be used for shipping the ordered goods.
		/// Max length: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipViaId")]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string ShipViaId { get; set; }
		
		/// <summary>
		/// The identifier of the shipping terms used for the order.
		/// Max length: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="termsId")]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string TermsId { get; set; }
		
		/// <summary>
		/// Sets the shipping zone of the order freight
		/// Max length: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zoneId")]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string ZoneId { get; set; }
	}
	
	/// <summary>
	/// Defines an address when updating a sales order.
	///Only the provided fields will be changed in address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PatchSalesOrderAddressDto
	{
		
		/// <summary>
		/// The city
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string City { get; set; }
		
		/// <summary>
		/// The country.
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryId")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string CountryId { get; set; }
		
		/// <summary>
		/// Address line 1
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line1")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Line1 { get; set; }
		
		/// <summary>
		/// Address line 2
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line2")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Line2 { get; set; }
		
		/// <summary>
		/// Address line 3
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line3")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Line3 { get; set; }
		
		/// <summary>
		/// Whether this address overrides the default address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overridesDefault")]
		public System.Nullable<System.Boolean> OverridesDefault { get; set; }
		
		/// <summary>
		/// The postal code
		/// Max length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// The state
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateId")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string StateId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PatchSalesOrderBillingDto
	{
		
		/// <summary>
		/// Defines an address when updating a sales order.
		///Only the provided fields will be changed in address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public PatchSalesOrderAddressDto Address { get; set; }
		
		/// <summary>
		/// Defines an contact when updating a sales order.
		///Only the provided fields will be changed in contact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public PatchSalesOrderContactDto Contact { get; set; }
	}
	
	/// <summary>
	/// Defines an contact when updating a sales order.
	///Only the provided fields will be changed in contact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PatchSalesOrderContactDto
	{
		
		/// <summary>
		/// Sets any attention for the contact
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attention")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Attention { get; set; }
		
		/// <summary>
		/// Sets the e-mail address of the contact
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Email { get; set; }
		
		/// <summary>
		/// Sets the full name of the contact
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Whether this contact overrides the default contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overridesDefault")]
		public System.Nullable<System.Boolean> OverridesDefault { get; set; }
		
		/// <summary>
		/// Sets the primary phone number of the contact
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone1")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Phone1 { get; set; }
	}
	
	/// <summary>
	/// The Visma.net.ERP.SalesOrders.Api.Application.Commands.PatchSalesOrder.PatchSalesOrderCommand is a command for updating parts of a sales order
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PatchSalesOrderCommand
	{
		
		[System.Runtime.Serialization.DataMember(Name="billing")]
		public PatchSalesOrderBillingDto Billing { get; set; }
		
		/// <summary>
		/// The branch with which this order is associated.
		/// Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="branchId")]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string BranchId { get; set; }
		
		/// <summary>
		/// Cancel by date for the order.
		///Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancelBy")]
		public System.Nullable<System.DateTimeOffset> CancelBy { get; set; }
		
		/// <summary>
		/// Override the CurrencyId for the order. Must be a valid currency Id.
		/// Max length: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyId")]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string CurrencyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public PatchSalesOrderCustomerDto Customer { get; set; }
		
		/// <summary>
		/// Sets the order date of the order.
		///Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// Description for the order
		///<br>Note that text fields should not contain any personally identifiable or otherwise sensitive data
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="financialInformation")]
		public PatchSalesOrderFinancialInfoDto FinancialInformation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="freight")]
		public PatchSalesOrderFreightDto Freight { get; set; }
		
		/// <summary>
		/// Any note to apply to the order header.
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Note { get; set; }
		
		/// <summary>
		/// Sets the unique identifier of the original order
		/// Max length: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalOrderId")]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string OriginalOrderId { get; set; }
		
		/// <summary>
		/// Sets the type code for the original sales order
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalOrderType")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string OriginalOrderType { get; set; }
		
		/// <summary>
		/// Sets the owner (employee) for the order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerId")]
		public string OwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentSettings")]
		public PatchSalesOrderPaymentSettingsDto PaymentSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="print")]
		public SalesOrderPrintDto Print { get; set; }
		
		/// <summary>
		/// The project with which this sales order is associated
		/// Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Sets the requested on date for the order.
		///Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestOn")]
		public System.Nullable<System.DateTimeOffset> RequestOn { get; set; }
		
		/// <summary>
		/// Sets default sales person for the order
		/// Max length: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="salesPersonId")]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string SalesPersonId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shipping")]
		public PatchSalesOrderShippingDto Shipping { get; set; }
		
		/// <summary>
		/// Sets the status code for the order. Must be "Open", "Hold" or "BackOrder".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Override the TaxZoneId for the order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxZoneId")]
		public string TaxZoneId { get; set; }
		
		/// <summary>
		/// When this option is set to `true`, the `costTotal` of the order will be calculated based on `replacementUnitCost`.
		///If option is set to `false`, the `costTotal` will be calculated based on `unitCost`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useReplacementCostForMarginAndProfit")]
		public System.Nullable<System.Boolean> UseReplacementCostForMarginAndProfit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PatchSalesOrderCustomerDto
	{
		
		/// <summary>
		/// The contact id for the customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactId")]
		public System.Nullable<System.Int32> ContactId { get; set; }
		
		/// <summary>
		/// The unique id of the the customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Sets the location for the customer supplied to use on the order.
		///Must be a valid active location for the customer/>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		/// <summary>
		/// The customer order text.
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Order { get; set; }
		
		/// <summary>
		/// The customer ref number text. If null or not supplied the value will not be changed
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refNo")]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string RefNo { get; set; }
		
		/// <summary>
		/// Sets the terms to use for the sales order.
		///Must be a valid terms identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="termsId")]
		public string TermsId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PatchSalesOrderFinancialInfoDto
	{
		
		/// <summary>
		/// The date when the cash discount is available for the invoice created for the order. Default date is set based on the terms selected in the order.
		///Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cashDiscountDate")]
		public System.Nullable<System.DateTimeOffset> CashDiscountDate { get; set; }
		
		/// <summary>
		/// The due date for the invoice created for the order. Default due date is set according to the credit terms.
		///Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dueDate")]
		public System.Nullable<System.DateTimeOffset> DueDate { get; set; }
		
		/// <summary>
		/// Sets the invoice date of the invoice that will be generated for the order.
		///Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceDate")]
		public System.Nullable<System.DateTimeOffset> InvoiceDate { get; set; }
		
		/// <summary>
		/// The reference number of the invoice generated for this order.
		///This can be used if the numbering sequence assigned to invoices is configured for manual numbering.
		/// Max length: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceId")]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string InvoiceId { get; set; }
		
		/// <summary>
		/// Sets if the order should be invoiced/billed separately
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceSeparately")]
		public System.Nullable<System.Boolean> InvoiceSeparately { get; set; }
		
		/// <summary>
		/// The post period for the invoice. This can be used to override the financial period. Must be a valid existing financial period.
		/// Max length: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postPeriod")]
		[System.ComponentModel.DataAnnotations.MaxLength(6)]
		public string PostPeriod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PatchSalesOrderFreightDto
	{
		
		/// <summary>
		/// The freight cost calculated for the sales order, can be manually set if orders Ship via code allows it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cost")]
		public System.Nullable<System.Double> Cost { get; set; }
		
		/// <summary>
		/// The additional freight charges for handling the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="premiumAmount")]
		public System.Nullable<System.Double> PremiumAmount { get; set; }
		
		/// <summary>
		/// The tax category that applies to the freight amount.
		///By default, it is the tax category associated with the ship via code selected for the order.
		/// Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxCategoryId")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string TaxCategoryId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PatchSalesOrderPaymentSettingsDto
	{
		
		/// <summary>
		/// The cash account associated with the set payment method.
		/// Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cashAccountId")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string CashAccountId { get; set; }
		
		/// <summary>
		/// Overrides the default payment method set on the customer. This must be a valid and active payment method id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentMethodId")]
		public string PaymentMethodId { get; set; }
		
		/// <summary>
		/// Sets the external reference number for the order. This must be set if order type requires it.
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentReference")]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string PaymentReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PatchSalesOrderShippingDto
	{
		
		/// <summary>
		/// Defines an address when updating a sales order.
		///Only the provided fields will be changed in address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public PatchSalesOrderAddressDto Address { get; set; }
		
		/// <summary>
		/// Defines an contact when updating a sales order.
		///Only the provided fields will be changed in contact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public PatchSalesOrderContactDto Contact { get; set; }
		
		/// <summary>
		/// The identifier of the point (such as a city or town) where the title of goods passes from the company to the customer.
		/// Max length: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fobPointId")]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string FobPointId { get; set; }
		
		/// <summary>
		/// Sets whether insurance applies to this shipping
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insurance")]
		public System.Nullable<System.Boolean> Insurance { get; set; }
		
		/// <summary>
		/// Sets the intrastat transaction type id for the sales order. Must be a valid intrastat transaction type id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intrastatTransactionTypeId")]
		public System.Nullable<System.Int32> IntrastatTransactionTypeId { get; set; }
		
		/// <summary>
		/// Sets the default site for the customer supplied to use on the order. Must be a valid site id
		///If empty string, the default site for order will be removed
		/// Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preferredWarehouseId")]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string PreferredWarehouseId { get; set; }
		
		/// <summary>
		/// Sets priority of the order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// Sets whether this is residential delivery
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="residentialDelivery")]
		public System.Nullable<System.Boolean> ResidentialDelivery { get; set; }
		
		/// <summary>
		/// Sets the shipping rule for the order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rule")]
		public string Rule { get; set; }
		
		/// <summary>
		/// Sets whether this is a saturday delivery
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="saturdayDelivery")]
		public System.Nullable<System.Boolean> SaturdayDelivery { get; set; }
		
		/// <summary>
		/// Sets the date the shipment is scheduled for
		///Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledDate")]
		public System.Nullable<System.DateTimeOffset> ScheduledDate { get; set; }
		
		/// <summary>
		/// Sets whether the order should be shipped separately or included in a batch segment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipSeparately")]
		public System.Nullable<System.Boolean> ShipSeparately { get; set; }
		
		/// <summary>
		/// Sets the unique id that represents the carrier and its service to be used for shipping the ordered goods. Must be a valid carrier id.
		///If empty string then the value will be set to null
		/// Max length: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipViaId")]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string ShipViaId { get; set; }
		
		/// <summary>
		/// The identifier of the shipping terms used for the order.
		/// Max length: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="termsId")]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string TermsId { get; set; }
		
		/// <summary>
		/// Sets the shipping zone of the order freight
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zoneId")]
		public string ZoneId { get; set; }
	}
	
	/// <summary>
	/// The sales order line which is set to patch
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PatchSalesOrderLineDto
	{
		
		/// <summary>
		/// Sets the branch with which this line is associated.
		///If `BranchId` is provided as (null), the value will be set from from order `BranchId`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="branchId")]
		public string BranchId { get; set; }
		
		/// <summary>
		/// Indicates if line is comissionable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commissionable")]
		public System.Nullable<System.Boolean> Commissionable { get; set; }
		
		/// <summary>
		/// Sets the description of the order line item. This will override the default description from the inventory item
		///<br>Note that text fields should not contain any personally identifiable or otherwise sensitive data
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Description { get; set; }
		
		/// <summary>
		/// Sets the manual currency discount amount for the line.
		///<remarks>
		///Note that the behavior of the 'discountAmount' field is affected by the 'hasManualDiscount' option.
		///If 'hasManualDiscount' is provided and set to "false", and 'discountAmount' is provided, the system will set the discountAmount according to the predefined rules.
		///</remarks>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discountAmount")]
		public System.Nullable<System.Double> DiscountAmount { get; set; }
		
		/// <summary>
		/// Sets the discount for the line if applicable. This must be one of the selectable discount codes.
		///<remarks>
		///Note that the behavior of the 'discountCode' field is affected by the 'hasManualDiscount' option.
		///If 'hasManualDiscount' is provided and set to "false", and 'discountCode' is provided, the system will set the discountCode according to the predefined rules.
		///</remarks>
		/// Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discountCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string DiscountCode { get; set; }
		
		/// <summary>
		/// Sets the manual percentage discount for the line.
		///<remarks>
		///Note that the behavior of the 'discountPercent' field is affected by the 'hasManualDiscount' option.
		///If 'hasManualDiscount' is provided and set to "false", and 'discountPercent' is provided, the system will set the discountPercent according to the predefined rules.
		///</remarks>
		/// Minimum: -100
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discountPercent")]
		[System.ComponentModel.DataAnnotations.Range(-100, 100)]
		public System.Nullable<System.Double> DiscountPercent { get; set; }
		
		/// <summary>
		/// Sets the external link for the line
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalLink")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ExternalLink { get; set; }
		
		/// <summary>
		/// Indicates that line level discount is applied manually.
		///<remarks>
		///Note that the behavior of the fields 'discountCode', 'discountPercent' and 'discountAmount' is affected by this option.
		///If 'hasManualDiscount' is provided and set to "false", and discount field(s) is provided, the system will set the line level discounts according to the predefined rules.
		///</remarks>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasManualDiscount")]
		public System.Nullable<System.Boolean> HasManualDiscount { get; set; }
		
		/// <summary>
		/// Indicates that the `unitPrice` in this line has been specified manually.
		///If set to "false", the system updates the unit price in the line according to predefined rules.
		///Note that the behavior of the field `unitPrice` is affected by this option.
		///If `hasManualPrice` is provided and set to "false", and `unitPrice` is provided, the system will set the `unitPrice` according to the predefined rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasManualPrice")]
		public System.Nullable<System.Boolean> HasManualPrice { get; set; }
		
		/// <summary>
		/// The line id of the line.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lineId")]
		public int LineId { get; set; }
		
		/// <summary>
		/// Any note to apply to the order header.
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Note { get; set; }
		
		/// <summary>
		/// The type of operation the line represents to the order. Acceptable values are 'Issue' or 'Receipt'. This must be a valid operation for sales order type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Sets the overship threshold in percent. If not set, information from the inventory item is used
		/// Minimum: 100
		/// Maximum: 999
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overshipThreshold")]
		[System.ComponentModel.DataAnnotations.Range(100, 999)]
		public System.Nullable<System.Double> OvershipThreshold { get; set; }
		
		/// <summary>
		/// The project task with which this sales order line is associated
		/// Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectTaskId")]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string ProjectTaskId { get; set; }
		
		/// <summary>
		/// Sets the purchase source of the line.
		///Accepted values are `dropShip` or `purchaseToOrder`, when null provided, value will be set from default value from the inventory item.
		///If the value was provided as '' (empty string), the value will set to null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchaseOrderSource")]
		public string PurchaseOrderSource { get; set; }
		
		/// <summary>
		/// Sets the quantity of items on the order line
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		/// <summary>
		/// Patch the reason code for the line. This must be one of the selectable reason codes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonCode")]
		public string ReasonCode { get; set; }
		
		/// <summary>
		/// Sets the date the order line is requested (Requested On)
		///Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestDate")]
		public System.Nullable<System.DateTimeOffset> RequestDate { get; set; }
		
		/// <summary>
		/// Overrides the Sales Account Id of the line. The value must be one of the selectable Accounts.
		///If not set, a value based on the rules is used
		/// Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="salesAccountId")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string SalesAccountId { get; set; }
		
		/// <summary>
		/// Sets the sales person for the line.
		///If `SalesPersonId` is provided as (null), the value will be set from from order `SalesPersonId`
		/// Max length: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="salesPersonId")]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string SalesPersonId { get; set; }
		
		/// <summary>
		/// Sets the day the order line should be shipped, so that the customer gets it on the requested date (Ship On).
		///Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipDate")]
		public System.Nullable<System.DateTimeOffset> ShipDate { get; set; }
		
		/// <summary>
		/// The way the line item should be shipped.
		///<br>One of the following options can be set:<br><list type="bullet"><item><term>CancelRemainder: </term><description>The ordered quantity should be delivered in one shipment</description></item><item><term>BackOrderAllowed: </term><description>The ordered quantity can be delivered in multiple shipments.</description></item><item><term>ShipComplete: </term><description>The ordered quantity should be delivered in one shipment.</description></item></list>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingRule")]
		public string ShippingRule { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
		
		/// <summary>
		/// Overrides the Subaccount setup for the line.
		///Each entry corresponds to a subaccount id/value pair
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subaccount")]
		public System.Collections.Generic.Dictionary<string, string> Subaccount { get; set; }
		
		/// <summary>
		/// Sets the Purchase Order Vendor for the line, can be set if the purchase order source is `purchaseToOrder` or `dropShip`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supplierId")]
		public string SupplierId { get; set; }
		
		/// <summary>
		/// Sets the supplier price for the line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supplierPrice")]
		public System.Nullable<System.Double> SupplierPrice { get; set; }
		
		/// <summary>
		/// Overrides the default tax category id. The value must be one of the selectable Tax Categories
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxCategoryId")]
		public string TaxCategoryId { get; set; }
		
		/// <summary>
		/// Sets the undership threshold in percent. If not set, information from the inventory item is used
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="undershipThreshold")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Double> UndershipThreshold { get; set; }
		
		/// <summary>
		/// Sets the unit cost of the product on the line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitCost")]
		public System.Nullable<System.Double> UnitCost { get; set; }
		
		/// <summary>
		/// Sets the Unit of measure for the line item. This will override the default UOM for the inventory item
		/// Max length: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitOfMeasure")]
		[System.ComponentModel.DataAnnotations.MaxLength(6)]
		public string UnitOfMeasure { get; set; }
		
		/// <summary>
		/// Sets the unit price for the product on the line.
		///If no price is set(null or omitted) the price will be set according to predefined rules based on the inventoryId and the customer.
		///Note that the behavior of the `unitPrice` field is affected by the `hasManualPrice` option.
		///If `hasManualPrice` is provided and set to "false", and `unitPrice` is provided, the system will set the `unitPrice` according to the predefined rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitPrice")]
		public System.Nullable<System.Double> UnitPrice { get; set; }
		
		/// <summary>
		/// Sets the warehouse the item should be shipped from. This will override the default, or the one set on the order head.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warehouseId")]
		public string WarehouseId { get; set; }
		
		/// <summary>
		/// Sets the warehouse location that will be used for the shipment generated for the order the warehouse location Id for this line.
		///This must be a valid location for `warehouseId` and will override the default if set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warehouseLocationId")]
		public string WarehouseLocationId { get; set; }
	}
	
	/// <summary>
	/// The Visma.net.ERP.SalesOrders.Api.Application.Commands.PatchSalesOrderLines.PatchSalesOrderLinesCommand is a command for updating the lines of a sales order
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PatchSalesOrderLinesCommand
	{
		
		/// <summary>
		/// The sales order lines that are set to patch
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lines")]
		public PatchSalesOrderLineDto[] Lines { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProblemDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The Visma.net.ERP.SalesOrders.Api.Dto.ProjectDto class defines a project reference for a sales order
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProjectDto
	{
		
		/// <summary>
		/// The description
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// An internal unique identifier of the project
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalId")]
		public System.Nullable<System.Int32> InternalId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SalesOrderBillingDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public AddressDto Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public ContactDto Contact { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SalesOrderCommissionDto
	{
		
		/// <summary>
		/// The commission amount
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// The order's commissionable amount
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commissionableAmount")]
		public System.Nullable<System.Double> CommissionableAmount { get; set; }
		
		/// <summary>
		/// The commission percent
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percent")]
		public System.Nullable<System.Double> Percent { get; set; }
		
		/// <summary>
		/// The id of the sales person that gets the commision
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="salesPersonId")]
		public string SalesPersonId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SalesOrderCustomerDto
	{
		
		/// <summary>
		/// The contact id for the customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactId")]
		public System.Nullable<System.Int32> ContactId { get; set; }
		
		/// <summary>
		/// The unique id of the the customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// An internal unique id of the customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalId")]
		public System.Nullable<System.Int32> InternalId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public CustomerLocationDto Location { get; set; }
		
		/// <summary>
		/// The customer name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The customer order text
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public string Order { get; set; }
		
		/// <summary>
		/// The customer ref number text
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refNo")]
		public string RefNo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxZone")]
		public CdDescriptionPairDto TaxZone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SalesOrderDiscountDto
	{
		
		/// <summary>
		/// The amount of the discount
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discountAmount")]
		public System.Nullable<System.Double> DiscountAmount { get; set; }
		
		/// <summary>
		/// The identifier of the discount applied to the order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discountId")]
		public string DiscountId { get; set; }
		
		/// <summary>
		/// The discount percent, if the discount is defined to be calculated as a percentage
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discountPercent")]
		public System.Nullable<System.Double> DiscountPercent { get; set; }
		
		/// <summary>
		/// The identifier of the discount sequence of the discount ID applied to the order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discountSequenceId")]
		public string DiscountSequenceId { get; set; }
		
		/// <summary>
		/// The amount used as a base for discount calculation if the discount is based on amount.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discountableAmount")]
		public System.Nullable<System.Double> DiscountableAmount { get; set; }
		
		/// <summary>
		/// The quantity used as a base for discount calculation if the discount is based on quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discountableQuantity")]
		public System.Nullable<System.Double> DiscountableQuantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="freeItem")]
		public CdDescriptionPairDto FreeItem { get; set; }
		
		/// <summary>
		/// The quantity of the free item. Used to set the quantity for the order line generate by a free item discount
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeItemQuantity")]
		public System.Nullable<System.Double> FreeItemQuantity { get; set; }
		
		/// <summary>
		/// Indicates that the discount has been applied manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isManual")]
		public System.Nullable<System.Boolean> IsManual { get; set; }
		
		/// <summary>
		/// The number of discount line set for the order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manualOrderIndex")]
		public System.Nullable<System.Int32> ManualOrderIndex { get; set; }
		
		/// <summary>
		/// Indicates if the discount has been cancelled for the order and is not applicable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipDiscount")]
		public System.Nullable<System.Boolean> SkipDiscount { get; set; }
		
		/// <summary>
		/// The type of discount whose sequence was applied to the document(Group or Document)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SalesOrderDto
	{
		
		/// <summary>
		/// The attachments of the order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public AttachmentDto[] Attachments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billing")]
		public SalesOrderBillingDto Billing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="branch")]
		public CdDescriptionPairDto Branch { get; set; }
		
		/// <summary>
		/// The cancel date for the order
		///Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancelBy")]
		public System.Nullable<System.DateTimeOffset> CancelBy { get; set; }
		
		/// <summary>
		/// The user name of the creator of the order. If the order was created by an API call this field will be null or empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		/// <summary>
		/// CurrencyId for the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyId")]
		public string CurrencyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public SalesOrderCustomerDto Customer { get; set; }
		
		/// <summary>
		/// Date the order was submitted
		///Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// Description of the order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="financialInformation")]
		public SalesOrderFinancialInfoDto FinancialInformation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="freight")]
		public SalesOrderFreightDto Freight { get; set; }
		
		/// <summary>
		/// Whether the order is ROT/RUT deductible
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isRotRutDeductable")]
		public System.Nullable<System.Boolean> IsRotRutDeductable { get; set; }
		
		/// <summary>
		/// Date the order was last modified
		///Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		/// <summary>
		/// Any notes on the order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// The unique identifier of the order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderId")]
		public string OrderId { get; set; }
		
		/// <summary>
		/// The total quantity of inventory items in the order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderQty")]
		public System.Nullable<System.Double> OrderQty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public SalesOrderOriginDto Origin { get; set; }
		
		/// <summary>
		/// The unique identifier of the original order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalOrderId")]
		public string OriginalOrderId { get; set; }
		
		/// <summary>
		/// The type code for the original sales order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalOrderType")]
		public string OriginalOrderType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public EmployeeDto Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentSettings")]
		public SalesOrderPaymentDto PaymentSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="print")]
		public SalesOrderPrintDto Print { get; set; }
		
		/// <summary>
		/// The Visma.net.ERP.SalesOrders.Api.Dto.ProjectDto class defines a project reference for a sales order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="project")]
		public ProjectDto Project { get; set; }
		
		/// <summary>
		/// Date the order was requested
		///Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestOn")]
		public System.Nullable<System.DateTimeOffset> RequestOn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salesPerson")]
		public SalesPersonDto SalesPerson { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shipping")]
		public SalesOrderShippingDto Shipping { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public SalesOrderStatusDto Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totals")]
		public SalesOrderTotalsDto Totals { get; set; }
		
		/// <summary>
		/// The type code for the sales order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// When this option is set to `true`, the `costTotal` of the order will be calculated based on `replacementUnitCost`.
		///If option is set to `false`, the `costTotal` will be calculated based on `unitCost`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useReplacementCostForMarginAndProfit")]
		public System.Nullable<System.Boolean> UseReplacementCostForMarginAndProfit { get; set; }
		
		/// <summary>
		/// An internal order version used for detecting concurrent updates to an order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SalesOrderFinancialInfoDto
	{
		
		/// <summary>
		/// The date for the cash discount
		///Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cashDiscountDate")]
		public System.Nullable<System.DateTimeOffset> CashDiscountDate { get; set; }
		
		/// <summary>
		/// The due date for the invoice
		///Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dueDate")]
		public System.Nullable<System.DateTimeOffset> DueDate { get; set; }
		
		/// <summary>
		/// The invoice date
		///Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceDate")]
		public System.Nullable<System.DateTimeOffset> InvoiceDate { get; set; }
		
		/// <summary>
		/// The id of the invoice issued for the order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceId")]
		public string InvoiceId { get; set; }
		
		/// <summary>
		/// Whether the order should be invoiced separately
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceSeparately")]
		public System.Nullable<System.Boolean> InvoiceSeparately { get; set; }
		
		/// <summary>
		/// The post period for the invoice
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postPeriod")]
		public string PostPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="terms")]
		public CdDescriptionPairDto Terms { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SalesOrderFreightDto
	{
		
		/// <summary>
		/// The amounts calculated based on the ship terms.
		/// ///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// The amounts calculated based on the ship terms in base currency of the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountInBaseCurrency")]
		public System.Nullable<System.Double> AmountInBaseCurrency { get; set; }
		
		/// <summary>
		/// The freight cost calculated for the sales order,
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cost")]
		public System.Nullable<System.Double> Cost { get; set; }
		
		/// <summary>
		/// The freight cost calculated for the sales order in base currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costInBaseCurrency")]
		public System.Nullable<System.Double> CostInBaseCurrency { get; set; }
		
		/// <summary>
		/// The additional freight charges for handling the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="premiumAmount")]
		public System.Nullable<System.Double> PremiumAmount { get; set; }
		
		/// <summary>
		/// The additional freight charges in base currency for handling the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="premiumAmountInBaseCurrency")]
		public System.Nullable<System.Double> PremiumAmountInBaseCurrency { get; set; }
		
		/// <summary>
		/// The tax category that applies to the freight amount.
		///By default, it is the tax category associated with the ship via code selected for the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxCategoryId")]
		public string TaxCategoryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="volume")]
		public System.Nullable<System.Double> Volume { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Double> Weight { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SalesOrderOriginDto
	{
		
		/// <summary>
		/// Links applicable for the dto
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, DtoLink> _links { get; set; }
		
		/// <summary>
		/// The unique id of the origin order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderId")]
		public string OrderId { get; set; }
		
		/// <summary>
		/// The order type code for the origin order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderType")]
		public string OrderType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SalesOrderPaymentDto
	{
		
		/// <summary>
		/// The cash account to use
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cashAccountId")]
		public string CashAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentMethod")]
		public CdDescriptionPairDto PaymentMethod { get; set; }
		
		/// <summary>
		/// The payment reference
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentReference")]
		public string PaymentReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SalesPersonDto
	{
		
		/// <summary>
		/// The description
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SalesOrderShippingDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public AddressDto Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public ContactDto Contact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fobPoint")]
		public CdDescriptionPairDto FobPoint { get; set; }
		
		/// <summary>
		/// Whether insurance applies to this shipping
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insurance")]
		public System.Nullable<System.Boolean> Insurance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intrastatTransactionType")]
		public IdDescriptionPairDto IntrastatTransactionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preferredWarehouse")]
		public CdDescriptionPairDto PreferredWarehouse { get; set; }
		
		/// <summary>
		/// Priority of the order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// Whether this is residential delivery
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="residentialDelivery")]
		public System.Nullable<System.Boolean> ResidentialDelivery { get; set; }
		
		/// <summary>
		/// The shipping rule
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rule")]
		public string Rule { get; set; }
		
		/// <summary>
		/// Whether this is a saturday delivery
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="saturdayDelivery")]
		public System.Nullable<System.Boolean> SaturdayDelivery { get; set; }
		
		/// <summary>
		/// The shipping scheduled date
		///Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledDate")]
		public System.Nullable<System.DateTimeOffset> ScheduledDate { get; set; }
		
		/// <summary>
		/// Whether this order can/is shipped separately
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipSeparately")]
		public System.Nullable<System.Boolean> ShipSeparately { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shipVia")]
		public CdDescriptionPairDto ShipVia { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="terms")]
		public CdDescriptionPairDto Terms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public CdDescriptionPairDto Zone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SalesOrderStatusDto
	{
		
		/// <summary>
		/// Whether this order is in a cancelled state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancelled")]
		public System.Nullable<System.Boolean> Cancelled { get; set; }
		
		/// <summary>
		/// The status code for the order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Whether this order is in a held state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hold")]
		public System.Nullable<System.Boolean> Hold { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SalesOrderTotalsDto
	{
		
		/// <summary>
		/// The total of the costs on the lines of the sales order. How the `costTotal` is calculated is dependent on the option `useReplacementCostForMarginAndProfit`.
		///If this option is `true` the `costTotal` will be calculated based on the `replacementUnitCost`.
		///If this option is `false`, the `costTotal` will be calculate based on `unitCost`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costTotal")]
		public System.Nullable<System.Double> CostTotal { get; set; }
		
		/// <summary>
		/// The total of the costs on the lines of the sales order in base currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costTotalInBaseCurrency")]
		public System.Nullable<System.Double> CostTotalInBaseCurrency { get; set; }
		
		/// <summary>
		/// The discount total
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discountTotal")]
		public System.Nullable<System.Double> DiscountTotal { get; set; }
		
		/// <summary>
		/// The discount total in base currency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discountTotalInBaseCurrency")]
		public System.Nullable<System.Double> DiscountTotalInBaseCurrency { get; set; }
		
		/// <summary>
		/// The freight cost calculated for the sales order. Not applicable for transfer order types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freightCost")]
		public System.Nullable<System.Double> FreightCost { get; set; }
		
		/// <summary>
		/// The freight cost calculated for the sales order in base currency. Not applicable for transfer order types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freightCostInBaseCurrency")]
		public System.Nullable<System.Double> FreightCostInBaseCurrency { get; set; }
		
		/// <summary>
		/// The freight amount calculated in accordance with the shipping terms. Not applicable for transfer order types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freightTotal")]
		public System.Nullable<System.Double> FreightTotal { get; set; }
		
		/// <summary>
		/// The freight amount calculated in accordance with the shipping terms in base currency. Not applicable for transfer order types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freightTotalInBaseCurrency")]
		public System.Nullable<System.Double> FreightTotalInBaseCurrency { get; set; }
		
		/// <summary>
		/// The order total
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderTotal")]
		public System.Nullable<System.Double> OrderTotal { get; set; }
		
		/// <summary>
		/// The order total in base currency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderTotalInBaseCurrency")]
		public System.Nullable<System.Double> OrderTotalInBaseCurrency { get; set; }
		
		/// <summary>
		/// The VAT exempt total
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxExemptTotal")]
		public System.Nullable<System.Double> TaxExemptTotal { get; set; }
		
		/// <summary>
		/// The VAT exempt total in base currency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxExemptTotalInBaseCurrency")]
		public System.Nullable<System.Double> TaxExemptTotalInBaseCurrency { get; set; }
		
		/// <summary>
		/// The tax total
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxTotal")]
		public System.Nullable<System.Double> TaxTotal { get; set; }
		
		/// <summary>
		/// The tax total in base currency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxTotalInBaseCurrency")]
		public System.Nullable<System.Double> TaxTotalInBaseCurrency { get; set; }
		
		/// <summary>
		/// The VAT taxable total
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxableTotal")]
		public System.Nullable<System.Double> TaxableTotal { get; set; }
		
		/// <summary>
		/// The VAT taxable in base currency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxableTotalInBaseCurrency")]
		public System.Nullable<System.Double> TaxableTotalInBaseCurrency { get; set; }
		
		/// <summary>
		/// The sum of unbilled amounts for the lines
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unbilledAmount")]
		public System.Nullable<System.Double> UnbilledAmount { get; set; }
		
		/// <summary>
		/// The sum of unbilled amounts for the lines in base currency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unbilledAmountInBaseCurrency")]
		public System.Nullable<System.Double> UnbilledAmountInBaseCurrency { get; set; }
		
		/// <summary>
		/// The sum of unshipped amounts for the lines
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unshippedAmount")]
		public System.Nullable<System.Double> UnshippedAmount { get; set; }
		
		/// <summary>
		/// The sum of unshipped amounts for the lines in base currency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unshippedAmountInBaseCurrency")]
		public System.Nullable<System.Double> UnshippedAmountInBaseCurrency { get; set; }
	}
	
	/// <summary>
	/// The Visma.net.ERP.SalesOrders.Api.Dto.SalesOrderExpansions enumeration defines individual parts of the Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderDto that can be filled
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SalesOrderExpansions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Billing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Payment = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FinancialInformation = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Shipping = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Customer = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Owner = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Origin = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Note = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Freight = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Attachments = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SalesOrderLineDto
	{
		
		/// <summary>
		/// The attachments associated with this sales order line
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public AttachmentDto[] Attachments { get; set; }
		
		/// <summary>
		/// The base order quantity for this line
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseOrderQuantity")]
		public System.Nullable<System.Double> BaseOrderQuantity { get; set; }
		
		/// <summary>
		/// The billed quantity for this line
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billedQuantity")]
		public System.Nullable<System.Double> BilledQuantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="branch")]
		public CdDescriptionPairDto Branch { get; set; }
		
		/// <summary>
		/// Indicates if line is comissionable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commissionable")]
		public System.Nullable<System.Boolean> Commissionable { get; set; }
		
		/// <summary>
		/// Whether this order line is completed or not
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completed")]
		public System.Nullable<System.Boolean> Completed { get; set; }
		
		/// <summary>
		/// Any description for this order line
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The discount amount for this line
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discountAmount")]
		public System.Nullable<System.Double> DiscountAmount { get; set; }
		
		/// <summary>
		/// Code of discount applied to this line
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discountCode")]
		public string DiscountCode { get; set; }
		
		/// <summary>
		/// Discount percentage applied to this line
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discountPercent")]
		public System.Nullable<System.Double> DiscountPercent { get; set; }
		
		/// <summary>
		/// Id of discount sequence applied to this line
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discountSequenceId")]
		public string DiscountSequenceId { get; set; }
		
		/// <summary>
		/// The extended price for this sales order line
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extendedPrice")]
		public System.Nullable<System.Double> ExtendedPrice { get; set; }
		
		/// <summary>
		/// Any external link for this sales order line
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalLink")]
		public string ExternalLink { get; set; }
		
		/// <summary>
		/// Whether these item(s) are free or not
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeItem")]
		public System.Nullable<System.Boolean> FreeItem { get; set; }
		
		/// <summary>
		/// Discount is applied manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasManualDiscount")]
		public System.Nullable<System.Boolean> HasManualDiscount { get; set; }
		
		/// <summary>
		/// Unit price is applied manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasManualPrice")]
		public System.Nullable<System.Boolean> HasManualPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inventory")]
		public SalesOrderLineInventoryDto Inventory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inventoryAlternateId")]
		public string InventoryAlternateId { get; set; }
		
		/// <summary>
		/// The line number of the sales order line
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineId")]
		public System.Nullable<System.Int32> LineId { get; set; }
		
		/// <summary>
		/// The line total before any discounts are applied
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineTotalBeforeDiscount")]
		public System.Nullable<System.Double> LineTotalBeforeDiscount { get; set; }
		
		/// <summary>
		/// The type of sales order line
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineType")]
		public string LineType { get; set; }
		
		/// <summary>
		/// Any note that has been applied to this order line
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// Indicates if line has quantity left to be shipped
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openLine")]
		public System.Nullable<System.Boolean> OpenLine { get; set; }
		
		/// <summary>
		/// The open quantity for this line
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openQuantity")]
		public System.Nullable<System.Double> OpenQuantity { get; set; }
		
		/// <summary>
		/// The type of operation the line represents to the order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// The date the order line was added
		///Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderDate")]
		public System.Nullable<System.DateTimeOffset> OrderDate { get; set; }
		
		/// <summary>
		/// The overship threshold value (%)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overshipThreshold")]
		public System.Nullable<System.Double> OvershipThreshold { get; set; }
		
		/// <summary>
		/// The project task with which this sales order line is associated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectTaskId")]
		public string ProjectTaskId { get; set; }
		
		/// <summary>
		/// Information about line purchase order source
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchaseOrderSource")]
		public string PurchaseOrderSource { get; set; }
		
		/// <summary>
		/// The quantity of unit of measure this line represents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		/// <summary>
		/// The quantity on shipments for this line
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantityOnShipments")]
		public System.Nullable<System.Double> QuantityOnShipments { get; set; }
		
		/// <summary>
		/// The reason code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonCode")]
		public string ReasonCode { get; set; }
		
		/// <summary>
		/// The replacement unit cost of an item. This is set based on the supplier price.
		///If no supplier price found, the last price of the item's default supplier will be used.
		///If no default supplier is set, the last cost of the item will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replacementUnitCost")]
		public System.Nullable<System.Double> ReplacementUnitCost { get; set; }
		
		/// <summary>
		/// The request date for this order line
		///Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestDate")]
		public System.Nullable<System.DateTimeOffset> RequestDate { get; set; }
		
		/// <summary>
		/// The general ledger account this line applies to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="salesAccountId")]
		public string SalesAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salesPerson")]
		public SalesPersonDto SalesPerson { get; set; }
		
		/// <summary>
		/// The expected shipping date for this order line
		///Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipDate")]
		public System.Nullable<System.DateTimeOffset> ShipDate { get; set; }
		
		/// <summary>
		/// The shipping rule code for this order line
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingRule")]
		public string ShippingRule { get; set; }
		
		/// <summary>
		/// Used to apply sort order to a set of lines
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
		
		/// <summary>
		/// The general ledger subaccount this line applies to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subaccount")]
		public System.Collections.Generic.Dictionary<string, string> Subaccount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supplier")]
		public SupplierDto Supplier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supplierPrice")]
		public System.Nullable<System.Double> SupplierPrice { get; set; }
		
		/// <summary>
		/// The Tax Category Id applying to this order line
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxCategoryId")]
		public string TaxCategoryId { get; set; }
		
		/// <summary>
		/// The undership threshold value (%)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="undershipThreshold")]
		public System.Nullable<System.Double> UndershipThreshold { get; set; }
		
		/// <summary>
		/// The unit cost of items on this order line
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitCost")]
		public System.Nullable<System.Double> UnitCost { get; set; }
		
		/// <summary>
		/// The unit of measure (UOM) for the sales order line
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitOfMeasure")]
		public string UnitOfMeasure { get; set; }
		
		/// <summary>
		/// The unit price for items on this order line
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitPrice")]
		public System.Nullable<System.Double> UnitPrice { get; set; }
		
		/// <summary>
		/// The Site Id for items on this line
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warehouseId")]
		public string WarehouseId { get; set; }
		
		/// <summary>
		/// Defines a warehouse location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warehouseLocation")]
		public LocationDto WarehouseLocation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SalesOrderLineInventoryDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseUnit")]
		public string BaseUnit { get; set; }
		
		/// <summary>
		/// The description
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SupplierDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SalesOrderLineDtoPagedResult
	{
		
		/// <summary>
		/// Gets or sets the link to the next page with more results. If set to null then no more records are present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPage")]
		public string NextPage { get; set; }
		
		/// <summary>
		/// Gets or sets the total number of items available. If set to null, then the total number of items cannot be determined
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
		
		/// <summary>
		/// Gets or sets the items that are paged
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SalesOrderLineDto[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SalesOrderListDto
	{
		
		/// <summary>
		/// Links applicable for the dto
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, DtoLink> _links { get; set; }
		
		/// <summary>
		/// The currency id for the order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// The customer Id for the order (a.k.a CustoemrCd)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerId")]
		public string CustomerId { get; set; }
		
		/// <summary>
		/// The name of the customer as it appears on the order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerName")]
		public string CustomerName { get; set; }
		
		/// <summary>
		/// The customer order link
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerOrder")]
		public string CustomerOrder { get; set; }
		
		/// <summary>
		/// The order reference number of the customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerRefNo")]
		public string CustomerRefNo { get; set; }
		
		/// <summary>
		/// The order date
		///Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// Any description on the order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The date and time the order was last modified
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		/// <summary>
		/// The customer location for this order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The order id (a.k.a OrderCd) for the order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderId")]
		public string OrderId { get; set; }
		
		/// <summary>
		/// The total number of items on the order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderQty")]
		public System.Nullable<System.Double> OrderQty { get; set; }
		
		/// <summary>
		/// The total amount on the order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderTotal")]
		public System.Nullable<System.Double> OrderTotal { get; set; }
		
		/// <summary>
		/// The date the order is requested
		///Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestOn")]
		public System.Nullable<System.DateTimeOffset> RequestOn { get; set; }
		
		/// <summary>
		/// The date shipment is scheduled
		///Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingScheduledDate")]
		public System.Nullable<System.DateTimeOffset> ShippingScheduledDate { get; set; }
		
		/// <summary>
		/// The current status of the order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The type of the order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SalesOrderListDtoPagedResult
	{
		
		/// <summary>
		/// Gets or sets the link to the next page with more results. If set to null then no more records are present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPage")]
		public string NextPage { get; set; }
		
		/// <summary>
		/// Gets or sets the total number of items available. If set to null, then the total number of items cannot be determined
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
		
		/// <summary>
		/// Gets or sets the items that are paged
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SalesOrderListDto[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SalesOrderRotRutDistributionDto
	{
		
		/// <summary>
		/// The amount
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Whether this is extra or not
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extra")]
		public System.Nullable<System.Boolean> Extra { get; set; }
		
		/// <summary>
		/// Reference to the order line
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineId")]
		public System.Nullable<System.Int32> LineId { get; set; }
		
		/// <summary>
		/// The personal id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personalId")]
		public string PersonalId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SalesOrderRotRutDto
	{
		
		/// <summary>
		/// The appartment reference
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appartment")]
		public string Appartment { get; set; }
		
		/// <summary>
		/// Whether the ROT/RUT is distributed automatically
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distributedAutomatically")]
		public System.Nullable<System.Boolean> DistributedAutomatically { get; set; }
		
		/// <summary>
		/// The distrinbution entries
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distribution")]
		public SalesOrderRotRutDistributionDto[] Distribution { get; set; }
		
		/// <summary>
		/// The estate reference
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estate")]
		public string Estate { get; set; }
		
		/// <summary>
		/// The organization number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organizationNumber")]
		public string OrganizationNumber { get; set; }
		
		/// <summary>
		/// The type of ROT/RUT
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderShipmentDto specifies a shipment line detail for a sales order
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SalesOrderShipmentDto
	{
		
		/// <summary>
		/// The date of the shipment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// The id of a shipments created for the order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The type of inventory document created for the shipment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventoryDocumentType")]
		public string InventoryDocumentType { get; set; }
		
		/// <summary>
		/// The id of the inventory document created for the shipment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventoryReferenceId")]
		public string InventoryReferenceId { get; set; }
		
		/// <summary>
		/// The id of the invoice
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceId")]
		public string InvoiceId { get; set; }
		
		/// <summary>
		/// The type of invoice
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceType")]
		public string InvoiceType { get; set; }
		
		/// <summary>
		/// The quantity of goods on the shipment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		/// <summary>
		/// The type of the shipment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The volume of the shipped goods
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volume")]
		public System.Nullable<System.Double> Volume { get; set; }
		
		/// <summary>
		/// The weight of the shipped goods
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Double> Weight { get; set; }
	}
	
	/// <summary>
	/// The Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderTaxDto specifies a tax line detail for a sales order
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SalesOrderTaxDto
	{
		
		/// <summary>
		/// Indicates if the taxable amount will be included in taxExemptTotal
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptTax")]
		public System.Nullable<System.Boolean> ExemptTax { get; set; }
		
		/// <summary>
		/// Indicates if the taxable amount will be included in taxableTotal
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeInTaxable")]
		public System.Nullable<System.Boolean> IncludeInTaxable { get; set; }
		
		/// <summary>
		/// Indicates if the tax calculated is treated as a pending tax
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPendingTax")]
		public System.Nullable<System.Boolean> IsPendingTax { get; set; }
		
		/// <summary>
		/// Indicates if the tax is treated as a reverse tax
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isReverseTax")]
		public System.Nullable<System.Boolean> IsReverseTax { get; set; }
		
		/// <summary>
		/// Indicates if the tax calculated is treated as a statistical tax
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isStatisticalTax")]
		public System.Nullable<System.Boolean> IsStatisticalTax { get; set; }
		
		/// <summary>
		/// The calculated tax amount for the specific tax
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxAmount")]
		public System.Nullable<System.Double> TaxAmount { get; set; }
		
		/// <summary>
		/// The unique tax identifier of the specific tax applied to the document
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxId")]
		public string TaxId { get; set; }
		
		/// <summary>
		/// The tax rate used for the tax
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxRate")]
		public System.Nullable<System.Double> TaxRate { get; set; }
		
		/// <summary>
		/// The type of tax, which can be Sales, Use, VAT or Withholding
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxType")]
		public string TaxType { get; set; }
		
		/// <summary>
		/// The calculated taxable amount for the specific tax
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxableAmount")]
		public System.Nullable<System.Double> TaxableAmount { get; set; }
	}
	
	/// <summary>
	/// Defines an error response for validation problems
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SalesOrderValidationProblemDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// List with details for all the validation problems
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public ValidationErrorCodeDetails[] Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public System.Collections.Generic.Dictionary<string, string[]> Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Defines details related to validation problems
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationErrorCodeDetails
	{
		
		/// <summary>
		/// Error code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Detailed validation message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Extra parameters related to the validation problem.
		///<remarks>If the validation problem refers to a particular field the "property" element will contain the field name</remarks>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, object> Parameters { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets a list of customers
		/// Sample request:
		/// 
		/// GET /customers?filter=visma&pageSize=10
		/// Customers_GetList_ api/v3/Customers
		/// </summary>
		/// <param name="filter">An optional text string to find customers matching (searching fields id, name, gln, tax registration id). If not specified all customers are returned.</param>
		/// <param name="pageSize">The number of customers retrieved per page. If not specified, the default value of 100 will be used.</param>
		/// <param name="pageIndex">The zero based page index to retrieve</param>
		/// <returns>Returns the list of customers found</returns>
		public async Task<CustomerDtoPagedResult> Customers_GetList_Async(string filter, int pageSize, int pageIndex, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v3/Customers?filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageIndex="+pageIndex;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CustomerDtoPagedResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a list of locations for the specified customer
		/// Sample rquest:
		/// 
		/// GET /customers/10000/locations
		/// Customers_GetCustomerLocationList_customerIdlocations api/v3/Customers/{customerId}/locations
		/// </summary>
		/// <param name="customerId">The customer id (CustomerCd) to retrieve locations for</param>
		/// <returns>List of locations for the specified customer</returns>
		public async Task<CustomerLocationItemDto[]> Customers_GetCustomerLocationList_customerIdlocationsAsync(string customerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v3/Customers/"+ (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"/locations";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CustomerLocationItemDto[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets an inventory summary for inventory items.
		/// Sample request:
		/// 
		/// GET /inventory?inventoryId=Item1
		/// 
		/// GET /inventory?warehouseId=MAIN&modifiedSince=2021-08-01T12:00:00&pageSize=1000
		/// 
		/// GET /inventory?inventoryId=Item1&InventoryId=Item2&expand=location,attribute
		/// 
		/// GET /inventory?expand=location&attributeFilter=WEBSHOP:1
		/// Inventory_GetList_ api/v3/Inventory
		/// </summary>
		/// <param name="inventoryId">A list of zero or more inventory items to get a summary for. If no inventoryId is passed, all inventory items will be included in the response.</param>
		/// <param name="warehouseId">A list of zero or more warehouses to get a summary for. If no warehouse is supplied, all warehouses will be included in the response.</param>
		/// <param name="locationId">A list of zero or more locations to get a summary for. If no location is supplied, all locations will be included in the response.</param>
		/// <param name="expand">An additional option to include location detail information with the warehouse summary, or attribute details for the inventory item. If this is not supplied, location information or attributes will not be included in the response.</param>
		/// <param name="modifiedSince">A date/time value for filtering when an inventory item's warehouse or location availability last changed
		///Unless a specific time zone offset is included (e.g. '2012-12-24T12:15:14+02:00'), the date is considered to be in the UTC time zone.</param>
		/// <param name="attributeFilter">One or more attribute filter values specified as attribute-id:attribute-value. For example "attributeFilter=WEBSHOP:1&attributeFilter=AnotherAttribute:someValue"
		///If two attributeFilter values have the same attribute-Id either one need to match.</param>
		/// <param name="pageSize">The number of inventory items retrieved per page. If not specified the default pagesize is 10000 items per page</param>
		/// <param name="pageIndex">Gets or sets the zero based page index to get</param>
		/// <returns>Returns list of inventory items found</returns>
		public async Task<InventoryItemAvailabilityDtoPagedResult> Inventory_GetList_Async(string[] inventoryId, string[] warehouseId, string[] locationId, InventoryAvailabilityExpansions[] expand, System.DateTimeOffset modifiedSince, string[] attributeFilter, int pageSize, int pageIndex, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v3/Inventory?"+string.Join("&", inventoryId.Select(z => $"inventoryId={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", warehouseId.Select(z => $"warehouseId={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", locationId.Select(z => $"locationId={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expand.Select(z => $"expand={z}"))+"&modifiedSince=" + modifiedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", attributeFilter.Select(z => $"attributeFilter={System.Uri.EscapeDataString(z.ToString())}"))+"&pageSize="+pageSize+"&pageIndex="+pageIndex;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<InventoryItemAvailabilityDtoPagedResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a paged list with sales orders of any type
		/// Sample requests:
		/// 
		/// `GET /salesorders`
		/// 
		/// `GET /salesorders?customerId=10000&status=Open&pageSize=10`
		/// 
		/// `GET /salesorders?orderBy=lastModified%20asc`
		/// SalesOrders_GetList_ api/v3/SalesOrders
		/// </summary>
		/// <param name="customerId">The customer for which to retrieve orders. If omitted or empty, orders for all customers are included</param>
		/// <param name="status">The order status to include in the result. If omitted or empty, orders with any status are included.</param>
		/// <param name="modifiedSince">A date/time value for filtering when a sales order last changed.
		///Unless a specific time zone offset is included (e.g. '2012-12-24T12:15:14+02:00'), the date is considered to be in the UTC time zone.</param>
		/// <param name="pageSize">The number of customers retrieved per page</param>
		/// <param name="pageIndex">The zero based page index to retrieve</param>
		/// <param name="orderBy">The field to order the list by. Can be one of `created`, `lastModified`, or `orderId` followed by an optional sort direction (`asc` or `desc`), default direction is `asc` (ascending) if not present.</param>
		/// <param name="filter">A filter for the list, applied to the orderId</param>
		/// <returns>Returns a list of Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderListDto found.</returns>
		public async Task<SalesOrderListDtoPagedResult> SalesOrders_GetList_Async(string customerId, string status, System.DateTimeOffset modifiedSince, int pageSize, int pageIndex, string orderBy, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v3/SalesOrders?customerId=" + (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"&status=" + (status==null? "" : System.Uri.EscapeDataString(status))+"&modifiedSince=" + modifiedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&pageSize="+pageSize+"&pageIndex="+pageIndex+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SalesOrderListDtoPagedResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Adds a new sales order to the system
		/// Sample requests:
		/// 
		/// ```
		/// POST /salesorders
		/// {
		/// "customer": {
		/// "id": "10001",
		/// },
		/// "type": "SO"
		/// }
		/// ```
		/// ```
		/// POST /salesorders
		/// {
		/// "customer": {
		/// "id": "10000",
		/// "order": "some-customer-order-nbr"
		/// },
		/// "type": "SO",
		/// "description": "sample request order",
		/// "status": "Hold",
		/// "orderLines": [
		/// {
		/// "inventoryId": "StockItem1",
		/// "quantity": 4,
		/// "unitPrice": 101.25
		/// }
		/// ]
		/// }
		/// ```
		/// SalesOrders_CreateNewItem_ api/v3/SalesOrders
		/// </summary>
		/// <param name="requestBody">Information about the sales order to create</param>
		public async Task SalesOrders_CreateNewItem_Async(NewSalesOrderCommand requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v3/SalesOrders";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a paged list with sales orders of a specific type
		/// Sample requests:
		/// 
		/// `GET /salesorders/SO`
		/// 
		/// `GET /salesorders/SO?customerId=10000&status=Open&pageSize=10`
		/// 
		/// `GET /salesorders/SO?orderBy=created%20desc`
		/// SalesOrders_GetList_type api/v3/SalesOrders/{type}
		/// </summary>
		/// <param name="type">The type of sales orders to get.</param>
		/// <param name="customerId">The customer for which to retrieve orders. If omitted or empty, orders for all customers are included</param>
		/// <param name="status">The order status to include in the result. If omitted or empty, orders with any status are included.</param>
		/// <param name="modifiedSince">A date/time value for filtering when a sales order last changed.
		///Unless a specific time zone offset is included (e.g. '2012-12-24T12:15:14+02:00'), the date is considered to be in the UTC time zone.</param>
		/// <param name="pageSize">The number of customers retrieved per page</param>
		/// <param name="pageIndex">The zero based page index to retrieve</param>
		/// <param name="orderBy">The field to order the list by. Can be one of `created`, `lastModified`, or `orderId` followed by an optional sort direction (`asc` or `desc`), default direction is `asc` (ascending) if not present.</param>
		/// <param name="filter">A filter for the list, applied to the orderId</param>
		/// <returns>Returns a list of Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderListDto found.</returns>
		public async Task<SalesOrderListDtoPagedResult> SalesOrders_GetList_typeAsync(string type, string customerId, string status, System.DateTimeOffset modifiedSince, int pageSize, int pageIndex, string orderBy, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v3/SalesOrders/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"&customerId=" + (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"&status=" + (status==null? "" : System.Uri.EscapeDataString(status))+"&modifiedSince=" + modifiedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&pageSize="+pageSize+"&pageIndex="+pageIndex+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SalesOrderListDtoPagedResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete an existing sales order
		/// If-Match header represents a version of Sales Order to be modified and must be included in request.
		/// Value of current version is included in GET /salesorders/{type}/{orderId} and modification endpoints on that resource as ETag header.
		/// SalesOrders_Delete_typeorderId api/v3/SalesOrders/{type}/{orderId}
		/// </summary>
		/// <param name="type">The type of the order to delete</param>
		/// <param name="orderId">The order number to delete</param>
		public async Task SalesOrders_Delete_typeorderIdAsync(string type, string orderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v3/SalesOrders/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets information about a single sales order
		/// The expand query parameter corresponds to sections in the Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderDto.
		/// If an expand value is not specified it will not be filled and returned in the response object.
		/// 
		/// Sample request:
		/// 
		/// `GET /salesorders/SO/000100?expand=customer,payment`
		/// SalesOrders_GetItemAsync_typeorderId api/v3/SalesOrders/{type}/{orderId}
		/// </summary>
		/// <param name="type">The type of sales order to get</param>
		/// <param name="orderId">The id of the sales order to get</param>
		/// <param name="expand">An optional specification of what details to include about the sales order. The default value if not supplied is "None"</param>
		/// <returns>A Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderDto if found and accessible</returns>
		public async Task<SalesOrderDto> SalesOrders_GetItemAsync_typeorderIdAsync(string type, string orderId, SalesOrderExpansions[] expand, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v3/SalesOrders/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"&"+string.Join("&", expand.Select(z => $"expand={z}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SalesOrderDto>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Make modifications to an existing sales order
		/// If-Match header represents a version of Sales Order to be modified and must be included in request.
		/// Value of current version is included in GET /salesorders/{type}/{orderId} and modification endpoints on that resource as ETag header.
		/// SalesOrders_Patch_typeorderId api/v3/SalesOrders/{type}/{orderId}
		/// </summary>
		/// <param name="type">The type of the order to make modifications to</param>
		/// <param name="orderId">The order number to make modifications to</param>
		/// <param name="requestBody">Data to change about the sales order</param>
		public async Task SalesOrders_Patch_typeorderIdAsync(string type, string orderId, PatchSalesOrderCommand requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v3/SalesOrders/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets commission information for a single sales order
		/// Sample request:
		/// 
		/// `GET /salesorders/SO/000101/commissions`
		/// SalesOrders_GetItemCommissions_typeorderIdcommissions api/v3/SalesOrders/{type}/{orderId}/commissions
		/// </summary>
		/// <param name="type">The type of sales order to get</param>
		/// <param name="orderId">The id of the sales order to get</param>
		/// <returns>A Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderCommissionDto if found and accessible</returns>
		public async Task<SalesOrderCommissionDto[]> SalesOrders_GetItemCommissions_typeorderIdcommissionsAsync(string type, string orderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v3/SalesOrders/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/commissions";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SalesOrderCommissionDto[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets discount details information for a single sales order
		/// Sample request:
		/// 
		/// `GET /salesorders/SO/000101/discounts`
		/// SalesOrders_GetItemDiscounts_typeorderIddiscounts api/v3/SalesOrders/{type}/{orderId}/discounts
		/// </summary>
		/// <param name="type">The type of sales order to get</param>
		/// <param name="orderId">The id of the sales order to get</param>
		/// <returns>A list of Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderDiscountDto if found and accessible</returns>
		public async Task<SalesOrderDiscountDto[]> SalesOrders_GetItemDiscounts_typeorderIddiscountsAsync(string type, string orderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v3/SalesOrders/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/discounts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SalesOrderDiscountDto[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete lines from an existing sales order
		/// If-Match header represents a version of Sales Order to be modified and must be included in request.
		/// Value of current version is included in GET /salesorders/{type}/{orderId} and modification endpoints on that resource as ETag header.
		/// SalesOrders_DeleteLines_typeorderIdlines api/v3/SalesOrders/{type}/{orderId}/lines
		/// </summary>
		/// <param name="type">The type of the order to make modifications to</param>
		/// <param name="orderId">The order number to make modifications to</param>
		/// <param name="ids">Lines to delete with comma seprator. Limit of line ids is 1000.</param>
		public async Task SalesOrders_DeleteLines_typeorderIdlinesAsync(string type, string orderId, int[] ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v3/SalesOrders/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/lines&"+string.Join("&", ids.Select(z => $"ids={z}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets sales order lines for a single sales order
		/// Sample request:
		/// 
		/// `GET /salesorders/SO/000101/lines`
		/// SalesOrders_GetItemLines_typeorderIdlines api/v3/SalesOrders/{type}/{orderId}/lines
		/// </summary>
		/// <param name="type">The type of sales order to get</param>
		/// <param name="orderId">The id of the sales order to get</param>
		/// <param name="pageSize">The number of lines retrieved per page, defaults to 1000 if not specified</param>
		/// <param name="pageIndex">The zero based page index to retrieve, defaults to 0 if not specified</param>
		/// <returns>A Visma.net.ERP.SalesOrders.Api.Dto.PagedResult`1 object if sales order is found and accessible</returns>
		public async Task<SalesOrderLineDtoPagedResult> SalesOrders_GetItemLines_typeorderIdlinesAsync(string type, string orderId, int pageSize, int pageIndex, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v3/SalesOrders/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/lines&pageSize="+pageSize+"&pageIndex="+pageIndex;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SalesOrderLineDtoPagedResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Make modifications to an existing sales order lines
		/// If-Match header represents a version of Sales Order to be modified and must be included in request.
		/// Value of current version is included in GET /salesorders/{type}/{orderId} and modification endpoints on that resource as ETag header.
		/// SalesOrders_PatchLines_typeorderIdlines api/v3/SalesOrders/{type}/{orderId}/lines
		/// </summary>
		/// <param name="type">The type of the order to make modifications to</param>
		/// <param name="orderId">The order number to make modifications to</param>
		/// <param name="requestBody">Data to change about the sales order lines</param>
		public async Task SalesOrders_PatchLines_typeorderIdlinesAsync(string type, string orderId, PatchSalesOrderLinesCommand requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v3/SalesOrders/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/lines";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Adds new lines to a existing sales order in the system
		/// If-Match header represents a version of Sales Order to be modified and must be included in request.
		/// Value of current version is included in GET /salesorders/{type}/{orderId} and modification endpoints on that resource as ETag header.
		/// SalesOrders_AddLines_typeorderIdlines api/v3/SalesOrders/{type}/{orderId}/lines
		/// </summary>
		/// <param name="requestBody">Information about the lines to create</param>
		public async Task SalesOrders_AddLines_typeorderIdlinesAsync(string type, string orderId, AddSalesOrderLinesCommand requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v3/SalesOrders/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/lines";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a specific sales order line for a single sales order
		/// Sample request:
		/// 
		/// `GET /salesorders/SO/000101/lines/1`
		/// SalesOrders_GetItemLine_typeorderIdlineslineId api/v3/SalesOrders/{type}/{orderId}/lines/{lineId}
		/// </summary>
		/// <param name="type">The type of sales order to get</param>
		/// <param name="orderId">The id of the sales order to get</param>
		/// <param name="lineId">The id of the line to get</param>
		/// <returns>A Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderLineDto object if sales order line is found and accessible</returns>
		public async Task<SalesOrderLineDto> SalesOrders_GetItemLine_typeorderIdlineslineIdAsync(string type, string orderId, int lineId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v3/SalesOrders/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/lines/"+lineId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SalesOrderLineDto>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets ROT/RUT information for a single sales order
		/// Sample request:
		/// 
		/// `GET /salesorders/SO/000123/rotrut`
		/// SalesOrders_GetItemRotRut_typeorderIdrotrut api/v3/SalesOrders/{type}/{orderId}/rotrut
		/// </summary>
		/// <param name="type">The type of sales order to get</param>
		/// <param name="orderId">The id of the sales order to get</param>
		/// <returns>A Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderRotRutDto if found and accessible</returns>
		public async Task<SalesOrderRotRutDto> SalesOrders_GetItemRotRut_typeorderIdrotrutAsync(string type, string orderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v3/SalesOrders/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/rotrut";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SalesOrderRotRutDto>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets shipment information for a single sales order
		/// Sample request:
		/// 
		/// `GET /salesorders/SO/000101/shipment`
		/// SalesOrders_GetSalesOrderShipment_typeorderIdshipment api/v3/SalesOrders/{type}/{orderId}/shipment
		/// </summary>
		/// <param name="type">The type of sales order to get</param>
		/// <param name="orderId">The id of the sales order to get</param>
		/// <returns>A list of Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderShipmentDto if found and accessible</returns>
		public async Task<SalesOrderShipmentDto[]> SalesOrders_GetSalesOrderShipment_typeorderIdshipmentAsync(string type, string orderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v3/SalesOrders/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/shipment";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SalesOrderShipmentDto[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets tax information for a single sales order
		/// Sample request:
		/// 
		/// `GET /salesorders/SO/000101/tax`
		/// SalesOrders_GetItemTax_typeorderIdtax api/v3/SalesOrders/{type}/{orderId}/tax
		/// </summary>
		/// <param name="type">The type of sales order to get</param>
		/// <param name="orderId">The id of the sales order to get</param>
		/// <returns>A list of Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderTaxDto if found and accessible</returns>
		public async Task<SalesOrderTaxDto[]> SalesOrders_GetItemTax_typeorderIdtaxAsync(string type, string orderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v3/SalesOrders/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/tax";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SalesOrderTaxDto[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
