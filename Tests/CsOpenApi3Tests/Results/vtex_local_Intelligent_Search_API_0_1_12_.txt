//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutocompleteSearchSuggestions
	{
		
		/// <summary>
		/// List of suggested facets and terms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searches")]
		public AutocompleteSearchSuggestionsSearches[] AutocompleteSearchSuggestionsSearches { get; set; }
	}
	
	public class AutocompleteSearchSuggestionsSearches
	{
		
		/// <summary>
		/// List of facets in which the term can be searched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public AutocompleteSearchSuggestionsSearchesAttributes[] AutocompleteSearchSuggestionsSearchesAttributes { get; set; }
		
		/// <summary>
		/// Number of times the term was searched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Double> Count { get; set; }
		
		/// <summary>
		/// Search term.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
	}
	
	public class AutocompleteSearchSuggestionsSearchesAttributes
	{
		
		/// <summary>
		/// Facet key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Human-readable format of the facet key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelKey")]
		public string LabelKey { get; set; }
		
		/// <summary>
		/// Human-readable format of the facet value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelValue")]
		public string LabelValue { get; set; }
		
		/// <summary>
		/// Facet value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Banners
	{
		
		[System.Runtime.Serialization.DataMember(Name="banners")]
		public BannersBanners1[] BannersBanners1 { get; set; }
	}
	
	public class BannersBanners1
	{
		
		/// <summary>
		/// Banner area.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="area")]
		public string Area { get; set; }
		
		/// <summary>
		/// Banner HTML.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="html")]
		public string Html { get; set; }
		
		/// <summary>
		/// Banner id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Banner name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Correction
	{
		
		/// <summary>
		/// Object that indicates if the term was misspelled and suggests a possible correction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correction")]
		public CorrectionCorrection1 Correction1 { get; set; }
	}
	
	public class CorrectionCorrection1
	{
		
		/// <summary>
		/// Whether the API was able to suggest a correction (`true`) or not (`false`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correction")]
		public System.Nullable<System.Boolean> Correction { get; set; }
		
		/// <summary>
		/// The same as `text`, but it highlights the corrected word. Useful when there is more than one word.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="highlighted")]
		public string Highlighted { get; set; }
		
		/// <summary>
		/// Whether the term was misspelled (`true`) or not (`false`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="misspelled")]
		public System.Nullable<System.Boolean> Misspelled { get; set; }
		
		/// <summary>
		/// The corrected term. If the API was not able to correct the term, it will show the original search term.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Error
	{
		
		/// <summary>
		/// Error message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Error stack trace
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stack")]
		public string Stack { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Facets
	{
		
		/// <summary>
		/// Generated breadcrumb for the given query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="breadcrumb")]
		public FacetsBreadcrumb[] FacetsBreadcrumb { get; set; }
		
		/// <summary>
		/// List of facets
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="facets")]
		public FacetsFacets1[] FacetsFacets1 { get; set; }
		
		/// <summary>
		/// Term and facets used in the query
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryArgs")]
		public FacetsQueryArgs QueryArgs { get; set; }
		
		/// <summary>
		/// Indicates whether there was sampling in the aggregation of facets or not. In search results that have many products, only the first 30000 will be aggregated to avoid performance issues.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sampling")]
		public System.Nullable<System.Boolean> Sampling { get; set; }
	}
	
	public class FacetsBreadcrumb
	{
		
		/// <summary>
		/// Query link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// Human-readable format of the facet key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class FacetsFacets1
	{
		
		/// <summary>
		/// Whether the client-side should hide the facet (`true`) or not (`false`)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hidden")]
		public System.Nullable<System.Boolean> Hidden { get; set; }
		
		/// <summary>
		/// Human-readable format of the facet key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Number of possible values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		/// <summary>
		/// Facet type
		/// - `TEXT` - The value is a simple text.
		/// - `PRICERANGE` - The value contains the property `range` representing the minimum and the maximum price for the query.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<FacetsFacets1Type> Type { get; set; }
		
		/// <summary>
		/// Possible values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public FacetsFacets1Values[] FacetsFacets1Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FacetsFacets1Type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TEXT")]
		TEXT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRICERANGE")]
		PRICERANGE = 1,
	}
	
	public class FacetsFacets1Values
	{
		
		/// <summary>
		/// Value id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Facet key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Human-readable format of the facet value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Number of resulting products.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		/// <summary>
		/// Whether the value is selected (`true`) or not (`false`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selected")]
		public System.Nullable<System.Boolean> Selected { get; set; }
		
		/// <summary>
		/// Facet value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class FacetsQueryArgs
	{
		
		/// <summary>
		/// Search term used in the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
		
		/// <summary>
		/// Facets used in the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectedFacets")]
		public FacetsQueryArgsSelectedFacets[] FacetsQueryArgsSelectedFacets { get; set; }
	}
	
	public class FacetsQueryArgsSelectedFacets
	{
		
		/// <summary>
		/// facet key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// facet value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductSearch
	{
		
		/// <summary>
		/// Object with information of misspelled terms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correction")]
		public ProductSearchCorrection Correction { get; set; }
		
		/// <summary>
		/// Indicates how the search engine corrected the misspelled word by using fuzzy logic. It can be a number representing the max number of misspelled letters, or the string `auto` suggesting that the search-engine should set this value by itself.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fuzzy")]
		public string Fuzzy { get; set; }
		
		/// <summary>
		/// Indicates how the search-engine dealt with the fullText when there is more than one word.
		/// * `and` - It means that the products contains all the words in the query.
		/// * `or` - It means that the results will contain at least one word from the original search query. If `and` was not possible, `or` will be the fallback.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public System.Nullable<ProductSearchOperator> Operator { get; set; }
		
		/// <summary>
		/// List of products
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="products")]
		public string[] Products { get; set; }
		
		/// <summary>
		/// Total number of products.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recordsFiltered")]
		public System.Nullable<System.Double> RecordsFiltered { get; set; }
		
		/// <summary>
		/// Whether the list of products was translated by the IS (`true`) or not (`false`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="translated")]
		public System.Nullable<System.Boolean> Translated { get; set; }
	}
	
	public class ProductSearchCorrection
	{
		
		/// <summary>
		/// Whether the term is misspelled (`true`) or not (`false`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="misspelled")]
		public System.Nullable<System.Boolean> Misspelled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProductSearchOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="and")]
		and = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="or")]
		or = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchSuggestions
	{
		
		/// <summary>
		/// List of suggested terms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searches")]
		public SearchSuggestionsSearches[] SearchSuggestionsSearches { get; set; }
	}
	
	public class SearchSuggestionsSearches
	{
		
		/// <summary>
		/// Number of times the term was searched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Double> Count { get; set; }
		
		/// <summary>
		/// Search term.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TopSearches
	{
		
		/// <summary>
		/// A list of the 10 most searched terms.
		/// Minimum items: 10
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searches")]
		[System.ComponentModel.DataAnnotations.MinLength(10)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public TopSearchesSearches[] TopSearchesSearches { get; set; }
	}
	
	public class TopSearchesSearches
	{
		
		/// <summary>
		/// Number of times the term was searched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Double> Count { get; set; }
		
		/// <summary>
		/// Search term.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get list of suggested terms and attributes similar to the search term
		/// Lists the suggested terms and attributes similar to the search term.
		/// Autocomplete_suggestionsGetByQueryAndLocale autocomplete_suggestions
		/// </summary>
		/// <param name="query">Search term. It can contain any character.</param>
		/// <param name="locale">Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language.</param>
		/// <returns>OK</returns>
		public async Task<AutocompleteSearchSuggestions> Autocomplete_suggestionsGetByQueryAndLocaleAsync(string query, string locale, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "autocomplete_suggestions?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AutocompleteSearchSuggestions>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get list of banners registered for query
		/// Lists the banners registered for a given query. Check the [configuring banners documentation](https://help.vtex.com/en/tracks/vtex-intelligent-search--19wrbB7nEQcmwzDPl1l4Cb/4ViKEivLJtJsvpaW0aqIQ5) for a full explanation of the banner feature.
		/// Banners_facetsGetByQueryAndLocale banners/{facets}
		/// </summary>
		/// <param name="query">Search term. It can contain any character.</param>
		/// <param name="facets"># Format
		///
		///The `facets` parameter follows the format : `/${facetKey1}/${facetValue1}/${facetKey2}/${facetValue2}/.../${facetKeyN}/${facetValueN}`.
		///
		///The order in which the terms appear is not relevant to the search.
		///
		///You can also repeat the same `facetKey` several times for different values. For example: `category-1/shoes/color/blue/color/red/color/yellow`
		///
		///# General filters
		///
		///The `facets` parameter also allows the following general filters.
		///
		///| `facetKey`      | Description                                                                                      | Example                                                                  |
		///| --------------- | ------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------ |
		///| `price`         | Filter the search by a price range. The facet value follows the format `${minPrice}:${maxPrice}` | `/color/blue/price/100:500?query=shirt`                                  |
		///| `category-${n}` | Filter the search by category, where `n` represents the category tree level (1 = department, 2 = category, 3 = subcategory, and so on) | `category-1/clothing/category-2/shirts`                                  |
		///| `region-id`     | Filter the search by a region id (aka regionalization). The value is the region id               | `/color/blue/region-id/v2.26219C7C3DE42BAAD11CFB92CD0BFE91?query=shirt`. |
		///</param>
		/// <param name="locale">Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language.</param>
		/// <returns>OK</returns>
		public async Task<Banners> Banners_facetsGetByQueryAndLocaleAsync(string query, string facets, string locale, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "banners/"+ (facets==null? "" : System.Uri.EscapeDataString(facets))+"?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Banners>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get attempt of correction of a misspelled term
		/// Tries to correct a misspelled term from the search.
		/// Correction_searchGetByQueryAndLocale correction_search
		/// </summary>
		/// <param name="query">Search term. It can contain any character.</param>
		/// <param name="locale">Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language.</param>
		/// <returns>OK</returns>
		public async Task<Correction> Correction_searchGetByQueryAndLocaleAsync(string query, string locale, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "correction_search?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Correction>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get list of the possible facets for a given query
		/// Lists the possible facets for a given query
		/// Facets_facetsGetByQueryAndLocaleAndHideUnavailableItems facets/{facets}
		/// </summary>
		/// <param name="facets"># Format
		///
		///The `facets` parameter follows the format : `/${facetKey1}/${facetValue1}/${facetKey2}/${facetValue2}/.../${facetKeyN}/${facetValueN}`.
		///
		///The order in which the terms appear is not relevant to the search.
		///
		///You can also repeat the same `facetKey` several times for different values. For example: `category-1/shoes/color/blue/color/red/color/yellow`
		///
		///# General filters
		///
		///The `facets` parameter also allows the following general filters.
		///
		///| `facetKey`      | Description                                                                                      | Example                                                                  |
		///| --------------- | ------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------ |
		///| `price`         | Filter the search by a price range. The facet value follows the format `${minPrice}:${maxPrice}` | `/color/blue/price/100:500?query=shirt`                                  |
		///| `category-${n}` | Filter the search by category, where `n` represents the category tree level (1 = department, 2 = category, 3 = subcategory, and so on) | `category-1/clothing/category-2/shirts`                                  |
		///| `region-id`     | Filter the search by a region id (aka regionalization). The value is the region id               | `/color/blue/region-id/v2.26219C7C3DE42BAAD11CFB92CD0BFE91?query=shirt`. |
		///</param>
		/// <param name="query">Search term. It can contain any character.</param>
		/// <param name="locale">Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language.</param>
		/// <param name="hideUnavailableItems">Whether the result should hide unavailable items (`true`), or not (`false`)</param>
		/// <returns>List of facets for the given query.</returns>
		public async Task<Facets> Facets_facetsGetByQueryAndLocaleAndHideUnavailableItemsAsync(string facets, string query, string locale, bool hideUnavailableItems, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "facets/"+ (facets==null? "" : System.Uri.EscapeDataString(facets))+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale))+"&hideUnavailableItems="+hideUnavailableItems;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Facets>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get list of products for a query
		/// Lists the products for a given query.
		/// Product_search_facetsGetByQueryAndSimulationBehaviorAndCountAndPageAndSortAndLocaleAndHideUnavailableItems product_search/{facets}
		/// </summary>
		/// <param name="facets"># Format
		///
		///The `facets` parameter follows the format : `/${facetKey1}/${facetValue1}/${facetKey2}/${facetValue2}/.../${facetKeyN}/${facetValueN}`.
		///
		///The order in which the terms appear is not relevant to the search.
		///
		///You can also repeat the same `facetKey` several times for different values. For example: `category-1/shoes/color/blue/color/red/color/yellow`
		///
		///# General filters
		///
		///The `facets` parameter also allows the following general filters.
		///
		///| `facetKey`      | Description                                                                                      | Example                                                                  |
		///| --------------- | ------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------ |
		///| `price`         | Filter the search by a price range. The facet value follows the format `${minPrice}:${maxPrice}` | `/color/blue/price/100:500?query=shirt`                                  |
		///| `category-${n}` | Filter the search by category, where `n` represents the category tree level (1 = department, 2 = category, 3 = subcategory, and so on) | `category-1/clothing/category-2/shirts`                                  |
		///| `region-id`     | Filter the search by a region id (aka regionalization). The value is the region id               | `/color/blue/region-id/v2.26219C7C3DE42BAAD11CFB92CD0BFE91?query=shirt`. |
		///</param>
		/// <param name="query">Search term. It can contain any character.</param>
		/// <param name="simulationBehavior">Defines the simulation behavior.
		///
		/// * `default` - Calls the simulation for every single seller.
		/// * `skip` - Never calls the simulation.
		/// * `only1P` - Only calls the simulation for first party sellers.</param>
		/// <param name="count">Number of products per page.</param>
		/// <param name="page">Current search page.</param>
		/// <param name="sort">Defines the sort type. If null, the products will be sorted by relevance.</param>
		/// <param name="locale">Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language.</param>
		/// <param name="hideUnavailableItems">Whether the result should hide unavailable items (`true`), or not (`false`)</param>
		/// <returns>List of products for the given query.</returns>
		public async Task<ProductSearch> Product_search_facetsGetByQueryAndSimulationBehaviorAndCountAndPageAndSortAndLocaleAndHideUnavailableItemsAsync(string facets, string query, Product_search_facetsGetByQueryAndSimulationBehaviorAndCountAndPageAndSortAndLocaleAndHideUnavailableItemsSimulationBehavior simulationBehavior, double count, double page, Product_search_facetsGetByQueryAndSimulationBehaviorAndCountAndPageAndSortAndLocaleAndHideUnavailableItemsSort sort, string locale, bool hideUnavailableItems, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product_search/"+ (facets==null? "" : System.Uri.EscapeDataString(facets))+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&simulationBehavior=" + simulationBehavior+"&count="+count+"&page="+page+"&sort=" + sort+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale))+"&hideUnavailableItems="+hideUnavailableItems;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductSearch>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get list of suggested terms similar to the search term
		/// Lists suggested terms similar to the search term.
		/// Search_suggestionsGetByQueryAndLocale search_suggestions
		/// </summary>
		/// <param name="query">Search term. It can contain any character.</param>
		/// <param name="locale">Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language.</param>
		/// <returns>OK</returns>
		public async Task<SearchSuggestions> Search_suggestionsGetByQueryAndLocaleAsync(string query, string locale, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search_suggestions?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchSuggestions>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get list of the 10 most searched terms
		/// Lists the 10 most searched terms.
		/// Top_searchesGetByLocale top_searches
		/// </summary>
		/// <param name="locale">Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language.</param>
		/// <returns>OK</returns>
		public async Task<TopSearches> Top_searchesGetByLocaleAsync(string locale, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "top_searches?locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TopSearches>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum Product_search_facetsGetByQueryAndSimulationBehaviorAndCountAndPageAndSortAndLocaleAndHideUnavailableItemsSimulationBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="skip")]
		skip = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="only1P")]
		only1P = 2,
	}
	
	public enum Product_search_facetsGetByQueryAndSimulationBehaviorAndCountAndPageAndSortAndLocaleAndHideUnavailableItemsSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="price:desc")]
		pricedesc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="price:asc")]
		priceasc = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="orders:desc")]
		ordersdesc = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="name:desc")]
		namedesc = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="name:asc")]
		nameasc = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="release:desc")]
		releasedesc = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="discount:desc")]
		discountdesc = 6,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
