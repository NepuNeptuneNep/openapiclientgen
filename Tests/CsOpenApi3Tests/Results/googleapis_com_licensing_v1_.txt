//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Empty
	{
	}
	
	/// <summary>
	/// Representation of a license assignment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LicenseAssignment
	{
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etags")]
		public string Etags { get; set; }
		
		/// <summary>
		/// Identifies the resource as a LicenseAssignment, which is `licensing#licenseAssignment`.
		/// </summary>
		[System.ComponentModel.DefaultValue("licensing#licenseAssignment")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "licensing#licenseAssignment";
		
		/// <summary>
		/// A product's unique identifier. For more information about products in this version of the API, see Product and SKU IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Display Name of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productName")]
		public string ProductName { get; set; }
		
		/// <summary>
		/// Link to this page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skuId")]
		public string SkuId { get; set; }
		
		/// <summary>
		/// Display Name of the sku of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skuName")]
		public string SkuName { get; set; }
		
		/// <summary>
		/// The user's current primary email address. If the user's email address changes, use the new email address in your API requests. Since a `userId` is subject to change, do not use a `userId` value as a key for persistent data. This key could break if the current user's email address changes. If the `userId` is suspended, the license status changes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	/// <summary>
	/// Representation of a license assignment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LicenseAssignmentInsert
	{
		
		/// <summary>
		/// Email id of the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LicenseAssignmentList
	{
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The LicenseAssignments in this page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public LicenseAssignment[] Items { get; set; }
		
		/// <summary>
		/// Identifies the resource as a collection of LicenseAssignments.
		/// </summary>
		[System.ComponentModel.DefaultValue("licensing#licenseAssignmentList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "licensing#licenseAssignmentList";
		
		/// <summary>
		/// The token that you must submit in a subsequent request to retrieve additional license results matching your query parameters. The `maxResults` query string is related to the `nextPageToken` since `maxResults` determines how many entries are returned on each next page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Assign a license.
		/// Licensing_licenseAssignments_insert apps/licensing/v1/product/{productId}/sku/{skuId}/user
		/// </summary>
		/// <param name="productId">A product's unique identifier. For more information about products in this version of the API, see Products and SKUs.</param>
		/// <param name="skuId">A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs.</param>
		/// <returns>Successful response</returns>
		public async Task<LicenseAssignment> Licensing_licenseAssignments_insertAsync(string productId, string skuId, LicenseAssignmentInsert requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/licensing/v1/product/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/sku/"+ (skuId==null? "" : System.Uri.EscapeDataString(skuId))+"/user";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LicenseAssignment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Revoke a license.
		/// Licensing_licenseAssignments_delete apps/licensing/v1/product/{productId}/sku/{skuId}/user/{userId}
		/// </summary>
		/// <param name="productId">A product's unique identifier. For more information about products in this version of the API, see Products and SKUs.</param>
		/// <param name="skuId">A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs.</param>
		/// <param name="userId">The user's current primary email address. If the user's email address changes, use the new email address in your API requests. Since a `userId` is subject to change, do not use a `userId` value as a key for persistent data. This key could break if the current user's email address changes. If the `userId` is suspended, the license status changes.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Licensing_licenseAssignments_deleteAsync(string productId, string skuId, string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/licensing/v1/product/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/sku/"+ (skuId==null? "" : System.Uri.EscapeDataString(skuId))+"/user/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific user's license by product SKU.
		/// Licensing_licenseAssignments_get apps/licensing/v1/product/{productId}/sku/{skuId}/user/{userId}
		/// </summary>
		/// <param name="productId">A product's unique identifier. For more information about products in this version of the API, see Products and SKUs.</param>
		/// <param name="skuId">A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs.</param>
		/// <param name="userId">The user's current primary email address. If the user's email address changes, use the new email address in your API requests. Since a `userId` is subject to change, do not use a `userId` value as a key for persistent data. This key could break if the current user's email address changes. If the `userId` is suspended, the license status changes.</param>
		/// <returns>Successful response</returns>
		public async Task<LicenseAssignment> Licensing_licenseAssignments_getAsync(string productId, string skuId, string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/licensing/v1/product/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/sku/"+ (skuId==null? "" : System.Uri.EscapeDataString(skuId))+"/user/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LicenseAssignment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reassign a user's product SKU with a different SKU in the same product. This method supports patch semantics.
		/// Licensing_licenseAssignments_patch apps/licensing/v1/product/{productId}/sku/{skuId}/user/{userId}
		/// </summary>
		/// <param name="productId">A product's unique identifier. For more information about products in this version of the API, see Products and SKUs.</param>
		/// <param name="skuId">A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs.</param>
		/// <param name="userId">The user's current primary email address. If the user's email address changes, use the new email address in your API requests. Since a `userId` is subject to change, do not use a `userId` value as a key for persistent data. This key could break if the current user's email address changes. If the `userId` is suspended, the license status changes.</param>
		/// <returns>Successful response</returns>
		public async Task<LicenseAssignment> Licensing_licenseAssignments_patchAsync(string productId, string skuId, string userId, LicenseAssignment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/licensing/v1/product/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/sku/"+ (skuId==null? "" : System.Uri.EscapeDataString(skuId))+"/user/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LicenseAssignment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Reassign a user's product SKU with a different SKU in the same product.
		/// Licensing_licenseAssignments_update apps/licensing/v1/product/{productId}/sku/{skuId}/user/{userId}
		/// </summary>
		/// <param name="productId">A product's unique identifier. For more information about products in this version of the API, see Products and SKUs.</param>
		/// <param name="skuId">A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs.</param>
		/// <param name="userId">The user's current primary email address. If the user's email address changes, use the new email address in your API requests. Since a `userId` is subject to change, do not use a `userId` value as a key for persistent data. This key could break if the current user's email address changes. If the `userId` is suspended, the license status changes.</param>
		/// <returns>Successful response</returns>
		public async Task<LicenseAssignment> Licensing_licenseAssignments_updateAsync(string productId, string skuId, string userId, LicenseAssignment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/licensing/v1/product/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/sku/"+ (skuId==null? "" : System.Uri.EscapeDataString(skuId))+"/user/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LicenseAssignment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all users assigned licenses for a specific product SKU.
		/// Licensing_licenseAssignments_listForProductAndSku apps/licensing/v1/product/{productId}/sku/{skuId}/users
		/// </summary>
		/// <param name="productId">A product's unique identifier. For more information about products in this version of the API, see Products and SKUs.</param>
		/// <param name="skuId">A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs.</param>
		/// <param name="customerId">The customer's unique ID as defined in the Admin console, such as `C00000000`. If the customer is suspended, the server returns an error.</param>
		/// <param name="maxResults">The `maxResults` query string determines how many entries are returned on each page of a large response. This is an optional parameter. The value must be a positive number.</param>
		/// <param name="pageToken">Token to fetch the next page of data. The `maxResults` query string is related to the `pageToken` since `maxResults` determines how many entries are returned on each page. This is an optional query string. If not specified, the server returns the first page.</param>
		/// <returns>Successful response</returns>
		public async Task<LicenseAssignmentList> Licensing_licenseAssignments_listForProductAndSkuAsync(string productId, string skuId, string customerId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/licensing/v1/product/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/sku/"+ (skuId==null? "" : System.Uri.EscapeDataString(skuId))+"/users&customerId=" + (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LicenseAssignmentList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all users assigned licenses for a specific product SKU.
		/// Licensing_licenseAssignments_listForProduct apps/licensing/v1/product/{productId}/users
		/// </summary>
		/// <param name="productId">A product's unique identifier. For more information about products in this version of the API, see Products and SKUs.</param>
		/// <param name="customerId">The customer's unique ID as defined in the Admin console, such as `C00000000`. If the customer is suspended, the server returns an error.</param>
		/// <param name="maxResults">The `maxResults` query string determines how many entries are returned on each page of a large response. This is an optional parameter. The value must be a positive number.</param>
		/// <param name="pageToken">Token to fetch the next page of data. The `maxResults` query string is related to the `pageToken` since `maxResults` determines how many entries are returned on each page. This is an optional query string. If not specified, the server returns the first page.</param>
		/// <returns>Successful response</returns>
		public async Task<LicenseAssignmentList> Licensing_licenseAssignments_listForProductAsync(string productId, string customerId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/licensing/v1/product/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/users&customerId=" + (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LicenseAssignmentList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
